
USB_VirtualCommPortRXTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062dc  080062dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e4  080062e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080062ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018d8  200001e0  080064cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001ab8  080064cc  00021ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a4a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a40  00000000  00000000  00031c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  000346a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  000351a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018776  00000000  00000000  00035b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0f7  00000000  00000000  0004e2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086702  00000000  00000000  0005a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0ad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  000e0b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e0 	.word	0x200001e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800626c 	.word	0x0800626c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e4 	.word	0x200001e4
 80001d4:	0800626c 	.word	0x0800626c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f94d 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f004 fff8 	bl	8005500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f965 	bl	800080a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f92d 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000118 	.word	0x20000118
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	2000020c 	.word	0x2000020c

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000020c 	.word	0x2000020c

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_EnableIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff29 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff3e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff31 	bl	8000664 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	e159      	b.n	8000af4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000840:	2201      	movs	r2, #1
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 8148 	bne.w	8000aee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d00b      	beq.n	800087e <HAL_GPIO_Init+0x5a>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d007      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000872:	2b11      	cmp	r3, #17
 8000874:	d003      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b12      	cmp	r3, #18
 800087c:	d130      	bne.n	80008e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	f003 0201 	and.w	r2, r3, #1
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d003      	beq.n	8000920 <HAL_GPIO_Init+0xfc>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b12      	cmp	r3, #18
 800091e:	d123      	bne.n	8000968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	08da      	lsrs	r2, r3, #3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3208      	adds	r2, #8
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	69b9      	ldr	r1, [r7, #24]
 8000964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0203 	and.w	r2, r3, #3
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80a2 	beq.w	8000aee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <HAL_GPIO_Init+0x2e4>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a55      	ldr	r2, [pc, #340]	; (8000b08 <HAL_GPIO_Init+0x2e4>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <HAL_GPIO_Init+0x2e4>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c6:	4a51      	ldr	r2, [pc, #324]	; (8000b0c <HAL_GPIO_Init+0x2e8>)
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a48      	ldr	r2, [pc, #288]	; (8000b10 <HAL_GPIO_Init+0x2ec>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d019      	beq.n	8000a26 <HAL_GPIO_Init+0x202>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a47      	ldr	r2, [pc, #284]	; (8000b14 <HAL_GPIO_Init+0x2f0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d013      	beq.n	8000a22 <HAL_GPIO_Init+0x1fe>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <HAL_GPIO_Init+0x2f4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d00d      	beq.n	8000a1e <HAL_GPIO_Init+0x1fa>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a45      	ldr	r2, [pc, #276]	; (8000b1c <HAL_GPIO_Init+0x2f8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d007      	beq.n	8000a1a <HAL_GPIO_Init+0x1f6>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <HAL_GPIO_Init+0x2fc>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_GPIO_Init+0x1f2>
 8000a12:	2304      	movs	r3, #4
 8000a14:	e008      	b.n	8000a28 <HAL_GPIO_Init+0x204>
 8000a16:	2307      	movs	r3, #7
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x204>
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e004      	b.n	8000a28 <HAL_GPIO_Init+0x204>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_Init+0x204>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x204>
 8000a26:	2300      	movs	r3, #0
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	f002 0203 	and.w	r2, r2, #3
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a38:	4934      	ldr	r1, [pc, #208]	; (8000b0c <HAL_GPIO_Init+0x2e8>)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6a:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a94:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9a:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000abe:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	f67f aea2 	bls.w	8000840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000afc:	bf00      	nop
 8000afe:	3724      	adds	r7, #36	; 0x24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40013c00 	.word	0x40013c00

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b44:	e003      	b.n	8000b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	041a      	lsls	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	619a      	str	r2, [r3, #24]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	695a      	ldr	r2, [r3, #20]
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d104      	bne.n	8000b7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b74:	887b      	ldrh	r3, [r7, #2]
 8000b76:	041a      	lsls	r2, r3, #16
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	b08f      	sub	sp, #60	; 0x3c
 8000b94:	af0a      	add	r7, sp, #40	; 0x28
 8000b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e10f      	b.n	8000dc2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d106      	bne.n	8000bc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f004 fe2b 	bl	8005818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 feae 	bl	8002942 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	687e      	ldr	r6, [r7, #4]
 8000bee:	466d      	mov	r5, sp
 8000bf0:	f106 0410 	add.w	r4, r6, #16
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c04:	1d33      	adds	r3, r6, #4
 8000c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c08:	6838      	ldr	r0, [r7, #0]
 8000c0a:	f001 fd85 	bl	8002718 <USB_CoreInit>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2202      	movs	r2, #2
 8000c18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e0d0      	b.n	8000dc2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fe9c 	bl	8002964 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e04a      	b.n	8000cc8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	333d      	adds	r3, #61	; 0x3d
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	333c      	adds	r3, #60	; 0x3c
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c5a:	7bfa      	ldrb	r2, [r7, #15]
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	b298      	uxth	r0, r3
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3342      	adds	r3, #66	; 0x42
 8000c6e:	4602      	mov	r2, r0
 8000c70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c72:	7bfa      	ldrb	r2, [r7, #15]
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	333f      	adds	r3, #63	; 0x3f
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	440b      	add	r3, r1
 8000c94:	3344      	adds	r3, #68	; 0x44
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3348      	adds	r3, #72	; 0x48
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	3350      	adds	r3, #80	; 0x50
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d3af      	bcc.n	8000c32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e044      	b.n	8000d62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d1a:	7bfa      	ldrb	r2, [r7, #15]
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	1a9b      	subs	r3, r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d46:	7bfa      	ldrb	r2, [r7, #15]
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3b5      	bcc.n	8000cd8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	687e      	ldr	r6, [r7, #4]
 8000d74:	466d      	mov	r5, sp
 8000d76:	f106 0410 	add.w	r4, r6, #16
 8000d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d86:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d8a:	1d33      	adds	r3, r6, #4
 8000d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f001 fe12 	bl	80029b8 <USB_DevInit>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00d      	b.n	8000dc2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fe07 	bl	80039ce <USB_DevDisconnect>

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_PCD_Start+0x1c>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e020      	b.n	8000e28 <HAL_PCD_Start+0x5e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d109      	bne.n	8000e0a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fdc5 	bl	800399e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fd81 	bl	8002920 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b08d      	sub	sp, #52	; 0x34
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fe6c 	bl	8003b24 <USB_GetMode>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 838e 	bne.w	8001570 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fdd0 	bl	80039fe <USB_ReadInterrupts>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 8384 	beq.w	800156e <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fdc7 	bl	80039fe <USB_ReadInterrupts>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d107      	bne.n	8000e8a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f002 0202 	and.w	r2, r2, #2
 8000e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fdb5 	bl	80039fe <USB_ReadInterrupts>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e9e:	d17b      	bne.n	8000f98 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 fdbb 	bl	8003a24 <USB_ReadDevAllOutEpInterrupt>
 8000eae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000eb0:	e06f      	b.n	8000f92 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d064      	beq.n	8000f86 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fde0 	bl	8003a8c <USB_ReadDevOutEPInterrupt>
 8000ecc:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	015a      	lsls	r2, r3, #5
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fe0d 	bl	8001b0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 ff0c 	bl	8001d1c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	015a      	lsls	r2, r3, #5
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f10:	461a      	mov	r2, r3
 8000f12:	2308      	movs	r3, #8
 8000f14:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	f003 0310 	and.w	r3, r3, #16
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d008      	beq.n	8000f32 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	015a      	lsls	r2, r3, #5
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	4413      	add	r3, r2
 8000f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2310      	movs	r3, #16
 8000f30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	f003 0320 	and.w	r3, r3, #32
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d015      	beq.n	8000f68 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2101      	movs	r1, #1
 8000f52:	f002 fe2b 	bl	8003bac <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	015a      	lsls	r2, r3, #5
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f62:	461a      	mov	r2, r3
 8000f64:	2320      	movs	r3, #32
 8000f66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d009      	beq.n	8000f86 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	015a      	lsls	r2, r3, #5
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	4413      	add	r3, r2
 8000f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3301      	adds	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d18c      	bne.n	8000eb2 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fd2e 	bl	80039fe <USB_ReadInterrupts>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fac:	f040 80c4 	bne.w	8001138 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fd4f 	bl	8003a58 <USB_ReadDevAllInEpInterrupt>
 8000fba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000fc0:	e0b6      	b.n	8001130 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ab 	beq.w	8001124 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fd75 	bl	8003ac8 <USB_ReadDevInEPInterrupt>
 8000fde:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d05b      	beq.n	80010a2 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	43db      	mvns	r3, r3
 8001004:	69f9      	ldr	r1, [r7, #28]
 8001006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800100a:	4013      	ands	r3, r2
 800100c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	015a      	lsls	r2, r3, #5
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	4413      	add	r3, r2
 8001016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800101a:	461a      	mov	r2, r3
 800101c:	2301      	movs	r3, #1
 800101e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d11b      	bne.n	8001060 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3348      	adds	r3, #72	; 0x48
 8001038:	6819      	ldr	r1, [r3, #0]
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4403      	add	r3, r0
 8001048:	3344      	adds	r3, #68	; 0x44
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4419      	add	r1, r3
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4403      	add	r3, r0
 800105c:	3348      	adds	r3, #72	; 0x48
 800105e:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f004 fc57 	bl	800591a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d116      	bne.n	80010a2 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	2b00      	cmp	r3, #0
 8001078:	d113      	bne.n	80010a2 <HAL_PCD_IRQHandler+0x272>
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	3350      	adds	r3, #80	; 0x50
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d108      	bne.n	80010a2 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800109a:	461a      	mov	r2, r3
 800109c:	2101      	movs	r1, #1
 800109e:	f002 fd85 	bl	8003bac <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	015a      	lsls	r2, r3, #5
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b8:	461a      	mov	r2, r3
 80010ba:	2308      	movs	r3, #8
 80010bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	015a      	lsls	r2, r3, #5
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	4413      	add	r3, r2
 80010d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d4:	461a      	mov	r2, r3
 80010d6:	2310      	movs	r3, #16
 80010d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010f0:	461a      	mov	r2, r3
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	015a      	lsls	r2, r3, #5
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	4413      	add	r3, r2
 8001108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800110c:	461a      	mov	r2, r3
 800110e:	2302      	movs	r3, #2
 8001110:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800111c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fc67 	bl	80019f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001132:	2b00      	cmp	r3, #0
 8001134:	f47f af45 	bne.w	8000fc2 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fc5e 	bl	80039fe <USB_ReadInterrupts>
 8001142:	4603      	mov	r3, r0
 8001144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800114c:	d122      	bne.n	8001194 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001168:	2b01      	cmp	r3, #1
 800116a:	d108      	bne.n	800117e <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001174:	2100      	movs	r1, #0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fe88 	bl	8001e8c <HAL_PCDEx_LPM_Callback>
 800117c:	e002      	b.n	8001184 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f004 fc38 	bl	80059f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fc30 	bl	80039fe <USB_ReadInterrupts>
 800119e:	4603      	mov	r3, r0
 80011a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011a8:	d112      	bne.n	80011d0 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f004 fbf4 	bl	80059a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fc12 	bl	80039fe <USB_ReadInterrupts>
 80011da:	4603      	mov	r3, r0
 80011dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e4:	f040 80a7 	bne.w	8001336 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2110      	movs	r1, #16
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fd4a 	bl	8002c9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800120c:	e036      	b.n	800127c <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800121a:	461a      	mov	r2, r3
 800121c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001220:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	015a      	lsls	r2, r3, #5
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	4413      	add	r3, r2
 800122a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001232:	0151      	lsls	r1, r2, #5
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	440a      	add	r2, r1
 8001238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800123c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001240:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	015a      	lsls	r2, r3, #5
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	4413      	add	r3, r2
 800124a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800124e:	461a      	mov	r2, r3
 8001250:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001254:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	015a      	lsls	r2, r3, #5
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	4413      	add	r3, r2
 800125e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001266:	0151      	lsls	r1, r2, #5
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	440a      	add	r2, r1
 800126c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001274:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	3301      	adds	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001282:	429a      	cmp	r2, r3
 8001284:	d3c3      	bcc.n	800120e <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001294:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001298:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d016      	beq.n	80012d0 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012b2:	f043 030b 	orr.w	r3, r3, #11
 80012b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012c8:	f043 030b 	orr.w	r3, r3, #11
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	e015      	b.n	80012fc <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80012e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012f6:	f043 030b 	orr.w	r3, r3, #11
 80012fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800130a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800130e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001320:	461a      	mov	r2, r3
 8001322:	f002 fc43 	bl	8003bac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fb5f 	bl	80039fe <USB_ReadInterrupts>
 8001340:	4603      	mov	r3, r0
 8001342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800134a:	d124      	bne.n	8001396 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fbf5 	bl	8003b40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fcff 	bl	8002d5e <USB_GetDevSpeed>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681c      	ldr	r4, [r3, #0]
 800136c:	f001 f9c8 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8001370:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4620      	mov	r0, r4
 800137c:	f001 fa2e 	bl	80027dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f004 faf2 	bl	800596a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001394:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fb2f 	bl	80039fe <USB_ReadInterrupts>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	d161      	bne.n	800146e <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0210 	bic.w	r2, r2, #16
 80013b8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 020f 	and.w	r2, r3, #15
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	3304      	adds	r3, #4
 80013d8:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	0c5b      	lsrs	r3, r3, #17
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d124      	bne.n	8001430 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d035      	beq.n	800145e <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001400:	b29b      	uxth	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	6a38      	ldr	r0, [r7, #32]
 8001406:	f002 f9a7 	bl	8003758 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001416:	441a      	add	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001428:	441a      	add	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	619a      	str	r2, [r3, #24]
 800142e:	e016      	b.n	800145e <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	0c5b      	lsrs	r3, r3, #17
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	2b06      	cmp	r3, #6
 800143a:	d110      	bne.n	800145e <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001442:	2208      	movs	r2, #8
 8001444:	4619      	mov	r1, r3
 8001446:	6a38      	ldr	r0, [r7, #32]
 8001448:	f002 f986 	bl	8003758 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001458:	441a      	add	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699a      	ldr	r2, [r3, #24]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0210 	orr.w	r2, r2, #16
 800146c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fac3 	bl	80039fe <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b08      	cmp	r3, #8
 8001480:	d10a      	bne.n	8001498 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f004 fa63 	bl	800594e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f002 0208 	and.w	r2, r2, #8
 8001496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f002 faae 	bl	80039fe <USB_ReadInterrupts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ac:	d10f      	bne.n	80014ce <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f004 fabb 	bl	8005a34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80014cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fa93 	bl	80039fe <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014e2:	d10f      	bne.n	8001504 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f004 fa8e 	bl	8005a10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fa78 	bl	80039fe <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001518:	d10a      	bne.n	8001530 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f004 fa9c 	bl	8005a58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800152e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fa62 	bl	80039fe <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b04      	cmp	r3, #4
 8001542:	d115      	bne.n	8001570 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f004 fa8c 	bl	8005a74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e000      	b.n	8001570 <HAL_PCD_IRQHandler+0x740>
      return;
 800156e:	bf00      	nop
    }
  }
}
 8001570:	3734      	adds	r7, #52	; 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}

08001576 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_PCD_SetAddress+0x1a>
 800158c:	2302      	movs	r3, #2
 800158e:	e013      	b.n	80015b8 <HAL_PCD_SetAddress+0x42>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 f9d2 	bl	8003952 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	70fb      	strb	r3, [r7, #3]
 80015d2:	460b      	mov	r3, r1
 80015d4:	803b      	strh	r3, [r7, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da0f      	bge.n	8001606 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f003 020f 	and.w	r2, r3, #15
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	3338      	adds	r3, #56	; 0x38
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	3304      	adds	r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	705a      	strb	r2, [r3, #1]
 8001604:	e00f      	b.n	8001626 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f003 020f 	and.w	r2, r3, #15
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	b2da      	uxtb	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001632:	883a      	ldrh	r2, [r7, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	78ba      	ldrb	r2, [r7, #2]
 800163c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001650:	78bb      	ldrb	r3, [r7, #2]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d102      	bne.n	800165c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_PCD_EP_Open+0xaa>
 8001666:	2302      	movs	r3, #2
 8001668:	e00e      	b.n	8001688 <HAL_PCD_EP_Open+0xc8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fb95 	bl	8002da8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001686:	7afb      	ldrb	r3, [r7, #11]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800169c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da0f      	bge.n	80016c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	f003 020f 	and.w	r2, r3, #15
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3338      	adds	r3, #56	; 0x38
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	3304      	adds	r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	705a      	strb	r2, [r3, #1]
 80016c2:	e00f      	b.n	80016e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 020f 	and.w	r2, r3, #15
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_PCD_EP_Close+0x6e>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e00e      	b.n	800171c <HAL_PCD_EP_Close+0x8c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fbd3 	bl	8002eb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	460b      	mov	r3, r1
 8001732:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	f003 020f 	and.w	r2, r3, #15
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2200      	movs	r2, #0
 8001764:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	b2da      	uxtb	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	6979      	ldr	r1, [r7, #20]
 8001798:	f001 fe56 	bl	8003448 <USB_EP0StartXfer>
 800179c:	e008      	b.n	80017b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	f001 fc08 	bl	8002fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 020f 	and.w	r2, r3, #15
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017dc:	681b      	ldr	r3, [r3, #0]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	460b      	mov	r3, r1
 80017f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fa:	7afb      	ldrb	r3, [r7, #11]
 80017fc:	f003 020f 	and.w	r2, r3, #15
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	3338      	adds	r3, #56	; 0x38
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2201      	movs	r2, #1
 8001828:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	b2da      	uxtb	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	f001 fdf4 	bl	8003448 <USB_EP0StartXfer>
 8001860:	e008      	b.n	8001874 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	6979      	ldr	r1, [r7, #20]
 8001870:	f001 fba6 	bl	8002fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	f003 020f 	and.w	r2, r3, #15
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	d901      	bls.n	800189c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e050      	b.n	800193e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800189c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da0f      	bge.n	80018c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	f003 020f 	and.w	r2, r3, #15
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	3338      	adds	r3, #56	; 0x38
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	3304      	adds	r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	705a      	strb	r2, [r3, #1]
 80018c2:	e00d      	b.n	80018e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	3304      	adds	r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_PCD_EP_SetStall+0x82>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e01e      	b.n	800193e <HAL_PCD_EP_SetStall+0xc0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	4618      	mov	r0, r3
 8001910:	f001 ff4b 	bl	80037aa <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	b2d9      	uxtb	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800192e:	461a      	mov	r2, r3
 8001930:	f002 f93c 	bl	8003bac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 020f 	and.w	r2, r3, #15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d901      	bls.n	8001964 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e042      	b.n	80019ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da0f      	bge.n	800198c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	f003 020f 	and.w	r2, r3, #15
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3338      	adds	r3, #56	; 0x38
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	3304      	adds	r3, #4
 8001982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	e00f      	b.n	80019ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 020f 	and.w	r2, r3, #15
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_PCD_EP_ClrStall+0x86>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e00e      	b.n	80019ea <HAL_PCD_EP_ClrStall+0xa4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 ff53 	bl	8003886 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08a      	sub	sp, #40	; 0x28
 80019f6:	af02      	add	r7, sp, #8
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	3338      	adds	r3, #56	; 0x38
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	3304      	adds	r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d901      	bls.n	8001a2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e06c      	b.n	8001b04 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d902      	bls.n	8001a46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a4e:	e02b      	b.n	8001aa8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d902      	bls.n	8001a6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f001 fe2f 	bl	80036ee <USB_WritePacket>

    ep->xfer_buff  += len;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	441a      	add	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d809      	bhi.n	8001ad2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d203      	bcs.n	8001ad2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1be      	bne.n	8001a50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d811      	bhi.n	8001b02 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001afe:	4013      	ands	r3, r2
 8001b00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	333c      	adds	r3, #60	; 0x3c
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	015a      	lsls	r2, r3, #5
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4413      	add	r3, r2
 8001b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f040 80b3 	bne.w	8001caa <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d028      	beq.n	8001ba0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a70      	ldr	r2, [pc, #448]	; (8001d14 <PCD_EP_OutXfrComplete_int+0x208>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d90e      	bls.n	8001b74 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b72:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f003 fea3 	bl	80058c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b84:	461a      	mov	r2, r3
 8001b86:	2101      	movs	r1, #1
 8001b88:	f002 f810 	bl	8003bac <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	6093      	str	r3, [r2, #8]
 8001b9e:	e0b3      	b.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2320      	movs	r3, #32
 8001bba:	6093      	str	r3, [r2, #8]
 8001bbc:	e0a4      	b.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 809f 	bne.w	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <PCD_EP_OutXfrComplete_int+0x208>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d90f      	bls.n	8001bf2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00a      	beq.n	8001bf2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be8:	461a      	mov	r2, r3
 8001bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bee:	6093      	str	r3, [r2, #8]
 8001bf0:	e08a      	b.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c04:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	0159      	lsls	r1, r3, #5
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001c18:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4403      	add	r3, r0
 8001c28:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c2c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4403      	add	r3, r0
 8001c50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4419      	add	r1, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4403      	add	r3, r0
 8001c66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c6a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f003 fe36 	bl	80058e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d144      	bne.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d138      	bne.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	f001 ff82 	bl	8003bac <USB_EP0_OutStart>
 8001ca8:	e02e      	b.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <PCD_EP_OutXfrComplete_int+0x20c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d124      	bne.n	8001cfc <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cce:	6093      	str	r3, [r2, #8]
 8001cd0:	e01a      	b.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2320      	movs	r3, #32
 8001cec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f003 fdf5 	bl	80058e4 <HAL_PCD_DataOutStageCallback>
 8001cfa:	e005      	b.n	8001d08 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f003 fdee 	bl	80058e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	4f54300a 	.word	0x4f54300a
 8001d18:	4f54310a 	.word	0x4f54310a

08001d1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	333c      	adds	r3, #60	; 0x3c
 8001d34:	3304      	adds	r3, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d113      	bne.n	8001d7a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d922      	bls.n	8001da0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01d      	beq.n	8001da0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d76:	6093      	str	r3, [r2, #8]
 8001d78:	e012      	b.n	8001da0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <PCD_EP_OutSetupPacket_int+0xbc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10e      	bne.n	8001da0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f003 fd8d 	bl	80058c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d90c      	bls.n	8001dc8 <PCD_EP_OutSetupPacket_int+0xac>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	f001 fef2 	bl	8003bac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	4f54300a 	.word	0x4f54300a
 8001dd8:	4f54310a 	.word	0x4f54310a

08001ddc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
 8001de8:	4613      	mov	r3, r2
 8001dea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d107      	bne.n	8001e0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	0419      	lsls	r1, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
 8001e08:	e028      	b.n	8001e5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4413      	add	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e00d      	b.n	8001e3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	3340      	adds	r3, #64	; 0x40
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4413      	add	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3ec      	bcc.n	8001e1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e44:	883b      	ldrh	r3, [r7, #0]
 8001e46:	0418      	lsls	r0, r3, #16
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	4302      	orrs	r2, r0
 8001e54:	3340      	adds	r3, #64	; 0x40
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e25b      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d075      	beq.n	8001fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec2:	4ba3      	ldr	r3, [pc, #652]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4ba0      	ldr	r3, [pc, #640]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d112      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4b9d      	ldr	r3, [pc, #628]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	4b99      	ldr	r3, [pc, #612]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d05b      	beq.n	8001fac <HAL_RCC_OscConfig+0x108>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d157      	bne.n	8001fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e236      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x74>
 8001f0a:	4b91      	ldr	r3, [pc, #580]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a90      	ldr	r2, [pc, #576]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x98>
 8001f22:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a87      	ldr	r2, [pc, #540]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f3c:	4b84      	ldr	r3, [pc, #528]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a83      	ldr	r2, [pc, #524]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b81      	ldr	r3, [pc, #516]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a80      	ldr	r2, [pc, #512]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fb22 	bl	80005a4 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fb1e 	bl	80005a4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1fb      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xc0>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fb0e 	bl	80005a4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe fb0a 	bl	80005a4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1e7      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b6c      	ldr	r3, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0xe8>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fba:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b62      	ldr	r3, [pc, #392]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x152>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1bb      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b56      	ldr	r3, [pc, #344]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4952      	ldr	r1, [pc, #328]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCC_OscConfig+0x2b0>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe fac3 	bl	80005a4 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002022:	f7fe fabf 	bl	80005a4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e19c      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4940      	ldr	r1, [pc, #256]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_OscConfig+0x2b0>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe faa2 	bl	80005a4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002064:	f7fe fa9e 	bl	80005a4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e17b      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d030      	beq.n	80020f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_OscConfig+0x2b4>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fa82 	bl	80005a4 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a4:	f7fe fa7e 	bl	80005a4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e15b      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x200>
 80020c2:	e015      	b.n	80020f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_OscConfig+0x2b4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7fe fa6b 	bl	80005a4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d2:	f7fe fa67 	bl	80005a4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e144      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a0 	beq.w	800223e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x2b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d121      	bne.n	800217e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCC_OscConfig+0x2b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a07      	ldr	r2, [pc, #28]	; (800215c <HAL_RCC_OscConfig+0x2b8>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe fa2d 	bl	80005a4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e011      	b.n	8002172 <HAL_RCC_OscConfig+0x2ce>
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	42470000 	.word	0x42470000
 8002158:	42470e80 	.word	0x42470e80
 800215c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe fa20 	bl	80005a4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0fd      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x4d4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d106      	bne.n	8002194 <HAL_RCC_OscConfig+0x2f0>
 8002186:	4b7d      	ldr	r3, [pc, #500]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a7c      	ldr	r2, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	e01c      	b.n	80021ce <HAL_RCC_OscConfig+0x32a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x312>
 800219c:	4b77      	ldr	r3, [pc, #476]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a76      	ldr	r2, [pc, #472]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	4b74      	ldr	r3, [pc, #464]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a73      	ldr	r2, [pc, #460]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x32a>
 80021b6:	4b71      	ldr	r3, [pc, #452]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a70      	ldr	r2, [pc, #448]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	4b6e      	ldr	r3, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a6d      	ldr	r2, [pc, #436]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe f9e5 	bl	80005a4 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe f9e1 	bl	80005a4 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0bc      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ee      	beq.n	80021de <HAL_RCC_OscConfig+0x33a>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe f9cf 	bl	80005a4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe f9cb 	bl	80005a4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0a6      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4b56      	ldr	r3, [pc, #344]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8092 	beq.w	800236c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002248:	4b4c      	ldr	r3, [pc, #304]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d05c      	beq.n	800230e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d141      	bne.n	80022e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe f99f 	bl	80005a4 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe f99b 	bl	80005a4 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e078      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	019b      	lsls	r3, r3, #6
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	061b      	lsls	r3, r3, #24
 80022ac:	4933      	ldr	r1, [pc, #204]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe f974 	bl	80005a4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe f970 	bl	80005a4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04d      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x41c>
 80022de:	e045      	b.n	800236c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe f95d 	bl	80005a4 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe f959 	bl	80005a4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e036      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x44a>
 800230c:	e02e      	b.n	800236c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e029      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	429a      	cmp	r2, r3
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d115      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002348:	4293      	cmp	r3, r2
 800234a:	d10d      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000
 800237c:	40023800 	.word	0x40023800
 8002380:	42470060 	.word	0x42470060

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0cc      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b68      	ldr	r3, [pc, #416]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d90c      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d044      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d119      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d003      	beq.n	8002442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	2b03      	cmp	r3, #3
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e067      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4934      	ldr	r1, [pc, #208]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe f896 	bl	80005a4 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7fe f892 	bl	80005a4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e04f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d20c      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4601      	mov	r1, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	fa21 f303 	lsr.w	r3, r1, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd fff6 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00
 8002540:	40023800 	.word	0x40023800
 8002544:	080062cc 	.word	0x080062cc
 8002548:	20000118 	.word	0x20000118
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d007      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x32>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d008      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x38>
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80b4 	bne.w	80026e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800257e:	60bb      	str	r3, [r7, #8]
       break;
 8002580:	e0b3      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002582:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002584:	60bb      	str	r3, [r7, #8]
      break;
 8002586:	e0b0      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002588:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002590:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002592:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d04a      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	4b55      	ldr	r3, [pc, #340]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	f04f 0400 	mov.w	r4, #0
 80025a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	ea03 0501 	and.w	r5, r3, r1
 80025b4:	ea04 0602 	and.w	r6, r4, r2
 80025b8:	4629      	mov	r1, r5
 80025ba:	4632      	mov	r2, r6
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	f04f 0400 	mov.w	r4, #0
 80025c4:	0154      	lsls	r4, r2, #5
 80025c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ca:	014b      	lsls	r3, r1, #5
 80025cc:	4619      	mov	r1, r3
 80025ce:	4622      	mov	r2, r4
 80025d0:	1b49      	subs	r1, r1, r5
 80025d2:	eb62 0206 	sbc.w	r2, r2, r6
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	f04f 0400 	mov.w	r4, #0
 80025de:	0194      	lsls	r4, r2, #6
 80025e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025e4:	018b      	lsls	r3, r1, #6
 80025e6:	1a5b      	subs	r3, r3, r1
 80025e8:	eb64 0402 	sbc.w	r4, r4, r2
 80025ec:	f04f 0100 	mov.w	r1, #0
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	00e2      	lsls	r2, r4, #3
 80025f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025fa:	00d9      	lsls	r1, r3, #3
 80025fc:	460b      	mov	r3, r1
 80025fe:	4614      	mov	r4, r2
 8002600:	195b      	adds	r3, r3, r5
 8002602:	eb44 0406 	adc.w	r4, r4, r6
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	0262      	lsls	r2, r4, #9
 8002610:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002614:	0259      	lsls	r1, r3, #9
 8002616:	460b      	mov	r3, r1
 8002618:	4614      	mov	r4, r2
 800261a:	4618      	mov	r0, r3
 800261c:	4621      	mov	r1, r4
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f04f 0400 	mov.w	r4, #0
 8002624:	461a      	mov	r2, r3
 8002626:	4623      	mov	r3, r4
 8002628:	f7fd fdd6 	bl	80001d8 <__aeabi_uldivmod>
 800262c:	4603      	mov	r3, r0
 800262e:	460c      	mov	r4, r1
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e049      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	f04f 0400 	mov.w	r4, #0
 800263e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	ea03 0501 	and.w	r5, r3, r1
 800264a:	ea04 0602 	and.w	r6, r4, r2
 800264e:	4629      	mov	r1, r5
 8002650:	4632      	mov	r2, r6
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	f04f 0400 	mov.w	r4, #0
 800265a:	0154      	lsls	r4, r2, #5
 800265c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002660:	014b      	lsls	r3, r1, #5
 8002662:	4619      	mov	r1, r3
 8002664:	4622      	mov	r2, r4
 8002666:	1b49      	subs	r1, r1, r5
 8002668:	eb62 0206 	sbc.w	r2, r2, r6
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	0194      	lsls	r4, r2, #6
 8002676:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800267a:	018b      	lsls	r3, r1, #6
 800267c:	1a5b      	subs	r3, r3, r1
 800267e:	eb64 0402 	sbc.w	r4, r4, r2
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	00e2      	lsls	r2, r4, #3
 800268c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002690:	00d9      	lsls	r1, r3, #3
 8002692:	460b      	mov	r3, r1
 8002694:	4614      	mov	r4, r2
 8002696:	195b      	adds	r3, r3, r5
 8002698:	eb44 0406 	adc.w	r4, r4, r6
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	02a2      	lsls	r2, r4, #10
 80026a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026aa:	0299      	lsls	r1, r3, #10
 80026ac:	460b      	mov	r3, r1
 80026ae:	4614      	mov	r4, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	4621      	mov	r1, r4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f04f 0400 	mov.w	r4, #0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4623      	mov	r3, r4
 80026be:	f7fd fd8b 	bl	80001d8 <__aeabi_uldivmod>
 80026c2:	4603      	mov	r3, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	60bb      	str	r3, [r7, #8]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026e6:	60bb      	str	r3, [r7, #8]
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	68bb      	ldr	r3, [r7, #8]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	007a1200 	.word	0x007a1200

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000118 	.word	0x20000118

08002718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002718:	b084      	sub	sp, #16
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	f107 001c 	add.w	r0, r7, #28
 8002726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	2b01      	cmp	r3, #1
 800272e:	d122      	bne.n	8002776 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f001 fa7c 	bl	8003c68 <USB_CoreReset>
 8002770:	4603      	mov	r3, r0
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e01a      	b.n	80027ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f001 fa70 	bl	8003c68 <USB_CoreReset>
 8002788:	4603      	mov	r3, r0
 800278a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800278c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
 800279e:	e005      	b.n	80027ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10b      	bne.n	80027ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f043 0206 	orr.w	r2, r3, #6
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027d6:	b004      	add	sp, #16
 80027d8:	4770      	bx	lr
	...

080027dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d165      	bne.n	80028bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <USB_SetTurnaroundTime+0x11c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d906      	bls.n	8002806 <USB_SetTurnaroundTime+0x2a>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4a40      	ldr	r2, [pc, #256]	; (80028fc <USB_SetTurnaroundTime+0x120>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d802      	bhi.n	8002806 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002800:	230f      	movs	r3, #15
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e062      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4a3c      	ldr	r2, [pc, #240]	; (80028fc <USB_SetTurnaroundTime+0x120>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d906      	bls.n	800281c <USB_SetTurnaroundTime+0x40>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4a3b      	ldr	r2, [pc, #236]	; (8002900 <USB_SetTurnaroundTime+0x124>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d802      	bhi.n	800281c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002816:	230e      	movs	r3, #14
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e057      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4a38      	ldr	r2, [pc, #224]	; (8002900 <USB_SetTurnaroundTime+0x124>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d906      	bls.n	8002832 <USB_SetTurnaroundTime+0x56>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4a37      	ldr	r2, [pc, #220]	; (8002904 <USB_SetTurnaroundTime+0x128>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d802      	bhi.n	8002832 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800282c:	230d      	movs	r3, #13
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e04c      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4a33      	ldr	r2, [pc, #204]	; (8002904 <USB_SetTurnaroundTime+0x128>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d906      	bls.n	8002848 <USB_SetTurnaroundTime+0x6c>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4a32      	ldr	r2, [pc, #200]	; (8002908 <USB_SetTurnaroundTime+0x12c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d802      	bhi.n	8002848 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002842:	230c      	movs	r3, #12
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e041      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4a2f      	ldr	r2, [pc, #188]	; (8002908 <USB_SetTurnaroundTime+0x12c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d906      	bls.n	800285e <USB_SetTurnaroundTime+0x82>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4a2e      	ldr	r2, [pc, #184]	; (800290c <USB_SetTurnaroundTime+0x130>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d802      	bhi.n	800285e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002858:	230b      	movs	r3, #11
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e036      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <USB_SetTurnaroundTime+0x130>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d906      	bls.n	8002874 <USB_SetTurnaroundTime+0x98>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <USB_SetTurnaroundTime+0x134>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d802      	bhi.n	8002874 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800286e:	230a      	movs	r3, #10
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e02b      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4a26      	ldr	r2, [pc, #152]	; (8002910 <USB_SetTurnaroundTime+0x134>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d906      	bls.n	800288a <USB_SetTurnaroundTime+0xae>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <USB_SetTurnaroundTime+0x138>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d802      	bhi.n	800288a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002884:	2309      	movs	r3, #9
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e020      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4a21      	ldr	r2, [pc, #132]	; (8002914 <USB_SetTurnaroundTime+0x138>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d906      	bls.n	80028a0 <USB_SetTurnaroundTime+0xc4>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4a20      	ldr	r2, [pc, #128]	; (8002918 <USB_SetTurnaroundTime+0x13c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d802      	bhi.n	80028a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800289a:	2308      	movs	r3, #8
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e015      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <USB_SetTurnaroundTime+0x13c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d906      	bls.n	80028b6 <USB_SetTurnaroundTime+0xda>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <USB_SetTurnaroundTime+0x140>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d802      	bhi.n	80028b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80028b0:	2307      	movs	r3, #7
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e00a      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80028b6:	2306      	movs	r3, #6
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e007      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80028c2:	2309      	movs	r3, #9
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e001      	b.n	80028cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80028c8:	2309      	movs	r3, #9
 80028ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	029b      	lsls	r3, r3, #10
 80028e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	00d8acbf 	.word	0x00d8acbf
 80028fc:	00e4e1bf 	.word	0x00e4e1bf
 8002900:	00f423ff 	.word	0x00f423ff
 8002904:	0106737f 	.word	0x0106737f
 8002908:	011a499f 	.word	0x011a499f
 800290c:	01312cff 	.word	0x01312cff
 8002910:	014ca43f 	.word	0x014ca43f
 8002914:	016e35ff 	.word	0x016e35ff
 8002918:	01a6ab1f 	.word	0x01a6ab1f
 800291c:	01e847ff 	.word	0x01e847ff

08002920 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 0201 	bic.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d106      	bne.n	8002990 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	e00b      	b.n	80029a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	e001      	b.n	80029a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e003      	b.n	80029b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80029a8:	2032      	movs	r0, #50	; 0x32
 80029aa:	f7fd fe07 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029b8:	b084      	sub	sp, #16
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80029c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e009      	b.n	80029ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	3340      	adds	r3, #64	; 0x40
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	2200      	movs	r2, #0
 80029e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	3301      	adds	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b0e      	cmp	r3, #14
 80029f0:	d9f2      	bls.n	80029d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d112      	bne.n	8002a1e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a1c:	e00b      	b.n	8002a36 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2300      	movs	r3, #0
 8002a40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a48:	4619      	mov	r1, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a50:	461a      	mov	r2, r3
 8002a52:	680b      	ldr	r3, [r1, #0]
 8002a54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d10c      	bne.n	8002a76 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a62:	2100      	movs	r1, #0
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f961 	bl	8002d2c <USB_SetDevSpeed>
 8002a6a:	e008      	b.n	8002a7e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f95c 	bl	8002d2c <USB_SetDevSpeed>
 8002a74:	e003      	b.n	8002a7e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a76:	2103      	movs	r1, #3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f957 	bl	8002d2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a7e:	2110      	movs	r1, #16
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f90b 	bl	8002c9c <USB_FlushTxFifo>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f929 	bl	8002ce8 <USB_FlushRxFifo>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e043      	b.n	8002b52 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae0:	d118      	bne.n	8002b14 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af4:	461a      	mov	r2, r3
 8002af6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e013      	b.n	8002b26 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e008      	b.n	8002b26 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b20:	461a      	mov	r2, r3
 8002b22:	2300      	movs	r3, #0
 8002b24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b32:	461a      	mov	r2, r3
 8002b34:	2300      	movs	r3, #0
 8002b36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b44:	461a      	mov	r2, r3
 8002b46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3b7      	bcc.n	8002aca <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e043      	b.n	8002be8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b76:	d118      	bne.n	8002baa <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e013      	b.n	8002bbc <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e008      	b.n	8002bbc <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2300      	movs	r3, #0
 8002bcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002be0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	3301      	adds	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d3b7      	bcc.n	8002b60 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c02:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d111      	bne.n	8002c2e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <USB_DevInit+0x2dc>)
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	f043 0303 	orr.w	r3, r3, #3
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f043 0210 	orr.w	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <USB_DevInit+0x2e0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f043 0208 	orr.w	r2, r3, #8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c8e:	b004      	add	sp, #16
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	00800100 	.word	0x00800100
 8002c98:	803c3800 	.word	0x803c3800

08002c9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <USB_FlushTxFifo+0x48>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e006      	b.n	8002cd6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d0f0      	beq.n	8002cb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	00030d40 	.word	0x00030d40

08002ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <USB_FlushRxFifo+0x40>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e006      	b.n	8002d1a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d0f0      	beq.n	8002cfa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	00030d40 	.word	0x00030d40

08002d2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0306 	and.w	r3, r3, #6
 8002d76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
 8002d82:	e00a      	b.n	8002d9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d002      	beq.n	8002d90 <USB_GetDevSpeed+0x32>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d102      	bne.n	8002d96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002d90:	2302      	movs	r3, #2
 8002d92:	75fb      	strb	r3, [r7, #23]
 8002d94:	e001      	b.n	8002d9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002d96:	230f      	movs	r3, #15
 8002d98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d13a      	bne.n	8002e3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d155      	bne.n	8002ea8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002e18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	059b      	lsls	r3, r3, #22
 8002e1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002e20:	4313      	orrs	r3, r2
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	0151      	lsls	r1, r2, #5
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	440a      	add	r2, r1
 8002e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e036      	b.n	8002ea8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11a      	bne.n	8002ea8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	78db      	ldrb	r3, [r3, #3]
 8002e8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	0151      	lsls	r1, r2, #5
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	440a      	add	r2, r1
 8002e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d135      	bne.n	8002f40 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	0159      	lsls	r1, r3, #5
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f36:	4619      	mov	r1, r3
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <USB_DeactivateEndpoint+0x100>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
 8002f3e:	e034      	b.n	8002faa <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f60:	4013      	ands	r3, r2
 8002f62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	2101      	movs	r1, #1
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f84:	4013      	ands	r3, r2
 8002f86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	0159      	lsls	r1, r3, #5
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <USB_DeactivateEndpoint+0x104>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	ec337800 	.word	0xec337800
 8002fbc:	eff37800 	.word	0xeff37800

08002fc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	785b      	ldrb	r3, [r3, #1]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	f040 815c 	bne.w	800329a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d132      	bne.n	8003050 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	0151      	lsls	r1, r2, #5
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	440a      	add	r2, r1
 8003000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003004:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003008:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800300c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	440a      	add	r2, r1
 8003024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800302c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	0151      	lsls	r1, r2, #5
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	440a      	add	r2, r1
 8003044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003048:	0cdb      	lsrs	r3, r3, #19
 800304a:	04db      	lsls	r3, r3, #19
 800304c:	6113      	str	r3, [r2, #16]
 800304e:	e074      	b.n	800313a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	0151      	lsls	r1, r2, #5
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	440a      	add	r2, r1
 8003066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800306a:	0cdb      	lsrs	r3, r3, #19
 800306c:	04db      	lsls	r3, r3, #19
 800306e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	0151      	lsls	r1, r2, #5
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	440a      	add	r2, r1
 8003086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800308a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800308e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6959      	ldr	r1, [r3, #20]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	440b      	add	r3, r1
 80030ac:	1e59      	subs	r1, r3, #1
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b6:	04d9      	lsls	r1, r3, #19
 80030b8:	4b9d      	ldr	r3, [pc, #628]	; (8003330 <USB_EPStartXfer+0x370>)
 80030ba:	400b      	ands	r3, r1
 80030bc:	69b9      	ldr	r1, [r7, #24]
 80030be:	0148      	lsls	r0, r1, #5
 80030c0:	69f9      	ldr	r1, [r7, #28]
 80030c2:	4401      	add	r1, r0
 80030c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	0148      	lsls	r0, r1, #5
 80030e6:	69f9      	ldr	r1, [r7, #28]
 80030e8:	4401      	add	r1, r0
 80030ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	78db      	ldrb	r3, [r3, #3]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d11f      	bne.n	800313a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	0151      	lsls	r1, r2, #5
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	440a      	add	r2, r1
 8003110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003114:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003118:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	0151      	lsls	r1, r2, #5
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	440a      	add	r2, r1
 8003130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003138:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d14b      	bne.n	80031d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	78db      	ldrb	r3, [r3, #3]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d128      	bne.n	80031b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d110      	bne.n	8003196 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	0151      	lsls	r1, r2, #5
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	440a      	add	r2, r1
 800318a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e00f      	b.n	80031b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	0151      	lsls	r1, r2, #5
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	440a      	add	r2, r1
 80031ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	0151      	lsls	r1, r2, #5
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	440a      	add	r2, r1
 80031cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e12f      	b.n	8003438 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	0151      	lsls	r1, r2, #5
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	440a      	add	r2, r1
 80031ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80031f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d015      	beq.n	800322c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8117 	beq.w	8003438 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	69f9      	ldr	r1, [r7, #28]
 8003222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003226:	4313      	orrs	r3, r2
 8003228:	634b      	str	r3, [r1, #52]	; 0x34
 800322a:	e105      	b.n	8003438 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d110      	bne.n	800325e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	0151      	lsls	r1, r2, #5
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	440a      	add	r2, r1
 8003252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e00f      	b.n	800327e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	0151      	lsls	r1, r2, #5
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	440a      	add	r2, r1
 8003274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	b298      	uxth	r0, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	4603      	mov	r3, r0
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa2b 	bl	80036ee <USB_WritePacket>
 8003298:	e0ce      	b.n	8003438 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032b4:	0cdb      	lsrs	r3, r3, #19
 80032b6:	04db      	lsls	r3, r3, #19
 80032b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	0151      	lsls	r1, r2, #5
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	440a      	add	r2, r1
 80032d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80032d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80032dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d126      	bne.n	8003334 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	0148      	lsls	r0, r1, #5
 8003300:	69f9      	ldr	r1, [r7, #28]
 8003302:	4401      	add	r1, r0
 8003304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003308:	4313      	orrs	r3, r2
 800330a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	440a      	add	r2, r1
 8003322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003326:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800332a:	6113      	str	r3, [r2, #16]
 800332c:	e036      	b.n	800339c <USB_EPStartXfer+0x3dc>
 800332e:	bf00      	nop
 8003330:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4413      	add	r3, r2
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	8afb      	ldrh	r3, [r7, #22]
 800335a:	04d9      	lsls	r1, r3, #19
 800335c:	4b39      	ldr	r3, [pc, #228]	; (8003444 <USB_EPStartXfer+0x484>)
 800335e:	400b      	ands	r3, r1
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	0148      	lsls	r0, r1, #5
 8003364:	69f9      	ldr	r1, [r7, #28]
 8003366:	4401      	add	r1, r0
 8003368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800336c:	4313      	orrs	r3, r2
 800336e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	8af9      	ldrh	r1, [r7, #22]
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338c:	69b9      	ldr	r1, [r7, #24]
 800338e:	0148      	lsls	r0, r1, #5
 8003390:	69f9      	ldr	r1, [r7, #28]
 8003392:	4401      	add	r1, r0
 8003394:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003398:	4313      	orrs	r3, r2
 800339a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10d      	bne.n	80033be <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	68d9      	ldr	r1, [r3, #12]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ba:	460a      	mov	r2, r1
 80033bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	78db      	ldrb	r3, [r3, #3]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d128      	bne.n	8003418 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d110      	bne.n	80033f8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	0151      	lsls	r1, r2, #5
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	440a      	add	r2, r1
 80033ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00f      	b.n	8003418 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	440a      	add	r2, r1
 800340e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	0151      	lsls	r1, r2, #5
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	440a      	add	r2, r1
 800342e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003432:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003436:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	1ff80000 	.word	0x1ff80000

08003448 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 80cd 	bne.w	8003604 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d132      	bne.n	80034d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	0151      	lsls	r1, r2, #5
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	440a      	add	r2, r1
 8003488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800348c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003490:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003494:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	0151      	lsls	r1, r2, #5
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	440a      	add	r2, r1
 80034ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d0:	0cdb      	lsrs	r3, r3, #19
 80034d2:	04db      	lsls	r3, r3, #19
 80034d4:	6113      	str	r3, [r2, #16]
 80034d6:	e04e      	b.n	8003576 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	0151      	lsls	r1, r2, #5
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	440a      	add	r2, r1
 80034ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f2:	0cdb      	lsrs	r3, r3, #19
 80034f4:	04db      	lsls	r3, r3, #19
 80034f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003512:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003516:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800351a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	429a      	cmp	r2, r3
 8003526:	d903      	bls.n	8003530 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	0151      	lsls	r1, r2, #5
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	440a      	add	r2, r1
 8003546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800354e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003566:	6939      	ldr	r1, [r7, #16]
 8003568:	0148      	lsls	r0, r1, #5
 800356a:	6979      	ldr	r1, [r7, #20]
 800356c:	4401      	add	r1, r0
 800356e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003572:	4313      	orrs	r3, r2
 8003574:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d11e      	bne.n	80035ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e092      	b.n	80036e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d07e      	beq.n	80036e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	2101      	movs	r1, #1
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035fe:	4313      	orrs	r3, r2
 8003600:	634b      	str	r3, [r1, #52]	; 0x34
 8003602:	e06d      	b.n	80036e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	440a      	add	r2, r1
 800361a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361e:	0cdb      	lsrs	r3, r3, #19
 8003620:	04db      	lsls	r3, r3, #19
 8003622:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800363e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003642:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003646:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003676:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	6939      	ldr	r1, [r7, #16]
 8003690:	0148      	lsls	r0, r1, #5
 8003692:	6979      	ldr	r1, [r7, #20]
 8003694:	4401      	add	r1, r0
 8003696:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800369a:	4313      	orrs	r3, r2
 800369c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10d      	bne.n	80036c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	68d9      	ldr	r1, [r3, #12]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	460a      	mov	r2, r1
 80036be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	0151      	lsls	r1, r2, #5
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	440a      	add	r2, r1
 80036d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b089      	sub	sp, #36	; 0x24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	4611      	mov	r1, r2
 80036fa:	461a      	mov	r2, r3
 80036fc:	460b      	mov	r3, r1
 80036fe:	71fb      	strb	r3, [r7, #7]
 8003700:	4613      	mov	r3, r2
 8003702:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800370c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11a      	bne.n	800374a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003714:	88bb      	ldrh	r3, [r7, #4]
 8003716:	3303      	adds	r3, #3
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e00f      	b.n	8003742 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	031a      	lsls	r2, r3, #12
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4413      	add	r3, r2
 800372a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372e:	461a      	mov	r2, r3
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3304      	adds	r3, #4
 800373a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	3301      	adds	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	429a      	cmp	r2, r3
 8003748:	d3eb      	bcc.n	8003722 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3724      	adds	r7, #36	; 0x24
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	3303      	adds	r3, #3
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e00b      	b.n	8003794 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	601a      	str	r2, [r3, #0]
    pDest++;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3304      	adds	r3, #4
 800378c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	3301      	adds	r3, #1
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	429a      	cmp	r2, r3
 800379a:	d3ef      	bcc.n	800377c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800379c:	69fb      	ldr	r3, [r7, #28]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	; 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d12c      	bne.n	8003820 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db12      	blt.n	80037fe <USB_EPSetStall+0x54>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00f      	beq.n	80037fe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037fc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	440a      	add	r2, r1
 8003814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e02b      	b.n	8003878 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db12      	blt.n	8003858 <USB_EPSetStall+0xae>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	0151      	lsls	r1, r2, #5
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	440a      	add	r2, r1
 800384e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003852:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003856:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	440a      	add	r2, r1
 800386e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003876:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d128      	bne.n	80038f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	0151      	lsls	r1, r2, #5
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	440a      	add	r2, r1
 80038b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d003      	beq.n	80038d2 <USB_EPClearStall+0x4c>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	78db      	ldrb	r3, [r3, #3]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d138      	bne.n	8003944 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	0151      	lsls	r1, r2, #5
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	440a      	add	r2, r1
 80038e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e027      	b.n	8003944 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	440a      	add	r2, r1
 800390a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800390e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003912:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	78db      	ldrb	r3, [r3, #3]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d003      	beq.n	8003924 <USB_EPClearStall+0x9e>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	78db      	ldrb	r3, [r3, #3]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d10f      	bne.n	8003944 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	440a      	add	r2, r1
 800393a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003970:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003974:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b8:	f023 0302 	bic.w	r3, r3, #2
 80039bc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80039be:	2003      	movs	r0, #3
 80039c0:	f7fc fdfc 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80039ee:	2003      	movs	r0, #3
 80039f0:	f7fc fde4 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	b29b      	uxth	r3, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003aba:	68bb      	ldr	r3, [r7, #8]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
 8003af8:	01db      	lsls	r3, r3, #7
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003b16:	68bb      	ldr	r3, [r7, #8]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0301 	and.w	r3, r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b5e:	f023 0307 	bic.w	r3, r3, #7
 8003b62:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0306 	and.w	r3, r3, #6
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d109      	bne.n	8003b88 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b82:	f043 0303 	orr.w	r3, r3, #3
 8003b86:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	333c      	adds	r3, #60	; 0x3c
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <USB_EP0_OutStart+0xb8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d90a      	bls.n	8003be6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be0:	d101      	bne.n	8003be6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e037      	b.n	8003c56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c14:	f043 0318 	orr.w	r3, r3, #24
 8003c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003c2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10f      	bne.n	8003c54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003c52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	4f54300a 	.word	0x4f54300a

08003c68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3301      	adds	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <USB_CoreReset+0x64>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e01b      	b.n	8003cbe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	daf2      	bge.n	8003c74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <USB_CoreReset+0x64>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e006      	b.n	8003cbe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d0f0      	beq.n	8003c9e <USB_CoreReset+0x36>

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	00030d40 	.word	0x00030d40

08003cd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7c1b      	ldrb	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d115      	bne.n	8003d14 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cec:	2202      	movs	r2, #2
 8003cee:	2181      	movs	r1, #129	; 0x81
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f001 ff34 	bl	8005b5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d00:	2202      	movs	r2, #2
 8003d02:	2101      	movs	r1, #1
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f001 ff2a 	bl	8005b5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8003d12:	e012      	b.n	8003d3a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d14:	2340      	movs	r3, #64	; 0x40
 8003d16:	2202      	movs	r2, #2
 8003d18:	2181      	movs	r1, #129	; 0x81
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f001 ff1f 	bl	8005b5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d26:	2340      	movs	r3, #64	; 0x40
 8003d28:	2202      	movs	r2, #2
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f001 ff16 	bl	8005b5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	2182      	movs	r1, #130	; 0x82
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f001 ff0c 	bl	8005b5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003d4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003d50:	f002 f9ba 	bl	80060c8 <malloc>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e026      	b.n	8003dbc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003d74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	7c1b      	ldrb	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da2:	2101      	movs	r1, #1
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f001 ffcb 	bl	8005d40 <USBD_LL_PrepareReceive>
 8003daa:	e007      	b.n	8003dbc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003db2:	2340      	movs	r3, #64	; 0x40
 8003db4:	2101      	movs	r1, #1
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f001 ffc2 	bl	8005d40 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003dd6:	2181      	movs	r1, #129	; 0x81
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f001 fee6 	bl	8005baa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003de4:	2101      	movs	r1, #1
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f001 fedf 	bl	8005baa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003df4:	2182      	movs	r1, #130	; 0x82
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f001 fed7 	bl	8005baa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f002 f95b 	bl	80060d8 <free>
    pdev->pClassData = NULL;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003e44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d039      	beq.n	8003ed2 <USBD_CDC_Setup+0x9e>
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d17c      	bne.n	8003f5c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	88db      	ldrh	r3, [r3, #6]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d029      	beq.n	8003ebe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da11      	bge.n	8003e98 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8003e80:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	88d2      	ldrh	r2, [r2, #6]
 8003e86:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e88:	6939      	ldr	r1, [r7, #16]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	88db      	ldrh	r3, [r3, #6]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 f9c9 	bl	8005228 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8003e96:	e068      	b.n	8003f6a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	785a      	ldrb	r2, [r3, #1]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	88db      	ldrh	r3, [r3, #6]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003eae:	6939      	ldr	r1, [r7, #16]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	88db      	ldrh	r3, [r3, #6]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f001 f9e4 	bl	8005284 <USBD_CtlPrepareRx>
    break;
 8003ebc:	e055      	b.n	8003f6a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	7850      	ldrb	r0, [r2, #1]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	4798      	blx	r3
    break;
 8003ed0:	e04b      	b.n	8003f6a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	785b      	ldrb	r3, [r3, #1]
 8003ed6:	2b0a      	cmp	r3, #10
 8003ed8:	d017      	beq.n	8003f0a <USBD_CDC_Setup+0xd6>
 8003eda:	2b0b      	cmp	r3, #11
 8003edc:	d029      	beq.n	8003f32 <USBD_CDC_Setup+0xfe>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d133      	bne.n	8003f4a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d107      	bne.n	8003efc <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f001 f997 	bl	8005228 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003efa:	e02e      	b.n	8003f5a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f001 f927 	bl	8005152 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003f04:	2302      	movs	r3, #2
 8003f06:	75fb      	strb	r3, [r7, #23]
      break;
 8003f08:	e027      	b.n	8003f5a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d107      	bne.n	8003f24 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8003f14:	f107 030f 	add.w	r3, r7, #15
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 f983 	bl	8005228 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003f22:	e01a      	b.n	8003f5a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f001 f913 	bl	8005152 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f30:	e013      	b.n	8003f5a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d00d      	beq.n	8003f58 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f001 f907 	bl	8005152 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003f44:	2302      	movs	r3, #2
 8003f46:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f48:	e006      	b.n	8003f58 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 f900 	bl	8005152 <USBD_CtlError>
      ret = USBD_FAIL;
 8003f52:	2302      	movs	r3, #2
 8003f54:	75fb      	strb	r3, [r7, #23]
      break;
 8003f56:	e000      	b.n	8003f5a <USBD_CDC_Setup+0x126>
      break;
 8003f58:	bf00      	nop
    }
    break;
 8003f5a:	e006      	b.n	8003f6a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8003f5c:	6839      	ldr	r1, [r7, #0]
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 f8f7 	bl	8005152 <USBD_CtlError>
    ret = USBD_FAIL;
 8003f64:	2302      	movs	r3, #2
 8003f66:	75fb      	strb	r3, [r7, #23]
    break;
 8003f68:	bf00      	nop
  }

  return ret;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003f86:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003f8e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03a      	beq.n	8004010 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	331c      	adds	r3, #28
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d029      	beq.n	8004004 <USBD_CDC_DataIn+0x90>
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	331c      	adds	r3, #28
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	78f9      	ldrb	r1, [r7, #3]
 8003fc4:	68b8      	ldr	r0, [r7, #8]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	1a5b      	subs	r3, r3, r1
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4403      	add	r3, r0
 8003fd0:	3344      	adds	r3, #68	; 0x44
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fd8:	fb03 f301 	mul.w	r3, r3, r1
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d110      	bne.n	8004004 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	331c      	adds	r3, #28
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003ff6:	78f9      	ldrb	r1, [r7, #3]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 fe7c 	bl	8005cfa <USBD_LL_Transmit>
 8004002:	e003      	b.n	800400c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800402c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f001 fea7 	bl	8005d86 <USBD_LL_GetRxDataSize>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800405e:	4611      	mov	r1, r2
 8004060:	4798      	blx	r3

    return USBD_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800407e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004086:	2b00      	cmp	r3, #0
 8004088:	d015      	beq.n	80040b6 <USBD_CDC_EP0_RxReady+0x46>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004090:	2bff      	cmp	r3, #255	; 0xff
 8004092:	d010      	beq.n	80040b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80040a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80040aa:	b292      	uxth	r2, r2
 80040ac:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	22ff      	movs	r2, #255	; 0xff
 80040b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2243      	movs	r2, #67	; 0x43
 80040cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80040ce:	4b03      	ldr	r3, [pc, #12]	; (80040dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	20000090 	.word	0x20000090

080040e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2243      	movs	r2, #67	; 0x43
 80040ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80040ee:	4b03      	ldr	r3, [pc, #12]	; (80040fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	2000004c 	.word	0x2000004c

08004100 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2243      	movs	r2, #67	; 0x43
 800410c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800410e:	4b03      	ldr	r3, [pc, #12]	; (800411c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	200000d4 	.word	0x200000d4

08004120 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	220a      	movs	r2, #10
 800412c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800412e:	4b03      	ldr	r3, [pc, #12]	; (800413c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000008 	.word	0x20000008

08004140 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800414a:	2302      	movs	r3, #2
 800414c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004182:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80041b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80041d8:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01c      	beq.n	800421e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d115      	bne.n	800421a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800420c:	b29b      	uxth	r3, r3
 800420e:	2181      	movs	r1, #129	; 0x81
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 fd72 	bl	8005cfa <USBD_LL_Transmit>

      return USBD_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e002      	b.n	8004220 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004236:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7c1b      	ldrb	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004254:	2101      	movs	r1, #1
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 fd72 	bl	8005d40 <USBD_LL_PrepareReceive>
 800425c:	e007      	b.n	800426e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f001 fd69 	bl	8005d40 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e000      	b.n	8004274 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004272:	2302      	movs	r3, #2
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004290:	2302      	movs	r3, #2
 8004292:	e01a      	b.n	80042ca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	79fa      	ldrb	r2, [r7, #7]
 80042c0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f001 fbe4 	bl	8005a90 <USBD_LL_Init>

  return USBD_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	e001      	b.n	80042f8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80042f4:	2302      	movs	r3, #2
 80042f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 fc0a 	bl	8005b28 <USBD_LL_Start>

  return USBD_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004340:	2302      	movs	r3, #2
 8004342:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	4611      	mov	r1, r2
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	4611      	mov	r1, r2
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
  return USBD_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fe94 	bl	80050d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80043be:	461a      	mov	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d00c      	beq.n	80043ee <USBD_LL_SetupStage+0x56>
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d302      	bcc.n	80043de <USBD_LL_SetupStage+0x46>
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d010      	beq.n	80043fe <USBD_LL_SetupStage+0x66>
 80043dc:	e017      	b.n	800440e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa04 	bl	80047f4 <USBD_StdDevReq>
    break;
 80043ec:	e01a      	b.n	8004424 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa66 	bl	80048c8 <USBD_StdItfReq>
    break;
 80043fc:	e012      	b.n	8004424 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 faa4 	bl	8004954 <USBD_StdEPReq>
    break;
 800440c:	e00a      	b.n	8004424 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004418:	b2db      	uxtb	r3, r3
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 fbe3 	bl	8005be8 <USBD_LL_StallEP>
    break;
 8004422:	bf00      	nop
  }

  return USBD_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	460b      	mov	r3, r1
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d14b      	bne.n	80044da <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004448:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004450:	2b03      	cmp	r3, #3
 8004452:	d134      	bne.n	80044be <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d919      	bls.n	8004494 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004476:	429a      	cmp	r2, r3
 8004478:	d203      	bcs.n	8004482 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800447e:	b29b      	uxth	r3, r3
 8004480:	e002      	b.n	8004488 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 ff17 	bl	80052c0 <USBD_CtlContinueRx>
 8004492:	e038      	b.n	8004506 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d105      	bne.n	80044b6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 ff14 	bl	80052e4 <USBD_CtlSendStatus>
 80044bc:	e023      	b.n	8004506 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d11e      	bne.n	8004506 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80044d0:	2100      	movs	r1, #0
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f001 fb88 	bl	8005be8 <USBD_LL_StallEP>
 80044d8:	e015      	b.n	8004506 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d108      	bne.n	8004502 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	7afa      	ldrb	r2, [r7, #11]
 80044fa:	4611      	mov	r1, r2
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	4798      	blx	r3
 8004500:	e001      	b.n	8004506 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004502:	2302      	movs	r3, #2
 8004504:	e000      	b.n	8004508 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	460b      	mov	r3, r1
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d17f      	bne.n	8004624 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3314      	adds	r3, #20
 8004528:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004530:	2b02      	cmp	r3, #2
 8004532:	d15c      	bne.n	80045ee <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	429a      	cmp	r2, r3
 800453e:	d915      	bls.n	800456c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	1ad2      	subs	r2, r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fe81 	bl	8005260 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800455e:	2300      	movs	r3, #0
 8004560:	2200      	movs	r2, #0
 8004562:	2100      	movs	r1, #0
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f001 fbeb 	bl	8005d40 <USBD_LL_PrepareReceive>
 800456a:	e04e      	b.n	800460a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	6912      	ldr	r2, [r2, #16]
 8004574:	fbb3 f1f2 	udiv	r1, r3, r2
 8004578:	fb02 f201 	mul.w	r2, r2, r1
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11c      	bne.n	80045bc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800458a:	429a      	cmp	r2, r3
 800458c:	d316      	bcc.n	80045bc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004598:	429a      	cmp	r2, r3
 800459a:	d20f      	bcs.n	80045bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fe5d 	bl	8005260 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80045ae:	2300      	movs	r3, #0
 80045b0:	2200      	movs	r2, #0
 80045b2:	2100      	movs	r1, #0
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f001 fbc3 	bl	8005d40 <USBD_LL_PrepareReceive>
 80045ba:	e026      	b.n	800460a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d105      	bne.n	80045de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f001 fb01 	bl	8005be8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fe8f 	bl	800530a <USBD_CtlReceiveStatus>
 80045ec:	e00d      	b.n	800460a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d004      	beq.n	8004602 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f001 faef 	bl	8005be8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004610:	2b01      	cmp	r3, #1
 8004612:	d11d      	bne.n	8004650 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fe82 	bl	800431e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004622:	e015      	b.n	8004650 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8004636:	2b03      	cmp	r3, #3
 8004638:	d108      	bne.n	800464c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	7afa      	ldrb	r2, [r7, #11]
 8004644:	4611      	mov	r1, r2
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	4798      	blx	r3
 800464a:	e001      	b.n	8004650 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800464c:	2302      	movs	r3, #2
 800464e:	e000      	b.n	8004652 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004662:	2340      	movs	r3, #64	; 0x40
 8004664:	2200      	movs	r2, #0
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 fa78 	bl	8005b5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2240      	movs	r2, #64	; 0x40
 800467a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800467e:	2340      	movs	r3, #64	; 0x40
 8004680:	2200      	movs	r2, #0
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f001 fa6a 	bl	8005b5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6852      	ldr	r2, [r2, #4]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	4611      	mov	r1, r2
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
  }

  return USBD_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2204      	movs	r2, #4
 8004714:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004756:	2b03      	cmp	r3, #3
 8004758:	d10b      	bne.n	8004772 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	4611      	mov	r1, r2
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3

  return USBD_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800480a:	2b20      	cmp	r3, #32
 800480c:	d004      	beq.n	8004818 <USBD_StdDevReq+0x24>
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d002      	beq.n	8004818 <USBD_StdDevReq+0x24>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <USBD_StdDevReq+0x34>
 8004816:	e04c      	b.n	80048b2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
    break;
 8004826:	e049      	b.n	80048bc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b09      	cmp	r3, #9
 800482e:	d83a      	bhi.n	80048a6 <USBD_StdDevReq+0xb2>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <USBD_StdDevReq+0x44>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	08004889 	.word	0x08004889
 800483c:	0800489d 	.word	0x0800489d
 8004840:	080048a7 	.word	0x080048a7
 8004844:	08004893 	.word	0x08004893
 8004848:	080048a7 	.word	0x080048a7
 800484c:	0800486b 	.word	0x0800486b
 8004850:	08004861 	.word	0x08004861
 8004854:	080048a7 	.word	0x080048a7
 8004858:	0800487f 	.word	0x0800487f
 800485c:	08004875 	.word	0x08004875
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f9d2 	bl	8004c0c <USBD_GetDescriptor>
      break;
 8004868:	e022      	b.n	80048b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fac7 	bl	8004e00 <USBD_SetAddress>
      break;
 8004872:	e01d      	b.n	80048b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fb04 	bl	8004e84 <USBD_SetConfig>
      break;
 800487c:	e018      	b.n	80048b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800487e:	6839      	ldr	r1, [r7, #0]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fb8d 	bl	8004fa0 <USBD_GetConfig>
      break;
 8004886:	e013      	b.n	80048b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004888:	6839      	ldr	r1, [r7, #0]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fbbc 	bl	8005008 <USBD_GetStatus>
      break;
 8004890:	e00e      	b.n	80048b0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fbea 	bl	800506e <USBD_SetFeature>
      break;
 800489a:	e009      	b.n	80048b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fbf9 	bl	8005096 <USBD_ClrFeature>
      break;
 80048a4:	e004      	b.n	80048b0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fc52 	bl	8005152 <USBD_CtlError>
      break;
 80048ae:	bf00      	nop
    }
    break;
 80048b0:	e004      	b.n	80048bc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fc4c 	bl	8005152 <USBD_CtlError>
    break;
 80048ba:	bf00      	nop
  }

  return ret;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop

080048c8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d003      	beq.n	80048ea <USBD_StdItfReq+0x22>
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d001      	beq.n	80048ea <USBD_StdItfReq+0x22>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12a      	bne.n	8004940 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80048f0:	3b01      	subs	r3, #1
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d81d      	bhi.n	8004932 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	889b      	ldrh	r3, [r3, #4]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d813      	bhi.n	8004928 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	88db      	ldrh	r3, [r3, #6]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d110      	bne.n	800493c <USBD_StdItfReq+0x74>
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10d      	bne.n	800493c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fcdf 	bl	80052e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004926:	e009      	b.n	800493c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fc11 	bl	8005152 <USBD_CtlError>
      break;
 8004930:	e004      	b.n	800493c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fc0c 	bl	8005152 <USBD_CtlError>
      break;
 800493a:	e000      	b.n	800493e <USBD_StdItfReq+0x76>
      break;
 800493c:	bf00      	nop
    }
    break;
 800493e:	e004      	b.n	800494a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004940:	6839      	ldr	r1, [r7, #0]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fc05 	bl	8005152 <USBD_CtlError>
    break;
 8004948:	bf00      	nop
  }

  return USBD_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	889b      	ldrh	r3, [r3, #4]
 8004966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004970:	2b20      	cmp	r3, #32
 8004972:	d004      	beq.n	800497e <USBD_StdEPReq+0x2a>
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d002      	beq.n	800497e <USBD_StdEPReq+0x2a>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <USBD_StdEPReq+0x3a>
 800497c:	e13b      	b.n	8004bf6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
    break;
 800498c:	e138      	b.n	8004c00 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004996:	2b20      	cmp	r3, #32
 8004998:	d10a      	bne.n	80049b0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]

      return ret;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	e128      	b.n	8004c02 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d03e      	beq.n	8004a36 <USBD_StdEPReq+0xe2>
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d002      	beq.n	80049c2 <USBD_StdEPReq+0x6e>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d070      	beq.n	8004aa2 <USBD_StdEPReq+0x14e>
 80049c0:	e113      	b.n	8004bea <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d002      	beq.n	80049d2 <USBD_StdEPReq+0x7e>
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d015      	beq.n	80049fc <USBD_StdEPReq+0xa8>
 80049d0:	e02b      	b.n	8004a2a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049d2:	7bbb      	ldrb	r3, [r7, #14]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <USBD_StdEPReq+0x9e>
 80049d8:	7bbb      	ldrb	r3, [r7, #14]
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d009      	beq.n	80049f2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80049de:	7bbb      	ldrb	r3, [r7, #14]
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 f900 	bl	8005be8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f001 f8fc 	bl	8005be8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80049f0:	e020      	b.n	8004a34 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fbac 	bl	8005152 <USBD_CtlError>
        break;
 80049fa:	e01b      	b.n	8004a34 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	885b      	ldrh	r3, [r3, #2]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10e      	bne.n	8004a22 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <USBD_StdEPReq+0xce>
 8004a0a:	7bbb      	ldrb	r3, [r7, #14]
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d008      	beq.n	8004a22 <USBD_StdEPReq+0xce>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	88db      	ldrh	r3, [r3, #6]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004a18:	7bbb      	ldrb	r3, [r7, #14]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f001 f8e3 	bl	8005be8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fc5e 	bl	80052e4 <USBD_CtlSendStatus>

        break;
 8004a28:	e004      	b.n	8004a34 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fb90 	bl	8005152 <USBD_CtlError>
        break;
 8004a32:	bf00      	nop
      }
      break;
 8004a34:	e0de      	b.n	8004bf4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d002      	beq.n	8004a46 <USBD_StdEPReq+0xf2>
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d015      	beq.n	8004a70 <USBD_StdEPReq+0x11c>
 8004a44:	e026      	b.n	8004a94 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a46:	7bbb      	ldrb	r3, [r7, #14]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00c      	beq.n	8004a66 <USBD_StdEPReq+0x112>
 8004a4c:	7bbb      	ldrb	r3, [r7, #14]
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d009      	beq.n	8004a66 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004a52:	7bbb      	ldrb	r3, [r7, #14]
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f001 f8c6 	bl	8005be8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f001 f8c2 	bl	8005be8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a64:	e01c      	b.n	8004aa0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb72 	bl	8005152 <USBD_CtlError>
        break;
 8004a6e:	e017      	b.n	8004aa0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	885b      	ldrh	r3, [r3, #2]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d112      	bne.n	8004a9e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a82:	7bbb      	ldrb	r3, [r7, #14]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 f8cd 	bl	8005c26 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fc29 	bl	80052e4 <USBD_CtlSendStatus>
        }
        break;
 8004a92:	e004      	b.n	8004a9e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fb5b 	bl	8005152 <USBD_CtlError>
        break;
 8004a9c:	e000      	b.n	8004aa0 <USBD_StdEPReq+0x14c>
        break;
 8004a9e:	bf00      	nop
      }
      break;
 8004aa0:	e0a8      	b.n	8004bf4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d002      	beq.n	8004ab2 <USBD_StdEPReq+0x15e>
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d031      	beq.n	8004b14 <USBD_StdEPReq+0x1c0>
 8004ab0:	e095      	b.n	8004bde <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ab2:	7bbb      	ldrb	r3, [r7, #14]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <USBD_StdEPReq+0x174>
 8004ab8:	7bbb      	ldrb	r3, [r7, #14]
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d004      	beq.n	8004ac8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb46 	bl	8005152 <USBD_CtlError>
          break;
 8004ac6:	e08f      	b.n	8004be8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da0b      	bge.n	8004ae8 <USBD_StdEPReq+0x194>
 8004ad0:	7bbb      	ldrb	r3, [r7, #14]
 8004ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	3310      	adds	r3, #16
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	e00a      	b.n	8004afe <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004ae8:	7bbb      	ldrb	r3, [r7, #14]
 8004aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb8b 	bl	8005228 <USBD_CtlSendData>
          break;
 8004b12:	e069      	b.n	8004be8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da11      	bge.n	8004b40 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	f003 020f 	and.w	r2, r3, #15
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3318      	adds	r3, #24
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d117      	bne.n	8004b66 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fb0a 	bl	8005152 <USBD_CtlError>
            break;
 8004b3e:	e053      	b.n	8004be8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 faf7 	bl	8005152 <USBD_CtlError>
            break;
 8004b64:	e040      	b.n	8004be8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da0b      	bge.n	8004b86 <USBD_StdEPReq+0x232>
 8004b6e:	7bbb      	ldrb	r3, [r7, #14]
 8004b70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	3304      	adds	r3, #4
 8004b84:	e00a      	b.n	8004b9c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004b86:	7bbb      	ldrb	r3, [r7, #14]
 8004b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <USBD_StdEPReq+0x256>
 8004ba4:	7bbb      	ldrb	r3, [r7, #14]
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d103      	bne.n	8004bb2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e00e      	b.n	8004bd0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004bb2:	7bbb      	ldrb	r3, [r7, #14]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 f854 	bl	8005c64 <USBD_LL_IsStallEP>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	e002      	b.n	8004bd0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fb26 	bl	8005228 <USBD_CtlSendData>
          break;
 8004bdc:	e004      	b.n	8004be8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fab6 	bl	8005152 <USBD_CtlError>
        break;
 8004be6:	bf00      	nop
      }
      break;
 8004be8:	e004      	b.n	8004bf4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fab0 	bl	8005152 <USBD_CtlError>
      break;
 8004bf2:	bf00      	nop
    }
    break;
 8004bf4:	e004      	b.n	8004c00 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 faaa 	bl	8005152 <USBD_CtlError>
    break;
 8004bfe:	bf00      	nop
  }

  return ret;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	885b      	ldrh	r3, [r3, #2]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	2b06      	cmp	r3, #6
 8004c22:	f200 80c9 	bhi.w	8004db8 <USBD_GetDescriptor+0x1ac>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <USBD_GetDescriptor+0x20>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004ca1 	.word	0x08004ca1
 8004c38:	08004db9 	.word	0x08004db9
 8004c3c:	08004db9 	.word	0x08004db9
 8004c40:	08004d65 	.word	0x08004d65
 8004c44:	08004d8b 	.word	0x08004d8b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	7c12      	ldrb	r2, [r2, #16]
 8004c54:	f107 010a 	add.w	r1, r7, #10
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4798      	blx	r3
 8004c5c:	60f8      	str	r0, [r7, #12]
    break;
 8004c5e:	e0b0      	b.n	8004dc2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7c1b      	ldrb	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	f107 020a 	add.w	r2, r7, #10
 8004c74:	4610      	mov	r0, r2
 8004c76:	4798      	blx	r3
 8004c78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	2202      	movs	r2, #2
 8004c80:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004c82:	e09e      	b.n	8004dc2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f107 020a 	add.w	r2, r7, #10
 8004c90:	4610      	mov	r0, r2
 8004c92:	4798      	blx	r3
 8004c94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	701a      	strb	r2, [r3, #0]
    break;
 8004c9e:	e090      	b.n	8004dc2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	885b      	ldrh	r3, [r3, #2]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d856      	bhi.n	8004d58 <USBD_GetDescriptor+0x14c>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <USBD_GetDescriptor+0xa4>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004cf9 	.word	0x08004cf9
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004d29 	.word	0x08004d29
 8004cc4:	08004d41 	.word	0x08004d41
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	7c12      	ldrb	r2, [r2, #16]
 8004cd4:	f107 010a 	add.w	r1, r7, #10
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
 8004cdc:	60f8      	str	r0, [r7, #12]
      break;
 8004cde:	e040      	b.n	8004d62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	7c12      	ldrb	r2, [r2, #16]
 8004cec:	f107 010a 	add.w	r1, r7, #10
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4798      	blx	r3
 8004cf4:	60f8      	str	r0, [r7, #12]
      break;
 8004cf6:	e034      	b.n	8004d62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	7c12      	ldrb	r2, [r2, #16]
 8004d04:	f107 010a 	add.w	r1, r7, #10
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4798      	blx	r3
 8004d0c:	60f8      	str	r0, [r7, #12]
      break;
 8004d0e:	e028      	b.n	8004d62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	7c12      	ldrb	r2, [r2, #16]
 8004d1c:	f107 010a 	add.w	r1, r7, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
 8004d24:	60f8      	str	r0, [r7, #12]
      break;
 8004d26:	e01c      	b.n	8004d62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	7c12      	ldrb	r2, [r2, #16]
 8004d34:	f107 010a 	add.w	r1, r7, #10
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4798      	blx	r3
 8004d3c:	60f8      	str	r0, [r7, #12]
      break;
 8004d3e:	e010      	b.n	8004d62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	7c12      	ldrb	r2, [r2, #16]
 8004d4c:	f107 010a 	add.w	r1, r7, #10
 8004d50:	4610      	mov	r0, r2
 8004d52:	4798      	blx	r3
 8004d54:	60f8      	str	r0, [r7, #12]
      break;
 8004d56:	e004      	b.n	8004d62 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9f9 	bl	8005152 <USBD_CtlError>
      return;
 8004d60:	e04b      	b.n	8004dfa <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8004d62:	e02e      	b.n	8004dc2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7c1b      	ldrb	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	f107 020a 	add.w	r2, r7, #10
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
 8004d7c:	60f8      	str	r0, [r7, #12]
      break;
 8004d7e:	e020      	b.n	8004dc2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f9e5 	bl	8005152 <USBD_CtlError>
      return;
 8004d88:	e037      	b.n	8004dfa <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	7c1b      	ldrb	r3, [r3, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f107 020a 	add.w	r2, r7, #10
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4798      	blx	r3
 8004da2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	2207      	movs	r2, #7
 8004daa:	701a      	strb	r2, [r3, #0]
      break;
 8004dac:	e009      	b.n	8004dc2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9ce 	bl	8005152 <USBD_CtlError>
      return;
 8004db6:	e020      	b.n	8004dfa <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9c9 	bl	8005152 <USBD_CtlError>
    return;
 8004dc0:	e01b      	b.n	8004dfa <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8004dc2:	897b      	ldrh	r3, [r7, #10]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d011      	beq.n	8004dec <USBD_GetDescriptor+0x1e0>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	88db      	ldrh	r3, [r3, #6]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00d      	beq.n	8004dec <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	88da      	ldrh	r2, [r3, #6]
 8004dd4:	897b      	ldrh	r3, [r7, #10]
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	bf28      	it	cs
 8004dda:	4613      	movcs	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8004de0:	897b      	ldrh	r3, [r7, #10]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68f9      	ldr	r1, [r7, #12]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa1e 	bl	8005228 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	88db      	ldrh	r3, [r3, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fa75 	bl	80052e4 <USBD_CtlSendStatus>
  }
}
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	889b      	ldrh	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d130      	bne.n	8004e74 <USBD_SetAddress+0x74>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	88db      	ldrh	r3, [r3, #6]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d12c      	bne.n	8004e74 <USBD_SetAddress+0x74>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	885b      	ldrh	r3, [r3, #2]
 8004e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e20:	d828      	bhi.n	8004e74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	885b      	ldrh	r3, [r3, #2]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d104      	bne.n	8004e42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f989 	bl	8005152 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e40:	e01c      	b.n	8004e7c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7bfa      	ldrb	r2, [r7, #15]
 8004e46:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 ff34 	bl	8005cbc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa45 	bl	80052e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e68:	e008      	b.n	8004e7c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e72:	e003      	b.n	8004e7c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f96b 	bl	8005152 <USBD_CtlError>
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	885b      	ldrh	r3, [r3, #2]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <USBD_SetConfig+0x118>)
 8004e96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e98:	4b40      	ldr	r3, [pc, #256]	; (8004f9c <USBD_SetConfig+0x118>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d904      	bls.n	8004eaa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f955 	bl	8005152 <USBD_CtlError>
 8004ea8:	e075      	b.n	8004f96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d002      	beq.n	8004eba <USBD_SetConfig+0x36>
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d023      	beq.n	8004f00 <USBD_SetConfig+0x7c>
 8004eb8:	e062      	b.n	8004f80 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8004eba:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <USBD_SetConfig+0x118>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01a      	beq.n	8004ef8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8004ec2:	4b36      	ldr	r3, [pc, #216]	; (8004f9c <USBD_SetConfig+0x118>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ed4:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <USBD_SetConfig+0x118>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fa2a 	bl	8004334 <USBD_SetClassConfig>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d104      	bne.n	8004ef0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f932 	bl	8005152 <USBD_CtlError>
          return;
 8004eee:	e052      	b.n	8004f96 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f9f7 	bl	80052e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004ef6:	e04e      	b.n	8004f96 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f9f3 	bl	80052e4 <USBD_CtlSendStatus>
      break;
 8004efe:	e04a      	b.n	8004f96 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8004f00:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <USBD_SetConfig+0x118>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d112      	bne.n	8004f2e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8004f10:	4b22      	ldr	r3, [pc, #136]	; (8004f9c <USBD_SetConfig+0x118>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8004f1a:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <USBD_SetConfig+0x118>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fa26 	bl	8004372 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f9dc 	bl	80052e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004f2c:	e033      	b.n	8004f96 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <USBD_SetConfig+0x118>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d01d      	beq.n	8004f78 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fa14 	bl	8004372 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004f4a:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <USBD_SetConfig+0x118>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <USBD_SetConfig+0x118>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff f9ea 	bl	8004334 <USBD_SetClassConfig>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d104      	bne.n	8004f70 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8f2 	bl	8005152 <USBD_CtlError>
          return;
 8004f6e:	e012      	b.n	8004f96 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f9b7 	bl	80052e4 <USBD_CtlSendStatus>
      break;
 8004f76:	e00e      	b.n	8004f96 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f9b3 	bl	80052e4 <USBD_CtlSendStatus>
      break;
 8004f7e:	e00a      	b.n	8004f96 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f8e5 	bl	8005152 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004f88:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <USBD_SetConfig+0x118>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff f9ef 	bl	8004372 <USBD_ClrClassConfig>
      break;
 8004f94:	bf00      	nop
    }
  }
}
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200001fc 	.word	0x200001fc

08004fa0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	88db      	ldrh	r3, [r3, #6]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d004      	beq.n	8004fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8cc 	bl	8005152 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004fba:	e021      	b.n	8005000 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	db17      	blt.n	8004ff6 <USBD_GetConfig+0x56>
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	dd02      	ble.n	8004fd0 <USBD_GetConfig+0x30>
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d00b      	beq.n	8004fe6 <USBD_GetConfig+0x46>
 8004fce:	e012      	b.n	8004ff6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f922 	bl	8005228 <USBD_CtlSendData>
      break;
 8004fe4:	e00c      	b.n	8005000 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	2201      	movs	r2, #1
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f91a 	bl	8005228 <USBD_CtlSendData>
      break;
 8004ff4:	e004      	b.n	8005000 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8aa 	bl	8005152 <USBD_CtlError>
      break;
 8004ffe:	bf00      	nop
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005018:	3b01      	subs	r3, #1
 800501a:	2b02      	cmp	r3, #2
 800501c:	d81e      	bhi.n	800505c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	88db      	ldrh	r3, [r3, #6]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d004      	beq.n	8005030 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f892 	bl	8005152 <USBD_CtlError>
      break;
 800502e:	e01a      	b.n	8005066 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f043 0202 	orr.w	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	330c      	adds	r3, #12
 8005050:	2202      	movs	r2, #2
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f8e7 	bl	8005228 <USBD_CtlSendData>
    break;
 800505a:	e004      	b.n	8005066 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f877 	bl	8005152 <USBD_CtlError>
    break;
 8005064:	bf00      	nop
  }
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	885b      	ldrh	r3, [r3, #2]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d106      	bne.n	800508e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f92b 	bl	80052e4 <USBD_CtlSendStatus>
  }

}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80050a6:	3b01      	subs	r3, #1
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d80b      	bhi.n	80050c4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	885b      	ldrh	r3, [r3, #2]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10c      	bne.n	80050ce <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f911 	bl	80052e4 <USBD_CtlSendStatus>
    }
    break;
 80050c2:	e004      	b.n	80050ce <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f843 	bl	8005152 <USBD_CtlError>
    break;
 80050cc:	e000      	b.n	80050d0 <USBD_ClrFeature+0x3a>
    break;
 80050ce:	bf00      	nop
  }
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	785a      	ldrb	r2, [r3, #1]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3302      	adds	r3, #2
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	3303      	adds	r3, #3
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	4413      	add	r3, r2
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	3304      	adds	r3, #4
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b29a      	uxth	r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	3305      	adds	r3, #5
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	b29b      	uxth	r3, r3
 8005122:	4413      	add	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3306      	adds	r3, #6
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	b29a      	uxth	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	3307      	adds	r3, #7
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	b29b      	uxth	r3, r3
 800513e:	4413      	add	r3, r2
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	80da      	strh	r2, [r3, #6]

}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800515c:	2180      	movs	r1, #128	; 0x80
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fd42 	bl	8005be8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005164:	2100      	movs	r1, #0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fd3e 	bl	8005be8 <USBD_LL_StallEP>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d032      	beq.n	80051f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f834 	bl	80051f8 <USBD_GetLen>
 8005190:	4603      	mov	r3, r0
 8005192:	3301      	adds	r3, #1
 8005194:	b29b      	uxth	r3, r3
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	75fa      	strb	r2, [r7, #23]
 80051a4:	461a      	mov	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4413      	add	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	75fa      	strb	r2, [r7, #23]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4413      	add	r3, r2
 80051bc:	2203      	movs	r2, #3
 80051be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80051c0:	e012      	b.n	80051e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	60fa      	str	r2, [r7, #12]
 80051c8:	7dfa      	ldrb	r2, [r7, #23]
 80051ca:	1c51      	adds	r1, r2, #1
 80051cc:	75f9      	strb	r1, [r7, #23]
 80051ce:	4611      	mov	r1, r2
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	440a      	add	r2, r1
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	75fa      	strb	r2, [r7, #23]
 80051de:	461a      	mov	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4413      	add	r3, r2
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e8      	bne.n	80051c2 <USBD_GetString+0x4e>
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8005204:	e005      	b.n	8005212 <USBD_GetLen+0x1a>
    {
        len++;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	3301      	adds	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3301      	adds	r3, #1
 8005210:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f5      	bne.n	8005206 <USBD_GetLen+0xe>
    }

    return len;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2202      	movs	r2, #2
 800523a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	2100      	movs	r1, #0
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fd52 	bl	8005cfa <USBD_LL_Transmit>

  return USBD_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	2100      	movs	r1, #0
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fd40 	bl	8005cfa <USBD_LL_Transmit>

  return USBD_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2203      	movs	r2, #3
 8005296:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	2100      	movs	r1, #0
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fd45 	bl	8005d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	2100      	movs	r1, #0
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fd33 	bl	8005d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2204      	movs	r2, #4
 80052f0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80052f4:	2300      	movs	r3, #0
 80052f6:	2200      	movs	r2, #0
 80052f8:	2100      	movs	r1, #0
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fcfd 	bl	8005cfa <USBD_LL_Transmit>

  return USBD_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2205      	movs	r2, #5
 8005316:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800531a:	2300      	movs	r3, #0
 800531c:	2200      	movs	r2, #0
 800531e:	2100      	movs	r1, #0
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fd0d 	bl	8005d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0

  HAL_Init();
 8005334:	f7fb f8d0 	bl	80004d8 <HAL_Init>

  SystemClock_Config();
 8005338:	f000 f820 	bl	800537c <SystemClock_Config>


  MX_GPIO_Init();
 800533c:	f000 f886 	bl	800544c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005340:	f000 f980 	bl	8005644 <MX_USB_DEVICE_Init>

  while (1)
  {
	  HAL_Delay(500);
 8005344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005348:	f7fb f938 	bl	80005bc <HAL_Delay>
 800534c:	e7fa      	b.n	8005344 <main+0x14>
	...

08005350 <CDC_ReceiveCallBack>:
  }
  /* USER CODE END 3 */
}

 void CDC_ReceiveCallBack(uint8_t * bff, uint32_t len){
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]

	 //Do something..

	 CDC_Transmit_FS(bff,len);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fa33 	bl	80057cc <CDC_Transmit_FS>
	 HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8005366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536a:	4803      	ldr	r0, [pc, #12]	; (8005378 <CDC_ReceiveCallBack+0x28>)
 800536c:	f7fb fbf5 	bl	8000b5a <HAL_GPIO_TogglePin>

}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40020c00 	.word	0x40020c00

0800537c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b094      	sub	sp, #80	; 0x50
 8005380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005382:	f107 0320 	add.w	r3, r7, #32
 8005386:	2230      	movs	r2, #48	; 0x30
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f000 feac 	bl	80060e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005390:	f107 030c 	add.w	r3, r7, #12
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	609a      	str	r2, [r3, #8]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <SystemClock_Config+0xc8>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	4a26      	ldr	r2, [pc, #152]	; (8005444 <SystemClock_Config+0xc8>)
 80053aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ae:	6413      	str	r3, [r2, #64]	; 0x40
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <SystemClock_Config+0xc8>)
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053bc:	2300      	movs	r3, #0
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	4b21      	ldr	r3, [pc, #132]	; (8005448 <SystemClock_Config+0xcc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <SystemClock_Config+0xcc>)
 80053c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	4b1e      	ldr	r3, [pc, #120]	; (8005448 <SystemClock_Config+0xcc>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053d8:	2301      	movs	r3, #1
 80053da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053e2:	2302      	movs	r3, #2
 80053e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80053ec:	2304      	movs	r3, #4
 80053ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80053f0:	2360      	movs	r3, #96	; 0x60
 80053f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053f4:	2302      	movs	r3, #2
 80053f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80053f8:	2304      	movs	r3, #4
 80053fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053fc:	f107 0320 	add.w	r3, r7, #32
 8005400:	4618      	mov	r0, r3
 8005402:	f7fc fd4f 	bl	8001ea4 <HAL_RCC_OscConfig>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800540c:	f000 f870 	bl	80054f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005410:	230f      	movs	r3, #15
 8005412:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005414:	2302      	movs	r3, #2
 8005416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800541c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	2103      	movs	r1, #3
 800542c:	4618      	mov	r0, r3
 800542e:	f7fc ffa9 	bl	8002384 <HAL_RCC_ClockConfig>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005438:	f000 f85a 	bl	80054f0 <Error_Handler>
  }
}
 800543c:	bf00      	nop
 800543e:	3750      	adds	r7, #80	; 0x50
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	40007000 	.word	0x40007000

0800544c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	60da      	str	r2, [r3, #12]
 8005460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <MX_GPIO_Init+0x9c>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <MX_GPIO_Init+0x9c>)
 800546c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005470:	6313      	str	r3, [r2, #48]	; 0x30
 8005472:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <MX_GPIO_Init+0x9c>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <MX_GPIO_Init+0x9c>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <MX_GPIO_Init+0x9c>)
 8005488:	f043 0308 	orr.w	r3, r3, #8
 800548c:	6313      	str	r3, [r2, #48]	; 0x30
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <MX_GPIO_Init+0x9c>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	607b      	str	r3, [r7, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800549a:	2300      	movs	r3, #0
 800549c:	603b      	str	r3, [r7, #0]
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <MX_GPIO_Init+0x9c>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <MX_GPIO_Init+0x9c>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6313      	str	r3, [r2, #48]	; 0x30
 80054aa:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <MX_GPIO_Init+0x9c>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80054b6:	2200      	movs	r2, #0
 80054b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054bc:	480b      	ldr	r0, [pc, #44]	; (80054ec <MX_GPIO_Init+0xa0>)
 80054be:	f7fb fb33 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80054c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054c8:	2301      	movs	r3, #1
 80054ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80054d4:	f107 030c 	add.w	r3, r7, #12
 80054d8:	4619      	mov	r1, r3
 80054da:	4804      	ldr	r0, [pc, #16]	; (80054ec <MX_GPIO_Init+0xa0>)
 80054dc:	f7fb f9a2 	bl	8000824 <HAL_GPIO_Init>

}
 80054e0:	bf00      	nop
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40020c00 	.word	0x40020c00

080054f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <HAL_MspInit+0x4c>)
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	4a0f      	ldr	r2, [pc, #60]	; (800554c <HAL_MspInit+0x4c>)
 8005510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005514:	6453      	str	r3, [r2, #68]	; 0x44
 8005516:	4b0d      	ldr	r3, [pc, #52]	; (800554c <HAL_MspInit+0x4c>)
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_MspInit+0x4c>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	4a08      	ldr	r2, [pc, #32]	; (800554c <HAL_MspInit+0x4c>)
 800552c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005530:	6413      	str	r3, [r2, #64]	; 0x40
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <HAL_MspInit+0x4c>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800553e:	2007      	movs	r0, #7
 8005540:	f7fb f92e 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40023800 	.word	0x40023800

08005550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005562:	e7fe      	b.n	8005562 <HardFault_Handler+0x4>

08005564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005568:	e7fe      	b.n	8005568 <MemManage_Handler+0x4>

0800556a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800556e:	e7fe      	b.n	800556e <BusFault_Handler+0x4>

08005570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005574:	e7fe      	b.n	8005574 <UsageFault_Handler+0x4>

08005576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055a4:	f7fa ffea 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055a8:	bf00      	nop
 80055aa:	bd80      	pop	{r7, pc}

080055ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <OTG_FS_IRQHandler+0x10>)
 80055b2:	f7fb fc3d 	bl	8000e30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	200014ac 	.word	0x200014ac

080055c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <_sbrk+0x50>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <_sbrk+0x16>
		heap_end = &end;
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <_sbrk+0x50>)
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <_sbrk+0x54>)
 80055d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <_sbrk+0x50>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <_sbrk+0x50>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	466a      	mov	r2, sp
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d907      	bls.n	80055fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80055ea:	f000 fd43 	bl	8006074 <__errno>
 80055ee:	4602      	mov	r2, r0
 80055f0:	230c      	movs	r3, #12
 80055f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	e006      	b.n	8005608 <_sbrk+0x48>
	}

	heap_end += incr;
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <_sbrk+0x50>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	4a03      	ldr	r2, [pc, #12]	; (8005610 <_sbrk+0x50>)
 8005604:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000200 	.word	0x20000200
 8005614:	20001ab8 	.word	0x20001ab8

08005618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800561c:	4b08      	ldr	r3, [pc, #32]	; (8005640 <SystemInit+0x28>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	4a07      	ldr	r2, [pc, #28]	; (8005640 <SystemInit+0x28>)
 8005624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800562c:	4b04      	ldr	r3, [pc, #16]	; (8005640 <SystemInit+0x28>)
 800562e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005632:	609a      	str	r2, [r3, #8]
#endif
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005648:	2200      	movs	r2, #0
 800564a:	4912      	ldr	r1, [pc, #72]	; (8005694 <MX_USB_DEVICE_Init+0x50>)
 800564c:	4812      	ldr	r0, [pc, #72]	; (8005698 <MX_USB_DEVICE_Init+0x54>)
 800564e:	f7fe fe15 	bl	800427c <USBD_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005658:	f7ff ff4a 	bl	80054f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800565c:	490f      	ldr	r1, [pc, #60]	; (800569c <MX_USB_DEVICE_Init+0x58>)
 800565e:	480e      	ldr	r0, [pc, #56]	; (8005698 <MX_USB_DEVICE_Init+0x54>)
 8005660:	f7fe fe37 	bl	80042d2 <USBD_RegisterClass>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800566a:	f7ff ff41 	bl	80054f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800566e:	490c      	ldr	r1, [pc, #48]	; (80056a0 <MX_USB_DEVICE_Init+0x5c>)
 8005670:	4809      	ldr	r0, [pc, #36]	; (8005698 <MX_USB_DEVICE_Init+0x54>)
 8005672:	f7fe fd65 	bl	8004140 <USBD_CDC_RegisterInterface>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800567c:	f7ff ff38 	bl	80054f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005680:	4805      	ldr	r0, [pc, #20]	; (8005698 <MX_USB_DEVICE_Init+0x54>)
 8005682:	f7fe fe40 	bl	8004306 <USBD_Start>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800568c:	f7ff ff30 	bl	80054f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005690:	bf00      	nop
 8005692:	bd80      	pop	{r7, pc}
 8005694:	2000012c 	.word	0x2000012c
 8005698:	20000210 	.word	0x20000210
 800569c:	20000014 	.word	0x20000014
 80056a0:	2000011c 	.word	0x2000011c

080056a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80056a8:	2200      	movs	r2, #0
 80056aa:	4905      	ldr	r1, [pc, #20]	; (80056c0 <CDC_Init_FS+0x1c>)
 80056ac:	4805      	ldr	r0, [pc, #20]	; (80056c4 <CDC_Init_FS+0x20>)
 80056ae:	f7fe fd5e 	bl	800416e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80056b2:	4905      	ldr	r1, [pc, #20]	; (80056c8 <CDC_Init_FS+0x24>)
 80056b4:	4803      	ldr	r0, [pc, #12]	; (80056c4 <CDC_Init_FS+0x20>)
 80056b6:	f7fe fd74 	bl	80041a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80056ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000cac 	.word	0x20000cac
 80056c4:	20000210 	.word	0x20000210
 80056c8:	200004ac 	.word	0x200004ac

080056cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80056d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	71fb      	strb	r3, [r7, #7]
 80056e8:	4613      	mov	r3, r2
 80056ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	2b23      	cmp	r3, #35	; 0x23
 80056f0:	d84a      	bhi.n	8005788 <CDC_Control_FS+0xac>
 80056f2:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <CDC_Control_FS+0x1c>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005789 	.word	0x08005789
 80056fc:	08005789 	.word	0x08005789
 8005700:	08005789 	.word	0x08005789
 8005704:	08005789 	.word	0x08005789
 8005708:	08005789 	.word	0x08005789
 800570c:	08005789 	.word	0x08005789
 8005710:	08005789 	.word	0x08005789
 8005714:	08005789 	.word	0x08005789
 8005718:	08005789 	.word	0x08005789
 800571c:	08005789 	.word	0x08005789
 8005720:	08005789 	.word	0x08005789
 8005724:	08005789 	.word	0x08005789
 8005728:	08005789 	.word	0x08005789
 800572c:	08005789 	.word	0x08005789
 8005730:	08005789 	.word	0x08005789
 8005734:	08005789 	.word	0x08005789
 8005738:	08005789 	.word	0x08005789
 800573c:	08005789 	.word	0x08005789
 8005740:	08005789 	.word	0x08005789
 8005744:	08005789 	.word	0x08005789
 8005748:	08005789 	.word	0x08005789
 800574c:	08005789 	.word	0x08005789
 8005750:	08005789 	.word	0x08005789
 8005754:	08005789 	.word	0x08005789
 8005758:	08005789 	.word	0x08005789
 800575c:	08005789 	.word	0x08005789
 8005760:	08005789 	.word	0x08005789
 8005764:	08005789 	.word	0x08005789
 8005768:	08005789 	.word	0x08005789
 800576c:	08005789 	.word	0x08005789
 8005770:	08005789 	.word	0x08005789
 8005774:	08005789 	.word	0x08005789
 8005778:	08005789 	.word	0x08005789
 800577c:	08005789 	.word	0x08005789
 8005780:	08005789 	.word	0x08005789
 8005784:	08005789 	.word	0x08005789
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005788:	bf00      	nop
  }

  return (USBD_OK);
 800578a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4808      	ldr	r0, [pc, #32]	; (80057c8 <CDC_Receive_FS+0x30>)
 80057a6:	f7fe fcfc 	bl	80041a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80057aa:	4807      	ldr	r0, [pc, #28]	; (80057c8 <CDC_Receive_FS+0x30>)
 80057ac:	f7fe fd3c 	bl	8004228 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,Len[0]);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fdca 	bl	8005350 <CDC_ReceiveCallBack>
  return (USBD_OK);
 80057bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000210 	.word	0x20000210

080057cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <CDC_Transmit_FS+0x48>)
 80057de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80057e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e00b      	b.n	800580a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	461a      	mov	r2, r3
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4806      	ldr	r0, [pc, #24]	; (8005814 <CDC_Transmit_FS+0x48>)
 80057fa:	f7fe fcb8 	bl	800416e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80057fe:	4805      	ldr	r0, [pc, #20]	; (8005814 <CDC_Transmit_FS+0x48>)
 8005800:	f7fe fce3 	bl	80041ca <USBD_CDC_TransmitPacket>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000210 	.word	0x20000210

08005818 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005838:	d13a      	bne.n	80058b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800585a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585c:	2302      	movs	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005864:	2303      	movs	r3, #3
 8005866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005868:	230a      	movs	r3, #10
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	4812      	ldr	r0, [pc, #72]	; (80058bc <HAL_PCD_MspInit+0xa4>)
 8005874:	f7fa ffd6 	bl	8000824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005878:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	4a0e      	ldr	r2, [pc, #56]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 800587e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005882:	6353      	str	r3, [r2, #52]	; 0x34
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 800588e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005892:	6453      	str	r3, [r2, #68]	; 0x44
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <HAL_PCD_MspInit+0xa0>)
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80058a0:	2200      	movs	r2, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	2043      	movs	r0, #67	; 0x43
 80058a6:	f7fa ff86 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80058aa:	2043      	movs	r0, #67	; 0x43
 80058ac:	f7fa ff9f 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80058b0:	bf00      	nop
 80058b2:	3728      	adds	r7, #40	; 0x28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	40020000 	.word	0x40020000

080058c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fe fd5e 	bl	8004398 <USBD_LL_SetupStage>
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	4619      	mov	r1, r3
 800590e:	f7fe fd8e 	bl	800442e <USBD_LL_DataOutStage>
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3348      	adds	r3, #72	; 0x48
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	4619      	mov	r1, r3
 8005942:	f7fe fde5 	bl	8004510 <USBD_LL_DataInStage>
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe fef3 	bl	8004748 <USBD_LL_SOF>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d001      	beq.n	8005982 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800597e:	f7ff fdb7 	bl	80054f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005988:	7bfa      	ldrb	r2, [r7, #15]
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe fea5 	bl	80046dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fe5e 	bl	800465a <USBD_LL_Reset>
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fea0 	bl	80046fc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_PCD_SuspendCallback+0x48>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <HAL_PCD_SuspendCallback+0x48>)
 80059e2:	f043 0306 	orr.w	r3, r3, #6
 80059e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fe8f 	bl	8004726 <USBD_LL_Resume>
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe feb5 	bl	8004796 <USBD_LL_IsoOUTIncomplete>
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a46:	78fa      	ldrb	r2, [r7, #3]
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fe96 	bl	800477c <USBD_LL_IsoINIncomplete>
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fea2 	bl	80047b0 <USBD_LL_DevConnected>
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fe9f 	bl	80047c6 <USBD_LL_DevDisconnected>
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d13c      	bne.n	8005b1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <USBD_LL_Init+0x94>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <USBD_LL_Init+0x94>)
 8005aac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ab0:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <USBD_LL_Init+0x94>)
 8005ab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005ab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <USBD_LL_Init+0x94>)
 8005aba:	2204      	movs	r2, #4
 8005abc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005abe:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <USBD_LL_Init+0x94>)
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005ac4:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <USBD_LL_Init+0x94>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005aca:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <USBD_LL_Init+0x94>)
 8005acc:	2202      	movs	r2, #2
 8005ace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005ad0:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <USBD_LL_Init+0x94>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <USBD_LL_Init+0x94>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <USBD_LL_Init+0x94>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <USBD_LL_Init+0x94>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <USBD_LL_Init+0x94>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005aee:	480d      	ldr	r0, [pc, #52]	; (8005b24 <USBD_LL_Init+0x94>)
 8005af0:	f7fb f84e 	bl	8000b90 <HAL_PCD_Init>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005afa:	f7ff fcf9 	bl	80054f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	4808      	ldr	r0, [pc, #32]	; (8005b24 <USBD_LL_Init+0x94>)
 8005b02:	f7fc f9b2 	bl	8001e6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005b06:	2240      	movs	r2, #64	; 0x40
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4806      	ldr	r0, [pc, #24]	; (8005b24 <USBD_LL_Init+0x94>)
 8005b0c:	f7fc f966 	bl	8001ddc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005b10:	2280      	movs	r2, #128	; 0x80
 8005b12:	2101      	movs	r1, #1
 8005b14:	4803      	ldr	r0, [pc, #12]	; (8005b24 <USBD_LL_Init+0x94>)
 8005b16:	f7fc f961 	bl	8001ddc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	200014ac 	.word	0x200014ac

08005b28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fb f943 	bl	8000dca <HAL_PCD_Start>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f92e 	bl	8005dac <USBD_Get_USB_Status>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	4608      	mov	r0, r1
 8005b68:	4611      	mov	r1, r2
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	70fb      	strb	r3, [r7, #3]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70bb      	strb	r3, [r7, #2]
 8005b74:	4613      	mov	r3, r2
 8005b76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005b86:	78bb      	ldrb	r3, [r7, #2]
 8005b88:	883a      	ldrh	r2, [r7, #0]
 8005b8a:	78f9      	ldrb	r1, [r7, #3]
 8005b8c:	f7fb fd18 	bl	80015c0 <HAL_PCD_EP_Open>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f908 	bl	8005dac <USBD_Get_USB_Status>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fb fd61 	bl	8001690 <HAL_PCD_EP_Close>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f8e9 	bl	8005dac <USBD_Get_USB_Status>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb fe39 	bl	800187e <HAL_PCD_EP_SetStall>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f8ca 	bl	8005dac <USBD_Get_USB_Status>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005c40:	78fa      	ldrb	r2, [r7, #3]
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fb fe7e 	bl	8001946 <HAL_PCD_EP_ClrStall>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f8ab 	bl	8005dac <USBD_Get_USB_Status>
 8005c56:	4603      	mov	r3, r0
 8005c58:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005c76:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da0b      	bge.n	8005c98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	333e      	adds	r3, #62	; 0x3e
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	e00b      	b.n	8005cb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005cae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fb fc4b 	bl	8001576 <HAL_PCD_SetAddress>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f860 	bl	8005dac <USBD_Get_USB_Status>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b086      	sub	sp, #24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	461a      	mov	r2, r3
 8005d06:	460b      	mov	r3, r1
 8005d08:	72fb      	strb	r3, [r7, #11]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	7af9      	ldrb	r1, [r7, #11]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	f7fb fd62 	bl	80017ea <HAL_PCD_EP_Transmit>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f83d 	bl	8005dac <USBD_Get_USB_Status>
 8005d32:	4603      	mov	r3, r0
 8005d34:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005d36:	7dbb      	ldrb	r3, [r7, #22]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	72fb      	strb	r3, [r7, #11]
 8005d50:	4613      	mov	r3, r2
 8005d52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005d62:	893b      	ldrh	r3, [r7, #8]
 8005d64:	7af9      	ldrb	r1, [r7, #11]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	f7fb fcdc 	bl	8001724 <HAL_PCD_EP_Receive>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f81a 	bl	8005dac <USBD_Get_USB_Status>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8005d7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fb fd0c 	bl	80017ba <HAL_PCD_EP_GetRxCount>
 8005da2:	4603      	mov	r3, r0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d817      	bhi.n	8005df0 <USBD_Get_USB_Status+0x44>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <USBD_Get_USB_Status+0x1c>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005ddf 	.word	0x08005ddf
 8005dd0:	08005de5 	.word	0x08005de5
 8005dd4:	08005deb 	.word	0x08005deb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
    break;
 8005ddc:	e00b      	b.n	8005df6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005dde:	2302      	movs	r3, #2
 8005de0:	73fb      	strb	r3, [r7, #15]
    break;
 8005de2:	e008      	b.n	8005df6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
    break;
 8005de8:	e005      	b.n	8005df6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005dea:	2302      	movs	r3, #2
 8005dec:	73fb      	strb	r3, [r7, #15]
    break;
 8005dee:	e002      	b.n	8005df6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005df0:	2302      	movs	r3, #2
 8005df2:	73fb      	strb	r3, [r7, #15]
    break;
 8005df4:	bf00      	nop
  }
  return usb_status;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6039      	str	r1, [r7, #0]
 8005e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2212      	movs	r2, #18
 8005e14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000148 	.word	0x20000148

08005e28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	6039      	str	r1, [r7, #0]
 8005e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2204      	movs	r2, #4
 8005e38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005e3a:	4b03      	ldr	r3, [pc, #12]	; (8005e48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	2000015c 	.word	0x2000015c

08005e4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4907      	ldr	r1, [pc, #28]	; (8005e80 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e62:	4808      	ldr	r0, [pc, #32]	; (8005e84 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e64:	f7ff f986 	bl	8005174 <USBD_GetString>
 8005e68:	e004      	b.n	8005e74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	4904      	ldr	r1, [pc, #16]	; (8005e80 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e6e:	4805      	ldr	r0, [pc, #20]	; (8005e84 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e70:	f7ff f980 	bl	8005174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e74:	4b02      	ldr	r3, [pc, #8]	; (8005e80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200018b4 	.word	0x200018b4
 8005e84:	08006284 	.word	0x08006284

08005e88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	4904      	ldr	r1, [pc, #16]	; (8005ea8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e98:	4804      	ldr	r0, [pc, #16]	; (8005eac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e9a:	f7ff f96b 	bl	8005174 <USBD_GetString>
  return USBD_StrDesc;
 8005e9e:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200018b4 	.word	0x200018b4
 8005eac:	0800629c 	.word	0x0800629c

08005eb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	6039      	str	r1, [r7, #0]
 8005eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	221a      	movs	r2, #26
 8005ec0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005ec2:	f000 f843 	bl	8005f4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005ec6:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000160 	.word	0x20000160

08005ed4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4907      	ldr	r1, [pc, #28]	; (8005f08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005eea:	4808      	ldr	r0, [pc, #32]	; (8005f0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005eec:	f7ff f942 	bl	8005174 <USBD_GetString>
 8005ef0:	e004      	b.n	8005efc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4904      	ldr	r1, [pc, #16]	; (8005f08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005ef6:	4805      	ldr	r0, [pc, #20]	; (8005f0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ef8:	f7ff f93c 	bl	8005174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200018b4 	.word	0x200018b4
 8005f0c:	080062b0 	.word	0x080062b0

08005f10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d105      	bne.n	8005f2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	4907      	ldr	r1, [pc, #28]	; (8005f44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f26:	4808      	ldr	r0, [pc, #32]	; (8005f48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f28:	f7ff f924 	bl	8005174 <USBD_GetString>
 8005f2c:	e004      	b.n	8005f38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	4904      	ldr	r1, [pc, #16]	; (8005f44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f32:	4805      	ldr	r0, [pc, #20]	; (8005f48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f34:	f7ff f91e 	bl	8005174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f38:	4b02      	ldr	r3, [pc, #8]	; (8005f44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200018b4 	.word	0x200018b4
 8005f48:	080062bc 	.word	0x080062bc

08005f4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005f52:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <Get_SerialNum+0x44>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f58:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <Get_SerialNum+0x48>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <Get_SerialNum+0x4c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4413      	add	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f72:	2208      	movs	r2, #8
 8005f74:	4909      	ldr	r1, [pc, #36]	; (8005f9c <Get_SerialNum+0x50>)
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f814 	bl	8005fa4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <Get_SerialNum+0x54>)
 8005f80:	68b8      	ldr	r0, [r7, #8]
 8005f82:	f000 f80f 	bl	8005fa4 <IntToUnicode>
  }
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	1fff7a10 	.word	0x1fff7a10
 8005f94:	1fff7a14 	.word	0x1fff7a14
 8005f98:	1fff7a18 	.word	0x1fff7a18
 8005f9c:	20000162 	.word	0x20000162
 8005fa0:	20000172 	.word	0x20000172

08005fa4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
 8005fba:	e027      	b.n	800600c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	0f1b      	lsrs	r3, r3, #28
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	d80b      	bhi.n	8005fdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	0f1b      	lsrs	r3, r3, #28
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	4619      	mov	r1, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	440b      	add	r3, r1
 8005fd4:	3230      	adds	r2, #48	; 0x30
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e00a      	b.n	8005ff2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	0f1b      	lsrs	r3, r3, #28
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	440b      	add	r3, r1
 8005fec:	3237      	adds	r2, #55	; 0x37
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	3301      	adds	r3, #1
 800600a:	75fb      	strb	r3, [r7, #23]
 800600c:	7dfa      	ldrb	r2, [r7, #23]
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	429a      	cmp	r2, r3
 8006012:	d3d3      	bcc.n	8005fbc <IntToUnicode+0x18>
  }
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006026:	e003      	b.n	8006030 <LoopCopyDataInit>

08006028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800602a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800602c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800602e:	3104      	adds	r1, #4

08006030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006030:	480b      	ldr	r0, [pc, #44]	; (8006060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006038:	d3f6      	bcc.n	8006028 <CopyDataInit>
  ldr  r2, =_sbss
 800603a:	4a0b      	ldr	r2, [pc, #44]	; (8006068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800603c:	e002      	b.n	8006044 <LoopFillZerobss>

0800603e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800603e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006040:	f842 3b04 	str.w	r3, [r2], #4

08006044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006048:	d3f9      	bcc.n	800603e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800604a:	f7ff fae5 	bl	8005618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800604e:	f000 f817 	bl	8006080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006052:	f7ff f96d 	bl	8005330 <main>
  bx  lr    
 8006056:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006058:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800605c:	080062ec 	.word	0x080062ec
  ldr  r0, =_sdata
 8006060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006064:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8006068:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800606c:	20001ab8 	.word	0x20001ab8

08006070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006070:	e7fe      	b.n	8006070 <ADC_IRQHandler>
	...

08006074 <__errno>:
 8006074:	4b01      	ldr	r3, [pc, #4]	; (800607c <__errno+0x8>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	2000017c 	.word	0x2000017c

08006080 <__libc_init_array>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	4e0d      	ldr	r6, [pc, #52]	; (80060b8 <__libc_init_array+0x38>)
 8006084:	4c0d      	ldr	r4, [pc, #52]	; (80060bc <__libc_init_array+0x3c>)
 8006086:	1ba4      	subs	r4, r4, r6
 8006088:	10a4      	asrs	r4, r4, #2
 800608a:	2500      	movs	r5, #0
 800608c:	42a5      	cmp	r5, r4
 800608e:	d109      	bne.n	80060a4 <__libc_init_array+0x24>
 8006090:	4e0b      	ldr	r6, [pc, #44]	; (80060c0 <__libc_init_array+0x40>)
 8006092:	4c0c      	ldr	r4, [pc, #48]	; (80060c4 <__libc_init_array+0x44>)
 8006094:	f000 f8ea 	bl	800626c <_init>
 8006098:	1ba4      	subs	r4, r4, r6
 800609a:	10a4      	asrs	r4, r4, #2
 800609c:	2500      	movs	r5, #0
 800609e:	42a5      	cmp	r5, r4
 80060a0:	d105      	bne.n	80060ae <__libc_init_array+0x2e>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060a8:	4798      	blx	r3
 80060aa:	3501      	adds	r5, #1
 80060ac:	e7ee      	b.n	800608c <__libc_init_array+0xc>
 80060ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060b2:	4798      	blx	r3
 80060b4:	3501      	adds	r5, #1
 80060b6:	e7f2      	b.n	800609e <__libc_init_array+0x1e>
 80060b8:	080062e4 	.word	0x080062e4
 80060bc:	080062e4 	.word	0x080062e4
 80060c0:	080062e4 	.word	0x080062e4
 80060c4:	080062e8 	.word	0x080062e8

080060c8 <malloc>:
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <malloc+0xc>)
 80060ca:	4601      	mov	r1, r0
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	f000 b861 	b.w	8006194 <_malloc_r>
 80060d2:	bf00      	nop
 80060d4:	2000017c 	.word	0x2000017c

080060d8 <free>:
 80060d8:	4b02      	ldr	r3, [pc, #8]	; (80060e4 <free+0xc>)
 80060da:	4601      	mov	r1, r0
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	f000 b80b 	b.w	80060f8 <_free_r>
 80060e2:	bf00      	nop
 80060e4:	2000017c 	.word	0x2000017c

080060e8 <memset>:
 80060e8:	4402      	add	r2, r0
 80060ea:	4603      	mov	r3, r0
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d100      	bne.n	80060f2 <memset+0xa>
 80060f0:	4770      	bx	lr
 80060f2:	f803 1b01 	strb.w	r1, [r3], #1
 80060f6:	e7f9      	b.n	80060ec <memset+0x4>

080060f8 <_free_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4605      	mov	r5, r0
 80060fc:	2900      	cmp	r1, #0
 80060fe:	d045      	beq.n	800618c <_free_r+0x94>
 8006100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006104:	1f0c      	subs	r4, r1, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	bfb8      	it	lt
 800610a:	18e4      	addlt	r4, r4, r3
 800610c:	f000 f8ac 	bl	8006268 <__malloc_lock>
 8006110:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <_free_r+0x98>)
 8006112:	6813      	ldr	r3, [r2, #0]
 8006114:	4610      	mov	r0, r2
 8006116:	b933      	cbnz	r3, 8006126 <_free_r+0x2e>
 8006118:	6063      	str	r3, [r4, #4]
 800611a:	6014      	str	r4, [r2, #0]
 800611c:	4628      	mov	r0, r5
 800611e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006122:	f000 b8a2 	b.w	800626a <__malloc_unlock>
 8006126:	42a3      	cmp	r3, r4
 8006128:	d90c      	bls.n	8006144 <_free_r+0x4c>
 800612a:	6821      	ldr	r1, [r4, #0]
 800612c:	1862      	adds	r2, r4, r1
 800612e:	4293      	cmp	r3, r2
 8006130:	bf04      	itt	eq
 8006132:	681a      	ldreq	r2, [r3, #0]
 8006134:	685b      	ldreq	r3, [r3, #4]
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	bf04      	itt	eq
 800613a:	1852      	addeq	r2, r2, r1
 800613c:	6022      	streq	r2, [r4, #0]
 800613e:	6004      	str	r4, [r0, #0]
 8006140:	e7ec      	b.n	800611c <_free_r+0x24>
 8006142:	4613      	mov	r3, r2
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	b10a      	cbz	r2, 800614c <_free_r+0x54>
 8006148:	42a2      	cmp	r2, r4
 800614a:	d9fa      	bls.n	8006142 <_free_r+0x4a>
 800614c:	6819      	ldr	r1, [r3, #0]
 800614e:	1858      	adds	r0, r3, r1
 8006150:	42a0      	cmp	r0, r4
 8006152:	d10b      	bne.n	800616c <_free_r+0x74>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	4401      	add	r1, r0
 8006158:	1858      	adds	r0, r3, r1
 800615a:	4282      	cmp	r2, r0
 800615c:	6019      	str	r1, [r3, #0]
 800615e:	d1dd      	bne.n	800611c <_free_r+0x24>
 8006160:	6810      	ldr	r0, [r2, #0]
 8006162:	6852      	ldr	r2, [r2, #4]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	4401      	add	r1, r0
 8006168:	6019      	str	r1, [r3, #0]
 800616a:	e7d7      	b.n	800611c <_free_r+0x24>
 800616c:	d902      	bls.n	8006174 <_free_r+0x7c>
 800616e:	230c      	movs	r3, #12
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	e7d3      	b.n	800611c <_free_r+0x24>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	1821      	adds	r1, r4, r0
 8006178:	428a      	cmp	r2, r1
 800617a:	bf04      	itt	eq
 800617c:	6811      	ldreq	r1, [r2, #0]
 800617e:	6852      	ldreq	r2, [r2, #4]
 8006180:	6062      	str	r2, [r4, #4]
 8006182:	bf04      	itt	eq
 8006184:	1809      	addeq	r1, r1, r0
 8006186:	6021      	streq	r1, [r4, #0]
 8006188:	605c      	str	r4, [r3, #4]
 800618a:	e7c7      	b.n	800611c <_free_r+0x24>
 800618c:	bd38      	pop	{r3, r4, r5, pc}
 800618e:	bf00      	nop
 8006190:	20000204 	.word	0x20000204

08006194 <_malloc_r>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	1ccd      	adds	r5, r1, #3
 8006198:	f025 0503 	bic.w	r5, r5, #3
 800619c:	3508      	adds	r5, #8
 800619e:	2d0c      	cmp	r5, #12
 80061a0:	bf38      	it	cc
 80061a2:	250c      	movcc	r5, #12
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	4606      	mov	r6, r0
 80061a8:	db01      	blt.n	80061ae <_malloc_r+0x1a>
 80061aa:	42a9      	cmp	r1, r5
 80061ac:	d903      	bls.n	80061b6 <_malloc_r+0x22>
 80061ae:	230c      	movs	r3, #12
 80061b0:	6033      	str	r3, [r6, #0]
 80061b2:	2000      	movs	r0, #0
 80061b4:	bd70      	pop	{r4, r5, r6, pc}
 80061b6:	f000 f857 	bl	8006268 <__malloc_lock>
 80061ba:	4a21      	ldr	r2, [pc, #132]	; (8006240 <_malloc_r+0xac>)
 80061bc:	6814      	ldr	r4, [r2, #0]
 80061be:	4621      	mov	r1, r4
 80061c0:	b991      	cbnz	r1, 80061e8 <_malloc_r+0x54>
 80061c2:	4c20      	ldr	r4, [pc, #128]	; (8006244 <_malloc_r+0xb0>)
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	b91b      	cbnz	r3, 80061d0 <_malloc_r+0x3c>
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f83d 	bl	8006248 <_sbrk_r>
 80061ce:	6020      	str	r0, [r4, #0]
 80061d0:	4629      	mov	r1, r5
 80061d2:	4630      	mov	r0, r6
 80061d4:	f000 f838 	bl	8006248 <_sbrk_r>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d124      	bne.n	8006226 <_malloc_r+0x92>
 80061dc:	230c      	movs	r3, #12
 80061de:	6033      	str	r3, [r6, #0]
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f842 	bl	800626a <__malloc_unlock>
 80061e6:	e7e4      	b.n	80061b2 <_malloc_r+0x1e>
 80061e8:	680b      	ldr	r3, [r1, #0]
 80061ea:	1b5b      	subs	r3, r3, r5
 80061ec:	d418      	bmi.n	8006220 <_malloc_r+0x8c>
 80061ee:	2b0b      	cmp	r3, #11
 80061f0:	d90f      	bls.n	8006212 <_malloc_r+0x7e>
 80061f2:	600b      	str	r3, [r1, #0]
 80061f4:	50cd      	str	r5, [r1, r3]
 80061f6:	18cc      	adds	r4, r1, r3
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 f836 	bl	800626a <__malloc_unlock>
 80061fe:	f104 000b 	add.w	r0, r4, #11
 8006202:	1d23      	adds	r3, r4, #4
 8006204:	f020 0007 	bic.w	r0, r0, #7
 8006208:	1ac3      	subs	r3, r0, r3
 800620a:	d0d3      	beq.n	80061b4 <_malloc_r+0x20>
 800620c:	425a      	negs	r2, r3
 800620e:	50e2      	str	r2, [r4, r3]
 8006210:	e7d0      	b.n	80061b4 <_malloc_r+0x20>
 8006212:	428c      	cmp	r4, r1
 8006214:	684b      	ldr	r3, [r1, #4]
 8006216:	bf16      	itet	ne
 8006218:	6063      	strne	r3, [r4, #4]
 800621a:	6013      	streq	r3, [r2, #0]
 800621c:	460c      	movne	r4, r1
 800621e:	e7eb      	b.n	80061f8 <_malloc_r+0x64>
 8006220:	460c      	mov	r4, r1
 8006222:	6849      	ldr	r1, [r1, #4]
 8006224:	e7cc      	b.n	80061c0 <_malloc_r+0x2c>
 8006226:	1cc4      	adds	r4, r0, #3
 8006228:	f024 0403 	bic.w	r4, r4, #3
 800622c:	42a0      	cmp	r0, r4
 800622e:	d005      	beq.n	800623c <_malloc_r+0xa8>
 8006230:	1a21      	subs	r1, r4, r0
 8006232:	4630      	mov	r0, r6
 8006234:	f000 f808 	bl	8006248 <_sbrk_r>
 8006238:	3001      	adds	r0, #1
 800623a:	d0cf      	beq.n	80061dc <_malloc_r+0x48>
 800623c:	6025      	str	r5, [r4, #0]
 800623e:	e7db      	b.n	80061f8 <_malloc_r+0x64>
 8006240:	20000204 	.word	0x20000204
 8006244:	20000208 	.word	0x20000208

08006248 <_sbrk_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4c06      	ldr	r4, [pc, #24]	; (8006264 <_sbrk_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4605      	mov	r5, r0
 8006250:	4608      	mov	r0, r1
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	f7ff f9b4 	bl	80055c0 <_sbrk>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_sbrk_r+0x1a>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	b103      	cbz	r3, 8006262 <_sbrk_r+0x1a>
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20001ab4 	.word	0x20001ab4

08006268 <__malloc_lock>:
 8006268:	4770      	bx	lr

0800626a <__malloc_unlock>:
 800626a:	4770      	bx	lr

0800626c <_init>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr

08006278 <_fini>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr
