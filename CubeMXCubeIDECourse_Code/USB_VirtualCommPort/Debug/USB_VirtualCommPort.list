
USB_VirtualCommPort.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000601c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080061b4  080061b4  000161b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800620c  0800620c  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006214  08006214  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006214  08006214  00016214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800621c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018d8  20000214  08006430  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001aec  08006430  00021aec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118d7  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a2a  00000000  00000000  00031b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  00034548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  00035040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018725  00000000  00000000  000359f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0d5  00000000  00000000  0004e115  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000866bc  00000000  00000000  0005a1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e08a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  000e0924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000214 	.word	0x20000214
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800619c 	.word	0x0800619c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000218 	.word	0x20000218
 80001d4:	0800619c 	.word	0x0800619c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_Init+0x40>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <HAL_Init+0x40>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_Init+0x40>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f94d 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f004 ff8e 	bl	800543c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f965 	bl	800081a <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f92d 	bl	80007c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	2000014c 	.word	0x2000014c
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000240 	.word	0x20000240

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000240 	.word	0x20000240

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff ffee 	bl	80005b4 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_Delay+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffde 	bl	80005b4 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8f7      	bhi.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000004 	.word	0x20000004

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 021f 	and.w	r2, r3, #31
 800068c:	4907      	ldr	r1, [pc, #28]	; (80006ac <__NVIC_EnableIRQ+0x38>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	095b      	lsrs	r3, r3, #5
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	490c      	ldr	r1, [pc, #48]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4908      	ldr	r1, [pc, #32]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	3b04      	subs	r3, #4
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000704:	b480      	push	{r7}
 8000706:	b089      	sub	sp, #36	; 0x24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	f1c3 0307 	rsb	r3, r3, #7
 800071e:	2b04      	cmp	r3, #4
 8000720:	bf28      	it	cs
 8000722:	2304      	movcs	r3, #4
 8000724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	2b06      	cmp	r3, #6
 800072c:	d902      	bls.n	8000734 <NVIC_EncodePriority+0x30>
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3b03      	subs	r3, #3
 8000732:	e000      	b.n	8000736 <NVIC_EncodePriority+0x32>
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	f04f 32ff 	mov.w	r2, #4294967295
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	43da      	mvns	r2, r3
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	401a      	ands	r2, r3
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074c:	f04f 31ff 	mov.w	r1, #4294967295
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43d9      	mvns	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	4313      	orrs	r3, r2
         );
}
 800075e:	4618      	mov	r0, r3
 8000760:	3724      	adds	r7, #36	; 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800077c:	d301      	bcc.n	8000782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077e:	2301      	movs	r3, #1
 8000780:	e00f      	b.n	80007a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <SysTick_Config+0x40>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078a:	210f      	movs	r1, #15
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	f7ff ff8e 	bl	80006b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SysTick_Config+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SysTick_Config+0x40>)
 800079c:	2207      	movs	r2, #7
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff29 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d8:	f7ff ff3e 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	6978      	ldr	r0, [r7, #20]
 80007e4:	f7ff ff8e 	bl	8000704 <NVIC_EncodePriority>
 80007e8:	4602      	mov	r2, r0
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff5d 	bl	80006b0 <__NVIC_SetPriority>
}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff31 	bl	8000674 <__NVIC_EnableIRQ>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ffa2 	bl	800076c <SysTick_Config>
 8000828:	4603      	mov	r3, r0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	e159      	b.n	8000b04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000850:	2201      	movs	r2, #1
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	429a      	cmp	r2, r3
 800086a:	f040 8148 	bne.w	8000afe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d00b      	beq.n	800088e <HAL_GPIO_Init+0x5a>
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d007      	beq.n	800088e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	2b11      	cmp	r3, #17
 8000884:	d003      	beq.n	800088e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b12      	cmp	r3, #18
 800088c:	d130      	bne.n	80008f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2203      	movs	r2, #3
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4013      	ands	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c4:	2201      	movs	r2, #1
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	f003 0201 	and.w	r2, r3, #1
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4313      	orrs	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d003      	beq.n	8000930 <HAL_GPIO_Init+0xfc>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b12      	cmp	r3, #18
 800092e:	d123      	bne.n	8000978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	08da      	lsrs	r2, r3, #3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3208      	adds	r2, #8
 8000938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	220f      	movs	r2, #15
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	691a      	ldr	r2, [r3, #16]
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	08da      	lsrs	r2, r3, #3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3208      	adds	r2, #8
 8000972:	69b9      	ldr	r1, [r7, #24]
 8000974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0203 	and.w	r2, r3, #3
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80a2 	beq.w	8000afe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b56      	ldr	r3, [pc, #344]	; (8000b18 <HAL_GPIO_Init+0x2e4>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a55      	ldr	r2, [pc, #340]	; (8000b18 <HAL_GPIO_Init+0x2e4>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b53      	ldr	r3, [pc, #332]	; (8000b18 <HAL_GPIO_Init+0x2e4>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d6:	4a51      	ldr	r2, [pc, #324]	; (8000b1c <HAL_GPIO_Init+0x2e8>)
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	3302      	adds	r3, #2
 80009de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4013      	ands	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a48      	ldr	r2, [pc, #288]	; (8000b20 <HAL_GPIO_Init+0x2ec>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x202>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x1fe>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <HAL_GPIO_Init+0x2f4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <HAL_GPIO_Init+0x2f8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x1f6>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a44      	ldr	r2, [pc, #272]	; (8000b30 <HAL_GPIO_Init+0x2fc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x1f2>
 8000a22:	2304      	movs	r3, #4
 8000a24:	e008      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a26:	2307      	movs	r3, #7
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e004      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a2e:	2302      	movs	r3, #2
 8000a30:	e002      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a36:	2300      	movs	r3, #0
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	f002 0203 	and.w	r2, r2, #3
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	4093      	lsls	r3, r2
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a48:	4934      	ldr	r1, [pc, #208]	; (8000b1c <HAL_GPIO_Init+0x2e8>)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7a:	4a2e      	ldr	r2, [pc, #184]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa4:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ace:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3301      	adds	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	2b0f      	cmp	r3, #15
 8000b08:	f67f aea2 	bls.w	8000850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3724      	adds	r7, #36	; 0x24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40013c00 	.word	0x40013c00

08000b38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	b08f      	sub	sp, #60	; 0x3c
 8000b3c:	af0a      	add	r7, sp, #40	; 0x28
 8000b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e10f      	b.n	8000d6a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f004 fdef 	bl	8005748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 feae 	bl	80028ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	687e      	ldr	r6, [r7, #4]
 8000b96:	466d      	mov	r5, sp
 8000b98:	f106 0410 	add.w	r4, r6, #16
 8000b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bac:	1d33      	adds	r3, r6, #4
 8000bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb0:	6838      	ldr	r0, [r7, #0]
 8000bb2:	f001 fd85 	bl	80026c0 <USB_CoreInit>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e0d0      	b.n	8000d6a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fe9c 	bl	800290c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e04a      	b.n	8000c70 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	333d      	adds	r3, #61	; 0x3d
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bee:	7bfa      	ldrb	r2, [r7, #15]
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	333c      	adds	r3, #60	; 0x3c
 8000bfe:	7bfa      	ldrb	r2, [r7, #15]
 8000c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	b298      	uxth	r0, r3
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	1a9b      	subs	r3, r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3342      	adds	r3, #66	; 0x42
 8000c16:	4602      	mov	r2, r0
 8000c18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	333f      	adds	r3, #63	; 0x3f
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	1a9b      	subs	r3, r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3344      	adds	r3, #68	; 0x44
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3348      	adds	r3, #72	; 0x48
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	1a9b      	subs	r3, r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	3350      	adds	r3, #80	; 0x50
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfa      	ldrb	r2, [r7, #15]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3af      	bcc.n	8000bda <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e044      	b.n	8000d0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	3301      	adds	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3b5      	bcc.n	8000c80 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	687e      	ldr	r6, [r7, #4]
 8000d1c:	466d      	mov	r5, sp
 8000d1e:	f106 0410 	add.w	r4, r6, #16
 8000d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d32:	1d33      	adds	r3, r6, #4
 8000d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d36:	6838      	ldr	r0, [r7, #0]
 8000d38:	f001 fe12 	bl	8002960 <USB_DevInit>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2202      	movs	r2, #2
 8000d46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00d      	b.n	8000d6a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fe07 	bl	8003976 <USB_DevDisconnect>

  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_PCD_Start+0x1c>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e020      	b.n	8000dd0 <HAL_PCD_Start+0x5e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d109      	bne.n	8000db2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d005      	beq.n	8000db2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fdc5 	bl	8003946 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fd81 	bl	80028c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b08d      	sub	sp, #52	; 0x34
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fe6c 	bl	8003acc <USB_GetMode>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f040 838e 	bne.w	8001518 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fdd0 	bl	80039a6 <USB_ReadInterrupts>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 8384 	beq.w	8001516 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fdc7 	bl	80039a6 <USB_ReadInterrupts>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d107      	bne.n	8000e32 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f002 0202 	and.w	r2, r2, #2
 8000e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fdb5 	bl	80039a6 <USB_ReadInterrupts>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e46:	d17b      	bne.n	8000f40 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fdbb 	bl	80039cc <USB_ReadDevAllOutEpInterrupt>
 8000e56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000e58:	e06f      	b.n	8000f3a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d064      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fde0 	bl	8003a34 <USB_ReadDevOutEPInterrupt>
 8000e74:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	015a      	lsls	r2, r3, #5
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	4413      	add	r3, r2
 8000e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2301      	movs	r3, #1
 8000e90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 fe0d 	bl	8001ab4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00c      	beq.n	8000ebe <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 ff0c 	bl	8001cc4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	015a      	lsls	r2, r3, #5
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2308      	movs	r3, #8
 8000ebc:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	015a      	lsls	r2, r3, #5
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	4413      	add	r3, r2
 8000ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f003 0320 	and.w	r3, r3, #32
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d015      	beq.n	8000f10 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2101      	movs	r1, #1
 8000efa:	f002 fe2b 	bl	8003b54 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	015a      	lsls	r2, r3, #5
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	4413      	add	r3, r2
 8000f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d009      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	015a      	lsls	r2, r3, #5
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f26:	461a      	mov	r2, r3
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	3301      	adds	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d18c      	bne.n	8000e5a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fd2e 	bl	80039a6 <USB_ReadInterrupts>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f54:	f040 80c4 	bne.w	80010e0 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fd4f 	bl	8003a00 <USB_ReadDevAllInEpInterrupt>
 8000f62:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000f68:	e0b6      	b.n	80010d8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80ab 	beq.w	80010cc <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fd75 	bl	8003a70 <USB_ReadDevInEPInterrupt>
 8000f86:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d05b      	beq.n	800104a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	2201      	movs	r2, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69f9      	ldr	r1, [r7, #28]
 8000fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	015a      	lsls	r2, r3, #5
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d11b      	bne.n	8001008 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	3348      	adds	r3, #72	; 0x48
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4403      	add	r3, r0
 8000ff0:	3344      	adds	r3, #68	; 0x44
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4419      	add	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4403      	add	r3, r0
 8001004:	3348      	adds	r3, #72	; 0x48
 8001006:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f004 fc1b 	bl	800584a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d116      	bne.n	800104a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	2b00      	cmp	r3, #0
 8001020:	d113      	bne.n	800104a <HAL_PCD_IRQHandler+0x272>
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3350      	adds	r3, #80	; 0x50
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d108      	bne.n	800104a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001042:	461a      	mov	r2, r3
 8001044:	2101      	movs	r1, #1
 8001046:	f002 fd85 	bl	8003b54 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	015a      	lsls	r2, r3, #5
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	4413      	add	r3, r2
 800105c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001060:	461a      	mov	r2, r3
 8001062:	2308      	movs	r3, #8
 8001064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	015a      	lsls	r2, r3, #5
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	4413      	add	r3, r2
 8001078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800107c:	461a      	mov	r2, r3
 800107e:	2310      	movs	r3, #16
 8001080:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	015a      	lsls	r2, r3, #5
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	4413      	add	r3, r2
 8001094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001098:	461a      	mov	r2, r3
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	015a      	lsls	r2, r3, #5
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b4:	461a      	mov	r2, r3
 80010b6:	2302      	movs	r3, #2
 80010b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80010c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fc67 	bl	800199a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f47f af45 	bne.w	8000f6a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fc5e 	bl	80039a6 <USB_ReadInterrupts>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010f4:	d122      	bne.n	800113c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fe88 	bl	8001e34 <HAL_PCDEx_LPM_Callback>
 8001124:	e002      	b.n	800112c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fbfc 	bl	8005924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800113a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fc30 	bl	80039a6 <USB_ReadInterrupts>
 8001146:	4603      	mov	r3, r0
 8001148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800114c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001150:	d112      	bne.n	8001178 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f004 fbb8 	bl	80058d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001176:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fc12 	bl	80039a6 <USB_ReadInterrupts>
 8001182:	4603      	mov	r3, r0
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	f040 80a7 	bne.w	80012de <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2110      	movs	r1, #16
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fd4a 	bl	8002c44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b4:	e036      	b.n	8001224 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	015a      	lsls	r2, r3, #5
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4413      	add	r3, r2
 80011be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011c2:	461a      	mov	r2, r3
 80011c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80011c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	015a      	lsls	r2, r3, #5
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	4413      	add	r3, r2
 80011d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011da:	0151      	lsls	r1, r2, #5
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	440a      	add	r2, r1
 80011e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80011e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	015a      	lsls	r2, r3, #5
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	4413      	add	r3, r2
 80011f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011f6:	461a      	mov	r2, r3
 80011f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80011fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	015a      	lsls	r2, r3, #5
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	4413      	add	r3, r2
 8001206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800120e:	0151      	lsls	r1, r2, #5
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	440a      	add	r2, r1
 8001214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800121c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	3301      	adds	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	429a      	cmp	r2, r3
 800122c:	d3c3      	bcc.n	80011b6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800123c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001240:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	2b00      	cmp	r3, #0
 8001248:	d016      	beq.n	8001278 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800125a:	f043 030b 	orr.w	r3, r3, #11
 800125e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001270:	f043 030b 	orr.w	r3, r3, #11
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	e015      	b.n	80012a4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800128e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800129e:	f043 030b 	orr.w	r3, r3, #11
 80012a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80012b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80012c8:	461a      	mov	r2, r3
 80012ca:	f002 fc43 	bl	8003b54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fb5f 	bl	80039a6 <USB_ReadInterrupts>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f2:	d124      	bne.n	800133e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fbf5 	bl	8003ae8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fcff 	bl	8002d06 <USB_GetDevSpeed>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681c      	ldr	r4, [r3, #0]
 8001314:	f001 f9c8 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 8001318:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4620      	mov	r0, r4
 8001324:	f001 fa2e 	bl	8002784 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f004 fab6 	bl	800589a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800133c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fb2f 	bl	80039a6 <USB_ReadInterrupts>
 8001348:	4603      	mov	r3, r0
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b10      	cmp	r3, #16
 8001350:	d161      	bne.n	8001416 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0210 	bic.w	r2, r2, #16
 8001360:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f003 020f 	and.w	r2, r3, #15
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	3304      	adds	r3, #4
 8001380:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	0c5b      	lsrs	r3, r3, #17
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	2b02      	cmp	r3, #2
 800138c:	d124      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d035      	beq.n	8001406 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	6a38      	ldr	r0, [r7, #32]
 80013ae:	f002 f9a7 	bl	8003700 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013be:	441a      	add	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	619a      	str	r2, [r3, #24]
 80013d6:	e016      	b.n	8001406 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	0c5b      	lsrs	r3, r3, #17
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	d110      	bne.n	8001406 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013ea:	2208      	movs	r2, #8
 80013ec:	4619      	mov	r1, r3
 80013ee:	6a38      	ldr	r0, [r7, #32]
 80013f0:	f002 f986 	bl	8003700 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001400:	441a      	add	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0210 	orr.w	r2, r2, #16
 8001414:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fac3 	bl	80039a6 <USB_ReadInterrupts>
 8001420:	4603      	mov	r3, r0
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b08      	cmp	r3, #8
 8001428:	d10a      	bne.n	8001440 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f004 fa27 	bl	800587e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f002 0208 	and.w	r2, r2, #8
 800143e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 faae 	bl	80039a6 <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001454:	d10f      	bne.n	8001476 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f004 fa7f 	bl	8005964 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa93 	bl	80039a6 <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800148a:	d10f      	bne.n	80014ac <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4619      	mov	r1, r3
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f004 fa52 	bl	8005940 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80014aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fa78 	bl	80039a6 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d10a      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f004 fa60 	bl	8005988 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80014d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fa62 	bl	80039a6 <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d115      	bne.n	8001518 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f004 fa50 	bl	80059a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	e000      	b.n	8001518 <HAL_PCD_IRQHandler+0x740>
      return;
 8001516:	bf00      	nop
    }
  }
}
 8001518:	3734      	adds	r7, #52	; 0x34
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}

0800151e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_PCD_SetAddress+0x1a>
 8001534:	2302      	movs	r3, #2
 8001536:	e013      	b.n	8001560 <HAL_PCD_SetAddress+0x42>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f9d2 	bl	80038fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	70fb      	strb	r3, [r7, #3]
 800157a:	460b      	mov	r3, r1
 800157c:	803b      	strh	r3, [r7, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da0f      	bge.n	80015ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3338      	adds	r3, #56	; 0x38
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	3304      	adds	r3, #4
 80015a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	705a      	strb	r2, [r3, #1]
 80015ac:	e00f      	b.n	80015ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	f003 020f 	and.w	r2, r3, #15
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	3304      	adds	r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015da:	883a      	ldrh	r2, [r7, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	78ba      	ldrb	r2, [r7, #2]
 80015e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015f8:	78bb      	ldrb	r3, [r7, #2]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d102      	bne.n	8001604 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_PCD_EP_Open+0xaa>
 800160e:	2302      	movs	r3, #2
 8001610:	e00e      	b.n	8001630 <HAL_PCD_EP_Open+0xc8>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fb95 	bl	8002d50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800162e:	7afb      	ldrb	r3, [r7, #11]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001648:	2b00      	cmp	r3, #0
 800164a:	da0f      	bge.n	800166c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	f003 020f 	and.w	r2, r3, #15
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	3338      	adds	r3, #56	; 0x38
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	705a      	strb	r2, [r3, #1]
 800166a:	e00f      	b.n	800168c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f003 020f 	and.w	r2, r3, #15
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	3304      	adds	r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	b2da      	uxtb	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_PCD_EP_Close+0x6e>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e00e      	b.n	80016c4 <HAL_PCD_EP_Close+0x8c>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68f9      	ldr	r1, [r7, #12]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 fbd3 	bl	8002e60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	460b      	mov	r3, r1
 80016da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	3304      	adds	r3, #4
 80016f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2200      	movs	r2, #0
 800170c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	b2da      	uxtb	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d102      	bne.n	8001728 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	6979      	ldr	r1, [r7, #20]
 8001740:	f001 fe56 	bl	80033f0 <USB_EP0StartXfer>
 8001744:	e008      	b.n	8001758 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	f001 fc08 	bl	8002f68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	f003 020f 	and.w	r2, r3, #15
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001784:	681b      	ldr	r3, [r3, #0]
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	460b      	mov	r3, r1
 80017a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	f003 020f 	and.w	r2, r3, #15
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	3338      	adds	r3, #56	; 0x38
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	3304      	adds	r3, #4
 80017b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2201      	movs	r2, #1
 80017d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ec:	7afb      	ldrb	r3, [r7, #11]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	6979      	ldr	r1, [r7, #20]
 8001804:	f001 fdf4 	bl	80033f0 <USB_EP0StartXfer>
 8001808:	e008      	b.n	800181c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	6979      	ldr	r1, [r7, #20]
 8001818:	f001 fba6 	bl	8002f68 <USB_EPStartXfer>
  }

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d901      	bls.n	8001844 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e050      	b.n	80018e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001848:	2b00      	cmp	r3, #0
 800184a:	da0f      	bge.n	800186c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	3338      	adds	r3, #56	; 0x38
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	3304      	adds	r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	705a      	strb	r2, [r3, #1]
 800186a:	e00d      	b.n	8001888 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	3304      	adds	r3, #4
 8001880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	b2da      	uxtb	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_PCD_EP_SetStall+0x82>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e01e      	b.n	80018e6 <HAL_PCD_EP_SetStall+0xc0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 ff4b 	bl	8003752 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	b2d9      	uxtb	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018d6:	461a      	mov	r2, r3
 80018d8:	f002 f93c 	bl	8003b54 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	f003 020f 	and.w	r2, r3, #15
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d901      	bls.n	800190c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e042      	b.n	8001992 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800190c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da0f      	bge.n	8001934 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 020f 	and.w	r2, r3, #15
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3338      	adds	r3, #56	; 0x38
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	3304      	adds	r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]
 8001932:	e00f      	b.n	8001954 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	f003 020f 	and.w	r2, r3, #15
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_PCD_EP_ClrStall+0x86>
 8001970:	2302      	movs	r3, #2
 8001972:	e00e      	b.n	8001992 <HAL_PCD_EP_ClrStall+0xa4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	4618      	mov	r0, r3
 8001984:	f001 ff53 	bl	800382e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b08a      	sub	sp, #40	; 0x28
 800199e:	af02      	add	r7, sp, #8
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	3338      	adds	r3, #56	; 0x38
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	3304      	adds	r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d901      	bls.n	80019d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06c      	b.n	8001aac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d902      	bls.n	80019ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3303      	adds	r3, #3
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80019f6:	e02b      	b.n	8001a50 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d902      	bls.n	8001a14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3303      	adds	r3, #3
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68d9      	ldr	r1, [r3, #12]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	4603      	mov	r3, r0
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f001 fe2f 	bl	8003696 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	441a      	add	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d809      	bhi.n	8001a7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d203      	bcs.n	8001a7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1be      	bne.n	80019f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d811      	bhi.n	8001aaa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	333c      	adds	r3, #60	; 0x3c
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	f040 80b3 	bne.w	8001c52 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d028      	beq.n	8001b48 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4a70      	ldr	r2, [pc, #448]	; (8001cbc <PCD_EP_OutXfrComplete_int+0x208>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d90e      	bls.n	8001b1c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b14:	461a      	mov	r2, r3
 8001b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f003 fe67 	bl	80057f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2101      	movs	r1, #1
 8001b30:	f002 f810 	bl	8003b54 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b40:	461a      	mov	r2, r3
 8001b42:	2308      	movs	r3, #8
 8001b44:	6093      	str	r3, [r2, #8]
 8001b46:	e0b3      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2320      	movs	r3, #32
 8001b62:	6093      	str	r3, [r2, #8]
 8001b64:	e0a4      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 809f 	bne.w	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <PCD_EP_OutXfrComplete_int+0x208>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d90f      	bls.n	8001b9a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00a      	beq.n	8001b9a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b96:	6093      	str	r3, [r2, #8]
 8001b98:	e08a      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bac:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	0159      	lsls	r1, r3, #5
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001bc0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4403      	add	r3, r0
 8001bd0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bd4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4403      	add	r3, r0
 8001bf8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4419      	add	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4403      	add	r3, r0
 8001c0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c12:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f003 fdfa 	bl	8005814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d144      	bne.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d138      	bne.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f001 ff82 	bl	8003b54 <USB_EP0_OutStart>
 8001c50:	e02e      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d124      	bne.n	8001ca4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c70:	461a      	mov	r2, r3
 8001c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c76:	6093      	str	r3, [r2, #8]
 8001c78:	e01a      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c90:	461a      	mov	r2, r3
 8001c92:	2320      	movs	r3, #32
 8001c94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f003 fdb9 	bl	8005814 <HAL_PCD_DataOutStageCallback>
 8001ca2:	e005      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f003 fdb2 	bl	8005814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	4f54300a 	.word	0x4f54300a
 8001cc0:	4f54310a 	.word	0x4f54310a

08001cc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	333c      	adds	r3, #60	; 0x3c
 8001cdc:	3304      	adds	r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d113      	bne.n	8001d22 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <PCD_EP_OutSetupPacket_int+0xb8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d922      	bls.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01d      	beq.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d1e:	6093      	str	r3, [r2, #8]
 8001d20:	e012      	b.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <PCD_EP_OutSetupPacket_int+0xbc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10e      	bne.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d40:	461a      	mov	r2, r3
 8001d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f003 fd51 	bl	80057f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <PCD_EP_OutSetupPacket_int+0xb8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d90c      	bls.n	8001d70 <PCD_EP_OutSetupPacket_int+0xac>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	f001 fef2 	bl	8003b54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	4f54300a 	.word	0x4f54300a
 8001d80:	4f54310a 	.word	0x4f54310a

08001d84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
 8001d90:	4613      	mov	r3, r2
 8001d92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	0419      	lsls	r1, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
 8001db0:	e028      	b.n	8001e04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e00d      	b.n	8001de2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3340      	adds	r3, #64	; 0x40
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	3301      	adds	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3ec      	bcc.n	8001dc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001dec:	883b      	ldrh	r3, [r7, #0]
 8001dee:	0418      	lsls	r0, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	4302      	orrs	r2, r0
 8001dfc:	3340      	adds	r3, #64	; 0x40
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e25b      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d075      	beq.n	8001f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6a:	4ba3      	ldr	r3, [pc, #652]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b9d      	ldr	r3, [pc, #628]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b99      	ldr	r3, [pc, #612]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e236      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x74>
 8001eb2:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a90      	ldr	r2, [pc, #576]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a8a      	ldr	r2, [pc, #552]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a87      	ldr	r2, [pc, #540]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ee4:	4b84      	ldr	r3, [pc, #528]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a83      	ldr	r2, [pc, #524]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b81      	ldr	r3, [pc, #516]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a80      	ldr	r2, [pc, #512]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fb56 	bl	80005b4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fb52 	bl	80005b4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1fb      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fb42 	bl	80005b4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fb3e 	bl	80005b4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1e7      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0xe8>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d063      	beq.n	800202a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1bb      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4952      	ldr	r1, [pc, #328]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_RCC_OscConfig+0x2b0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7fe faf7 	bl	80005b4 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7fe faf3 	bl	80005b4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e19c      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4940      	ldr	r1, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_OscConfig+0x2b0>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fad6 	bl	80005b4 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200c:	f7fe fad2 	bl	80005b4 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e17b      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d030      	beq.n	8002098 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_OscConfig+0x2b4>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe fab6 	bl	80005b4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7fe fab2 	bl	80005b4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e15b      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x200>
 800206a:	e015      	b.n	8002098 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x2b4>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7fe fa9f 	bl	80005b4 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207a:	f7fe fa9b 	bl	80005b4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e144      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a0 	beq.w	80021e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7fe fa61 	bl	80005b4 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e011      	b.n	800211a <HAL_RCC_OscConfig+0x2ce>
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
 8002104:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7fe fa54 	bl	80005b4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0fd      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x4d4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x2f0>
 800212e:	4b7d      	ldr	r3, [pc, #500]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a7c      	ldr	r2, [pc, #496]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x312>
 8002144:	4b77      	ldr	r3, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a76      	ldr	r2, [pc, #472]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	4b74      	ldr	r3, [pc, #464]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a73      	ldr	r2, [pc, #460]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x32a>
 800215e:	4b71      	ldr	r3, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a70      	ldr	r2, [pc, #448]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	4b6e      	ldr	r3, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a6d      	ldr	r2, [pc, #436]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe fa19 	bl	80005b4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fa15 	bl	80005b4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0bc      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x33a>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe fa03 	bl	80005b4 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe f9ff 	bl	80005b4 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0a6      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b56      	ldr	r3, [pc, #344]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b52      	ldr	r3, [pc, #328]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a51      	ldr	r2, [pc, #324]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8092 	beq.w	8002314 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f0:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d05c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d141      	bne.n	8002288 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_RCC_OscConfig+0x4dc>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe f9d3 	bl	80005b4 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe f9cf 	bl	80005b4 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e078      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002224:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	019b      	lsls	r3, r3, #6
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	4933      	ldr	r1, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x4dc>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe f9a8 	bl	80005b4 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe f9a4 	bl	80005b4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e04d      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x41c>
 8002286:	e045      	b.n	8002314 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x4dc>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe f991 	bl	80005b4 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe f98d 	bl	80005b4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e036      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x44a>
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e029      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d115      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ea:	4013      	ands	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10d      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40007000 	.word	0x40007000
 8002324:	40023800 	.word	0x40023800
 8002328:	42470060 	.word	0x42470060

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0cc      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d90c      	bls.n	8002368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d044      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d119      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e067      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4934      	ldr	r1, [pc, #208]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7fe f8ca 	bl	80005b4 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7fe f8c6 	bl	80005b4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e04f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d20c      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4601      	mov	r1, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	fa21 f303 	lsr.w	r3, r1, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f82a 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	080061fc 	.word	0x080061fc
 80024f0:	2000014c 	.word	0x2000014c
 80024f4:	20000000 	.word	0x20000000

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	2300      	movs	r3, #0
 8002508:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d007      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x32>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d008      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x38>
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 80b4 	bne.w	800268c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002526:	60bb      	str	r3, [r7, #8]
       break;
 8002528:	e0b3      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800252a:	4b5e      	ldr	r3, [pc, #376]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800252c:	60bb      	str	r3, [r7, #8]
      break;
 800252e:	e0b0      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002530:	4b5a      	ldr	r3, [pc, #360]	; (800269c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002538:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d04a      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002546:	4b55      	ldr	r3, [pc, #340]	; (800269c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	f04f 0400 	mov.w	r4, #0
 8002550:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	ea03 0501 	and.w	r5, r3, r1
 800255c:	ea04 0602 	and.w	r6, r4, r2
 8002560:	4629      	mov	r1, r5
 8002562:	4632      	mov	r2, r6
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	f04f 0400 	mov.w	r4, #0
 800256c:	0154      	lsls	r4, r2, #5
 800256e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002572:	014b      	lsls	r3, r1, #5
 8002574:	4619      	mov	r1, r3
 8002576:	4622      	mov	r2, r4
 8002578:	1b49      	subs	r1, r1, r5
 800257a:	eb62 0206 	sbc.w	r2, r2, r6
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	f04f 0400 	mov.w	r4, #0
 8002586:	0194      	lsls	r4, r2, #6
 8002588:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800258c:	018b      	lsls	r3, r1, #6
 800258e:	1a5b      	subs	r3, r3, r1
 8002590:	eb64 0402 	sbc.w	r4, r4, r2
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	00e2      	lsls	r2, r4, #3
 800259e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025a2:	00d9      	lsls	r1, r3, #3
 80025a4:	460b      	mov	r3, r1
 80025a6:	4614      	mov	r4, r2
 80025a8:	195b      	adds	r3, r3, r5
 80025aa:	eb44 0406 	adc.w	r4, r4, r6
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	0262      	lsls	r2, r4, #9
 80025b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025bc:	0259      	lsls	r1, r3, #9
 80025be:	460b      	mov	r3, r1
 80025c0:	4614      	mov	r4, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	4621      	mov	r1, r4
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f04f 0400 	mov.w	r4, #0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	f7fd fe0a 	bl	80001e8 <__aeabi_uldivmod>
 80025d4:	4603      	mov	r3, r0
 80025d6:	460c      	mov	r4, r1
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e049      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025dc:	4b2f      	ldr	r3, [pc, #188]	; (800269c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	f04f 0400 	mov.w	r4, #0
 80025e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	ea03 0501 	and.w	r5, r3, r1
 80025f2:	ea04 0602 	and.w	r6, r4, r2
 80025f6:	4629      	mov	r1, r5
 80025f8:	4632      	mov	r2, r6
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	f04f 0400 	mov.w	r4, #0
 8002602:	0154      	lsls	r4, r2, #5
 8002604:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002608:	014b      	lsls	r3, r1, #5
 800260a:	4619      	mov	r1, r3
 800260c:	4622      	mov	r2, r4
 800260e:	1b49      	subs	r1, r1, r5
 8002610:	eb62 0206 	sbc.w	r2, r2, r6
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	f04f 0400 	mov.w	r4, #0
 800261c:	0194      	lsls	r4, r2, #6
 800261e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002622:	018b      	lsls	r3, r1, #6
 8002624:	1a5b      	subs	r3, r3, r1
 8002626:	eb64 0402 	sbc.w	r4, r4, r2
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	00e2      	lsls	r2, r4, #3
 8002634:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002638:	00d9      	lsls	r1, r3, #3
 800263a:	460b      	mov	r3, r1
 800263c:	4614      	mov	r4, r2
 800263e:	195b      	adds	r3, r3, r5
 8002640:	eb44 0406 	adc.w	r4, r4, r6
 8002644:	f04f 0100 	mov.w	r1, #0
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	02a2      	lsls	r2, r4, #10
 800264e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002652:	0299      	lsls	r1, r3, #10
 8002654:	460b      	mov	r3, r1
 8002656:	4614      	mov	r4, r2
 8002658:	4618      	mov	r0, r3
 800265a:	4621      	mov	r1, r4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f04f 0400 	mov.w	r4, #0
 8002662:	461a      	mov	r2, r3
 8002664:	4623      	mov	r3, r4
 8002666:	f7fd fdbf 	bl	80001e8 <__aeabi_uldivmod>
 800266a:	4603      	mov	r3, r0
 800266c:	460c      	mov	r4, r1
 800266e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60bb      	str	r3, [r7, #8]
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800268e:	60bb      	str	r3, [r7, #8]
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	68bb      	ldr	r3, [r7, #8]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000014c 	.word	0x2000014c

080026c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80026c0:	b084      	sub	sp, #16
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	f107 001c 	add.w	r0, r7, #28
 80026ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d122      	bne.n	800271e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80026ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f001 fa7c 	bl	8003c10 <USB_CoreReset>
 8002718:	4603      	mov	r3, r0
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e01a      	b.n	8002754 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f001 fa70 	bl	8003c10 <USB_CoreReset>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
 8002746:	e005      	b.n	8002754 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	2b01      	cmp	r3, #1
 8002758:	d10b      	bne.n	8002772 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f043 0206 	orr.w	r2, r3, #6
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800277e:	b004      	add	sp, #16
 8002780:	4770      	bx	lr
	...

08002784 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d165      	bne.n	8002864 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4a41      	ldr	r2, [pc, #260]	; (80028a0 <USB_SetTurnaroundTime+0x11c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d906      	bls.n	80027ae <USB_SetTurnaroundTime+0x2a>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <USB_SetTurnaroundTime+0x120>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d802      	bhi.n	80027ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80027a8:	230f      	movs	r3, #15
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e062      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4a3c      	ldr	r2, [pc, #240]	; (80028a4 <USB_SetTurnaroundTime+0x120>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d906      	bls.n	80027c4 <USB_SetTurnaroundTime+0x40>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4a3b      	ldr	r2, [pc, #236]	; (80028a8 <USB_SetTurnaroundTime+0x124>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d802      	bhi.n	80027c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80027be:	230e      	movs	r3, #14
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e057      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4a38      	ldr	r2, [pc, #224]	; (80028a8 <USB_SetTurnaroundTime+0x124>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d906      	bls.n	80027da <USB_SetTurnaroundTime+0x56>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4a37      	ldr	r2, [pc, #220]	; (80028ac <USB_SetTurnaroundTime+0x128>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d802      	bhi.n	80027da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80027d4:	230d      	movs	r3, #13
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e04c      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4a33      	ldr	r2, [pc, #204]	; (80028ac <USB_SetTurnaroundTime+0x128>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d906      	bls.n	80027f0 <USB_SetTurnaroundTime+0x6c>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4a32      	ldr	r2, [pc, #200]	; (80028b0 <USB_SetTurnaroundTime+0x12c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80027ea:	230c      	movs	r3, #12
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e041      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4a2f      	ldr	r2, [pc, #188]	; (80028b0 <USB_SetTurnaroundTime+0x12c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d906      	bls.n	8002806 <USB_SetTurnaroundTime+0x82>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4a2e      	ldr	r2, [pc, #184]	; (80028b4 <USB_SetTurnaroundTime+0x130>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d802      	bhi.n	8002806 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002800:	230b      	movs	r3, #11
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e036      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <USB_SetTurnaroundTime+0x130>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d906      	bls.n	800281c <USB_SetTurnaroundTime+0x98>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4a29      	ldr	r2, [pc, #164]	; (80028b8 <USB_SetTurnaroundTime+0x134>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d802      	bhi.n	800281c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002816:	230a      	movs	r3, #10
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e02b      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <USB_SetTurnaroundTime+0x134>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d906      	bls.n	8002832 <USB_SetTurnaroundTime+0xae>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <USB_SetTurnaroundTime+0x138>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d802      	bhi.n	8002832 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800282c:	2309      	movs	r3, #9
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e020      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4a21      	ldr	r2, [pc, #132]	; (80028bc <USB_SetTurnaroundTime+0x138>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d906      	bls.n	8002848 <USB_SetTurnaroundTime+0xc4>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <USB_SetTurnaroundTime+0x13c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d802      	bhi.n	8002848 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002842:	2308      	movs	r3, #8
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e015      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <USB_SetTurnaroundTime+0x13c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d906      	bls.n	800285e <USB_SetTurnaroundTime+0xda>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <USB_SetTurnaroundTime+0x140>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d802      	bhi.n	800285e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002858:	2307      	movs	r3, #7
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e00a      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800285e:	2306      	movs	r3, #6
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e007      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800286a:	2309      	movs	r3, #9
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e001      	b.n	8002874 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002870:	2309      	movs	r3, #9
 8002872:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	00d8acbf 	.word	0x00d8acbf
 80028a4:	00e4e1bf 	.word	0x00e4e1bf
 80028a8:	00f423ff 	.word	0x00f423ff
 80028ac:	0106737f 	.word	0x0106737f
 80028b0:	011a499f 	.word	0x011a499f
 80028b4:	01312cff 	.word	0x01312cff
 80028b8:	014ca43f 	.word	0x014ca43f
 80028bc:	016e35ff 	.word	0x016e35ff
 80028c0:	01a6ab1f 	.word	0x01a6ab1f
 80028c4:	01e847ff 	.word	0x01e847ff

080028c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0201 	bic.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d106      	bne.n	8002938 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	e00b      	b.n	8002950 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	e001      	b.n	8002950 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e003      	b.n	8002958 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002950:	2032      	movs	r0, #50	; 0x32
 8002952:	f7fd fe3b 	bl	80005cc <HAL_Delay>

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002960:	b084      	sub	sp, #16
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800296e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	e009      	b.n	8002994 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3340      	adds	r3, #64	; 0x40
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	2200      	movs	r2, #0
 800298c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	3301      	adds	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b0e      	cmp	r3, #14
 8002998:	d9f2      	bls.n	8002980 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d112      	bne.n	80029c6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
 80029c4:	e00b      	b.n	80029de <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80029e4:	461a      	mov	r2, r3
 80029e6:	2300      	movs	r3, #0
 80029e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f0:	4619      	mov	r1, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f8:	461a      	mov	r2, r3
 80029fa:	680b      	ldr	r3, [r1, #0]
 80029fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10c      	bne.n	8002a1e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f961 	bl	8002cd4 <USB_SetDevSpeed>
 8002a12:	e008      	b.n	8002a26 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a14:	2101      	movs	r1, #1
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f95c 	bl	8002cd4 <USB_SetDevSpeed>
 8002a1c:	e003      	b.n	8002a26 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a1e:	2103      	movs	r1, #3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f957 	bl	8002cd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a26:	2110      	movs	r1, #16
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f90b 	bl	8002c44 <USB_FlushTxFifo>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f929 	bl	8002c90 <USB_FlushRxFifo>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a66:	461a      	mov	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	e043      	b.n	8002afa <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a88:	d118      	bne.n	8002abc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e013      	b.n	8002ace <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e008      	b.n	8002ace <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ada:	461a      	mov	r2, r3
 8002adc:	2300      	movs	r3, #0
 8002ade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aec:	461a      	mov	r2, r3
 8002aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002af2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	3301      	adds	r3, #1
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3b7      	bcc.n	8002a72 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e043      	b.n	8002b90 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b1e:	d118      	bne.n	8002b52 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b32:	461a      	mov	r2, r3
 8002b34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e013      	b.n	8002b64 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e008      	b.n	8002b64 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b70:	461a      	mov	r2, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b82:	461a      	mov	r2, r3
 8002b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3b7      	bcc.n	8002b08 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002baa:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d111      	bne.n	8002bd6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <USB_DevInit+0x2dc>)
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	f043 0303 	orr.w	r3, r3, #3
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002be2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <USB_DevInit+0x2e0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f043 0208 	orr.w	r2, r3, #8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c36:	b004      	add	sp, #16
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	00800100 	.word	0x00800100
 8002c40:	803c3800 	.word	0x803c3800

08002c44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3301      	adds	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <USB_FlushTxFifo+0x48>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e006      	b.n	8002c7e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d0f0      	beq.n	8002c5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	00030d40 	.word	0x00030d40

08002c90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <USB_FlushRxFifo+0x40>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e006      	b.n	8002cc2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d0f0      	beq.n	8002ca2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	00030d40 	.word	0x00030d40

08002cd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0306 	and.w	r3, r3, #6
 8002d1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
 8002d2a:	e00a      	b.n	8002d42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d002      	beq.n	8002d38 <USB_GetDevSpeed+0x32>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d102      	bne.n	8002d3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	75fb      	strb	r3, [r7, #23]
 8002d3c:	e001      	b.n	8002d42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002d3e:	230f      	movs	r3, #15
 8002d40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	785b      	ldrb	r3, [r3, #1]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d13a      	bne.n	8002de2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d155      	bne.n	8002e50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	78db      	ldrb	r3, [r3, #3]
 8002dbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002dc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	059b      	lsls	r3, r3, #22
 8002dc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	e036      	b.n	8002e50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11a      	bne.n	8002e50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	78db      	ldrb	r3, [r3, #3]
 8002e34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e36:	430b      	orrs	r3, r1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	0151      	lsls	r1, r2, #5
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	440a      	add	r2, r1
 8002e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d135      	bne.n	8002ee8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	68f9      	ldr	r1, [r7, #12]
 8002ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0159      	lsls	r1, r3, #5
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	440b      	add	r3, r1
 8002eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <USB_DeactivateEndpoint+0x100>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
 8002ee6:	e034      	b.n	8002f52 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	2101      	movs	r1, #1
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	43db      	mvns	r3, r3
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f08:	4013      	ands	r3, r2
 8002f0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	43db      	mvns	r3, r3
 8002f26:	68f9      	ldr	r1, [r7, #12]
 8002f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0159      	lsls	r1, r3, #5
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	440b      	add	r3, r1
 8002f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <USB_DeactivateEndpoint+0x104>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	ec337800 	.word	0xec337800
 8002f64:	eff37800 	.word	0xeff37800

08002f68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 815c 	bne.w	8003242 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d132      	bne.n	8002ff8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	0151      	lsls	r1, r2, #5
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	440a      	add	r2, r1
 8002fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002fb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002fb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	0151      	lsls	r1, r2, #5
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	0151      	lsls	r1, r2, #5
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	440a      	add	r2, r1
 8002fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ff0:	0cdb      	lsrs	r3, r3, #19
 8002ff2:	04db      	lsls	r3, r3, #19
 8002ff4:	6113      	str	r3, [r2, #16]
 8002ff6:	e074      	b.n	80030e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	0151      	lsls	r1, r2, #5
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	440a      	add	r2, r1
 800300e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003012:	0cdb      	lsrs	r3, r3, #19
 8003014:	04db      	lsls	r3, r3, #19
 8003016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	0151      	lsls	r1, r2, #5
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	440a      	add	r2, r1
 800302e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003032:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003036:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800303a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6959      	ldr	r1, [r3, #20]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	440b      	add	r3, r1
 8003054:	1e59      	subs	r1, r3, #1
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	fbb1 f3f3 	udiv	r3, r1, r3
 800305e:	04d9      	lsls	r1, r3, #19
 8003060:	4b9d      	ldr	r3, [pc, #628]	; (80032d8 <USB_EPStartXfer+0x370>)
 8003062:	400b      	ands	r3, r1
 8003064:	69b9      	ldr	r1, [r7, #24]
 8003066:	0148      	lsls	r0, r1, #5
 8003068:	69f9      	ldr	r1, [r7, #28]
 800306a:	4401      	add	r1, r0
 800306c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003070:	4313      	orrs	r3, r2
 8003072:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	0148      	lsls	r0, r1, #5
 800308e:	69f9      	ldr	r1, [r7, #28]
 8003090:	4401      	add	r1, r0
 8003092:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003096:	4313      	orrs	r3, r2
 8003098:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	78db      	ldrb	r3, [r3, #3]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d11f      	bne.n	80030e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	0151      	lsls	r1, r2, #5
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	440a      	add	r2, r1
 80030b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80030c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	0151      	lsls	r1, r2, #5
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	440a      	add	r2, r1
 80030d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d14b      	bne.n	8003180 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d128      	bne.n	800315e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d110      	bne.n	800313e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	0151      	lsls	r1, r2, #5
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	440a      	add	r2, r1
 8003132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e00f      	b.n	800315e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	440a      	add	r2, r1
 8003154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	0151      	lsls	r1, r2, #5
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	440a      	add	r2, r1
 8003174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e12f      	b.n	80033e0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	0151      	lsls	r1, r2, #5
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	440a      	add	r2, r1
 8003196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800319a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800319e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	78db      	ldrb	r3, [r3, #3]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d015      	beq.n	80031d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8117 	beq.w	80033e0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	69f9      	ldr	r1, [r7, #28]
 80031ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031ce:	4313      	orrs	r3, r2
 80031d0:	634b      	str	r3, [r1, #52]	; 0x34
 80031d2:	e105      	b.n	80033e0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d110      	bne.n	8003206 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	0151      	lsls	r1, r2, #5
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	440a      	add	r2, r1
 80031fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e00f      	b.n	8003226 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	0151      	lsls	r1, r2, #5
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	440a      	add	r2, r1
 800321c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	68d9      	ldr	r1, [r3, #12]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	b298      	uxth	r0, r3
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4603      	mov	r3, r0
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa2b 	bl	8003696 <USB_WritePacket>
 8003240:	e0ce      	b.n	80033e0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	0151      	lsls	r1, r2, #5
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	440a      	add	r2, r1
 8003258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800325c:	0cdb      	lsrs	r3, r3, #19
 800325e:	04db      	lsls	r3, r3, #19
 8003260:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	0151      	lsls	r1, r2, #5
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	440a      	add	r2, r1
 8003278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800327c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003280:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003284:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d126      	bne.n	80032dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a4:	69b9      	ldr	r1, [r7, #24]
 80032a6:	0148      	lsls	r0, r1, #5
 80032a8:	69f9      	ldr	r1, [r7, #28]
 80032aa:	4401      	add	r1, r0
 80032ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80032b0:	4313      	orrs	r3, r2
 80032b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	0151      	lsls	r1, r2, #5
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	440a      	add	r2, r1
 80032ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032d2:	6113      	str	r3, [r2, #16]
 80032d4:	e036      	b.n	8003344 <USB_EPStartXfer+0x3dc>
 80032d6:	bf00      	nop
 80032d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	1e5a      	subs	r2, r3, #1
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	8afb      	ldrh	r3, [r7, #22]
 8003302:	04d9      	lsls	r1, r3, #19
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <USB_EPStartXfer+0x484>)
 8003306:	400b      	ands	r3, r1
 8003308:	69b9      	ldr	r1, [r7, #24]
 800330a:	0148      	lsls	r0, r1, #5
 800330c:	69f9      	ldr	r1, [r7, #28]
 800330e:	4401      	add	r1, r0
 8003310:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003314:	4313      	orrs	r3, r2
 8003316:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	8af9      	ldrh	r1, [r7, #22]
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	0148      	lsls	r0, r1, #5
 8003338:	69f9      	ldr	r1, [r7, #28]
 800333a:	4401      	add	r1, r0
 800333c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003340:	4313      	orrs	r3, r2
 8003342:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10d      	bne.n	8003366 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	460a      	mov	r2, r1
 8003364:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	78db      	ldrb	r3, [r3, #3]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d128      	bne.n	80033c0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d110      	bne.n	80033a0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	440a      	add	r2, r1
 8003394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00f      	b.n	80033c0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	0151      	lsls	r1, r2, #5
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	440a      	add	r2, r1
 80033b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	0151      	lsls	r1, r2, #5
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	440a      	add	r2, r1
 80033d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80033de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	1ff80000 	.word	0x1ff80000

080033f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	2b01      	cmp	r3, #1
 800340e:	f040 80cd 	bne.w	80035ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d132      	bne.n	8003480 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	440a      	add	r2, r1
 8003430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003434:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003438:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800343c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	0151      	lsls	r1, r2, #5
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	440a      	add	r2, r1
 8003454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800345c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	440a      	add	r2, r1
 8003474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003478:	0cdb      	lsrs	r3, r3, #19
 800347a:	04db      	lsls	r3, r3, #19
 800347c:	6113      	str	r3, [r2, #16]
 800347e:	e04e      	b.n	800351e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	440a      	add	r2, r1
 8003496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800349a:	0cdb      	lsrs	r3, r3, #19
 800349c:	04db      	lsls	r3, r3, #19
 800349e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d903      	bls.n	80034d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	0151      	lsls	r1, r2, #5
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	440a      	add	r2, r1
 80034ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350e:	6939      	ldr	r1, [r7, #16]
 8003510:	0148      	lsls	r0, r1, #5
 8003512:	6979      	ldr	r1, [r7, #20]
 8003514:	4401      	add	r1, r0
 8003516:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800351a:	4313      	orrs	r3, r2
 800351c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d11e      	bne.n	8003562 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	440a      	add	r2, r1
 8003556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	e092      	b.n	8003688 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	0151      	lsls	r1, r2, #5
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	440a      	add	r2, r1
 8003578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003580:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d07e      	beq.n	8003688 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	6979      	ldr	r1, [r7, #20]
 80035a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a6:	4313      	orrs	r3, r2
 80035a8:	634b      	str	r3, [r1, #52]	; 0x34
 80035aa:	e06d      	b.n	8003688 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	0151      	lsls	r1, r2, #5
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	440a      	add	r2, r1
 80035c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035c6:	0cdb      	lsrs	r3, r3, #19
 80035c8:	04db      	lsls	r3, r3, #19
 80035ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800361e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003636:	6939      	ldr	r1, [r7, #16]
 8003638:	0148      	lsls	r0, r1, #5
 800363a:	6979      	ldr	r1, [r7, #20]
 800363c:	4401      	add	r1, r0
 800363e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003642:	4313      	orrs	r3, r2
 8003644:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d10d      	bne.n	8003668 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	460a      	mov	r2, r1
 8003666:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003696:	b480      	push	{r7}
 8003698:	b089      	sub	sp, #36	; 0x24
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	4611      	mov	r1, r2
 80036a2:	461a      	mov	r2, r3
 80036a4:	460b      	mov	r3, r1
 80036a6:	71fb      	strb	r3, [r7, #7]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80036b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11a      	bne.n	80036f2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80036bc:	88bb      	ldrh	r3, [r7, #4]
 80036be:	3303      	adds	r3, #3
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	e00f      	b.n	80036ea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	031a      	lsls	r2, r3, #12
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	461a      	mov	r2, r3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3304      	adds	r3, #4
 80036e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d3eb      	bcc.n	80036ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3724      	adds	r7, #36	; 0x24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	; 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	3303      	adds	r3, #3
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e00b      	b.n	800373c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3304      	adds	r3, #4
 8003734:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	3301      	adds	r3, #1
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	429a      	cmp	r2, r3
 8003742:	d3ef      	bcc.n	8003724 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003744:	69fb      	ldr	r3, [r7, #28]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d12c      	bne.n	80037c8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	db12      	blt.n	80037a6 <USB_EPSetStall+0x54>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00f      	beq.n	80037a6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	0151      	lsls	r1, r2, #5
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	440a      	add	r2, r1
 800379c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	0151      	lsls	r1, r2, #5
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	440a      	add	r2, r1
 80037bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e02b      	b.n	8003820 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db12      	blt.n	8003800 <USB_EPSetStall+0xae>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	0151      	lsls	r1, r2, #5
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	440a      	add	r2, r1
 80037f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037fe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800381e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d128      	bne.n	800389c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003864:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003868:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	78db      	ldrb	r3, [r3, #3]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d003      	beq.n	800387a <USB_EPClearStall+0x4c>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	78db      	ldrb	r3, [r3, #3]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d138      	bne.n	80038ec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	0151      	lsls	r1, r2, #5
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	440a      	add	r2, r1
 8003890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e027      	b.n	80038ec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	0151      	lsls	r1, r2, #5
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	440a      	add	r2, r1
 80038b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	78db      	ldrb	r3, [r3, #3]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d003      	beq.n	80038cc <USB_EPClearStall+0x9e>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d10f      	bne.n	80038ec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003918:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800391c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800392e:	68f9      	ldr	r1, [r7, #12]
 8003930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003960:	f023 0302 	bic.w	r3, r3, #2
 8003964:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003966:	2003      	movs	r0, #3
 8003968:	f7fc fe30 	bl	80005cc <HAL_Delay>

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003996:	2003      	movs	r0, #3
 8003998:	f7fc fe18 	bl	80005cc <HAL_Delay>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	0c1b      	lsrs	r3, r3, #16
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	b29b      	uxth	r3, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003a62:	68bb      	ldr	r3, [r7, #8]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	01db      	lsls	r3, r3, #7
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003abe:	68bb      	ldr	r3, [r7, #8]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b06:	f023 0307 	bic.w	r3, r3, #7
 8003b0a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0306 	and.w	r3, r3, #6
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d109      	bne.n	8003b30 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2a:	f043 0303 	orr.w	r3, r3, #3
 8003b2e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	333c      	adds	r3, #60	; 0x3c
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <USB_EP0_OutStart+0xb8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d90a      	bls.n	8003b8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b88:	d101      	bne.n	8003b8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e037      	b.n	8003bfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	2300      	movs	r3, #0
 8003b98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bbc:	f043 0318 	orr.w	r3, r3, #24
 8003bc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003bd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10f      	bne.n	8003bfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bf6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003bfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	4f54300a 	.word	0x4f54300a

08003c10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <USB_CoreReset+0x64>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e01b      	b.n	8003c66 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	daf2      	bge.n	8003c1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <USB_CoreReset+0x64>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e006      	b.n	8003c66 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d0f0      	beq.n	8003c46 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	00030d40 	.word	0x00030d40

08003c78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7c1b      	ldrb	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d115      	bne.n	8003cbc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c94:	2202      	movs	r2, #2
 8003c96:	2181      	movs	r1, #129	; 0x81
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f001 fef8 	bl	8005a8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca8:	2202      	movs	r2, #2
 8003caa:	2101      	movs	r1, #1
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f001 feee 	bl	8005a8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8003cba:	e012      	b.n	8003ce2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003cbc:	2340      	movs	r3, #64	; 0x40
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	2181      	movs	r1, #129	; 0x81
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f001 fee3 	bl	8005a8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003cce:	2340      	movs	r3, #64	; 0x40
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f001 feda 	bl	8005a8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	2182      	movs	r1, #130	; 0x82
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f001 fed0 	bl	8005a8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003cf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003cf8:	f002 f97e 	bl	8005ff8 <malloc>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	e026      	b.n	8003d64 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003d1c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7c1b      	ldrb	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f001 ff8f 	bl	8005c70 <USBD_LL_PrepareReceive>
 8003d52:	e007      	b.n	8003d64 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d5a:	2340      	movs	r3, #64	; 0x40
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f001 ff86 	bl	8005c70 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d7e:	2181      	movs	r1, #129	; 0x81
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f001 feaa 	bl	8005ada <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 fea3 	bl	8005ada <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d9c:	2182      	movs	r1, #130	; 0x82
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f001 fe9b 	bl	8005ada <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 f91f 	bl	8006008 <free>
    pdev->pClassData = NULL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003dec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d039      	beq.n	8003e7a <USBD_CDC_Setup+0x9e>
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d17c      	bne.n	8003f04 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	88db      	ldrh	r3, [r3, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d029      	beq.n	8003e66 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da11      	bge.n	8003e40 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8003e28:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	88d2      	ldrh	r2, [r2, #6]
 8003e2e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e30:	6939      	ldr	r1, [r7, #16]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	88db      	ldrh	r3, [r3, #6]
 8003e36:	461a      	mov	r2, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 f9c9 	bl	80051d0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8003e3e:	e068      	b.n	8003f12 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	785a      	ldrb	r2, [r3, #1]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	88db      	ldrh	r3, [r3, #6]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e56:	6939      	ldr	r1, [r7, #16]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	88db      	ldrh	r3, [r3, #6]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f001 f9e4 	bl	800522c <USBD_CtlPrepareRx>
    break;
 8003e64:	e055      	b.n	8003f12 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	7850      	ldrb	r0, [r2, #1]
 8003e72:	2200      	movs	r2, #0
 8003e74:	6839      	ldr	r1, [r7, #0]
 8003e76:	4798      	blx	r3
    break;
 8003e78:	e04b      	b.n	8003f12 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	2b0a      	cmp	r3, #10
 8003e80:	d017      	beq.n	8003eb2 <USBD_CDC_Setup+0xd6>
 8003e82:	2b0b      	cmp	r3, #11
 8003e84:	d029      	beq.n	8003eda <USBD_CDC_Setup+0xfe>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d133      	bne.n	8003ef2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d107      	bne.n	8003ea4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003e94:	f107 030c 	add.w	r3, r7, #12
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f001 f997 	bl	80051d0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003ea2:	e02e      	b.n	8003f02 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f001 f927 	bl	80050fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8003eac:	2302      	movs	r3, #2
 8003eae:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb0:	e027      	b.n	8003f02 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d107      	bne.n	8003ecc <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8003ebc:	f107 030f 	add.w	r3, r7, #15
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f001 f983 	bl	80051d0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003eca:	e01a      	b.n	8003f02 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f001 f913 	bl	80050fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed8:	e013      	b.n	8003f02 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d00d      	beq.n	8003f00 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8003ee4:	6839      	ldr	r1, [r7, #0]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f001 f907 	bl	80050fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8003eec:	2302      	movs	r3, #2
 8003eee:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ef0:	e006      	b.n	8003f00 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f001 f900 	bl	80050fa <USBD_CtlError>
      ret = USBD_FAIL;
 8003efa:	2302      	movs	r3, #2
 8003efc:	75fb      	strb	r3, [r7, #23]
      break;
 8003efe:	e000      	b.n	8003f02 <USBD_CDC_Setup+0x126>
      break;
 8003f00:	bf00      	nop
    }
    break;
 8003f02:	e006      	b.n	8003f12 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f001 f8f7 	bl	80050fa <USBD_CtlError>
    ret = USBD_FAIL;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	75fb      	strb	r3, [r7, #23]
    break;
 8003f10:	bf00      	nop
  }

  return ret;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003f2e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003f36:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d03a      	beq.n	8003fb8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	331c      	adds	r3, #28
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d029      	beq.n	8003fac <USBD_CDC_DataIn+0x90>
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	331c      	adds	r3, #28
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	78f9      	ldrb	r1, [r7, #3]
 8003f6c:	68b8      	ldr	r0, [r7, #8]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	1a5b      	subs	r3, r3, r1
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4403      	add	r3, r0
 8003f78:	3344      	adds	r3, #68	; 0x44
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f80:	fb03 f301 	mul.w	r3, r3, r1
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d110      	bne.n	8003fac <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	331c      	adds	r3, #28
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003f9e:	78f9      	ldrb	r1, [r7, #3]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 fe40 	bl	8005c2a <USBD_LL_Transmit>
 8003faa:	e003      	b.n	8003fb4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 fe6b 	bl	8005cb6 <USBD_LL_GetRxDataSize>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004006:	4611      	mov	r1, r2
 8004008:	4798      	blx	r3

    return USBD_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004026:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800402e:	2b00      	cmp	r3, #0
 8004030:	d015      	beq.n	800405e <USBD_CDC_EP0_RxReady+0x46>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004038:	2bff      	cmp	r3, #255	; 0xff
 800403a:	d010      	beq.n	800405e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800404a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004052:	b292      	uxth	r2, r2
 8004054:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	22ff      	movs	r2, #255	; 0xff
 800405a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2243      	movs	r2, #67	; 0x43
 8004074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000090 	.word	0x20000090

08004088 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2243      	movs	r2, #67	; 0x43
 8004094:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	2000004c 	.word	0x2000004c

080040a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2243      	movs	r2, #67	; 0x43
 80040b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80040b6:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	200000d4 	.word	0x200000d4

080040c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	220a      	movs	r2, #10
 80040d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80040d6:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	20000008 	.word	0x20000008

080040e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80040f2:	2302      	movs	r3, #2
 80040f4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004116:	b480      	push	{r7}
 8004118:	b087      	sub	sp, #28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	4613      	mov	r3, r2
 8004122:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800412a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004134:	88fa      	ldrh	r2, [r7, #6]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800415a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004180:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01c      	beq.n	80041c6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004192:	2b00      	cmp	r3, #0
 8004194:	d115      	bne.n	80041c2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2181      	movs	r1, #129	; 0x81
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f001 fd36 	bl	8005c2a <USBD_LL_Transmit>

      return USBD_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e002      	b.n	80041c8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80041de:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d017      	beq.n	800421a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7c1b      	ldrb	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041fc:	2101      	movs	r1, #1
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f001 fd36 	bl	8005c70 <USBD_LL_PrepareReceive>
 8004204:	e007      	b.n	8004216 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800420c:	2340      	movs	r3, #64	; 0x40
 800420e:	2101      	movs	r1, #1
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 fd2d 	bl	8005c70 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004238:	2302      	movs	r3, #2
 800423a:	e01a      	b.n	8004272 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	79fa      	ldrb	r2, [r7, #7]
 8004268:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f001 fba8 	bl	80059c0 <USBD_LL_Init>

  return USBD_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e001      	b.n	80042a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800429c:	2302      	movs	r3, #2
 800429e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f001 fbce 	bl	8005a58 <USBD_LL_Start>

  return USBD_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80042e8:	2302      	movs	r3, #2
 80042ea:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00c      	beq.n	8004310 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	4611      	mov	r1, r2
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	4611      	mov	r1, r2
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	4798      	blx	r3
  return USBD_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fe94 	bl	8005080 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2b01      	cmp	r3, #1
 800437a:	d00c      	beq.n	8004396 <USBD_LL_SetupStage+0x56>
 800437c:	2b01      	cmp	r3, #1
 800437e:	d302      	bcc.n	8004386 <USBD_LL_SetupStage+0x46>
 8004380:	2b02      	cmp	r3, #2
 8004382:	d010      	beq.n	80043a6 <USBD_LL_SetupStage+0x66>
 8004384:	e017      	b.n	80043b6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa04 	bl	800479c <USBD_StdDevReq>
    break;
 8004394:	e01a      	b.n	80043cc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa66 	bl	8004870 <USBD_StdItfReq>
    break;
 80043a4:	e012      	b.n	80043cc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 faa4 	bl	80048fc <USBD_StdEPReq>
    break;
 80043b4:	e00a      	b.n	80043cc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80043bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f001 fba7 	bl	8005b18 <USBD_LL_StallEP>
    break;
 80043ca:	bf00      	nop
  }

  return USBD_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	460b      	mov	r3, r1
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d14b      	bne.n	8004482 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80043f0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d134      	bne.n	8004466 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	429a      	cmp	r2, r3
 8004406:	d919      	bls.n	800443c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	1ad2      	subs	r2, r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800441e:	429a      	cmp	r2, r3
 8004420:	d203      	bcs.n	800442a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004426:	b29b      	uxth	r3, r3
 8004428:	e002      	b.n	8004430 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800442e:	b29b      	uxth	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 ff17 	bl	8005268 <USBD_CtlContinueRx>
 800443a:	e038      	b.n	80044ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800444e:	2b03      	cmp	r3, #3
 8004450:	d105      	bne.n	800445e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 ff14 	bl	800528c <USBD_CtlSendStatus>
 8004464:	e023      	b.n	80044ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800446c:	2b05      	cmp	r3, #5
 800446e:	d11e      	bne.n	80044ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004478:	2100      	movs	r1, #0
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f001 fb4c 	bl	8005b18 <USBD_LL_StallEP>
 8004480:	e015      	b.n	80044ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004494:	2b03      	cmp	r3, #3
 8004496:	d108      	bne.n	80044aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	7afa      	ldrb	r2, [r7, #11]
 80044a2:	4611      	mov	r1, r2
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	4798      	blx	r3
 80044a8:	e001      	b.n	80044ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80044aa:	2302      	movs	r3, #2
 80044ac:	e000      	b.n	80044b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	460b      	mov	r3, r1
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80044c6:	7afb      	ldrb	r3, [r7, #11]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d17f      	bne.n	80045cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3314      	adds	r3, #20
 80044d0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d15c      	bne.n	8004596 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d915      	bls.n	8004514 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	1ad2      	subs	r2, r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fe81 	bl	8005208 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004506:	2300      	movs	r3, #0
 8004508:	2200      	movs	r2, #0
 800450a:	2100      	movs	r1, #0
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f001 fbaf 	bl	8005c70 <USBD_LL_PrepareReceive>
 8004512:	e04e      	b.n	80045b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	6912      	ldr	r2, [r2, #16]
 800451c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004520:	fb02 f201 	mul.w	r2, r2, r1
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11c      	bne.n	8004564 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004532:	429a      	cmp	r2, r3
 8004534:	d316      	bcc.n	8004564 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004540:	429a      	cmp	r2, r3
 8004542:	d20f      	bcs.n	8004564 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004544:	2200      	movs	r2, #0
 8004546:	2100      	movs	r1, #0
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fe5d 	bl	8005208 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004556:	2300      	movs	r3, #0
 8004558:	2200      	movs	r2, #0
 800455a:	2100      	movs	r1, #0
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f001 fb87 	bl	8005c70 <USBD_LL_PrepareReceive>
 8004562:	e026      	b.n	80045b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004576:	2b03      	cmp	r3, #3
 8004578:	d105      	bne.n	8004586 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f001 fac5 	bl	8005b18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fe8f 	bl	80052b2 <USBD_CtlReceiveStatus>
 8004594:	e00d      	b.n	80045b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800459c:	2b04      	cmp	r3, #4
 800459e:	d004      	beq.n	80045aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f001 fab3 	bl	8005b18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d11d      	bne.n	80045f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fe82 	bl	80042c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80045ca:	e015      	b.n	80045f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d108      	bne.n	80045f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	7afa      	ldrb	r2, [r7, #11]
 80045ec:	4611      	mov	r1, r2
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	4798      	blx	r3
 80045f2:	e001      	b.n	80045f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80045f4:	2302      	movs	r3, #2
 80045f6:	e000      	b.n	80045fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800460a:	2340      	movs	r3, #64	; 0x40
 800460c:	2200      	movs	r2, #0
 800460e:	2100      	movs	r1, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 fa3c 	bl	8005a8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2240      	movs	r2, #64	; 0x40
 8004622:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	2200      	movs	r2, #0
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 fa2e 	bl	8005a8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2240      	movs	r2, #64	; 0x40
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6852      	ldr	r2, [r2, #4]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	4611      	mov	r1, r2
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
  }

  return USBD_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2204      	movs	r2, #4
 80046bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d10b      	bne.n	800471a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6852      	ldr	r2, [r2, #4]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	4611      	mov	r1, r2
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3

  return USBD_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d004      	beq.n	80047c0 <USBD_StdDevReq+0x24>
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d002      	beq.n	80047c0 <USBD_StdDevReq+0x24>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <USBD_StdDevReq+0x34>
 80047be:	e04c      	b.n	800485a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
    break;
 80047ce:	e049      	b.n	8004864 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b09      	cmp	r3, #9
 80047d6:	d83a      	bhi.n	800484e <USBD_StdDevReq+0xb2>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <USBD_StdDevReq+0x44>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004831 	.word	0x08004831
 80047e4:	08004845 	.word	0x08004845
 80047e8:	0800484f 	.word	0x0800484f
 80047ec:	0800483b 	.word	0x0800483b
 80047f0:	0800484f 	.word	0x0800484f
 80047f4:	08004813 	.word	0x08004813
 80047f8:	08004809 	.word	0x08004809
 80047fc:	0800484f 	.word	0x0800484f
 8004800:	08004827 	.word	0x08004827
 8004804:	0800481d 	.word	0x0800481d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f9d2 	bl	8004bb4 <USBD_GetDescriptor>
      break;
 8004810:	e022      	b.n	8004858 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fac7 	bl	8004da8 <USBD_SetAddress>
      break;
 800481a:	e01d      	b.n	8004858 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800481c:	6839      	ldr	r1, [r7, #0]
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fb04 	bl	8004e2c <USBD_SetConfig>
      break;
 8004824:	e018      	b.n	8004858 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fb8d 	bl	8004f48 <USBD_GetConfig>
      break;
 800482e:	e013      	b.n	8004858 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fbbc 	bl	8004fb0 <USBD_GetStatus>
      break;
 8004838:	e00e      	b.n	8004858 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fbea 	bl	8005016 <USBD_SetFeature>
      break;
 8004842:	e009      	b.n	8004858 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fbf9 	bl	800503e <USBD_ClrFeature>
      break;
 800484c:	e004      	b.n	8004858 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fc52 	bl	80050fa <USBD_CtlError>
      break;
 8004856:	bf00      	nop
    }
    break;
 8004858:	e004      	b.n	8004864 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fc4c 	bl	80050fa <USBD_CtlError>
    break;
 8004862:	bf00      	nop
  }

  return ret;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop

08004870 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004886:	2b20      	cmp	r3, #32
 8004888:	d003      	beq.n	8004892 <USBD_StdItfReq+0x22>
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d001      	beq.n	8004892 <USBD_StdItfReq+0x22>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d12a      	bne.n	80048e8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004898:	3b01      	subs	r3, #1
 800489a:	2b02      	cmp	r3, #2
 800489c:	d81d      	bhi.n	80048da <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	889b      	ldrh	r3, [r3, #4]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d813      	bhi.n	80048d0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	4798      	blx	r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	88db      	ldrh	r3, [r3, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d110      	bne.n	80048e4 <USBD_StdItfReq+0x74>
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fcdf 	bl	800528c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80048ce:	e009      	b.n	80048e4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fc11 	bl	80050fa <USBD_CtlError>
      break;
 80048d8:	e004      	b.n	80048e4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fc0c 	bl	80050fa <USBD_CtlError>
      break;
 80048e2:	e000      	b.n	80048e6 <USBD_StdItfReq+0x76>
      break;
 80048e4:	bf00      	nop
    }
    break;
 80048e6:	e004      	b.n	80048f2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fc05 	bl	80050fa <USBD_CtlError>
    break;
 80048f0:	bf00      	nop
  }

  return USBD_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	889b      	ldrh	r3, [r3, #4]
 800490e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004918:	2b20      	cmp	r3, #32
 800491a:	d004      	beq.n	8004926 <USBD_StdEPReq+0x2a>
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d002      	beq.n	8004926 <USBD_StdEPReq+0x2a>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <USBD_StdEPReq+0x3a>
 8004924:	e13b      	b.n	8004b9e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
    break;
 8004934:	e138      	b.n	8004ba8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800493e:	2b20      	cmp	r3, #32
 8004940:	d10a      	bne.n	8004958 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	6839      	ldr	r1, [r7, #0]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]

      return ret;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	e128      	b.n	8004baa <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d03e      	beq.n	80049de <USBD_StdEPReq+0xe2>
 8004960:	2b03      	cmp	r3, #3
 8004962:	d002      	beq.n	800496a <USBD_StdEPReq+0x6e>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d070      	beq.n	8004a4a <USBD_StdEPReq+0x14e>
 8004968:	e113      	b.n	8004b92 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004970:	2b02      	cmp	r3, #2
 8004972:	d002      	beq.n	800497a <USBD_StdEPReq+0x7e>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d015      	beq.n	80049a4 <USBD_StdEPReq+0xa8>
 8004978:	e02b      	b.n	80049d2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <USBD_StdEPReq+0x9e>
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d009      	beq.n	800499a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004986:	7bbb      	ldrb	r3, [r7, #14]
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f001 f8c4 	bl	8005b18 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 f8c0 	bl	8005b18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004998:	e020      	b.n	80049dc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fbac 	bl	80050fa <USBD_CtlError>
        break;
 80049a2:	e01b      	b.n	80049dc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	885b      	ldrh	r3, [r3, #2]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10e      	bne.n	80049ca <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <USBD_StdEPReq+0xce>
 80049b2:	7bbb      	ldrb	r3, [r7, #14]
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d008      	beq.n	80049ca <USBD_StdEPReq+0xce>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	88db      	ldrh	r3, [r3, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80049c0:	7bbb      	ldrb	r3, [r7, #14]
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 f8a7 	bl	8005b18 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fc5e 	bl	800528c <USBD_CtlSendStatus>

        break;
 80049d0:	e004      	b.n	80049dc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fb90 	bl	80050fa <USBD_CtlError>
        break;
 80049da:	bf00      	nop
      }
      break;
 80049dc:	e0de      	b.n	8004b9c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d002      	beq.n	80049ee <USBD_StdEPReq+0xf2>
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d015      	beq.n	8004a18 <USBD_StdEPReq+0x11c>
 80049ec:	e026      	b.n	8004a3c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <USBD_StdEPReq+0x112>
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d009      	beq.n	8004a0e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 f88a 	bl	8005b18 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 f886 	bl	8005b18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a0c:	e01c      	b.n	8004a48 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fb72 	bl	80050fa <USBD_CtlError>
        break;
 8004a16:	e017      	b.n	8004a48 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	885b      	ldrh	r3, [r3, #2]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d112      	bne.n	8004a46 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f001 f891 	bl	8005b56 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fc29 	bl	800528c <USBD_CtlSendStatus>
        }
        break;
 8004a3a:	e004      	b.n	8004a46 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fb5b 	bl	80050fa <USBD_CtlError>
        break;
 8004a44:	e000      	b.n	8004a48 <USBD_StdEPReq+0x14c>
        break;
 8004a46:	bf00      	nop
      }
      break;
 8004a48:	e0a8      	b.n	8004b9c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d002      	beq.n	8004a5a <USBD_StdEPReq+0x15e>
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d031      	beq.n	8004abc <USBD_StdEPReq+0x1c0>
 8004a58:	e095      	b.n	8004b86 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a5a:	7bbb      	ldrb	r3, [r7, #14]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <USBD_StdEPReq+0x174>
 8004a60:	7bbb      	ldrb	r3, [r7, #14]
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d004      	beq.n	8004a70 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb46 	bl	80050fa <USBD_CtlError>
          break;
 8004a6e:	e08f      	b.n	8004b90 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da0b      	bge.n	8004a90 <USBD_StdEPReq+0x194>
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3310      	adds	r3, #16
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	e00a      	b.n	8004aa6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004a90:	7bbb      	ldrb	r3, [r7, #14]
 8004a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fb8b 	bl	80051d0 <USBD_CtlSendData>
          break;
 8004aba:	e069      	b.n	8004b90 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	da11      	bge.n	8004ae8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3318      	adds	r3, #24
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d117      	bne.n	8004b0e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fb0a 	bl	80050fa <USBD_CtlError>
            break;
 8004ae6:	e053      	b.n	8004b90 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004ae8:	7bbb      	ldrb	r3, [r7, #14]
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 faf7 	bl	80050fa <USBD_CtlError>
            break;
 8004b0c:	e040      	b.n	8004b90 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da0b      	bge.n	8004b2e <USBD_StdEPReq+0x232>
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3310      	adds	r3, #16
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	e00a      	b.n	8004b44 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004b46:	7bbb      	ldrb	r3, [r7, #14]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <USBD_StdEPReq+0x256>
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d103      	bne.n	8004b5a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e00e      	b.n	8004b78 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004b5a:	7bbb      	ldrb	r3, [r7, #14]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f001 f818 	bl	8005b94 <USBD_LL_IsStallEP>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e002      	b.n	8004b78 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fb26 	bl	80051d0 <USBD_CtlSendData>
          break;
 8004b84:	e004      	b.n	8004b90 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fab6 	bl	80050fa <USBD_CtlError>
        break;
 8004b8e:	bf00      	nop
      }
      break;
 8004b90:	e004      	b.n	8004b9c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fab0 	bl	80050fa <USBD_CtlError>
      break;
 8004b9a:	bf00      	nop
    }
    break;
 8004b9c:	e004      	b.n	8004ba8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 faaa 	bl	80050fa <USBD_CtlError>
    break;
 8004ba6:	bf00      	nop
  }

  return ret;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	885b      	ldrh	r3, [r3, #2]
 8004bc2:	0a1b      	lsrs	r3, r3, #8
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	2b06      	cmp	r3, #6
 8004bca:	f200 80c9 	bhi.w	8004d60 <USBD_GetDescriptor+0x1ac>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <USBD_GetDescriptor+0x20>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004bf1 	.word	0x08004bf1
 8004bd8:	08004c09 	.word	0x08004c09
 8004bdc:	08004c49 	.word	0x08004c49
 8004be0:	08004d61 	.word	0x08004d61
 8004be4:	08004d61 	.word	0x08004d61
 8004be8:	08004d0d 	.word	0x08004d0d
 8004bec:	08004d33 	.word	0x08004d33
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	7c12      	ldrb	r2, [r2, #16]
 8004bfc:	f107 010a 	add.w	r1, r7, #10
 8004c00:	4610      	mov	r0, r2
 8004c02:	4798      	blx	r3
 8004c04:	60f8      	str	r0, [r7, #12]
    break;
 8004c06:	e0b0      	b.n	8004d6a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	7c1b      	ldrb	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10d      	bne.n	8004c2c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f107 020a 	add.w	r2, r7, #10
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3
 8004c20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004c2a:	e09e      	b.n	8004d6a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f107 020a 	add.w	r2, r7, #10
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4798      	blx	r3
 8004c3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	2202      	movs	r2, #2
 8004c44:	701a      	strb	r2, [r3, #0]
    break;
 8004c46:	e090      	b.n	8004d6a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	885b      	ldrh	r3, [r3, #2]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d856      	bhi.n	8004d00 <USBD_GetDescriptor+0x14c>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <USBD_GetDescriptor+0xa4>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c71 	.word	0x08004c71
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004ca1 	.word	0x08004ca1
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004cd1 	.word	0x08004cd1
 8004c6c:	08004ce9 	.word	0x08004ce9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	7c12      	ldrb	r2, [r2, #16]
 8004c7c:	f107 010a 	add.w	r1, r7, #10
 8004c80:	4610      	mov	r0, r2
 8004c82:	4798      	blx	r3
 8004c84:	60f8      	str	r0, [r7, #12]
      break;
 8004c86:	e040      	b.n	8004d0a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	7c12      	ldrb	r2, [r2, #16]
 8004c94:	f107 010a 	add.w	r1, r7, #10
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4798      	blx	r3
 8004c9c:	60f8      	str	r0, [r7, #12]
      break;
 8004c9e:	e034      	b.n	8004d0a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	7c12      	ldrb	r2, [r2, #16]
 8004cac:	f107 010a 	add.w	r1, r7, #10
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
 8004cb4:	60f8      	str	r0, [r7, #12]
      break;
 8004cb6:	e028      	b.n	8004d0a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	7c12      	ldrb	r2, [r2, #16]
 8004cc4:	f107 010a 	add.w	r1, r7, #10
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
 8004ccc:	60f8      	str	r0, [r7, #12]
      break;
 8004cce:	e01c      	b.n	8004d0a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	7c12      	ldrb	r2, [r2, #16]
 8004cdc:	f107 010a 	add.w	r1, r7, #10
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4798      	blx	r3
 8004ce4:	60f8      	str	r0, [r7, #12]
      break;
 8004ce6:	e010      	b.n	8004d0a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	7c12      	ldrb	r2, [r2, #16]
 8004cf4:	f107 010a 	add.w	r1, r7, #10
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
 8004cfc:	60f8      	str	r0, [r7, #12]
      break;
 8004cfe:	e004      	b.n	8004d0a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9f9 	bl	80050fa <USBD_CtlError>
      return;
 8004d08:	e04b      	b.n	8004da2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8004d0a:	e02e      	b.n	8004d6a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c1b      	ldrb	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f107 020a 	add.w	r2, r7, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
 8004d24:	60f8      	str	r0, [r7, #12]
      break;
 8004d26:	e020      	b.n	8004d6a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9e5 	bl	80050fa <USBD_CtlError>
      return;
 8004d30:	e037      	b.n	8004da2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7c1b      	ldrb	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10d      	bne.n	8004d56 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f107 020a 	add.w	r2, r7, #10
 8004d46:	4610      	mov	r0, r2
 8004d48:	4798      	blx	r3
 8004d4a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2207      	movs	r2, #7
 8004d52:	701a      	strb	r2, [r3, #0]
      break;
 8004d54:	e009      	b.n	8004d6a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f9ce 	bl	80050fa <USBD_CtlError>
      return;
 8004d5e:	e020      	b.n	8004da2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f9c9 	bl	80050fa <USBD_CtlError>
    return;
 8004d68:	e01b      	b.n	8004da2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8004d6a:	897b      	ldrh	r3, [r7, #10]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d011      	beq.n	8004d94 <USBD_GetDescriptor+0x1e0>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	88db      	ldrh	r3, [r3, #6]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00d      	beq.n	8004d94 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	88da      	ldrh	r2, [r3, #6]
 8004d7c:	897b      	ldrh	r3, [r7, #10]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bf28      	it	cs
 8004d82:	4613      	movcs	r3, r2
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8004d88:	897b      	ldrh	r3, [r7, #10]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa1e 	bl	80051d0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	88db      	ldrh	r3, [r3, #6]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa75 	bl	800528c <USBD_CtlSendStatus>
  }
}
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	889b      	ldrh	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d130      	bne.n	8004e1c <USBD_SetAddress+0x74>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	88db      	ldrh	r3, [r3, #6]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12c      	bne.n	8004e1c <USBD_SetAddress+0x74>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	885b      	ldrh	r3, [r3, #2]
 8004dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc8:	d828      	bhi.n	8004e1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	885b      	ldrh	r3, [r3, #2]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d104      	bne.n	8004dea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f989 	bl	80050fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004de8:	e01c      	b.n	8004e24 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fef8 	bl	8005bec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fa45 	bl	800528c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e10:	e008      	b.n	8004e24 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e1a:	e003      	b.n	8004e24 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f96b 	bl	80050fa <USBD_CtlError>
  }
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	885b      	ldrh	r3, [r3, #2]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <USBD_SetConfig+0x118>)
 8004e3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e40:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <USBD_SetConfig+0x118>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d904      	bls.n	8004e52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f955 	bl	80050fa <USBD_CtlError>
 8004e50:	e075      	b.n	8004f3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d002      	beq.n	8004e62 <USBD_SetConfig+0x36>
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d023      	beq.n	8004ea8 <USBD_SetConfig+0x7c>
 8004e60:	e062      	b.n	8004f28 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8004e62:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <USBD_SetConfig+0x118>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01a      	beq.n	8004ea0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8004e6a:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <USBD_SetConfig+0x118>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2203      	movs	r2, #3
 8004e78:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e7c:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <USBD_SetConfig+0x118>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff fa2a 	bl	80042dc <USBD_SetClassConfig>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d104      	bne.n	8004e98 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f932 	bl	80050fa <USBD_CtlError>
          return;
 8004e96:	e052      	b.n	8004f3e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9f7 	bl	800528c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004e9e:	e04e      	b.n	8004f3e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f9f3 	bl	800528c <USBD_CtlSendStatus>
      break;
 8004ea6:	e04a      	b.n	8004f3e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8004ea8:	4b26      	ldr	r3, [pc, #152]	; (8004f44 <USBD_SetConfig+0x118>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d112      	bne.n	8004ed6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8004eb8:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <USBD_SetConfig+0x118>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <USBD_SetConfig+0x118>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fa26 	bl	800431a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9dc 	bl	800528c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004ed4:	e033      	b.n	8004f3e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <USBD_SetConfig+0x118>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d01d      	beq.n	8004f20 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff fa14 	bl	800431a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <USBD_SetConfig+0x118>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <USBD_SetConfig+0x118>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff f9ea 	bl	80042dc <USBD_SetClassConfig>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d104      	bne.n	8004f18 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f8f2 	bl	80050fa <USBD_CtlError>
          return;
 8004f16:	e012      	b.n	8004f3e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f9b7 	bl	800528c <USBD_CtlSendStatus>
      break;
 8004f1e:	e00e      	b.n	8004f3e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9b3 	bl	800528c <USBD_CtlSendStatus>
      break;
 8004f26:	e00a      	b.n	8004f3e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8e5 	bl	80050fa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <USBD_SetConfig+0x118>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff f9ef 	bl	800431a <USBD_ClrClassConfig>
      break;
 8004f3c:	bf00      	nop
    }
  }
}
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000230 	.word	0x20000230

08004f48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	88db      	ldrh	r3, [r3, #6]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d004      	beq.n	8004f64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f8cc 	bl	80050fa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004f62:	e021      	b.n	8004fa8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	db17      	blt.n	8004f9e <USBD_GetConfig+0x56>
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	dd02      	ble.n	8004f78 <USBD_GetConfig+0x30>
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d00b      	beq.n	8004f8e <USBD_GetConfig+0x46>
 8004f76:	e012      	b.n	8004f9e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3308      	adds	r3, #8
 8004f82:	2201      	movs	r2, #1
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f922 	bl	80051d0 <USBD_CtlSendData>
      break;
 8004f8c:	e00c      	b.n	8004fa8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	2201      	movs	r2, #1
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f91a 	bl	80051d0 <USBD_CtlSendData>
      break;
 8004f9c:	e004      	b.n	8004fa8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8aa 	bl	80050fa <USBD_CtlError>
      break;
 8004fa6:	bf00      	nop
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d81e      	bhi.n	8005004 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	88db      	ldrh	r3, [r3, #6]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d004      	beq.n	8004fd8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f892 	bl	80050fa <USBD_CtlError>
      break;
 8004fd6:	e01a      	b.n	800500e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f043 0202 	orr.w	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f8e7 	bl	80051d0 <USBD_CtlSendData>
    break;
 8005002:	e004      	b.n	800500e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f877 	bl	80050fa <USBD_CtlError>
    break;
 800500c:	bf00      	nop
  }
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	885b      	ldrh	r3, [r3, #2]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d106      	bne.n	8005036 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f92b 	bl	800528c <USBD_CtlSendStatus>
  }

}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800504e:	3b01      	subs	r3, #1
 8005050:	2b02      	cmp	r3, #2
 8005052:	d80b      	bhi.n	800506c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	885b      	ldrh	r3, [r3, #2]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10c      	bne.n	8005076 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f911 	bl	800528c <USBD_CtlSendStatus>
    }
    break;
 800506a:	e004      	b.n	8005076 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f843 	bl	80050fa <USBD_CtlError>
    break;
 8005074:	e000      	b.n	8005078 <USBD_ClrFeature+0x3a>
    break;
 8005076:	bf00      	nop
  }
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	785a      	ldrb	r2, [r3, #1]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	3302      	adds	r3, #2
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	3303      	adds	r3, #3
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	3304      	adds	r3, #4
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	3305      	adds	r3, #5
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	3306      	adds	r3, #6
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	3307      	adds	r3, #7
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	80da      	strh	r2, [r3, #6]

}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fd06 	bl	8005b18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800510c:	2100      	movs	r1, #0
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fd02 	bl	8005b18 <USBD_LL_StallEP>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d032      	beq.n	8005198 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f834 	bl	80051a0 <USBD_GetLen>
 8005138:	4603      	mov	r3, r0
 800513a:	3301      	adds	r3, #1
 800513c:	b29b      	uxth	r3, r3
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005146:	7dfb      	ldrb	r3, [r7, #23]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	75fa      	strb	r2, [r7, #23]
 800514c:	461a      	mov	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4413      	add	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	75fa      	strb	r2, [r7, #23]
 800515e:	461a      	mov	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4413      	add	r3, r2
 8005164:	2203      	movs	r2, #3
 8005166:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005168:	e012      	b.n	8005190 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	60fa      	str	r2, [r7, #12]
 8005170:	7dfa      	ldrb	r2, [r7, #23]
 8005172:	1c51      	adds	r1, r2, #1
 8005174:	75f9      	strb	r1, [r7, #23]
 8005176:	4611      	mov	r1, r2
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	440a      	add	r2, r1
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	75fa      	strb	r2, [r7, #23]
 8005186:	461a      	mov	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4413      	add	r3, r2
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e8      	bne.n	800516a <USBD_GetString+0x4e>
    }
  }
}
 8005198:	bf00      	nop
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80051ac:	e005      	b.n	80051ba <USBD_GetLen+0x1a>
    {
        len++;
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	3301      	adds	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3301      	adds	r3, #1
 80051b8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f5      	bne.n	80051ae <USBD_GetLen+0xe>
    }

    return len;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	2100      	movs	r1, #0
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fd16 	bl	8005c2a <USBD_LL_Transmit>

  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	2100      	movs	r1, #0
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fd04 	bl	8005c2a <USBD_LL_Transmit>

  return USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2203      	movs	r2, #3
 800523e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	2100      	movs	r1, #0
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fd09 	bl	8005c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	2100      	movs	r1, #0
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fcf7 	bl	8005c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2204      	movs	r2, #4
 8005298:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800529c:	2300      	movs	r3, #0
 800529e:	2200      	movs	r2, #0
 80052a0:	2100      	movs	r1, #0
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fcc1 	bl	8005c2a <USBD_LL_Transmit>

  return USBD_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2205      	movs	r2, #5
 80052be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80052c2:	2300      	movs	r3, #0
 80052c4:	2200      	movs	r2, #0
 80052c6:	2100      	movs	r1, #0
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fcd1 	bl	8005c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <main>:
static void MX_GPIO_Init(void);

uint8_t message[50] = "Hello from CubeIDE \n";

int main(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0

  HAL_Init();
 80052dc:	f7fb f904 	bl	80004e8 <HAL_Init>


  SystemClock_Config();
 80052e0:	f000 f814 	bl	800530c <SystemClock_Config>


  MX_GPIO_Init();
 80052e4:	f000 f87a 	bl	80053dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80052e8:	f000 f94a 	bl	8005580 <MX_USB_DEVICE_Init>

  while (1)
  {
  CDC_Transmit_FS(message,strlen((char *)message));
 80052ec:	4806      	ldr	r0, [pc, #24]	; (8005308 <main+0x30>)
 80052ee:	f7fa ff73 	bl	80001d8 <strlen>
 80052f2:	4603      	mov	r3, r0
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <main+0x30>)
 80052fa:	f000 f9ff 	bl	80056fc <CDC_Transmit_FS>
  HAL_Delay(400);
 80052fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005302:	f7fb f963 	bl	80005cc <HAL_Delay>
  CDC_Transmit_FS(message,strlen((char *)message));
 8005306:	e7f1      	b.n	80052ec <main+0x14>
 8005308:	20000118 	.word	0x20000118

0800530c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b094      	sub	sp, #80	; 0x50
 8005310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005312:	f107 0320 	add.w	r3, r7, #32
 8005316:	2230      	movs	r2, #48	; 0x30
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fe7c 	bl	8006018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005330:	2300      	movs	r3, #0
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <SystemClock_Config+0xc8>)
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <SystemClock_Config+0xc8>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	6413      	str	r3, [r2, #64]	; 0x40
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <SystemClock_Config+0xc8>)
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800534c:	2300      	movs	r3, #0
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <SystemClock_Config+0xcc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <SystemClock_Config+0xcc>)
 8005356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <SystemClock_Config+0xcc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005368:	2301      	movs	r3, #1
 800536a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800536c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005372:	2302      	movs	r3, #2
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005376:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800537c:	2304      	movs	r3, #4
 800537e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005380:	2360      	movs	r3, #96	; 0x60
 8005382:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005384:	2302      	movs	r3, #2
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005388:	2304      	movs	r3, #4
 800538a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800538c:	f107 0320 	add.w	r3, r7, #32
 8005390:	4618      	mov	r0, r3
 8005392:	f7fc fd5b 	bl	8001e4c <HAL_RCC_OscConfig>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800539c:	f000 f846 	bl	800542c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053a0:	230f      	movs	r3, #15
 80053a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053a4:	2302      	movs	r3, #2
 80053a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80053ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80053b6:	f107 030c 	add.w	r3, r7, #12
 80053ba:	2103      	movs	r1, #3
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc ffb5 	bl	800232c <HAL_RCC_ClockConfig>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80053c8:	f000 f830 	bl	800542c <Error_Handler>
  }
}
 80053cc:	bf00      	nop
 80053ce:	3750      	adds	r7, #80	; 0x50
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40007000 	.word	0x40007000

080053dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <MX_GPIO_Init+0x4c>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <MX_GPIO_Init+0x4c>)
 80053ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f0:	6313      	str	r3, [r2, #48]	; 0x30
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <MX_GPIO_Init+0x4c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <MX_GPIO_Init+0x4c>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <MX_GPIO_Init+0x4c>)
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	6313      	str	r3, [r2, #48]	; 0x30
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <MX_GPIO_Init+0x4c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	683b      	ldr	r3, [r7, #0]

}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800

0800542c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <HAL_MspInit+0x4c>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <HAL_MspInit+0x4c>)
 800544c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <HAL_MspInit+0x4c>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_MspInit+0x4c>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a08      	ldr	r2, [pc, #32]	; (8005488 <HAL_MspInit+0x4c>)
 8005468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_MspInit+0x4c>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800547a:	2007      	movs	r0, #7
 800547c:	f7fb f998 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40023800 	.word	0x40023800

0800548c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005490:	bf00      	nop
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800549e:	e7fe      	b.n	800549e <HardFault_Handler+0x4>

080054a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054a4:	e7fe      	b.n	80054a4 <MemManage_Handler+0x4>

080054a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054aa:	e7fe      	b.n	80054aa <BusFault_Handler+0x4>

080054ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054b0:	e7fe      	b.n	80054b0 <UsageFault_Handler+0x4>

080054b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054ce:	b480      	push	{r7}
 80054d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054e0:	f7fb f854 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <OTG_FS_IRQHandler+0x10>)
 80054ee:	f7fb fc73 	bl	8000dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200014e0 	.word	0x200014e0

080054fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005504:	4b11      	ldr	r3, [pc, #68]	; (800554c <_sbrk+0x50>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <_sbrk+0x16>
		heap_end = &end;
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <_sbrk+0x50>)
 800550e:	4a10      	ldr	r2, [pc, #64]	; (8005550 <_sbrk+0x54>)
 8005510:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005512:	4b0e      	ldr	r3, [pc, #56]	; (800554c <_sbrk+0x50>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <_sbrk+0x50>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4413      	add	r3, r2
 8005520:	466a      	mov	r2, sp
 8005522:	4293      	cmp	r3, r2
 8005524:	d907      	bls.n	8005536 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005526:	f000 fd3d 	bl	8005fa4 <__errno>
 800552a:	4602      	mov	r2, r0
 800552c:	230c      	movs	r3, #12
 800552e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e006      	b.n	8005544 <_sbrk+0x48>
	}

	heap_end += incr;
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <_sbrk+0x50>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	4a03      	ldr	r2, [pc, #12]	; (800554c <_sbrk+0x50>)
 8005540:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20000234 	.word	0x20000234
 8005550:	20001af0 	.word	0x20001af0

08005554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <SystemInit+0x28>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	4a07      	ldr	r2, [pc, #28]	; (800557c <SystemInit+0x28>)
 8005560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <SystemInit+0x28>)
 800556a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800556e:	609a      	str	r2, [r3, #8]
#endif
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005584:	2200      	movs	r2, #0
 8005586:	4912      	ldr	r1, [pc, #72]	; (80055d0 <MX_USB_DEVICE_Init+0x50>)
 8005588:	4812      	ldr	r0, [pc, #72]	; (80055d4 <MX_USB_DEVICE_Init+0x54>)
 800558a:	f7fe fe4b 	bl	8004224 <USBD_Init>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005594:	f7ff ff4a 	bl	800542c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005598:	490f      	ldr	r1, [pc, #60]	; (80055d8 <MX_USB_DEVICE_Init+0x58>)
 800559a:	480e      	ldr	r0, [pc, #56]	; (80055d4 <MX_USB_DEVICE_Init+0x54>)
 800559c:	f7fe fe6d 	bl	800427a <USBD_RegisterClass>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80055a6:	f7ff ff41 	bl	800542c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80055aa:	490c      	ldr	r1, [pc, #48]	; (80055dc <MX_USB_DEVICE_Init+0x5c>)
 80055ac:	4809      	ldr	r0, [pc, #36]	; (80055d4 <MX_USB_DEVICE_Init+0x54>)
 80055ae:	f7fe fd9b 	bl	80040e8 <USBD_CDC_RegisterInterface>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80055b8:	f7ff ff38 	bl	800542c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80055bc:	4805      	ldr	r0, [pc, #20]	; (80055d4 <MX_USB_DEVICE_Init+0x54>)
 80055be:	f7fe fe76 	bl	80042ae <USBD_Start>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80055c8:	f7ff ff30 	bl	800542c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80055cc:	bf00      	nop
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000160 	.word	0x20000160
 80055d4:	20000244 	.word	0x20000244
 80055d8:	20000014 	.word	0x20000014
 80055dc:	20000150 	.word	0x20000150

080055e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80055e4:	2200      	movs	r2, #0
 80055e6:	4905      	ldr	r1, [pc, #20]	; (80055fc <CDC_Init_FS+0x1c>)
 80055e8:	4805      	ldr	r0, [pc, #20]	; (8005600 <CDC_Init_FS+0x20>)
 80055ea:	f7fe fd94 	bl	8004116 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80055ee:	4905      	ldr	r1, [pc, #20]	; (8005604 <CDC_Init_FS+0x24>)
 80055f0:	4803      	ldr	r0, [pc, #12]	; (8005600 <CDC_Init_FS+0x20>)
 80055f2:	f7fe fdaa 	bl	800414a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80055f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000ce0 	.word	0x20000ce0
 8005600:	20000244 	.word	0x20000244
 8005604:	200004e0 	.word	0x200004e0

08005608 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800560c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800560e:	4618      	mov	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	71fb      	strb	r3, [r7, #7]
 8005624:	4613      	mov	r3, r2
 8005626:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	2b23      	cmp	r3, #35	; 0x23
 800562c:	d84a      	bhi.n	80056c4 <CDC_Control_FS+0xac>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <CDC_Control_FS+0x1c>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	080056c5 	.word	0x080056c5
 8005638:	080056c5 	.word	0x080056c5
 800563c:	080056c5 	.word	0x080056c5
 8005640:	080056c5 	.word	0x080056c5
 8005644:	080056c5 	.word	0x080056c5
 8005648:	080056c5 	.word	0x080056c5
 800564c:	080056c5 	.word	0x080056c5
 8005650:	080056c5 	.word	0x080056c5
 8005654:	080056c5 	.word	0x080056c5
 8005658:	080056c5 	.word	0x080056c5
 800565c:	080056c5 	.word	0x080056c5
 8005660:	080056c5 	.word	0x080056c5
 8005664:	080056c5 	.word	0x080056c5
 8005668:	080056c5 	.word	0x080056c5
 800566c:	080056c5 	.word	0x080056c5
 8005670:	080056c5 	.word	0x080056c5
 8005674:	080056c5 	.word	0x080056c5
 8005678:	080056c5 	.word	0x080056c5
 800567c:	080056c5 	.word	0x080056c5
 8005680:	080056c5 	.word	0x080056c5
 8005684:	080056c5 	.word	0x080056c5
 8005688:	080056c5 	.word	0x080056c5
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056c5 	.word	0x080056c5
 8005694:	080056c5 	.word	0x080056c5
 8005698:	080056c5 	.word	0x080056c5
 800569c:	080056c5 	.word	0x080056c5
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056c5 	.word	0x080056c5
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	080056c5 	.word	0x080056c5
 80056b0:	080056c5 	.word	0x080056c5
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	080056c5 	.word	0x080056c5
 80056bc:	080056c5 	.word	0x080056c5
 80056c0:	080056c5 	.word	0x080056c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80056c4:	bf00      	nop
  }

  return (USBD_OK);
 80056c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4805      	ldr	r0, [pc, #20]	; (80056f8 <CDC_Receive_FS+0x24>)
 80056e2:	f7fe fd32 	bl	800414a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80056e6:	4804      	ldr	r0, [pc, #16]	; (80056f8 <CDC_Receive_FS+0x24>)
 80056e8:	f7fe fd72 	bl	80041d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80056ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000244 	.word	0x20000244

080056fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <CDC_Transmit_FS+0x48>)
 800570e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005712:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800571e:	2301      	movs	r3, #1
 8005720:	e00b      	b.n	800573a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005722:	887b      	ldrh	r3, [r7, #2]
 8005724:	461a      	mov	r2, r3
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4806      	ldr	r0, [pc, #24]	; (8005744 <CDC_Transmit_FS+0x48>)
 800572a:	f7fe fcf4 	bl	8004116 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800572e:	4805      	ldr	r0, [pc, #20]	; (8005744 <CDC_Transmit_FS+0x48>)
 8005730:	f7fe fd1f 	bl	8004172 <USBD_CDC_TransmitPacket>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000244 	.word	0x20000244

08005748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005768:	d13a      	bne.n	80057e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6313      	str	r3, [r2, #48]	; 0x30
 800577a:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005786:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800578a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2302      	movs	r3, #2
 800578e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005794:	2303      	movs	r3, #3
 8005796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005798:	230a      	movs	r3, #10
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	4619      	mov	r1, r3
 80057a2:	4812      	ldr	r0, [pc, #72]	; (80057ec <HAL_PCD_MspInit+0xa4>)
 80057a4:	f7fb f846 	bl	8000834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	4a0e      	ldr	r2, [pc, #56]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 80057ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b2:	6353      	str	r3, [r2, #52]	; 0x34
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 80057be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c2:	6453      	str	r3, [r2, #68]	; 0x44
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HAL_PCD_MspInit+0xa0>)
 80057c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2100      	movs	r1, #0
 80057d4:	2043      	movs	r0, #67	; 0x43
 80057d6:	f7fa fff6 	bl	80007c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80057da:	2043      	movs	r0, #67	; 0x43
 80057dc:	f7fb f80f 	bl	80007fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80057e0:	bf00      	nop
 80057e2:	3728      	adds	r7, #40	; 0x28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40020000 	.word	0x40020000

080057f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fe fd9a 	bl	8004340 <USBD_LL_SetupStage>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005826:	78fa      	ldrb	r2, [r7, #3]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	4619      	mov	r1, r3
 800583e:	f7fe fdca 	bl	80043d6 <USBD_LL_DataOutStage>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	3348      	adds	r3, #72	; 0x48
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	4619      	mov	r1, r3
 8005872:	f7fe fe21 	bl	80044b8 <USBD_LL_DataInStage>
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe ff2f 	bl	80046f0 <USBD_LL_SOF>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d001      	beq.n	80058b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80058ae:	f7ff fdbd 	bl	800542c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe fee1 	bl	8004684 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe fe9a 	bl	8004602 <USBD_LL_Reset>
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fedc 	bl	80046a4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800590c:	4b04      	ldr	r3, [pc, #16]	; (8005920 <HAL_PCD_SuspendCallback+0x48>)
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	4a03      	ldr	r2, [pc, #12]	; (8005920 <HAL_PCD_SuspendCallback+0x48>)
 8005912:	f043 0306 	orr.w	r3, r3, #6
 8005916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fecb 	bl	80046ce <USBD_LL_Resume>
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fef1 	bl	800473e <USBD_LL_IsoOUTIncomplete>
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe fed2 	bl	8004724 <USBD_LL_IsoINIncomplete>
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fede 	bl	8004758 <USBD_LL_DevConnected>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fedb 	bl	800476e <USBD_LL_DevDisconnected>
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d13c      	bne.n	8005a4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80059d0:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <USBD_LL_Init+0x94>)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <USBD_LL_Init+0x94>)
 80059dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80059e0:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <USBD_LL_Init+0x94>)
 80059e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80059e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80059e8:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <USBD_LL_Init+0x94>)
 80059ea:	2204      	movs	r2, #4
 80059ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80059ee:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <USBD_LL_Init+0x94>)
 80059f0:	2202      	movs	r2, #2
 80059f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <USBD_LL_Init+0x94>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80059fa:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <USBD_LL_Init+0x94>)
 80059fc:	2202      	movs	r2, #2
 80059fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005a00:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005a18:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005a1e:	480d      	ldr	r0, [pc, #52]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a20:	f7fb f88a 	bl	8000b38 <HAL_PCD_Init>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005a2a:	f7ff fcff 	bl	800542c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005a2e:	2180      	movs	r1, #128	; 0x80
 8005a30:	4808      	ldr	r0, [pc, #32]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a32:	f7fc f9ee 	bl	8001e12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005a36:	2240      	movs	r2, #64	; 0x40
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4806      	ldr	r0, [pc, #24]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a3c:	f7fc f9a2 	bl	8001d84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	2101      	movs	r1, #1
 8005a44:	4803      	ldr	r0, [pc, #12]	; (8005a54 <USBD_LL_Init+0x94>)
 8005a46:	f7fc f99d 	bl	8001d84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200014e0 	.word	0x200014e0

08005a58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fb f97f 	bl	8000d72 <HAL_PCD_Start>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f92e 	bl	8005cdc <USBD_Get_USB_Status>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	4608      	mov	r0, r1
 8005a98:	4611      	mov	r1, r2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	70fb      	strb	r3, [r7, #3]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70bb      	strb	r3, [r7, #2]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005ab6:	78bb      	ldrb	r3, [r7, #2]
 8005ab8:	883a      	ldrh	r2, [r7, #0]
 8005aba:	78f9      	ldrb	r1, [r7, #3]
 8005abc:	f7fb fd54 	bl	8001568 <HAL_PCD_EP_Open>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f908 	bl	8005cdc <USBD_Get_USB_Status>
 8005acc:	4603      	mov	r3, r0
 8005ace:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fb fd9d 	bl	8001638 <HAL_PCD_EP_Close>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 f8e9 	bl	8005cdc <USBD_Get_USB_Status>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fb fe75 	bl	8001826 <HAL_PCD_EP_SetStall>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f8ca 	bl	8005cdc <USBD_Get_USB_Status>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fb feba 	bl	80018ee <HAL_PCD_EP_ClrStall>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f8ab 	bl	8005cdc <USBD_Get_USB_Status>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005ba6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da0b      	bge.n	8005bc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bb6:	68f9      	ldr	r1, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	333e      	adds	r3, #62	; 0x3e
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	e00b      	b.n	8005be0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bce:	68f9      	ldr	r1, [r7, #12]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fb fc87 	bl	800151e <HAL_PCD_SetAddress>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f860 	bl	8005cdc <USBD_Get_USB_Status>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	461a      	mov	r2, r3
 8005c36:	460b      	mov	r3, r1
 8005c38:	72fb      	strb	r3, [r7, #11]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c4c:	893b      	ldrh	r3, [r7, #8]
 8005c4e:	7af9      	ldrb	r1, [r7, #11]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	f7fb fd9e 	bl	8001792 <HAL_PCD_EP_Transmit>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 f83d 	bl	8005cdc <USBD_Get_USB_Status>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c66:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	72fb      	strb	r3, [r7, #11]
 8005c80:	4613      	mov	r3, r2
 8005c82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c92:	893b      	ldrh	r3, [r7, #8]
 8005c94:	7af9      	ldrb	r1, [r7, #11]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	f7fb fd18 	bl	80016cc <HAL_PCD_EP_Receive>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 f81a 	bl	8005cdc <USBD_Get_USB_Status>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8005cac:	7dbb      	ldrb	r3, [r7, #22]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005cc8:	78fa      	ldrb	r2, [r7, #3]
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fb fd48 	bl	8001762 <HAL_PCD_EP_GetRxCount>
 8005cd2:	4603      	mov	r3, r0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d817      	bhi.n	8005d20 <USBD_Get_USB_Status+0x44>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <USBD_Get_USB_Status+0x1c>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d0f 	.word	0x08005d0f
 8005d00:	08005d15 	.word	0x08005d15
 8005d04:	08005d1b 	.word	0x08005d1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d0c:	e00b      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	73fb      	strb	r3, [r7, #15]
    break;
 8005d12:	e008      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
    break;
 8005d18:	e005      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8005d1e:	e002      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005d20:	2302      	movs	r3, #2
 8005d22:	73fb      	strb	r3, [r7, #15]
    break;
 8005d24:	bf00      	nop
  }
  return usb_status;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2212      	movs	r2, #18
 8005d44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d46:	4b03      	ldr	r3, [pc, #12]	; (8005d54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	2000017c 	.word	0x2000017c

08005d58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2204      	movs	r2, #4
 8005d68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d6a:	4b03      	ldr	r3, [pc, #12]	; (8005d78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	20000190 	.word	0x20000190

08005d7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	6039      	str	r1, [r7, #0]
 8005d86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d105      	bne.n	8005d9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	4907      	ldr	r1, [pc, #28]	; (8005db0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d92:	4808      	ldr	r0, [pc, #32]	; (8005db4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d94:	f7ff f9c2 	bl	800511c <USBD_GetString>
 8005d98:	e004      	b.n	8005da4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4904      	ldr	r1, [pc, #16]	; (8005db0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d9e:	4805      	ldr	r0, [pc, #20]	; (8005db4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005da0:	f7ff f9bc 	bl	800511c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	200018e8 	.word	0x200018e8
 8005db4:	080061b4 	.word	0x080061b4

08005db8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	6039      	str	r1, [r7, #0]
 8005dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	4904      	ldr	r1, [pc, #16]	; (8005dd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005dc8:	4804      	ldr	r0, [pc, #16]	; (8005ddc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005dca:	f7ff f9a7 	bl	800511c <USBD_GetString>
  return USBD_StrDesc;
 8005dce:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	200018e8 	.word	0x200018e8
 8005ddc:	080061cc 	.word	0x080061cc

08005de0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	221a      	movs	r2, #26
 8005df0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005df2:	f000 f843 	bl	8005e7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005df6:	4b02      	ldr	r3, [pc, #8]	; (8005e00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000194 	.word	0x20000194

08005e04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6039      	str	r1, [r7, #0]
 8005e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4907      	ldr	r1, [pc, #28]	; (8005e38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e1a:	4808      	ldr	r0, [pc, #32]	; (8005e3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e1c:	f7ff f97e 	bl	800511c <USBD_GetString>
 8005e20:	e004      	b.n	8005e2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4904      	ldr	r1, [pc, #16]	; (8005e38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e26:	4805      	ldr	r0, [pc, #20]	; (8005e3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e28:	f7ff f978 	bl	800511c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e2c:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200018e8 	.word	0x200018e8
 8005e3c:	080061e0 	.word	0x080061e0

08005e40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	6039      	str	r1, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	4907      	ldr	r1, [pc, #28]	; (8005e74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e56:	4808      	ldr	r0, [pc, #32]	; (8005e78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e58:	f7ff f960 	bl	800511c <USBD_GetString>
 8005e5c:	e004      	b.n	8005e68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4904      	ldr	r1, [pc, #16]	; (8005e74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e62:	4805      	ldr	r0, [pc, #20]	; (8005e78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e64:	f7ff f95a 	bl	800511c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e68:	4b02      	ldr	r3, [pc, #8]	; (8005e74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200018e8 	.word	0x200018e8
 8005e78:	080061ec 	.word	0x080061ec

08005e7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e82:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <Get_SerialNum+0x44>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e88:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <Get_SerialNum+0x48>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <Get_SerialNum+0x4c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	4909      	ldr	r1, [pc, #36]	; (8005ecc <Get_SerialNum+0x50>)
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 f814 	bl	8005ed4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005eac:	2204      	movs	r2, #4
 8005eae:	4908      	ldr	r1, [pc, #32]	; (8005ed0 <Get_SerialNum+0x54>)
 8005eb0:	68b8      	ldr	r0, [r7, #8]
 8005eb2:	f000 f80f 	bl	8005ed4 <IntToUnicode>
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	1fff7a10 	.word	0x1fff7a10
 8005ec4:	1fff7a14 	.word	0x1fff7a14
 8005ec8:	1fff7a18 	.word	0x1fff7a18
 8005ecc:	20000196 	.word	0x20000196
 8005ed0:	200001a6 	.word	0x200001a6

08005ed4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]
 8005eea:	e027      	b.n	8005f3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	0f1b      	lsrs	r3, r3, #28
 8005ef0:	2b09      	cmp	r3, #9
 8005ef2:	d80b      	bhi.n	8005f0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	0f1b      	lsrs	r3, r3, #28
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4619      	mov	r1, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	440b      	add	r3, r1
 8005f04:	3230      	adds	r2, #48	; 0x30
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e00a      	b.n	8005f22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	0f1b      	lsrs	r3, r3, #28
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	4619      	mov	r1, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3237      	adds	r2, #55	; 0x37
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4413      	add	r3, r2
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
 8005f3c:	7dfa      	ldrb	r2, [r7, #23]
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d3d3      	bcc.n	8005eec <IntToUnicode+0x18>
  }
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f56:	e003      	b.n	8005f60 <LoopCopyDataInit>

08005f58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f5e:	3104      	adds	r1, #4

08005f60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f60:	480b      	ldr	r0, [pc, #44]	; (8005f90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005f64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f68:	d3f6      	bcc.n	8005f58 <CopyDataInit>
  ldr  r2, =_sbss
 8005f6a:	4a0b      	ldr	r2, [pc, #44]	; (8005f98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005f6c:	e002      	b.n	8005f74 <LoopFillZerobss>

08005f6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005f6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005f70:	f842 3b04 	str.w	r3, [r2], #4

08005f74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005f76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f78:	d3f9      	bcc.n	8005f6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005f7a:	f7ff faeb 	bl	8005554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f7e:	f000 f817 	bl	8005fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f82:	f7ff f9a9 	bl	80052d8 <main>
  bx  lr    
 8005f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005f8c:	0800621c 	.word	0x0800621c
  ldr  r0, =_sdata
 8005f90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f94:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8005f98:	20000214 	.word	0x20000214
  ldr  r3, = _ebss
 8005f9c:	20001aec 	.word	0x20001aec

08005fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fa0:	e7fe      	b.n	8005fa0 <ADC_IRQHandler>
	...

08005fa4 <__errno>:
 8005fa4:	4b01      	ldr	r3, [pc, #4]	; (8005fac <__errno+0x8>)
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	200001b0 	.word	0x200001b0

08005fb0 <__libc_init_array>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4e0d      	ldr	r6, [pc, #52]	; (8005fe8 <__libc_init_array+0x38>)
 8005fb4:	4c0d      	ldr	r4, [pc, #52]	; (8005fec <__libc_init_array+0x3c>)
 8005fb6:	1ba4      	subs	r4, r4, r6
 8005fb8:	10a4      	asrs	r4, r4, #2
 8005fba:	2500      	movs	r5, #0
 8005fbc:	42a5      	cmp	r5, r4
 8005fbe:	d109      	bne.n	8005fd4 <__libc_init_array+0x24>
 8005fc0:	4e0b      	ldr	r6, [pc, #44]	; (8005ff0 <__libc_init_array+0x40>)
 8005fc2:	4c0c      	ldr	r4, [pc, #48]	; (8005ff4 <__libc_init_array+0x44>)
 8005fc4:	f000 f8ea 	bl	800619c <_init>
 8005fc8:	1ba4      	subs	r4, r4, r6
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	2500      	movs	r5, #0
 8005fce:	42a5      	cmp	r5, r4
 8005fd0:	d105      	bne.n	8005fde <__libc_init_array+0x2e>
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fd8:	4798      	blx	r3
 8005fda:	3501      	adds	r5, #1
 8005fdc:	e7ee      	b.n	8005fbc <__libc_init_array+0xc>
 8005fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fe2:	4798      	blx	r3
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	e7f2      	b.n	8005fce <__libc_init_array+0x1e>
 8005fe8:	08006214 	.word	0x08006214
 8005fec:	08006214 	.word	0x08006214
 8005ff0:	08006214 	.word	0x08006214
 8005ff4:	08006218 	.word	0x08006218

08005ff8 <malloc>:
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <malloc+0xc>)
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f000 b861 	b.w	80060c4 <_malloc_r>
 8006002:	bf00      	nop
 8006004:	200001b0 	.word	0x200001b0

08006008 <free>:
 8006008:	4b02      	ldr	r3, [pc, #8]	; (8006014 <free+0xc>)
 800600a:	4601      	mov	r1, r0
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	f000 b80b 	b.w	8006028 <_free_r>
 8006012:	bf00      	nop
 8006014:	200001b0 	.word	0x200001b0

08006018 <memset>:
 8006018:	4402      	add	r2, r0
 800601a:	4603      	mov	r3, r0
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <memset+0xa>
 8006020:	4770      	bx	lr
 8006022:	f803 1b01 	strb.w	r1, [r3], #1
 8006026:	e7f9      	b.n	800601c <memset+0x4>

08006028 <_free_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4605      	mov	r5, r0
 800602c:	2900      	cmp	r1, #0
 800602e:	d045      	beq.n	80060bc <_free_r+0x94>
 8006030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006034:	1f0c      	subs	r4, r1, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfb8      	it	lt
 800603a:	18e4      	addlt	r4, r4, r3
 800603c:	f000 f8ac 	bl	8006198 <__malloc_lock>
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <_free_r+0x98>)
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	4610      	mov	r0, r2
 8006046:	b933      	cbnz	r3, 8006056 <_free_r+0x2e>
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	6014      	str	r4, [r2, #0]
 800604c:	4628      	mov	r0, r5
 800604e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006052:	f000 b8a2 	b.w	800619a <__malloc_unlock>
 8006056:	42a3      	cmp	r3, r4
 8006058:	d90c      	bls.n	8006074 <_free_r+0x4c>
 800605a:	6821      	ldr	r1, [r4, #0]
 800605c:	1862      	adds	r2, r4, r1
 800605e:	4293      	cmp	r3, r2
 8006060:	bf04      	itt	eq
 8006062:	681a      	ldreq	r2, [r3, #0]
 8006064:	685b      	ldreq	r3, [r3, #4]
 8006066:	6063      	str	r3, [r4, #4]
 8006068:	bf04      	itt	eq
 800606a:	1852      	addeq	r2, r2, r1
 800606c:	6022      	streq	r2, [r4, #0]
 800606e:	6004      	str	r4, [r0, #0]
 8006070:	e7ec      	b.n	800604c <_free_r+0x24>
 8006072:	4613      	mov	r3, r2
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	b10a      	cbz	r2, 800607c <_free_r+0x54>
 8006078:	42a2      	cmp	r2, r4
 800607a:	d9fa      	bls.n	8006072 <_free_r+0x4a>
 800607c:	6819      	ldr	r1, [r3, #0]
 800607e:	1858      	adds	r0, r3, r1
 8006080:	42a0      	cmp	r0, r4
 8006082:	d10b      	bne.n	800609c <_free_r+0x74>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	4401      	add	r1, r0
 8006088:	1858      	adds	r0, r3, r1
 800608a:	4282      	cmp	r2, r0
 800608c:	6019      	str	r1, [r3, #0]
 800608e:	d1dd      	bne.n	800604c <_free_r+0x24>
 8006090:	6810      	ldr	r0, [r2, #0]
 8006092:	6852      	ldr	r2, [r2, #4]
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	4401      	add	r1, r0
 8006098:	6019      	str	r1, [r3, #0]
 800609a:	e7d7      	b.n	800604c <_free_r+0x24>
 800609c:	d902      	bls.n	80060a4 <_free_r+0x7c>
 800609e:	230c      	movs	r3, #12
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	e7d3      	b.n	800604c <_free_r+0x24>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	1821      	adds	r1, r4, r0
 80060a8:	428a      	cmp	r2, r1
 80060aa:	bf04      	itt	eq
 80060ac:	6811      	ldreq	r1, [r2, #0]
 80060ae:	6852      	ldreq	r2, [r2, #4]
 80060b0:	6062      	str	r2, [r4, #4]
 80060b2:	bf04      	itt	eq
 80060b4:	1809      	addeq	r1, r1, r0
 80060b6:	6021      	streq	r1, [r4, #0]
 80060b8:	605c      	str	r4, [r3, #4]
 80060ba:	e7c7      	b.n	800604c <_free_r+0x24>
 80060bc:	bd38      	pop	{r3, r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	20000238 	.word	0x20000238

080060c4 <_malloc_r>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	1ccd      	adds	r5, r1, #3
 80060c8:	f025 0503 	bic.w	r5, r5, #3
 80060cc:	3508      	adds	r5, #8
 80060ce:	2d0c      	cmp	r5, #12
 80060d0:	bf38      	it	cc
 80060d2:	250c      	movcc	r5, #12
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	4606      	mov	r6, r0
 80060d8:	db01      	blt.n	80060de <_malloc_r+0x1a>
 80060da:	42a9      	cmp	r1, r5
 80060dc:	d903      	bls.n	80060e6 <_malloc_r+0x22>
 80060de:	230c      	movs	r3, #12
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	2000      	movs	r0, #0
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	f000 f857 	bl	8006198 <__malloc_lock>
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <_malloc_r+0xac>)
 80060ec:	6814      	ldr	r4, [r2, #0]
 80060ee:	4621      	mov	r1, r4
 80060f0:	b991      	cbnz	r1, 8006118 <_malloc_r+0x54>
 80060f2:	4c20      	ldr	r4, [pc, #128]	; (8006174 <_malloc_r+0xb0>)
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	b91b      	cbnz	r3, 8006100 <_malloc_r+0x3c>
 80060f8:	4630      	mov	r0, r6
 80060fa:	f000 f83d 	bl	8006178 <_sbrk_r>
 80060fe:	6020      	str	r0, [r4, #0]
 8006100:	4629      	mov	r1, r5
 8006102:	4630      	mov	r0, r6
 8006104:	f000 f838 	bl	8006178 <_sbrk_r>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d124      	bne.n	8006156 <_malloc_r+0x92>
 800610c:	230c      	movs	r3, #12
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	4630      	mov	r0, r6
 8006112:	f000 f842 	bl	800619a <__malloc_unlock>
 8006116:	e7e4      	b.n	80060e2 <_malloc_r+0x1e>
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	1b5b      	subs	r3, r3, r5
 800611c:	d418      	bmi.n	8006150 <_malloc_r+0x8c>
 800611e:	2b0b      	cmp	r3, #11
 8006120:	d90f      	bls.n	8006142 <_malloc_r+0x7e>
 8006122:	600b      	str	r3, [r1, #0]
 8006124:	50cd      	str	r5, [r1, r3]
 8006126:	18cc      	adds	r4, r1, r3
 8006128:	4630      	mov	r0, r6
 800612a:	f000 f836 	bl	800619a <__malloc_unlock>
 800612e:	f104 000b 	add.w	r0, r4, #11
 8006132:	1d23      	adds	r3, r4, #4
 8006134:	f020 0007 	bic.w	r0, r0, #7
 8006138:	1ac3      	subs	r3, r0, r3
 800613a:	d0d3      	beq.n	80060e4 <_malloc_r+0x20>
 800613c:	425a      	negs	r2, r3
 800613e:	50e2      	str	r2, [r4, r3]
 8006140:	e7d0      	b.n	80060e4 <_malloc_r+0x20>
 8006142:	428c      	cmp	r4, r1
 8006144:	684b      	ldr	r3, [r1, #4]
 8006146:	bf16      	itet	ne
 8006148:	6063      	strne	r3, [r4, #4]
 800614a:	6013      	streq	r3, [r2, #0]
 800614c:	460c      	movne	r4, r1
 800614e:	e7eb      	b.n	8006128 <_malloc_r+0x64>
 8006150:	460c      	mov	r4, r1
 8006152:	6849      	ldr	r1, [r1, #4]
 8006154:	e7cc      	b.n	80060f0 <_malloc_r+0x2c>
 8006156:	1cc4      	adds	r4, r0, #3
 8006158:	f024 0403 	bic.w	r4, r4, #3
 800615c:	42a0      	cmp	r0, r4
 800615e:	d005      	beq.n	800616c <_malloc_r+0xa8>
 8006160:	1a21      	subs	r1, r4, r0
 8006162:	4630      	mov	r0, r6
 8006164:	f000 f808 	bl	8006178 <_sbrk_r>
 8006168:	3001      	adds	r0, #1
 800616a:	d0cf      	beq.n	800610c <_malloc_r+0x48>
 800616c:	6025      	str	r5, [r4, #0]
 800616e:	e7db      	b.n	8006128 <_malloc_r+0x64>
 8006170:	20000238 	.word	0x20000238
 8006174:	2000023c 	.word	0x2000023c

08006178 <_sbrk_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4c06      	ldr	r4, [pc, #24]	; (8006194 <_sbrk_r+0x1c>)
 800617c:	2300      	movs	r3, #0
 800617e:	4605      	mov	r5, r0
 8006180:	4608      	mov	r0, r1
 8006182:	6023      	str	r3, [r4, #0]
 8006184:	f7ff f9ba 	bl	80054fc <_sbrk>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_sbrk_r+0x1a>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	b103      	cbz	r3, 8006192 <_sbrk_r+0x1a>
 8006190:	602b      	str	r3, [r5, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	20001ae8 	.word	0x20001ae8

08006198 <__malloc_lock>:
 8006198:	4770      	bx	lr

0800619a <__malloc_unlock>:
 800619a:	4770      	bx	lr

0800619c <_init>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr

080061a8 <_fini>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	bf00      	nop
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr
