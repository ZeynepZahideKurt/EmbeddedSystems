
RTCWakeUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e2c  08002e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002e40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002e40  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a91c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a0  00000000  00000000  0002a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107df  00000000  00000000  0002d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b378  00000000  00000000  0003dbc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065cf3  00000000  00000000  00048f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aec32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e98  00000000  00000000  000aec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d90 	.word	0x08002d90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d90 	.word	0x08002d90

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 faa6 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f84a 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f91c 	bl	80006e4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004ac:	f000 f8b8 	bl	8000620 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80004b0:	f000 f8e4 	bl	800067c <MX_RTC_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //https://community.st.com/s/article/how-to-configure-the-rtc-to-wake-up-the-stm32-periodically-from-low-power-modes
	  //https://www.st.com/resource/en/application_note/an4445-stm32l0xx-ultralow-power-features-overview-stmicroelectronics.pdf
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	019b      	lsls	r3, r3, #6
 80004b8:	4819      	ldr	r0, [pc, #100]	; (8000520 <main+0x84>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	0019      	movs	r1, r3
 80004be:	f000 fd93 	bl	8000fe8 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&hlpuart1, "yandi\r\n", 7, 1000);
 80004c2:	23fa      	movs	r3, #250	; 0xfa
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4917      	ldr	r1, [pc, #92]	; (8000524 <main+0x88>)
 80004c8:	4817      	ldr	r0, [pc, #92]	; (8000528 <main+0x8c>)
 80004ca:	2207      	movs	r2, #7
 80004cc:	f001 ff6a 	bl	80023a4 <HAL_UART_Transmit>

      HAL_Delay(3000);
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <main+0x90>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fafc 	bl	8000ad0 <HAL_Delay>


	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	4810      	ldr	r0, [pc, #64]	; (8000520 <main+0x84>)
 80004de:	2200      	movs	r2, #0
 80004e0:	0019      	movs	r1, r3
 80004e2:	f000 fd81 	bl	8000fe8 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&hlpuart1, "sondu\r\n", 7, 1000);
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4911      	ldr	r1, [pc, #68]	; (8000530 <main+0x94>)
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <main+0x8c>)
 80004ee:	2207      	movs	r2, #7
 80004f0:	f001 ff58 	bl	80023a4 <HAL_UART_Transmit>
	  HAL_SuspendTick();
 80004f4:	f000 fb10 	bl	8000b18 <HAL_SuspendTick>
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A55, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80004f8:	490e      	ldr	r1, [pc, #56]	; (8000534 <main+0x98>)
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <main+0x9c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fda2 	bl	8002048 <HAL_RTCEx_SetWakeUpTimer_IT>

	//HAL_PWREx_EnterSTOPMode(PWR_STOPENTRY_WFI);
	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 8000504:	2102      	movs	r1, #2
 8000506:	2001      	movs	r0, #1
 8000508:	f000 fd8c 	bl	8001024 <HAL_PWR_EnterSTOPMode>
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <main+0x9c>)
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fe60 	bl	80021d4 <HAL_RTCEx_DeactivateWakeUpTimer>
	  SystemClock_Config();
 8000514:	f000 f812 	bl	800053c <SystemClock_Config>
	  HAL_ResumeTick();
 8000518:	f000 fb0c 	bl	8000b34 <HAL_ResumeTick>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800051c:	e7ca      	b.n	80004b4 <main+0x18>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	50000800 	.word	0x50000800
 8000524:	08002da8 	.word	0x08002da8
 8000528:	20000028 	.word	0x20000028
 800052c:	00000bb8 	.word	0x00000bb8
 8000530:	08002db0 	.word	0x08002db0
 8000534:	00005a55 	.word	0x00005a55
 8000538:	200000ac 	.word	0x200000ac

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b099      	sub	sp, #100	; 0x64
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	242c      	movs	r4, #44	; 0x2c
 8000544:	193b      	adds	r3, r7, r4
 8000546:	0018      	movs	r0, r3
 8000548:	2334      	movs	r3, #52	; 0x34
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f002 fc17 	bl	8002d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	2318      	movs	r3, #24
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f002 fc0f 	bl	8002d80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000562:	003b      	movs	r3, r7
 8000564:	0018      	movs	r0, r3
 8000566:	2318      	movs	r3, #24
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f002 fc08 	bl	8002d80 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	4b29      	ldr	r3, [pc, #164]	; (8000618 <SystemClock_Config+0xdc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a29      	ldr	r2, [pc, #164]	; (800061c <SystemClock_Config+0xe0>)
 8000576:	401a      	ands	r2, r3
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xdc>)
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	0109      	lsls	r1, r1, #4
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2218      	movs	r2, #24
 8000588:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2201      	movs	r2, #1
 8000594:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	22a0      	movs	r2, #160	; 0xa0
 80005a0:	0212      	lsls	r2, r2, #8
 80005a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fd95 	bl	80010dc <HAL_RCC_OscConfig>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005b6:	f000 f90d 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	2118      	movs	r1, #24
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	220f      	movs	r2, #15
 80005c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 f8f8 	bl	80017d4 <HAL_RCC_ClockConfig>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005e8:	f000 f8f4 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2224      	movs	r2, #36	; 0x24
 80005f0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005f2:	003b      	movs	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0292      	lsls	r2, r2, #10
 80005fe:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	003b      	movs	r3, r7
 8000602:	0018      	movs	r0, r3
 8000604:	f001 fb0a 	bl	8001c1c <HAL_RCCEx_PeriphCLKConfig>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800060c:	f000 f8e2 	bl	80007d4 <Error_Handler>
  }
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b019      	add	sp, #100	; 0x64
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	40007000 	.word	0x40007000
 800061c:	ffffe7ff 	.word	0xffffe7ff

08000620 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000626:	4a14      	ldr	r2, [pc, #80]	; (8000678 <MX_LPUART1_UART_Init+0x58>)
 8000628:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 800062c:	22e1      	movs	r2, #225	; 0xe1
 800062e:	0252      	lsls	r2, r2, #9
 8000630:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MX_LPUART1_UART_Init+0x54>)
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fe4c 	bl	80022fc <HAL_UART_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f8b4 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000028 	.word	0x20000028
 8000678:	40004800 	.word	0x40004800

0800067c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_RTC_Init+0x60>)
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <MX_RTC_Init+0x64>)
 8000684:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_RTC_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_RTC_Init+0x60>)
 800068e:	227c      	movs	r2, #124	; 0x7c
 8000690:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 295;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_RTC_Init+0x60>)
 8000694:	2228      	movs	r2, #40	; 0x28
 8000696:	32ff      	adds	r2, #255	; 0xff
 8000698:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_RTC_Init+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_RTC_Init+0x60>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_RTC_Init+0x60>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_RTC_Init+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_RTC_Init+0x60>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fbd7 	bl	8001e68 <HAL_RTC_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f889 	bl	80007d4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_RTC_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fcbd 	bl	8002048 <HAL_RTCEx_SetWakeUpTimer_IT>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80006d2:	f000 f87f 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000ac 	.word	0x200000ac
 80006e0:	40002800 	.word	0x40002800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b08b      	sub	sp, #44	; 0x2c
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	2414      	movs	r4, #20
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2314      	movs	r3, #20
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f002 fb43 	bl	8002d80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <MX_GPIO_Init+0xe8>)
 80006fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fe:	4b33      	ldr	r3, [pc, #204]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000700:	2104      	movs	r1, #4
 8000702:	430a      	orrs	r2, r1
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
 8000706:	4b31      	ldr	r3, [pc, #196]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	2204      	movs	r2, #4
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xe8>)
 800072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_GPIO_Init+0xe8>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000760:	2200      	movs	r2, #0
 8000762:	0019      	movs	r1, r3
 8000764:	f000 fc40 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	2200      	movs	r2, #0
 800076e:	2104      	movs	r1, #4
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fc39 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0192      	lsls	r2, r2, #6
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2201      	movs	r2, #1
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	193b      	adds	r3, r7, r4
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000794:	0019      	movs	r1, r3
 8000796:	0010      	movs	r0, r2
 8000798:	f000 fab8 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800079c:	0021      	movs	r1, r4
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2204      	movs	r2, #4
 80007a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2201      	movs	r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	187a      	adds	r2, r7, r1
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 faa4 	bl	8000d0c <HAL_GPIO_Init>

}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b00b      	add	sp, #44	; 0x2c
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	50000800 	.word	0x50000800

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <HAL_MspInit+0x24>)
 80007e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x24>)
 80007ea:	2101      	movs	r1, #1
 80007ec:	430a      	orrs	r2, r1
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <HAL_MspInit+0x24>)
 80007f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_MspInit+0x24>)
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	0549      	lsls	r1, r1, #21
 80007fa:	430a      	orrs	r2, r1
 80007fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08b      	sub	sp, #44	; 0x2c
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	2414      	movs	r4, #20
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	2314      	movs	r3, #20
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f002 fab0 	bl	8002d80 <memset>
  if(huart->Instance==LPUART1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <HAL_UART_MspInit+0xc0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d14a      	bne.n	80008c0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <HAL_UART_MspInit+0xc4>)
 800082c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <HAL_UART_MspInit+0xc4>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	02c9      	lsls	r1, r1, #11
 8000834:	430a      	orrs	r2, r1
 8000836:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <HAL_UART_MspInit+0xc4>)
 800083a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_UART_MspInit+0xc4>)
 800083e:	2104      	movs	r1, #4
 8000840:	430a      	orrs	r2, r1
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <HAL_UART_MspInit+0xc4>)
 8000846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000848:	2204      	movs	r2, #4
 800084a:	4013      	ands	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <HAL_UART_MspInit+0xc4>)
 8000852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <HAL_UART_MspInit+0xc4>)
 8000856:	2102      	movs	r1, #2
 8000858:	430a      	orrs	r2, r1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <HAL_UART_MspInit+0xc4>)
 800085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000860:	2202      	movs	r2, #2
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2202      	movs	r2, #2
 8000872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2203      	movs	r2, #3
 800087e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2206      	movs	r2, #6
 8000884:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	193b      	adds	r3, r7, r4
 8000888:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0xc8>)
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f000 fa3d 	bl	8000d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2202      	movs	r2, #2
 80008a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2203      	movs	r2, #3
 80008ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2206      	movs	r2, #6
 80008b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_UART_MspInit+0xcc>)
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f000 fa26 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b00b      	add	sp, #44	; 0x2c
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	40004800 	.word	0x40004800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	50000800 	.word	0x50000800
 80008d4:	50000400 	.word	0x50000400

080008d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_RTC_MspInit+0x38>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10e      	bne.n	8000908 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_RTC_MspInit+0x3c>)
 80008ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_RTC_MspInit+0x3c>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	02c9      	lsls	r1, r1, #11
 80008f4:	430a      	orrs	r2, r1
 80008f6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2002      	movs	r0, #2
 80008fe:	f000 f9d3 	bl	8000ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000902:	2002      	movs	r0, #2
 8000904:	f000 f9e5 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b002      	add	sp, #8
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40002800 	.word	0x40002800
 8000914:	40021000 	.word	0x40021000

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8ac 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <RTC_IRQHandler+0x14>)
 800094e:	0018      	movs	r0, r3
 8000950:	f001 fca2 	bl	8002298 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	200000ac 	.word	0x200000ac

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800096e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000972:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000974:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <LoopForever+0xa>)
    CMP R1, R2
 8000978:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800097a:	d105      	bne.n	8000988 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800097e:	4913      	ldr	r1, [pc, #76]	; (80009cc <LoopForever+0x12>)
    STR R1, [R0]
 8000980:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000984:	4913      	ldr	r1, [pc, #76]	; (80009d4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000986:	6001      	str	r1, [r0, #0]

08000988 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800098a:	4914      	ldr	r1, [pc, #80]	; (80009dc <LoopForever+0x22>)
  ldr r2, =_sidata
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <LoopForever+0x26>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009a0:	4c11      	ldr	r4, [pc, #68]	; (80009e8 <LoopForever+0x2e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f002 f9c1 	bl	8002d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fd71 	bl	800049c <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
   ldr   r0, =_estack
 80009bc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80009c0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009c4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009c8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009cc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009d0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009d4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	08002e34 	.word	0x08002e34
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	200000d4 	.word	0x200000d4

080009ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_IRQHandler>
	...

080009f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x3c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_Init+0x3c>)
 8000a02:	2140      	movs	r1, #64	; 0x40
 8000a04:	430a      	orrs	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f811 	bl	8000a30 <HAL_InitTick>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a1a:	f7ff fee1 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_InitTick+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0019      	movs	r1, r3
 8000a42:	23fa      	movs	r3, #250	; 0xfa
 8000a44:	0098      	lsls	r0, r3, #2
 8000a46:	f7ff fb5f 	bl	8000108 <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff fb5a 	bl	8000108 <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f94b 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e00f      	b.n	8000a84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d80b      	bhi.n	8000a82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f918 	bl	8000ca8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_InitTick+0x64>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	18d2      	adds	r2, r2, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000d0 	.word	0x200000d0

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	200000d0 	.word	0x200000d0

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff0 	bl	8000abc <HAL_GetTick>
 8000adc:	0003      	movs	r3, r0
 8000ade:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001a      	movs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	189b      	adds	r3, r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_GetTick>
 8000afc:	0002      	movs	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000008 	.word	0x20000008

08000b18 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <HAL_SuspendTick+0x18>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_SuspendTick+0x18>)
 8000b22:	2102      	movs	r1, #2
 8000b24:	438a      	bics	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_ResumeTick+0x18>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_ResumeTick+0x18>)
 8000b3e:	2102      	movs	r1, #2
 8000b40:	430a      	orrs	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b7f      	cmp	r3, #127	; 0x7f
 8000b62:	d809      	bhi.n	8000b78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	001a      	movs	r2, r3
 8000b6a:	231f      	movs	r3, #31
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_EnableIRQ+0x30>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	4091      	lsls	r1, r2
 8000b74:	000a      	movs	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
  }
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b7f      	cmp	r3, #127	; 0x7f
 8000b98:	d828      	bhi.n	8000bec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	33c0      	adds	r3, #192	; 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	589b      	ldr	r3, [r3, r2]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	430a      	orrs	r2, r1
 8000be4:	33c0      	adds	r3, #192	; 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bea:	e031      	b.n	8000c50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	3b08      	subs	r3, #8
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	4023      	ands	r3, r4
 8000c40:	3b08      	subs	r3, #8
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	430a      	orrs	r2, r1
 8000c46:	3306      	adds	r3, #6
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	18c3      	adds	r3, r0, r3
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	045b      	lsls	r3, r3, #17
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d301      	bcc.n	8000c78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c74:	2301      	movs	r3, #1
 8000c76:	e010      	b.n	8000c9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <SysTick_Config+0x44>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2103      	movs	r1, #3
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff7c 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x44>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	1c02      	adds	r2, r0, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	0002      	movs	r2, r0
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff33 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ffaf 	bl	8000c60 <SysTick_Config>
 8000d02:	0003      	movs	r3, r0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d22:	e149      	b.n	8000fb8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	000a      	movs	r2, r1
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d100      	bne.n	8000d3c <HAL_GPIO_Init+0x30>
 8000d3a:	e13a      	b.n	8000fb2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2203      	movs	r2, #3
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d005      	beq.n	8000d54 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	409a      	lsls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	2201      	movs	r2, #1
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2203      	movs	r2, #3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d017      	beq.n	8000df2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d123      	bne.n	8000e46 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	58d3      	ldr	r3, [r2, r3]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2207      	movs	r2, #7
 8000e10:	4013      	ands	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2107      	movs	r1, #7
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	6939      	ldr	r1, [r7, #16]
 8000e44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	401a      	ands	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	23c0      	movs	r3, #192	; 0xc0
 8000e80:	029b      	lsls	r3, r3, #10
 8000e82:	4013      	ands	r3, r2
 8000e84:	d100      	bne.n	8000e88 <HAL_GPIO_Init+0x17c>
 8000e86:	e094      	b.n	8000fb2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	4b51      	ldr	r3, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8c:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e94:	4a4f      	ldr	r2, [pc, #316]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	589b      	ldr	r3, [r3, r2]
 8000ea0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x1de>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a44      	ldr	r2, [pc, #272]	; (8000fd8 <HAL_GPIO_Init+0x2cc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x1da>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a43      	ldr	r2, [pc, #268]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x1d6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a42      	ldr	r2, [pc, #264]	; (8000fe0 <HAL_GPIO_Init+0x2d4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x1d2>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000ede:	2306      	movs	r3, #6
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000eea:	2300      	movs	r3, #0
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	2103      	movs	r1, #3
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efc:	4935      	ldr	r1, [pc, #212]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0a:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	025b      	lsls	r3, r3, #9
 8000f22:	4013      	ands	r3, r2
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	035b      	lsls	r3, r3, #13
 8000f76:	4013      	ands	r3, r2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	039b      	lsls	r3, r3, #14
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	40da      	lsrs	r2, r3
 8000fc0:	1e13      	subs	r3, r2, #0
 8000fc2:	d000      	beq.n	8000fc6 <HAL_GPIO_Init+0x2ba>
 8000fc4:	e6ae      	b.n	8000d24 <HAL_GPIO_Init+0x18>
  }
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	50000400 	.word	0x50000400
 8000fdc:	50000800 	.word	0x50000800
 8000fe0:	50001c00 	.word	0x50001c00
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	1c02      	adds	r2, r0, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
 8000ffa:	1c7b      	adds	r3, r7, #1
 8000ffc:	1c0a      	adds	r2, r1, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001000:	1c7b      	adds	r3, r7, #1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001008:	1cbb      	adds	r3, r7, #2
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001012:	1cbb      	adds	r3, r7, #2
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	000a      	movs	r2, r1
 800102e:	1cfb      	adds	r3, r7, #3
 8001030:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_PWR_EnterSTOPMode+0xac>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	2201      	movs	r2, #1
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d008      	beq.n	8001064 <HAL_PWR_EnterSTOPMode+0x40>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_PWR_EnterSTOPMode+0xa8>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_PWR_EnterSTOPMode+0xa8>)
 800105e:	491d      	ldr	r1, [pc, #116]	; (80010d4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_PWR_EnterSTOPMode+0xa8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2203      	movs	r2, #3
 800106e:	4393      	bics	r3, r2
 8001070:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4313      	orrs	r3, r2
 8001078:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_PWR_EnterSTOPMode+0xa8>)
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001086:	2104      	movs	r1, #4
 8001088:	430a      	orrs	r2, r1
 800108a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800108c:	1cfb      	adds	r3, r7, #3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001094:	bf30      	wfi
 8001096:	e002      	b.n	800109e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001098:	bf40      	sev
    __WFE();
 800109a:	bf20      	wfe
    __WFE();
 800109c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80010a4:	2104      	movs	r1, #4
 80010a6:	438a      	bics	r2, r1
 80010a8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <HAL_PWR_EnterSTOPMode+0xa0>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_PWR_EnterSTOPMode+0xa8>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_PWR_EnterSTOPMode+0xa8>)
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	0089      	lsls	r1, r1, #2
 80010c0:	430a      	orrs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
  }
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b006      	add	sp, #24
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40007000 	.word	0x40007000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	fffffdff 	.word	0xfffffdff
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 fb6c 	bl	80017c8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f0:	4bc8      	ldr	r3, [pc, #800]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	220c      	movs	r2, #12
 80010f6:	4013      	ands	r3, r2
 80010f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010fa:	4bc6      	ldr	r3, [pc, #792]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	4013      	ands	r3, r2
 800110e:	d100      	bne.n	8001112 <HAL_RCC_OscConfig+0x36>
 8001110:	e07d      	b.n	800120e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d007      	beq.n	8001128 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0c      	cmp	r3, #12
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x68>
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	429a      	cmp	r2, r3
 8001126:	d10d      	bne.n	8001144 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4bba      	ldr	r3, [pc, #744]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	d100      	bne.n	8001136 <HAL_RCC_OscConfig+0x5a>
 8001134:	e06a      	b.n	800120c <HAL_RCC_OscConfig+0x130>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d166      	bne.n	800120c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f000 fb42 	bl	80017c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	429a      	cmp	r2, r3
 800114e:	d107      	bne.n	8001160 <HAL_RCC_OscConfig+0x84>
 8001150:	4bb0      	ldr	r3, [pc, #704]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4baf      	ldr	r3, [pc, #700]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0249      	lsls	r1, r1, #9
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e027      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	02db      	lsls	r3, r3, #11
 8001168:	429a      	cmp	r2, r3
 800116a:	d10e      	bne.n	800118a <HAL_RCC_OscConfig+0xae>
 800116c:	4ba9      	ldr	r3, [pc, #676]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4ba8      	ldr	r3, [pc, #672]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	02c9      	lsls	r1, r1, #11
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	4ba6      	ldr	r3, [pc, #664]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4ba5      	ldr	r3, [pc, #660]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	0249      	lsls	r1, r1, #9
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e012      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 800118a:	4ba2      	ldr	r3, [pc, #648]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4ba1      	ldr	r3, [pc, #644]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001190:	49a1      	ldr	r1, [pc, #644]	; (8001418 <HAL_RCC_OscConfig+0x33c>)
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	4b9f      	ldr	r3, [pc, #636]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	025b      	lsls	r3, r3, #9
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4b9b      	ldr	r3, [pc, #620]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b9a      	ldr	r3, [pc, #616]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011aa:	499c      	ldr	r1, [pc, #624]	; (800141c <HAL_RCC_OscConfig+0x340>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d014      	beq.n	80011e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc80 	bl	8000abc <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff fc7b 	bl	8000abc <HAL_GetTick>
 80011c6:	0002      	movs	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e2f9      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d4:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	029b      	lsls	r3, r3, #10
 80011dc:	4013      	ands	r3, r2
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0xe6>
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fc6b 	bl	8000abc <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fc66 	bl	8000abc <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e2e4      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011fe:	4b85      	ldr	r3, [pc, #532]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	029b      	lsls	r3, r3, #10
 8001206:	4013      	ands	r3, r2
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x110>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d100      	bne.n	800121a <HAL_RCC_OscConfig+0x13e>
 8001218:	e099      	b.n	800134e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	2220      	movs	r2, #32
 8001224:	4013      	ands	r3, r2
 8001226:	d009      	beq.n	800123c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b79      	ldr	r3, [pc, #484]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800122e:	2120      	movs	r1, #32
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	2220      	movs	r2, #32
 8001238:	4393      	bics	r3, r2
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b04      	cmp	r3, #4
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d13e      	bne.n	80012c6 <HAL_RCC_OscConfig+0x1ea>
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d13b      	bne.n	80012c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800124e:	4b71      	ldr	r3, [pc, #452]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2204      	movs	r2, #4
 8001254:	4013      	ands	r3, r2
 8001256:	d004      	beq.n	8001262 <HAL_RCC_OscConfig+0x186>
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e2b2      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <HAL_RCC_OscConfig+0x344>)
 8001268:	4013      	ands	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	021a      	lsls	r2, r3, #8
 8001272:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001274:	430a      	orrs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001278:	4b66      	ldr	r3, [pc, #408]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2209      	movs	r2, #9
 800127e:	4393      	bics	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	4b64      	ldr	r3, [pc, #400]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128a:	f000 fbeb 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 800128e:	0001      	movs	r1, r0
 8001290:	4b60      	ldr	r3, [pc, #384]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	220f      	movs	r2, #15
 8001298:	4013      	ands	r3, r2
 800129a:	4a62      	ldr	r2, [pc, #392]	; (8001424 <HAL_RCC_OscConfig+0x348>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	000a      	movs	r2, r1
 80012a0:	40da      	lsrs	r2, r3
 80012a2:	4b61      	ldr	r3, [pc, #388]	; (8001428 <HAL_RCC_OscConfig+0x34c>)
 80012a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012a6:	4b61      	ldr	r3, [pc, #388]	; (800142c <HAL_RCC_OscConfig+0x350>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2513      	movs	r5, #19
 80012ac:	197c      	adds	r4, r7, r5
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff fbbe 	bl	8000a30 <HAL_InitTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012b8:	197b      	adds	r3, r7, r5
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d046      	beq.n	800134e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80012c0:	197b      	adds	r3, r7, r5
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	e280      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d027      	beq.n	800131c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012cc:	4b51      	ldr	r3, [pc, #324]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2209      	movs	r2, #9
 80012d2:	4393      	bics	r3, r2
 80012d4:	0019      	movs	r1, r3
 80012d6:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fbed 	bl	8000abc <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fbe8 	bl	8000abc <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e266      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2204      	movs	r2, #4
 8001300:	4013      	ands	r3, r2
 8001302:	d0f1      	beq.n	80012e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_RCC_OscConfig+0x344>)
 800130a:	4013      	ands	r3, r2
 800130c:	0019      	movs	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	021a      	lsls	r2, r3, #8
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	e018      	b.n	800134e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131c:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001322:	2101      	movs	r1, #1
 8001324:	438a      	bics	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fbc8 	bl	8000abc <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fbc3 	bl	8000abc <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e241      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2204      	movs	r2, #4
 800134a:	4013      	ands	r3, r2
 800134c:	d1f1      	bne.n	8001332 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2210      	movs	r2, #16
 8001354:	4013      	ands	r3, r2
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x27e>
 8001358:	e0a1      	b.n	800149e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d140      	bne.n	80013e2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4013      	ands	r3, r2
 800136a:	d005      	beq.n	8001378 <HAL_RCC_OscConfig+0x29c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e227      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <HAL_RCC_OscConfig+0x354>)
 800137e:	4013      	ands	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001388:	430a      	orrs	r2, r1
 800138a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	0a19      	lsrs	r1, r3, #8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	061a      	lsls	r2, r3, #24
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800139c:	430a      	orrs	r2, r1
 800139e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	0b5b      	lsrs	r3, r3, #13
 80013a6:	3301      	adds	r3, #1
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	0212      	lsls	r2, r2, #8
 80013ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	210f      	movs	r1, #15
 80013b6:	400b      	ands	r3, r1
 80013b8:	491a      	ldr	r1, [pc, #104]	; (8001424 <HAL_RCC_OscConfig+0x348>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_RCC_OscConfig+0x34c>)
 80013c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_OscConfig+0x350>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2513      	movs	r5, #19
 80013c8:	197c      	adds	r4, r7, r5
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fb30 	bl	8000a30 <HAL_InitTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d060      	beq.n	800149e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80013dc:	197b      	adds	r3, r7, r5
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	e1f2      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d03f      	beq.n	800146a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	0049      	lsls	r1, r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb60 	bl	8000abc <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001400:	e018      	b.n	8001434 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001402:	f7ff fb5b 	bl	8000abc <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d911      	bls.n	8001434 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1d9      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
 8001414:	40021000 	.word	0x40021000
 8001418:	fffeffff 	.word	0xfffeffff
 800141c:	fffbffff 	.word	0xfffbffff
 8001420:	ffffe0ff 	.word	0xffffe0ff
 8001424:	08002db8 	.word	0x08002db8
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004
 8001430:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001434:	4bc9      	ldr	r3, [pc, #804]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d0e0      	beq.n	8001402 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001440:	4bc6      	ldr	r3, [pc, #792]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4ac6      	ldr	r2, [pc, #792]	; (8001760 <HAL_RCC_OscConfig+0x684>)
 8001446:	4013      	ands	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1a      	ldr	r2, [r3, #32]
 800144e:	4bc3      	ldr	r3, [pc, #780]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001450:	430a      	orrs	r2, r1
 8001452:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001454:	4bc1      	ldr	r3, [pc, #772]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	0a19      	lsrs	r1, r3, #8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	061a      	lsls	r2, r3, #24
 8001462:	4bbe      	ldr	r3, [pc, #760]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	e019      	b.n	800149e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800146a:	4bbc      	ldr	r3, [pc, #752]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4bbb      	ldr	r3, [pc, #748]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001470:	49bc      	ldr	r1, [pc, #752]	; (8001764 <HAL_RCC_OscConfig+0x688>)
 8001472:	400a      	ands	r2, r1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb21 	bl	8000abc <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001480:	f7ff fb1c 	bl	8000abc <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e19a      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001492:	4bb2      	ldr	r3, [pc, #712]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2208      	movs	r2, #8
 80014a4:	4013      	ands	r3, r2
 80014a6:	d036      	beq.n	8001516 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d019      	beq.n	80014e4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b0:	4baa      	ldr	r3, [pc, #680]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80014b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b4:	4ba9      	ldr	r3, [pc, #676]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fafe 	bl	8000abc <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff faf9 	bl	8000abc <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e177      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014d8:	4ba0      	ldr	r3, [pc, #640]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80014da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d0f1      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3ea>
 80014e2:	e018      	b.n	8001516 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80014e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e8:	4b9c      	ldr	r3, [pc, #624]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fae4 	bl	8000abc <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fadf 	bl	8000abc <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e15d      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800150c:	4b93      	ldr	r3, [pc, #588]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800150e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f1      	bne.n	80014fa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2204      	movs	r2, #4
 800151c:	4013      	ands	r3, r2
 800151e:	d100      	bne.n	8001522 <HAL_RCC_OscConfig+0x446>
 8001520:	e0ae      	b.n	8001680 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2023      	movs	r0, #35	; 0x23
 8001524:	183b      	adds	r3, r7, r0
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b8c      	ldr	r3, [pc, #560]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800152c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	055b      	lsls	r3, r3, #21
 8001532:	4013      	ands	r3, r2
 8001534:	d109      	bne.n	800154a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0549      	lsls	r1, r1, #21
 8001540:	430a      	orrs	r2, r1
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001544:	183b      	adds	r3, r7, r0
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b87      	ldr	r3, [pc, #540]	; (8001768 <HAL_RCC_OscConfig+0x68c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4013      	ands	r3, r2
 8001554:	d11a      	bne.n	800158c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_RCC_OscConfig+0x68c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <HAL_RCC_OscConfig+0x68c>)
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	0049      	lsls	r1, r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001564:	f7ff faaa 	bl	8000abc <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff faa5 	bl	8000abc <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b64      	cmp	r3, #100	; 0x64
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e123      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b79      	ldr	r3, [pc, #484]	; (8001768 <HAL_RCC_OscConfig+0x68c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	429a      	cmp	r2, r3
 8001596:	d107      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4cc>
 8001598:	4b70      	ldr	r3, [pc, #448]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800159a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800159c:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	0049      	lsls	r1, r1, #1
 80015a2:	430a      	orrs	r2, r1
 80015a4:	651a      	str	r2, [r3, #80]	; 0x50
 80015a6:	e031      	b.n	800160c <HAL_RCC_OscConfig+0x530>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x4ee>
 80015b0:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b4:	4b69      	ldr	r3, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015b6:	496b      	ldr	r1, [pc, #428]	; (8001764 <HAL_RCC_OscConfig+0x688>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	651a      	str	r2, [r3, #80]	; 0x50
 80015bc:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015c2:	496a      	ldr	r1, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x690>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	651a      	str	r2, [r3, #80]	; 0x50
 80015c8:	e020      	b.n	800160c <HAL_RCC_OscConfig+0x530>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d10e      	bne.n	80015f4 <HAL_RCC_OscConfig+0x518>
 80015d6:	4b61      	ldr	r3, [pc, #388]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015da:	4b60      	ldr	r3, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	00c9      	lsls	r1, r1, #3
 80015e0:	430a      	orrs	r2, r1
 80015e2:	651a      	str	r2, [r3, #80]	; 0x50
 80015e4:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e8:	4b5c      	ldr	r3, [pc, #368]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0049      	lsls	r1, r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	651a      	str	r2, [r3, #80]	; 0x50
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x530>
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f8:	4b58      	ldr	r3, [pc, #352]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80015fa:	495a      	ldr	r1, [pc, #360]	; (8001764 <HAL_RCC_OscConfig+0x688>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	651a      	str	r2, [r3, #80]	; 0x50
 8001600:	4b56      	ldr	r3, [pc, #344]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001604:	4b55      	ldr	r3, [pc, #340]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001606:	4959      	ldr	r1, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x690>)
 8001608:	400a      	ands	r2, r1
 800160a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fa52 	bl	8000abc <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800161c:	e009      	b.n	8001632 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fa4d 	bl	8000abc <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4a51      	ldr	r2, [pc, #324]	; (8001770 <HAL_RCC_OscConfig+0x694>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0ca      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d0ef      	beq.n	800161e <HAL_RCC_OscConfig+0x542>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fa3c 	bl	8000abc <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001648:	e009      	b.n	800165e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff fa37 	bl	8000abc <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	4a46      	ldr	r2, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x694>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0b4      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d1ef      	bne.n	800164a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800166a:	2323      	movs	r3, #35	; 0x23
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800167a:	493e      	ldr	r1, [pc, #248]	; (8001774 <HAL_RCC_OscConfig+0x698>)
 800167c:	400a      	ands	r2, r1
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2b00      	cmp	r3, #0
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x5ae>
 8001688:	e09d      	b.n	80017c6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	2b0c      	cmp	r3, #12
 800168e:	d100      	bne.n	8001692 <HAL_RCC_OscConfig+0x5b6>
 8001690:	e076      	b.n	8001780 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	2b02      	cmp	r3, #2
 8001698:	d145      	bne.n	8001726 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80016a0:	4935      	ldr	r1, [pc, #212]	; (8001778 <HAL_RCC_OscConfig+0x69c>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fa09 	bl	8000abc <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fa04 	bl	8000abc <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e082      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	049b      	lsls	r3, r3, #18
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	4a2a      	ldr	r2, [pc, #168]	; (800177c <HAL_RCC_OscConfig+0x6a0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	431a      	orrs	r2, r3
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	0449      	lsls	r1, r1, #17
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff f9de 	bl	8000abc <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff f9d9 	bl	8000abc <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e057      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	049b      	lsls	r3, r3, #18
 8001720:	4013      	ands	r3, r2
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x62a>
 8001724:	e04f      	b.n	80017c6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800172c:	4912      	ldr	r1, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x69c>)
 800172e:	400a      	ands	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f9c3 	bl	8000abc <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff f9be 	bl	8000abc <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e03c      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_RCC_OscConfig+0x680>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x660>
 800175a:	e034      	b.n	80017c6 <HAL_RCC_OscConfig+0x6ea>
 800175c:	40021000 	.word	0x40021000
 8001760:	ffff1fff 	.word	0xffff1fff
 8001764:	fffffeff 	.word	0xfffffeff
 8001768:	40007000 	.word	0x40007000
 800176c:	fffffbff 	.word	0xfffffbff
 8001770:	00001388 	.word	0x00001388
 8001774:	efffffff 	.word	0xefffffff
 8001778:	feffffff 	.word	0xfeffffff
 800177c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x6f4>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	401a      	ands	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	429a      	cmp	r2, r3
 80017a0:	d10f      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	23f0      	movs	r3, #240	; 0xf0
 80017a6:	039b      	lsls	r3, r3, #14
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	23c0      	movs	r3, #192	; 0xc0
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b00a      	add	sp, #40	; 0x28
 80017ce:	bdb0      	pop	{r4, r5, r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e128      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b96      	ldr	r3, [pc, #600]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d91e      	bls.n	8001834 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b93      	ldr	r3, [pc, #588]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	4b90      	ldr	r3, [pc, #576]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001808:	f7ff f958 	bl	8000abc <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	e009      	b.n	8001826 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001812:	f7ff f953 	bl	8000abc <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4a8a      	ldr	r2, [pc, #552]	; (8001a48 <HAL_RCC_ClockConfig+0x274>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e109      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b87      	ldr	r3, [pc, #540]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	4013      	ands	r3, r2
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d1ee      	bne.n	8001812 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2202      	movs	r2, #2
 800183a:	4013      	ands	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183e:	4b83      	ldr	r3, [pc, #524]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	22f0      	movs	r2, #240	; 0xf0
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b7f      	ldr	r3, [pc, #508]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 800184e:	430a      	orrs	r2, r1
 8001850:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d100      	bne.n	800185e <HAL_RCC_ClockConfig+0x8a>
 800185c:	e089      	b.n	8001972 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001866:	4b79      	ldr	r3, [pc, #484]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	029b      	lsls	r3, r3, #10
 800186e:	4013      	ands	r3, r2
 8001870:	d120      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0e1      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800187e:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	4013      	ands	r3, r2
 8001888:	d114      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0d5      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2204      	movs	r2, #4
 800189c:	4013      	ands	r3, r2
 800189e:	d109      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0ca      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018a4:	4b69      	ldr	r3, [pc, #420]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0c2      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b4:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c8:	f7ff f8f8 	bl	8000abc <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d111      	bne.n	80018fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d8:	e009      	b.n	80018ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018da:	f7ff f8ef 	bl	8000abc <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x274>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0a5      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	220c      	movs	r2, #12
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d1ef      	bne.n	80018da <HAL_RCC_ClockConfig+0x106>
 80018fa:	e03a      	b.n	8001972 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d111      	bne.n	8001928 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001904:	e009      	b.n	800191a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7ff f8d9 	bl	8000abc <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x274>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e08f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191a:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	220c      	movs	r2, #12
 8001920:	4013      	ands	r3, r2
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d1ef      	bne.n	8001906 <HAL_RCC_ClockConfig+0x132>
 8001926:	e024      	b.n	8001972 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d11b      	bne.n	8001968 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001930:	e009      	b.n	8001946 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001932:	f7ff f8c3 	bl	8000abc <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <HAL_RCC_ClockConfig+0x274>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e079      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	220c      	movs	r2, #12
 800194c:	4013      	ands	r3, r2
 800194e:	2b04      	cmp	r3, #4
 8001950:	d1ef      	bne.n	8001932 <HAL_RCC_ClockConfig+0x15e>
 8001952:	e00e      	b.n	8001972 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff f8b2 	bl	8000abc <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <HAL_RCC_ClockConfig+0x274>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e068      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	220c      	movs	r2, #12
 800196e:	4013      	ands	r3, r2
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d21e      	bcs.n	80019be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001992:	f7ff f893 	bl	8000abc <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	e009      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff f88e 	bl	8000abc <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <HAL_RCC_ClockConfig+0x274>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e044      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_ClockConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d1ee      	bne.n	800199c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <HAL_RCC_ClockConfig+0x27c>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2208      	movs	r2, #8
 80019e2:	4013      	ands	r3, r2
 80019e4:	d00a      	beq.n	80019fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	0019      	movs	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00da      	lsls	r2, r3, #3
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fc:	f000 f832 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a00:	0001      	movs	r1, r0
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	220f      	movs	r2, #15
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x284>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	000a      	movs	r2, r1
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_ClockConfig+0x288>)
 8001a16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_RCC_ClockConfig+0x28c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	250b      	movs	r5, #11
 8001a1e:	197c      	adds	r4, r7, r5
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff f805 	bl	8000a30 <HAL_InitTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a2a:	197b      	adds	r3, r7, r5
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a32:	197b      	adds	r3, r7, r5
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b004      	add	sp, #16
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40022000 	.word	0x40022000
 8001a48:	00001388 	.word	0x00001388
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	fffff8ff 	.word	0xfffff8ff
 8001a54:	ffffc7ff 	.word	0xffffc7ff
 8001a58:	08002db8 	.word	0x08002db8
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	b5b0      	push	{r4, r5, r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a72:	230c      	movs	r3, #12
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d014      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7a:	d900      	bls.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1a>
 8001a7c:	e07b      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x112>
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x24>
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d00b      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e076      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a88:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a96:	e07c      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a9c:	e079      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a9e:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa2:	e076      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	0c9a      	lsrs	r2, r3, #18
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	401a      	ands	r2, r3
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCC_GetSysClockFreq+0x148>)
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	0d9a      	lsrs	r2, r3, #22
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	3301      	adds	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001abe:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	025b      	lsls	r3, r3, #9
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d01a      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	69b8      	ldr	r0, [r7, #24]
 8001ad8:	69f9      	ldr	r1, [r7, #28]
 8001ada:	f7fe fbc1 	bl	8000260 <__aeabi_lmul>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f7fe fb95 	bl	8000220 <__aeabi_uldivmod>
 8001af6:	0002      	movs	r2, r0
 8001af8:	000b      	movs	r3, r1
 8001afa:	0013      	movs	r3, r2
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
 8001afe:	e037      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2210      	movs	r2, #16
 8001b06:	4013      	ands	r3, r2
 8001b08:	d01a      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b14:	2300      	movs	r3, #0
 8001b16:	68b8      	ldr	r0, [r7, #8]
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	f7fe fba1 	bl	8000260 <__aeabi_lmul>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	000b      	movs	r3, r1
 8001b22:	0010      	movs	r0, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f7fe fb75 	bl	8000220 <__aeabi_uldivmod>
 8001b36:	0002      	movs	r2, r0
 8001b38:	000b      	movs	r3, r1
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3e:	e017      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	0018      	movs	r0, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	0019      	movs	r1, r3
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f7fe fb88 	bl	8000260 <__aeabi_lmul>
 8001b50:	0002      	movs	r2, r0
 8001b52:	000b      	movs	r3, r1
 8001b54:	0010      	movs	r0, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	001c      	movs	r4, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	001d      	movs	r5, r3
 8001b60:	0022      	movs	r2, r4
 8001b62:	002b      	movs	r3, r5
 8001b64:	f7fe fb5c 	bl	8000220 <__aeabi_uldivmod>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	000b      	movs	r3, r1
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b74:	e00d      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0b5b      	lsrs	r3, r3, #13
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4013      	ands	r3, r2
 8001b80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	3301      	adds	r3, #1
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	0212      	lsls	r2, r2, #8
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b90:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b00e      	add	sp, #56	; 0x38
 8001b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	003d0900 	.word	0x003d0900
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	007a1200 	.word	0x007a1200
 8001bac:	08002dd0 	.word	0x08002dd0

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc8:	f7ff fff2 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bcc:	0001      	movs	r1, r0
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	40d9      	lsrs	r1, r3
 8001bde:	000b      	movs	r3, r1
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08002dc8 	.word	0x08002dc8

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffdc 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bf8:	0001      	movs	r1, r0
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	0adb      	lsrs	r3, r3, #11
 8001c00:	2207      	movs	r2, #7
 8001c02:	4013      	ands	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	40d9      	lsrs	r1, r3
 8001c0a:	000b      	movs	r3, r1
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08002dc8 	.word	0x08002dc8

08001c1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c24:	2017      	movs	r0, #23
 8001c26:	183b      	adds	r3, r7, r0
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2220      	movs	r2, #32
 8001c32:	4013      	ands	r3, r2
 8001c34:	d100      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001c36:	e0c2      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c38:	4b81      	ldr	r3, [pc, #516]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	4013      	ands	r3, r2
 8001c42:	d109      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b7e      	ldr	r3, [pc, #504]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c48:	4b7d      	ldr	r3, [pc, #500]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	0549      	lsls	r1, r1, #21
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4013      	ands	r3, r2
 8001c62:	d11a      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c64:	4b77      	ldr	r3, [pc, #476]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0049      	lsls	r1, r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7fe ff23 	bl	8000abc <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7a:	e008      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7c:	f7fe ff1e 	bl	8000abc <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0d4      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c9a:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	23c0      	movs	r3, #192	; 0xc0
 8001ca0:	039b      	lsls	r3, r3, #14
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	23c0      	movs	r3, #192	; 0xc0
 8001cac:	039b      	lsls	r3, r3, #14
 8001cae:	4013      	ands	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d013      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	029b      	lsls	r3, r3, #10
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10a      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001cc8:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d101      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0ac      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001cde:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce2:	23c0      	movs	r3, #192	; 0xc0
 8001ce4:	029b      	lsls	r3, r3, #10
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d03b      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	23c0      	movs	r3, #192	; 0xc0
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d033      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2220      	movs	r2, #32
 8001d06:	4013      	ands	r3, r2
 8001d08:	d02e      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0e:	4a4e      	ldr	r2, [pc, #312]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d14:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d18:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	0309      	lsls	r1, r1, #12
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d28:	4948      	ldr	r1, [pc, #288]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d014      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7fe febd 	bl	8000abc <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d46:	e009      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7fe feb8 	bl	8000abc <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	4a3f      	ldr	r2, [pc, #252]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e06d      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0ef      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	401a      	ands	r2, r3
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a35      	ldr	r2, [pc, #212]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	039b      	lsls	r3, r3, #14
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d96:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	401a      	ands	r2, r3
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001da4:	430a      	orrs	r2, r1
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001da8:	2317      	movs	r3, #23
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001db8:	4927      	ldr	r1, [pc, #156]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	220c      	movs	r2, #12
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2204      	movs	r2, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2208      	movs	r2, #8
 8001e00:	4013      	ands	r3, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b006      	add	sp, #24
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
 8001e48:	fffcffff 	.word	0xfffcffff
 8001e4c:	fff7ffff 	.word	0xfff7ffff
 8001e50:	00001388 	.word	0x00001388
 8001e54:	ffcfffff 	.word	0xffcfffff
 8001e58:	efffffff 	.word	0xefffffff
 8001e5c:	fffff3ff 	.word	0xfffff3ff
 8001e60:	ffffcfff 	.word	0xffffcfff
 8001e64:	fff3ffff 	.word	0xfff3ffff

08001e68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e08e      	b.n	8001f98 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2221      	movs	r2, #33	; 0x21
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7fe fd21 	bl	80008d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2221      	movs	r2, #33	; 0x21
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	22ca      	movs	r2, #202	; 0xca
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2253      	movs	r2, #83	; 0x53
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f89e 	bl	8001ff2 <RTC_EnterInitMode>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	22ff      	movs	r2, #255	; 0xff
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2221      	movs	r2, #33	; 0x21
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e064      	b.n	8001f98 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4931      	ldr	r1, [pc, #196]	; (8001fa0 <HAL_RTC_Init+0x138>)
 8001eda:	400a      	ands	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68d2      	ldr	r2, [r2, #12]
 8001f04:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6919      	ldr	r1, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	438a      	bics	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2103      	movs	r1, #3
 8001f36:	438a      	bics	r2, r1
 8001f38:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d113      	bne.n	8001f86 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f81f 	bl	8001fa4 <HAL_RTC_WaitForSynchro>
 8001f66:	1e03      	subs	r3, r0, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	22ff      	movs	r2, #255	; 0xff
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2221      	movs	r2, #33	; 0x21
 8001f76:	2104      	movs	r1, #4
 8001f78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e008      	b.n	8001f98 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	22ff      	movs	r2, #255	; 0xff
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2221      	movs	r2, #33	; 0x21
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f96:	2300      	movs	r3, #0
  }
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	ff8fffbf 	.word	0xff8fffbf

08001fa4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	21a0      	movs	r1, #160	; 0xa0
 8001fb8:	438a      	bics	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001fbc:	f7fe fd7e 	bl	8000abc <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fc6:	f7fe fd79 	bl	8000abc <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1ad2      	subs	r2, r2, r3
 8001fd0:	23fa      	movs	r3, #250	; 0xfa
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d901      	bls.n	8001fdc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e006      	b.n	8001fea <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b004      	add	sp, #16
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2240      	movs	r2, #64	; 0x40
 8002002:	4013      	ands	r3, r2
 8002004:	d11a      	bne.n	800203c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	4252      	negs	r2, r2
 800200e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002010:	f7fe fd54 	bl	8000abc <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002018:	e00a      	b.n	8002030 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800201a:	f7fe fd4f 	bl	8000abc <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad2      	subs	r2, r2, r3
 8002024:	23fa      	movs	r3, #250	; 0xfa
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d901      	bls.n	8002030 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e006      	b.n	800203e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	4013      	ands	r3, r2
 800203a:	d0ee      	beq.n	800201a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b004      	add	sp, #16
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800205e:	2302      	movs	r3, #2
 8002060:	e0ad      	b.n	80021be <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2221      	movs	r2, #33	; 0x21
 800206e:	2102      	movs	r1, #2
 8002070:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22ca      	movs	r2, #202	; 0xca
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2253      	movs	r2, #83	; 0x53
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4013      	ands	r3, r2
 800208e:	d021      	beq.n	80020d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8002090:	f7fe fd14 	bl	8000abc <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002098:	e016      	b.n	80020c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800209a:	f7fe fd0f 	bl	8000abc <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	23fa      	movs	r3, #250	; 0xfa
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d90d      	bls.n	80020c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	22ff      	movs	r2, #255	; 0xff
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2221      	movs	r2, #33	; 0x21
 80020b8:	2103      	movs	r1, #3
 80020ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e07a      	b.n	80021be <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2204      	movs	r2, #4
 80020d0:	4013      	ands	r3, r2
 80020d2:	d1e2      	bne.n	800209a <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	493a      	ldr	r1, [pc, #232]	; (80021c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	22ff      	movs	r2, #255	; 0xff
 80020ec:	401a      	ands	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4936      	ldr	r1, [pc, #216]	; (80021cc <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80020f8:	f7fe fce0 	bl	8000abc <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002100:	e016      	b.n	8002130 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002102:	f7fe fcdb 	bl	8000abc <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	1ad2      	subs	r2, r2, r3
 800210c:	23fa      	movs	r3, #250	; 0xfa
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d90d      	bls.n	8002130 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	22ff      	movs	r2, #255	; 0xff
 800211a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2221      	movs	r2, #33	; 0x21
 8002120:	2103      	movs	r1, #3
 8002122:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	2100      	movs	r1, #0
 800212a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e046      	b.n	80021be <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2204      	movs	r2, #4
 8002138:	4013      	ands	r3, r2
 800213a:	d0e2      	beq.n	8002102 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2107      	movs	r1, #7
 8002150:	438a      	bics	r2, r1
 8002152:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	430a      	orrs	r2, r1
 8002162:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0349      	lsls	r1, r1, #13
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002178:	2180      	movs	r1, #128	; 0x80
 800217a:	0349      	lsls	r1, r1, #13
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	01c9      	lsls	r1, r1, #7
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	00c9      	lsls	r1, r1, #3
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	22ff      	movs	r2, #255	; 0xff
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b006      	add	sp, #24
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	fffffbff 	.word	0xfffffbff
 80021cc:	fffffb7f 	.word	0xfffffb7f
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	5c9b      	ldrb	r3, [r3, r2]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e04e      	b.n	8002288 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	2102      	movs	r1, #2
 80021f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	22ca      	movs	r2, #202	; 0xca
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2253      	movs	r2, #83	; 0x53
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	491e      	ldr	r1, [pc, #120]	; (8002290 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8002216:	400a      	ands	r2, r1
 8002218:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	491b      	ldr	r1, [pc, #108]	; (8002294 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8002226:	400a      	ands	r2, r1
 8002228:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800222a:	f7fe fc47 	bl	8000abc <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002232:	e016      	b.n	8002262 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002234:	f7fe fc42 	bl	8000abc <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	23fa      	movs	r3, #250	; 0xfa
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	429a      	cmp	r2, r3
 8002244:	d90d      	bls.n	8002262 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	22ff      	movs	r2, #255	; 0xff
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2221      	movs	r2, #33	; 0x21
 8002252:	2103      	movs	r1, #3
 8002254:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2220      	movs	r2, #32
 800225a:	2100      	movs	r1, #0
 800225c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e012      	b.n	8002288 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2204      	movs	r2, #4
 800226a:	4013      	ands	r3, r2
 800226c:	d0e2      	beq.n	8002234 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	22ff      	movs	r2, #255	; 0xff
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}
 8002290:	fffffbff 	.word	0xfffffbff
 8002294:	ffffbfff 	.word	0xffffbfff

08002298 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4013      	ands	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 f81b 	bl	80022ec <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	22ff      	movs	r2, #255	; 0xff
 80022be:	401a      	ands	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	0352      	lsls	r2, r2, #13
 80022d0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2221      	movs	r2, #33	; 0x21
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	fffffb7f 	.word	0xfffffb7f
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e044      	b.n	8002398 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2274      	movs	r2, #116	; 0x74
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0018      	movs	r0, r3
 8002322:	f7fe fa71 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2224      	movs	r2, #36	; 0x24
 800232a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2101      	movs	r1, #1
 8002338:	438a      	bics	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f8d8 	bl	80024f4 <UART_SetConfig>
 8002344:	0003      	movs	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e024      	b.n	8002398 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f000 fb2d 	bl	80029b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	490d      	ldr	r1, [pc, #52]	; (80023a0 <HAL_UART_Init+0xa4>)
 800236a:	400a      	ands	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	212a      	movs	r1, #42	; 0x2a
 800237a:	438a      	bics	r2, r1
 800237c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fbc5 	bl	8002b20 <UART_CheckIdleState>
 8002396:	0003      	movs	r3, r0
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	ffffb7ff 	.word	0xffffb7ff

080023a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	1dbb      	adds	r3, r7, #6
 80023b2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d000      	beq.n	80023be <HAL_UART_Transmit+0x1a>
 80023bc:	e095      	b.n	80024ea <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_UART_Transmit+0x28>
 80023c4:	1dbb      	adds	r3, r7, #6
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e08d      	b.n	80024ec <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	429a      	cmp	r2, r3
 80023da:	d109      	bne.n	80023f0 <HAL_UART_Transmit+0x4c>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4013      	ands	r3, r2
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e07d      	b.n	80024ec <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2274      	movs	r2, #116	; 0x74
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Transmit+0x5a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e076      	b.n	80024ec <HAL_UART_Transmit+0x148>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2274      	movs	r2, #116	; 0x74
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	2100      	movs	r1, #0
 800240c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	; 0x21
 8002412:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002414:	f7fe fb52 	bl	8000abc <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1dba      	adds	r2, r7, #6
 8002420:	2150      	movs	r1, #80	; 0x50
 8002422:	8812      	ldrh	r2, [r2, #0]
 8002424:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1dba      	adds	r2, r7, #6
 800242a:	2152      	movs	r1, #82	; 0x52
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	015b      	lsls	r3, r3, #5
 8002438:	429a      	cmp	r2, r3
 800243a:	d108      	bne.n	800244e <HAL_UART_Transmit+0xaa>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	e003      	b.n	8002456 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2274      	movs	r2, #116	; 0x74
 800245a:	2100      	movs	r1, #0
 800245c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800245e:	e02c      	b.n	80024ba <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	0013      	movs	r3, r2
 800246a:	2200      	movs	r2, #0
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	f000 fb9f 	bl	8002bb0 <UART_WaitOnFlagUntilTimeout>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e038      	b.n	80024ec <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	001a      	movs	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	05d2      	lsls	r2, r2, #23
 800248c:	0dd2      	lsrs	r2, r2, #23
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3302      	adds	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e007      	b.n	80024a8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2252      	movs	r2, #82	; 0x52
 80024ac:	5a9b      	ldrh	r3, [r3, r2]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b299      	uxth	r1, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2252      	movs	r2, #82	; 0x52
 80024b8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2252      	movs	r2, #82	; 0x52
 80024be:	5a9b      	ldrh	r3, [r3, r2]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1cc      	bne.n	8002460 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	0013      	movs	r3, r2
 80024d0:	2200      	movs	r2, #0
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	f000 fb6c 	bl	8002bb0 <UART_WaitOnFlagUntilTimeout>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e005      	b.n	80024ec <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
  }
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b008      	add	sp, #32
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b08e      	sub	sp, #56	; 0x38
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024fc:	231a      	movs	r3, #26
 80024fe:	2218      	movs	r2, #24
 8002500:	4694      	mov	ip, r2
 8002502:	44bc      	add	ip, r7
 8002504:	4463      	add	r3, ip
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	431a      	orrs	r2, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	431a      	orrs	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4313      	orrs	r3, r2
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4abc      	ldr	r2, [pc, #752]	; (800281c <UART_SetConfig+0x328>)
 800252a:	4013      	ands	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4ab8      	ldr	r2, [pc, #736]	; (8002820 <UART_SetConfig+0x32c>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4ab2      	ldr	r2, [pc, #712]	; (8002824 <UART_SetConfig+0x330>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002566:	4313      	orrs	r3, r2
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4aad      	ldr	r2, [pc, #692]	; (8002828 <UART_SetConfig+0x334>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4aa9      	ldr	r2, [pc, #676]	; (800282c <UART_SetConfig+0x338>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d136      	bne.n	80025f8 <UART_SetConfig+0x104>
 800258a:	4ba9      	ldr	r3, [pc, #676]	; (8002830 <UART_SetConfig+0x33c>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	220c      	movs	r2, #12
 8002590:	4013      	ands	r3, r2
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d020      	beq.n	80025d8 <UART_SetConfig+0xe4>
 8002596:	d827      	bhi.n	80025e8 <UART_SetConfig+0xf4>
 8002598:	2b08      	cmp	r3, #8
 800259a:	d00d      	beq.n	80025b8 <UART_SetConfig+0xc4>
 800259c:	d824      	bhi.n	80025e8 <UART_SetConfig+0xf4>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <UART_SetConfig+0xb4>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d010      	beq.n	80025c8 <UART_SetConfig+0xd4>
 80025a6:	e01f      	b.n	80025e8 <UART_SetConfig+0xf4>
 80025a8:	231b      	movs	r3, #27
 80025aa:	2218      	movs	r2, #24
 80025ac:	4694      	mov	ip, r2
 80025ae:	44bc      	add	ip, r7
 80025b0:	4463      	add	r3, ip
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e06f      	b.n	8002698 <UART_SetConfig+0x1a4>
 80025b8:	231b      	movs	r3, #27
 80025ba:	2218      	movs	r2, #24
 80025bc:	4694      	mov	ip, r2
 80025be:	44bc      	add	ip, r7
 80025c0:	4463      	add	r3, ip
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e067      	b.n	8002698 <UART_SetConfig+0x1a4>
 80025c8:	231b      	movs	r3, #27
 80025ca:	2218      	movs	r2, #24
 80025cc:	4694      	mov	ip, r2
 80025ce:	44bc      	add	ip, r7
 80025d0:	4463      	add	r3, ip
 80025d2:	2204      	movs	r2, #4
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e05f      	b.n	8002698 <UART_SetConfig+0x1a4>
 80025d8:	231b      	movs	r3, #27
 80025da:	2218      	movs	r2, #24
 80025dc:	4694      	mov	ip, r2
 80025de:	44bc      	add	ip, r7
 80025e0:	4463      	add	r3, ip
 80025e2:	2208      	movs	r2, #8
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e057      	b.n	8002698 <UART_SetConfig+0x1a4>
 80025e8:	231b      	movs	r3, #27
 80025ea:	2218      	movs	r2, #24
 80025ec:	4694      	mov	ip, r2
 80025ee:	44bc      	add	ip, r7
 80025f0:	4463      	add	r3, ip
 80025f2:	2210      	movs	r2, #16
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e04f      	b.n	8002698 <UART_SetConfig+0x1a4>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a89      	ldr	r2, [pc, #548]	; (8002824 <UART_SetConfig+0x330>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d143      	bne.n	800268a <UART_SetConfig+0x196>
 8002602:	4b8b      	ldr	r3, [pc, #556]	; (8002830 <UART_SetConfig+0x33c>)
 8002604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002606:	23c0      	movs	r3, #192	; 0xc0
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	4013      	ands	r3, r2
 800260c:	22c0      	movs	r2, #192	; 0xc0
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	4293      	cmp	r3, r2
 8002612:	d02a      	beq.n	800266a <UART_SetConfig+0x176>
 8002614:	22c0      	movs	r2, #192	; 0xc0
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	4293      	cmp	r3, r2
 800261a:	d82e      	bhi.n	800267a <UART_SetConfig+0x186>
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	4293      	cmp	r3, r2
 8002622:	d012      	beq.n	800264a <UART_SetConfig+0x156>
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	4293      	cmp	r3, r2
 800262a:	d826      	bhi.n	800267a <UART_SetConfig+0x186>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <UART_SetConfig+0x146>
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	00d2      	lsls	r2, r2, #3
 8002634:	4293      	cmp	r3, r2
 8002636:	d010      	beq.n	800265a <UART_SetConfig+0x166>
 8002638:	e01f      	b.n	800267a <UART_SetConfig+0x186>
 800263a:	231b      	movs	r3, #27
 800263c:	2218      	movs	r2, #24
 800263e:	4694      	mov	ip, r2
 8002640:	44bc      	add	ip, r7
 8002642:	4463      	add	r3, ip
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e026      	b.n	8002698 <UART_SetConfig+0x1a4>
 800264a:	231b      	movs	r3, #27
 800264c:	2218      	movs	r2, #24
 800264e:	4694      	mov	ip, r2
 8002650:	44bc      	add	ip, r7
 8002652:	4463      	add	r3, ip
 8002654:	2202      	movs	r2, #2
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e01e      	b.n	8002698 <UART_SetConfig+0x1a4>
 800265a:	231b      	movs	r3, #27
 800265c:	2218      	movs	r2, #24
 800265e:	4694      	mov	ip, r2
 8002660:	44bc      	add	ip, r7
 8002662:	4463      	add	r3, ip
 8002664:	2204      	movs	r2, #4
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e016      	b.n	8002698 <UART_SetConfig+0x1a4>
 800266a:	231b      	movs	r3, #27
 800266c:	2218      	movs	r2, #24
 800266e:	4694      	mov	ip, r2
 8002670:	44bc      	add	ip, r7
 8002672:	4463      	add	r3, ip
 8002674:	2208      	movs	r2, #8
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e00e      	b.n	8002698 <UART_SetConfig+0x1a4>
 800267a:	231b      	movs	r3, #27
 800267c:	2218      	movs	r2, #24
 800267e:	4694      	mov	ip, r2
 8002680:	44bc      	add	ip, r7
 8002682:	4463      	add	r3, ip
 8002684:	2210      	movs	r2, #16
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e006      	b.n	8002698 <UART_SetConfig+0x1a4>
 800268a:	231b      	movs	r3, #27
 800268c:	2218      	movs	r2, #24
 800268e:	4694      	mov	ip, r2
 8002690:	44bc      	add	ip, r7
 8002692:	4463      	add	r3, ip
 8002694:	2210      	movs	r2, #16
 8002696:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a61      	ldr	r2, [pc, #388]	; (8002824 <UART_SetConfig+0x330>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d000      	beq.n	80026a4 <UART_SetConfig+0x1b0>
 80026a2:	e088      	b.n	80027b6 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026a4:	231b      	movs	r3, #27
 80026a6:	2218      	movs	r2, #24
 80026a8:	4694      	mov	ip, r2
 80026aa:	44bc      	add	ip, r7
 80026ac:	4463      	add	r3, ip
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d01d      	beq.n	80026f0 <UART_SetConfig+0x1fc>
 80026b4:	dc20      	bgt.n	80026f8 <UART_SetConfig+0x204>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d015      	beq.n	80026e6 <UART_SetConfig+0x1f2>
 80026ba:	dc1d      	bgt.n	80026f8 <UART_SetConfig+0x204>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <UART_SetConfig+0x1d2>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d005      	beq.n	80026d0 <UART_SetConfig+0x1dc>
 80026c4:	e018      	b.n	80026f8 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c6:	f7ff fa7d 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 80026ca:	0003      	movs	r3, r0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ce:	e01d      	b.n	800270c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d0:	4b57      	ldr	r3, [pc, #348]	; (8002830 <UART_SetConfig+0x33c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2210      	movs	r2, #16
 80026d6:	4013      	ands	r3, r2
 80026d8:	d002      	beq.n	80026e0 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026da:	4b56      	ldr	r3, [pc, #344]	; (8002834 <UART_SetConfig+0x340>)
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026de:	e015      	b.n	800270c <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80026e0:	4b55      	ldr	r3, [pc, #340]	; (8002838 <UART_SetConfig+0x344>)
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026e4:	e012      	b.n	800270c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026e6:	f7ff f9bd 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 80026ea:	0003      	movs	r3, r0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ee:	e00d      	b.n	800270c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026f6:	e009      	b.n	800270c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80026fc:	231a      	movs	r3, #26
 80026fe:	2218      	movs	r2, #24
 8002700:	4694      	mov	ip, r2
 8002702:	44bc      	add	ip, r7
 8002704:	4463      	add	r3, ip
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
        break;
 800270a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d100      	bne.n	8002714 <UART_SetConfig+0x220>
 8002712:	e139      	b.n	8002988 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	0013      	movs	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	189b      	adds	r3, r3, r2
 800271e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002720:	429a      	cmp	r2, r3
 8002722:	d305      	bcc.n	8002730 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800272a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272c:	429a      	cmp	r2, r3
 800272e:	d907      	bls.n	8002740 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002730:	231a      	movs	r3, #26
 8002732:	2218      	movs	r2, #24
 8002734:	4694      	mov	ip, r2
 8002736:	44bc      	add	ip, r7
 8002738:	4463      	add	r3, ip
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e123      	b.n	8002988 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	6939      	ldr	r1, [r7, #16]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	000b      	movs	r3, r1
 800274e:	0e1b      	lsrs	r3, r3, #24
 8002750:	0010      	movs	r0, r2
 8002752:	0205      	lsls	r5, r0, #8
 8002754:	431d      	orrs	r5, r3
 8002756:	000b      	movs	r3, r1
 8002758:	021c      	lsls	r4, r3, #8
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	1900      	adds	r0, r0, r4
 800276c:	4169      	adcs	r1, r5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f7fd fd50 	bl	8000220 <__aeabi_uldivmod>
 8002780:	0002      	movs	r2, r0
 8002782:	000b      	movs	r3, r1
 8002784:	0013      	movs	r3, r2
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800278a:	23c0      	movs	r3, #192	; 0xc0
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	429a      	cmp	r2, r3
 8002790:	d309      	bcc.n	80027a6 <UART_SetConfig+0x2b2>
 8002792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	035b      	lsls	r3, r3, #13
 8002798:	429a      	cmp	r2, r3
 800279a:	d204      	bcs.n	80027a6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	e0f0      	b.n	8002988 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80027a6:	231a      	movs	r3, #26
 80027a8:	2218      	movs	r2, #24
 80027aa:	4694      	mov	ip, r2
 80027ac:	44bc      	add	ip, r7
 80027ae:	4463      	add	r3, ip
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e0e8      	b.n	8002988 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	429a      	cmp	r2, r3
 80027c0:	d000      	beq.n	80027c4 <UART_SetConfig+0x2d0>
 80027c2:	e087      	b.n	80028d4 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80027c4:	231b      	movs	r3, #27
 80027c6:	2218      	movs	r2, #24
 80027c8:	4694      	mov	ip, r2
 80027ca:	44bc      	add	ip, r7
 80027cc:	4463      	add	r3, ip
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d835      	bhi.n	8002840 <UART_SetConfig+0x34c>
 80027d4:	009a      	lsls	r2, r3, #2
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <UART_SetConfig+0x348>)
 80027d8:	18d3      	adds	r3, r2, r3
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027de:	f7ff f9f1 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 80027e2:	0003      	movs	r3, r0
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027e6:	e035      	b.n	8002854 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff fa02 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 80027ec:	0003      	movs	r3, r0
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027f0:	e030      	b.n	8002854 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <UART_SetConfig+0x33c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2210      	movs	r2, #16
 80027f8:	4013      	ands	r3, r2
 80027fa:	d002      	beq.n	8002802 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <UART_SetConfig+0x340>)
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002800:	e028      	b.n	8002854 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <UART_SetConfig+0x344>)
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002806:	e025      	b.n	8002854 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002808:	f7ff f92c 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 800280c:	0003      	movs	r3, r0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002810:	e020      	b.n	8002854 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002818:	e01c      	b.n	8002854 <UART_SetConfig+0x360>
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	efff69f3 	.word	0xefff69f3
 8002820:	ffffcfff 	.word	0xffffcfff
 8002824:	40004800 	.word	0x40004800
 8002828:	fffff4ff 	.word	0xfffff4ff
 800282c:	40004400 	.word	0x40004400
 8002830:	40021000 	.word	0x40021000
 8002834:	003d0900 	.word	0x003d0900
 8002838:	00f42400 	.word	0x00f42400
 800283c:	08002ddc 	.word	0x08002ddc
      default:
        pclk = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002844:	231a      	movs	r3, #26
 8002846:	2218      	movs	r2, #24
 8002848:	4694      	mov	ip, r2
 800284a:	44bc      	add	ip, r7
 800284c:	4463      	add	r3, ip
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
        break;
 8002852:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d100      	bne.n	800285c <UART_SetConfig+0x368>
 800285a:	e095      	b.n	8002988 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	005a      	lsls	r2, r3, #1
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	18d2      	adds	r2, r2, r3
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0019      	movs	r1, r3
 800286e:	0010      	movs	r0, r2
 8002870:	f7fd fc4a 	bl	8000108 <__udivsi3>
 8002874:	0003      	movs	r3, r0
 8002876:	b29b      	uxth	r3, r3
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d921      	bls.n	80028c4 <UART_SetConfig+0x3d0>
 8002880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	429a      	cmp	r2, r3
 8002888:	d21c      	bcs.n	80028c4 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	b29a      	uxth	r2, r3
 800288e:	200e      	movs	r0, #14
 8002890:	2418      	movs	r4, #24
 8002892:	193b      	adds	r3, r7, r4
 8002894:	181b      	adds	r3, r3, r0
 8002896:	210f      	movs	r1, #15
 8002898:	438a      	bics	r2, r1
 800289a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2207      	movs	r2, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	b299      	uxth	r1, r3
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	181b      	adds	r3, r3, r0
 80028ac:	193a      	adds	r2, r7, r4
 80028ae:	1812      	adds	r2, r2, r0
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	193a      	adds	r2, r7, r4
 80028bc:	1812      	adds	r2, r2, r0
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	e061      	b.n	8002988 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80028c4:	231a      	movs	r3, #26
 80028c6:	2218      	movs	r2, #24
 80028c8:	4694      	mov	ip, r2
 80028ca:	44bc      	add	ip, r7
 80028cc:	4463      	add	r3, ip
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e059      	b.n	8002988 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028d4:	231b      	movs	r3, #27
 80028d6:	2218      	movs	r2, #24
 80028d8:	4694      	mov	ip, r2
 80028da:	44bc      	add	ip, r7
 80028dc:	4463      	add	r3, ip
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d822      	bhi.n	800292a <UART_SetConfig+0x436>
 80028e4:	009a      	lsls	r2, r3, #2
 80028e6:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <UART_SetConfig+0x4b4>)
 80028e8:	18d3      	adds	r3, r2, r3
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ee:	f7ff f969 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 80028f2:	0003      	movs	r3, r0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028f6:	e022      	b.n	800293e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028f8:	f7ff f97a 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 80028fc:	0003      	movs	r3, r0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002900:	e01d      	b.n	800293e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <UART_SetConfig+0x4b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2210      	movs	r2, #16
 8002908:	4013      	ands	r3, r2
 800290a:	d002      	beq.n	8002912 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <UART_SetConfig+0x4bc>)
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002910:	e015      	b.n	800293e <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <UART_SetConfig+0x4c0>)
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002916:	e012      	b.n	800293e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002918:	f7ff f8a4 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 800291c:	0003      	movs	r3, r0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002920:	e00d      	b.n	800293e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002928:	e009      	b.n	800293e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800292e:	231a      	movs	r3, #26
 8002930:	2218      	movs	r2, #24
 8002932:	4694      	mov	ip, r2
 8002934:	44bc      	add	ip, r7
 8002936:	4463      	add	r3, ip
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
        break;
 800293c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d021      	beq.n	8002988 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	085a      	lsrs	r2, r3, #1
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	18d2      	adds	r2, r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0019      	movs	r1, r3
 8002954:	0010      	movs	r0, r2
 8002956:	f7fd fbd7 	bl	8000108 <__udivsi3>
 800295a:	0003      	movs	r3, r0
 800295c:	b29b      	uxth	r3, r3
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	2b0f      	cmp	r3, #15
 8002964:	d909      	bls.n	800297a <UART_SetConfig+0x486>
 8002966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	025b      	lsls	r3, r3, #9
 800296c:	429a      	cmp	r2, r3
 800296e:	d204      	bcs.n	800297a <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	e006      	b.n	8002988 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800297a:	231a      	movs	r3, #26
 800297c:	2218      	movs	r2, #24
 800297e:	4694      	mov	ip, r2
 8002980:	44bc      	add	ip, r7
 8002982:	4463      	add	r3, ip
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2200      	movs	r2, #0
 800298c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	2200      	movs	r2, #0
 8002992:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002994:	231a      	movs	r3, #26
 8002996:	2218      	movs	r2, #24
 8002998:	4694      	mov	ip, r2
 800299a:	44bc      	add	ip, r7
 800299c:	4463      	add	r3, ip
 800299e:	781b      	ldrb	r3, [r3, #0]
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b00e      	add	sp, #56	; 0x38
 80029a6:	bdb0      	pop	{r4, r5, r7, pc}
 80029a8:	08002e00 	.word	0x08002e00
 80029ac:	40021000 	.word	0x40021000
 80029b0:	003d0900 	.word	0x003d0900
 80029b4:	00f42400 	.word	0x00f42400

080029b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	d00b      	beq.n	80029e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a4a      	ldr	r2, [pc, #296]	; (8002afc <UART_AdvFeatureConfig+0x144>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a43      	ldr	r2, [pc, #268]	; (8002b00 <UART_AdvFeatureConfig+0x148>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	2204      	movs	r2, #4
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <UART_AdvFeatureConfig+0x14c>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d00b      	beq.n	8002a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a34      	ldr	r2, [pc, #208]	; (8002b08 <UART_AdvFeatureConfig+0x150>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <UART_AdvFeatureConfig+0x154>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2220      	movs	r2, #32
 8002a70:	4013      	ands	r3, r2
 8002a72:	d00b      	beq.n	8002a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <UART_AdvFeatureConfig+0x158>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2240      	movs	r2, #64	; 0x40
 8002a92:	4013      	ands	r3, r2
 8002a94:	d01d      	beq.n	8002ad2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <UART_AdvFeatureConfig+0x15c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	035b      	lsls	r3, r3, #13
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d10b      	bne.n	8002ad2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <UART_AdvFeatureConfig+0x160>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d00b      	beq.n	8002af4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <UART_AdvFeatureConfig+0x164>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
  }
}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	fffdffff 	.word	0xfffdffff
 8002b00:	fffeffff 	.word	0xfffeffff
 8002b04:	fffbffff 	.word	0xfffbffff
 8002b08:	ffff7fff 	.word	0xffff7fff
 8002b0c:	ffffefff 	.word	0xffffefff
 8002b10:	ffffdfff 	.word	0xffffdfff
 8002b14:	ffefffff 	.word	0xffefffff
 8002b18:	ff9fffff 	.word	0xff9fffff
 8002b1c:	fff7ffff 	.word	0xfff7ffff

08002b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b30:	f7fd ffc4 	bl	8000abc <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d10c      	bne.n	8002b60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	0391      	lsls	r1, r2, #14
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <UART_CheckIdleState+0x8c>)
 8002b50:	9200      	str	r2, [sp, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f000 f82c 	bl	8002bb0 <UART_WaitOnFlagUntilTimeout>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d001      	beq.n	8002b60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e021      	b.n	8002ba4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2204      	movs	r2, #4
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d10c      	bne.n	8002b88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	03d1      	lsls	r1, r2, #15
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <UART_CheckIdleState+0x8c>)
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f000 f818 	bl	8002bb0 <UART_WaitOnFlagUntilTimeout>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d001      	beq.n	8002b88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e00d      	b.n	8002ba4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2274      	movs	r2, #116	; 0x74
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	01ffffff 	.word	0x01ffffff

08002bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b094      	sub	sp, #80	; 0x50
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc0:	e0a3      	b.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	d100      	bne.n	8002bca <UART_WaitOnFlagUntilTimeout+0x1a>
 8002bc8:	e09f      	b.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7fd ff77 	bl	8000abc <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d13d      	bne.n	8002c5c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bea:	2301      	movs	r3, #1
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	494c      	ldr	r1, [pc, #304]	; (8002d34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c12:	f3ef 8310 	mrs	r3, PRIMASK
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c22:	f383 8810 	msr	PRIMASK, r3
}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	438a      	bics	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	f383 8810 	msr	PRIMASK, r3
}
 8002c42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2274      	movs	r2, #116	; 0x74
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e067      	b.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2204      	movs	r2, #4
 8002c64:	4013      	ands	r3, r2
 8002c66:	d050      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	401a      	ands	r2, r3
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d146      	bne.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c86:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8a:	613b      	str	r3, [r7, #16]
  return(result);
 8002c8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4923      	ldr	r1, [pc, #140]	; (8002d34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cbe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	438a      	bics	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	f383 8810 	msr	PRIMASK, r3
}
 8002ce8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2274      	movs	r2, #116	; 0x74
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e010      	b.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	425a      	negs	r2, r3
 8002d1a:	4153      	adcs	r3, r2
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	001a      	movs	r2, r3
 8002d20:	1dfb      	adds	r3, r7, #7
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d100      	bne.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002d28:	e74b      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b014      	add	sp, #80	; 0x50
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	fffffe5f 	.word	0xfffffe5f

08002d38 <__libc_init_array>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	4d0c      	ldr	r5, [pc, #48]	; (8002d70 <__libc_init_array+0x38>)
 8002d3e:	4c0d      	ldr	r4, [pc, #52]	; (8002d74 <__libc_init_array+0x3c>)
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	42a6      	cmp	r6, r4
 8002d46:	d109      	bne.n	8002d5c <__libc_init_array+0x24>
 8002d48:	2600      	movs	r6, #0
 8002d4a:	f000 f821 	bl	8002d90 <_init>
 8002d4e:	4d0a      	ldr	r5, [pc, #40]	; (8002d78 <__libc_init_array+0x40>)
 8002d50:	4c0a      	ldr	r4, [pc, #40]	; (8002d7c <__libc_init_array+0x44>)
 8002d52:	1b64      	subs	r4, r4, r5
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	42a6      	cmp	r6, r4
 8002d58:	d105      	bne.n	8002d66 <__libc_init_array+0x2e>
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	00b3      	lsls	r3, r6, #2
 8002d5e:	58eb      	ldr	r3, [r5, r3]
 8002d60:	4798      	blx	r3
 8002d62:	3601      	adds	r6, #1
 8002d64:	e7ee      	b.n	8002d44 <__libc_init_array+0xc>
 8002d66:	00b3      	lsls	r3, r6, #2
 8002d68:	58eb      	ldr	r3, [r5, r3]
 8002d6a:	4798      	blx	r3
 8002d6c:	3601      	adds	r6, #1
 8002d6e:	e7f2      	b.n	8002d56 <__libc_init_array+0x1e>
 8002d70:	08002e2c 	.word	0x08002e2c
 8002d74:	08002e2c 	.word	0x08002e2c
 8002d78:	08002e2c 	.word	0x08002e2c
 8002d7c:	08002e30 	.word	0x08002e30

08002d80 <memset>:
 8002d80:	0003      	movs	r3, r0
 8002d82:	1882      	adds	r2, r0, r2
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	7019      	strb	r1, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <_init>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr

08002d9c <_fini>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr
