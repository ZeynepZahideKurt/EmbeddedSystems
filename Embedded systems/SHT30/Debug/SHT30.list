
SHT30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000074  080050ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080050ac  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001028a  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  00030326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  000326c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012332  00000000  00000000  00033c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6c1  00000000  00000000  00045f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006672a  00000000  00000000  0005461b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bad45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc8  00000000  00000000  000bad98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e64 	.word	0x08004e64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004e64 	.word	0x08004e64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8ba 	bl	8000640 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8b5 	bl	8000640 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzdi2>:
 8000640:	b510      	push	{r4, lr}
 8000642:	2900      	cmp	r1, #0
 8000644:	d103      	bne.n	800064e <__clzdi2+0xe>
 8000646:	f000 f807 	bl	8000658 <__clzsi2>
 800064a:	3020      	adds	r0, #32
 800064c:	e002      	b.n	8000654 <__clzdi2+0x14>
 800064e:	1c08      	adds	r0, r1, #0
 8000650:	f000 f802 	bl	8000658 <__clzsi2>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b09d      	sub	sp, #116	; 0x74
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 ff51 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f8d5 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f9af 	bl	8000a04 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006a6:	f000 f93f 	bl	8000928 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80006aa:	f000 f97d 	bl	80009a8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"basladi\r\n",9, 100);
 80006ae:	4956      	ldr	r1, [pc, #344]	; (8000808 <main+0x174>)
 80006b0:	4856      	ldr	r0, [pc, #344]	; (800080c <main+0x178>)
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2209      	movs	r2, #9
 80006b6:	f002 fe6f 	bl	8003398 <HAL_UART_Transmit>
  sensirion_i2c_init();
 80006ba:	f000 fc37 	bl	8000f2c <sensirion_i2c_init>

  while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
 80006be:	e009      	b.n	80006d4 <main+0x40>
	  printf("SHT sensor probing failed\n");
 80006c0:	4b53      	ldr	r3, [pc, #332]	; (8000810 <main+0x17c>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f003 fbd6 	bl	8003e74 <puts>
	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gelmiii\r\n",9, 100);
 80006c8:	4952      	ldr	r1, [pc, #328]	; (8000814 <main+0x180>)
 80006ca:	4850      	ldr	r0, [pc, #320]	; (800080c <main+0x178>)
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2209      	movs	r2, #9
 80006d0:	f002 fe62 	bl	8003398 <HAL_UART_Transmit>
  while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
 80006d4:	2044      	movs	r0, #68	; 0x44
 80006d6:	f000 fd31 	bl	800113c <sht3x_probe>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d1f0      	bne.n	80006c0 <main+0x2c>

  }
  printf("SHT sensor probing successful\n");
 80006de:	4b4e      	ldr	r3, [pc, #312]	; (8000818 <main+0x184>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f003 fbc7 	bl	8003e74 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"1\r\n",3, 100);
 80006e6:	494d      	ldr	r1, [pc, #308]	; (800081c <main+0x188>)
 80006e8:	4848      	ldr	r0, [pc, #288]	; (800080c <main+0x178>)
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2203      	movs	r2, #3
 80006ee:	f002 fe53 	bl	8003398 <HAL_UART_Transmit>

	  char buffer[100];
	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"2\r\n",3, 100);
 80006f2:	494b      	ldr	r1, [pc, #300]	; (8000820 <main+0x18c>)
 80006f4:	4845      	ldr	r0, [pc, #276]	; (800080c <main+0x178>)
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2203      	movs	r2, #3
 80006fa:	f002 fe4d 	bl	8003398 <HAL_UART_Transmit>

	  int32_t temperature, humidity;
	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"3\r\n",3, 100);
 80006fe:	4949      	ldr	r1, [pc, #292]	; (8000824 <main+0x190>)
 8000700:	4842      	ldr	r0, [pc, #264]	; (800080c <main+0x178>)
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2203      	movs	r2, #3
 8000706:	f002 fe47 	bl	8003398 <HAL_UART_Transmit>

      int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT,&temperature, &humidity);
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	18fa      	adds	r2, r7, r3
 800070e:	2368      	movs	r3, #104	; 0x68
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	0019      	movs	r1, r3
 8000714:	2044      	movs	r0, #68	; 0x44
 8000716:	f000 fc9f 	bl	8001058 <sht3x_measure_blocking_read>
 800071a:	0003      	movs	r3, r0
 800071c:	001a      	movs	r2, r3
 800071e:	246f      	movs	r4, #111	; 0x6f
 8000720:	193b      	adds	r3, r7, r4
 8000722:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"4\r\n",3, 100);
 8000724:	4940      	ldr	r1, [pc, #256]	; (8000828 <main+0x194>)
 8000726:	4839      	ldr	r0, [pc, #228]	; (800080c <main+0x178>)
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	2203      	movs	r2, #3
 800072c:	f002 fe34 	bl	8003398 <HAL_UART_Transmit>

      if (ret == STATUS_OK) {
 8000730:	193b      	adds	r3, r7, r4
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b25b      	sxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d156      	bne.n	80007e8 <main+0x154>
    	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"geliyor\r\n",9, 100);
 800073a:	493c      	ldr	r1, [pc, #240]	; (800082c <main+0x198>)
 800073c:	4833      	ldr	r0, [pc, #204]	; (800080c <main+0x178>)
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	2209      	movs	r2, #9
 8000742:	f002 fe29 	bl	8003398 <HAL_UART_Transmit>
    	  sprintf(buffer, "%d", temperature/ 100);
 8000746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000748:	2164      	movs	r1, #100	; 0x64
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff fd78 	bl	8000240 <__divsi3>
 8000750:	0003      	movs	r3, r0
 8000752:	001a      	movs	r2, r3
 8000754:	4936      	ldr	r1, [pc, #216]	; (8000830 <main+0x19c>)
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	f003 fb95 	bl	8003e88 <siprintf>
    	  HAL_UART_Transmit(&hlpuart1, "t: ", 3, 1000);
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4934      	ldr	r1, [pc, #208]	; (8000834 <main+0x1a0>)
 8000764:	4829      	ldr	r0, [pc, #164]	; (800080c <main+0x178>)
 8000766:	2203      	movs	r2, #3
 8000768:	f002 fe16 	bl	8003398 <HAL_UART_Transmit>
    	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 800076c:	003b      	movs	r3, r7
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fcca 	bl	8000108 <strlen>
 8000774:	0003      	movs	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	23fa      	movs	r3, #250	; 0xfa
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	0039      	movs	r1, r7
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <main+0x178>)
 8000780:	f002 fe0a 	bl	8003398 <HAL_UART_Transmit>
     	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8000784:	492c      	ldr	r1, [pc, #176]	; (8000838 <main+0x1a4>)
 8000786:	4821      	ldr	r0, [pc, #132]	; (800080c <main+0x178>)
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2202      	movs	r2, #2
 800078c:	f002 fe04 	bl	8003398 <HAL_UART_Transmit>
     	  //  printf("measured temperature: %0.2f degreeCelsius","measured humidity: %0.2f percentRH\n",temperature / 1000.0f, humidity / 1000.0f);

     	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"geliyor\r\n",9, 100);
 8000790:	4926      	ldr	r1, [pc, #152]	; (800082c <main+0x198>)
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <main+0x178>)
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	2209      	movs	r2, #9
 8000798:	f002 fdfe 	bl	8003398 <HAL_UART_Transmit>
     	  sprintf(buffer, "%d", humidity/ 100);
 800079c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800079e:	2164      	movs	r1, #100	; 0x64
 80007a0:	0018      	movs	r0, r3
 80007a2:	f7ff fd4d 	bl	8000240 <__divsi3>
 80007a6:	0003      	movs	r3, r0
 80007a8:	001a      	movs	r2, r3
 80007aa:	4921      	ldr	r1, [pc, #132]	; (8000830 <main+0x19c>)
 80007ac:	003b      	movs	r3, r7
 80007ae:	0018      	movs	r0, r3
 80007b0:	f003 fb6a 	bl	8003e88 <siprintf>
     	  HAL_UART_Transmit(&hlpuart1, "n: ", 3, 1000);
 80007b4:	23fa      	movs	r3, #250	; 0xfa
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4920      	ldr	r1, [pc, #128]	; (800083c <main+0x1a8>)
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <main+0x178>)
 80007bc:	2203      	movs	r2, #3
 80007be:	f002 fdeb 	bl	8003398 <HAL_UART_Transmit>
     	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80007c2:	003b      	movs	r3, r7
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff fc9f 	bl	8000108 <strlen>
 80007ca:	0003      	movs	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	23fa      	movs	r3, #250	; 0xfa
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	0039      	movs	r1, r7
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <main+0x178>)
 80007d6:	f002 fddf 	bl	8003398 <HAL_UART_Transmit>
     	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80007da:	4917      	ldr	r1, [pc, #92]	; (8000838 <main+0x1a4>)
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <main+0x178>)
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	2202      	movs	r2, #2
 80007e2:	f002 fdd9 	bl	8003398 <HAL_UART_Transmit>
 80007e6:	e009      	b.n	80007fc <main+0x168>

      }
      else {
    	  printf("error reading measurement\n");
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <main+0x1ac>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f003 fb42 	bl	8003e74 <puts>
    	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"calismiyi\r\n",9, 100);
 80007f0:	4914      	ldr	r1, [pc, #80]	; (8000844 <main+0x1b0>)
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <main+0x178>)
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	2209      	movs	r2, #9
 80007f8:	f002 fdce 	bl	8003398 <HAL_UART_Transmit>

      }
      sensirion_sleep_usec(1000000);
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <main+0x1b4>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fc00 	bl	8001004 <sensirion_sleep_usec>
  {
 8000804:	e76f      	b.n	80006e6 <main+0x52>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	08004e7c 	.word	0x08004e7c
 800080c:	20000134 	.word	0x20000134
 8000810:	08004e88 	.word	0x08004e88
 8000814:	08004ea4 	.word	0x08004ea4
 8000818:	08004eb0 	.word	0x08004eb0
 800081c:	08004ed0 	.word	0x08004ed0
 8000820:	08004ed4 	.word	0x08004ed4
 8000824:	08004ed8 	.word	0x08004ed8
 8000828:	08004edc 	.word	0x08004edc
 800082c:	08004ee0 	.word	0x08004ee0
 8000830:	08004eec 	.word	0x08004eec
 8000834:	08004ef0 	.word	0x08004ef0
 8000838:	08004ef4 	.word	0x08004ef4
 800083c:	08004ef8 	.word	0x08004ef8
 8000840:	08004efc 	.word	0x08004efc
 8000844:	08004f18 	.word	0x08004f18
 8000848:	000f4240 	.word	0x000f4240

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b099      	sub	sp, #100	; 0x64
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	242c      	movs	r4, #44	; 0x2c
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2334      	movs	r3, #52	; 0x34
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 fa8f 	bl	8003d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000862:	2318      	movs	r3, #24
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f003 fa87 	bl	8003d80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000872:	003b      	movs	r3, r7
 8000874:	0018      	movs	r0, r3
 8000876:	2318      	movs	r3, #24
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 fa80 	bl	8003d80 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <SystemClock_Config+0xd4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xd8>)
 8000886:	401a      	ands	r2, r3
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <SystemClock_Config+0xd4>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0109      	lsls	r1, r1, #4
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2210      	movs	r2, #16
 8000898:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2201      	movs	r2, #1
 800089e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	22a0      	movs	r2, #160	; 0xa0
 80008aa:	0212      	lsls	r2, r2, #8
 80008ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fe54 	bl	8002564 <HAL_RCC_OscConfig>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008c0:	f000 f8fc 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	2118      	movs	r1, #24
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	220f      	movs	r2, #15
 80008ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2100      	movs	r1, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 f9b7 	bl	8002c5c <HAL_RCC_ClockConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008f2:	f000 f8e3 	bl	8000abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 80008f6:	003b      	movs	r3, r7
 80008f8:	220c      	movs	r2, #12
 80008fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008fc:	003b      	movs	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000902:	003b      	movs	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	003b      	movs	r3, r7
 800090a:	0018      	movs	r0, r3
 800090c:	f002 fbca 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000914:	f000 f8d2 	bl	8000abc <Error_Handler>
  }
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b019      	add	sp, #100	; 0x64
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	40007000 	.word	0x40007000
 8000924:	ffffe7ff 	.word	0xffffe7ff

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_I2C1_Init+0x78>)
 800092e:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <MX_I2C1_Init+0x7c>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000934:	22e1      	movs	r2, #225	; 0xe1
 8000936:	00d2      	lsls	r2, r2, #3
 8000938:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_I2C1_Init+0x78>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000942:	2201      	movs	r2, #1
 8000944:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_I2C1_Init+0x78>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C1_Init+0x78>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f8c6 	bl	8001af8 <HAL_I2C_Init>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f8a4 	bl	8000abc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000976:	2100      	movs	r1, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fd5b 	bl	8002434 <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000982:	f000 f89b 	bl	8000abc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000988:	2100      	movs	r1, #0
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fd9e 	bl	80024cc <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 f892 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	200000e8 	.word	0x200000e8
 80009a4:	40005400 	.word	0x40005400

080009a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <MX_LPUART1_UART_Init+0x58>)
 80009b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009b4:	22e1      	movs	r2, #225	; 0xe1
 80009b6:	0252      	lsls	r2, r2, #9
 80009b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_LPUART1_UART_Init+0x54>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 fc82 	bl	80032f0 <HAL_UART_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f864 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000134 	.word	0x20000134
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	; 0x2c
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	2414      	movs	r4, #20
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2314      	movs	r3, #20
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f003 f9b3 	bl	8003d80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a20:	2104      	movs	r1, #4
 8000a22:	430a      	orrs	r2, r1
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a68:	2102      	movs	r1, #2
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_GPIO_Init+0xb4>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	2202      	movs	r2, #2
 8000a74:	4013      	ands	r3, r2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a7a:	23a0      	movs	r3, #160	; 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2104      	movs	r1, #4
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 f81a 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a88:	0021      	movs	r1, r4
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	187a      	adds	r2, r7, r1
 8000aa4:	23a0      	movs	r3, #160	; 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fe98 	bl	80017e0 <HAL_GPIO_Init>

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b00b      	add	sp, #44	; 0x2c
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	40021000 	.word	0x40021000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>

08000ac6 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	000a      	movs	r2, r1
 8000ad0:	1cbb      	adds	r3, r7, #2
 8000ad2:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000ad4:	230d      	movs	r3, #13
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	22ff      	movs	r2, #255	; 0xff
 8000ada:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000adc:	230e      	movs	r3, #14
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	801a      	strh	r2, [r3, #0]
 8000ae4:	e037      	b.n	8000b56 <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 8000ae6:	230e      	movs	r3, #14
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	18d3      	adds	r3, r2, r3
 8000af0:	7819      	ldrb	r1, [r3, #0]
 8000af2:	220d      	movs	r2, #13
 8000af4:	18bb      	adds	r3, r7, r2
 8000af6:	18ba      	adds	r2, r7, r2
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	404a      	eors	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000afe:	230c      	movs	r3, #12
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2208      	movs	r2, #8
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e01b      	b.n	8000b40 <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 8000b08:	210d      	movs	r1, #13
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	da09      	bge.n	8000b28 <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	2231      	movs	r2, #49	; 0x31
 8000b1e:	4053      	eors	r3, r2
 8000b20:	b25a      	sxtb	r2, r3
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e005      	b.n	8000b34 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8000b28:	230d      	movs	r3, #13
 8000b2a:	18fa      	adds	r2, r7, r3
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	18db      	adds	r3, r3, r3
 8000b32:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000b34:	220c      	movs	r2, #12
 8000b36:	18bb      	adds	r3, r7, r2
 8000b38:	18ba      	adds	r2, r7, r2
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	230c      	movs	r3, #12
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1de      	bne.n	8000b08 <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000b4a:	220e      	movs	r2, #14
 8000b4c:	18bb      	adds	r3, r7, r2
 8000b4e:	18ba      	adds	r2, r7, r2
 8000b50:	8812      	ldrh	r2, [r2, #0]
 8000b52:	3201      	adds	r2, #1
 8000b54:	801a      	strh	r2, [r3, #0]
 8000b56:	230e      	movs	r3, #14
 8000b58:	18fa      	adds	r2, r7, r3
 8000b5a:	1cbb      	adds	r3, r7, #2
 8000b5c:	8812      	ldrh	r2, [r2, #0]
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d3c0      	bcc.n	8000ae6 <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8000b64:	230d      	movs	r3, #13
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	781b      	ldrb	r3, [r3, #0]
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b004      	add	sp, #16
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	1cbb      	adds	r3, r7, #2
 8000b80:	1c02      	adds	r2, r0, #0
 8000b82:	801a      	strh	r2, [r3, #0]
 8000b84:	1c7b      	adds	r3, r7, #1
 8000b86:	1c0a      	adds	r2, r1, #0
 8000b88:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8000b8a:	1cbb      	adds	r3, r7, #2
 8000b8c:	881a      	ldrh	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff97 	bl	8000ac6 <sensirion_common_generate_crc>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	1c7b      	adds	r3, r7, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d002      	beq.n	8000baa <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	e000      	b.n	8000bac <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	0008      	movs	r0, r1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	250a      	movs	r5, #10
 8000bc4:	197b      	adds	r3, r7, r5
 8000bc6:	1c02      	adds	r2, r0, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
 8000bca:	2309      	movs	r3, #9
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	1c0a      	adds	r2, r1, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8000bd2:	2014      	movs	r0, #20
 8000bd4:	183b      	adds	r3, r7, r0
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8000bda:	197b      	adds	r3, r7, r5
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b299      	uxth	r1, r3
 8000be2:	183b      	adds	r3, r7, r0
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	0004      	movs	r4, r0
 8000be8:	183a      	adds	r2, r7, r0
 8000bea:	1c58      	adds	r0, r3, #1
 8000bec:	8010      	strh	r0, [r2, #0]
 8000bee:	001a      	movs	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	189b      	adds	r3, r3, r2
 8000bf4:	b2ca      	uxtb	r2, r1
 8000bf6:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	193a      	adds	r2, r7, r4
 8000bfe:	1c59      	adds	r1, r3, #1
 8000c00:	8011      	strh	r1, [r2, #0]
 8000c02:	001a      	movs	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	189b      	adds	r3, r3, r2
 8000c08:	197a      	adds	r2, r7, r5
 8000c0a:	8812      	ldrh	r2, [r2, #0]
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8000c10:	2317      	movs	r3, #23
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e042      	b.n	8000ca0 <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8000c1a:	2617      	movs	r6, #23
 8000c1c:	19bb      	adds	r3, r7, r6
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b299      	uxth	r1, r3
 8000c2c:	2414      	movs	r4, #20
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	193a      	adds	r2, r7, r4
 8000c34:	1c58      	adds	r0, r3, #1
 8000c36:	8010      	strh	r0, [r2, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8000c42:	19bb      	adds	r3, r7, r6
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	8819      	ldrh	r1, [r3, #0]
 8000c4e:	0025      	movs	r5, r4
 8000c50:	197b      	adds	r3, r7, r5
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	197a      	adds	r2, r7, r5
 8000c56:	1c58      	adds	r0, r3, #1
 8000c58:	8010      	strh	r0, [r2, #0]
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	189b      	adds	r3, r3, r2
 8000c60:	b2ca      	uxtb	r2, r1
 8000c62:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8000c64:	197b      	adds	r3, r7, r5
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	3b02      	subs	r3, #2
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	2213      	movs	r2, #19
 8000c70:	18bc      	adds	r4, r7, r2
 8000c72:	2102      	movs	r1, #2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff26 	bl	8000ac6 <sensirion_common_generate_crc>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8000c7e:	197b      	adds	r3, r7, r5
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	197a      	adds	r2, r7, r5
 8000c84:	1c59      	adds	r1, r3, #1
 8000c86:	8011      	strh	r1, [r2, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	189b      	adds	r3, r3, r2
 8000c8e:	2213      	movs	r2, #19
 8000c90:	18ba      	adds	r2, r7, r2
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8000c96:	19bb      	adds	r3, r7, r6
 8000c98:	19ba      	adds	r2, r7, r6
 8000c9a:	7812      	ldrb	r2, [r2, #0]
 8000c9c:	3201      	adds	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	2317      	movs	r3, #23
 8000ca2:	18fa      	adds	r2, r7, r3
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3b4      	bcc.n	8000c1a <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 8000cb0:	2314      	movs	r3, #20
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	881b      	ldrh	r3, [r3, #0]
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b007      	add	sp, #28
 8000cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cbe <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8000cbe:	b5b0      	push	{r4, r5, r7, lr}
 8000cc0:	b096      	sub	sp, #88	; 0x58
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	1c02      	adds	r2, r0, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	1c0a      	adds	r2, r1, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000cd4:	2052      	movs	r0, #82	; 0x52
 8000cd6:	1839      	adds	r1, r7, r0
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	1c1a      	adds	r2, r3, #0
 8000cde:	1892      	adds	r2, r2, r2
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000cea:	183b      	adds	r3, r7, r0
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 f945 	bl	8000f84 <sensirion_i2c_read>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	214a      	movs	r1, #74	; 0x4a
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8000d04:	000a      	movs	r2, r1
 8000d06:	18bb      	adds	r3, r7, r2
 8000d08:	2100      	movs	r1, #0
 8000d0a:	5e5b      	ldrsh	r3, [r3, r1]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 8000d10:	18bb      	adds	r3, r7, r2
 8000d12:	2200      	movs	r2, #0
 8000d14:	5e9b      	ldrsh	r3, [r3, r2]
 8000d16:	e053      	b.n	8000dc0 <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000d18:	2356      	movs	r3, #86	; 0x56
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
 8000d20:	2354      	movs	r3, #84	; 0x54
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]
 8000d28:	e041      	b.n	8000dae <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000d2a:	2156      	movs	r1, #86	; 0x56
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d32:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	3302      	adds	r3, #2
 8000d3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d3c:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	001a      	movs	r2, r3
 8000d42:	2102      	movs	r1, #2
 8000d44:	f7ff ff15 	bl	8000b72 <sensirion_common_check_crc>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	214a      	movs	r1, #74	; 0x4a
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 8000d52:	000a      	movs	r2, r1
 8000d54:	18bb      	adds	r3, r7, r2
 8000d56:	2100      	movs	r1, #0
 8000d58:	5e5b      	ldrsh	r3, [r3, r1]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 8000d5e:	18bb      	adds	r3, r7, r2
 8000d60:	2200      	movs	r2, #0
 8000d62:	5e9b      	ldrsh	r3, [r3, r2]
 8000d64:	e02c      	b.n	8000dc0 <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8000d66:	2456      	movs	r4, #86	; 0x56
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d6e:	18d2      	adds	r2, r2, r3
 8000d70:	2554      	movs	r5, #84	; 0x54
 8000d72:	197b      	adds	r3, r7, r5
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	1979      	adds	r1, r7, r5
 8000d78:	1c58      	adds	r0, r3, #1
 8000d7a:	8008      	strh	r0, [r1, #0]
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	185b      	adds	r3, r3, r1
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d8e:	18d2      	adds	r2, r2, r3
 8000d90:	197b      	adds	r3, r7, r5
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	1979      	adds	r1, r7, r5
 8000d96:	1c58      	adds	r0, r3, #1
 8000d98:	8008      	strh	r0, [r1, #0]
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	185b      	adds	r3, r3, r1
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	193a      	adds	r2, r7, r4
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	3203      	adds	r2, #3
 8000dac:	801a      	strh	r2, [r3, #0]
 8000dae:	2356      	movs	r3, #86	; 0x56
 8000db0:	18fa      	adds	r2, r7, r3
 8000db2:	2352      	movs	r3, #82	; 0x52
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	8812      	ldrh	r2, [r2, #0]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3b5      	bcc.n	8000d2a <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b016      	add	sp, #88	; 0x58
 8000dc6:	bdb0      	pop	{r4, r5, r7, pc}

08000dc8 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6039      	str	r1, [r7, #0]
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	1c02      	adds	r2, r0, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	1c0a      	adds	r2, r1, #0
 8000ddc:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8000dde:	250c      	movs	r5, #12
 8000de0:	197c      	adds	r4, r7, r5
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ff66 	bl	8000cbe <sensirion_i2c_read_words_as_bytes>
 8000df2:	0003      	movs	r3, r0
 8000df4:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	2200      	movs	r2, #0
 8000dfa:	5e9b      	ldrsh	r3, [r3, r2]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <sensirion_i2c_read_words+0x40>
        return ret;
 8000e00:	197b      	adds	r3, r7, r5
 8000e02:	2200      	movs	r2, #0
 8000e04:	5e9b      	ldrsh	r3, [r3, r2]
 8000e06:	e02a      	b.n	8000e5e <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e01c      	b.n	8000e4c <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 8000e12:	200f      	movs	r0, #15
 8000e14:	183b      	adds	r3, r7, r0
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b219      	sxth	r1, r3
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	b28a      	uxth	r2, r1
 8000e40:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000e42:	183b      	adds	r3, r7, r0
 8000e44:	183a      	adds	r2, r7, r0
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	3201      	adds	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	1d3a      	adds	r2, r7, #4
 8000e56:	8812      	ldrh	r2, [r2, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8da      	bhi.n	8000e12 <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bdb0      	pop	{r4, r5, r7, pc}

08000e66 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8000e66:	b590      	push	{r4, r7, lr}
 8000e68:	b085      	sub	sp, #20
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	1c0a      	adds	r2, r1, #0
 8000e76:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	8819      	ldrh	r1, [r3, #0]
 8000e7c:	240c      	movs	r4, #12
 8000e7e:	1938      	adds	r0, r7, r4
 8000e80:	2300      	movs	r3, #0
 8000e82:	2200      	movs	r2, #0
 8000e84:	f7ff fe96 	bl	8000bb4 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000e88:	1939      	adds	r1, r7, r4
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 f897 	bl	8000fc4 <sensirion_i2c_write>
 8000e96:	0003      	movs	r3, r0
 8000e98:	b21b      	sxth	r3, r3
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b005      	add	sp, #20
 8000ea0:	bd90      	pop	{r4, r7, pc}

08000ea2 <sensirion_i2c_delayed_read_cmd>:
    return sensirion_i2c_write(address, buf, buf_size);
}

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 8000ea2:	b5b0      	push	{r4, r5, r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	240f      	movs	r4, #15
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	1c02      	adds	r2, r0, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	200c      	movs	r0, #12
 8000eb6:	183b      	adds	r3, r7, r0
 8000eb8:	1c0a      	adds	r2, r1, #0
 8000eba:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	8819      	ldrh	r1, [r3, #0]
 8000ec0:	2514      	movs	r5, #20
 8000ec2:	1978      	adds	r0, r7, r5
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f7ff fe74 	bl	8000bb4 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000ecc:	1979      	adds	r1, r7, r5
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f000 f875 	bl	8000fc4 <sensirion_i2c_write>
 8000eda:	0003      	movs	r3, r0
 8000edc:	001a      	movs	r2, r3
 8000ede:	2116      	movs	r1, #22
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	18bb      	adds	r3, r7, r2
 8000ee8:	2100      	movs	r1, #0
 8000eea:	5e5b      	ldrsh	r3, [r3, r1]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <sensirion_i2c_delayed_read_cmd+0x56>
        return ret;
 8000ef0:	18bb      	adds	r3, r7, r2
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	5e9b      	ldrsh	r3, [r3, r2]
 8000ef6:	e014      	b.n	8000f22 <sensirion_i2c_delayed_read_cmd+0x80>

    if (delay_us)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <sensirion_i2c_delayed_read_cmd+0x64>
        sensirion_sleep_usec(delay_us);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 f87f 	bl	8001004 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8000f06:	2320      	movs	r3, #32
 8000f08:	2208      	movs	r2, #8
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	44bc      	add	ip, r7
 8000f0e:	4463      	add	r3, ip
 8000f10:	881a      	ldrh	r2, [r3, #0]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff ff54 	bl	8000dc8 <sensirion_i2c_read_words>
 8000f20:	0003      	movs	r3, r0
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b006      	add	sp, #24
 8000f28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f2c <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <sensirion_i2c_init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
   // hi2c1.Init.ClockSpeed = 100000;
   // hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <sensirion_i2c_init+0x54>)
 8000f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <sensirion_i2c_init+0x54>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	0389      	lsls	r1, r1, #14
 8000f64:	430a      	orrs	r2, r1
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <sensirion_i2c_init+0x4c>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fdc4 	bl	8001af8 <HAL_I2C_Init>
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	20000090 	.word	0x20000090
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40021000 	.word	0x40021000

08000f84 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6039      	str	r1, [r7, #0]
 8000f8c:	0011      	movs	r1, r2
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	1c02      	adds	r2, r0, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	1c0a      	adds	r2, r1, #0
 8000f98:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	18db      	adds	r3, r3, r3
 8000fa2:	b299      	uxth	r1, r3
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <sensirion_i2c_read+0x3c>)
 8000fac:	2464      	movs	r4, #100	; 0x64
 8000fae:	9400      	str	r4, [sp, #0]
 8000fb0:	f000 ff40 	bl	8001e34 <HAL_I2C_Master_Receive>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	20000090 	.word	0x20000090

08000fc4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	0011      	movs	r1, r2
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	1c02      	adds	r2, r0, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	1c0a      	adds	r2, r1, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	18db      	adds	r3, r3, r3
 8000fe2:	b299      	uxth	r1, r3
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <sensirion_i2c_write+0x3c>)
 8000fec:	2464      	movs	r4, #100	; 0x64
 8000fee:	9400      	str	r4, [sp, #0]
 8000ff0:	f000 fe18 	bl	8001c24 <HAL_I2C_Master_Transmit>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b003      	add	sp, #12
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	20000090 	.word	0x20000090

08001004 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	22fa      	movs	r2, #250	; 0xfa
 8001010:	0091      	lsls	r1, r2, #2
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff f88a 	bl	800012c <__udivsi3>
 8001018:	0003      	movs	r3, r0
 800101a:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	22fa      	movs	r2, #250	; 0xfa
 8001020:	0091      	lsls	r1, r2, #2
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff f908 	bl	8000238 <__aeabi_uidivmod>
 8001028:	1e0b      	subs	r3, r1, #0
 800102a:	d002      	beq.n	8001032 <sensirion_sleep_usec+0x2e>
        msec++;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8001032:	f000 fb19 	bl	8001668 <HAL_GetHalVersion>
 8001036:	0003      	movs	r3, r0
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <sensirion_sleep_usec+0x50>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d802      	bhi.n	8001044 <sensirion_sleep_usec+0x40>
        msec++;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	0018      	movs	r0, r3
 8001048:	f000 faea 	bl	8001620 <HAL_Delay>
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b004      	add	sp, #16
 8001052:	bd80      	pop	{r7, pc}
 8001054:	010100ff 	.word	0x010100ff

08001058 <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	250f      	movs	r5, #15
 8001064:	197b      	adds	r3, r7, r5
 8001066:	1c02      	adds	r2, r0, #0
 8001068:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 800106a:	2616      	movs	r6, #22
 800106c:	19bc      	adds	r4, r7, r6
 800106e:	197b      	adds	r3, r7, r5
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f820 	bl	80010b8 <sht3x_measure>
 8001078:	0003      	movs	r3, r0
 800107a:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 800107c:	19bb      	adds	r3, r7, r6
 800107e:	2200      	movs	r2, #0
 8001080:	5e9b      	ldrsh	r3, [r3, r2]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <sht3x_measure_blocking_read+0x5c>)
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ffbb 	bl	8001004 <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 800108e:	19bc      	adds	r4, r7, r6
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	197b      	adds	r3, r7, r5
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	f000 f823 	bl	80010e4 <sht3x_read>
 800109e:	0003      	movs	r3, r0
 80010a0:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 80010a2:	2316      	movs	r3, #22
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2200      	movs	r2, #0
 80010a8:	5e9b      	ldrsh	r3, [r3, r2]
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b007      	add	sp, #28
 80010b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	00003a98 	.word	0x00003a98

080010b8 <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <sht3x_measure+0x28>)
 80010c6:	881a      	ldrh	r2, [r3, #0]
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff fec9 	bl	8000e66 <sensirion_i2c_write_cmd>
 80010d4:	0003      	movs	r3, r0
}
 80010d6:	0018      	movs	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	20000000 	.word	0x20000000

080010e4 <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	260f      	movs	r6, #15
 80010f0:	19bb      	adds	r3, r7, r6
 80010f2:	1c02      	adds	r2, r0, #0
 80010f4:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 80010f6:	2316      	movs	r3, #22
 80010f8:	18fc      	adds	r4, r7, r3
 80010fa:	2510      	movs	r5, #16
 80010fc:	1979      	adds	r1, r7, r5
 80010fe:	19bb      	adds	r3, r7, r6
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2202      	movs	r2, #2
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fe5f 	bl	8000dc8 <sensirion_i2c_read_words>
 800110a:	0003      	movs	r3, r0
 800110c:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 800110e:	197b      	adds	r3, r7, r5
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f000 f82c 	bl	8001174 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 800111c:	197b      	adds	r3, r7, r5
 800111e:	885b      	ldrh	r3, [r3, #2]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f000 f83d 	bl	80011a4 <tick_to_humidity>

    return ret;
 800112a:	2316      	movs	r3, #22
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	2200      	movs	r2, #0
 8001130:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b007      	add	sp, #28
 8001138:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800113c <sht3x_probe>:

int16_t sht3x_probe(sht3x_i2c_addr_t addr) {
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b087      	sub	sp, #28
 8001140:	af02      	add	r7, sp, #8
 8001142:	0002      	movs	r2, r0
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	701a      	strb	r2, [r3, #0]
    uint16_t status;
    return sensirion_i2c_delayed_read_cmd(addr, SHT3X_CMD_READ_STATUS_REG,
 8001148:	4909      	ldr	r1, [pc, #36]	; (8001170 <sht3x_probe+0x34>)
 800114a:	23fa      	movs	r3, #250	; 0xfa
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	001c      	movs	r4, r3
 8001150:	230e      	movs	r3, #14
 8001152:	18fa      	adds	r2, r7, r3
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	7818      	ldrb	r0, [r3, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	0013      	movs	r3, r2
 800115e:	0022      	movs	r2, r4
 8001160:	f7ff fe9f 	bl	8000ea2 <sensirion_i2c_delayed_read_cmd>
 8001164:	0003      	movs	r3, r0
                                          SHT3X_CMD_DURATION_USEC, &status, 1);
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b005      	add	sp, #20
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	0000f32d 	.word	0x0000f32d

08001174 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8001182:	1dbb      	adds	r3, r7, #6
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <tick_to_temperature+0x28>)
 8001188:	4353      	muls	r3, r2
 800118a:	135b      	asrs	r3, r3, #13
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <tick_to_temperature+0x2c>)
 800118e:	189a      	adds	r2, r3, r2
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}
 800119c:	00005573 	.word	0x00005573
 80011a0:	ffff5038 	.word	0xffff5038

080011a4 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	0002      	movs	r2, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	1dbb      	adds	r3, r7, #6
 80011b0:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 80011b2:	1dbb      	adds	r3, r7, #6
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <tick_to_humidity+0x24>)
 80011b8:	4353      	muls	r3, r2
 80011ba:	135a      	asrs	r2, r3, #13
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	000030d4 	.word	0x000030d4

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_MspInit+0x24>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x24>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_MspInit+0x24>)
 80011de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_MspInit+0x24>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0549      	lsls	r1, r1, #21
 80011e6:	430a      	orrs	r2, r1
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	240c      	movs	r4, #12
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f002 fdba 	bl	8003d80 <memset>
  if(hi2c->Instance==I2C1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_I2C_MspInit+0x7c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d128      	bne.n	8001268 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_I2C_MspInit+0x80>)
 8001218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_I2C_MspInit+0x80>)
 800121c:	2102      	movs	r1, #2
 800121e:	430a      	orrs	r2, r1
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_I2C_MspInit+0x80>)
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800122e:	0021      	movs	r1, r4
 8001230:	187b      	adds	r3, r7, r1
 8001232:	22c0      	movs	r2, #192	; 0xc0
 8001234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2212      	movs	r2, #18
 800123a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2203      	movs	r2, #3
 8001246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2201      	movs	r2, #1
 800124c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	187b      	adds	r3, r7, r1
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_I2C_MspInit+0x84>)
 8001252:	0019      	movs	r1, r3
 8001254:	0010      	movs	r0, r2
 8001256:	f000 fac3 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_I2C_MspInit+0x80>)
 800125c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_I2C_MspInit+0x80>)
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0389      	lsls	r1, r1, #14
 8001264:	430a      	orrs	r2, r1
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b009      	add	sp, #36	; 0x24
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	40005400 	.word	0x40005400
 8001274:	40021000 	.word	0x40021000
 8001278:	50000400 	.word	0x50000400

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	2414      	movs	r4, #20
 8001286:	193b      	adds	r3, r7, r4
 8001288:	0018      	movs	r0, r3
 800128a:	2314      	movs	r3, #20
 800128c:	001a      	movs	r2, r3
 800128e:	2100      	movs	r1, #0
 8001290:	f002 fd76 	bl	8003d80 <memset>
  if(huart->Instance==LPUART1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a28      	ldr	r2, [pc, #160]	; (800133c <HAL_UART_MspInit+0xc0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d14a      	bne.n	8001334 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	02c9      	lsls	r1, r1, #11
 80012a8:	430a      	orrs	r2, r1
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012b2:	2104      	movs	r1, #4
 80012b4:	430a      	orrs	r2, r1
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	2204      	movs	r2, #4
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012ca:	2102      	movs	r1, #2
 80012cc:	430a      	orrs	r2, r1
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	2202      	movs	r2, #2
 80012e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2203      	movs	r2, #3
 80012f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	2206      	movs	r2, #6
 80012f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_UART_MspInit+0xc8>)
 80012fe:	0019      	movs	r1, r3
 8001300:	0010      	movs	r0, r2
 8001302:	f000 fa6d 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001306:	0021      	movs	r1, r4
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	00d2      	lsls	r2, r2, #3
 800130e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2202      	movs	r2, #2
 8001314:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2203      	movs	r2, #3
 8001320:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2206      	movs	r2, #6
 8001326:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	187b      	adds	r3, r7, r1
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_UART_MspInit+0xcc>)
 800132c:	0019      	movs	r1, r3
 800132e:	0010      	movs	r0, r2
 8001330:	f000 fa56 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b00b      	add	sp, #44	; 0x2c
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	40004800 	.word	0x40004800
 8001340:	40021000 	.word	0x40021000
 8001344:	50000800 	.word	0x50000800
 8001348:	50000400 	.word	0x50000400

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 f93a 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e00a      	b.n	80013a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800138c:	e000      	b.n	8001390 <_read+0x16>
 800138e:	bf00      	nop
 8001390:	0001      	movs	r1, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	60ba      	str	r2, [r7, #8]
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbf0      	blt.n	800138c <_read+0x12>
	}

return len;
 80013aa:	687b      	ldr	r3, [r7, #4]
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b006      	add	sp, #24
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e009      	b.n	80013da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	60ba      	str	r2, [r7, #8]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	0018      	movs	r0, r3
 80013d0:	e000      	b.n	80013d4 <_write+0x20>
 80013d2:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbf1      	blt.n	80013c6 <_write+0x12>
	}
	return len;
 80013e2:	687b      	ldr	r3, [r7, #4]
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b006      	add	sp, #24
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_close>:

int _close(int file)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	return -1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	425b      	negs	r3, r3
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	0192      	lsls	r2, r2, #6
 8001410:	605a      	str	r2, [r3, #4]
	return 0;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <_isatty>:

int _isatty(int file)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}

0800142e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
	return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bd80      	pop	{r7, pc}

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f002 fc5a 	bl	8003d2c <__errno>
 8001478:	0003      	movs	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	2301      	movs	r3, #1
 8001480:	425b      	negs	r3, r3
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	18d2      	adds	r2, r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b006      	add	sp, #24
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20002000 	.word	0x20002000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200000dc 	.word	0x200000dc
 80014ac:	200001d0 	.word	0x200001d0

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80014be:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <LoopForever+0x6>)
    LDR R1, [R0]
 80014c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80014c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <LoopForever+0xa>)
    CMP R1, R2
 80014c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80014ca:	d105      	bne.n	80014d8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80014ce:	4913      	ldr	r1, [pc, #76]	; (800151c <LoopForever+0x12>)
    STR R1, [R0]
 80014d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80014d4:	4913      	ldr	r1, [pc, #76]	; (8001524 <LoopForever+0x1a>)
    STR R1, [R0]
 80014d6:	6001      	str	r1, [r0, #0]

080014d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <LoopForever+0x1e>)
  ldr r1, =_edata
 80014da:	4914      	ldr	r1, [pc, #80]	; (800152c <LoopForever+0x22>)
  ldr r2, =_sidata
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <LoopForever+0x26>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80014f0:	4c11      	ldr	r4, [pc, #68]	; (8001538 <LoopForever+0x2e>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014fe:	f7ff ffd7 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 fc19 	bl	8003d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f8c5 	bl	8000694 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
   ldr   r0, =_estack
 800150c:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001510:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001514:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001518:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800151c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001520:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001524:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001530:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8001534:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001538:	200001cc 	.word	0x200001cc

0800153c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_IRQHandler>
	...

08001540 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_Init+0x3c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_Init+0x3c>)
 8001552:	2140      	movs	r1, #64	; 0x40
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f811 	bl	8001580 <HAL_InitTick>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d003      	beq.n	800156a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e001      	b.n	800156e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800156a:	f7ff fe2f 	bl	80011cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_InitTick+0x5c>)
 800158a:	681c      	ldr	r4, [r3, #0]
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_InitTick+0x60>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	0019      	movs	r1, r3
 8001592:	23fa      	movs	r3, #250	; 0xfa
 8001594:	0098      	lsls	r0, r3, #2
 8001596:	f7fe fdc9 	bl	800012c <__udivsi3>
 800159a:	0003      	movs	r3, r0
 800159c:	0019      	movs	r1, r3
 800159e:	0020      	movs	r0, r4
 80015a0:	f7fe fdc4 	bl	800012c <__udivsi3>
 80015a4:	0003      	movs	r3, r0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 f90d 	bl	80017c6 <HAL_SYSTICK_Config>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e00f      	b.n	80015d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d80b      	bhi.n	80015d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2301      	movs	r3, #1
 80015be:	425b      	negs	r3, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 f8ea 	bl	800179c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_InitTick+0x64>)
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b003      	add	sp, #12
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	20000004 	.word	0x20000004
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000008 	.word	0x20000008

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	001a      	movs	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	18d2      	adds	r2, r2, r3
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_IncTick+0x20>)
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	2000000c 	.word	0x2000000c
 8001608:	200001b8 	.word	0x200001b8

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_GetTick+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	200001b8 	.word	0x200001b8

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff fff0 	bl	800160c <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	001a      	movs	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	189b      	adds	r3, r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	f7ff ffe0 	bl	800160c <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	2000000c 	.word	0x2000000c

08001668 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <HAL_GetHalVersion+0xc>)
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	010a0500 	.word	0x010a0500

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	0002      	movs	r2, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b7f      	cmp	r3, #127	; 0x7f
 800168c:	d828      	bhi.n	80016e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168e:	4a2f      	ldr	r2, [pc, #188]	; (800174c <__NVIC_SetPriority+0xd4>)
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	33c0      	adds	r3, #192	; 0xc0
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	589b      	ldr	r3, [r3, r2]
 800169e:	1dfa      	adds	r2, r7, #7
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	0011      	movs	r1, r2
 80016a4:	2203      	movs	r2, #3
 80016a6:	400a      	ands	r2, r1
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	21ff      	movs	r1, #255	; 0xff
 80016ac:	4091      	lsls	r1, r2
 80016ae:	000a      	movs	r2, r1
 80016b0:	43d2      	mvns	r2, r2
 80016b2:	401a      	ands	r2, r3
 80016b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	019b      	lsls	r3, r3, #6
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	401a      	ands	r2, r3
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	0018      	movs	r0, r3
 80016c4:	2303      	movs	r3, #3
 80016c6:	4003      	ands	r3, r0
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016cc:	481f      	ldr	r0, [pc, #124]	; (800174c <__NVIC_SetPriority+0xd4>)
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	430a      	orrs	r2, r1
 80016d8:	33c0      	adds	r3, #192	; 0xc0
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016de:	e031      	b.n	8001744 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <__NVIC_SetPriority+0xd8>)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	0019      	movs	r1, r3
 80016e8:	230f      	movs	r3, #15
 80016ea:	400b      	ands	r3, r1
 80016ec:	3b08      	subs	r3, #8
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3306      	adds	r3, #6
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	18d3      	adds	r3, r2, r3
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	1dfa      	adds	r2, r7, #7
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	0011      	movs	r1, r2
 8001700:	2203      	movs	r2, #3
 8001702:	400a      	ands	r2, r1
 8001704:	00d2      	lsls	r2, r2, #3
 8001706:	21ff      	movs	r1, #255	; 0xff
 8001708:	4091      	lsls	r1, r2
 800170a:	000a      	movs	r2, r1
 800170c:	43d2      	mvns	r2, r2
 800170e:	401a      	ands	r2, r3
 8001710:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	401a      	ands	r2, r3
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	0018      	movs	r0, r3
 8001720:	2303      	movs	r3, #3
 8001722:	4003      	ands	r3, r0
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <__NVIC_SetPriority+0xd8>)
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	001c      	movs	r4, r3
 8001730:	230f      	movs	r3, #15
 8001732:	4023      	ands	r3, r4
 8001734:	3b08      	subs	r3, #8
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	430a      	orrs	r2, r1
 800173a:	3306      	adds	r3, #6
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	18c3      	adds	r3, r0, r3
 8001740:	3304      	adds	r3, #4
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b003      	add	sp, #12
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	1e5a      	subs	r2, r3, #1
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	045b      	lsls	r3, r3, #17
 8001764:	429a      	cmp	r2, r3
 8001766:	d301      	bcc.n	800176c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001768:	2301      	movs	r3, #1
 800176a:	e010      	b.n	800178e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <SysTick_Config+0x44>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	3a01      	subs	r2, #1
 8001772:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001774:	2301      	movs	r3, #1
 8001776:	425b      	negs	r3, r3
 8001778:	2103      	movs	r1, #3
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff ff7c 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x44>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x44>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	210f      	movs	r1, #15
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	1c02      	adds	r2, r0, #0
 80017ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b004      	add	sp, #16
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ffbf 	bl	8001754 <SysTick_Config>
 80017d6:	0003      	movs	r3, r0
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017f6:	e149      	b.n	8001a8c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4091      	lsls	r1, r2
 8001802:	000a      	movs	r2, r1
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d100      	bne.n	8001810 <HAL_GPIO_Init+0x30>
 800180e:	e13a      	b.n	8001a86 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2203      	movs	r2, #3
 8001816:	4013      	ands	r3, r2
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	409a      	lsls	r2, r3
 8001836:	0013      	movs	r3, r2
 8001838:	43da      	mvns	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	409a      	lsls	r2, r3
 800184a:	0013      	movs	r3, r2
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	43da      	mvns	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	2201      	movs	r2, #1
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	4013      	ands	r3, r2
 8001892:	2b03      	cmp	r3, #3
 8001894:	d017      	beq.n	80018c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	409a      	lsls	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	43da      	mvns	r2, r3
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2203      	movs	r2, #3
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	58d3      	ldr	r3, [r2, r3]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2207      	movs	r2, #7
 80018e4:	4013      	ands	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	43da      	mvns	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2107      	movs	r1, #7
 80018fe:	400b      	ands	r3, r1
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	6939      	ldr	r1, [r7, #16]
 8001918:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	401a      	ands	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	029b      	lsls	r3, r3, #10
 8001956:	4013      	ands	r3, r2
 8001958:	d100      	bne.n	800195c <HAL_GPIO_Init+0x17c>
 800195a:	e094      	b.n	8001a86 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <HAL_GPIO_Init+0x2c4>)
 800195e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_GPIO_Init+0x2c4>)
 8001962:	2101      	movs	r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001968:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <HAL_GPIO_Init+0x2c8>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	589b      	ldr	r3, [r3, r2]
 8001974:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2203      	movs	r2, #3
 800197a:	4013      	ands	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	409a      	lsls	r2, r3
 8001982:	0013      	movs	r3, r2
 8001984:	43da      	mvns	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	23a0      	movs	r3, #160	; 0xa0
 8001990:	05db      	lsls	r3, r3, #23
 8001992:	429a      	cmp	r2, r3
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x1de>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a44      	ldr	r2, [pc, #272]	; (8001aac <HAL_GPIO_Init+0x2cc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x1da>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x1d6>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a42      	ldr	r2, [pc, #264]	; (8001ab4 <HAL_GPIO_Init+0x2d4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x1d2>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x1e0>
 80019b2:	2306      	movs	r3, #6
 80019b4:	e004      	b.n	80019c0 <HAL_GPIO_Init+0x1e0>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_Init+0x1e0>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_GPIO_Init+0x1e0>
 80019be:	2300      	movs	r3, #0
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	2103      	movs	r1, #3
 80019c4:	400a      	ands	r2, r1
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4093      	lsls	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d0:	4935      	ldr	r1, [pc, #212]	; (8001aa8 <HAL_GPIO_Init+0x2c8>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	4013      	ands	r3, r2
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43da      	mvns	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	4013      	ands	r3, r2
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	035b      	lsls	r3, r3, #13
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43da      	mvns	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	039b      	lsls	r3, r3, #14
 8001a74:	4013      	ands	r3, r2
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_GPIO_Init+0x2d8>)
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	1e13      	subs	r3, r2, #0
 8001a96:	d000      	beq.n	8001a9a <HAL_GPIO_Init+0x2ba>
 8001a98:	e6ae      	b.n	80017f8 <HAL_GPIO_Init+0x18>
  }
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b006      	add	sp, #24
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	50000400 	.word	0x50000400
 8001ab0:	50000800 	.word	0x50000800
 8001ab4:	50001c00 	.word	0x50001c00
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	0008      	movs	r0, r1
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	1cbb      	adds	r3, r7, #2
 8001aca:	1c02      	adds	r2, r0, #0
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	1c7b      	adds	r3, r7, #1
 8001ad0:	1c0a      	adds	r2, r1, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	1c7b      	adds	r3, r7, #1
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001adc:	1cbb      	adds	r3, r7, #2
 8001ade:	881a      	ldrh	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ae4:	e003      	b.n	8001aee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ae6:	1cbb      	adds	r3, r7, #2
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e082      	b.n	8001c10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2241      	movs	r2, #65	; 0x41
 8001b0e:	5c9b      	ldrb	r3, [r3, r2]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2240      	movs	r2, #64	; 0x40
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff fb67 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2241      	movs	r2, #65	; 0x41
 8001b2a:	2124      	movs	r1, #36	; 0x24
 8001b2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	438a      	bics	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4934      	ldr	r1, [pc, #208]	; (8001c18 <HAL_I2C_Init+0x120>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4931      	ldr	r1, [pc, #196]	; (8001c1c <HAL_I2C_Init+0x124>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0209      	lsls	r1, r1, #8
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e007      	b.n	8001b86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2184      	movs	r1, #132	; 0x84
 8001b80:	0209      	lsls	r1, r1, #8
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d104      	bne.n	8001b98 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	491f      	ldr	r1, [pc, #124]	; (8001c20 <HAL_I2C_Init+0x128>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	491a      	ldr	r1, [pc, #104]	; (8001c1c <HAL_I2C_Init+0x124>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69d9      	ldr	r1, [r3, #28]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2101      	movs	r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2241      	movs	r2, #65	; 0x41
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2242      	movs	r2, #66	; 0x42
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	f0ffffff 	.word	0xf0ffffff
 8001c1c:	ffff7fff 	.word	0xffff7fff
 8001c20:	02008000 	.word	0x02008000

08001c24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	0008      	movs	r0, r1
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	0019      	movs	r1, r3
 8001c32:	230a      	movs	r3, #10
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	1c02      	adds	r2, r0, #0
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	1c0a      	adds	r2, r1, #0
 8001c40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2241      	movs	r2, #65	; 0x41
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d000      	beq.n	8001c50 <HAL_I2C_Master_Transmit+0x2c>
 8001c4e:	e0e7      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_I2C_Master_Transmit+0x3a>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e0e1      	b.n	8001e22 <HAL_I2C_Master_Transmit+0x1fe>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c66:	f7ff fcd1 	bl	800160c <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	0219      	lsls	r1, r3, #8
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2319      	movs	r3, #25
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f000 fa04 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0cc      	b.n	8001e22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2241      	movs	r2, #65	; 0x41
 8001c8c:	2121      	movs	r1, #33	; 0x21
 8001c8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2242      	movs	r2, #66	; 0x42
 8001c94:	2110      	movs	r1, #16
 8001c96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	18ba      	adds	r2, r7, r2
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	d911      	bls.n	8001ce2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	22ff      	movs	r2, #255	; 0xff
 8001cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	045c      	lsls	r4, r3, #17
 8001cce:	230a      	movs	r3, #10
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	8819      	ldrh	r1, [r3, #0]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <HAL_I2C_Master_Transmit+0x208>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	0023      	movs	r3, r4
 8001cdc:	f000 fb74 	bl	80023c8 <I2C_TransferConfig>
 8001ce0:	e075      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	049c      	lsls	r4, r3, #18
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	8819      	ldrh	r1, [r3, #0]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_I2C_Master_Transmit+0x208>)
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	0023      	movs	r3, r4
 8001d04:	f000 fb60 	bl	80023c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d08:	e061      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 f9f8 	bl	8002106 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d16:	1e03      	subs	r3, r0, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e081      	b.n	8001e22 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03a      	beq.n	8001dce <HAL_I2C_Master_Transmit+0x1aa>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d136      	bne.n	8001dce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	0013      	movs	r3, r2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	f000 f98b 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e053      	b.n	8001e22 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2bff      	cmp	r3, #255	; 0xff
 8001d82:	d911      	bls.n	8001da8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	045c      	lsls	r4, r3, #17
 8001d94:	230a      	movs	r3, #10
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	8819      	ldrh	r1, [r3, #0]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	0023      	movs	r3, r4
 8001da2:	f000 fb11 	bl	80023c8 <I2C_TransferConfig>
 8001da6:	e012      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	049c      	lsls	r4, r3, #18
 8001dbc:	230a      	movs	r3, #10
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	8819      	ldrh	r1, [r3, #0]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	0023      	movs	r3, r4
 8001dca:	f000 fafd 	bl	80023c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d198      	bne.n	8001d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 f9d0 	bl	8002184 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de4:	1e03      	subs	r3, r0, #0
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e01a      	b.n	8001e22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <HAL_I2C_Master_Transmit+0x20c>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2241      	movs	r2, #65	; 0x41
 8001e08:	2120      	movs	r1, #32
 8001e0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2242      	movs	r2, #66	; 0x42
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e000      	b.n	8001e22 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001e20:	2302      	movs	r3, #2
  }
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b007      	add	sp, #28
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	80002000 	.word	0x80002000
 8001e30:	fe00e800 	.word	0xfe00e800

08001e34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	0008      	movs	r0, r1
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	0019      	movs	r1, r3
 8001e42:	230a      	movs	r3, #10
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	1c02      	adds	r2, r0, #0
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	1c0a      	adds	r2, r1, #0
 8001e50:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2241      	movs	r2, #65	; 0x41
 8001e56:	5c9b      	ldrb	r3, [r3, r2]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d000      	beq.n	8001e60 <HAL_I2C_Master_Receive+0x2c>
 8001e5e:	e0e8      	b.n	8002032 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	5c9b      	ldrb	r3, [r3, r2]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_I2C_Master_Receive+0x3a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e0e2      	b.n	8002034 <HAL_I2C_Master_Receive+0x200>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	2101      	movs	r1, #1
 8001e74:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e76:	f7ff fbc9 	bl	800160c <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	0219      	lsls	r1, r3, #8
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2319      	movs	r3, #25
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f000 f8fc 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0cd      	b.n	8002034 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2241      	movs	r2, #65	; 0x41
 8001e9c:	2122      	movs	r1, #34	; 0x22
 8001e9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2242      	movs	r2, #66	; 0x42
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	18ba      	adds	r2, r7, r2
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d911      	bls.n	8001ef2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	22ff      	movs	r2, #255	; 0xff
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	045c      	lsls	r4, r3, #17
 8001ede:	230a      	movs	r3, #10
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	8819      	ldrh	r1, [r3, #0]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_I2C_Master_Receive+0x208>)
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	0023      	movs	r3, r4
 8001eec:	f000 fa6c 	bl	80023c8 <I2C_TransferConfig>
 8001ef0:	e076      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	049c      	lsls	r4, r3, #18
 8001f06:	230a      	movs	r3, #10
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	8819      	ldrh	r1, [r3, #0]
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_I2C_Master_Receive+0x208>)
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	0023      	movs	r3, r4
 8001f14:	f000 fa58 	bl	80023c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f18:	e062      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 f96b 	bl	80021fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e082      	b.n	8002034 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d03a      	beq.n	8001fe0 <HAL_I2C_Master_Receive+0x1ac>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d136      	bne.n	8001fe0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	f000 f882 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e053      	b.n	8002034 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d911      	bls.n	8001fba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	045c      	lsls	r4, r3, #17
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	8819      	ldrh	r1, [r3, #0]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	0023      	movs	r3, r4
 8001fb4:	f000 fa08 	bl	80023c8 <I2C_TransferConfig>
 8001fb8:	e012      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	049c      	lsls	r4, r3, #18
 8001fce:	230a      	movs	r3, #10
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	8819      	ldrh	r1, [r3, #0]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	0023      	movs	r3, r4
 8001fdc:	f000 f9f4 	bl	80023c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d197      	bne.n	8001f1a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 f8c7 	bl	8002184 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ff6:	1e03      	subs	r3, r0, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e01a      	b.n	8002034 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2220      	movs	r2, #32
 8002004:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	490b      	ldr	r1, [pc, #44]	; (8002040 <HAL_I2C_Master_Receive+0x20c>)
 8002012:	400a      	ands	r2, r1
 8002014:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2241      	movs	r2, #65	; 0x41
 800201a:	2120      	movs	r1, #32
 800201c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2242      	movs	r2, #66	; 0x42
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
  }
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b007      	add	sp, #28
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	80002400 	.word	0x80002400
 8002040:	fe00e800 	.word	0xfe00e800

08002044 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d103      	bne.n	8002062 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	2b01      	cmp	r3, #1
 800206e:	d007      	beq.n	8002080 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	619a      	str	r2, [r3, #24]
  }
}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002098:	e021      	b.n	80020de <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	d01e      	beq.n	80020de <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a0:	f7ff fab4 	bl	800160c <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d302      	bcc.n	80020b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d113      	bne.n	80020de <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	2220      	movs	r2, #32
 80020bc:	431a      	orrs	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2241      	movs	r2, #65	; 0x41
 80020c6:	2120      	movs	r1, #32
 80020c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2242      	movs	r2, #66	; 0x42
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2240      	movs	r2, #64	; 0x40
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	4013      	ands	r3, r2
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	425a      	negs	r2, r3
 80020ee:	4153      	adcs	r3, r2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	001a      	movs	r2, r3
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d0ce      	beq.n	800209a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}

08002106 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002112:	e02b      	b.n	800216c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 f8da 	bl	80022d4 <I2C_IsAcknowledgeFailed>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d001      	beq.n	8002128 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e029      	b.n	800217c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3301      	adds	r3, #1
 800212c:	d01e      	beq.n	800216c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212e:	f7ff fa6d 	bl	800160c <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d113      	bne.n	800216c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	2220      	movs	r2, #32
 800214a:	431a      	orrs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2241      	movs	r2, #65	; 0x41
 8002154:	2120      	movs	r1, #32
 8002156:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2242      	movs	r2, #66	; 0x42
 800215c:	2100      	movs	r1, #0
 800215e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e007      	b.n	800217c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	2b02      	cmp	r3, #2
 8002178:	d1cc      	bne.n	8002114 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002190:	e028      	b.n	80021e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f89b 	bl	80022d4 <I2C_IsAcknowledgeFailed>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e026      	b.n	80021f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7ff fa31 	bl	800160c <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d113      	bne.n	80021e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	2220      	movs	r2, #32
 80021c2:	431a      	orrs	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2241      	movs	r2, #65	; 0x41
 80021cc:	2120      	movs	r1, #32
 80021ce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2242      	movs	r2, #66	; 0x42
 80021d4:	2100      	movs	r1, #0
 80021d6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e007      	b.n	80021f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2220      	movs	r2, #32
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d1cf      	bne.n	8002192 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b004      	add	sp, #16
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002208:	e055      	b.n	80022b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f85f 	bl	80022d4 <I2C_IsAcknowledgeFailed>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d001      	beq.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e053      	b.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2220      	movs	r2, #32
 8002226:	4013      	ands	r3, r2
 8002228:	2b20      	cmp	r3, #32
 800222a:	d129      	bne.n	8002280 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2204      	movs	r2, #4
 8002234:	4013      	ands	r3, r2
 8002236:	2b04      	cmp	r3, #4
 8002238:	d105      	bne.n	8002246 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e03f      	b.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2220      	movs	r2, #32
 800224c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	491d      	ldr	r1, [pc, #116]	; (80022d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800225a:	400a      	ands	r2, r1
 800225c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2241      	movs	r2, #65	; 0x41
 8002268:	2120      	movs	r1, #32
 800226a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2242      	movs	r2, #66	; 0x42
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	2100      	movs	r1, #0
 800227a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e022      	b.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002280:	f7ff f9c4 	bl	800160c <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	429a      	cmp	r2, r3
 800228e:	d302      	bcc.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	2220      	movs	r2, #32
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2241      	movs	r2, #65	; 0x41
 80022a6:	2120      	movs	r1, #32
 80022a8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2240      	movs	r2, #64	; 0x40
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e007      	b.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2204      	movs	r2, #4
 80022be:	4013      	ands	r3, r2
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d1a2      	bne.n	800220a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	fe00e800 	.word	0xfe00e800

080022d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2210      	movs	r2, #16
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d164      	bne.n	80023b8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	049b      	lsls	r3, r3, #18
 80022f8:	401a      	ands	r2, r3
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	049b      	lsls	r3, r3, #18
 80022fe:	429a      	cmp	r2, r3
 8002300:	d02b      	beq.n	800235a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	01c9      	lsls	r1, r1, #7
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002314:	e021      	b.n	800235a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3301      	adds	r3, #1
 800231a:	d01e      	beq.n	800235a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231c:	f7ff f976 	bl	800160c <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d302      	bcc.n	8002332 <I2C_IsAcknowledgeFailed+0x5e>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d113      	bne.n	800235a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	2220      	movs	r2, #32
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2241      	movs	r2, #65	; 0x41
 8002342:	2120      	movs	r1, #32
 8002344:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2242      	movs	r2, #66	; 0x42
 800234a:	2100      	movs	r1, #0
 800234c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02f      	b.n	80023ba <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2220      	movs	r2, #32
 8002362:	4013      	ands	r3, r2
 8002364:	2b20      	cmp	r3, #32
 8002366:	d1d6      	bne.n	8002316 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2210      	movs	r2, #16
 800236e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff fe62 	bl	8002044 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	490e      	ldr	r1, [pc, #56]	; (80023c4 <I2C_IsAcknowledgeFailed+0xf0>)
 800238c:	400a      	ands	r2, r1
 800238e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	2204      	movs	r2, #4
 8002396:	431a      	orrs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2241      	movs	r2, #65	; 0x41
 80023a0:	2120      	movs	r1, #32
 80023a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2242      	movs	r2, #66	; 0x42
 80023a8:	2100      	movs	r1, #0
 80023aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	2100      	movs	r1, #0
 80023b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	fe00e800 	.word	0xfe00e800

080023c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	0008      	movs	r0, r1
 80023d2:	0011      	movs	r1, r2
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	240a      	movs	r4, #10
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	1c02      	adds	r2, r0, #0
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	2009      	movs	r0, #9
 80023e0:	183b      	adds	r3, r7, r0
 80023e2:	1c0a      	adds	r2, r1, #0
 80023e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	0d51      	lsrs	r1, r2, #21
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	00d2      	lsls	r2, r2, #3
 80023f4:	400a      	ands	r2, r1
 80023f6:	490e      	ldr	r1, [pc, #56]	; (8002430 <I2C_TransferConfig+0x68>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	43d2      	mvns	r2, r2
 80023fc:	401a      	ands	r2, r3
 80023fe:	0011      	movs	r1, r2
 8002400:	193b      	adds	r3, r7, r4
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	059b      	lsls	r3, r3, #22
 8002406:	0d9a      	lsrs	r2, r3, #22
 8002408:	183b      	adds	r3, r7, r0
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	0418      	lsls	r0, r3, #16
 800240e:	23ff      	movs	r3, #255	; 0xff
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	4003      	ands	r3, r0
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b005      	add	sp, #20
 800242c:	bd90      	pop	{r4, r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	03ff63ff 	.word	0x03ff63ff

08002434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2241      	movs	r2, #65	; 0x41
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	d138      	bne.n	80024bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002454:	2302      	movs	r3, #2
 8002456:	e032      	b.n	80024be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	2101      	movs	r1, #1
 800245e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2241      	movs	r2, #65	; 0x41
 8002464:	2124      	movs	r1, #36	; 0x24
 8002466:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4911      	ldr	r1, [pc, #68]	; (80024c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002484:	400a      	ands	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2101      	movs	r1, #1
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2241      	movs	r2, #65	; 0x41
 80024ac:	2120      	movs	r1, #32
 80024ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2240      	movs	r2, #64	; 0x40
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
  }
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	ffffefff 	.word	0xffffefff

080024cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2241      	movs	r2, #65	; 0x41
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d139      	bne.n	8002556 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	5c9b      	ldrb	r3, [r3, r2]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e033      	b.n	8002558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	2101      	movs	r1, #1
 80024f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2241      	movs	r2, #65	; 0x41
 80024fc:	2124      	movs	r1, #36	; 0x24
 80024fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2101      	movs	r1, #1
 800250c:	438a      	bics	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2241      	movs	r2, #65	; 0x41
 8002546:	2120      	movs	r1, #32
 8002548:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}
 8002560:	fffff0ff 	.word	0xfffff0ff

08002564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f000 fb6c 	bl	8002c50 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002578:	4bc8      	ldr	r3, [pc, #800]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	220c      	movs	r2, #12
 800257e:	4013      	ands	r3, r2
 8002580:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002582:	4bc6      	ldr	r3, [pc, #792]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	025b      	lsls	r3, r3, #9
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	4013      	ands	r3, r2
 8002596:	d100      	bne.n	800259a <HAL_RCC_OscConfig+0x36>
 8002598:	e07d      	b.n	8002696 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d007      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d112      	bne.n	80025cc <HAL_RCC_OscConfig+0x68>
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	025b      	lsls	r3, r3, #9
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10d      	bne.n	80025cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	4bba      	ldr	r3, [pc, #744]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d100      	bne.n	80025be <HAL_RCC_OscConfig+0x5a>
 80025bc:	e06a      	b.n	8002694 <HAL_RCC_OscConfig+0x130>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d166      	bne.n	8002694 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f000 fb42 	bl	8002c50 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	025b      	lsls	r3, r3, #9
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_OscConfig+0x84>
 80025d8:	4bb0      	ldr	r3, [pc, #704]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4baf      	ldr	r3, [pc, #700]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	0249      	lsls	r1, r1, #9
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e027      	b.n	8002638 <HAL_RCC_OscConfig+0xd4>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	23a0      	movs	r3, #160	; 0xa0
 80025ee:	02db      	lsls	r3, r3, #11
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10e      	bne.n	8002612 <HAL_RCC_OscConfig+0xae>
 80025f4:	4ba9      	ldr	r3, [pc, #676]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4ba8      	ldr	r3, [pc, #672]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	02c9      	lsls	r1, r1, #11
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	4ba6      	ldr	r3, [pc, #664]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4ba5      	ldr	r3, [pc, #660]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0249      	lsls	r1, r1, #9
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e012      	b.n	8002638 <HAL_RCC_OscConfig+0xd4>
 8002612:	4ba2      	ldr	r3, [pc, #648]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4ba1      	ldr	r3, [pc, #644]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002618:	49a1      	ldr	r1, [pc, #644]	; (80028a0 <HAL_RCC_OscConfig+0x33c>)
 800261a:	400a      	ands	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	4b9f      	ldr	r3, [pc, #636]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	025b      	lsls	r3, r3, #9
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4b9b      	ldr	r3, [pc, #620]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b9a      	ldr	r3, [pc, #616]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002632:	499c      	ldr	r1, [pc, #624]	; (80028a4 <HAL_RCC_OscConfig+0x340>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe ffe4 	bl	800160c <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264a:	f7fe ffdf 	bl	800160c <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	; 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e2f9      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265c:	4b8f      	ldr	r3, [pc, #572]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0xe6>
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe ffcf 	bl	800160c <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe ffca 	bl	800160c <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e2e4      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002686:	4b85      	ldr	r3, [pc, #532]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	4013      	ands	r3, r2
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x110>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d100      	bne.n	80026a2 <HAL_RCC_OscConfig+0x13e>
 80026a0:	e099      	b.n	80027d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	2220      	movs	r2, #32
 80026ac:	4013      	ands	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80026b0:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b79      	ldr	r3, [pc, #484]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80026b6:	2120      	movs	r1, #32
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	2220      	movs	r2, #32
 80026c0:	4393      	bics	r3, r2
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d13e      	bne.n	800274e <HAL_RCC_OscConfig+0x1ea>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d13b      	bne.n	800274e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80026d6:	4b71      	ldr	r3, [pc, #452]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2204      	movs	r2, #4
 80026dc:	4013      	ands	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_RCC_OscConfig+0x186>
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e2b2      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b6c      	ldr	r3, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a6e      	ldr	r2, [pc, #440]	; (80028a8 <HAL_RCC_OscConfig+0x344>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	021a      	lsls	r2, r3, #8
 80026fa:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2209      	movs	r2, #9
 8002706:	4393      	bics	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002712:	f000 fbeb 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002716:	0001      	movs	r1, r0
 8002718:	4b60      	ldr	r3, [pc, #384]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	220f      	movs	r2, #15
 8002720:	4013      	ands	r3, r2
 8002722:	4a62      	ldr	r2, [pc, #392]	; (80028ac <HAL_RCC_OscConfig+0x348>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	000a      	movs	r2, r1
 8002728:	40da      	lsrs	r2, r3
 800272a:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <HAL_RCC_OscConfig+0x34c>)
 800272c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800272e:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <HAL_RCC_OscConfig+0x350>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2513      	movs	r5, #19
 8002734:	197c      	adds	r4, r7, r5
 8002736:	0018      	movs	r0, r3
 8002738:	f7fe ff22 	bl	8001580 <HAL_InitTick>
 800273c:	0003      	movs	r3, r0
 800273e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002740:	197b      	adds	r3, r7, r5
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d046      	beq.n	80027d6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002748:	197b      	adds	r3, r7, r5
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	e280      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d027      	beq.n	80027a4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002754:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2209      	movs	r2, #9
 800275a:	4393      	bics	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe ff51 	bl	800160c <HAL_GetTick>
 800276a:	0003      	movs	r3, r0
 800276c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe ff4c 	bl	800160c <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e266      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002782:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2204      	movs	r2, #4
 8002788:	4013      	ands	r3, r2
 800278a:	d0f1      	beq.n	8002770 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b43      	ldr	r3, [pc, #268]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_RCC_OscConfig+0x344>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	e018      	b.n	80027d6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a4:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b3c      	ldr	r3, [pc, #240]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	438a      	bics	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe ff2c 	bl	800160c <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe ff27 	bl	800160c <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e241      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	d1f1      	bne.n	80027ba <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2210      	movs	r2, #16
 80027dc:	4013      	ands	r3, r2
 80027de:	d100      	bne.n	80027e2 <HAL_RCC_OscConfig+0x27e>
 80027e0:	e0a1      	b.n	8002926 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d140      	bne.n	800286a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e8:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCC_OscConfig+0x338>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x29c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e227      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <HAL_RCC_OscConfig+0x354>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	0a19      	lsrs	r1, r3, #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	061a      	lsls	r2, r3, #24
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	0b5b      	lsrs	r3, r3, #13
 800282e:	3301      	adds	r3, #1
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	0212      	lsls	r2, r2, #8
 8002834:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	210f      	movs	r1, #15
 800283e:	400b      	ands	r3, r1
 8002840:	491a      	ldr	r1, [pc, #104]	; (80028ac <HAL_RCC_OscConfig+0x348>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCC_OscConfig+0x34c>)
 8002848:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_RCC_OscConfig+0x350>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2513      	movs	r5, #19
 8002850:	197c      	adds	r4, r7, r5
 8002852:	0018      	movs	r0, r3
 8002854:	f7fe fe94 	bl	8001580 <HAL_InitTick>
 8002858:	0003      	movs	r3, r0
 800285a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800285c:	197b      	adds	r3, r7, r5
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d060      	beq.n	8002926 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002864:	197b      	adds	r3, r7, r5
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	e1f2      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03f      	beq.n	80028f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0049      	lsls	r1, r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fec4 	bl	800160c <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002888:	e018      	b.n	80028bc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800288a:	f7fe febf 	bl	800160c <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d911      	bls.n	80028bc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1d9      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
 800289c:	40021000 	.word	0x40021000
 80028a0:	fffeffff 	.word	0xfffeffff
 80028a4:	fffbffff 	.word	0xfffbffff
 80028a8:	ffffe0ff 	.word	0xffffe0ff
 80028ac:	08004f24 	.word	0x08004f24
 80028b0:	20000004 	.word	0x20000004
 80028b4:	20000008 	.word	0x20000008
 80028b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028bc:	4bc9      	ldr	r3, [pc, #804]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4013      	ands	r3, r2
 80028c6:	d0e0      	beq.n	800288a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c8:	4bc6      	ldr	r3, [pc, #792]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4ac6      	ldr	r2, [pc, #792]	; (8002be8 <HAL_RCC_OscConfig+0x684>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1a      	ldr	r2, [r3, #32]
 80028d6:	4bc3      	ldr	r3, [pc, #780]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028dc:	4bc1      	ldr	r3, [pc, #772]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	0a19      	lsrs	r1, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	061a      	lsls	r2, r3, #24
 80028ea:	4bbe      	ldr	r3, [pc, #760]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	e019      	b.n	8002926 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028f2:	4bbc      	ldr	r3, [pc, #752]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4bbb      	ldr	r3, [pc, #748]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80028f8:	49bc      	ldr	r1, [pc, #752]	; (8002bec <HAL_RCC_OscConfig+0x688>)
 80028fa:	400a      	ands	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fe85 	bl	800160c <HAL_GetTick>
 8002902:	0003      	movs	r3, r0
 8002904:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002908:	f7fe fe80 	bl	800160c <HAL_GetTick>
 800290c:	0002      	movs	r2, r0
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e19a      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800291a:	4bb2      	ldr	r3, [pc, #712]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4013      	ands	r3, r2
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2208      	movs	r2, #8
 800292c:	4013      	ands	r3, r2
 800292e:	d036      	beq.n	800299e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d019      	beq.n	800296c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002938:	4baa      	ldr	r3, [pc, #680]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 800293a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800293c:	4ba9      	ldr	r3, [pc, #676]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 800293e:	2101      	movs	r1, #1
 8002940:	430a      	orrs	r2, r1
 8002942:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7fe fe62 	bl	800160c <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe fe5d 	bl	800160c <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e177      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002960:	4ba0      	ldr	r3, [pc, #640]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002964:	2202      	movs	r2, #2
 8002966:	4013      	ands	r3, r2
 8002968:	d0f1      	beq.n	800294e <HAL_RCC_OscConfig+0x3ea>
 800296a:	e018      	b.n	800299e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296c:	4b9d      	ldr	r3, [pc, #628]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 800296e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002970:	4b9c      	ldr	r3, [pc, #624]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002972:	2101      	movs	r1, #1
 8002974:	438a      	bics	r2, r1
 8002976:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7fe fe48 	bl	800160c <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe fe43 	bl	800160c <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e15d      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002994:	4b93      	ldr	r3, [pc, #588]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d1f1      	bne.n	8002982 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2204      	movs	r2, #4
 80029a4:	4013      	ands	r3, r2
 80029a6:	d100      	bne.n	80029aa <HAL_RCC_OscConfig+0x446>
 80029a8:	e0ae      	b.n	8002b08 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	2023      	movs	r0, #35	; 0x23
 80029ac:	183b      	adds	r3, r7, r0
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b8c      	ldr	r3, [pc, #560]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80029b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	055b      	lsls	r3, r3, #21
 80029ba:	4013      	ands	r3, r2
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80029c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c2:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	0549      	lsls	r1, r1, #21
 80029c8:	430a      	orrs	r2, r1
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029cc:	183b      	adds	r3, r7, r0
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	4b87      	ldr	r3, [pc, #540]	; (8002bf0 <HAL_RCC_OscConfig+0x68c>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d11a      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029de:	4b84      	ldr	r3, [pc, #528]	; (8002bf0 <HAL_RCC_OscConfig+0x68c>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b83      	ldr	r3, [pc, #524]	; (8002bf0 <HAL_RCC_OscConfig+0x68c>)
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	0049      	lsls	r1, r1, #1
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ec:	f7fe fe0e 	bl	800160c <HAL_GetTick>
 80029f0:	0003      	movs	r3, r0
 80029f2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe fe09 	bl	800160c <HAL_GetTick>
 80029fa:	0002      	movs	r2, r0
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b64      	cmp	r3, #100	; 0x64
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e123      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <HAL_RCC_OscConfig+0x68c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4013      	ands	r3, r2
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4cc>
 8002a20:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a24:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a26:	2180      	movs	r1, #128	; 0x80
 8002a28:	0049      	lsls	r1, r1, #1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a2e:	e031      	b.n	8002a94 <HAL_RCC_OscConfig+0x530>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4ee>
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a3c:	4b69      	ldr	r3, [pc, #420]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a3e:	496b      	ldr	r1, [pc, #428]	; (8002bec <HAL_RCC_OscConfig+0x688>)
 8002a40:	400a      	ands	r2, r1
 8002a42:	651a      	str	r2, [r3, #80]	; 0x50
 8002a44:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a4a:	496a      	ldr	r1, [pc, #424]	; (8002bf4 <HAL_RCC_OscConfig+0x690>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a50:	e020      	b.n	8002a94 <HAL_RCC_OscConfig+0x530>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	23a0      	movs	r3, #160	; 0xa0
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10e      	bne.n	8002a7c <HAL_RCC_OscConfig+0x518>
 8002a5e:	4b61      	ldr	r3, [pc, #388]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a62:	4b60      	ldr	r3, [pc, #384]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	00c9      	lsls	r1, r1, #3
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a6c:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a70:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	0049      	lsls	r1, r1, #1
 8002a76:	430a      	orrs	r2, r1
 8002a78:	651a      	str	r2, [r3, #80]	; 0x50
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x530>
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a82:	495a      	ldr	r1, [pc, #360]	; (8002bec <HAL_RCC_OscConfig+0x688>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	651a      	str	r2, [r3, #80]	; 0x50
 8002a88:	4b56      	ldr	r3, [pc, #344]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a8c:	4b55      	ldr	r3, [pc, #340]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002a8e:	4959      	ldr	r1, [pc, #356]	; (8002bf4 <HAL_RCC_OscConfig+0x690>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fdb6 	bl	800160c <HAL_GetTick>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa4:	e009      	b.n	8002aba <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fdb1 	bl	800160c <HAL_GetTick>
 8002aaa:	0002      	movs	r2, r0
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	4a51      	ldr	r2, [pc, #324]	; (8002bf8 <HAL_RCC_OscConfig+0x694>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0ca      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aba:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d0ef      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x542>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fda0 	bl	800160c <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fd9b 	bl	800160c <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	4a46      	ldr	r2, [pc, #280]	; (8002bf8 <HAL_RCC_OscConfig+0x694>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0b4      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d1ef      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af2:	2323      	movs	r3, #35	; 0x23
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b02:	493e      	ldr	r1, [pc, #248]	; (8002bfc <HAL_RCC_OscConfig+0x698>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x5ae>
 8002b10:	e09d      	b.n	8002c4e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d100      	bne.n	8002b1a <HAL_RCC_OscConfig+0x5b6>
 8002b18:	e076      	b.n	8002c08 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d145      	bne.n	8002bae <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b28:	4935      	ldr	r1, [pc, #212]	; (8002c00 <HAL_RCC_OscConfig+0x69c>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fd6d 	bl	800160c <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fd68 	bl	800160c <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e082      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	049b      	lsls	r3, r3, #18
 8002b52:	4013      	ands	r3, r2
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a2a      	ldr	r2, [pc, #168]	; (8002c04 <HAL_RCC_OscConfig+0x6a0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0449      	lsls	r1, r1, #17
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe fd42 	bl	800160c <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fd3d 	bl	800160c <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e057      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	049b      	lsls	r3, r3, #18
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x62a>
 8002bac:	e04f      	b.n	8002c4e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002bb4:	4912      	ldr	r1, [pc, #72]	; (8002c00 <HAL_RCC_OscConfig+0x69c>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7fe fd27 	bl	800160c <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fd22 	bl	800160c <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e03c      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bd6:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_OscConfig+0x680>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	049b      	lsls	r3, r3, #18
 8002bde:	4013      	ands	r3, r2
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x660>
 8002be2:	e034      	b.n	8002c4e <HAL_RCC_OscConfig+0x6ea>
 8002be4:	40021000 	.word	0x40021000
 8002be8:	ffff1fff 	.word	0xffff1fff
 8002bec:	fffffeff 	.word	0xfffffeff
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	fffffbff 	.word	0xfffffbff
 8002bf8:	00001388 	.word	0x00001388
 8002bfc:	efffffff 	.word	0xefffffff
 8002c00:	feffffff 	.word	0xfeffffff
 8002c04:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCC_OscConfig+0x6f4>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	401a      	ands	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d10f      	bne.n	8002c4a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	23f0      	movs	r3, #240	; 0xf0
 8002c2e:	039b      	lsls	r3, r3, #14
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	23c0      	movs	r3, #192	; 0xc0
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	401a      	ands	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b00a      	add	sp, #40	; 0x28
 8002c56:	bdb0      	pop	{r4, r5, r7, pc}
 8002c58:	40021000 	.word	0x40021000

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b5b0      	push	{r4, r5, r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e128      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b96      	ldr	r3, [pc, #600]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2201      	movs	r2, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d91e      	bls.n	8002cbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4393      	bics	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	4b90      	ldr	r3, [pc, #576]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c90:	f7fe fcbc 	bl	800160c <HAL_GetTick>
 8002c94:	0003      	movs	r3, r0
 8002c96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c98:	e009      	b.n	8002cae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7fe fcb7 	bl	800160c <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_ClockConfig+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e109      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc6:	4b83      	ldr	r3, [pc, #524]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	22f0      	movs	r2, #240	; 0xf0
 8002ccc:	4393      	bics	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	4b7f      	ldr	r3, [pc, #508]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
 8002ce4:	e089      	b.n	8002dfa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cee:	4b79      	ldr	r3, [pc, #484]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d120      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0e1      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d06:	4b73      	ldr	r3, [pc, #460]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	049b      	lsls	r3, r3, #18
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d114      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0d5      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1e:	4b6d      	ldr	r3, [pc, #436]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	d109      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0ca      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d2c:	4b69      	ldr	r3, [pc, #420]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0c2      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3c:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2203      	movs	r2, #3
 8002d42:	4393      	bics	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7fe fc5c 	bl	800160c <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d60:	e009      	b.n	8002d76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f7fe fc53 	bl	800160c <HAL_GetTick>
 8002d66:	0002      	movs	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x274>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0a5      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d76:	4b57      	ldr	r3, [pc, #348]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d1ef      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x106>
 8002d82:	e03a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d111      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	e009      	b.n	8002da2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8e:	f7fe fc3d 	bl	800160c <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	4a4d      	ldr	r2, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x274>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e08f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da2:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	220c      	movs	r2, #12
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d1ef      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x132>
 8002dae:	e024      	b.n	8002dfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d11b      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db8:	e009      	b.n	8002dce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dba:	f7fe fc27 	bl	800160c <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	4a42      	ldr	r2, [pc, #264]	; (8002ed0 <HAL_RCC_ClockConfig+0x274>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e079      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dce:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d1ef      	bne.n	8002dba <HAL_RCC_ClockConfig+0x15e>
 8002dda:	e00e      	b.n	8002dfa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7fe fc16 	bl	800160c <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <HAL_RCC_ClockConfig+0x274>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e068      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002df0:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	220c      	movs	r2, #12
 8002df6:	4013      	ands	r3, r2
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4013      	ands	r3, r2
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d21e      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4393      	bics	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e1a:	f7fe fbf7 	bl	800160c <HAL_GetTick>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	e009      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fbf2 	bl	800160c <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	4a28      	ldr	r2, [pc, #160]	; (8002ed0 <HAL_RCC_ClockConfig+0x274>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e044      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d1ee      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <HAL_RCC_ClockConfig+0x27c>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2208      	movs	r2, #8
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <HAL_RCC_ClockConfig+0x280>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	00da      	lsls	r2, r3, #3
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e80:	430a      	orrs	r2, r1
 8002e82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e84:	f000 f832 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002e88:	0001      	movs	r1, r0
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	220f      	movs	r2, #15
 8002e92:	4013      	ands	r3, r2
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_RCC_ClockConfig+0x284>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	000a      	movs	r2, r1
 8002e9a:	40da      	lsrs	r2, r3
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_RCC_ClockConfig+0x288>)
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_ClockConfig+0x28c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	250b      	movs	r5, #11
 8002ea6:	197c      	adds	r4, r7, r5
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7fe fb69 	bl	8001580 <HAL_InitTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002eb2:	197b      	adds	r3, r7, r5
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002eba:	197b      	adds	r3, r7, r5
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	00001388 	.word	0x00001388
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	fffff8ff 	.word	0xfffff8ff
 8002edc:	ffffc7ff 	.word	0xffffc7ff
 8002ee0:	08004f24 	.word	0x08004f24
 8002ee4:	20000004 	.word	0x20000004
 8002ee8:	20000008 	.word	0x20000008

08002eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efa:	230c      	movs	r3, #12
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d014      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x40>
 8002f02:	d900      	bls.n	8002f06 <HAL_RCC_GetSysClockFreq+0x1a>
 8002f04:	e07b      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x112>
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x24>
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f0e:	e076      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f10:	4b44      	ldr	r3, [pc, #272]	; (8003024 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002f1a:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002f1e:	e07c      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002f20:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_RCC_GetSysClockFreq+0x140>)
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f24:	e079      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f26:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f2a:	e076      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	0c9a      	lsrs	r2, r3, #18
 8002f30:	230f      	movs	r3, #15
 8002f32:	401a      	ands	r2, r3
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_GetSysClockFreq+0x148>)
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	0d9a      	lsrs	r2, r3, #22
 8002f3e:	2303      	movs	r3, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	3301      	adds	r3, #1
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	025b      	lsls	r3, r3, #9
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d01a      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	4a35      	ldr	r2, [pc, #212]	; (8003030 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	69b8      	ldr	r0, [r7, #24]
 8002f60:	69f9      	ldr	r1, [r7, #28]
 8002f62:	f7fd fa79 	bl	8000458 <__aeabi_lmul>
 8002f66:	0002      	movs	r2, r0
 8002f68:	000b      	movs	r3, r1
 8002f6a:	0010      	movs	r0, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f7fd fa4d 	bl	8000418 <__aeabi_uldivmod>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	000b      	movs	r3, r1
 8002f82:	0013      	movs	r3, r2
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
 8002f86:	e037      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d01a      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4a23      	ldr	r2, [pc, #140]	; (8003028 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	68b8      	ldr	r0, [r7, #8]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	f7fd fa59 	bl	8000458 <__aeabi_lmul>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	000b      	movs	r3, r1
 8002faa:	0010      	movs	r0, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f7fd fa2d 	bl	8000418 <__aeabi_uldivmod>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	0013      	movs	r3, r2
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc6:	e017      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	0018      	movs	r0, r3
 8002fcc:	2300      	movs	r3, #0
 8002fce:	0019      	movs	r1, r3
 8002fd0:	4a16      	ldr	r2, [pc, #88]	; (800302c <HAL_RCC_GetSysClockFreq+0x140>)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f7fd fa40 	bl	8000458 <__aeabi_lmul>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	000b      	movs	r3, r1
 8002fdc:	0010      	movs	r0, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	001c      	movs	r4, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	001d      	movs	r5, r3
 8002fe8:	0022      	movs	r2, r4
 8002fea:	002b      	movs	r3, r5
 8002fec:	f7fd fa14 	bl	8000418 <__aeabi_uldivmod>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ffc:	e00d      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_GetSysClockFreq+0x138>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0b5b      	lsrs	r3, r3, #13
 8003004:	2207      	movs	r2, #7
 8003006:	4013      	ands	r3, r2
 8003008:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	3301      	adds	r3, #1
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	0212      	lsls	r2, r2, #8
 8003012:	409a      	lsls	r2, r3
 8003014:	0013      	movs	r3, r2
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003018:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b00e      	add	sp, #56	; 0x38
 8003022:	bdb0      	pop	{r4, r5, r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	003d0900 	.word	0x003d0900
 800302c:	00f42400 	.word	0x00f42400
 8003030:	007a1200 	.word	0x007a1200
 8003034:	08004f3c 	.word	0x08004f3c

08003038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b02      	ldr	r3, [pc, #8]	; (8003048 <HAL_RCC_GetHCLKFreq+0x10>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff2 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003054:	0001      	movs	r1, r0
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	2207      	movs	r2, #7
 800305e:	4013      	ands	r3, r2
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	40d9      	lsrs	r1, r3
 8003066:	000b      	movs	r3, r1
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021000 	.word	0x40021000
 8003074:	08004f34 	.word	0x08004f34

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800307c:	f7ff ffdc 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003080:	0001      	movs	r1, r0
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0adb      	lsrs	r3, r3, #11
 8003088:	2207      	movs	r2, #7
 800308a:	4013      	ands	r3, r2
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	40d9      	lsrs	r1, r3
 8003092:	000b      	movs	r3, r1
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	40021000 	.word	0x40021000
 80030a0:	08004f34 	.word	0x08004f34

080030a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80030ac:	2017      	movs	r0, #23
 80030ae:	183b      	adds	r3, r7, r0
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2220      	movs	r2, #32
 80030ba:	4013      	ands	r3, r2
 80030bc:	d100      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80030be:	e0c2      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c0:	4b81      	ldr	r3, [pc, #516]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80030c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	055b      	lsls	r3, r3, #21
 80030c8:	4013      	ands	r3, r2
 80030ca:	d109      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	4b7e      	ldr	r3, [pc, #504]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80030ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d0:	4b7d      	ldr	r3, [pc, #500]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	0549      	lsls	r1, r1, #21
 80030d6:	430a      	orrs	r2, r1
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80030da:	183b      	adds	r3, r7, r0
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	d11a      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ec:	4b77      	ldr	r3, [pc, #476]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	0049      	lsls	r1, r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fa87 	bl	800160c <HAL_GetTick>
 80030fe:	0003      	movs	r3, r0
 8003100:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	e008      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fe fa82 	bl	800160c <HAL_GetTick>
 8003108:	0002      	movs	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0d4      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b6d      	ldr	r3, [pc, #436]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d0f0      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003122:	4b69      	ldr	r3, [pc, #420]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	23c0      	movs	r3, #192	; 0xc0
 8003128:	039b      	lsls	r3, r3, #14
 800312a:	4013      	ands	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	23c0      	movs	r3, #192	; 0xc0
 8003134:	039b      	lsls	r3, r3, #14
 8003136:	4013      	ands	r3, r2
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	d013      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	23c0      	movs	r3, #192	; 0xc0
 8003144:	029b      	lsls	r3, r3, #10
 8003146:	401a      	ands	r2, r3
 8003148:	23c0      	movs	r3, #192	; 0xc0
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	429a      	cmp	r2, r3
 800314e:	d10a      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003150:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	029b      	lsls	r3, r3, #10
 8003158:	401a      	ands	r2, r3
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	029b      	lsls	r3, r3, #10
 800315e:	429a      	cmp	r2, r3
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0ac      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003166:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003168:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316a:	23c0      	movs	r3, #192	; 0xc0
 800316c:	029b      	lsls	r3, r3, #10
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	23c0      	movs	r3, #192	; 0xc0
 800317e:	029b      	lsls	r3, r3, #10
 8003180:	4013      	ands	r3, r2
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d033      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	4013      	ands	r3, r2
 8003190:	d02e      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003192:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	4a4e      	ldr	r2, [pc, #312]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319c:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800319e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a0:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	0309      	lsls	r1, r1, #12
 80031a6:	430a      	orrs	r2, r1
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ae:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031b0:	4948      	ldr	r1, [pc, #288]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d014      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fa21 	bl	800160c <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ce:	e009      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe fa1c 	bl	800160c <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	4a3f      	ldr	r2, [pc, #252]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e06d      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e4:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d0ef      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	23c0      	movs	r3, #192	; 0xc0
 80031f6:	029b      	lsls	r3, r3, #10
 80031f8:	401a      	ands	r2, r3
 80031fa:	23c0      	movs	r3, #192	; 0xc0
 80031fc:	029b      	lsls	r3, r3, #10
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10c      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a35      	ldr	r2, [pc, #212]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	039b      	lsls	r3, r3, #14
 8003214:	401a      	ands	r2, r3
 8003216:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800321e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	23c0      	movs	r3, #192	; 0xc0
 8003226:	029b      	lsls	r3, r3, #10
 8003228:	401a      	ands	r2, r3
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800322c:	430a      	orrs	r2, r1
 800322e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003230:	2317      	movs	r3, #23
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d105      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800323c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323e:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003240:	4927      	ldr	r1, [pc, #156]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003242:	400a      	ands	r2, r1
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	220c      	movs	r2, #12
 8003256:	4393      	bics	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003260:	430a      	orrs	r2, r1
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2204      	movs	r2, #4
 800326a:	4013      	ands	r3, r2
 800326c:	d009      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003274:	4013      	ands	r3, r2
 8003276:	0019      	movs	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800327e:	430a      	orrs	r2, r1
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2208      	movs	r2, #8
 8003288:	4013      	ands	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800329c:	430a      	orrs	r2, r1
 800329e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	4013      	ands	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b006      	add	sp, #24
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
 80032d0:	fffcffff 	.word	0xfffcffff
 80032d4:	fff7ffff 	.word	0xfff7ffff
 80032d8:	00001388 	.word	0x00001388
 80032dc:	ffcfffff 	.word	0xffcfffff
 80032e0:	efffffff 	.word	0xefffffff
 80032e4:	fffff3ff 	.word	0xfffff3ff
 80032e8:	ffffcfff 	.word	0xffffcfff
 80032ec:	fff3ffff 	.word	0xfff3ffff

080032f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e044      	b.n	800338c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2274      	movs	r2, #116	; 0x74
 800330e:	2100      	movs	r1, #0
 8003310:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd ffb1 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2224      	movs	r2, #36	; 0x24
 800331e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f8d8 	bl	80034e8 <UART_SetConfig>
 8003338:	0003      	movs	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e024      	b.n	800338c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 fb2d 	bl	80039ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	490d      	ldr	r1, [pc, #52]	; (8003394 <HAL_UART_Init+0xa4>)
 800335e:	400a      	ands	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	212a      	movs	r1, #42	; 0x2a
 800336e:	438a      	bics	r2, r1
 8003370:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	430a      	orrs	r2, r1
 8003380:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 fbc5 	bl	8003b14 <UART_CheckIdleState>
 800338a:	0003      	movs	r3, r0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}
 8003394:	ffffb7ff 	.word	0xffffb7ff

08003398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	1dbb      	adds	r3, r7, #6
 80033a6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d000      	beq.n	80033b2 <HAL_UART_Transmit+0x1a>
 80033b0:	e095      	b.n	80034de <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_UART_Transmit+0x28>
 80033b8:	1dbb      	adds	r3, r7, #6
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e08d      	b.n	80034e0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	015b      	lsls	r3, r3, #5
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d109      	bne.n	80033e4 <HAL_UART_Transmit+0x4c>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2201      	movs	r2, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	d001      	beq.n	80033e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e07d      	b.n	80034e0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2274      	movs	r2, #116	; 0x74
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Transmit+0x5a>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e076      	b.n	80034e0 <HAL_UART_Transmit+0x148>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2274      	movs	r2, #116	; 0x74
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	2100      	movs	r1, #0
 8003400:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2221      	movs	r2, #33	; 0x21
 8003406:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003408:	f7fe f900 	bl	800160c <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1dba      	adds	r2, r7, #6
 8003414:	2150      	movs	r1, #80	; 0x50
 8003416:	8812      	ldrh	r2, [r2, #0]
 8003418:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1dba      	adds	r2, r7, #6
 800341e:	2152      	movs	r1, #82	; 0x52
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	015b      	lsls	r3, r3, #5
 800342c:	429a      	cmp	r2, r3
 800342e:	d108      	bne.n	8003442 <HAL_UART_Transmit+0xaa>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e003      	b.n	800344a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2274      	movs	r2, #116	; 0x74
 800344e:	2100      	movs	r1, #0
 8003450:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003452:	e02c      	b.n	80034ae <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	0013      	movs	r3, r2
 800345e:	2200      	movs	r2, #0
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	f000 fb9f 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e038      	b.n	80034e0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	001a      	movs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	05d2      	lsls	r2, r2, #23
 8003480:	0dd2      	lsrs	r2, r2, #23
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	3302      	adds	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e007      	b.n	800349c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2252      	movs	r2, #82	; 0x52
 80034a0:	5a9b      	ldrh	r3, [r3, r2]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b299      	uxth	r1, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2252      	movs	r2, #82	; 0x52
 80034ac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2252      	movs	r2, #82	; 0x52
 80034b2:	5a9b      	ldrh	r3, [r3, r2]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1cc      	bne.n	8003454 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	0013      	movs	r3, r2
 80034c4:	2200      	movs	r2, #0
 80034c6:	2140      	movs	r1, #64	; 0x40
 80034c8:	f000 fb6c 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 80034cc:	1e03      	subs	r3, r0, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e005      	b.n	80034e0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b008      	add	sp, #32
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b5b0      	push	{r4, r5, r7, lr}
 80034ea:	b08e      	sub	sp, #56	; 0x38
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f0:	231a      	movs	r3, #26
 80034f2:	2218      	movs	r2, #24
 80034f4:	4694      	mov	ip, r2
 80034f6:	44bc      	add	ip, r7
 80034f8:	4463      	add	r3, ip
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	431a      	orrs	r2, r3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	431a      	orrs	r2, r3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4313      	orrs	r3, r2
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4abc      	ldr	r2, [pc, #752]	; (8003810 <UART_SetConfig+0x328>)
 800351e:	4013      	ands	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4ab8      	ldr	r2, [pc, #736]	; (8003814 <UART_SetConfig+0x32c>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4ab2      	ldr	r2, [pc, #712]	; (8003818 <UART_SetConfig+0x330>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800355a:	4313      	orrs	r3, r2
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4aad      	ldr	r2, [pc, #692]	; (800381c <UART_SetConfig+0x334>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4aa9      	ldr	r2, [pc, #676]	; (8003820 <UART_SetConfig+0x338>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d136      	bne.n	80035ec <UART_SetConfig+0x104>
 800357e:	4ba9      	ldr	r3, [pc, #676]	; (8003824 <UART_SetConfig+0x33c>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	220c      	movs	r2, #12
 8003584:	4013      	ands	r3, r2
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d020      	beq.n	80035cc <UART_SetConfig+0xe4>
 800358a:	d827      	bhi.n	80035dc <UART_SetConfig+0xf4>
 800358c:	2b08      	cmp	r3, #8
 800358e:	d00d      	beq.n	80035ac <UART_SetConfig+0xc4>
 8003590:	d824      	bhi.n	80035dc <UART_SetConfig+0xf4>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <UART_SetConfig+0xb4>
 8003596:	2b04      	cmp	r3, #4
 8003598:	d010      	beq.n	80035bc <UART_SetConfig+0xd4>
 800359a:	e01f      	b.n	80035dc <UART_SetConfig+0xf4>
 800359c:	231b      	movs	r3, #27
 800359e:	2218      	movs	r2, #24
 80035a0:	4694      	mov	ip, r2
 80035a2:	44bc      	add	ip, r7
 80035a4:	4463      	add	r3, ip
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e06f      	b.n	800368c <UART_SetConfig+0x1a4>
 80035ac:	231b      	movs	r3, #27
 80035ae:	2218      	movs	r2, #24
 80035b0:	4694      	mov	ip, r2
 80035b2:	44bc      	add	ip, r7
 80035b4:	4463      	add	r3, ip
 80035b6:	2202      	movs	r2, #2
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e067      	b.n	800368c <UART_SetConfig+0x1a4>
 80035bc:	231b      	movs	r3, #27
 80035be:	2218      	movs	r2, #24
 80035c0:	4694      	mov	ip, r2
 80035c2:	44bc      	add	ip, r7
 80035c4:	4463      	add	r3, ip
 80035c6:	2204      	movs	r2, #4
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e05f      	b.n	800368c <UART_SetConfig+0x1a4>
 80035cc:	231b      	movs	r3, #27
 80035ce:	2218      	movs	r2, #24
 80035d0:	4694      	mov	ip, r2
 80035d2:	44bc      	add	ip, r7
 80035d4:	4463      	add	r3, ip
 80035d6:	2208      	movs	r2, #8
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e057      	b.n	800368c <UART_SetConfig+0x1a4>
 80035dc:	231b      	movs	r3, #27
 80035de:	2218      	movs	r2, #24
 80035e0:	4694      	mov	ip, r2
 80035e2:	44bc      	add	ip, r7
 80035e4:	4463      	add	r3, ip
 80035e6:	2210      	movs	r2, #16
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e04f      	b.n	800368c <UART_SetConfig+0x1a4>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a89      	ldr	r2, [pc, #548]	; (8003818 <UART_SetConfig+0x330>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d143      	bne.n	800367e <UART_SetConfig+0x196>
 80035f6:	4b8b      	ldr	r3, [pc, #556]	; (8003824 <UART_SetConfig+0x33c>)
 80035f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035fa:	23c0      	movs	r3, #192	; 0xc0
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	4013      	ands	r3, r2
 8003600:	22c0      	movs	r2, #192	; 0xc0
 8003602:	0112      	lsls	r2, r2, #4
 8003604:	4293      	cmp	r3, r2
 8003606:	d02a      	beq.n	800365e <UART_SetConfig+0x176>
 8003608:	22c0      	movs	r2, #192	; 0xc0
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	4293      	cmp	r3, r2
 800360e:	d82e      	bhi.n	800366e <UART_SetConfig+0x186>
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	4293      	cmp	r3, r2
 8003616:	d012      	beq.n	800363e <UART_SetConfig+0x156>
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	4293      	cmp	r3, r2
 800361e:	d826      	bhi.n	800366e <UART_SetConfig+0x186>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <UART_SetConfig+0x146>
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	00d2      	lsls	r2, r2, #3
 8003628:	4293      	cmp	r3, r2
 800362a:	d010      	beq.n	800364e <UART_SetConfig+0x166>
 800362c:	e01f      	b.n	800366e <UART_SetConfig+0x186>
 800362e:	231b      	movs	r3, #27
 8003630:	2218      	movs	r2, #24
 8003632:	4694      	mov	ip, r2
 8003634:	44bc      	add	ip, r7
 8003636:	4463      	add	r3, ip
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e026      	b.n	800368c <UART_SetConfig+0x1a4>
 800363e:	231b      	movs	r3, #27
 8003640:	2218      	movs	r2, #24
 8003642:	4694      	mov	ip, r2
 8003644:	44bc      	add	ip, r7
 8003646:	4463      	add	r3, ip
 8003648:	2202      	movs	r2, #2
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e01e      	b.n	800368c <UART_SetConfig+0x1a4>
 800364e:	231b      	movs	r3, #27
 8003650:	2218      	movs	r2, #24
 8003652:	4694      	mov	ip, r2
 8003654:	44bc      	add	ip, r7
 8003656:	4463      	add	r3, ip
 8003658:	2204      	movs	r2, #4
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e016      	b.n	800368c <UART_SetConfig+0x1a4>
 800365e:	231b      	movs	r3, #27
 8003660:	2218      	movs	r2, #24
 8003662:	4694      	mov	ip, r2
 8003664:	44bc      	add	ip, r7
 8003666:	4463      	add	r3, ip
 8003668:	2208      	movs	r2, #8
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	e00e      	b.n	800368c <UART_SetConfig+0x1a4>
 800366e:	231b      	movs	r3, #27
 8003670:	2218      	movs	r2, #24
 8003672:	4694      	mov	ip, r2
 8003674:	44bc      	add	ip, r7
 8003676:	4463      	add	r3, ip
 8003678:	2210      	movs	r2, #16
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e006      	b.n	800368c <UART_SetConfig+0x1a4>
 800367e:	231b      	movs	r3, #27
 8003680:	2218      	movs	r2, #24
 8003682:	4694      	mov	ip, r2
 8003684:	44bc      	add	ip, r7
 8003686:	4463      	add	r3, ip
 8003688:	2210      	movs	r2, #16
 800368a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a61      	ldr	r2, [pc, #388]	; (8003818 <UART_SetConfig+0x330>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d000      	beq.n	8003698 <UART_SetConfig+0x1b0>
 8003696:	e088      	b.n	80037aa <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003698:	231b      	movs	r3, #27
 800369a:	2218      	movs	r2, #24
 800369c:	4694      	mov	ip, r2
 800369e:	44bc      	add	ip, r7
 80036a0:	4463      	add	r3, ip
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d01d      	beq.n	80036e4 <UART_SetConfig+0x1fc>
 80036a8:	dc20      	bgt.n	80036ec <UART_SetConfig+0x204>
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d015      	beq.n	80036da <UART_SetConfig+0x1f2>
 80036ae:	dc1d      	bgt.n	80036ec <UART_SetConfig+0x204>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <UART_SetConfig+0x1d2>
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d005      	beq.n	80036c4 <UART_SetConfig+0x1dc>
 80036b8:	e018      	b.n	80036ec <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ba:	f7ff fcc7 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80036be:	0003      	movs	r3, r0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036c2:	e01d      	b.n	8003700 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036c4:	4b57      	ldr	r3, [pc, #348]	; (8003824 <UART_SetConfig+0x33c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	4013      	ands	r3, r2
 80036cc:	d002      	beq.n	80036d4 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <UART_SetConfig+0x340>)
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036d2:	e015      	b.n	8003700 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80036d4:	4b55      	ldr	r3, [pc, #340]	; (800382c <UART_SetConfig+0x344>)
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036d8:	e012      	b.n	8003700 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036da:	f7ff fc07 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 80036de:	0003      	movs	r3, r0
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036e2:	e00d      	b.n	8003700 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036ea:	e009      	b.n	8003700 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80036f0:	231a      	movs	r3, #26
 80036f2:	2218      	movs	r2, #24
 80036f4:	4694      	mov	ip, r2
 80036f6:	44bc      	add	ip, r7
 80036f8:	4463      	add	r3, ip
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
        break;
 80036fe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d100      	bne.n	8003708 <UART_SetConfig+0x220>
 8003706:	e139      	b.n	800397c <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	0013      	movs	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	189b      	adds	r3, r3, r2
 8003712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003714:	429a      	cmp	r2, r3
 8003716:	d305      	bcc.n	8003724 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800371e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003720:	429a      	cmp	r2, r3
 8003722:	d907      	bls.n	8003734 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8003724:	231a      	movs	r3, #26
 8003726:	2218      	movs	r2, #24
 8003728:	4694      	mov	ip, r2
 800372a:	44bc      	add	ip, r7
 800372c:	4463      	add	r3, ip
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e123      	b.n	800397c <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	6939      	ldr	r1, [r7, #16]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	000b      	movs	r3, r1
 8003742:	0e1b      	lsrs	r3, r3, #24
 8003744:	0010      	movs	r0, r2
 8003746:	0205      	lsls	r5, r0, #8
 8003748:	431d      	orrs	r5, r3
 800374a:	000b      	movs	r3, r1
 800374c:	021c      	lsls	r4, r3, #8
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68b8      	ldr	r0, [r7, #8]
 800375c:	68f9      	ldr	r1, [r7, #12]
 800375e:	1900      	adds	r0, r0, r4
 8003760:	4169      	adcs	r1, r5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f7fc fe52 	bl	8000418 <__aeabi_uldivmod>
 8003774:	0002      	movs	r2, r0
 8003776:	000b      	movs	r3, r1
 8003778:	0013      	movs	r3, r2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800377c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377e:	23c0      	movs	r3, #192	; 0xc0
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	429a      	cmp	r2, r3
 8003784:	d309      	bcc.n	800379a <UART_SetConfig+0x2b2>
 8003786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	035b      	lsls	r3, r3, #13
 800378c:	429a      	cmp	r2, r3
 800378e:	d204      	bcs.n	800379a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e0f0      	b.n	800397c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800379a:	231a      	movs	r3, #26
 800379c:	2218      	movs	r2, #24
 800379e:	4694      	mov	ip, r2
 80037a0:	44bc      	add	ip, r7
 80037a2:	4463      	add	r3, ip
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e0e8      	b.n	800397c <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d000      	beq.n	80037b8 <UART_SetConfig+0x2d0>
 80037b6:	e087      	b.n	80038c8 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80037b8:	231b      	movs	r3, #27
 80037ba:	2218      	movs	r2, #24
 80037bc:	4694      	mov	ip, r2
 80037be:	44bc      	add	ip, r7
 80037c0:	4463      	add	r3, ip
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d835      	bhi.n	8003834 <UART_SetConfig+0x34c>
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <UART_SetConfig+0x348>)
 80037cc:	18d3      	adds	r3, r2, r3
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d2:	f7ff fc3b 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80037d6:	0003      	movs	r3, r0
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037da:	e035      	b.n	8003848 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7ff fc4c 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 80037e0:	0003      	movs	r3, r0
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037e4:	e030      	b.n	8003848 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <UART_SetConfig+0x33c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2210      	movs	r2, #16
 80037ec:	4013      	ands	r3, r2
 80037ee:	d002      	beq.n	80037f6 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <UART_SetConfig+0x340>)
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037f4:	e028      	b.n	8003848 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <UART_SetConfig+0x344>)
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037fa:	e025      	b.n	8003848 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fc:	f7ff fb76 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8003800:	0003      	movs	r3, r0
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003804:	e020      	b.n	8003848 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800380c:	e01c      	b.n	8003848 <UART_SetConfig+0x360>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	efff69f3 	.word	0xefff69f3
 8003814:	ffffcfff 	.word	0xffffcfff
 8003818:	40004800 	.word	0x40004800
 800381c:	fffff4ff 	.word	0xfffff4ff
 8003820:	40004400 	.word	0x40004400
 8003824:	40021000 	.word	0x40021000
 8003828:	003d0900 	.word	0x003d0900
 800382c:	00f42400 	.word	0x00f42400
 8003830:	08004f48 	.word	0x08004f48
      default:
        pclk = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003838:	231a      	movs	r3, #26
 800383a:	2218      	movs	r2, #24
 800383c:	4694      	mov	ip, r2
 800383e:	44bc      	add	ip, r7
 8003840:	4463      	add	r3, ip
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
        break;
 8003846:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d100      	bne.n	8003850 <UART_SetConfig+0x368>
 800384e:	e095      	b.n	800397c <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	005a      	lsls	r2, r3, #1
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	18d2      	adds	r2, r2, r3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0019      	movs	r1, r3
 8003862:	0010      	movs	r0, r2
 8003864:	f7fc fc62 	bl	800012c <__udivsi3>
 8003868:	0003      	movs	r3, r0
 800386a:	b29b      	uxth	r3, r3
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d921      	bls.n	80038b8 <UART_SetConfig+0x3d0>
 8003874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	025b      	lsls	r3, r3, #9
 800387a:	429a      	cmp	r2, r3
 800387c:	d21c      	bcs.n	80038b8 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	b29a      	uxth	r2, r3
 8003882:	200e      	movs	r0, #14
 8003884:	2418      	movs	r4, #24
 8003886:	193b      	adds	r3, r7, r4
 8003888:	181b      	adds	r3, r3, r0
 800388a:	210f      	movs	r1, #15
 800388c:	438a      	bics	r2, r1
 800388e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	b29b      	uxth	r3, r3
 8003896:	2207      	movs	r2, #7
 8003898:	4013      	ands	r3, r2
 800389a:	b299      	uxth	r1, r3
 800389c:	193b      	adds	r3, r7, r4
 800389e:	181b      	adds	r3, r3, r0
 80038a0:	193a      	adds	r2, r7, r4
 80038a2:	1812      	adds	r2, r2, r0
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	193a      	adds	r2, r7, r4
 80038b0:	1812      	adds	r2, r2, r0
 80038b2:	8812      	ldrh	r2, [r2, #0]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	e061      	b.n	800397c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80038b8:	231a      	movs	r3, #26
 80038ba:	2218      	movs	r2, #24
 80038bc:	4694      	mov	ip, r2
 80038be:	44bc      	add	ip, r7
 80038c0:	4463      	add	r3, ip
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e059      	b.n	800397c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038c8:	231b      	movs	r3, #27
 80038ca:	2218      	movs	r2, #24
 80038cc:	4694      	mov	ip, r2
 80038ce:	44bc      	add	ip, r7
 80038d0:	4463      	add	r3, ip
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d822      	bhi.n	800391e <UART_SetConfig+0x436>
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	4b30      	ldr	r3, [pc, #192]	; (800399c <UART_SetConfig+0x4b4>)
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7ff fbb3 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80038e6:	0003      	movs	r3, r0
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038ea:	e022      	b.n	8003932 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7ff fbc4 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 80038f0:	0003      	movs	r3, r0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038f4:	e01d      	b.n	8003932 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <UART_SetConfig+0x4b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2210      	movs	r2, #16
 80038fc:	4013      	ands	r3, r2
 80038fe:	d002      	beq.n	8003906 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <UART_SetConfig+0x4bc>)
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003904:	e015      	b.n	8003932 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8003906:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <UART_SetConfig+0x4c0>)
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800390a:	e012      	b.n	8003932 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390c:	f7ff faee 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8003910:	0003      	movs	r3, r0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003914:	e00d      	b.n	8003932 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800391c:	e009      	b.n	8003932 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003922:	231a      	movs	r3, #26
 8003924:	2218      	movs	r2, #24
 8003926:	4694      	mov	ip, r2
 8003928:	44bc      	add	ip, r7
 800392a:	4463      	add	r3, ip
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
        break;
 8003930:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d021      	beq.n	800397c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	085a      	lsrs	r2, r3, #1
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	18d2      	adds	r2, r2, r3
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0019      	movs	r1, r3
 8003948:	0010      	movs	r0, r2
 800394a:	f7fc fbef 	bl	800012c <__udivsi3>
 800394e:	0003      	movs	r3, r0
 8003950:	b29b      	uxth	r3, r3
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	2b0f      	cmp	r3, #15
 8003958:	d909      	bls.n	800396e <UART_SetConfig+0x486>
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	025b      	lsls	r3, r3, #9
 8003960:	429a      	cmp	r2, r3
 8003962:	d204      	bcs.n	800396e <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e006      	b.n	800397c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800396e:	231a      	movs	r3, #26
 8003970:	2218      	movs	r2, #24
 8003972:	4694      	mov	ip, r2
 8003974:	44bc      	add	ip, r7
 8003976:	4463      	add	r3, ip
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2200      	movs	r2, #0
 8003980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2200      	movs	r2, #0
 8003986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003988:	231a      	movs	r3, #26
 800398a:	2218      	movs	r2, #24
 800398c:	4694      	mov	ip, r2
 800398e:	44bc      	add	ip, r7
 8003990:	4463      	add	r3, ip
 8003992:	781b      	ldrb	r3, [r3, #0]
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b00e      	add	sp, #56	; 0x38
 800399a:	bdb0      	pop	{r4, r5, r7, pc}
 800399c:	08004f6c 	.word	0x08004f6c
 80039a0:	40021000 	.word	0x40021000
 80039a4:	003d0900 	.word	0x003d0900
 80039a8:	00f42400 	.word	0x00f42400

080039ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <UART_AdvFeatureConfig+0x144>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2202      	movs	r2, #2
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a43      	ldr	r2, [pc, #268]	; (8003af4 <UART_AdvFeatureConfig+0x148>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2204      	movs	r2, #4
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a3b      	ldr	r2, [pc, #236]	; (8003af8 <UART_AdvFeatureConfig+0x14c>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2208      	movs	r2, #8
 8003a20:	4013      	ands	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a34      	ldr	r2, [pc, #208]	; (8003afc <UART_AdvFeatureConfig+0x150>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2210      	movs	r2, #16
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a2c      	ldr	r2, [pc, #176]	; (8003b00 <UART_AdvFeatureConfig+0x154>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2220      	movs	r2, #32
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <UART_AdvFeatureConfig+0x158>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2240      	movs	r2, #64	; 0x40
 8003a86:	4013      	ands	r3, r2
 8003a88:	d01d      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <UART_AdvFeatureConfig+0x15c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	035b      	lsls	r3, r3, #13
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d10b      	bne.n	8003ac6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <UART_AdvFeatureConfig+0x160>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <UART_AdvFeatureConfig+0x164>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fffdffff 	.word	0xfffdffff
 8003af4:	fffeffff 	.word	0xfffeffff
 8003af8:	fffbffff 	.word	0xfffbffff
 8003afc:	ffff7fff 	.word	0xffff7fff
 8003b00:	ffffefff 	.word	0xffffefff
 8003b04:	ffffdfff 	.word	0xffffdfff
 8003b08:	ffefffff 	.word	0xffefffff
 8003b0c:	ff9fffff 	.word	0xff9fffff
 8003b10:	fff7ffff 	.word	0xfff7ffff

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	2100      	movs	r1, #0
 8003b22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b24:	f7fd fd72 	bl	800160c <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2208      	movs	r2, #8
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d10c      	bne.n	8003b54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2280      	movs	r2, #128	; 0x80
 8003b3e:	0391      	lsls	r1, r2, #14
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <UART_CheckIdleState+0x8c>)
 8003b44:	9200      	str	r2, [sp, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f000 f82c 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d001      	beq.n	8003b54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e021      	b.n	8003b98 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d10c      	bne.n	8003b7c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	03d1      	lsls	r1, r2, #15
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <UART_CheckIdleState+0x8c>)
 8003b6c:	9200      	str	r2, [sp, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f000 f818 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d001      	beq.n	8003b7c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e00d      	b.n	8003b98 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2274      	movs	r2, #116	; 0x74
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b004      	add	sp, #16
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	01ffffff 	.word	0x01ffffff

08003ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b094      	sub	sp, #80	; 0x50
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	e0a3      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb8:	3301      	adds	r3, #1
 8003bba:	d100      	bne.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x1a>
 8003bbc:	e09f      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fd fd25 	bl	800160c <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d13d      	bne.n	8003c50 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bde:	2301      	movs	r3, #1
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	494c      	ldr	r1, [pc, #304]	; (8003d28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	f383 8810 	msr	PRIMASK, r3
}
 8003c04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c06:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c10:	2301      	movs	r3, #1
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	f383 8810 	msr	PRIMASK, r3
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c32:	f383 8810 	msr	PRIMASK, r3
}
 8003c36:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2274      	movs	r2, #116	; 0x74
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e067      	b.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2204      	movs	r2, #4
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d050      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	401a      	ands	r2, r3
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d146      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2280      	movs	r2, #128	; 0x80
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c80:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c84:	2301      	movs	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4923      	ldr	r1, [pc, #140]	; (8003d28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cac:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2101      	movs	r1, #1
 8003cce:	438a      	bics	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	2120      	movs	r1, #32
 8003cf0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2274      	movs	r2, #116	; 0x74
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e010      	b.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	425a      	negs	r2, r3
 8003d0e:	4153      	adcs	r3, r2
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	001a      	movs	r2, r3
 8003d14:	1dfb      	adds	r3, r7, #7
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d100      	bne.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x17a>
 8003d1c:	e74b      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b014      	add	sp, #80	; 0x50
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	fffffe5f 	.word	0xfffffe5f

08003d2c <__errno>:
 8003d2c:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <__errno+0x8>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	4770      	bx	lr
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000010 	.word	0x20000010

08003d38 <__libc_init_array>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	4d0c      	ldr	r5, [pc, #48]	; (8003d70 <__libc_init_array+0x38>)
 8003d3e:	4c0d      	ldr	r4, [pc, #52]	; (8003d74 <__libc_init_array+0x3c>)
 8003d40:	1b64      	subs	r4, r4, r5
 8003d42:	10a4      	asrs	r4, r4, #2
 8003d44:	42a6      	cmp	r6, r4
 8003d46:	d109      	bne.n	8003d5c <__libc_init_array+0x24>
 8003d48:	2600      	movs	r6, #0
 8003d4a:	f001 f88b 	bl	8004e64 <_init>
 8003d4e:	4d0a      	ldr	r5, [pc, #40]	; (8003d78 <__libc_init_array+0x40>)
 8003d50:	4c0a      	ldr	r4, [pc, #40]	; (8003d7c <__libc_init_array+0x44>)
 8003d52:	1b64      	subs	r4, r4, r5
 8003d54:	10a4      	asrs	r4, r4, #2
 8003d56:	42a6      	cmp	r6, r4
 8003d58:	d105      	bne.n	8003d66 <__libc_init_array+0x2e>
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	00b3      	lsls	r3, r6, #2
 8003d5e:	58eb      	ldr	r3, [r5, r3]
 8003d60:	4798      	blx	r3
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7ee      	b.n	8003d44 <__libc_init_array+0xc>
 8003d66:	00b3      	lsls	r3, r6, #2
 8003d68:	58eb      	ldr	r3, [r5, r3]
 8003d6a:	4798      	blx	r3
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	e7f2      	b.n	8003d56 <__libc_init_array+0x1e>
 8003d70:	08005030 	.word	0x08005030
 8003d74:	08005030 	.word	0x08005030
 8003d78:	08005030 	.word	0x08005030
 8003d7c:	08005034 	.word	0x08005034

08003d80 <memset>:
 8003d80:	0003      	movs	r3, r0
 8003d82:	1882      	adds	r2, r0, r2
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d100      	bne.n	8003d8a <memset+0xa>
 8003d88:	4770      	bx	lr
 8003d8a:	7019      	strb	r1, [r3, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	e7f9      	b.n	8003d84 <memset+0x4>

08003d90 <_puts_r>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	0005      	movs	r5, r0
 8003d94:	000e      	movs	r6, r1
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d004      	beq.n	8003da4 <_puts_r+0x14>
 8003d9a:	6983      	ldr	r3, [r0, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <_puts_r+0x14>
 8003da0:	f000 fa8e 	bl	80042c0 <__sinit>
 8003da4:	69ab      	ldr	r3, [r5, #24]
 8003da6:	68ac      	ldr	r4, [r5, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <_puts_r+0x22>
 8003dac:	0028      	movs	r0, r5
 8003dae:	f000 fa87 	bl	80042c0 <__sinit>
 8003db2:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <_puts_r+0xd8>)
 8003db4:	429c      	cmp	r4, r3
 8003db6:	d122      	bne.n	8003dfe <_puts_r+0x6e>
 8003db8:	686c      	ldr	r4, [r5, #4]
 8003dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dbc:	07db      	lsls	r3, r3, #31
 8003dbe:	d405      	bmi.n	8003dcc <_puts_r+0x3c>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	059b      	lsls	r3, r3, #22
 8003dc4:	d402      	bmi.n	8003dcc <_puts_r+0x3c>
 8003dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dc8:	f000 fb1b 	bl	8004402 <__retarget_lock_acquire_recursive>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	071b      	lsls	r3, r3, #28
 8003dd0:	d502      	bpl.n	8003dd8 <_puts_r+0x48>
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d129      	bne.n	8003e2c <_puts_r+0x9c>
 8003dd8:	0021      	movs	r1, r4
 8003dda:	0028      	movs	r0, r5
 8003ddc:	f000 f8ca 	bl	8003f74 <__swsetup_r>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d023      	beq.n	8003e2c <_puts_r+0x9c>
 8003de4:	2501      	movs	r5, #1
 8003de6:	426d      	negs	r5, r5
 8003de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dea:	07db      	lsls	r3, r3, #31
 8003dec:	d405      	bmi.n	8003dfa <_puts_r+0x6a>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	059b      	lsls	r3, r3, #22
 8003df2:	d402      	bmi.n	8003dfa <_puts_r+0x6a>
 8003df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003df6:	f000 fb05 	bl	8004404 <__retarget_lock_release_recursive>
 8003dfa:	0028      	movs	r0, r5
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <_puts_r+0xdc>)
 8003e00:	429c      	cmp	r4, r3
 8003e02:	d101      	bne.n	8003e08 <_puts_r+0x78>
 8003e04:	68ac      	ldr	r4, [r5, #8]
 8003e06:	e7d8      	b.n	8003dba <_puts_r+0x2a>
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <_puts_r+0xe0>)
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	d1d5      	bne.n	8003dba <_puts_r+0x2a>
 8003e0e:	68ec      	ldr	r4, [r5, #12]
 8003e10:	e7d3      	b.n	8003dba <_puts_r+0x2a>
 8003e12:	3601      	adds	r6, #1
 8003e14:	60a3      	str	r3, [r4, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da04      	bge.n	8003e24 <_puts_r+0x94>
 8003e1a:	69a2      	ldr	r2, [r4, #24]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dc16      	bgt.n	8003e4e <_puts_r+0xbe>
 8003e20:	290a      	cmp	r1, #10
 8003e22:	d014      	beq.n	8003e4e <_puts_r+0xbe>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	7019      	strb	r1, [r3, #0]
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	7831      	ldrb	r1, [r6, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	2900      	cmp	r1, #0
 8003e34:	d1ed      	bne.n	8003e12 <_puts_r+0x82>
 8003e36:	60a3      	str	r3, [r4, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	da0f      	bge.n	8003e5c <_puts_r+0xcc>
 8003e3c:	0028      	movs	r0, r5
 8003e3e:	0022      	movs	r2, r4
 8003e40:	310a      	adds	r1, #10
 8003e42:	f000 f841 	bl	8003ec8 <__swbuf_r>
 8003e46:	250a      	movs	r5, #10
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d1cd      	bne.n	8003de8 <_puts_r+0x58>
 8003e4c:	e7ca      	b.n	8003de4 <_puts_r+0x54>
 8003e4e:	0022      	movs	r2, r4
 8003e50:	0028      	movs	r0, r5
 8003e52:	f000 f839 	bl	8003ec8 <__swbuf_r>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	d1e8      	bne.n	8003e2c <_puts_r+0x9c>
 8003e5a:	e7c3      	b.n	8003de4 <_puts_r+0x54>
 8003e5c:	250a      	movs	r5, #10
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	701d      	strb	r5, [r3, #0]
 8003e66:	e7bf      	b.n	8003de8 <_puts_r+0x58>
 8003e68:	08004fb4 	.word	0x08004fb4
 8003e6c:	08004fd4 	.word	0x08004fd4
 8003e70:	08004f94 	.word	0x08004f94

08003e74 <puts>:
 8003e74:	b510      	push	{r4, lr}
 8003e76:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <puts+0x10>)
 8003e78:	0001      	movs	r1, r0
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	f7ff ff88 	bl	8003d90 <_puts_r>
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	20000010 	.word	0x20000010

08003e88 <siprintf>:
 8003e88:	b40e      	push	{r1, r2, r3}
 8003e8a:	b500      	push	{lr}
 8003e8c:	490b      	ldr	r1, [pc, #44]	; (8003ebc <siprintf+0x34>)
 8003e8e:	b09c      	sub	sp, #112	; 0x70
 8003e90:	ab1d      	add	r3, sp, #116	; 0x74
 8003e92:	9002      	str	r0, [sp, #8]
 8003e94:	9006      	str	r0, [sp, #24]
 8003e96:	9107      	str	r1, [sp, #28]
 8003e98:	9104      	str	r1, [sp, #16]
 8003e9a:	4809      	ldr	r0, [pc, #36]	; (8003ec0 <siprintf+0x38>)
 8003e9c:	4909      	ldr	r1, [pc, #36]	; (8003ec4 <siprintf+0x3c>)
 8003e9e:	cb04      	ldmia	r3!, {r2}
 8003ea0:	9105      	str	r1, [sp, #20]
 8003ea2:	6800      	ldr	r0, [r0, #0]
 8003ea4:	a902      	add	r1, sp, #8
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	f000 fc24 	bl	80046f4 <_svfiprintf_r>
 8003eac:	2300      	movs	r3, #0
 8003eae:	9a02      	ldr	r2, [sp, #8]
 8003eb0:	7013      	strb	r3, [r2, #0]
 8003eb2:	b01c      	add	sp, #112	; 0x70
 8003eb4:	bc08      	pop	{r3}
 8003eb6:	b003      	add	sp, #12
 8003eb8:	4718      	bx	r3
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	7fffffff 	.word	0x7fffffff
 8003ec0:	20000010 	.word	0x20000010
 8003ec4:	ffff0208 	.word	0xffff0208

08003ec8 <__swbuf_r>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	0005      	movs	r5, r0
 8003ecc:	000e      	movs	r6, r1
 8003ece:	0014      	movs	r4, r2
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d004      	beq.n	8003ede <__swbuf_r+0x16>
 8003ed4:	6983      	ldr	r3, [r0, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <__swbuf_r+0x16>
 8003eda:	f000 f9f1 	bl	80042c0 <__sinit>
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <__swbuf_r+0xa0>)
 8003ee0:	429c      	cmp	r4, r3
 8003ee2:	d12e      	bne.n	8003f42 <__swbuf_r+0x7a>
 8003ee4:	686c      	ldr	r4, [r5, #4]
 8003ee6:	69a3      	ldr	r3, [r4, #24]
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	071b      	lsls	r3, r3, #28
 8003eee:	d532      	bpl.n	8003f56 <__swbuf_r+0x8e>
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02f      	beq.n	8003f56 <__swbuf_r+0x8e>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	6922      	ldr	r2, [r4, #16]
 8003efa:	b2f7      	uxtb	r7, r6
 8003efc:	1a98      	subs	r0, r3, r2
 8003efe:	6963      	ldr	r3, [r4, #20]
 8003f00:	b2f6      	uxtb	r6, r6
 8003f02:	4283      	cmp	r3, r0
 8003f04:	dc05      	bgt.n	8003f12 <__swbuf_r+0x4a>
 8003f06:	0021      	movs	r1, r4
 8003f08:	0028      	movs	r0, r5
 8003f0a:	f000 f937 	bl	800417c <_fflush_r>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d127      	bne.n	8003f62 <__swbuf_r+0x9a>
 8003f12:	68a3      	ldr	r3, [r4, #8]
 8003f14:	3001      	adds	r0, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	60a3      	str	r3, [r4, #8]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	6022      	str	r2, [r4, #0]
 8003f20:	701f      	strb	r7, [r3, #0]
 8003f22:	6963      	ldr	r3, [r4, #20]
 8003f24:	4283      	cmp	r3, r0
 8003f26:	d004      	beq.n	8003f32 <__swbuf_r+0x6a>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	07db      	lsls	r3, r3, #31
 8003f2c:	d507      	bpl.n	8003f3e <__swbuf_r+0x76>
 8003f2e:	2e0a      	cmp	r6, #10
 8003f30:	d105      	bne.n	8003f3e <__swbuf_r+0x76>
 8003f32:	0021      	movs	r1, r4
 8003f34:	0028      	movs	r0, r5
 8003f36:	f000 f921 	bl	800417c <_fflush_r>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d111      	bne.n	8003f62 <__swbuf_r+0x9a>
 8003f3e:	0030      	movs	r0, r6
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <__swbuf_r+0xa4>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d101      	bne.n	8003f4c <__swbuf_r+0x84>
 8003f48:	68ac      	ldr	r4, [r5, #8]
 8003f4a:	e7cc      	b.n	8003ee6 <__swbuf_r+0x1e>
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <__swbuf_r+0xa8>)
 8003f4e:	429c      	cmp	r4, r3
 8003f50:	d1c9      	bne.n	8003ee6 <__swbuf_r+0x1e>
 8003f52:	68ec      	ldr	r4, [r5, #12]
 8003f54:	e7c7      	b.n	8003ee6 <__swbuf_r+0x1e>
 8003f56:	0021      	movs	r1, r4
 8003f58:	0028      	movs	r0, r5
 8003f5a:	f000 f80b 	bl	8003f74 <__swsetup_r>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0c9      	beq.n	8003ef6 <__swbuf_r+0x2e>
 8003f62:	2601      	movs	r6, #1
 8003f64:	4276      	negs	r6, r6
 8003f66:	e7ea      	b.n	8003f3e <__swbuf_r+0x76>
 8003f68:	08004fb4 	.word	0x08004fb4
 8003f6c:	08004fd4 	.word	0x08004fd4
 8003f70:	08004f94 	.word	0x08004f94

08003f74 <__swsetup_r>:
 8003f74:	4b37      	ldr	r3, [pc, #220]	; (8004054 <__swsetup_r+0xe0>)
 8003f76:	b570      	push	{r4, r5, r6, lr}
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	0006      	movs	r6, r0
 8003f7c:	000c      	movs	r4, r1
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	d005      	beq.n	8003f8e <__swsetup_r+0x1a>
 8003f82:	69ab      	ldr	r3, [r5, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <__swsetup_r+0x1a>
 8003f88:	0028      	movs	r0, r5
 8003f8a:	f000 f999 	bl	80042c0 <__sinit>
 8003f8e:	4b32      	ldr	r3, [pc, #200]	; (8004058 <__swsetup_r+0xe4>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d10f      	bne.n	8003fb4 <__swsetup_r+0x40>
 8003f94:	686c      	ldr	r4, [r5, #4]
 8003f96:	230c      	movs	r3, #12
 8003f98:	5ee2      	ldrsh	r2, [r4, r3]
 8003f9a:	b293      	uxth	r3, r2
 8003f9c:	0711      	lsls	r1, r2, #28
 8003f9e:	d42d      	bmi.n	8003ffc <__swsetup_r+0x88>
 8003fa0:	06d9      	lsls	r1, r3, #27
 8003fa2:	d411      	bmi.n	8003fc8 <__swsetup_r+0x54>
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	6033      	str	r3, [r6, #0]
 8003faa:	3337      	adds	r3, #55	; 0x37
 8003fac:	4313      	orrs	r3, r2
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	4240      	negs	r0, r0
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	4b29      	ldr	r3, [pc, #164]	; (800405c <__swsetup_r+0xe8>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d101      	bne.n	8003fbe <__swsetup_r+0x4a>
 8003fba:	68ac      	ldr	r4, [r5, #8]
 8003fbc:	e7eb      	b.n	8003f96 <__swsetup_r+0x22>
 8003fbe:	4b28      	ldr	r3, [pc, #160]	; (8004060 <__swsetup_r+0xec>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	d1e8      	bne.n	8003f96 <__swsetup_r+0x22>
 8003fc4:	68ec      	ldr	r4, [r5, #12]
 8003fc6:	e7e6      	b.n	8003f96 <__swsetup_r+0x22>
 8003fc8:	075b      	lsls	r3, r3, #29
 8003fca:	d513      	bpl.n	8003ff4 <__swsetup_r+0x80>
 8003fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	d008      	beq.n	8003fe4 <__swsetup_r+0x70>
 8003fd2:	0023      	movs	r3, r4
 8003fd4:	3344      	adds	r3, #68	; 0x44
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	d002      	beq.n	8003fe0 <__swsetup_r+0x6c>
 8003fda:	0030      	movs	r0, r6
 8003fdc:	f000 fa80 	bl	80044e0 <_free_r>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6363      	str	r3, [r4, #52]	; 0x34
 8003fe4:	2224      	movs	r2, #36	; 0x24
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	4393      	bics	r3, r2
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	2300      	movs	r3, #0
 8003fee:	6063      	str	r3, [r4, #4]
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	89a2      	ldrh	r2, [r4, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <__swsetup_r+0xa6>
 8004002:	21a0      	movs	r1, #160	; 0xa0
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	0089      	lsls	r1, r1, #2
 800400a:	0092      	lsls	r2, r2, #2
 800400c:	400b      	ands	r3, r1
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <__swsetup_r+0xa6>
 8004012:	0021      	movs	r1, r4
 8004014:	0030      	movs	r0, r6
 8004016:	f000 fa1f 	bl	8004458 <__smakebuf_r>
 800401a:	220c      	movs	r2, #12
 800401c:	5ea3      	ldrsh	r3, [r4, r2]
 800401e:	2001      	movs	r0, #1
 8004020:	001a      	movs	r2, r3
 8004022:	b299      	uxth	r1, r3
 8004024:	4002      	ands	r2, r0
 8004026:	4203      	tst	r3, r0
 8004028:	d00f      	beq.n	800404a <__swsetup_r+0xd6>
 800402a:	2200      	movs	r2, #0
 800402c:	60a2      	str	r2, [r4, #8]
 800402e:	6962      	ldr	r2, [r4, #20]
 8004030:	4252      	negs	r2, r2
 8004032:	61a2      	str	r2, [r4, #24]
 8004034:	2000      	movs	r0, #0
 8004036:	6922      	ldr	r2, [r4, #16]
 8004038:	4282      	cmp	r2, r0
 800403a:	d1ba      	bne.n	8003fb2 <__swsetup_r+0x3e>
 800403c:	060a      	lsls	r2, r1, #24
 800403e:	d5b8      	bpl.n	8003fb2 <__swsetup_r+0x3e>
 8004040:	2240      	movs	r2, #64	; 0x40
 8004042:	4313      	orrs	r3, r2
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	3801      	subs	r0, #1
 8004048:	e7b3      	b.n	8003fb2 <__swsetup_r+0x3e>
 800404a:	0788      	lsls	r0, r1, #30
 800404c:	d400      	bmi.n	8004050 <__swsetup_r+0xdc>
 800404e:	6962      	ldr	r2, [r4, #20]
 8004050:	60a2      	str	r2, [r4, #8]
 8004052:	e7ef      	b.n	8004034 <__swsetup_r+0xc0>
 8004054:	20000010 	.word	0x20000010
 8004058:	08004fb4 	.word	0x08004fb4
 800405c:	08004fd4 	.word	0x08004fd4
 8004060:	08004f94 	.word	0x08004f94

08004064 <__sflush_r>:
 8004064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004066:	898b      	ldrh	r3, [r1, #12]
 8004068:	0005      	movs	r5, r0
 800406a:	000c      	movs	r4, r1
 800406c:	071a      	lsls	r2, r3, #28
 800406e:	d45f      	bmi.n	8004130 <__sflush_r+0xcc>
 8004070:	684a      	ldr	r2, [r1, #4]
 8004072:	2a00      	cmp	r2, #0
 8004074:	dc04      	bgt.n	8004080 <__sflush_r+0x1c>
 8004076:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004078:	2a00      	cmp	r2, #0
 800407a:	dc01      	bgt.n	8004080 <__sflush_r+0x1c>
 800407c:	2000      	movs	r0, #0
 800407e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004080:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004082:	2f00      	cmp	r7, #0
 8004084:	d0fa      	beq.n	800407c <__sflush_r+0x18>
 8004086:	2200      	movs	r2, #0
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	682e      	ldr	r6, [r5, #0]
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	001a      	movs	r2, r3
 8004090:	0149      	lsls	r1, r1, #5
 8004092:	400a      	ands	r2, r1
 8004094:	420b      	tst	r3, r1
 8004096:	d034      	beq.n	8004102 <__sflush_r+0x9e>
 8004098:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	075b      	lsls	r3, r3, #29
 800409e:	d506      	bpl.n	80040ae <__sflush_r+0x4a>
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	1ac0      	subs	r0, r0, r3
 80040a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <__sflush_r+0x4a>
 80040aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ac:	1ac0      	subs	r0, r0, r3
 80040ae:	0002      	movs	r2, r0
 80040b0:	6a21      	ldr	r1, [r4, #32]
 80040b2:	2300      	movs	r3, #0
 80040b4:	0028      	movs	r0, r5
 80040b6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80040b8:	47b8      	blx	r7
 80040ba:	89a1      	ldrh	r1, [r4, #12]
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d106      	bne.n	80040ce <__sflush_r+0x6a>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	2b1d      	cmp	r3, #29
 80040c4:	d831      	bhi.n	800412a <__sflush_r+0xc6>
 80040c6:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <__sflush_r+0x114>)
 80040c8:	40da      	lsrs	r2, r3
 80040ca:	07d3      	lsls	r3, r2, #31
 80040cc:	d52d      	bpl.n	800412a <__sflush_r+0xc6>
 80040ce:	2300      	movs	r3, #0
 80040d0:	6063      	str	r3, [r4, #4]
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	04cb      	lsls	r3, r1, #19
 80040d8:	d505      	bpl.n	80040e6 <__sflush_r+0x82>
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	d102      	bne.n	80040e4 <__sflush_r+0x80>
 80040de:	682b      	ldr	r3, [r5, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d100      	bne.n	80040e6 <__sflush_r+0x82>
 80040e4:	6560      	str	r0, [r4, #84]	; 0x54
 80040e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e8:	602e      	str	r6, [r5, #0]
 80040ea:	2900      	cmp	r1, #0
 80040ec:	d0c6      	beq.n	800407c <__sflush_r+0x18>
 80040ee:	0023      	movs	r3, r4
 80040f0:	3344      	adds	r3, #68	; 0x44
 80040f2:	4299      	cmp	r1, r3
 80040f4:	d002      	beq.n	80040fc <__sflush_r+0x98>
 80040f6:	0028      	movs	r0, r5
 80040f8:	f000 f9f2 	bl	80044e0 <_free_r>
 80040fc:	2000      	movs	r0, #0
 80040fe:	6360      	str	r0, [r4, #52]	; 0x34
 8004100:	e7bd      	b.n	800407e <__sflush_r+0x1a>
 8004102:	2301      	movs	r3, #1
 8004104:	0028      	movs	r0, r5
 8004106:	6a21      	ldr	r1, [r4, #32]
 8004108:	47b8      	blx	r7
 800410a:	1c43      	adds	r3, r0, #1
 800410c:	d1c5      	bne.n	800409a <__sflush_r+0x36>
 800410e:	682b      	ldr	r3, [r5, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0c2      	beq.n	800409a <__sflush_r+0x36>
 8004114:	2b1d      	cmp	r3, #29
 8004116:	d001      	beq.n	800411c <__sflush_r+0xb8>
 8004118:	2b16      	cmp	r3, #22
 800411a:	d101      	bne.n	8004120 <__sflush_r+0xbc>
 800411c:	602e      	str	r6, [r5, #0]
 800411e:	e7ad      	b.n	800407c <__sflush_r+0x18>
 8004120:	2340      	movs	r3, #64	; 0x40
 8004122:	89a2      	ldrh	r2, [r4, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	81a3      	strh	r3, [r4, #12]
 8004128:	e7a9      	b.n	800407e <__sflush_r+0x1a>
 800412a:	2340      	movs	r3, #64	; 0x40
 800412c:	430b      	orrs	r3, r1
 800412e:	e7fa      	b.n	8004126 <__sflush_r+0xc2>
 8004130:	690f      	ldr	r7, [r1, #16]
 8004132:	2f00      	cmp	r7, #0
 8004134:	d0a2      	beq.n	800407c <__sflush_r+0x18>
 8004136:	680a      	ldr	r2, [r1, #0]
 8004138:	600f      	str	r7, [r1, #0]
 800413a:	1bd2      	subs	r2, r2, r7
 800413c:	9201      	str	r2, [sp, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	079b      	lsls	r3, r3, #30
 8004142:	d100      	bne.n	8004146 <__sflush_r+0xe2>
 8004144:	694a      	ldr	r2, [r1, #20]
 8004146:	60a2      	str	r2, [r4, #8]
 8004148:	9b01      	ldr	r3, [sp, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	dc00      	bgt.n	8004150 <__sflush_r+0xec>
 800414e:	e795      	b.n	800407c <__sflush_r+0x18>
 8004150:	003a      	movs	r2, r7
 8004152:	0028      	movs	r0, r5
 8004154:	9b01      	ldr	r3, [sp, #4]
 8004156:	6a21      	ldr	r1, [r4, #32]
 8004158:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800415a:	47b0      	blx	r6
 800415c:	2800      	cmp	r0, #0
 800415e:	dc06      	bgt.n	800416e <__sflush_r+0x10a>
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	2001      	movs	r0, #1
 8004164:	89a2      	ldrh	r2, [r4, #12]
 8004166:	4240      	negs	r0, r0
 8004168:	4313      	orrs	r3, r2
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	e787      	b.n	800407e <__sflush_r+0x1a>
 800416e:	9b01      	ldr	r3, [sp, #4]
 8004170:	183f      	adds	r7, r7, r0
 8004172:	1a1b      	subs	r3, r3, r0
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	e7e7      	b.n	8004148 <__sflush_r+0xe4>
 8004178:	20400001 	.word	0x20400001

0800417c <_fflush_r>:
 800417c:	690b      	ldr	r3, [r1, #16]
 800417e:	b570      	push	{r4, r5, r6, lr}
 8004180:	0005      	movs	r5, r0
 8004182:	000c      	movs	r4, r1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <_fflush_r+0x12>
 8004188:	2500      	movs	r5, #0
 800418a:	0028      	movs	r0, r5
 800418c:	bd70      	pop	{r4, r5, r6, pc}
 800418e:	2800      	cmp	r0, #0
 8004190:	d004      	beq.n	800419c <_fflush_r+0x20>
 8004192:	6983      	ldr	r3, [r0, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <_fflush_r+0x20>
 8004198:	f000 f892 	bl	80042c0 <__sinit>
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <_fflush_r+0x74>)
 800419e:	429c      	cmp	r4, r3
 80041a0:	d11b      	bne.n	80041da <_fflush_r+0x5e>
 80041a2:	686c      	ldr	r4, [r5, #4]
 80041a4:	220c      	movs	r2, #12
 80041a6:	5ea3      	ldrsh	r3, [r4, r2]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ed      	beq.n	8004188 <_fflush_r+0xc>
 80041ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041ae:	07d2      	lsls	r2, r2, #31
 80041b0:	d404      	bmi.n	80041bc <_fflush_r+0x40>
 80041b2:	059b      	lsls	r3, r3, #22
 80041b4:	d402      	bmi.n	80041bc <_fflush_r+0x40>
 80041b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b8:	f000 f923 	bl	8004402 <__retarget_lock_acquire_recursive>
 80041bc:	0028      	movs	r0, r5
 80041be:	0021      	movs	r1, r4
 80041c0:	f7ff ff50 	bl	8004064 <__sflush_r>
 80041c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041c6:	0005      	movs	r5, r0
 80041c8:	07db      	lsls	r3, r3, #31
 80041ca:	d4de      	bmi.n	800418a <_fflush_r+0xe>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	059b      	lsls	r3, r3, #22
 80041d0:	d4db      	bmi.n	800418a <_fflush_r+0xe>
 80041d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041d4:	f000 f916 	bl	8004404 <__retarget_lock_release_recursive>
 80041d8:	e7d7      	b.n	800418a <_fflush_r+0xe>
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <_fflush_r+0x78>)
 80041dc:	429c      	cmp	r4, r3
 80041de:	d101      	bne.n	80041e4 <_fflush_r+0x68>
 80041e0:	68ac      	ldr	r4, [r5, #8]
 80041e2:	e7df      	b.n	80041a4 <_fflush_r+0x28>
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <_fflush_r+0x7c>)
 80041e6:	429c      	cmp	r4, r3
 80041e8:	d1dc      	bne.n	80041a4 <_fflush_r+0x28>
 80041ea:	68ec      	ldr	r4, [r5, #12]
 80041ec:	e7da      	b.n	80041a4 <_fflush_r+0x28>
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	08004fb4 	.word	0x08004fb4
 80041f4:	08004fd4 	.word	0x08004fd4
 80041f8:	08004f94 	.word	0x08004f94

080041fc <std>:
 80041fc:	2300      	movs	r3, #0
 80041fe:	b510      	push	{r4, lr}
 8004200:	0004      	movs	r4, r0
 8004202:	6003      	str	r3, [r0, #0]
 8004204:	6043      	str	r3, [r0, #4]
 8004206:	6083      	str	r3, [r0, #8]
 8004208:	8181      	strh	r1, [r0, #12]
 800420a:	6643      	str	r3, [r0, #100]	; 0x64
 800420c:	0019      	movs	r1, r3
 800420e:	81c2      	strh	r2, [r0, #14]
 8004210:	6103      	str	r3, [r0, #16]
 8004212:	6143      	str	r3, [r0, #20]
 8004214:	6183      	str	r3, [r0, #24]
 8004216:	2208      	movs	r2, #8
 8004218:	305c      	adds	r0, #92	; 0x5c
 800421a:	f7ff fdb1 	bl	8003d80 <memset>
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <std+0x38>)
 8004220:	6263      	str	r3, [r4, #36]	; 0x24
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <std+0x3c>)
 8004224:	6224      	str	r4, [r4, #32]
 8004226:	62a3      	str	r3, [r4, #40]	; 0x28
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <std+0x40>)
 800422a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <std+0x44>)
 800422e:	6323      	str	r3, [r4, #48]	; 0x30
 8004230:	bd10      	pop	{r4, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	08004c1d 	.word	0x08004c1d
 8004238:	08004c45 	.word	0x08004c45
 800423c:	08004c7d 	.word	0x08004c7d
 8004240:	08004ca9 	.word	0x08004ca9

08004244 <_cleanup_r>:
 8004244:	b510      	push	{r4, lr}
 8004246:	4902      	ldr	r1, [pc, #8]	; (8004250 <_cleanup_r+0xc>)
 8004248:	f000 f8ba 	bl	80043c0 <_fwalk_reent>
 800424c:	bd10      	pop	{r4, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	0800417d 	.word	0x0800417d

08004254 <__sfmoreglue>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	2568      	movs	r5, #104	; 0x68
 8004258:	1e4a      	subs	r2, r1, #1
 800425a:	4355      	muls	r5, r2
 800425c:	000e      	movs	r6, r1
 800425e:	0029      	movs	r1, r5
 8004260:	3174      	adds	r1, #116	; 0x74
 8004262:	f000 f987 	bl	8004574 <_malloc_r>
 8004266:	1e04      	subs	r4, r0, #0
 8004268:	d008      	beq.n	800427c <__sfmoreglue+0x28>
 800426a:	2100      	movs	r1, #0
 800426c:	002a      	movs	r2, r5
 800426e:	6001      	str	r1, [r0, #0]
 8004270:	6046      	str	r6, [r0, #4]
 8004272:	300c      	adds	r0, #12
 8004274:	60a0      	str	r0, [r4, #8]
 8004276:	3268      	adds	r2, #104	; 0x68
 8004278:	f7ff fd82 	bl	8003d80 <memset>
 800427c:	0020      	movs	r0, r4
 800427e:	bd70      	pop	{r4, r5, r6, pc}

08004280 <__sfp_lock_acquire>:
 8004280:	b510      	push	{r4, lr}
 8004282:	4802      	ldr	r0, [pc, #8]	; (800428c <__sfp_lock_acquire+0xc>)
 8004284:	f000 f8bd 	bl	8004402 <__retarget_lock_acquire_recursive>
 8004288:	bd10      	pop	{r4, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	200001c4 	.word	0x200001c4

08004290 <__sfp_lock_release>:
 8004290:	b510      	push	{r4, lr}
 8004292:	4802      	ldr	r0, [pc, #8]	; (800429c <__sfp_lock_release+0xc>)
 8004294:	f000 f8b6 	bl	8004404 <__retarget_lock_release_recursive>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	200001c4 	.word	0x200001c4

080042a0 <__sinit_lock_acquire>:
 80042a0:	b510      	push	{r4, lr}
 80042a2:	4802      	ldr	r0, [pc, #8]	; (80042ac <__sinit_lock_acquire+0xc>)
 80042a4:	f000 f8ad 	bl	8004402 <__retarget_lock_acquire_recursive>
 80042a8:	bd10      	pop	{r4, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	200001bf 	.word	0x200001bf

080042b0 <__sinit_lock_release>:
 80042b0:	b510      	push	{r4, lr}
 80042b2:	4802      	ldr	r0, [pc, #8]	; (80042bc <__sinit_lock_release+0xc>)
 80042b4:	f000 f8a6 	bl	8004404 <__retarget_lock_release_recursive>
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	200001bf 	.word	0x200001bf

080042c0 <__sinit>:
 80042c0:	b513      	push	{r0, r1, r4, lr}
 80042c2:	0004      	movs	r4, r0
 80042c4:	f7ff ffec 	bl	80042a0 <__sinit_lock_acquire>
 80042c8:	69a3      	ldr	r3, [r4, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <__sinit+0x14>
 80042ce:	f7ff ffef 	bl	80042b0 <__sinit_lock_release>
 80042d2:	bd13      	pop	{r0, r1, r4, pc}
 80042d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80042d6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80042d8:	6523      	str	r3, [r4, #80]	; 0x50
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <__sinit+0x68>)
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <__sinit+0x6c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	42a3      	cmp	r3, r4
 80042e6:	d101      	bne.n	80042ec <__sinit+0x2c>
 80042e8:	2301      	movs	r3, #1
 80042ea:	61a3      	str	r3, [r4, #24]
 80042ec:	0020      	movs	r0, r4
 80042ee:	f000 f81f 	bl	8004330 <__sfp>
 80042f2:	6060      	str	r0, [r4, #4]
 80042f4:	0020      	movs	r0, r4
 80042f6:	f000 f81b 	bl	8004330 <__sfp>
 80042fa:	60a0      	str	r0, [r4, #8]
 80042fc:	0020      	movs	r0, r4
 80042fe:	f000 f817 	bl	8004330 <__sfp>
 8004302:	2200      	movs	r2, #0
 8004304:	2104      	movs	r1, #4
 8004306:	60e0      	str	r0, [r4, #12]
 8004308:	6860      	ldr	r0, [r4, #4]
 800430a:	f7ff ff77 	bl	80041fc <std>
 800430e:	2201      	movs	r2, #1
 8004310:	2109      	movs	r1, #9
 8004312:	68a0      	ldr	r0, [r4, #8]
 8004314:	f7ff ff72 	bl	80041fc <std>
 8004318:	2202      	movs	r2, #2
 800431a:	2112      	movs	r1, #18
 800431c:	68e0      	ldr	r0, [r4, #12]
 800431e:	f7ff ff6d 	bl	80041fc <std>
 8004322:	2301      	movs	r3, #1
 8004324:	61a3      	str	r3, [r4, #24]
 8004326:	e7d2      	b.n	80042ce <__sinit+0xe>
 8004328:	08004f90 	.word	0x08004f90
 800432c:	08004245 	.word	0x08004245

08004330 <__sfp>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	0007      	movs	r7, r0
 8004334:	f7ff ffa4 	bl	8004280 <__sfp_lock_acquire>
 8004338:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <__sfp+0x88>)
 800433a:	681e      	ldr	r6, [r3, #0]
 800433c:	69b3      	ldr	r3, [r6, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <__sfp+0x18>
 8004342:	0030      	movs	r0, r6
 8004344:	f7ff ffbc 	bl	80042c0 <__sinit>
 8004348:	3648      	adds	r6, #72	; 0x48
 800434a:	68b4      	ldr	r4, [r6, #8]
 800434c:	6873      	ldr	r3, [r6, #4]
 800434e:	3b01      	subs	r3, #1
 8004350:	d504      	bpl.n	800435c <__sfp+0x2c>
 8004352:	6833      	ldr	r3, [r6, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d022      	beq.n	800439e <__sfp+0x6e>
 8004358:	6836      	ldr	r6, [r6, #0]
 800435a:	e7f6      	b.n	800434a <__sfp+0x1a>
 800435c:	220c      	movs	r2, #12
 800435e:	5ea5      	ldrsh	r5, [r4, r2]
 8004360:	2d00      	cmp	r5, #0
 8004362:	d11a      	bne.n	800439a <__sfp+0x6a>
 8004364:	0020      	movs	r0, r4
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <__sfp+0x8c>)
 8004368:	3058      	adds	r0, #88	; 0x58
 800436a:	60e3      	str	r3, [r4, #12]
 800436c:	6665      	str	r5, [r4, #100]	; 0x64
 800436e:	f000 f847 	bl	8004400 <__retarget_lock_init_recursive>
 8004372:	f7ff ff8d 	bl	8004290 <__sfp_lock_release>
 8004376:	0020      	movs	r0, r4
 8004378:	2208      	movs	r2, #8
 800437a:	0029      	movs	r1, r5
 800437c:	6025      	str	r5, [r4, #0]
 800437e:	60a5      	str	r5, [r4, #8]
 8004380:	6065      	str	r5, [r4, #4]
 8004382:	6125      	str	r5, [r4, #16]
 8004384:	6165      	str	r5, [r4, #20]
 8004386:	61a5      	str	r5, [r4, #24]
 8004388:	305c      	adds	r0, #92	; 0x5c
 800438a:	f7ff fcf9 	bl	8003d80 <memset>
 800438e:	6365      	str	r5, [r4, #52]	; 0x34
 8004390:	63a5      	str	r5, [r4, #56]	; 0x38
 8004392:	64a5      	str	r5, [r4, #72]	; 0x48
 8004394:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004396:	0020      	movs	r0, r4
 8004398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800439a:	3468      	adds	r4, #104	; 0x68
 800439c:	e7d7      	b.n	800434e <__sfp+0x1e>
 800439e:	2104      	movs	r1, #4
 80043a0:	0038      	movs	r0, r7
 80043a2:	f7ff ff57 	bl	8004254 <__sfmoreglue>
 80043a6:	1e04      	subs	r4, r0, #0
 80043a8:	6030      	str	r0, [r6, #0]
 80043aa:	d1d5      	bne.n	8004358 <__sfp+0x28>
 80043ac:	f7ff ff70 	bl	8004290 <__sfp_lock_release>
 80043b0:	230c      	movs	r3, #12
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	e7ef      	b.n	8004396 <__sfp+0x66>
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	08004f90 	.word	0x08004f90
 80043bc:	ffff0001 	.word	0xffff0001

080043c0 <_fwalk_reent>:
 80043c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043c2:	0004      	movs	r4, r0
 80043c4:	0006      	movs	r6, r0
 80043c6:	2700      	movs	r7, #0
 80043c8:	9101      	str	r1, [sp, #4]
 80043ca:	3448      	adds	r4, #72	; 0x48
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	68a5      	ldr	r5, [r4, #8]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	9b00      	ldr	r3, [sp, #0]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	d504      	bpl.n	80043e4 <_fwalk_reent+0x24>
 80043da:	6824      	ldr	r4, [r4, #0]
 80043dc:	2c00      	cmp	r4, #0
 80043de:	d1f5      	bne.n	80043cc <_fwalk_reent+0xc>
 80043e0:	0038      	movs	r0, r7
 80043e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043e4:	89ab      	ldrh	r3, [r5, #12]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d908      	bls.n	80043fc <_fwalk_reent+0x3c>
 80043ea:	220e      	movs	r2, #14
 80043ec:	5eab      	ldrsh	r3, [r5, r2]
 80043ee:	3301      	adds	r3, #1
 80043f0:	d004      	beq.n	80043fc <_fwalk_reent+0x3c>
 80043f2:	0029      	movs	r1, r5
 80043f4:	0030      	movs	r0, r6
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	4798      	blx	r3
 80043fa:	4307      	orrs	r7, r0
 80043fc:	3568      	adds	r5, #104	; 0x68
 80043fe:	e7e8      	b.n	80043d2 <_fwalk_reent+0x12>

08004400 <__retarget_lock_init_recursive>:
 8004400:	4770      	bx	lr

08004402 <__retarget_lock_acquire_recursive>:
 8004402:	4770      	bx	lr

08004404 <__retarget_lock_release_recursive>:
 8004404:	4770      	bx	lr
	...

08004408 <__swhatbuf_r>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	000e      	movs	r6, r1
 800440c:	001d      	movs	r5, r3
 800440e:	230e      	movs	r3, #14
 8004410:	5ec9      	ldrsh	r1, [r1, r3]
 8004412:	0014      	movs	r4, r2
 8004414:	b096      	sub	sp, #88	; 0x58
 8004416:	2900      	cmp	r1, #0
 8004418:	da07      	bge.n	800442a <__swhatbuf_r+0x22>
 800441a:	2300      	movs	r3, #0
 800441c:	602b      	str	r3, [r5, #0]
 800441e:	89b3      	ldrh	r3, [r6, #12]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	d411      	bmi.n	8004448 <__swhatbuf_r+0x40>
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	e00f      	b.n	800444a <__swhatbuf_r+0x42>
 800442a:	466a      	mov	r2, sp
 800442c:	f000 fc68 	bl	8004d00 <_fstat_r>
 8004430:	2800      	cmp	r0, #0
 8004432:	dbf2      	blt.n	800441a <__swhatbuf_r+0x12>
 8004434:	23f0      	movs	r3, #240	; 0xf0
 8004436:	9901      	ldr	r1, [sp, #4]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	4019      	ands	r1, r3
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <__swhatbuf_r+0x4c>)
 800443e:	18c9      	adds	r1, r1, r3
 8004440:	424b      	negs	r3, r1
 8004442:	4159      	adcs	r1, r3
 8004444:	6029      	str	r1, [r5, #0]
 8004446:	e7ed      	b.n	8004424 <__swhatbuf_r+0x1c>
 8004448:	2340      	movs	r3, #64	; 0x40
 800444a:	2000      	movs	r0, #0
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	b016      	add	sp, #88	; 0x58
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	ffffe000 	.word	0xffffe000

08004458 <__smakebuf_r>:
 8004458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800445a:	2602      	movs	r6, #2
 800445c:	898b      	ldrh	r3, [r1, #12]
 800445e:	0005      	movs	r5, r0
 8004460:	000c      	movs	r4, r1
 8004462:	4233      	tst	r3, r6
 8004464:	d006      	beq.n	8004474 <__smakebuf_r+0x1c>
 8004466:	0023      	movs	r3, r4
 8004468:	3347      	adds	r3, #71	; 0x47
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	2301      	movs	r3, #1
 8004470:	6163      	str	r3, [r4, #20]
 8004472:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004474:	466a      	mov	r2, sp
 8004476:	ab01      	add	r3, sp, #4
 8004478:	f7ff ffc6 	bl	8004408 <__swhatbuf_r>
 800447c:	9900      	ldr	r1, [sp, #0]
 800447e:	0007      	movs	r7, r0
 8004480:	0028      	movs	r0, r5
 8004482:	f000 f877 	bl	8004574 <_malloc_r>
 8004486:	2800      	cmp	r0, #0
 8004488:	d108      	bne.n	800449c <__smakebuf_r+0x44>
 800448a:	220c      	movs	r2, #12
 800448c:	5ea3      	ldrsh	r3, [r4, r2]
 800448e:	059a      	lsls	r2, r3, #22
 8004490:	d4ef      	bmi.n	8004472 <__smakebuf_r+0x1a>
 8004492:	2203      	movs	r2, #3
 8004494:	4393      	bics	r3, r2
 8004496:	431e      	orrs	r6, r3
 8004498:	81a6      	strh	r6, [r4, #12]
 800449a:	e7e4      	b.n	8004466 <__smakebuf_r+0xe>
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <__smakebuf_r+0x84>)
 800449e:	62ab      	str	r3, [r5, #40]	; 0x28
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	89a2      	ldrh	r2, [r4, #12]
 80044a4:	6020      	str	r0, [r4, #0]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	9b00      	ldr	r3, [sp, #0]
 80044ac:	6120      	str	r0, [r4, #16]
 80044ae:	6163      	str	r3, [r4, #20]
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <__smakebuf_r+0x7a>
 80044b6:	0028      	movs	r0, r5
 80044b8:	230e      	movs	r3, #14
 80044ba:	5ee1      	ldrsh	r1, [r4, r3]
 80044bc:	f000 fc32 	bl	8004d24 <_isatty_r>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d006      	beq.n	80044d2 <__smakebuf_r+0x7a>
 80044c4:	2203      	movs	r2, #3
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	4393      	bics	r3, r2
 80044ca:	001a      	movs	r2, r3
 80044cc:	2301      	movs	r3, #1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	81a3      	strh	r3, [r4, #12]
 80044d2:	89a0      	ldrh	r0, [r4, #12]
 80044d4:	4307      	orrs	r7, r0
 80044d6:	81a7      	strh	r7, [r4, #12]
 80044d8:	e7cb      	b.n	8004472 <__smakebuf_r+0x1a>
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	08004245 	.word	0x08004245

080044e0 <_free_r>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	0005      	movs	r5, r0
 80044e4:	2900      	cmp	r1, #0
 80044e6:	d010      	beq.n	800450a <_free_r+0x2a>
 80044e8:	1f0c      	subs	r4, r1, #4
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	da00      	bge.n	80044f2 <_free_r+0x12>
 80044f0:	18e4      	adds	r4, r4, r3
 80044f2:	0028      	movs	r0, r5
 80044f4:	f000 fc64 	bl	8004dc0 <__malloc_lock>
 80044f8:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <_free_r+0x90>)
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <_free_r+0x2c>
 8004500:	6063      	str	r3, [r4, #4]
 8004502:	6014      	str	r4, [r2, #0]
 8004504:	0028      	movs	r0, r5
 8004506:	f000 fc63 	bl	8004dd0 <__malloc_unlock>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	42a3      	cmp	r3, r4
 800450e:	d908      	bls.n	8004522 <_free_r+0x42>
 8004510:	6821      	ldr	r1, [r4, #0]
 8004512:	1860      	adds	r0, r4, r1
 8004514:	4283      	cmp	r3, r0
 8004516:	d1f3      	bne.n	8004500 <_free_r+0x20>
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	1841      	adds	r1, r0, r1
 800451e:	6021      	str	r1, [r4, #0]
 8004520:	e7ee      	b.n	8004500 <_free_r+0x20>
 8004522:	001a      	movs	r2, r3
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <_free_r+0x4e>
 800452a:	42a3      	cmp	r3, r4
 800452c:	d9f9      	bls.n	8004522 <_free_r+0x42>
 800452e:	6811      	ldr	r1, [r2, #0]
 8004530:	1850      	adds	r0, r2, r1
 8004532:	42a0      	cmp	r0, r4
 8004534:	d10b      	bne.n	800454e <_free_r+0x6e>
 8004536:	6820      	ldr	r0, [r4, #0]
 8004538:	1809      	adds	r1, r1, r0
 800453a:	1850      	adds	r0, r2, r1
 800453c:	6011      	str	r1, [r2, #0]
 800453e:	4283      	cmp	r3, r0
 8004540:	d1e0      	bne.n	8004504 <_free_r+0x24>
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	1841      	adds	r1, r0, r1
 8004548:	6011      	str	r1, [r2, #0]
 800454a:	6053      	str	r3, [r2, #4]
 800454c:	e7da      	b.n	8004504 <_free_r+0x24>
 800454e:	42a0      	cmp	r0, r4
 8004550:	d902      	bls.n	8004558 <_free_r+0x78>
 8004552:	230c      	movs	r3, #12
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	e7d5      	b.n	8004504 <_free_r+0x24>
 8004558:	6821      	ldr	r1, [r4, #0]
 800455a:	1860      	adds	r0, r4, r1
 800455c:	4283      	cmp	r3, r0
 800455e:	d103      	bne.n	8004568 <_free_r+0x88>
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	1841      	adds	r1, r0, r1
 8004566:	6021      	str	r1, [r4, #0]
 8004568:	6063      	str	r3, [r4, #4]
 800456a:	6054      	str	r4, [r2, #4]
 800456c:	e7ca      	b.n	8004504 <_free_r+0x24>
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	200000e0 	.word	0x200000e0

08004574 <_malloc_r>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	2303      	movs	r3, #3
 8004578:	1ccd      	adds	r5, r1, #3
 800457a:	439d      	bics	r5, r3
 800457c:	3508      	adds	r5, #8
 800457e:	0006      	movs	r6, r0
 8004580:	2d0c      	cmp	r5, #12
 8004582:	d21f      	bcs.n	80045c4 <_malloc_r+0x50>
 8004584:	250c      	movs	r5, #12
 8004586:	42a9      	cmp	r1, r5
 8004588:	d81e      	bhi.n	80045c8 <_malloc_r+0x54>
 800458a:	0030      	movs	r0, r6
 800458c:	f000 fc18 	bl	8004dc0 <__malloc_lock>
 8004590:	4925      	ldr	r1, [pc, #148]	; (8004628 <_malloc_r+0xb4>)
 8004592:	680a      	ldr	r2, [r1, #0]
 8004594:	0014      	movs	r4, r2
 8004596:	2c00      	cmp	r4, #0
 8004598:	d11a      	bne.n	80045d0 <_malloc_r+0x5c>
 800459a:	4f24      	ldr	r7, [pc, #144]	; (800462c <_malloc_r+0xb8>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <_malloc_r+0x38>
 80045a2:	0021      	movs	r1, r4
 80045a4:	0030      	movs	r0, r6
 80045a6:	f000 fb27 	bl	8004bf8 <_sbrk_r>
 80045aa:	6038      	str	r0, [r7, #0]
 80045ac:	0029      	movs	r1, r5
 80045ae:	0030      	movs	r0, r6
 80045b0:	f000 fb22 	bl	8004bf8 <_sbrk_r>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d12b      	bne.n	8004610 <_malloc_r+0x9c>
 80045b8:	230c      	movs	r3, #12
 80045ba:	0030      	movs	r0, r6
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	f000 fc07 	bl	8004dd0 <__malloc_unlock>
 80045c2:	e003      	b.n	80045cc <_malloc_r+0x58>
 80045c4:	2d00      	cmp	r5, #0
 80045c6:	dade      	bge.n	8004586 <_malloc_r+0x12>
 80045c8:	230c      	movs	r3, #12
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	2000      	movs	r0, #0
 80045ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	1b5b      	subs	r3, r3, r5
 80045d4:	d419      	bmi.n	800460a <_malloc_r+0x96>
 80045d6:	2b0b      	cmp	r3, #11
 80045d8:	d903      	bls.n	80045e2 <_malloc_r+0x6e>
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	18e4      	adds	r4, r4, r3
 80045de:	6025      	str	r5, [r4, #0]
 80045e0:	e003      	b.n	80045ea <_malloc_r+0x76>
 80045e2:	6863      	ldr	r3, [r4, #4]
 80045e4:	42a2      	cmp	r2, r4
 80045e6:	d10e      	bne.n	8004606 <_malloc_r+0x92>
 80045e8:	600b      	str	r3, [r1, #0]
 80045ea:	0030      	movs	r0, r6
 80045ec:	f000 fbf0 	bl	8004dd0 <__malloc_unlock>
 80045f0:	0020      	movs	r0, r4
 80045f2:	2207      	movs	r2, #7
 80045f4:	300b      	adds	r0, #11
 80045f6:	1d23      	adds	r3, r4, #4
 80045f8:	4390      	bics	r0, r2
 80045fa:	1ac2      	subs	r2, r0, r3
 80045fc:	4298      	cmp	r0, r3
 80045fe:	d0e6      	beq.n	80045ce <_malloc_r+0x5a>
 8004600:	1a1b      	subs	r3, r3, r0
 8004602:	50a3      	str	r3, [r4, r2]
 8004604:	e7e3      	b.n	80045ce <_malloc_r+0x5a>
 8004606:	6053      	str	r3, [r2, #4]
 8004608:	e7ef      	b.n	80045ea <_malloc_r+0x76>
 800460a:	0022      	movs	r2, r4
 800460c:	6864      	ldr	r4, [r4, #4]
 800460e:	e7c2      	b.n	8004596 <_malloc_r+0x22>
 8004610:	2303      	movs	r3, #3
 8004612:	1cc4      	adds	r4, r0, #3
 8004614:	439c      	bics	r4, r3
 8004616:	42a0      	cmp	r0, r4
 8004618:	d0e1      	beq.n	80045de <_malloc_r+0x6a>
 800461a:	1a21      	subs	r1, r4, r0
 800461c:	0030      	movs	r0, r6
 800461e:	f000 faeb 	bl	8004bf8 <_sbrk_r>
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	d1db      	bne.n	80045de <_malloc_r+0x6a>
 8004626:	e7c7      	b.n	80045b8 <_malloc_r+0x44>
 8004628:	200000e0 	.word	0x200000e0
 800462c:	200000e4 	.word	0x200000e4

08004630 <__ssputs_r>:
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004632:	688e      	ldr	r6, [r1, #8]
 8004634:	b085      	sub	sp, #20
 8004636:	0007      	movs	r7, r0
 8004638:	000c      	movs	r4, r1
 800463a:	9203      	str	r2, [sp, #12]
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	429e      	cmp	r6, r3
 8004640:	d83c      	bhi.n	80046bc <__ssputs_r+0x8c>
 8004642:	2390      	movs	r3, #144	; 0x90
 8004644:	898a      	ldrh	r2, [r1, #12]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	421a      	tst	r2, r3
 800464a:	d034      	beq.n	80046b6 <__ssputs_r+0x86>
 800464c:	2503      	movs	r5, #3
 800464e:	6909      	ldr	r1, [r1, #16]
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	1a5b      	subs	r3, r3, r1
 8004654:	9302      	str	r3, [sp, #8]
 8004656:	6963      	ldr	r3, [r4, #20]
 8004658:	9802      	ldr	r0, [sp, #8]
 800465a:	435d      	muls	r5, r3
 800465c:	0feb      	lsrs	r3, r5, #31
 800465e:	195d      	adds	r5, r3, r5
 8004660:	9b01      	ldr	r3, [sp, #4]
 8004662:	106d      	asrs	r5, r5, #1
 8004664:	3301      	adds	r3, #1
 8004666:	181b      	adds	r3, r3, r0
 8004668:	42ab      	cmp	r3, r5
 800466a:	d900      	bls.n	800466e <__ssputs_r+0x3e>
 800466c:	001d      	movs	r5, r3
 800466e:	0553      	lsls	r3, r2, #21
 8004670:	d532      	bpl.n	80046d8 <__ssputs_r+0xa8>
 8004672:	0029      	movs	r1, r5
 8004674:	0038      	movs	r0, r7
 8004676:	f7ff ff7d 	bl	8004574 <_malloc_r>
 800467a:	1e06      	subs	r6, r0, #0
 800467c:	d109      	bne.n	8004692 <__ssputs_r+0x62>
 800467e:	230c      	movs	r3, #12
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	2001      	movs	r0, #1
 8004686:	89a2      	ldrh	r2, [r4, #12]
 8004688:	4240      	negs	r0, r0
 800468a:	4313      	orrs	r3, r2
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	b005      	add	sp, #20
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004692:	9a02      	ldr	r2, [sp, #8]
 8004694:	6921      	ldr	r1, [r4, #16]
 8004696:	f000 fb76 	bl	8004d86 <memcpy>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <__ssputs_r+0xc0>)
 800469e:	401a      	ands	r2, r3
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	4313      	orrs	r3, r2
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	9b02      	ldr	r3, [sp, #8]
 80046a8:	6126      	str	r6, [r4, #16]
 80046aa:	18f6      	adds	r6, r6, r3
 80046ac:	6026      	str	r6, [r4, #0]
 80046ae:	6165      	str	r5, [r4, #20]
 80046b0:	9e01      	ldr	r6, [sp, #4]
 80046b2:	1aed      	subs	r5, r5, r3
 80046b4:	60a5      	str	r5, [r4, #8]
 80046b6:	9b01      	ldr	r3, [sp, #4]
 80046b8:	429e      	cmp	r6, r3
 80046ba:	d900      	bls.n	80046be <__ssputs_r+0x8e>
 80046bc:	9e01      	ldr	r6, [sp, #4]
 80046be:	0032      	movs	r2, r6
 80046c0:	9903      	ldr	r1, [sp, #12]
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	f000 fb68 	bl	8004d98 <memmove>
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	2000      	movs	r0, #0
 80046cc:	1b9b      	subs	r3, r3, r6
 80046ce:	60a3      	str	r3, [r4, #8]
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	199e      	adds	r6, r3, r6
 80046d4:	6026      	str	r6, [r4, #0]
 80046d6:	e7da      	b.n	800468e <__ssputs_r+0x5e>
 80046d8:	002a      	movs	r2, r5
 80046da:	0038      	movs	r0, r7
 80046dc:	f000 fb80 	bl	8004de0 <_realloc_r>
 80046e0:	1e06      	subs	r6, r0, #0
 80046e2:	d1e0      	bne.n	80046a6 <__ssputs_r+0x76>
 80046e4:	0038      	movs	r0, r7
 80046e6:	6921      	ldr	r1, [r4, #16]
 80046e8:	f7ff fefa 	bl	80044e0 <_free_r>
 80046ec:	e7c7      	b.n	800467e <__ssputs_r+0x4e>
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	fffffb7f 	.word	0xfffffb7f

080046f4 <_svfiprintf_r>:
 80046f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f6:	b0a1      	sub	sp, #132	; 0x84
 80046f8:	9003      	str	r0, [sp, #12]
 80046fa:	001d      	movs	r5, r3
 80046fc:	898b      	ldrh	r3, [r1, #12]
 80046fe:	000f      	movs	r7, r1
 8004700:	0016      	movs	r6, r2
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	d511      	bpl.n	800472a <_svfiprintf_r+0x36>
 8004706:	690b      	ldr	r3, [r1, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10e      	bne.n	800472a <_svfiprintf_r+0x36>
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	f7ff ff31 	bl	8004574 <_malloc_r>
 8004712:	6038      	str	r0, [r7, #0]
 8004714:	6138      	str	r0, [r7, #16]
 8004716:	2800      	cmp	r0, #0
 8004718:	d105      	bne.n	8004726 <_svfiprintf_r+0x32>
 800471a:	230c      	movs	r3, #12
 800471c:	9a03      	ldr	r2, [sp, #12]
 800471e:	3801      	subs	r0, #1
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	b021      	add	sp, #132	; 0x84
 8004724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004726:	2340      	movs	r3, #64	; 0x40
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	2300      	movs	r3, #0
 800472c:	ac08      	add	r4, sp, #32
 800472e:	6163      	str	r3, [r4, #20]
 8004730:	3320      	adds	r3, #32
 8004732:	7663      	strb	r3, [r4, #25]
 8004734:	3310      	adds	r3, #16
 8004736:	76a3      	strb	r3, [r4, #26]
 8004738:	9507      	str	r5, [sp, #28]
 800473a:	0035      	movs	r5, r6
 800473c:	782b      	ldrb	r3, [r5, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <_svfiprintf_r+0x52>
 8004742:	2b25      	cmp	r3, #37	; 0x25
 8004744:	d147      	bne.n	80047d6 <_svfiprintf_r+0xe2>
 8004746:	1bab      	subs	r3, r5, r6
 8004748:	9305      	str	r3, [sp, #20]
 800474a:	42b5      	cmp	r5, r6
 800474c:	d00c      	beq.n	8004768 <_svfiprintf_r+0x74>
 800474e:	0032      	movs	r2, r6
 8004750:	0039      	movs	r1, r7
 8004752:	9803      	ldr	r0, [sp, #12]
 8004754:	f7ff ff6c 	bl	8004630 <__ssputs_r>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d100      	bne.n	800475e <_svfiprintf_r+0x6a>
 800475c:	e0ae      	b.n	80048bc <_svfiprintf_r+0x1c8>
 800475e:	6962      	ldr	r2, [r4, #20]
 8004760:	9b05      	ldr	r3, [sp, #20]
 8004762:	4694      	mov	ip, r2
 8004764:	4463      	add	r3, ip
 8004766:	6163      	str	r3, [r4, #20]
 8004768:	782b      	ldrb	r3, [r5, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d100      	bne.n	8004770 <_svfiprintf_r+0x7c>
 800476e:	e0a5      	b.n	80048bc <_svfiprintf_r+0x1c8>
 8004770:	2201      	movs	r2, #1
 8004772:	2300      	movs	r3, #0
 8004774:	4252      	negs	r2, r2
 8004776:	6062      	str	r2, [r4, #4]
 8004778:	a904      	add	r1, sp, #16
 800477a:	3254      	adds	r2, #84	; 0x54
 800477c:	1852      	adds	r2, r2, r1
 800477e:	1c6e      	adds	r6, r5, #1
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	60e3      	str	r3, [r4, #12]
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	7013      	strb	r3, [r2, #0]
 8004788:	65a3      	str	r3, [r4, #88]	; 0x58
 800478a:	2205      	movs	r2, #5
 800478c:	7831      	ldrb	r1, [r6, #0]
 800478e:	4854      	ldr	r0, [pc, #336]	; (80048e0 <_svfiprintf_r+0x1ec>)
 8004790:	f000 faee 	bl	8004d70 <memchr>
 8004794:	1c75      	adds	r5, r6, #1
 8004796:	2800      	cmp	r0, #0
 8004798:	d11f      	bne.n	80047da <_svfiprintf_r+0xe6>
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	06d3      	lsls	r3, r2, #27
 800479e:	d504      	bpl.n	80047aa <_svfiprintf_r+0xb6>
 80047a0:	2353      	movs	r3, #83	; 0x53
 80047a2:	a904      	add	r1, sp, #16
 80047a4:	185b      	adds	r3, r3, r1
 80047a6:	2120      	movs	r1, #32
 80047a8:	7019      	strb	r1, [r3, #0]
 80047aa:	0713      	lsls	r3, r2, #28
 80047ac:	d504      	bpl.n	80047b8 <_svfiprintf_r+0xc4>
 80047ae:	2353      	movs	r3, #83	; 0x53
 80047b0:	a904      	add	r1, sp, #16
 80047b2:	185b      	adds	r3, r3, r1
 80047b4:	212b      	movs	r1, #43	; 0x2b
 80047b6:	7019      	strb	r1, [r3, #0]
 80047b8:	7833      	ldrb	r3, [r6, #0]
 80047ba:	2b2a      	cmp	r3, #42	; 0x2a
 80047bc:	d016      	beq.n	80047ec <_svfiprintf_r+0xf8>
 80047be:	0035      	movs	r5, r6
 80047c0:	2100      	movs	r1, #0
 80047c2:	200a      	movs	r0, #10
 80047c4:	68e3      	ldr	r3, [r4, #12]
 80047c6:	782a      	ldrb	r2, [r5, #0]
 80047c8:	1c6e      	adds	r6, r5, #1
 80047ca:	3a30      	subs	r2, #48	; 0x30
 80047cc:	2a09      	cmp	r2, #9
 80047ce:	d94e      	bls.n	800486e <_svfiprintf_r+0x17a>
 80047d0:	2900      	cmp	r1, #0
 80047d2:	d111      	bne.n	80047f8 <_svfiprintf_r+0x104>
 80047d4:	e017      	b.n	8004806 <_svfiprintf_r+0x112>
 80047d6:	3501      	adds	r5, #1
 80047d8:	e7b0      	b.n	800473c <_svfiprintf_r+0x48>
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <_svfiprintf_r+0x1ec>)
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	1ac0      	subs	r0, r0, r3
 80047e0:	2301      	movs	r3, #1
 80047e2:	4083      	lsls	r3, r0
 80047e4:	4313      	orrs	r3, r2
 80047e6:	002e      	movs	r6, r5
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	e7ce      	b.n	800478a <_svfiprintf_r+0x96>
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	1d19      	adds	r1, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	9107      	str	r1, [sp, #28]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	db01      	blt.n	80047fc <_svfiprintf_r+0x108>
 80047f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80047fa:	e004      	b.n	8004806 <_svfiprintf_r+0x112>
 80047fc:	425b      	negs	r3, r3
 80047fe:	60e3      	str	r3, [r4, #12]
 8004800:	2302      	movs	r3, #2
 8004802:	4313      	orrs	r3, r2
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	782b      	ldrb	r3, [r5, #0]
 8004808:	2b2e      	cmp	r3, #46	; 0x2e
 800480a:	d10a      	bne.n	8004822 <_svfiprintf_r+0x12e>
 800480c:	786b      	ldrb	r3, [r5, #1]
 800480e:	2b2a      	cmp	r3, #42	; 0x2a
 8004810:	d135      	bne.n	800487e <_svfiprintf_r+0x18a>
 8004812:	9b07      	ldr	r3, [sp, #28]
 8004814:	3502      	adds	r5, #2
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	9207      	str	r2, [sp, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db2b      	blt.n	8004878 <_svfiprintf_r+0x184>
 8004820:	9309      	str	r3, [sp, #36]	; 0x24
 8004822:	4e30      	ldr	r6, [pc, #192]	; (80048e4 <_svfiprintf_r+0x1f0>)
 8004824:	2203      	movs	r2, #3
 8004826:	0030      	movs	r0, r6
 8004828:	7829      	ldrb	r1, [r5, #0]
 800482a:	f000 faa1 	bl	8004d70 <memchr>
 800482e:	2800      	cmp	r0, #0
 8004830:	d006      	beq.n	8004840 <_svfiprintf_r+0x14c>
 8004832:	2340      	movs	r3, #64	; 0x40
 8004834:	1b80      	subs	r0, r0, r6
 8004836:	4083      	lsls	r3, r0
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	3501      	adds	r5, #1
 800483c:	4313      	orrs	r3, r2
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	7829      	ldrb	r1, [r5, #0]
 8004842:	2206      	movs	r2, #6
 8004844:	4828      	ldr	r0, [pc, #160]	; (80048e8 <_svfiprintf_r+0x1f4>)
 8004846:	1c6e      	adds	r6, r5, #1
 8004848:	7621      	strb	r1, [r4, #24]
 800484a:	f000 fa91 	bl	8004d70 <memchr>
 800484e:	2800      	cmp	r0, #0
 8004850:	d03c      	beq.n	80048cc <_svfiprintf_r+0x1d8>
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <_svfiprintf_r+0x1f8>)
 8004854:	2b00      	cmp	r3, #0
 8004856:	d125      	bne.n	80048a4 <_svfiprintf_r+0x1b0>
 8004858:	2207      	movs	r2, #7
 800485a:	9b07      	ldr	r3, [sp, #28]
 800485c:	3307      	adds	r3, #7
 800485e:	4393      	bics	r3, r2
 8004860:	3308      	adds	r3, #8
 8004862:	9307      	str	r3, [sp, #28]
 8004864:	6963      	ldr	r3, [r4, #20]
 8004866:	9a04      	ldr	r2, [sp, #16]
 8004868:	189b      	adds	r3, r3, r2
 800486a:	6163      	str	r3, [r4, #20]
 800486c:	e765      	b.n	800473a <_svfiprintf_r+0x46>
 800486e:	4343      	muls	r3, r0
 8004870:	0035      	movs	r5, r6
 8004872:	2101      	movs	r1, #1
 8004874:	189b      	adds	r3, r3, r2
 8004876:	e7a6      	b.n	80047c6 <_svfiprintf_r+0xd2>
 8004878:	2301      	movs	r3, #1
 800487a:	425b      	negs	r3, r3
 800487c:	e7d0      	b.n	8004820 <_svfiprintf_r+0x12c>
 800487e:	2300      	movs	r3, #0
 8004880:	200a      	movs	r0, #10
 8004882:	001a      	movs	r2, r3
 8004884:	3501      	adds	r5, #1
 8004886:	6063      	str	r3, [r4, #4]
 8004888:	7829      	ldrb	r1, [r5, #0]
 800488a:	1c6e      	adds	r6, r5, #1
 800488c:	3930      	subs	r1, #48	; 0x30
 800488e:	2909      	cmp	r1, #9
 8004890:	d903      	bls.n	800489a <_svfiprintf_r+0x1a6>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0c5      	beq.n	8004822 <_svfiprintf_r+0x12e>
 8004896:	9209      	str	r2, [sp, #36]	; 0x24
 8004898:	e7c3      	b.n	8004822 <_svfiprintf_r+0x12e>
 800489a:	4342      	muls	r2, r0
 800489c:	0035      	movs	r5, r6
 800489e:	2301      	movs	r3, #1
 80048a0:	1852      	adds	r2, r2, r1
 80048a2:	e7f1      	b.n	8004888 <_svfiprintf_r+0x194>
 80048a4:	ab07      	add	r3, sp, #28
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	003a      	movs	r2, r7
 80048aa:	0021      	movs	r1, r4
 80048ac:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <_svfiprintf_r+0x1fc>)
 80048ae:	9803      	ldr	r0, [sp, #12]
 80048b0:	e000      	b.n	80048b4 <_svfiprintf_r+0x1c0>
 80048b2:	bf00      	nop
 80048b4:	9004      	str	r0, [sp, #16]
 80048b6:	9b04      	ldr	r3, [sp, #16]
 80048b8:	3301      	adds	r3, #1
 80048ba:	d1d3      	bne.n	8004864 <_svfiprintf_r+0x170>
 80048bc:	89bb      	ldrh	r3, [r7, #12]
 80048be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048c0:	065b      	lsls	r3, r3, #25
 80048c2:	d400      	bmi.n	80048c6 <_svfiprintf_r+0x1d2>
 80048c4:	e72d      	b.n	8004722 <_svfiprintf_r+0x2e>
 80048c6:	2001      	movs	r0, #1
 80048c8:	4240      	negs	r0, r0
 80048ca:	e72a      	b.n	8004722 <_svfiprintf_r+0x2e>
 80048cc:	ab07      	add	r3, sp, #28
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	003a      	movs	r2, r7
 80048d2:	0021      	movs	r1, r4
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <_svfiprintf_r+0x1fc>)
 80048d6:	9803      	ldr	r0, [sp, #12]
 80048d8:	f000 f87c 	bl	80049d4 <_printf_i>
 80048dc:	e7ea      	b.n	80048b4 <_svfiprintf_r+0x1c0>
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	08004ff4 	.word	0x08004ff4
 80048e4:	08004ffa 	.word	0x08004ffa
 80048e8:	08004ffe 	.word	0x08004ffe
 80048ec:	00000000 	.word	0x00000000
 80048f0:	08004631 	.word	0x08004631

080048f4 <_printf_common>:
 80048f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048f6:	0015      	movs	r5, r2
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	688a      	ldr	r2, [r1, #8]
 80048fc:	690b      	ldr	r3, [r1, #16]
 80048fe:	000c      	movs	r4, r1
 8004900:	9000      	str	r0, [sp, #0]
 8004902:	4293      	cmp	r3, r2
 8004904:	da00      	bge.n	8004908 <_printf_common+0x14>
 8004906:	0013      	movs	r3, r2
 8004908:	0022      	movs	r2, r4
 800490a:	602b      	str	r3, [r5, #0]
 800490c:	3243      	adds	r2, #67	; 0x43
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	2a00      	cmp	r2, #0
 8004912:	d001      	beq.n	8004918 <_printf_common+0x24>
 8004914:	3301      	adds	r3, #1
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	069b      	lsls	r3, r3, #26
 800491c:	d502      	bpl.n	8004924 <_printf_common+0x30>
 800491e:	682b      	ldr	r3, [r5, #0]
 8004920:	3302      	adds	r3, #2
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	2306      	movs	r3, #6
 8004928:	0017      	movs	r7, r2
 800492a:	401f      	ands	r7, r3
 800492c:	421a      	tst	r2, r3
 800492e:	d027      	beq.n	8004980 <_printf_common+0x8c>
 8004930:	0023      	movs	r3, r4
 8004932:	3343      	adds	r3, #67	; 0x43
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	1e5a      	subs	r2, r3, #1
 8004938:	4193      	sbcs	r3, r2
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	0692      	lsls	r2, r2, #26
 800493e:	d430      	bmi.n	80049a2 <_printf_common+0xae>
 8004940:	0022      	movs	r2, r4
 8004942:	9901      	ldr	r1, [sp, #4]
 8004944:	9800      	ldr	r0, [sp, #0]
 8004946:	9e08      	ldr	r6, [sp, #32]
 8004948:	3243      	adds	r2, #67	; 0x43
 800494a:	47b0      	blx	r6
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d025      	beq.n	800499c <_printf_common+0xa8>
 8004950:	2306      	movs	r3, #6
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	682a      	ldr	r2, [r5, #0]
 8004956:	68e1      	ldr	r1, [r4, #12]
 8004958:	2500      	movs	r5, #0
 800495a:	4003      	ands	r3, r0
 800495c:	2b04      	cmp	r3, #4
 800495e:	d103      	bne.n	8004968 <_printf_common+0x74>
 8004960:	1a8d      	subs	r5, r1, r2
 8004962:	43eb      	mvns	r3, r5
 8004964:	17db      	asrs	r3, r3, #31
 8004966:	401d      	ands	r5, r3
 8004968:	68a3      	ldr	r3, [r4, #8]
 800496a:	6922      	ldr	r2, [r4, #16]
 800496c:	4293      	cmp	r3, r2
 800496e:	dd01      	ble.n	8004974 <_printf_common+0x80>
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	18ed      	adds	r5, r5, r3
 8004974:	2700      	movs	r7, #0
 8004976:	42bd      	cmp	r5, r7
 8004978:	d120      	bne.n	80049bc <_printf_common+0xc8>
 800497a:	2000      	movs	r0, #0
 800497c:	e010      	b.n	80049a0 <_printf_common+0xac>
 800497e:	3701      	adds	r7, #1
 8004980:	68e3      	ldr	r3, [r4, #12]
 8004982:	682a      	ldr	r2, [r5, #0]
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	42bb      	cmp	r3, r7
 8004988:	ddd2      	ble.n	8004930 <_printf_common+0x3c>
 800498a:	0022      	movs	r2, r4
 800498c:	2301      	movs	r3, #1
 800498e:	9901      	ldr	r1, [sp, #4]
 8004990:	9800      	ldr	r0, [sp, #0]
 8004992:	9e08      	ldr	r6, [sp, #32]
 8004994:	3219      	adds	r2, #25
 8004996:	47b0      	blx	r6
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d1f0      	bne.n	800497e <_printf_common+0x8a>
 800499c:	2001      	movs	r0, #1
 800499e:	4240      	negs	r0, r0
 80049a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049a2:	2030      	movs	r0, #48	; 0x30
 80049a4:	18e1      	adds	r1, r4, r3
 80049a6:	3143      	adds	r1, #67	; 0x43
 80049a8:	7008      	strb	r0, [r1, #0]
 80049aa:	0021      	movs	r1, r4
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	3145      	adds	r1, #69	; 0x45
 80049b0:	7809      	ldrb	r1, [r1, #0]
 80049b2:	18a2      	adds	r2, r4, r2
 80049b4:	3243      	adds	r2, #67	; 0x43
 80049b6:	3302      	adds	r3, #2
 80049b8:	7011      	strb	r1, [r2, #0]
 80049ba:	e7c1      	b.n	8004940 <_printf_common+0x4c>
 80049bc:	0022      	movs	r2, r4
 80049be:	2301      	movs	r3, #1
 80049c0:	9901      	ldr	r1, [sp, #4]
 80049c2:	9800      	ldr	r0, [sp, #0]
 80049c4:	9e08      	ldr	r6, [sp, #32]
 80049c6:	321a      	adds	r2, #26
 80049c8:	47b0      	blx	r6
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	d0e6      	beq.n	800499c <_printf_common+0xa8>
 80049ce:	3701      	adds	r7, #1
 80049d0:	e7d1      	b.n	8004976 <_printf_common+0x82>
	...

080049d4 <_printf_i>:
 80049d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d6:	b08b      	sub	sp, #44	; 0x2c
 80049d8:	9206      	str	r2, [sp, #24]
 80049da:	000a      	movs	r2, r1
 80049dc:	3243      	adds	r2, #67	; 0x43
 80049de:	9307      	str	r3, [sp, #28]
 80049e0:	9005      	str	r0, [sp, #20]
 80049e2:	9204      	str	r2, [sp, #16]
 80049e4:	7e0a      	ldrb	r2, [r1, #24]
 80049e6:	000c      	movs	r4, r1
 80049e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049ea:	2a78      	cmp	r2, #120	; 0x78
 80049ec:	d806      	bhi.n	80049fc <_printf_i+0x28>
 80049ee:	2a62      	cmp	r2, #98	; 0x62
 80049f0:	d808      	bhi.n	8004a04 <_printf_i+0x30>
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	d100      	bne.n	80049f8 <_printf_i+0x24>
 80049f6:	e0c0      	b.n	8004b7a <_printf_i+0x1a6>
 80049f8:	2a58      	cmp	r2, #88	; 0x58
 80049fa:	d052      	beq.n	8004aa2 <_printf_i+0xce>
 80049fc:	0026      	movs	r6, r4
 80049fe:	3642      	adds	r6, #66	; 0x42
 8004a00:	7032      	strb	r2, [r6, #0]
 8004a02:	e022      	b.n	8004a4a <_printf_i+0x76>
 8004a04:	0010      	movs	r0, r2
 8004a06:	3863      	subs	r0, #99	; 0x63
 8004a08:	2815      	cmp	r0, #21
 8004a0a:	d8f7      	bhi.n	80049fc <_printf_i+0x28>
 8004a0c:	f7fb fb84 	bl	8000118 <__gnu_thumb1_case_shi>
 8004a10:	001f0016 	.word	0x001f0016
 8004a14:	fff6fff6 	.word	0xfff6fff6
 8004a18:	fff6fff6 	.word	0xfff6fff6
 8004a1c:	fff6001f 	.word	0xfff6001f
 8004a20:	fff6fff6 	.word	0xfff6fff6
 8004a24:	00a8fff6 	.word	0x00a8fff6
 8004a28:	009a0036 	.word	0x009a0036
 8004a2c:	fff6fff6 	.word	0xfff6fff6
 8004a30:	fff600b9 	.word	0xfff600b9
 8004a34:	fff60036 	.word	0xfff60036
 8004a38:	009efff6 	.word	0x009efff6
 8004a3c:	0026      	movs	r6, r4
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	3642      	adds	r6, #66	; 0x42
 8004a42:	1d11      	adds	r1, r2, #4
 8004a44:	6019      	str	r1, [r3, #0]
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	7033      	strb	r3, [r6, #0]
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0a7      	b.n	8004b9e <_printf_i+0x1ca>
 8004a4e:	6808      	ldr	r0, [r1, #0]
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	1d0a      	adds	r2, r1, #4
 8004a54:	0605      	lsls	r5, r0, #24
 8004a56:	d50b      	bpl.n	8004a70 <_printf_i+0x9c>
 8004a58:	680d      	ldr	r5, [r1, #0]
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	da03      	bge.n	8004a68 <_printf_i+0x94>
 8004a60:	232d      	movs	r3, #45	; 0x2d
 8004a62:	9a04      	ldr	r2, [sp, #16]
 8004a64:	426d      	negs	r5, r5
 8004a66:	7013      	strb	r3, [r2, #0]
 8004a68:	4b61      	ldr	r3, [pc, #388]	; (8004bf0 <_printf_i+0x21c>)
 8004a6a:	270a      	movs	r7, #10
 8004a6c:	9303      	str	r3, [sp, #12]
 8004a6e:	e032      	b.n	8004ad6 <_printf_i+0x102>
 8004a70:	680d      	ldr	r5, [r1, #0]
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	0641      	lsls	r1, r0, #25
 8004a76:	d5f1      	bpl.n	8004a5c <_printf_i+0x88>
 8004a78:	b22d      	sxth	r5, r5
 8004a7a:	e7ef      	b.n	8004a5c <_printf_i+0x88>
 8004a7c:	680d      	ldr	r5, [r1, #0]
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	1d08      	adds	r0, r1, #4
 8004a82:	6018      	str	r0, [r3, #0]
 8004a84:	062e      	lsls	r6, r5, #24
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0xb8>
 8004a88:	680d      	ldr	r5, [r1, #0]
 8004a8a:	e003      	b.n	8004a94 <_printf_i+0xc0>
 8004a8c:	066d      	lsls	r5, r5, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0xb4>
 8004a90:	680d      	ldr	r5, [r1, #0]
 8004a92:	b2ad      	uxth	r5, r5
 8004a94:	4b56      	ldr	r3, [pc, #344]	; (8004bf0 <_printf_i+0x21c>)
 8004a96:	270a      	movs	r7, #10
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	2a6f      	cmp	r2, #111	; 0x6f
 8004a9c:	d117      	bne.n	8004ace <_printf_i+0xfa>
 8004a9e:	2708      	movs	r7, #8
 8004aa0:	e015      	b.n	8004ace <_printf_i+0xfa>
 8004aa2:	3145      	adds	r1, #69	; 0x45
 8004aa4:	700a      	strb	r2, [r1, #0]
 8004aa6:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <_printf_i+0x21c>)
 8004aa8:	9203      	str	r2, [sp, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	6821      	ldr	r1, [r4, #0]
 8004aae:	ca20      	ldmia	r2!, {r5}
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	0608      	lsls	r0, r1, #24
 8004ab4:	d550      	bpl.n	8004b58 <_printf_i+0x184>
 8004ab6:	07cb      	lsls	r3, r1, #31
 8004ab8:	d502      	bpl.n	8004ac0 <_printf_i+0xec>
 8004aba:	2320      	movs	r3, #32
 8004abc:	4319      	orrs	r1, r3
 8004abe:	6021      	str	r1, [r4, #0]
 8004ac0:	2710      	movs	r7, #16
 8004ac2:	2d00      	cmp	r5, #0
 8004ac4:	d103      	bne.n	8004ace <_printf_i+0xfa>
 8004ac6:	2320      	movs	r3, #32
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	439a      	bics	r2, r3
 8004acc:	6022      	str	r2, [r4, #0]
 8004ace:	0023      	movs	r3, r4
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	3343      	adds	r3, #67	; 0x43
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	6863      	ldr	r3, [r4, #4]
 8004ad8:	60a3      	str	r3, [r4, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	db03      	blt.n	8004ae6 <_printf_i+0x112>
 8004ade:	2204      	movs	r2, #4
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	4391      	bics	r1, r2
 8004ae4:	6021      	str	r1, [r4, #0]
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	d102      	bne.n	8004af0 <_printf_i+0x11c>
 8004aea:	9e04      	ldr	r6, [sp, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <_printf_i+0x136>
 8004af0:	9e04      	ldr	r6, [sp, #16]
 8004af2:	0028      	movs	r0, r5
 8004af4:	0039      	movs	r1, r7
 8004af6:	f7fb fb9f 	bl	8000238 <__aeabi_uidivmod>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	3e01      	subs	r6, #1
 8004afe:	5c5b      	ldrb	r3, [r3, r1]
 8004b00:	7033      	strb	r3, [r6, #0]
 8004b02:	002b      	movs	r3, r5
 8004b04:	0005      	movs	r5, r0
 8004b06:	429f      	cmp	r7, r3
 8004b08:	d9f3      	bls.n	8004af2 <_printf_i+0x11e>
 8004b0a:	2f08      	cmp	r7, #8
 8004b0c:	d109      	bne.n	8004b22 <_printf_i+0x14e>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	07db      	lsls	r3, r3, #31
 8004b12:	d506      	bpl.n	8004b22 <_printf_i+0x14e>
 8004b14:	6863      	ldr	r3, [r4, #4]
 8004b16:	6922      	ldr	r2, [r4, #16]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	dc02      	bgt.n	8004b22 <_printf_i+0x14e>
 8004b1c:	2330      	movs	r3, #48	; 0x30
 8004b1e:	3e01      	subs	r6, #1
 8004b20:	7033      	strb	r3, [r6, #0]
 8004b22:	9b04      	ldr	r3, [sp, #16]
 8004b24:	1b9b      	subs	r3, r3, r6
 8004b26:	6123      	str	r3, [r4, #16]
 8004b28:	9b07      	ldr	r3, [sp, #28]
 8004b2a:	0021      	movs	r1, r4
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	9805      	ldr	r0, [sp, #20]
 8004b30:	9b06      	ldr	r3, [sp, #24]
 8004b32:	aa09      	add	r2, sp, #36	; 0x24
 8004b34:	f7ff fede 	bl	80048f4 <_printf_common>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d135      	bne.n	8004ba8 <_printf_i+0x1d4>
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	4240      	negs	r0, r0
 8004b40:	b00b      	add	sp, #44	; 0x2c
 8004b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b44:	2220      	movs	r2, #32
 8004b46:	6809      	ldr	r1, [r1, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	6022      	str	r2, [r4, #0]
 8004b4c:	0022      	movs	r2, r4
 8004b4e:	2178      	movs	r1, #120	; 0x78
 8004b50:	3245      	adds	r2, #69	; 0x45
 8004b52:	7011      	strb	r1, [r2, #0]
 8004b54:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <_printf_i+0x220>)
 8004b56:	e7a7      	b.n	8004aa8 <_printf_i+0xd4>
 8004b58:	0648      	lsls	r0, r1, #25
 8004b5a:	d5ac      	bpl.n	8004ab6 <_printf_i+0xe2>
 8004b5c:	b2ad      	uxth	r5, r5
 8004b5e:	e7aa      	b.n	8004ab6 <_printf_i+0xe2>
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	680d      	ldr	r5, [r1, #0]
 8004b64:	1d10      	adds	r0, r2, #4
 8004b66:	6949      	ldr	r1, [r1, #20]
 8004b68:	6018      	str	r0, [r3, #0]
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	062e      	lsls	r6, r5, #24
 8004b6e:	d501      	bpl.n	8004b74 <_printf_i+0x1a0>
 8004b70:	6019      	str	r1, [r3, #0]
 8004b72:	e002      	b.n	8004b7a <_printf_i+0x1a6>
 8004b74:	066d      	lsls	r5, r5, #25
 8004b76:	d5fb      	bpl.n	8004b70 <_printf_i+0x19c>
 8004b78:	8019      	strh	r1, [r3, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	9e04      	ldr	r6, [sp, #16]
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	e7d2      	b.n	8004b28 <_printf_i+0x154>
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	1d11      	adds	r1, r2, #4
 8004b86:	6019      	str	r1, [r3, #0]
 8004b88:	6816      	ldr	r6, [r2, #0]
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	0030      	movs	r0, r6
 8004b8e:	6862      	ldr	r2, [r4, #4]
 8004b90:	f000 f8ee 	bl	8004d70 <memchr>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d001      	beq.n	8004b9c <_printf_i+0x1c8>
 8004b98:	1b80      	subs	r0, r0, r6
 8004b9a:	6060      	str	r0, [r4, #4]
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9a04      	ldr	r2, [sp, #16]
 8004ba4:	7013      	strb	r3, [r2, #0]
 8004ba6:	e7bf      	b.n	8004b28 <_printf_i+0x154>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	0032      	movs	r2, r6
 8004bac:	9906      	ldr	r1, [sp, #24]
 8004bae:	9805      	ldr	r0, [sp, #20]
 8004bb0:	9d07      	ldr	r5, [sp, #28]
 8004bb2:	47a8      	blx	r5
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d0c1      	beq.n	8004b3c <_printf_i+0x168>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	079b      	lsls	r3, r3, #30
 8004bbc:	d415      	bmi.n	8004bea <_printf_i+0x216>
 8004bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc0:	68e0      	ldr	r0, [r4, #12]
 8004bc2:	4298      	cmp	r0, r3
 8004bc4:	dabc      	bge.n	8004b40 <_printf_i+0x16c>
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	e7ba      	b.n	8004b40 <_printf_i+0x16c>
 8004bca:	0022      	movs	r2, r4
 8004bcc:	2301      	movs	r3, #1
 8004bce:	9906      	ldr	r1, [sp, #24]
 8004bd0:	9805      	ldr	r0, [sp, #20]
 8004bd2:	9e07      	ldr	r6, [sp, #28]
 8004bd4:	3219      	adds	r2, #25
 8004bd6:	47b0      	blx	r6
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d0af      	beq.n	8004b3c <_printf_i+0x168>
 8004bdc:	3501      	adds	r5, #1
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	42ab      	cmp	r3, r5
 8004be6:	dcf0      	bgt.n	8004bca <_printf_i+0x1f6>
 8004be8:	e7e9      	b.n	8004bbe <_printf_i+0x1ea>
 8004bea:	2500      	movs	r5, #0
 8004bec:	e7f7      	b.n	8004bde <_printf_i+0x20a>
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	08005005 	.word	0x08005005
 8004bf4:	08005016 	.word	0x08005016

08004bf8 <_sbrk_r>:
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	b570      	push	{r4, r5, r6, lr}
 8004bfc:	4d06      	ldr	r5, [pc, #24]	; (8004c18 <_sbrk_r+0x20>)
 8004bfe:	0004      	movs	r4, r0
 8004c00:	0008      	movs	r0, r1
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	f7fc fc1e 	bl	8001444 <_sbrk>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d103      	bne.n	8004c14 <_sbrk_r+0x1c>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d000      	beq.n	8004c14 <_sbrk_r+0x1c>
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	bd70      	pop	{r4, r5, r6, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	200001c8 	.word	0x200001c8

08004c1c <__sread>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	000c      	movs	r4, r1
 8004c20:	250e      	movs	r5, #14
 8004c22:	5f49      	ldrsh	r1, [r1, r5]
 8004c24:	f000 f902 	bl	8004e2c <_read_r>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	db03      	blt.n	8004c34 <__sread+0x18>
 8004c2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c2e:	181b      	adds	r3, r3, r0
 8004c30:	6563      	str	r3, [r4, #84]	; 0x54
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	4a02      	ldr	r2, [pc, #8]	; (8004c40 <__sread+0x24>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	e7f9      	b.n	8004c32 <__sread+0x16>
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	ffffefff 	.word	0xffffefff

08004c44 <__swrite>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	001f      	movs	r7, r3
 8004c48:	898b      	ldrh	r3, [r1, #12]
 8004c4a:	0005      	movs	r5, r0
 8004c4c:	000c      	movs	r4, r1
 8004c4e:	0016      	movs	r6, r2
 8004c50:	05db      	lsls	r3, r3, #23
 8004c52:	d505      	bpl.n	8004c60 <__swrite+0x1c>
 8004c54:	230e      	movs	r3, #14
 8004c56:	5ec9      	ldrsh	r1, [r1, r3]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	f000 f874 	bl	8004d48 <_lseek_r>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <__swrite+0x34>)
 8004c64:	0028      	movs	r0, r5
 8004c66:	4013      	ands	r3, r2
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	0032      	movs	r2, r6
 8004c6c:	230e      	movs	r3, #14
 8004c6e:	5ee1      	ldrsh	r1, [r4, r3]
 8004c70:	003b      	movs	r3, r7
 8004c72:	f000 f81f 	bl	8004cb4 <_write_r>
 8004c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c78:	ffffefff 	.word	0xffffefff

08004c7c <__sseek>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	000c      	movs	r4, r1
 8004c80:	250e      	movs	r5, #14
 8004c82:	5f49      	ldrsh	r1, [r1, r5]
 8004c84:	f000 f860 	bl	8004d48 <_lseek_r>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	1c42      	adds	r2, r0, #1
 8004c8c:	d103      	bne.n	8004c96 <__sseek+0x1a>
 8004c8e:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <__sseek+0x28>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	81a3      	strh	r3, [r4, #12]
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	2280      	movs	r2, #128	; 0x80
 8004c98:	0152      	lsls	r2, r2, #5
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	6560      	str	r0, [r4, #84]	; 0x54
 8004ca0:	e7f8      	b.n	8004c94 <__sseek+0x18>
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	ffffefff 	.word	0xffffefff

08004ca8 <__sclose>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	230e      	movs	r3, #14
 8004cac:	5ec9      	ldrsh	r1, [r1, r3]
 8004cae:	f000 f815 	bl	8004cdc <_close_r>
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <_write_r>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	0004      	movs	r4, r0
 8004cb8:	0008      	movs	r0, r1
 8004cba:	0011      	movs	r1, r2
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4d05      	ldr	r5, [pc, #20]	; (8004cd8 <_write_r+0x24>)
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fc fb76 	bl	80013b4 <_write>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d103      	bne.n	8004cd4 <_write_r+0x20>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d000      	beq.n	8004cd4 <_write_r+0x20>
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	200001c8 	.word	0x200001c8

08004cdc <_close_r>:
 8004cdc:	2300      	movs	r3, #0
 8004cde:	b570      	push	{r4, r5, r6, lr}
 8004ce0:	4d06      	ldr	r5, [pc, #24]	; (8004cfc <_close_r+0x20>)
 8004ce2:	0004      	movs	r4, r0
 8004ce4:	0008      	movs	r0, r1
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	f7fc fb80 	bl	80013ec <_close>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d103      	bne.n	8004cf8 <_close_r+0x1c>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d000      	beq.n	8004cf8 <_close_r+0x1c>
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	200001c8 	.word	0x200001c8

08004d00 <_fstat_r>:
 8004d00:	2300      	movs	r3, #0
 8004d02:	b570      	push	{r4, r5, r6, lr}
 8004d04:	4d06      	ldr	r5, [pc, #24]	; (8004d20 <_fstat_r+0x20>)
 8004d06:	0004      	movs	r4, r0
 8004d08:	0008      	movs	r0, r1
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	602b      	str	r3, [r5, #0]
 8004d0e:	f7fc fb77 	bl	8001400 <_fstat>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	d103      	bne.n	8004d1e <_fstat_r+0x1e>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d000      	beq.n	8004d1e <_fstat_r+0x1e>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	200001c8 	.word	0x200001c8

08004d24 <_isatty_r>:
 8004d24:	2300      	movs	r3, #0
 8004d26:	b570      	push	{r4, r5, r6, lr}
 8004d28:	4d06      	ldr	r5, [pc, #24]	; (8004d44 <_isatty_r+0x20>)
 8004d2a:	0004      	movs	r4, r0
 8004d2c:	0008      	movs	r0, r1
 8004d2e:	602b      	str	r3, [r5, #0]
 8004d30:	f7fc fb74 	bl	800141c <_isatty>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d103      	bne.n	8004d40 <_isatty_r+0x1c>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d000      	beq.n	8004d40 <_isatty_r+0x1c>
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	200001c8 	.word	0x200001c8

08004d48 <_lseek_r>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	0004      	movs	r4, r0
 8004d4c:	0008      	movs	r0, r1
 8004d4e:	0011      	movs	r1, r2
 8004d50:	001a      	movs	r2, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	4d05      	ldr	r5, [pc, #20]	; (8004d6c <_lseek_r+0x24>)
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc fb69 	bl	800142e <_lseek>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d103      	bne.n	8004d68 <_lseek_r+0x20>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d000      	beq.n	8004d68 <_lseek_r+0x20>
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	200001c8 	.word	0x200001c8

08004d70 <memchr>:
 8004d70:	b2c9      	uxtb	r1, r1
 8004d72:	1882      	adds	r2, r0, r2
 8004d74:	4290      	cmp	r0, r2
 8004d76:	d101      	bne.n	8004d7c <memchr+0xc>
 8004d78:	2000      	movs	r0, #0
 8004d7a:	4770      	bx	lr
 8004d7c:	7803      	ldrb	r3, [r0, #0]
 8004d7e:	428b      	cmp	r3, r1
 8004d80:	d0fb      	beq.n	8004d7a <memchr+0xa>
 8004d82:	3001      	adds	r0, #1
 8004d84:	e7f6      	b.n	8004d74 <memchr+0x4>

08004d86 <memcpy>:
 8004d86:	2300      	movs	r3, #0
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d100      	bne.n	8004d90 <memcpy+0xa>
 8004d8e:	bd10      	pop	{r4, pc}
 8004d90:	5ccc      	ldrb	r4, [r1, r3]
 8004d92:	54c4      	strb	r4, [r0, r3]
 8004d94:	3301      	adds	r3, #1
 8004d96:	e7f8      	b.n	8004d8a <memcpy+0x4>

08004d98 <memmove>:
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	4288      	cmp	r0, r1
 8004d9c:	d902      	bls.n	8004da4 <memmove+0xc>
 8004d9e:	188b      	adds	r3, r1, r2
 8004da0:	4298      	cmp	r0, r3
 8004da2:	d303      	bcc.n	8004dac <memmove+0x14>
 8004da4:	2300      	movs	r3, #0
 8004da6:	e007      	b.n	8004db8 <memmove+0x20>
 8004da8:	5c8b      	ldrb	r3, [r1, r2]
 8004daa:	5483      	strb	r3, [r0, r2]
 8004dac:	3a01      	subs	r2, #1
 8004dae:	d2fb      	bcs.n	8004da8 <memmove+0x10>
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	5ccc      	ldrb	r4, [r1, r3]
 8004db4:	54c4      	strb	r4, [r0, r3]
 8004db6:	3301      	adds	r3, #1
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d1fa      	bne.n	8004db2 <memmove+0x1a>
 8004dbc:	e7f8      	b.n	8004db0 <memmove+0x18>
	...

08004dc0 <__malloc_lock>:
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	4802      	ldr	r0, [pc, #8]	; (8004dcc <__malloc_lock+0xc>)
 8004dc4:	f7ff fb1d 	bl	8004402 <__retarget_lock_acquire_recursive>
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	200001c0 	.word	0x200001c0

08004dd0 <__malloc_unlock>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4802      	ldr	r0, [pc, #8]	; (8004ddc <__malloc_unlock+0xc>)
 8004dd4:	f7ff fb16 	bl	8004404 <__retarget_lock_release_recursive>
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	200001c0 	.word	0x200001c0

08004de0 <_realloc_r>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	0007      	movs	r7, r0
 8004de4:	000d      	movs	r5, r1
 8004de6:	0016      	movs	r6, r2
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d105      	bne.n	8004df8 <_realloc_r+0x18>
 8004dec:	0011      	movs	r1, r2
 8004dee:	f7ff fbc1 	bl	8004574 <_malloc_r>
 8004df2:	0004      	movs	r4, r0
 8004df4:	0020      	movs	r0, r4
 8004df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d103      	bne.n	8004e04 <_realloc_r+0x24>
 8004dfc:	f7ff fb70 	bl	80044e0 <_free_r>
 8004e00:	0034      	movs	r4, r6
 8004e02:	e7f7      	b.n	8004df4 <_realloc_r+0x14>
 8004e04:	f000 f826 	bl	8004e54 <_malloc_usable_size_r>
 8004e08:	002c      	movs	r4, r5
 8004e0a:	42b0      	cmp	r0, r6
 8004e0c:	d2f2      	bcs.n	8004df4 <_realloc_r+0x14>
 8004e0e:	0031      	movs	r1, r6
 8004e10:	0038      	movs	r0, r7
 8004e12:	f7ff fbaf 	bl	8004574 <_malloc_r>
 8004e16:	1e04      	subs	r4, r0, #0
 8004e18:	d0ec      	beq.n	8004df4 <_realloc_r+0x14>
 8004e1a:	0029      	movs	r1, r5
 8004e1c:	0032      	movs	r2, r6
 8004e1e:	f7ff ffb2 	bl	8004d86 <memcpy>
 8004e22:	0029      	movs	r1, r5
 8004e24:	0038      	movs	r0, r7
 8004e26:	f7ff fb5b 	bl	80044e0 <_free_r>
 8004e2a:	e7e3      	b.n	8004df4 <_realloc_r+0x14>

08004e2c <_read_r>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	0004      	movs	r4, r0
 8004e30:	0008      	movs	r0, r1
 8004e32:	0011      	movs	r1, r2
 8004e34:	001a      	movs	r2, r3
 8004e36:	2300      	movs	r3, #0
 8004e38:	4d05      	ldr	r5, [pc, #20]	; (8004e50 <_read_r+0x24>)
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	f7fc fa9d 	bl	800137a <_read>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d103      	bne.n	8004e4c <_read_r+0x20>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d000      	beq.n	8004e4c <_read_r+0x20>
 8004e4a:	6023      	str	r3, [r4, #0]
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	200001c8 	.word	0x200001c8

08004e54 <_malloc_usable_size_r>:
 8004e54:	1f0b      	subs	r3, r1, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1f18      	subs	r0, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da01      	bge.n	8004e62 <_malloc_usable_size_r+0xe>
 8004e5e:	580b      	ldr	r3, [r1, r0]
 8004e60:	18c0      	adds	r0, r0, r3
 8004e62:	4770      	bx	lr

08004e64 <_init>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr

08004e70 <_fini>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr
