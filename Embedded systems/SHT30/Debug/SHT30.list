
SHT30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b4  080044b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044bc  080044bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000074  08004538  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004538  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f304  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002110  00000000  00000000  0002f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a8d  00000000  00000000  000328d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de9d  00000000  00000000  00044365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000655e5  00000000  00000000  00052202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b77e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  000b783c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043a4 	.word	0x080043a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080043a4 	.word	0x080043a4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ba 	bl	8000630 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8b5 	bl	8000630 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzdi2>:
 8000630:	b510      	push	{r4, lr}
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <__clzdi2+0xe>
 8000636:	f000 f807 	bl	8000648 <__clzsi2>
 800063a:	3020      	adds	r0, #32
 800063c:	e002      	b.n	8000644 <__clzdi2+0x14>
 800063e:	1c08      	adds	r0, r1, #0
 8000640:	f000 f802 	bl	8000648 <__clzsi2>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)

08000648 <__clzsi2>:
 8000648:	211c      	movs	r1, #28
 800064a:	2301      	movs	r3, #1
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0xe>
 8000652:	0c00      	lsrs	r0, r0, #16
 8000654:	3910      	subs	r1, #16
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	4298      	cmp	r0, r3
 800065a:	d301      	bcc.n	8000660 <__clzsi2+0x18>
 800065c:	0a00      	lsrs	r0, r0, #8
 800065e:	3908      	subs	r1, #8
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	4298      	cmp	r0, r3
 8000664:	d301      	bcc.n	800066a <__clzsi2+0x22>
 8000666:	0900      	lsrs	r0, r0, #4
 8000668:	3904      	subs	r1, #4
 800066a:	a202      	add	r2, pc, #8	; (adr r2, 8000674 <__clzsi2+0x2c>)
 800066c:	5c10      	ldrb	r0, [r2, r0]
 800066e:	1840      	adds	r0, r0, r1
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	02020304 	.word	0x02020304
 8000678:	01010101 	.word	0x01010101
	...

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fe3d 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f87f 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f959 	bl	8000948 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000696:	f000 f8e9 	bl	800086c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800069a:	f000 f927 	bl	80008ec <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("basladi\r\n");
 800069e:	4a33      	ldr	r2, [pc, #204]	; (800076c <main+0xe8>)
 80006a0:	4b33      	ldr	r3, [pc, #204]	; (8000770 <main+0xec>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 fa57 	bl	8003b58 <siprintf>
 80006aa:	0003      	movs	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <main+0xf0>)
 80006b0:	492f      	ldr	r1, [pc, #188]	; (8000770 <main+0xec>)
 80006b2:	4831      	ldr	r0, [pc, #196]	; (8000778 <main+0xf4>)
 80006b4:	f002 fd54 	bl	8003160 <HAL_UART_Transmit>
  sensirion_i2c_init();
 80006b8:	f000 fb96 	bl	8000de8 <sensirion_i2c_init>

  /*while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
	  printf("SHT sensor probing failed\n");

  }*/
  printf("SHT sensor probing successful\n");
 80006bc:	4a2f      	ldr	r2, [pc, #188]	; (800077c <main+0xf8>)
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <main+0xec>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f003 fa48 	bl	8003b58 <siprintf>
 80006c8:	0003      	movs	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <main+0xf0>)
 80006ce:	4928      	ldr	r1, [pc, #160]	; (8000770 <main+0xec>)
 80006d0:	4829      	ldr	r0, [pc, #164]	; (8000778 <main+0xf4>)
 80006d2:	f002 fd45 	bl	8003160 <HAL_UART_Transmit>

	  char buffer[100];

	  int32_t temperature, humidity;

      int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT,&temperature, &humidity);
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	18fa      	adds	r2, r7, r3
 80006da:	2368      	movs	r3, #104	; 0x68
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	0019      	movs	r1, r3
 80006e0:	2044      	movs	r0, #68	; 0x44
 80006e2:	f000 fc1d 	bl	8000f20 <sht3x_measure_blocking_read>
 80006e6:	0003      	movs	r3, r0
 80006e8:	001a      	movs	r2, r3
 80006ea:	216f      	movs	r1, #111	; 0x6f
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	701a      	strb	r2, [r3, #0]

      if (ret == STATUS_OK) {
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d126      	bne.n	8000748 <main+0xc4>
     	  printf("t: %d\r\n",temperature/ 100);
 80006fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006fc:	2164      	movs	r1, #100	; 0x64
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff fd96 	bl	8000230 <__divsi3>
 8000704:	0003      	movs	r3, r0
 8000706:	001a      	movs	r2, r3
 8000708:	491d      	ldr	r1, [pc, #116]	; (8000780 <main+0xfc>)
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <main+0xec>)
 800070c:	0018      	movs	r0, r3
 800070e:	f003 fa23 	bl	8003b58 <siprintf>
 8000712:	0003      	movs	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <main+0xf0>)
 8000718:	4915      	ldr	r1, [pc, #84]	; (8000770 <main+0xec>)
 800071a:	4817      	ldr	r0, [pc, #92]	; (8000778 <main+0xf4>)
 800071c:	f002 fd20 	bl	8003160 <HAL_UART_Transmit>
     	  //printf("measured temperature: %0.2f degreeCelsius, measured humidity: %0.2f percentRH\n",temperature / 1000.0f, humidity / 1000.0f);
     	  printf("n: %d\r\n",humidity/ 100);
 8000720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000722:	2164      	movs	r1, #100	; 0x64
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff fd83 	bl	8000230 <__divsi3>
 800072a:	0003      	movs	r3, r0
 800072c:	001a      	movs	r2, r3
 800072e:	4915      	ldr	r1, [pc, #84]	; (8000784 <main+0x100>)
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <main+0xec>)
 8000732:	0018      	movs	r0, r3
 8000734:	f003 fa10 	bl	8003b58 <siprintf>
 8000738:	0003      	movs	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <main+0xf0>)
 800073e:	490c      	ldr	r1, [pc, #48]	; (8000770 <main+0xec>)
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <main+0xf4>)
 8000742:	f002 fd0d 	bl	8003160 <HAL_UART_Transmit>
 8000746:	e00c      	b.n	8000762 <main+0xde>

      }
      else {
    	  printf("error reading measurement\n");
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <main+0x104>)
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <main+0xec>)
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f003 fa02 	bl	8003b58 <siprintf>
 8000754:	0003      	movs	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <main+0xf0>)
 800075a:	4905      	ldr	r1, [pc, #20]	; (8000770 <main+0xec>)
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <main+0xf4>)
 800075e:	f002 fcff 	bl	8003160 <HAL_UART_Transmit>

      }
      sensirion_sleep_usec(1000000);
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <main+0x108>)
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fbb1 	bl	8000ecc <sensirion_sleep_usec>
  {
 800076a:	e7b4      	b.n	80006d6 <main+0x52>
 800076c:	080043bc 	.word	0x080043bc
 8000770:	20000134 	.word	0x20000134
 8000774:	0000ffff 	.word	0x0000ffff
 8000778:	20000234 	.word	0x20000234
 800077c:	080043c8 	.word	0x080043c8
 8000780:	080043e8 	.word	0x080043e8
 8000784:	080043f0 	.word	0x080043f0
 8000788:	080043f8 	.word	0x080043f8
 800078c:	000f4240 	.word	0x000f4240

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b099      	sub	sp, #100	; 0x64
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	242c      	movs	r4, #44	; 0x2c
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2334      	movs	r3, #52	; 0x34
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f003 f9d1 	bl	8003b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a6:	2318      	movs	r3, #24
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f003 f9c9 	bl	8003b48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b6:	003b      	movs	r3, r7
 80007b8:	0018      	movs	r0, r3
 80007ba:	2318      	movs	r3, #24
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f003 f9c2 	bl	8003b48 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a27      	ldr	r2, [pc, #156]	; (8000868 <SystemClock_Config+0xd8>)
 80007ca:	401a      	ands	r2, r3
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <SystemClock_Config+0xd4>)
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	0109      	lsls	r1, r1, #4
 80007d2:	430a      	orrs	r2, r1
 80007d4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007d6:	0021      	movs	r1, r4
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2210      	movs	r2, #16
 80007dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2201      	movs	r2, #1
 80007e2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	22a0      	movs	r2, #160	; 0xa0
 80007ee:	0212      	lsls	r2, r2, #8
 80007f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 fd96 	bl	800232c <HAL_RCC_OscConfig>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000804:	f000 f8fc 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	2118      	movs	r1, #24
 800080a:	187b      	adds	r3, r7, r1
 800080c:	220f      	movs	r2, #15
 800080e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2100      	movs	r1, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f002 f8f9 	bl	8002a24 <HAL_RCC_ClockConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000836:	f000 f8e3 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800083a:	003b      	movs	r3, r7
 800083c:	220c      	movs	r2, #12
 800083e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000840:	003b      	movs	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	003b      	movs	r3, r7
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fb0c 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000858:	f000 f8d2 	bl	8000a00 <Error_Handler>
  }
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b019      	add	sp, #100	; 0x64
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	40007000 	.word	0x40007000
 8000868:	ffffe7ff 	.word	0xffffe7ff

0800086c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000872:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <MX_I2C1_Init+0x7c>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000878:	22e1      	movs	r2, #225	; 0xe1
 800087a:	00d2      	lsls	r2, r2, #3
 800087c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000886:	2201      	movs	r2, #1
 8000888:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_I2C1_Init+0x78>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x78>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_I2C1_Init+0x78>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x78>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 f808 	bl	80018c0 <HAL_I2C_Init>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 f8a4 	bl	8000a00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C1_Init+0x78>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fc9d 	bl	80021fc <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008c6:	f000 f89b 	bl	8000a00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2C1_Init+0x78>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fce0 	bl	8002294 <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008d8:	f000 f892 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	200000e8 	.word	0x200000e8
 80008e8:	40005400 	.word	0x40005400

080008ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <MX_LPUART1_UART_Init+0x58>)
 80008f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 80008f8:	22e1      	movs	r2, #225	; 0xe1
 80008fa:	0252      	lsls	r2, r2, #9
 80008fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <MX_LPUART1_UART_Init+0x54>)
 800092a:	0018      	movs	r0, r3
 800092c:	f002 fbc4 	bl	80030b8 <HAL_UART_Init>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000934:	f000 f864 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000234 	.word	0x20000234
 8000944:	40004800 	.word	0x40004800

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b08b      	sub	sp, #44	; 0x2c
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	2414      	movs	r4, #20
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2314      	movs	r3, #20
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f003 f8f5 	bl	8003b48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_GPIO_Init+0xb4>)
 8000960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_GPIO_Init+0xb4>)
 8000964:	2104      	movs	r1, #4
 8000966:	430a      	orrs	r2, r1
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_GPIO_Init+0xb4>)
 800096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096e:	2204      	movs	r2, #4
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_GPIO_Init+0xb4>)
 8000978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_GPIO_Init+0xb4>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	430a      	orrs	r2, r1
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_GPIO_Init+0xb4>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_GPIO_Init+0xb4>)
 8000990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_GPIO_Init+0xb4>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_GPIO_Init+0xb4>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_GPIO_Init+0xb4>)
 80009a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_GPIO_Init+0xb4>)
 80009ac:	2102      	movs	r1, #2
 80009ae:	430a      	orrs	r2, r1
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_GPIO_Init+0xb4>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	2202      	movs	r2, #2
 80009b8:	4013      	ands	r3, r2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2200      	movs	r2, #0
 80009c4:	2104      	movs	r1, #4
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 ff5c 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2204      	movs	r2, #4
 80009d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fdda 	bl	80015a8 <HAL_GPIO_Init>

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b00b      	add	sp, #44	; 0x2c
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	40021000 	.word	0x40021000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>

08000a0a <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	000a      	movs	r2, r1
 8000a14:	1cbb      	adds	r3, r7, #2
 8000a16:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000a18:	230d      	movs	r3, #13
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000a20:	230e      	movs	r3, #14
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	801a      	strh	r2, [r3, #0]
 8000a28:	e037      	b.n	8000a9a <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	18d3      	adds	r3, r2, r3
 8000a34:	7819      	ldrb	r1, [r3, #0]
 8000a36:	220d      	movs	r2, #13
 8000a38:	18bb      	adds	r3, r7, r2
 8000a3a:	18ba      	adds	r2, r7, r2
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	404a      	eors	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000a42:	230c      	movs	r3, #12
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	2208      	movs	r2, #8
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	e01b      	b.n	8000a84 <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 8000a4c:	210d      	movs	r1, #13
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da09      	bge.n	8000a6c <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	2231      	movs	r2, #49	; 0x31
 8000a62:	4053      	eors	r3, r2
 8000a64:	b25a      	sxtb	r2, r3
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e005      	b.n	8000a78 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8000a6c:	230d      	movs	r3, #13
 8000a6e:	18fa      	adds	r2, r7, r3
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	18db      	adds	r3, r3, r3
 8000a76:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000a78:	220c      	movs	r2, #12
 8000a7a:	18bb      	adds	r3, r7, r2
 8000a7c:	18ba      	adds	r2, r7, r2
 8000a7e:	7812      	ldrb	r2, [r2, #0]
 8000a80:	3a01      	subs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	230c      	movs	r3, #12
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1de      	bne.n	8000a4c <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000a8e:	220e      	movs	r2, #14
 8000a90:	18bb      	adds	r3, r7, r2
 8000a92:	18ba      	adds	r2, r7, r2
 8000a94:	8812      	ldrh	r2, [r2, #0]
 8000a96:	3201      	adds	r2, #1
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	230e      	movs	r3, #14
 8000a9c:	18fa      	adds	r2, r7, r3
 8000a9e:	1cbb      	adds	r3, r7, #2
 8000aa0:	8812      	ldrh	r2, [r2, #0]
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d3c0      	bcc.n	8000a2a <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8000aa8:	230d      	movs	r3, #13
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	0008      	movs	r0, r1
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	1cbb      	adds	r3, r7, #2
 8000ac4:	1c02      	adds	r2, r0, #0
 8000ac6:	801a      	strh	r2, [r3, #0]
 8000ac8:	1c7b      	adds	r3, r7, #1
 8000aca:	1c0a      	adds	r2, r1, #0
 8000acc:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8000ace:	1cbb      	adds	r3, r7, #2
 8000ad0:	881a      	ldrh	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff ff97 	bl	8000a0a <sensirion_common_generate_crc>
 8000adc:	0003      	movs	r3, r0
 8000ade:	001a      	movs	r2, r3
 8000ae0:	1c7b      	adds	r3, r7, #1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d002      	beq.n	8000aee <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	e000      	b.n	8000af0 <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	0008      	movs	r0, r1
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	0019      	movs	r1, r3
 8000b06:	250a      	movs	r5, #10
 8000b08:	197b      	adds	r3, r7, r5
 8000b0a:	1c02      	adds	r2, r0, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
 8000b0e:	2309      	movs	r3, #9
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	1c0a      	adds	r2, r1, #0
 8000b14:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8000b16:	2014      	movs	r0, #20
 8000b18:	183b      	adds	r3, r7, r0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b299      	uxth	r1, r3
 8000b26:	183b      	adds	r3, r7, r0
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	0004      	movs	r4, r0
 8000b2c:	183a      	adds	r2, r7, r0
 8000b2e:	1c58      	adds	r0, r3, #1
 8000b30:	8010      	strh	r0, [r2, #0]
 8000b32:	001a      	movs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	189b      	adds	r3, r3, r2
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	193a      	adds	r2, r7, r4
 8000b42:	1c59      	adds	r1, r3, #1
 8000b44:	8011      	strh	r1, [r2, #0]
 8000b46:	001a      	movs	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	189b      	adds	r3, r3, r2
 8000b4c:	197a      	adds	r2, r7, r5
 8000b4e:	8812      	ldrh	r2, [r2, #0]
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8000b54:	2317      	movs	r3, #23
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e042      	b.n	8000be4 <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8000b5e:	2617      	movs	r6, #23
 8000b60:	19bb      	adds	r3, r7, r6
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	2414      	movs	r4, #20
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	193a      	adds	r2, r7, r4
 8000b78:	1c58      	adds	r0, r3, #1
 8000b7a:	8010      	strh	r0, [r2, #0]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8000b86:	19bb      	adds	r3, r7, r6
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	18d3      	adds	r3, r2, r3
 8000b90:	8819      	ldrh	r1, [r3, #0]
 8000b92:	0025      	movs	r5, r4
 8000b94:	197b      	adds	r3, r7, r5
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	197a      	adds	r2, r7, r5
 8000b9a:	1c58      	adds	r0, r3, #1
 8000b9c:	8010      	strh	r0, [r2, #0]
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	189b      	adds	r3, r3, r2
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8000ba8:	197b      	adds	r3, r7, r5
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	3b02      	subs	r3, #2
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	2213      	movs	r2, #19
 8000bb4:	18bc      	adds	r4, r7, r2
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff26 	bl	8000a0a <sensirion_common_generate_crc>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8000bc2:	197b      	adds	r3, r7, r5
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	197a      	adds	r2, r7, r5
 8000bc8:	1c59      	adds	r1, r3, #1
 8000bca:	8011      	strh	r1, [r2, #0]
 8000bcc:	001a      	movs	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	189b      	adds	r3, r3, r2
 8000bd2:	2213      	movs	r2, #19
 8000bd4:	18ba      	adds	r2, r7, r2
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8000bda:	19bb      	adds	r3, r7, r6
 8000bdc:	19ba      	adds	r2, r7, r6
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	3201      	adds	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	2317      	movs	r3, #23
 8000be6:	18fa      	adds	r2, r7, r3
 8000be8:	2309      	movs	r3, #9
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d3b4      	bcc.n	8000b5e <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 8000bf4:	2314      	movs	r3, #20
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	881b      	ldrh	r3, [r3, #0]
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b007      	add	sp, #28
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c02 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8000c02:	b5b0      	push	{r4, r5, r7, lr}
 8000c04:	b096      	sub	sp, #88	; 0x58
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	1c02      	adds	r2, r0, #0
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	1c0a      	adds	r2, r1, #0
 8000c16:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000c18:	2052      	movs	r0, #82	; 0x52
 8000c1a:	1839      	adds	r1, r7, r0
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	1c1a      	adds	r2, r3, #0
 8000c22:	1892      	adds	r2, r2, r2
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000c2e:	183b      	adds	r3, r7, r0
 8000c30:	881a      	ldrh	r2, [r3, #0]
 8000c32:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 f907 	bl	8000e4c <sensirion_i2c_read>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	001a      	movs	r2, r3
 8000c42:	214a      	movs	r1, #74	; 0x4a
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8000c48:	000a      	movs	r2, r1
 8000c4a:	18bb      	adds	r3, r7, r2
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	5e5b      	ldrsh	r3, [r3, r1]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 8000c54:	18bb      	adds	r3, r7, r2
 8000c56:	2200      	movs	r2, #0
 8000c58:	5e9b      	ldrsh	r3, [r3, r2]
 8000c5a:	e053      	b.n	8000d04 <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000c5c:	2356      	movs	r3, #86	; 0x56
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2200      	movs	r2, #0
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	2354      	movs	r3, #84	; 0x54
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	801a      	strh	r2, [r3, #0]
 8000c6c:	e041      	b.n	8000cf2 <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000c6e:	2156      	movs	r1, #86	; 0x56
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c76:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c80:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	001a      	movs	r2, r3
 8000c86:	2102      	movs	r1, #2
 8000c88:	f7ff ff15 	bl	8000ab6 <sensirion_common_check_crc>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	001a      	movs	r2, r3
 8000c90:	214a      	movs	r1, #74	; 0x4a
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 8000c96:	000a      	movs	r2, r1
 8000c98:	18bb      	adds	r3, r7, r2
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	5e5b      	ldrsh	r3, [r3, r1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 8000ca2:	18bb      	adds	r3, r7, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8000ca8:	e02c      	b.n	8000d04 <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8000caa:	2456      	movs	r4, #86	; 0x56
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cb2:	18d2      	adds	r2, r2, r3
 8000cb4:	2554      	movs	r5, #84	; 0x54
 8000cb6:	197b      	adds	r3, r7, r5
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	1979      	adds	r1, r7, r5
 8000cbc:	1c58      	adds	r0, r3, #1
 8000cbe:	8008      	strh	r0, [r1, #0]
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	185b      	adds	r3, r3, r1
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cd2:	18d2      	adds	r2, r2, r3
 8000cd4:	197b      	adds	r3, r7, r5
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	1979      	adds	r1, r7, r5
 8000cda:	1c58      	adds	r0, r3, #1
 8000cdc:	8008      	strh	r0, [r1, #0]
 8000cde:	0019      	movs	r1, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	185b      	adds	r3, r3, r1
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	193a      	adds	r2, r7, r4
 8000cec:	8812      	ldrh	r2, [r2, #0]
 8000cee:	3203      	adds	r2, #3
 8000cf0:	801a      	strh	r2, [r3, #0]
 8000cf2:	2356      	movs	r3, #86	; 0x56
 8000cf4:	18fa      	adds	r2, r7, r3
 8000cf6:	2352      	movs	r3, #82	; 0x52
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	8812      	ldrh	r2, [r2, #0]
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d3b5      	bcc.n	8000c6e <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b016      	add	sp, #88	; 0x58
 8000d0a:	bdb0      	pop	{r4, r5, r7, pc}

08000d0c <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8000d0c:	b5b0      	push	{r4, r5, r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6039      	str	r1, [r7, #0]
 8000d14:	0011      	movs	r1, r2
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	1c02      	adds	r2, r0, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	1c0a      	adds	r2, r1, #0
 8000d20:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8000d22:	250c      	movs	r5, #12
 8000d24:	197c      	adds	r4, r7, r5
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	881a      	ldrh	r2, [r3, #0]
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ff66 	bl	8000c02 <sensirion_i2c_read_words_as_bytes>
 8000d36:	0003      	movs	r3, r0
 8000d38:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 8000d3a:	197b      	adds	r3, r7, r5
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	5e9b      	ldrsh	r3, [r3, r2]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <sensirion_i2c_read_words+0x40>
        return ret;
 8000d44:	197b      	adds	r3, r7, r5
 8000d46:	2200      	movs	r2, #0
 8000d48:	5e9b      	ldrsh	r3, [r3, r2]
 8000d4a:	e02a      	b.n	8000da2 <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e01c      	b.n	8000d90 <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 8000d56:	200f      	movs	r0, #15
 8000d58:	183b      	adds	r3, r7, r0
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b219      	sxth	r1, r3
 8000d78:	183b      	adds	r3, r7, r0
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	18d3      	adds	r3, r2, r3
 8000d82:	b28a      	uxth	r2, r1
 8000d84:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000d86:	183b      	adds	r3, r7, r0
 8000d88:	183a      	adds	r2, r7, r0
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	3201      	adds	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	1d3a      	adds	r2, r7, #4
 8000d9a:	8812      	ldrh	r2, [r2, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8da      	bhi.n	8000d56 <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bdb0      	pop	{r4, r5, r7, pc}

08000daa <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8000daa:	b590      	push	{r4, r7, lr}
 8000dac:	b085      	sub	sp, #20
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	0002      	movs	r2, r0
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	1c0a      	adds	r2, r1, #0
 8000dba:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	8819      	ldrh	r1, [r3, #0]
 8000dc0:	240c      	movs	r4, #12
 8000dc2:	1938      	adds	r0, r7, r4
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f7ff fe96 	bl	8000af8 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000dcc:	1939      	adds	r1, r7, r4
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 f859 	bl	8000e8c <sensirion_i2c_write>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	b21b      	sxth	r3, r3
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b005      	add	sp, #20
 8000de4:	bd90      	pop	{r4, r7, pc}
	...

08000de8 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <sensirion_i2c_init+0x5c>)
 8000df0:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00000708;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000df4:	22e1      	movs	r2, #225	; 0xe1
 8000df6:	00d2      	lsls	r2, r2, #3
 8000df8:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;*/
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <sensirion_i2c_init+0x60>)
 8000e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <sensirion_i2c_init+0x60>)
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	0389      	lsls	r1, r1, #14
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <sensirion_i2c_init+0x58>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fd43 	bl	80018c0 <HAL_I2C_Init>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000090 	.word	0x20000090
 8000e44:	40005400 	.word	0x40005400
 8000e48:	40021000 	.word	0x40021000

08000e4c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	6039      	str	r1, [r7, #0]
 8000e54:	0011      	movs	r1, r2
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	1c02      	adds	r2, r0, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	1c0a      	adds	r2, r1, #0
 8000e60:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	18db      	adds	r3, r3, r3
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <sensirion_i2c_read+0x3c>)
 8000e74:	2464      	movs	r4, #100	; 0x64
 8000e76:	9400      	str	r4, [sp, #0]
 8000e78:	f000 fec0 	bl	8001bfc <HAL_I2C_Master_Receive>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b003      	add	sp, #12
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	20000090 	.word	0x20000090

08000e8c <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	6039      	str	r1, [r7, #0]
 8000e94:	0011      	movs	r1, r2
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	1c02      	adds	r2, r0, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	1c0a      	adds	r2, r1, #0
 8000ea0:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	18db      	adds	r3, r3, r3
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <sensirion_i2c_write+0x3c>)
 8000eb4:	2464      	movs	r4, #100	; 0x64
 8000eb6:	9400      	str	r4, [sp, #0]
 8000eb8:	f000 fd98 	bl	80019ec <HAL_I2C_Master_Transmit>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	20000090 	.word	0x20000090

08000ecc <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	22fa      	movs	r2, #250	; 0xfa
 8000ed8:	0091      	lsls	r1, r2, #2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff f91e 	bl	800011c <__udivsi3>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	22fa      	movs	r2, #250	; 0xfa
 8000ee8:	0091      	lsls	r1, r2, #2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff f99c 	bl	8000228 <__aeabi_uidivmod>
 8000ef0:	1e0b      	subs	r3, r1, #0
 8000ef2:	d002      	beq.n	8000efa <sensirion_sleep_usec+0x2e>
        msec++;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8000efa:	f000 fa99 	bl	8001430 <HAL_GetHalVersion>
 8000efe:	0003      	movs	r3, r0
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <sensirion_sleep_usec+0x50>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d802      	bhi.n	8000f0c <sensirion_sleep_usec+0x40>
        msec++;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 fa6a 	bl	80013e8 <HAL_Delay>
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	010100ff 	.word	0x010100ff

08000f20 <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	250f      	movs	r5, #15
 8000f2c:	197b      	adds	r3, r7, r5
 8000f2e:	1c02      	adds	r2, r0, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 8000f32:	2616      	movs	r6, #22
 8000f34:	19bc      	adds	r4, r7, r6
 8000f36:	197b      	adds	r3, r7, r5
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 f820 	bl	8000f80 <sht3x_measure>
 8000f40:	0003      	movs	r3, r0
 8000f42:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 8000f44:	19bb      	adds	r3, r7, r6
 8000f46:	2200      	movs	r2, #0
 8000f48:	5e9b      	ldrsh	r3, [r3, r2]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10d      	bne.n	8000f6a <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <sht3x_measure_blocking_read+0x5c>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff ffbb 	bl	8000ecc <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 8000f56:	19bc      	adds	r4, r7, r6
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 f823 	bl	8000fac <sht3x_read>
 8000f66:	0003      	movs	r3, r0
 8000f68:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 8000f6a:	2316      	movs	r3, #22
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	2200      	movs	r2, #0
 8000f70:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b007      	add	sp, #28
 8000f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	00003a98 	.word	0x00003a98

08000f80 <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	0002      	movs	r2, r0
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <sht3x_measure+0x28>)
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff ff07 	bl	8000daa <sensirion_i2c_write_cmd>
 8000f9c:	0003      	movs	r3, r0
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	20000000 	.word	0x20000000

08000fac <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	260f      	movs	r6, #15
 8000fb8:	19bb      	adds	r3, r7, r6
 8000fba:	1c02      	adds	r2, r0, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 8000fbe:	2316      	movs	r3, #22
 8000fc0:	18fc      	adds	r4, r7, r3
 8000fc2:	2510      	movs	r5, #16
 8000fc4:	1979      	adds	r1, r7, r5
 8000fc6:	19bb      	adds	r3, r7, r6
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fe9d 	bl	8000d0c <sensirion_i2c_read_words>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8000fd6:	197b      	adds	r3, r7, r5
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 f810 	bl	8001004 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8000fe4:	197b      	adds	r3, r7, r5
 8000fe6:	885b      	ldrh	r3, [r3, #2]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 f821 	bl	8001034 <tick_to_humidity>

    return ret;
 8000ff2:	2316      	movs	r3, #22
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b007      	add	sp, #28
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001004 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <tick_to_temperature+0x28>)
 8001018:	4353      	muls	r3, r2
 800101a:	135b      	asrs	r3, r3, #13
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <tick_to_temperature+0x2c>)
 800101e:	189a      	adds	r2, r3, r2
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	00005573 	.word	0x00005573
 8001030:	ffff5038 	.word	0xffff5038

08001034 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	0002      	movs	r2, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8001042:	1dbb      	adds	r3, r7, #6
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <tick_to_humidity+0x24>)
 8001048:	4353      	muls	r3, r2
 800104a:	135a      	asrs	r2, r3, #13
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	000030d4 	.word	0x000030d4

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_MspInit+0x24>)
 8001062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x24>)
 8001066:	2101      	movs	r1, #1
 8001068:	430a      	orrs	r2, r1
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_MspInit+0x24>)
 800106e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_MspInit+0x24>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0549      	lsls	r1, r1, #21
 8001076:	430a      	orrs	r2, r1
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	240c      	movs	r4, #12
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2314      	movs	r3, #20
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f002 fd56 	bl	8003b48 <memset>
  if(hi2c->Instance==I2C1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_I2C_MspInit+0x7c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d128      	bne.n	80010f8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010ac:	2102      	movs	r1, #2
 80010ae:	430a      	orrs	r2, r1
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010be:	0021      	movs	r1, r4
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	22c0      	movs	r2, #192	; 0xc0
 80010c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2212      	movs	r2, #18
 80010ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2203      	movs	r2, #3
 80010d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2201      	movs	r2, #1
 80010dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_I2C_MspInit+0x84>)
 80010e2:	0019      	movs	r1, r3
 80010e4:	0010      	movs	r0, r2
 80010e6:	f000 fa5f 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	0389      	lsls	r1, r1, #14
 80010f4:	430a      	orrs	r2, r1
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b009      	add	sp, #36	; 0x24
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	40005400 	.word	0x40005400
 8001104:	40021000 	.word	0x40021000
 8001108:	50000400 	.word	0x50000400

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b08b      	sub	sp, #44	; 0x2c
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	2414      	movs	r4, #20
 8001116:	193b      	adds	r3, r7, r4
 8001118:	0018      	movs	r0, r3
 800111a:	2314      	movs	r3, #20
 800111c:	001a      	movs	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	f002 fd12 	bl	8003b48 <memset>
  if(huart->Instance==LPUART1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <HAL_UART_MspInit+0xc0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d14a      	bne.n	80011c4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 8001130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	02c9      	lsls	r1, r1, #11
 8001138:	430a      	orrs	r2, r1
 800113a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 800113e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 8001142:	2104      	movs	r1, #4
 8001144:	430a      	orrs	r2, r1
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2204      	movs	r2, #4
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 8001156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 800115a:	2102      	movs	r1, #2
 800115c:	430a      	orrs	r2, r1
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	2202      	movs	r2, #2
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116c:	193b      	adds	r3, r7, r4
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	2202      	movs	r2, #2
 8001176:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	2203      	movs	r2, #3
 8001182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001184:	193b      	adds	r3, r7, r4
 8001186:	2206      	movs	r2, #6
 8001188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	193b      	adds	r3, r7, r4
 800118c:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 800118e:	0019      	movs	r1, r3
 8001190:	0010      	movs	r0, r2
 8001192:	f000 fa09 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001196:	0021      	movs	r1, r4
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2202      	movs	r2, #2
 80011a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2203      	movs	r2, #3
 80011b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2206      	movs	r2, #6
 80011b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_UART_MspInit+0xcc>)
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f000 f9f2 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b00b      	add	sp, #44	; 0x2c
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	40004800 	.word	0x40004800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	50000800 	.word	0x50000800
 80011d8:	50000400 	.word	0x50000400

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f8d6 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f002 fc5a 	bl	8003af4 <__errno>
 8001240:	0003      	movs	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	2301      	movs	r3, #1
 8001248:	425b      	negs	r3, r3
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	18d2      	adds	r2, r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b006      	add	sp, #24
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20002000 	.word	0x20002000
 800126c:	00000400 	.word	0x00000400
 8001270:	200000dc 	.word	0x200000dc
 8001274:	200002d0 	.word	0x200002d0

08001278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001286:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <LoopForever+0x6>)
    LDR R1, [R0]
 800128a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800128c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800128e:	4a13      	ldr	r2, [pc, #76]	; (80012dc <LoopForever+0xa>)
    CMP R1, R2
 8001290:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001292:	d105      	bne.n	80012a0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001296:	4913      	ldr	r1, [pc, #76]	; (80012e4 <LoopForever+0x12>)
    STR R1, [R0]
 8001298:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800129a:	4813      	ldr	r0, [pc, #76]	; (80012e8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800129c:	4913      	ldr	r1, [pc, #76]	; (80012ec <LoopForever+0x1a>)
    STR R1, [R0]
 800129e:	6001      	str	r1, [r0, #0]

080012a0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <LoopForever+0x1e>)
  ldr r1, =_edata
 80012a2:	4914      	ldr	r1, [pc, #80]	; (80012f4 <LoopForever+0x22>)
  ldr r2, =_sidata
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <LoopForever+0x26>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <LoopForever+0x2a>)
  ldr r4, =_ebss
 80012b8:	4c11      	ldr	r4, [pc, #68]	; (8001300 <LoopForever+0x2e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012c6:	f7ff ffd7 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f002 fc19 	bl	8003b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff f9d9 	bl	8000684 <main>

080012d2 <LoopForever>:

LoopForever:
    b LoopForever
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
   ldr   r0, =_estack
 80012d4:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80012d8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80012dc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80012e0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80012e4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80012e8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80012ec:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012f8:	080044c4 	.word	0x080044c4
  ldr r2, =_sbss
 80012fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001300:	200002cc 	.word	0x200002cc

08001304 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_IRQHandler>
	...

08001308 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_Init+0x3c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Init+0x3c>)
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f811 	bl	8001348 <HAL_InitTick>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d003      	beq.n	8001332 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e001      	b.n	8001336 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001332:	f7ff fe93 	bl	800105c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40022000 	.word	0x40022000

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_InitTick+0x5c>)
 8001352:	681c      	ldr	r4, [r3, #0]
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_InitTick+0x60>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	23fa      	movs	r3, #250	; 0xfa
 800135c:	0098      	lsls	r0, r3, #2
 800135e:	f7fe fedd 	bl	800011c <__udivsi3>
 8001362:	0003      	movs	r3, r0
 8001364:	0019      	movs	r1, r3
 8001366:	0020      	movs	r0, r4
 8001368:	f7fe fed8 	bl	800011c <__udivsi3>
 800136c:	0003      	movs	r3, r0
 800136e:	0018      	movs	r0, r3
 8001370:	f000 f90d 	bl	800158e <HAL_SYSTICK_Config>
 8001374:	1e03      	subs	r3, r0, #0
 8001376:	d001      	beq.n	800137c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e00f      	b.n	800139c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d80b      	bhi.n	800139a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	2301      	movs	r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	2200      	movs	r2, #0
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f8ea 	bl	8001564 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_InitTick+0x64>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b003      	add	sp, #12
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	20000004 	.word	0x20000004
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	20000008 	.word	0x20000008

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x1c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	001a      	movs	r2, r3
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x20>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	18d2      	adds	r2, r2, r3
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_IncTick+0x20>)
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	200002b8 	.word	0x200002b8

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <HAL_GetTick+0x10>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	200002b8 	.word	0x200002b8

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	001a      	movs	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	189b      	adds	r3, r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	f7ff ffe0 	bl	80013d4 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	2000000c 	.word	0x2000000c

08001430 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <HAL_GetHalVersion+0xc>)
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	010a0500 	.word	0x010a0500

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	0002      	movs	r2, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b7f      	cmp	r3, #127	; 0x7f
 8001454:	d828      	bhi.n	80014a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <__NVIC_SetPriority+0xd4>)
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	33c0      	adds	r3, #192	; 0xc0
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	589b      	ldr	r3, [r3, r2]
 8001466:	1dfa      	adds	r2, r7, #7
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	0011      	movs	r1, r2
 800146c:	2203      	movs	r2, #3
 800146e:	400a      	ands	r2, r1
 8001470:	00d2      	lsls	r2, r2, #3
 8001472:	21ff      	movs	r1, #255	; 0xff
 8001474:	4091      	lsls	r1, r2
 8001476:	000a      	movs	r2, r1
 8001478:	43d2      	mvns	r2, r2
 800147a:	401a      	ands	r2, r3
 800147c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	22ff      	movs	r2, #255	; 0xff
 8001484:	401a      	ands	r2, r3
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	0018      	movs	r0, r3
 800148c:	2303      	movs	r3, #3
 800148e:	4003      	ands	r3, r0
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001494:	481f      	ldr	r0, [pc, #124]	; (8001514 <__NVIC_SetPriority+0xd4>)
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b25b      	sxtb	r3, r3
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	430a      	orrs	r2, r1
 80014a0:	33c0      	adds	r3, #192	; 0xc0
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014a6:	e031      	b.n	800150c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <__NVIC_SetPriority+0xd8>)
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	0019      	movs	r1, r3
 80014b0:	230f      	movs	r3, #15
 80014b2:	400b      	ands	r3, r1
 80014b4:	3b08      	subs	r3, #8
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3306      	adds	r3, #6
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	18d3      	adds	r3, r2, r3
 80014be:	3304      	adds	r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1dfa      	adds	r2, r7, #7
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	0011      	movs	r1, r2
 80014c8:	2203      	movs	r2, #3
 80014ca:	400a      	ands	r2, r1
 80014cc:	00d2      	lsls	r2, r2, #3
 80014ce:	21ff      	movs	r1, #255	; 0xff
 80014d0:	4091      	lsls	r1, r2
 80014d2:	000a      	movs	r2, r1
 80014d4:	43d2      	mvns	r2, r2
 80014d6:	401a      	ands	r2, r3
 80014d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	22ff      	movs	r2, #255	; 0xff
 80014e0:	401a      	ands	r2, r3
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	0018      	movs	r0, r3
 80014e8:	2303      	movs	r3, #3
 80014ea:	4003      	ands	r3, r0
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <__NVIC_SetPriority+0xd8>)
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	001c      	movs	r4, r3
 80014f8:	230f      	movs	r3, #15
 80014fa:	4023      	ands	r3, r4
 80014fc:	3b08      	subs	r3, #8
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	430a      	orrs	r2, r1
 8001502:	3306      	adds	r3, #6
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	18c3      	adds	r3, r0, r3
 8001508:	3304      	adds	r3, #4
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b003      	add	sp, #12
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1e5a      	subs	r2, r3, #1
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	045b      	lsls	r3, r3, #17
 800152c:	429a      	cmp	r2, r3
 800152e:	d301      	bcc.n	8001534 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001530:	2301      	movs	r3, #1
 8001532:	e010      	b.n	8001556 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <SysTick_Config+0x44>)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	3a01      	subs	r2, #1
 800153a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153c:	2301      	movs	r3, #1
 800153e:	425b      	negs	r3, r3
 8001540:	2103      	movs	r1, #3
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff ff7c 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x44>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x44>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	210f      	movs	r1, #15
 8001570:	187b      	adds	r3, r7, r1
 8001572:	1c02      	adds	r2, r0, #0
 8001574:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	187b      	adds	r3, r7, r1
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	0011      	movs	r1, r2
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <__NVIC_SetPriority>
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	0018      	movs	r0, r3
 800159a:	f7ff ffbf 	bl	800151c <SysTick_Config>
 800159e:	0003      	movs	r3, r0
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015be:	e149      	b.n	8001854 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4091      	lsls	r1, r2
 80015ca:	000a      	movs	r2, r1
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d100      	bne.n	80015d8 <HAL_GPIO_Init+0x30>
 80015d6:	e13a      	b.n	800184e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2203      	movs	r2, #3
 80015de:	4013      	ands	r3, r2
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d005      	beq.n	80015f0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d130      	bne.n	8001652 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001626:	2201      	movs	r2, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	2201      	movs	r2, #1
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2203      	movs	r2, #3
 8001658:	4013      	ands	r3, r2
 800165a:	2b03      	cmp	r3, #3
 800165c:	d017      	beq.n	800168e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	43da      	mvns	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2203      	movs	r2, #3
 8001694:	4013      	ands	r3, r2
 8001696:	2b02      	cmp	r3, #2
 8001698:	d123      	bne.n	80016e2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	58d3      	ldr	r3, [r2, r3]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2207      	movs	r2, #7
 80016ac:	4013      	ands	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	43da      	mvns	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2107      	movs	r1, #7
 80016c6:	400b      	ands	r3, r1
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	6939      	ldr	r1, [r7, #16]
 80016e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	401a      	ands	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	23c0      	movs	r3, #192	; 0xc0
 800171c:	029b      	lsls	r3, r3, #10
 800171e:	4013      	ands	r3, r2
 8001720:	d100      	bne.n	8001724 <HAL_GPIO_Init+0x17c>
 8001722:	e094      	b.n	800184e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001724:	4b51      	ldr	r3, [pc, #324]	; (800186c <HAL_GPIO_Init+0x2c4>)
 8001726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_GPIO_Init+0x2c4>)
 800172a:	2101      	movs	r1, #1
 800172c:	430a      	orrs	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_GPIO_Init+0x2c8>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	589b      	ldr	r3, [r3, r2]
 800173c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2203      	movs	r2, #3
 8001742:	4013      	ands	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	43da      	mvns	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	23a0      	movs	r3, #160	; 0xa0
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	429a      	cmp	r2, r3
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x1de>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a44      	ldr	r2, [pc, #272]	; (8001874 <HAL_GPIO_Init+0x2cc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x1da>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a43      	ldr	r2, [pc, #268]	; (8001878 <HAL_GPIO_Init+0x2d0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x1d6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a42      	ldr	r2, [pc, #264]	; (800187c <HAL_GPIO_Init+0x2d4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x1d2>
 8001776:	2305      	movs	r3, #5
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x1e0>
 800177a:	2306      	movs	r3, #6
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x1e0>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x1e0>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x1e0>
 8001786:	2300      	movs	r3, #0
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	2103      	movs	r1, #3
 800178c:	400a      	ands	r2, r1
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x2c8>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	4013      	ands	r3, r2
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43da      	mvns	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	029b      	lsls	r3, r3, #10
 80017e8:	4013      	ands	r3, r2
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43da      	mvns	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	035b      	lsls	r3, r3, #13
 8001812:	4013      	ands	r3, r2
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43da      	mvns	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	039b      	lsls	r3, r3, #14
 800183c:	4013      	ands	r3, r2
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_GPIO_Init+0x2d8>)
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	40da      	lsrs	r2, r3
 800185c:	1e13      	subs	r3, r2, #0
 800185e:	d000      	beq.n	8001862 <HAL_GPIO_Init+0x2ba>
 8001860:	e6ae      	b.n	80015c0 <HAL_GPIO_Init+0x18>
  }
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b006      	add	sp, #24
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	50000400 	.word	0x50000400
 8001878:	50000800 	.word	0x50000800
 800187c:	50001c00 	.word	0x50001c00
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	0008      	movs	r0, r1
 800188e:	0011      	movs	r1, r2
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	1c7b      	adds	r3, r7, #1
 8001898:	1c0a      	adds	r2, r1, #0
 800189a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	1c7b      	adds	r3, r7, #1
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a4:	1cbb      	adds	r3, r7, #2
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018ae:	1cbb      	adds	r3, r7, #2
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e082      	b.n	80019d8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2241      	movs	r2, #65	; 0x41
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff fbcb 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2241      	movs	r2, #65	; 0x41
 80018f2:	2124      	movs	r1, #36	; 0x24
 80018f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	438a      	bics	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4934      	ldr	r1, [pc, #208]	; (80019e0 <HAL_I2C_Init+0x120>)
 8001910:	400a      	ands	r2, r1
 8001912:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4931      	ldr	r1, [pc, #196]	; (80019e4 <HAL_I2C_Init+0x124>)
 8001920:	400a      	ands	r2, r1
 8001922:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	0209      	lsls	r1, r1, #8
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	e007      	b.n	800194e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2184      	movs	r1, #132	; 0x84
 8001948:	0209      	lsls	r1, r1, #8
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d104      	bne.n	8001960 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	491f      	ldr	r1, [pc, #124]	; (80019e8 <HAL_I2C_Init+0x128>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	491a      	ldr	r1, [pc, #104]	; (80019e4 <HAL_I2C_Init+0x124>)
 800197c:	400a      	ands	r2, r1
 800197e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	431a      	orrs	r2, r3
 800198a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69d9      	ldr	r1, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2241      	movs	r2, #65	; 0x41
 80019c4:	2120      	movs	r1, #32
 80019c6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2242      	movs	r2, #66	; 0x42
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	f0ffffff 	.word	0xf0ffffff
 80019e4:	ffff7fff 	.word	0xffff7fff
 80019e8:	02008000 	.word	0x02008000

080019ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	0008      	movs	r0, r1
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	0019      	movs	r1, r3
 80019fa:	230a      	movs	r3, #10
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	1c02      	adds	r2, r0, #0
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	2308      	movs	r3, #8
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	1c0a      	adds	r2, r1, #0
 8001a08:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2241      	movs	r2, #65	; 0x41
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d000      	beq.n	8001a18 <HAL_I2C_Master_Transmit+0x2c>
 8001a16:	e0e7      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	5c9b      	ldrb	r3, [r3, r2]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_I2C_Master_Transmit+0x3a>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e0e1      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1fe>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a2e:	f7ff fcd1 	bl	80013d4 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	0219      	lsls	r1, r3, #8
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2319      	movs	r3, #25
 8001a42:	2201      	movs	r2, #1
 8001a44:	f000 fa04 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cc      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2241      	movs	r2, #65	; 0x41
 8001a54:	2121      	movs	r1, #33	; 0x21
 8001a56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2242      	movs	r2, #66	; 0x42
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	18ba      	adds	r2, r7, r2
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2bff      	cmp	r3, #255	; 0xff
 8001a84:	d911      	bls.n	8001aaa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	22ff      	movs	r2, #255	; 0xff
 8001a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	045c      	lsls	r4, r3, #17
 8001a96:	230a      	movs	r3, #10
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	8819      	ldrh	r1, [r3, #0]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	4b55      	ldr	r3, [pc, #340]	; (8001bf4 <HAL_I2C_Master_Transmit+0x208>)
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	0023      	movs	r3, r4
 8001aa4:	f000 fb74 	bl	8002190 <I2C_TransferConfig>
 8001aa8:	e075      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	049c      	lsls	r4, r3, #18
 8001abe:	230a      	movs	r3, #10
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	8819      	ldrh	r1, [r3, #0]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_I2C_Master_Transmit+0x208>)
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	0023      	movs	r3, r4
 8001acc:	f000 fb60 	bl	8002190 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ad0:	e061      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f9f8 	bl	8001ece <I2C_WaitOnTXISFlagUntilTimeout>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e081      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03a      	beq.n	8001b96 <HAL_I2C_Master_Transmit+0x1aa>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d136      	bne.n	8001b96 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	0013      	movs	r3, r2
 8001b32:	2200      	movs	r2, #0
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	f000 f98b 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e053      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2bff      	cmp	r3, #255	; 0xff
 8001b4a:	d911      	bls.n	8001b70 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	22ff      	movs	r2, #255	; 0xff
 8001b50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	045c      	lsls	r4, r3, #17
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	8819      	ldrh	r1, [r3, #0]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	0023      	movs	r3, r4
 8001b6a:	f000 fb11 	bl	8002190 <I2C_TransferConfig>
 8001b6e:	e012      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	049c      	lsls	r4, r3, #18
 8001b84:	230a      	movs	r3, #10
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	8819      	ldrh	r1, [r3, #0]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	0023      	movs	r3, r4
 8001b92:	f000 fafd 	bl	8002190 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d198      	bne.n	8001ad2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 f9d0 	bl	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e01a      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <HAL_I2C_Master_Transmit+0x20c>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2241      	movs	r2, #65	; 0x41
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2242      	movs	r2, #66	; 0x42
 8001bd8:	2100      	movs	r1, #0
 8001bda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	2100      	movs	r1, #0
 8001be2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b007      	add	sp, #28
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	80002000 	.word	0x80002000
 8001bf8:	fe00e800 	.word	0xfe00e800

08001bfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	0008      	movs	r0, r1
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	0019      	movs	r1, r3
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	1c02      	adds	r2, r0, #0
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	2308      	movs	r3, #8
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	1c0a      	adds	r2, r1, #0
 8001c18:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2241      	movs	r2, #65	; 0x41
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d000      	beq.n	8001c28 <HAL_I2C_Master_Receive+0x2c>
 8001c26:	e0e8      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2240      	movs	r2, #64	; 0x40
 8001c2c:	5c9b      	ldrb	r3, [r3, r2]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Master_Receive+0x3a>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e0e2      	b.n	8001dfc <HAL_I2C_Master_Receive+0x200>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fbc9 	bl	80013d4 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	0219      	lsls	r1, r3, #8
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2319      	movs	r3, #25
 8001c52:	2201      	movs	r2, #1
 8001c54:	f000 f8fc 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0cd      	b.n	8001dfc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2241      	movs	r2, #65	; 0x41
 8001c64:	2122      	movs	r1, #34	; 0x22
 8001c66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2242      	movs	r2, #66	; 0x42
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	18ba      	adds	r2, r7, r2
 8001c82:	8812      	ldrh	r2, [r2, #0]
 8001c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d911      	bls.n	8001cba <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	22ff      	movs	r2, #255	; 0xff
 8001c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	045c      	lsls	r4, r3, #17
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	8819      	ldrh	r1, [r3, #0]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	4b55      	ldr	r3, [pc, #340]	; (8001e04 <HAL_I2C_Master_Receive+0x208>)
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	0023      	movs	r3, r4
 8001cb4:	f000 fa6c 	bl	8002190 <I2C_TransferConfig>
 8001cb8:	e076      	b.n	8001da8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	049c      	lsls	r4, r3, #18
 8001cce:	230a      	movs	r3, #10
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	8819      	ldrh	r1, [r3, #0]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_I2C_Master_Receive+0x208>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	0023      	movs	r3, r4
 8001cdc:	f000 fa58 	bl	8002190 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001ce0:	e062      	b.n	8001da8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 f96b 	bl	8001fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e082      	b.n	8001dfc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d03a      	beq.n	8001da8 <HAL_I2C_Master_Receive+0x1ac>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d136      	bne.n	8001da8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	0013      	movs	r3, r2
 8001d44:	2200      	movs	r2, #0
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	f000 f882 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e053      	b.n	8001dfc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d911      	bls.n	8001d82 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	22ff      	movs	r2, #255	; 0xff
 8001d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	045c      	lsls	r4, r3, #17
 8001d6e:	230a      	movs	r3, #10
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	8819      	ldrh	r1, [r3, #0]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	2300      	movs	r3, #0
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	0023      	movs	r3, r4
 8001d7c:	f000 fa08 	bl	8002190 <I2C_TransferConfig>
 8001d80:	e012      	b.n	8001da8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049c      	lsls	r4, r3, #18
 8001d96:	230a      	movs	r3, #10
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	8819      	ldrh	r1, [r3, #0]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	0023      	movs	r3, r4
 8001da4:	f000 f9f4 	bl	8002190 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d197      	bne.n	8001ce2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 f8c7 	bl	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dbe:	1e03      	subs	r3, r0, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e01a      	b.n	8001dfc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	490b      	ldr	r1, [pc, #44]	; (8001e08 <HAL_I2C_Master_Receive+0x20c>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2241      	movs	r2, #65	; 0x41
 8001de2:	2120      	movs	r1, #32
 8001de4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2242      	movs	r2, #66	; 0x42
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	2100      	movs	r1, #0
 8001df4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
  }
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b007      	add	sp, #28
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	80002400 	.word	0x80002400
 8001e08:	fe00e800 	.word	0xfe00e800

08001e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d103      	bne.n	8001e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d007      	beq.n	8001e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	430a      	orrs	r2, r1
 8001e46:	619a      	str	r2, [r3, #24]
  }
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e60:	e021      	b.n	8001ea6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	d01e      	beq.n	8001ea6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e68:	f7ff fab4 	bl	80013d4 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d302      	bcc.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d113      	bne.n	8001ea6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	2220      	movs	r2, #32
 8001e84:	431a      	orrs	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2241      	movs	r2, #65	; 0x41
 8001e8e:	2120      	movs	r1, #32
 8001e90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2242      	movs	r2, #66	; 0x42
 8001e96:	2100      	movs	r1, #0
 8001e98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	425a      	negs	r2, r3
 8001eb6:	4153      	adcs	r3, r2
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	001a      	movs	r2, r3
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d0ce      	beq.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001eda:	e02b      	b.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f8da 	bl	800209c <I2C_IsAcknowledgeFailed>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e029      	b.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	d01e      	beq.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef6:	f7ff fa6d 	bl	80013d4 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d302      	bcc.n	8001f0c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d113      	bne.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	2220      	movs	r2, #32
 8001f12:	431a      	orrs	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2241      	movs	r2, #65	; 0x41
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2242      	movs	r2, #66	; 0x42
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e007      	b.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d1cc      	bne.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b004      	add	sp, #16
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f58:	e028      	b.n	8001fac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f89b 	bl	800209c <I2C_IsAcknowledgeFailed>
 8001f66:	1e03      	subs	r3, r0, #0
 8001f68:	d001      	beq.n	8001f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e026      	b.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6e:	f7ff fa31 	bl	80013d4 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d302      	bcc.n	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d113      	bne.n	8001fac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	2220      	movs	r2, #32
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2241      	movs	r2, #65	; 0x41
 8001f94:	2120      	movs	r1, #32
 8001f96:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2242      	movs	r2, #66	; 0x42
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e007      	b.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d1cf      	bne.n	8001f5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fd0:	e055      	b.n	800207e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 f85f 	bl	800209c <I2C_IsAcknowledgeFailed>
 8001fde:	1e03      	subs	r3, r0, #0
 8001fe0:	d001      	beq.n	8001fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e053      	b.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2220      	movs	r2, #32
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d129      	bne.n	8002048 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d105      	bne.n	800200e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e03f      	b.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2220      	movs	r2, #32
 8002014:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	491d      	ldr	r1, [pc, #116]	; (8002098 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002022:	400a      	ands	r2, r1
 8002024:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2241      	movs	r2, #65	; 0x41
 8002030:	2120      	movs	r1, #32
 8002032:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2242      	movs	r2, #66	; 0x42
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e022      	b.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7ff f9c4 	bl	80013d4 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10f      	bne.n	800207e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	2220      	movs	r2, #32
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2241      	movs	r2, #65	; 0x41
 800206e:	2120      	movs	r1, #32
 8002070:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e007      	b.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2204      	movs	r2, #4
 8002086:	4013      	ands	r3, r2
 8002088:	2b04      	cmp	r3, #4
 800208a:	d1a2      	bne.n	8001fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	fe00e800 	.word	0xfe00e800

0800209c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2210      	movs	r2, #16
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d164      	bne.n	8002180 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	049b      	lsls	r3, r3, #18
 80020c0:	401a      	ands	r2, r3
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	049b      	lsls	r3, r3, #18
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d02b      	beq.n	8002122 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	01c9      	lsls	r1, r1, #7
 80020d8:	430a      	orrs	r2, r1
 80020da:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020dc:	e021      	b.n	8002122 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3301      	adds	r3, #1
 80020e2:	d01e      	beq.n	8002122 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e4:	f7ff f976 	bl	80013d4 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d302      	bcc.n	80020fa <I2C_IsAcknowledgeFailed+0x5e>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d113      	bne.n	8002122 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	2220      	movs	r2, #32
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2241      	movs	r2, #65	; 0x41
 800210a:	2120      	movs	r1, #32
 800210c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2242      	movs	r2, #66	; 0x42
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e02f      	b.n	8002182 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2220      	movs	r2, #32
 800212a:	4013      	ands	r3, r2
 800212c:	2b20      	cmp	r3, #32
 800212e:	d1d6      	bne.n	80020de <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2210      	movs	r2, #16
 8002136:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff fe62 	bl	8001e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	490e      	ldr	r1, [pc, #56]	; (800218c <I2C_IsAcknowledgeFailed+0xf0>)
 8002154:	400a      	ands	r2, r1
 8002156:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	2204      	movs	r2, #4
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2241      	movs	r2, #65	; 0x41
 8002168:	2120      	movs	r1, #32
 800216a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2242      	movs	r2, #66	; 0x42
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2240      	movs	r2, #64	; 0x40
 8002178:	2100      	movs	r1, #0
 800217a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b004      	add	sp, #16
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	fe00e800 	.word	0xfe00e800

08002190 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	0008      	movs	r0, r1
 800219a:	0011      	movs	r1, r2
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	240a      	movs	r4, #10
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	1c02      	adds	r2, r0, #0
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	2009      	movs	r0, #9
 80021a8:	183b      	adds	r3, r7, r0
 80021aa:	1c0a      	adds	r2, r1, #0
 80021ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	6a3a      	ldr	r2, [r7, #32]
 80021b6:	0d51      	lsrs	r1, r2, #21
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	00d2      	lsls	r2, r2, #3
 80021bc:	400a      	ands	r2, r1
 80021be:	490e      	ldr	r1, [pc, #56]	; (80021f8 <I2C_TransferConfig+0x68>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	43d2      	mvns	r2, r2
 80021c4:	401a      	ands	r2, r3
 80021c6:	0011      	movs	r1, r2
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	059b      	lsls	r3, r3, #22
 80021ce:	0d9a      	lsrs	r2, r3, #22
 80021d0:	183b      	adds	r3, r7, r0
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	0418      	lsls	r0, r3, #16
 80021d6:	23ff      	movs	r3, #255	; 0xff
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	4003      	ands	r3, r0
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b005      	add	sp, #20
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	03ff63ff 	.word	0x03ff63ff

080021fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2241      	movs	r2, #65	; 0x41
 800220a:	5c9b      	ldrb	r3, [r3, r2]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b20      	cmp	r3, #32
 8002210:	d138      	bne.n	8002284 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2240      	movs	r2, #64	; 0x40
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800221c:	2302      	movs	r3, #2
 800221e:	e032      	b.n	8002286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	2101      	movs	r1, #1
 8002226:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2241      	movs	r2, #65	; 0x41
 800222c:	2124      	movs	r1, #36	; 0x24
 800222e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4911      	ldr	r1, [pc, #68]	; (8002290 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800224c:	400a      	ands	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2241      	movs	r2, #65	; 0x41
 8002274:	2120      	movs	r1, #32
 8002276:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	2100      	movs	r1, #0
 800227e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	ffffefff 	.word	0xffffefff

08002294 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2241      	movs	r2, #65	; 0x41
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d139      	bne.n	800231e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2240      	movs	r2, #64	; 0x40
 80022ae:	5c9b      	ldrb	r3, [r3, r2]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e033      	b.n	8002320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2241      	movs	r2, #65	; 0x41
 80022c4:	2124      	movs	r1, #36	; 0x24
 80022c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2101      	movs	r1, #1
 80022d4:	438a      	bics	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2241      	movs	r2, #65	; 0x41
 800230e:	2120      	movs	r1, #32
 8002310:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}
 8002328:	fffff0ff 	.word	0xfffff0ff

0800232c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f000 fb6c 	bl	8002a18 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002340:	4bc8      	ldr	r3, [pc, #800]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	220c      	movs	r2, #12
 8002346:	4013      	ands	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234a:	4bc6      	ldr	r3, [pc, #792]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	025b      	lsls	r3, r3, #9
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d100      	bne.n	8002362 <HAL_RCC_OscConfig+0x36>
 8002360:	e07d      	b.n	800245e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d007      	beq.n	8002378 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x68>
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	025b      	lsls	r3, r3, #9
 8002374:	429a      	cmp	r2, r3
 8002376:	d10d      	bne.n	8002394 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	4bba      	ldr	r3, [pc, #744]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	029b      	lsls	r3, r3, #10
 8002380:	4013      	ands	r3, r2
 8002382:	d100      	bne.n	8002386 <HAL_RCC_OscConfig+0x5a>
 8002384:	e06a      	b.n	800245c <HAL_RCC_OscConfig+0x130>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d166      	bne.n	800245c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f000 fb42 	bl	8002a18 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	025b      	lsls	r3, r3, #9
 800239c:	429a      	cmp	r2, r3
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x84>
 80023a0:	4bb0      	ldr	r3, [pc, #704]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4baf      	ldr	r3, [pc, #700]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0249      	lsls	r1, r1, #9
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e027      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	23a0      	movs	r3, #160	; 0xa0
 80023b6:	02db      	lsls	r3, r3, #11
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d10e      	bne.n	80023da <HAL_RCC_OscConfig+0xae>
 80023bc:	4ba9      	ldr	r3, [pc, #676]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4ba8      	ldr	r3, [pc, #672]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	02c9      	lsls	r1, r1, #11
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	4ba6      	ldr	r3, [pc, #664]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4ba5      	ldr	r3, [pc, #660]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	0249      	lsls	r1, r1, #9
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e012      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023da:	4ba2      	ldr	r3, [pc, #648]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4ba1      	ldr	r3, [pc, #644]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023e0:	49a1      	ldr	r1, [pc, #644]	; (8002668 <HAL_RCC_OscConfig+0x33c>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	4b9f      	ldr	r3, [pc, #636]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	025b      	lsls	r3, r3, #9
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4b9b      	ldr	r3, [pc, #620]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b9a      	ldr	r3, [pc, #616]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80023fa:	499c      	ldr	r1, [pc, #624]	; (800266c <HAL_RCC_OscConfig+0x340>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d014      	beq.n	8002432 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe ffe4 	bl	80013d4 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002412:	f7fe ffdf 	bl	80013d4 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e2f9      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002424:	4b8f      	ldr	r3, [pc, #572]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	029b      	lsls	r3, r3, #10
 800242c:	4013      	ands	r3, r2
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0xe6>
 8002430:	e015      	b.n	800245e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe ffcf 	bl	80013d4 <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe ffca 	bl	80013d4 <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e2e4      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244e:	4b85      	ldr	r3, [pc, #532]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	029b      	lsls	r3, r3, #10
 8002456:	4013      	ands	r3, r2
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x110>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d100      	bne.n	800246a <HAL_RCC_OscConfig+0x13e>
 8002468:	e099      	b.n	800259e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	2220      	movs	r2, #32
 8002474:	4013      	ands	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002478:	4b7a      	ldr	r3, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b79      	ldr	r3, [pc, #484]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800247e:	2120      	movs	r1, #32
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	2220      	movs	r2, #32
 8002488:	4393      	bics	r3, r2
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d13e      	bne.n	8002516 <HAL_RCC_OscConfig+0x1ea>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d13b      	bne.n	8002516 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800249e:	4b71      	ldr	r3, [pc, #452]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_RCC_OscConfig+0x186>
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e2b2      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b6c      	ldr	r3, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x344>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	021a      	lsls	r2, r3, #8
 80024c2:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2209      	movs	r2, #9
 80024ce:	4393      	bics	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024da:	f000 fbeb 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80024de:	0001      	movs	r1, r0
 80024e0:	4b60      	ldr	r3, [pc, #384]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	220f      	movs	r2, #15
 80024e8:	4013      	ands	r3, r2
 80024ea:	4a62      	ldr	r2, [pc, #392]	; (8002674 <HAL_RCC_OscConfig+0x348>)
 80024ec:	5cd3      	ldrb	r3, [r2, r3]
 80024ee:	000a      	movs	r2, r1
 80024f0:	40da      	lsrs	r2, r3
 80024f2:	4b61      	ldr	r3, [pc, #388]	; (8002678 <HAL_RCC_OscConfig+0x34c>)
 80024f4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80024f6:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x350>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2513      	movs	r5, #19
 80024fc:	197c      	adds	r4, r7, r5
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fe ff22 	bl	8001348 <HAL_InitTick>
 8002504:	0003      	movs	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002508:	197b      	adds	r3, r7, r5
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d046      	beq.n	800259e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002510:	197b      	adds	r3, r7, r5
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	e280      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d027      	beq.n	800256c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800251c:	4b51      	ldr	r3, [pc, #324]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2209      	movs	r2, #9
 8002522:	4393      	bics	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe ff51 	bl	80013d4 <HAL_GetTick>
 8002532:	0003      	movs	r3, r0
 8002534:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe ff4c 	bl	80013d4 <HAL_GetTick>
 800253c:	0002      	movs	r2, r0
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e266      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254a:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2204      	movs	r2, #4
 8002550:	4013      	ands	r3, r2
 8002552:	d0f1      	beq.n	8002538 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a45      	ldr	r2, [pc, #276]	; (8002670 <HAL_RCC_OscConfig+0x344>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	021a      	lsls	r2, r3, #8
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256c:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002572:	2101      	movs	r1, #1
 8002574:	438a      	bics	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe ff2c 	bl	80013d4 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002582:	f7fe ff27 	bl	80013d4 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e241      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002594:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2204      	movs	r2, #4
 800259a:	4013      	ands	r3, r2
 800259c:	d1f1      	bne.n	8002582 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2210      	movs	r2, #16
 80025a4:	4013      	ands	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x27e>
 80025a8:	e0a1      	b.n	80026ee <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d140      	bne.n	8002632 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025b0:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_OscConfig+0x29c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e227      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <HAL_RCC_OscConfig+0x354>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1a      	ldr	r2, [r3, #32]
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	0a19      	lsrs	r1, r3, #8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	061a      	lsls	r2, r3, #24
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	0b5b      	lsrs	r3, r3, #13
 80025f6:	3301      	adds	r3, #1
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0212      	lsls	r2, r2, #8
 80025fc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	210f      	movs	r1, #15
 8002606:	400b      	ands	r3, r1
 8002608:	491a      	ldr	r1, [pc, #104]	; (8002674 <HAL_RCC_OscConfig+0x348>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_RCC_OscConfig+0x34c>)
 8002610:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_OscConfig+0x350>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2513      	movs	r5, #19
 8002618:	197c      	adds	r4, r7, r5
 800261a:	0018      	movs	r0, r3
 800261c:	f7fe fe94 	bl	8001348 <HAL_InitTick>
 8002620:	0003      	movs	r3, r0
 8002622:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002624:	197b      	adds	r3, r7, r5
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d060      	beq.n	80026ee <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800262c:	197b      	adds	r3, r7, r5
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	e1f2      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03f      	beq.n	80026ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x338>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0049      	lsls	r1, r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fec4 	bl	80013d4 <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002652:	f7fe febf 	bl	80013d4 <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d911      	bls.n	8002684 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1d9      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
 8002664:	40021000 	.word	0x40021000
 8002668:	fffeffff 	.word	0xfffeffff
 800266c:	fffbffff 	.word	0xfffbffff
 8002670:	ffffe0ff 	.word	0xffffe0ff
 8002674:	08004414 	.word	0x08004414
 8002678:	20000004 	.word	0x20000004
 800267c:	20000008 	.word	0x20000008
 8002680:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002684:	4bc9      	ldr	r3, [pc, #804]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d0e0      	beq.n	8002652 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002690:	4bc6      	ldr	r3, [pc, #792]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4ac6      	ldr	r2, [pc, #792]	; (80029b0 <HAL_RCC_OscConfig+0x684>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	4bc3      	ldr	r3, [pc, #780]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a4:	4bc1      	ldr	r3, [pc, #772]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	0a19      	lsrs	r1, r3, #8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	061a      	lsls	r2, r3, #24
 80026b2:	4bbe      	ldr	r3, [pc, #760]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	e019      	b.n	80026ee <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ba:	4bbc      	ldr	r3, [pc, #752]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4bbb      	ldr	r3, [pc, #748]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80026c0:	49bc      	ldr	r1, [pc, #752]	; (80029b4 <HAL_RCC_OscConfig+0x688>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fe85 	bl	80013d4 <HAL_GetTick>
 80026ca:	0003      	movs	r3, r0
 80026cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d0:	f7fe fe80 	bl	80013d4 <HAL_GetTick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e19a      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026e2:	4bb2      	ldr	r3, [pc, #712]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4013      	ands	r3, r2
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2208      	movs	r2, #8
 80026f4:	4013      	ands	r3, r2
 80026f6:	d036      	beq.n	8002766 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d019      	beq.n	8002734 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002700:	4baa      	ldr	r3, [pc, #680]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002704:	4ba9      	ldr	r3, [pc, #676]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002706:	2101      	movs	r1, #1
 8002708:	430a      	orrs	r2, r1
 800270a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7fe fe62 	bl	80013d4 <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fe5d 	bl	80013d4 <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e177      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002728:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800272a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d0f1      	beq.n	8002716 <HAL_RCC_OscConfig+0x3ea>
 8002732:	e018      	b.n	8002766 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002734:	4b9d      	ldr	r3, [pc, #628]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002738:	4b9c      	ldr	r3, [pc, #624]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800273a:	2101      	movs	r1, #1
 800273c:	438a      	bics	r2, r1
 800273e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fe48 	bl	80013d4 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fe43 	bl	80013d4 <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e15d      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800275c:	4b93      	ldr	r3, [pc, #588]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800275e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002760:	2202      	movs	r2, #2
 8002762:	4013      	ands	r3, r2
 8002764:	d1f1      	bne.n	800274a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2204      	movs	r2, #4
 800276c:	4013      	ands	r3, r2
 800276e:	d100      	bne.n	8002772 <HAL_RCC_OscConfig+0x446>
 8002770:	e0ae      	b.n	80028d0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2023      	movs	r0, #35	; 0x23
 8002774:	183b      	adds	r3, r7, r0
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b8c      	ldr	r3, [pc, #560]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800277c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	055b      	lsls	r3, r3, #21
 8002782:	4013      	ands	r3, r2
 8002784:	d109      	bne.n	800279a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278a:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	0549      	lsls	r1, r1, #21
 8002790:	430a      	orrs	r2, r1
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002794:	183b      	adds	r3, r7, r0
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b87      	ldr	r3, [pc, #540]	; (80029b8 <HAL_RCC_OscConfig+0x68c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d11a      	bne.n	80027dc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b84      	ldr	r3, [pc, #528]	; (80029b8 <HAL_RCC_OscConfig+0x68c>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b83      	ldr	r3, [pc, #524]	; (80029b8 <HAL_RCC_OscConfig+0x68c>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0049      	lsls	r1, r1, #1
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fe0e 	bl	80013d4 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe fe09 	bl	80013d4 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e123      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b79      	ldr	r3, [pc, #484]	; (80029b8 <HAL_RCC_OscConfig+0x68c>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4cc>
 80027e8:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80027ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ec:	4b6f      	ldr	r3, [pc, #444]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	0049      	lsls	r1, r1, #1
 80027f2:	430a      	orrs	r2, r1
 80027f4:	651a      	str	r2, [r3, #80]	; 0x50
 80027f6:	e031      	b.n	800285c <HAL_RCC_OscConfig+0x530>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x4ee>
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002804:	4b69      	ldr	r3, [pc, #420]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002806:	496b      	ldr	r1, [pc, #428]	; (80029b4 <HAL_RCC_OscConfig+0x688>)
 8002808:	400a      	ands	r2, r1
 800280a:	651a      	str	r2, [r3, #80]	; 0x50
 800280c:	4b67      	ldr	r3, [pc, #412]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800280e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002812:	496a      	ldr	r1, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x690>)
 8002814:	400a      	ands	r2, r1
 8002816:	651a      	str	r2, [r3, #80]	; 0x50
 8002818:	e020      	b.n	800285c <HAL_RCC_OscConfig+0x530>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	23a0      	movs	r3, #160	; 0xa0
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	429a      	cmp	r2, r3
 8002824:	d10e      	bne.n	8002844 <HAL_RCC_OscConfig+0x518>
 8002826:	4b61      	ldr	r3, [pc, #388]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800282a:	4b60      	ldr	r3, [pc, #384]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	00c9      	lsls	r1, r1, #3
 8002830:	430a      	orrs	r2, r1
 8002832:	651a      	str	r2, [r3, #80]	; 0x50
 8002834:	4b5d      	ldr	r3, [pc, #372]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002838:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	0049      	lsls	r1, r1, #1
 800283e:	430a      	orrs	r2, r1
 8002840:	651a      	str	r2, [r3, #80]	; 0x50
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0x530>
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002848:	4b58      	ldr	r3, [pc, #352]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800284a:	495a      	ldr	r1, [pc, #360]	; (80029b4 <HAL_RCC_OscConfig+0x688>)
 800284c:	400a      	ands	r2, r1
 800284e:	651a      	str	r2, [r3, #80]	; 0x50
 8002850:	4b56      	ldr	r3, [pc, #344]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002856:	4959      	ldr	r1, [pc, #356]	; (80029bc <HAL_RCC_OscConfig+0x690>)
 8002858:	400a      	ands	r2, r1
 800285a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fdb6 	bl	80013d4 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800286c:	e009      	b.n	8002882 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fdb1 	bl	80013d4 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <HAL_RCC_OscConfig+0x694>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0ca      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4013      	ands	r3, r2
 800288c:	d0ef      	beq.n	800286e <HAL_RCC_OscConfig+0x542>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe fda0 	bl	80013d4 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002898:	e009      	b.n	80028ae <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fd9b 	bl	80013d4 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <HAL_RCC_OscConfig+0x694>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b4      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80028b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4013      	ands	r3, r2
 80028b8:	d1ef      	bne.n	800289a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ba:	2323      	movs	r3, #35	; 0x23
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80028c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80028ca:	493e      	ldr	r1, [pc, #248]	; (80029c4 <HAL_RCC_OscConfig+0x698>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d100      	bne.n	80028da <HAL_RCC_OscConfig+0x5ae>
 80028d8:	e09d      	b.n	8002a16 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b0c      	cmp	r3, #12
 80028de:	d100      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5b6>
 80028e0:	e076      	b.n	80029d0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d145      	bne.n	8002976 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80028f0:	4935      	ldr	r1, [pc, #212]	; (80029c8 <HAL_RCC_OscConfig+0x69c>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe fd6d 	bl	80013d4 <HAL_GetTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fd68 	bl	80013d4 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e082      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	049b      	lsls	r3, r3, #18
 800291a:	4013      	ands	r3, r2
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291e:	4b23      	ldr	r3, [pc, #140]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <HAL_RCC_OscConfig+0x6a0>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	431a      	orrs	r2, r3
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800293a:	430a      	orrs	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0449      	lsls	r1, r1, #17
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fd42 	bl	80013d4 <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002956:	f7fe fd3d 	bl	80013d4 <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e057      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	049b      	lsls	r3, r3, #18
 8002970:	4013      	ands	r3, r2
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x62a>
 8002974:	e04f      	b.n	8002a16 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 800297c:	4912      	ldr	r1, [pc, #72]	; (80029c8 <HAL_RCC_OscConfig+0x69c>)
 800297e:	400a      	ands	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fd27 	bl	80013d4 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe fd22 	bl	80013d4 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e03c      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800299e:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_OscConfig+0x680>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	049b      	lsls	r3, r3, #18
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x660>
 80029aa:	e034      	b.n	8002a16 <HAL_RCC_OscConfig+0x6ea>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	ffff1fff 	.word	0xffff1fff
 80029b4:	fffffeff 	.word	0xfffffeff
 80029b8:	40007000 	.word	0x40007000
 80029bc:	fffffbff 	.word	0xfffffbff
 80029c0:	00001388 	.word	0x00001388
 80029c4:	efffffff 	.word	0xefffffff
 80029c8:	feffffff 	.word	0xfeffffff
 80029cc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_RCC_OscConfig+0x6f4>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	025b      	lsls	r3, r3, #9
 80029e8:	401a      	ands	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d10f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	23f0      	movs	r3, #240	; 0xf0
 80029f6:	039b      	lsls	r3, r3, #14
 80029f8:	401a      	ands	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	23c0      	movs	r3, #192	; 0xc0
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	401a      	ands	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b00a      	add	sp, #40	; 0x28
 8002a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b5b0      	push	{r4, r5, r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e128      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b96      	ldr	r3, [pc, #600]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d91e      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b93      	ldr	r3, [pc, #588]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	4b90      	ldr	r3, [pc, #576]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fcbc 	bl	80013d4 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a60:	e009      	b.n	8002a76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a62:	f7fe fcb7 	bl	80013d4 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	4a8a      	ldr	r2, [pc, #552]	; (8002c98 <HAL_RCC_ClockConfig+0x274>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e109      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b87      	ldr	r3, [pc, #540]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1ee      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8e:	4b83      	ldr	r3, [pc, #524]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	22f0      	movs	r2, #240	; 0xf0
 8002a94:	4393      	bics	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d100      	bne.n	8002aae <HAL_RCC_ClockConfig+0x8a>
 8002aac:	e089      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ab6:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d120      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0e1      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ace:	4b73      	ldr	r3, [pc, #460]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	049b      	lsls	r3, r3, #18
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d114      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0d5      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d106      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	4013      	ands	r3, r2
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0ca      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002af4:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0c2      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b04:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fc5c 	bl	80013d4 <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d111      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b28:	e009      	b.n	8002b3e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2a:	f7fe fc53 	bl	80013d4 <HAL_GetTick>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_RCC_ClockConfig+0x274>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0a5      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	220c      	movs	r2, #12
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d1ef      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x106>
 8002b4a:	e03a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d111      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b56:	f7fe fc3d 	bl	80013d4 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	4a4d      	ldr	r2, [pc, #308]	; (8002c98 <HAL_RCC_ClockConfig+0x274>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e08f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	220c      	movs	r2, #12
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d1ef      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x132>
 8002b76:	e024      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b80:	e009      	b.n	8002b96 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b82:	f7fe fc27 	bl	80013d4 <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_RCC_ClockConfig+0x274>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e079      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d1ef      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x15e>
 8002ba2:	e00e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe fc16 	bl	80013d4 <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <HAL_RCC_ClockConfig+0x274>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e068      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bb8:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d21e      	bcs.n	8002c0e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002be2:	f7fe fbf7 	bl	80013d4 <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	e009      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe fbf2 	bl	80013d4 <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <HAL_RCC_ClockConfig+0x274>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e044      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_ClockConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	4013      	ands	r3, r2
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d1ee      	bne.n	8002bec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x27c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	4013      	ands	r3, r2
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_RCC_ClockConfig+0x280>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	00da      	lsls	r2, r3, #3
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4c:	f000 f832 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c50:	0001      	movs	r1, r0
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x278>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	220f      	movs	r2, #15
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_RCC_ClockConfig+0x284>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	000a      	movs	r2, r1
 8002c62:	40da      	lsrs	r2, r3
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_ClockConfig+0x288>)
 8002c66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_RCC_ClockConfig+0x28c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	250b      	movs	r5, #11
 8002c6e:	197c      	adds	r4, r7, r5
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7fe fb69 	bl	8001348 <HAL_InitTick>
 8002c76:	0003      	movs	r3, r0
 8002c78:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002c7a:	197b      	adds	r3, r7, r5
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002c82:	197b      	adds	r3, r7, r5
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bdb0      	pop	{r4, r5, r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40022000 	.word	0x40022000
 8002c98:	00001388 	.word	0x00001388
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	fffff8ff 	.word	0xfffff8ff
 8002ca4:	ffffc7ff 	.word	0xffffc7ff
 8002ca8:	08004414 	.word	0x08004414
 8002cac:	20000004 	.word	0x20000004
 8002cb0:	20000008 	.word	0x20000008

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b5b0      	push	{r4, r5, r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002cba:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <HAL_RCC_GetSysClockFreq+0x138>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc2:	230c      	movs	r3, #12
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d014      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cca:	d900      	bls.n	8002cce <HAL_RCC_GetSysClockFreq+0x1a>
 8002ccc:	e07b      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x112>
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x24>
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d00b      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002cd6:	e076      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cd8:	4b44      	ldr	r3, [pc, #272]	; (8002dec <HAL_RCC_GetSysClockFreq+0x138>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ce6:	e07c      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ce8:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cec:	e079      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cf2:	e076      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	0c9a      	lsrs	r2, r3, #18
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x148>)
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	0d9a      	lsrs	r2, r3, #22
 8002d06:	2303      	movs	r3, #3
 8002d08:	4013      	ands	r3, r2
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_GetSysClockFreq+0x138>)
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	025b      	lsls	r3, r3, #9
 8002d16:	4013      	ands	r3, r2
 8002d18:	d01a      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	4a35      	ldr	r2, [pc, #212]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002d24:	2300      	movs	r3, #0
 8002d26:	69b8      	ldr	r0, [r7, #24]
 8002d28:	69f9      	ldr	r1, [r7, #28]
 8002d2a:	f7fd fb8d 	bl	8000448 <__aeabi_lmul>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	000b      	movs	r3, r1
 8002d32:	0010      	movs	r0, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f7fd fb61 	bl	8000408 <__aeabi_uldivmod>
 8002d46:	0002      	movs	r2, r0
 8002d48:	000b      	movs	r3, r1
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4e:	e037      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d50:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_RCC_GetSysClockFreq+0x138>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	4013      	ands	r3, r2
 8002d58:	d01a      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d64:	2300      	movs	r3, #0
 8002d66:	68b8      	ldr	r0, [r7, #8]
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	f7fd fb6d 	bl	8000448 <__aeabi_lmul>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	000b      	movs	r3, r1
 8002d72:	0010      	movs	r0, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f7fd fb41 	bl	8000408 <__aeabi_uldivmod>
 8002d86:	0002      	movs	r2, r0
 8002d88:	000b      	movs	r3, r1
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8e:	e017      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	0018      	movs	r0, r3
 8002d94:	2300      	movs	r3, #0
 8002d96:	0019      	movs	r1, r3
 8002d98:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f7fd fb54 	bl	8000448 <__aeabi_lmul>
 8002da0:	0002      	movs	r2, r0
 8002da2:	000b      	movs	r3, r1
 8002da4:	0010      	movs	r0, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	001c      	movs	r4, r3
 8002dac:	2300      	movs	r3, #0
 8002dae:	001d      	movs	r5, r3
 8002db0:	0022      	movs	r2, r4
 8002db2:	002b      	movs	r3, r5
 8002db4:	f7fd fb28 	bl	8000408 <__aeabi_uldivmod>
 8002db8:	0002      	movs	r2, r0
 8002dba:	000b      	movs	r3, r1
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dc4:	e00d      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_GetSysClockFreq+0x138>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	0b5b      	lsrs	r3, r3, #13
 8002dcc:	2207      	movs	r2, #7
 8002dce:	4013      	ands	r3, r2
 8002dd0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	0212      	lsls	r2, r2, #8
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002de0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b00e      	add	sp, #56	; 0x38
 8002dea:	bdb0      	pop	{r4, r5, r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	003d0900 	.word	0x003d0900
 8002df4:	00f42400 	.word	0x00f42400
 8002df8:	007a1200 	.word	0x007a1200
 8002dfc:	0800442c 	.word	0x0800442c

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	20000004 	.word	0x20000004

08002e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e18:	f7ff fff2 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e1c:	0001      	movs	r1, r0
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	2207      	movs	r2, #7
 8002e26:	4013      	ands	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	40d9      	lsrs	r1, r3
 8002e2e:	000b      	movs	r3, r1
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08004424 	.word	0x08004424

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffdc 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e48:	0001      	movs	r1, r0
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	0adb      	lsrs	r3, r3, #11
 8002e50:	2207      	movs	r2, #7
 8002e52:	4013      	ands	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	40d9      	lsrs	r1, r3
 8002e5a:	000b      	movs	r3, r1
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08004424 	.word	0x08004424

08002e6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002e74:	2017      	movs	r0, #23
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2220      	movs	r2, #32
 8002e82:	4013      	ands	r3, r2
 8002e84:	d100      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002e86:	e0c2      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	055b      	lsls	r3, r3, #21
 8002e90:	4013      	ands	r3, r2
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e98:	4b7d      	ldr	r3, [pc, #500]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	0549      	lsls	r1, r1, #21
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ea2:	183b      	adds	r3, r7, r0
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d11a      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb4:	4b77      	ldr	r3, [pc, #476]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0049      	lsls	r1, r1, #1
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fa87 	bl	80013d4 <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	e008      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fe fa82 	bl	80013d4 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0d4      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002eea:	4b69      	ldr	r3, [pc, #420]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	23c0      	movs	r3, #192	; 0xc0
 8002ef0:	039b      	lsls	r3, r3, #14
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	23c0      	movs	r3, #192	; 0xc0
 8002efc:	039b      	lsls	r3, r3, #14
 8002efe:	4013      	ands	r3, r2
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d013      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	23c0      	movs	r3, #192	; 0xc0
 8002f0c:	029b      	lsls	r3, r3, #10
 8002f0e:	401a      	ands	r2, r3
 8002f10:	23c0      	movs	r3, #192	; 0xc0
 8002f12:	029b      	lsls	r3, r3, #10
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10a      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002f18:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	029b      	lsls	r3, r3, #10
 8002f20:	401a      	ands	r2, r3
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	029b      	lsls	r3, r3, #10
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d101      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0ac      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002f2e:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f32:	23c0      	movs	r3, #192	; 0xc0
 8002f34:	029b      	lsls	r3, r3, #10
 8002f36:	4013      	ands	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d03b      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	23c0      	movs	r3, #192	; 0xc0
 8002f46:	029b      	lsls	r3, r3, #10
 8002f48:	4013      	ands	r3, r2
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d033      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2220      	movs	r2, #32
 8002f56:	4013      	ands	r3, r2
 8002f58:	d02e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f5a:	4b4d      	ldr	r3, [pc, #308]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5e:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f64:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f68:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	0309      	lsls	r1, r1, #12
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f76:	4b46      	ldr	r3, [pc, #280]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f78:	4948      	ldr	r1, [pc, #288]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d014      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fa21 	bl	80013d4 <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f96:	e009      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fa1c 	bl	80013d4 <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	4a3f      	ldr	r2, [pc, #252]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e06d      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	23c0      	movs	r3, #192	; 0xc0
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	23c0      	movs	r3, #192	; 0xc0
 8002fc4:	029b      	lsls	r3, r3, #10
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a35      	ldr	r2, [pc, #212]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	23c0      	movs	r3, #192	; 0xc0
 8002fda:	039b      	lsls	r3, r3, #14
 8002fdc:	401a      	ands	r2, r3
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fe6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	23c0      	movs	r3, #192	; 0xc0
 8002fee:	029b      	lsls	r3, r3, #10
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ff8:	2317      	movs	r3, #23
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003008:	4927      	ldr	r1, [pc, #156]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800300a:	400a      	ands	r2, r1
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	220c      	movs	r2, #12
 800301e:	4393      	bics	r3, r2
 8003020:	0019      	movs	r1, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003028:	430a      	orrs	r2, r1
 800302a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2204      	movs	r2, #4
 8003032:	4013      	ands	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303c:	4013      	ands	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003046:	430a      	orrs	r2, r1
 8003048:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2208      	movs	r2, #8
 8003050:	4013      	ands	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003064:	430a      	orrs	r2, r1
 8003066:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	4013      	ands	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003082:	430a      	orrs	r2, r1
 8003084:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b006      	add	sp, #24
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	fffcffff 	.word	0xfffcffff
 800309c:	fff7ffff 	.word	0xfff7ffff
 80030a0:	00001388 	.word	0x00001388
 80030a4:	ffcfffff 	.word	0xffcfffff
 80030a8:	efffffff 	.word	0xefffffff
 80030ac:	fffff3ff 	.word	0xfffff3ff
 80030b0:	ffffcfff 	.word	0xffffcfff
 80030b4:	fff3ffff 	.word	0xfff3ffff

080030b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e044      	b.n	8003154 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d107      	bne.n	80030e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2274      	movs	r2, #116	; 0x74
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0018      	movs	r0, r3
 80030de:	f7fe f815 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2224      	movs	r2, #36	; 0x24
 80030e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2101      	movs	r1, #1
 80030f4:	438a      	bics	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f8d8 	bl	80032b0 <UART_SetConfig>
 8003100:	0003      	movs	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e024      	b.n	8003154 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0018      	movs	r0, r3
 8003116:	f000 fb2d 	bl	8003774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	490d      	ldr	r1, [pc, #52]	; (800315c <HAL_UART_Init+0xa4>)
 8003126:	400a      	ands	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	212a      	movs	r1, #42	; 0x2a
 8003136:	438a      	bics	r2, r1
 8003138:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 fbc5 	bl	80038dc <UART_CheckIdleState>
 8003152:	0003      	movs	r3, r0
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}
 800315c:	ffffb7ff 	.word	0xffffb7ff

08003160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	1dbb      	adds	r3, r7, #6
 800316e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003174:	2b20      	cmp	r3, #32
 8003176:	d000      	beq.n	800317a <HAL_UART_Transmit+0x1a>
 8003178:	e095      	b.n	80032a6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_UART_Transmit+0x28>
 8003180:	1dbb      	adds	r3, r7, #6
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e08d      	b.n	80032a8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	429a      	cmp	r2, r3
 8003196:	d109      	bne.n	80031ac <HAL_UART_Transmit+0x4c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	d001      	beq.n	80031ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e07d      	b.n	80032a8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2274      	movs	r2, #116	; 0x74
 80031b0:	5c9b      	ldrb	r3, [r3, r2]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Transmit+0x5a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e076      	b.n	80032a8 <HAL_UART_Transmit+0x148>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2274      	movs	r2, #116	; 0x74
 80031be:	2101      	movs	r1, #1
 80031c0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	2100      	movs	r1, #0
 80031c8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2221      	movs	r2, #33	; 0x21
 80031ce:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031d0:	f7fe f900 	bl	80013d4 <HAL_GetTick>
 80031d4:	0003      	movs	r3, r0
 80031d6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1dba      	adds	r2, r7, #6
 80031dc:	2150      	movs	r1, #80	; 0x50
 80031de:	8812      	ldrh	r2, [r2, #0]
 80031e0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1dba      	adds	r2, r7, #6
 80031e6:	2152      	movs	r1, #82	; 0x52
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	015b      	lsls	r3, r3, #5
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d108      	bne.n	800320a <HAL_UART_Transmit+0xaa>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e003      	b.n	8003212 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2274      	movs	r2, #116	; 0x74
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800321a:	e02c      	b.n	8003276 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	0013      	movs	r3, r2
 8003226:	2200      	movs	r2, #0
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	f000 fb9f 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d001      	beq.n	8003236 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e038      	b.n	80032a8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	001a      	movs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	05d2      	lsls	r2, r2, #23
 8003248:	0dd2      	lsrs	r2, r2, #23
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	3302      	adds	r3, #2
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e007      	b.n	8003264 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2252      	movs	r2, #82	; 0x52
 8003268:	5a9b      	ldrh	r3, [r3, r2]
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b299      	uxth	r1, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2252      	movs	r2, #82	; 0x52
 8003274:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2252      	movs	r2, #82	; 0x52
 800327a:	5a9b      	ldrh	r3, [r3, r2]
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1cc      	bne.n	800321c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	0013      	movs	r3, r2
 800328c:	2200      	movs	r2, #0
 800328e:	2140      	movs	r1, #64	; 0x40
 8003290:	f000 fb6c 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e005      	b.n	80032a8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
  }
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b008      	add	sp, #32
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032b8:	231a      	movs	r3, #26
 80032ba:	2218      	movs	r2, #24
 80032bc:	4694      	mov	ip, r2
 80032be:	44bc      	add	ip, r7
 80032c0:	4463      	add	r3, ip
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4313      	orrs	r3, r2
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4abc      	ldr	r2, [pc, #752]	; (80035d8 <UART_SetConfig+0x328>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4ab8      	ldr	r2, [pc, #736]	; (80035dc <UART_SetConfig+0x32c>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4ab2      	ldr	r2, [pc, #712]	; (80035e0 <UART_SetConfig+0x330>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003322:	4313      	orrs	r3, r2
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4aad      	ldr	r2, [pc, #692]	; (80035e4 <UART_SetConfig+0x334>)
 800332e:	4013      	ands	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4aa9      	ldr	r2, [pc, #676]	; (80035e8 <UART_SetConfig+0x338>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d136      	bne.n	80033b4 <UART_SetConfig+0x104>
 8003346:	4ba9      	ldr	r3, [pc, #676]	; (80035ec <UART_SetConfig+0x33c>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	220c      	movs	r2, #12
 800334c:	4013      	ands	r3, r2
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d020      	beq.n	8003394 <UART_SetConfig+0xe4>
 8003352:	d827      	bhi.n	80033a4 <UART_SetConfig+0xf4>
 8003354:	2b08      	cmp	r3, #8
 8003356:	d00d      	beq.n	8003374 <UART_SetConfig+0xc4>
 8003358:	d824      	bhi.n	80033a4 <UART_SetConfig+0xf4>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <UART_SetConfig+0xb4>
 800335e:	2b04      	cmp	r3, #4
 8003360:	d010      	beq.n	8003384 <UART_SetConfig+0xd4>
 8003362:	e01f      	b.n	80033a4 <UART_SetConfig+0xf4>
 8003364:	231b      	movs	r3, #27
 8003366:	2218      	movs	r2, #24
 8003368:	4694      	mov	ip, r2
 800336a:	44bc      	add	ip, r7
 800336c:	4463      	add	r3, ip
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e06f      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003374:	231b      	movs	r3, #27
 8003376:	2218      	movs	r2, #24
 8003378:	4694      	mov	ip, r2
 800337a:	44bc      	add	ip, r7
 800337c:	4463      	add	r3, ip
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e067      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003384:	231b      	movs	r3, #27
 8003386:	2218      	movs	r2, #24
 8003388:	4694      	mov	ip, r2
 800338a:	44bc      	add	ip, r7
 800338c:	4463      	add	r3, ip
 800338e:	2204      	movs	r2, #4
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e05f      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003394:	231b      	movs	r3, #27
 8003396:	2218      	movs	r2, #24
 8003398:	4694      	mov	ip, r2
 800339a:	44bc      	add	ip, r7
 800339c:	4463      	add	r3, ip
 800339e:	2208      	movs	r2, #8
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e057      	b.n	8003454 <UART_SetConfig+0x1a4>
 80033a4:	231b      	movs	r3, #27
 80033a6:	2218      	movs	r2, #24
 80033a8:	4694      	mov	ip, r2
 80033aa:	44bc      	add	ip, r7
 80033ac:	4463      	add	r3, ip
 80033ae:	2210      	movs	r2, #16
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e04f      	b.n	8003454 <UART_SetConfig+0x1a4>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a89      	ldr	r2, [pc, #548]	; (80035e0 <UART_SetConfig+0x330>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d143      	bne.n	8003446 <UART_SetConfig+0x196>
 80033be:	4b8b      	ldr	r3, [pc, #556]	; (80035ec <UART_SetConfig+0x33c>)
 80033c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c2:	23c0      	movs	r3, #192	; 0xc0
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4013      	ands	r3, r2
 80033c8:	22c0      	movs	r2, #192	; 0xc0
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02a      	beq.n	8003426 <UART_SetConfig+0x176>
 80033d0:	22c0      	movs	r2, #192	; 0xc0
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d82e      	bhi.n	8003436 <UART_SetConfig+0x186>
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	0112      	lsls	r2, r2, #4
 80033dc:	4293      	cmp	r3, r2
 80033de:	d012      	beq.n	8003406 <UART_SetConfig+0x156>
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d826      	bhi.n	8003436 <UART_SetConfig+0x186>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <UART_SetConfig+0x146>
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	00d2      	lsls	r2, r2, #3
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d010      	beq.n	8003416 <UART_SetConfig+0x166>
 80033f4:	e01f      	b.n	8003436 <UART_SetConfig+0x186>
 80033f6:	231b      	movs	r3, #27
 80033f8:	2218      	movs	r2, #24
 80033fa:	4694      	mov	ip, r2
 80033fc:	44bc      	add	ip, r7
 80033fe:	4463      	add	r3, ip
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e026      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003406:	231b      	movs	r3, #27
 8003408:	2218      	movs	r2, #24
 800340a:	4694      	mov	ip, r2
 800340c:	44bc      	add	ip, r7
 800340e:	4463      	add	r3, ip
 8003410:	2202      	movs	r2, #2
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e01e      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003416:	231b      	movs	r3, #27
 8003418:	2218      	movs	r2, #24
 800341a:	4694      	mov	ip, r2
 800341c:	44bc      	add	ip, r7
 800341e:	4463      	add	r3, ip
 8003420:	2204      	movs	r2, #4
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e016      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003426:	231b      	movs	r3, #27
 8003428:	2218      	movs	r2, #24
 800342a:	4694      	mov	ip, r2
 800342c:	44bc      	add	ip, r7
 800342e:	4463      	add	r3, ip
 8003430:	2208      	movs	r2, #8
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e00e      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003436:	231b      	movs	r3, #27
 8003438:	2218      	movs	r2, #24
 800343a:	4694      	mov	ip, r2
 800343c:	44bc      	add	ip, r7
 800343e:	4463      	add	r3, ip
 8003440:	2210      	movs	r2, #16
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e006      	b.n	8003454 <UART_SetConfig+0x1a4>
 8003446:	231b      	movs	r3, #27
 8003448:	2218      	movs	r2, #24
 800344a:	4694      	mov	ip, r2
 800344c:	44bc      	add	ip, r7
 800344e:	4463      	add	r3, ip
 8003450:	2210      	movs	r2, #16
 8003452:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <UART_SetConfig+0x330>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d000      	beq.n	8003460 <UART_SetConfig+0x1b0>
 800345e:	e088      	b.n	8003572 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003460:	231b      	movs	r3, #27
 8003462:	2218      	movs	r2, #24
 8003464:	4694      	mov	ip, r2
 8003466:	44bc      	add	ip, r7
 8003468:	4463      	add	r3, ip
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d01d      	beq.n	80034ac <UART_SetConfig+0x1fc>
 8003470:	dc20      	bgt.n	80034b4 <UART_SetConfig+0x204>
 8003472:	2b04      	cmp	r3, #4
 8003474:	d015      	beq.n	80034a2 <UART_SetConfig+0x1f2>
 8003476:	dc1d      	bgt.n	80034b4 <UART_SetConfig+0x204>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <UART_SetConfig+0x1d2>
 800347c:	2b02      	cmp	r3, #2
 800347e:	d005      	beq.n	800348c <UART_SetConfig+0x1dc>
 8003480:	e018      	b.n	80034b4 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003482:	f7ff fcc7 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 8003486:	0003      	movs	r3, r0
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800348a:	e01d      	b.n	80034c8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800348c:	4b57      	ldr	r3, [pc, #348]	; (80035ec <UART_SetConfig+0x33c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	4013      	ands	r3, r2
 8003494:	d002      	beq.n	800349c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003496:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <UART_SetConfig+0x340>)
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800349a:	e015      	b.n	80034c8 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800349c:	4b55      	ldr	r3, [pc, #340]	; (80035f4 <UART_SetConfig+0x344>)
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034a0:	e012      	b.n	80034c8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a2:	f7ff fc07 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80034a6:	0003      	movs	r3, r0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034aa:	e00d      	b.n	80034c8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034b2:	e009      	b.n	80034c8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034b8:	231a      	movs	r3, #26
 80034ba:	2218      	movs	r2, #24
 80034bc:	4694      	mov	ip, r2
 80034be:	44bc      	add	ip, r7
 80034c0:	4463      	add	r3, ip
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
        break;
 80034c6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d100      	bne.n	80034d0 <UART_SetConfig+0x220>
 80034ce:	e139      	b.n	8003744 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	0013      	movs	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	189b      	adds	r3, r3, r2
 80034da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d305      	bcc.n	80034ec <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d907      	bls.n	80034fc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80034ec:	231a      	movs	r3, #26
 80034ee:	2218      	movs	r2, #24
 80034f0:	4694      	mov	ip, r2
 80034f2:	44bc      	add	ip, r7
 80034f4:	4463      	add	r3, ip
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e123      	b.n	8003744 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	6939      	ldr	r1, [r7, #16]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	000b      	movs	r3, r1
 800350a:	0e1b      	lsrs	r3, r3, #24
 800350c:	0010      	movs	r0, r2
 800350e:	0205      	lsls	r5, r0, #8
 8003510:	431d      	orrs	r5, r3
 8003512:	000b      	movs	r3, r1
 8003514:	021c      	lsls	r4, r3, #8
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68b8      	ldr	r0, [r7, #8]
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	1900      	adds	r0, r0, r4
 8003528:	4169      	adcs	r1, r5
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f7fc ff66 	bl	8000408 <__aeabi_uldivmod>
 800353c:	0002      	movs	r2, r0
 800353e:	000b      	movs	r3, r1
 8003540:	0013      	movs	r3, r2
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003546:	23c0      	movs	r3, #192	; 0xc0
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	429a      	cmp	r2, r3
 800354c:	d309      	bcc.n	8003562 <UART_SetConfig+0x2b2>
 800354e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	035b      	lsls	r3, r3, #13
 8003554:	429a      	cmp	r2, r3
 8003556:	d204      	bcs.n	8003562 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e0f0      	b.n	8003744 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003562:	231a      	movs	r3, #26
 8003564:	2218      	movs	r2, #24
 8003566:	4694      	mov	ip, r2
 8003568:	44bc      	add	ip, r7
 800356a:	4463      	add	r3, ip
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e0e8      	b.n	8003744 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	429a      	cmp	r2, r3
 800357c:	d000      	beq.n	8003580 <UART_SetConfig+0x2d0>
 800357e:	e087      	b.n	8003690 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003580:	231b      	movs	r3, #27
 8003582:	2218      	movs	r2, #24
 8003584:	4694      	mov	ip, r2
 8003586:	44bc      	add	ip, r7
 8003588:	4463      	add	r3, ip
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d835      	bhi.n	80035fc <UART_SetConfig+0x34c>
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <UART_SetConfig+0x348>)
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800359a:	f7ff fc3b 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 800359e:	0003      	movs	r3, r0
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035a2:	e035      	b.n	8003610 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a4:	f7ff fc4c 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 80035a8:	0003      	movs	r3, r0
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035ac:	e030      	b.n	8003610 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <UART_SetConfig+0x33c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	4013      	ands	r3, r2
 80035b6:	d002      	beq.n	80035be <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <UART_SetConfig+0x340>)
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035bc:	e028      	b.n	8003610 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <UART_SetConfig+0x344>)
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035c2:	e025      	b.n	8003610 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c4:	f7ff fb76 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80035c8:	0003      	movs	r3, r0
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035cc:	e020      	b.n	8003610 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035d4:	e01c      	b.n	8003610 <UART_SetConfig+0x360>
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	efff69f3 	.word	0xefff69f3
 80035dc:	ffffcfff 	.word	0xffffcfff
 80035e0:	40004800 	.word	0x40004800
 80035e4:	fffff4ff 	.word	0xfffff4ff
 80035e8:	40004400 	.word	0x40004400
 80035ec:	40021000 	.word	0x40021000
 80035f0:	003d0900 	.word	0x003d0900
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	08004438 	.word	0x08004438
      default:
        pclk = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003600:	231a      	movs	r3, #26
 8003602:	2218      	movs	r2, #24
 8003604:	4694      	mov	ip, r2
 8003606:	44bc      	add	ip, r7
 8003608:	4463      	add	r3, ip
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
        break;
 800360e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d100      	bne.n	8003618 <UART_SetConfig+0x368>
 8003616:	e095      	b.n	8003744 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	18d2      	adds	r2, r2, r3
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	0019      	movs	r1, r3
 800362a:	0010      	movs	r0, r2
 800362c:	f7fc fd76 	bl	800011c <__udivsi3>
 8003630:	0003      	movs	r3, r0
 8003632:	b29b      	uxth	r3, r3
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	2b0f      	cmp	r3, #15
 800363a:	d921      	bls.n	8003680 <UART_SetConfig+0x3d0>
 800363c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	025b      	lsls	r3, r3, #9
 8003642:	429a      	cmp	r2, r3
 8003644:	d21c      	bcs.n	8003680 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	b29a      	uxth	r2, r3
 800364a:	200e      	movs	r0, #14
 800364c:	2418      	movs	r4, #24
 800364e:	193b      	adds	r3, r7, r4
 8003650:	181b      	adds	r3, r3, r0
 8003652:	210f      	movs	r1, #15
 8003654:	438a      	bics	r2, r1
 8003656:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	b29b      	uxth	r3, r3
 800365e:	2207      	movs	r2, #7
 8003660:	4013      	ands	r3, r2
 8003662:	b299      	uxth	r1, r3
 8003664:	193b      	adds	r3, r7, r4
 8003666:	181b      	adds	r3, r3, r0
 8003668:	193a      	adds	r2, r7, r4
 800366a:	1812      	adds	r2, r2, r0
 800366c:	8812      	ldrh	r2, [r2, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	193a      	adds	r2, r7, r4
 8003678:	1812      	adds	r2, r2, r0
 800367a:	8812      	ldrh	r2, [r2, #0]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e061      	b.n	8003744 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003680:	231a      	movs	r3, #26
 8003682:	2218      	movs	r2, #24
 8003684:	4694      	mov	ip, r2
 8003686:	44bc      	add	ip, r7
 8003688:	4463      	add	r3, ip
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e059      	b.n	8003744 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003690:	231b      	movs	r3, #27
 8003692:	2218      	movs	r2, #24
 8003694:	4694      	mov	ip, r2
 8003696:	44bc      	add	ip, r7
 8003698:	4463      	add	r3, ip
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d822      	bhi.n	80036e6 <UART_SetConfig+0x436>
 80036a0:	009a      	lsls	r2, r3, #2
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <UART_SetConfig+0x4b4>)
 80036a4:	18d3      	adds	r3, r2, r3
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036aa:	f7ff fbb3 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 80036ae:	0003      	movs	r3, r0
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036b2:	e022      	b.n	80036fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7ff fbc4 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 80036b8:	0003      	movs	r3, r0
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036bc:	e01d      	b.n	80036fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036be:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <UART_SetConfig+0x4b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2210      	movs	r2, #16
 80036c4:	4013      	ands	r3, r2
 80036c6:	d002      	beq.n	80036ce <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <UART_SetConfig+0x4bc>)
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036cc:	e015      	b.n	80036fa <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80036ce:	4b28      	ldr	r3, [pc, #160]	; (8003770 <UART_SetConfig+0x4c0>)
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036d2:	e012      	b.n	80036fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d4:	f7ff faee 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80036d8:	0003      	movs	r3, r0
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036dc:	e00d      	b.n	80036fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036e4:	e009      	b.n	80036fa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80036ea:	231a      	movs	r3, #26
 80036ec:	2218      	movs	r2, #24
 80036ee:	4694      	mov	ip, r2
 80036f0:	44bc      	add	ip, r7
 80036f2:	4463      	add	r3, ip
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
        break;
 80036f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d021      	beq.n	8003744 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	085a      	lsrs	r2, r3, #1
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	18d2      	adds	r2, r2, r3
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	0019      	movs	r1, r3
 8003710:	0010      	movs	r0, r2
 8003712:	f7fc fd03 	bl	800011c <__udivsi3>
 8003716:	0003      	movs	r3, r0
 8003718:	b29b      	uxth	r3, r3
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b0f      	cmp	r3, #15
 8003720:	d909      	bls.n	8003736 <UART_SetConfig+0x486>
 8003722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	025b      	lsls	r3, r3, #9
 8003728:	429a      	cmp	r2, r3
 800372a:	d204      	bcs.n	8003736 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e006      	b.n	8003744 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003736:	231a      	movs	r3, #26
 8003738:	2218      	movs	r2, #24
 800373a:	4694      	mov	ip, r2
 800373c:	44bc      	add	ip, r7
 800373e:	4463      	add	r3, ip
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2200      	movs	r2, #0
 8003748:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2200      	movs	r2, #0
 800374e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003750:	231a      	movs	r3, #26
 8003752:	2218      	movs	r2, #24
 8003754:	4694      	mov	ip, r2
 8003756:	44bc      	add	ip, r7
 8003758:	4463      	add	r3, ip
 800375a:	781b      	ldrb	r3, [r3, #0]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b00e      	add	sp, #56	; 0x38
 8003762:	bdb0      	pop	{r4, r5, r7, pc}
 8003764:	0800445c 	.word	0x0800445c
 8003768:	40021000 	.word	0x40021000
 800376c:	003d0900 	.word	0x003d0900
 8003770:	00f42400 	.word	0x00f42400

08003774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2201      	movs	r2, #1
 8003782:	4013      	ands	r3, r2
 8003784:	d00b      	beq.n	800379e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a4a      	ldr	r2, [pc, #296]	; (80038b8 <UART_AdvFeatureConfig+0x144>)
 800378e:	4013      	ands	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2202      	movs	r2, #2
 80037a4:	4013      	ands	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a43      	ldr	r2, [pc, #268]	; (80038bc <UART_AdvFeatureConfig+0x148>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2204      	movs	r2, #4
 80037c6:	4013      	ands	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a3b      	ldr	r2, [pc, #236]	; (80038c0 <UART_AdvFeatureConfig+0x14c>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	0019      	movs	r1, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2208      	movs	r2, #8
 80037e8:	4013      	ands	r3, r2
 80037ea:	d00b      	beq.n	8003804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a34      	ldr	r2, [pc, #208]	; (80038c4 <UART_AdvFeatureConfig+0x150>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2210      	movs	r2, #16
 800380a:	4013      	ands	r3, r2
 800380c:	d00b      	beq.n	8003826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <UART_AdvFeatureConfig+0x154>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2220      	movs	r2, #32
 800382c:	4013      	ands	r3, r2
 800382e:	d00b      	beq.n	8003848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4a25      	ldr	r2, [pc, #148]	; (80038cc <UART_AdvFeatureConfig+0x158>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	4013      	ands	r3, r2
 8003850:	d01d      	beq.n	800388e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <UART_AdvFeatureConfig+0x15c>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	035b      	lsls	r3, r3, #13
 8003872:	429a      	cmp	r2, r3
 8003874:	d10b      	bne.n	800388e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <UART_AdvFeatureConfig+0x160>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	4013      	ands	r3, r2
 8003896:	d00b      	beq.n	80038b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4a0e      	ldr	r2, [pc, #56]	; (80038d8 <UART_AdvFeatureConfig+0x164>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	fffdffff 	.word	0xfffdffff
 80038bc:	fffeffff 	.word	0xfffeffff
 80038c0:	fffbffff 	.word	0xfffbffff
 80038c4:	ffff7fff 	.word	0xffff7fff
 80038c8:	ffffefff 	.word	0xffffefff
 80038cc:	ffffdfff 	.word	0xffffdfff
 80038d0:	ffefffff 	.word	0xffefffff
 80038d4:	ff9fffff 	.word	0xff9fffff
 80038d8:	fff7ffff 	.word	0xfff7ffff

080038dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	2100      	movs	r1, #0
 80038ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038ec:	f7fd fd72 	bl	80013d4 <HAL_GetTick>
 80038f0:	0003      	movs	r3, r0
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2208      	movs	r2, #8
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d10c      	bne.n	800391c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	0391      	lsls	r1, r2, #14
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4a17      	ldr	r2, [pc, #92]	; (8003968 <UART_CheckIdleState+0x8c>)
 800390c:	9200      	str	r2, [sp, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	f000 f82c 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d001      	beq.n	800391c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e021      	b.n	8003960 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2204      	movs	r2, #4
 8003924:	4013      	ands	r3, r2
 8003926:	2b04      	cmp	r3, #4
 8003928:	d10c      	bne.n	8003944 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	03d1      	lsls	r1, r2, #15
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <UART_CheckIdleState+0x8c>)
 8003934:	9200      	str	r2, [sp, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	f000 f818 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d001      	beq.n	8003944 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e00d      	b.n	8003960 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2274      	movs	r2, #116	; 0x74
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b004      	add	sp, #16
 8003966:	bd80      	pop	{r7, pc}
 8003968:	01ffffff 	.word	0x01ffffff

0800396c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b094      	sub	sp, #80	; 0x50
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397c:	e0a3      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003980:	3301      	adds	r3, #1
 8003982:	d100      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003984:	e09f      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7fd fd25 	bl	80013d4 <HAL_GetTick>
 800398a:	0002      	movs	r2, r0
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <UART_WaitOnFlagUntilTimeout+0x30>
 8003996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003998:	2b00      	cmp	r3, #0
 800399a:	d13d      	bne.n	8003a18 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399c:	f3ef 8310 	mrs	r3, PRIMASK
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a4:	647b      	str	r3, [r7, #68]	; 0x44
 80039a6:	2301      	movs	r3, #1
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	f383 8810 	msr	PRIMASK, r3
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	494c      	ldr	r1, [pc, #304]	; (8003af0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80039be:	400a      	ands	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	f383 8810 	msr	PRIMASK, r3
}
 80039cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ce:	f3ef 8310 	mrs	r3, PRIMASK
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40
 80039d8:	2301      	movs	r3, #1
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	f383 8810 	msr	PRIMASK, r3
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	438a      	bics	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2274      	movs	r2, #116	; 0x74
 8003a10:	2100      	movs	r1, #0
 8003a12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e067      	b.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	d050      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	401a      	ands	r2, r3
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d146      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	613b      	str	r3, [r7, #16]
  return(result);
 8003a48:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4923      	ldr	r1, [pc, #140]	; (8003af0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a74:	f3ef 8310 	mrs	r3, PRIMASK
 8003a78:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a7e:	2301      	movs	r3, #1
 8003a80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f383 8810 	msr	PRIMASK, r3
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	438a      	bics	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2274      	movs	r2, #116	; 0x74
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e010      	b.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	4153      	adcs	r3, r2
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	001a      	movs	r2, r3
 8003adc:	1dfb      	adds	r3, r7, #7
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d100      	bne.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003ae4:	e74b      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b014      	add	sp, #80	; 0x50
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fffffe5f 	.word	0xfffffe5f

08003af4 <__errno>:
 8003af4:	4b01      	ldr	r3, [pc, #4]	; (8003afc <__errno+0x8>)
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	4770      	bx	lr
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	20000010 	.word	0x20000010

08003b00 <__libc_init_array>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	2600      	movs	r6, #0
 8003b04:	4d0c      	ldr	r5, [pc, #48]	; (8003b38 <__libc_init_array+0x38>)
 8003b06:	4c0d      	ldr	r4, [pc, #52]	; (8003b3c <__libc_init_array+0x3c>)
 8003b08:	1b64      	subs	r4, r4, r5
 8003b0a:	10a4      	asrs	r4, r4, #2
 8003b0c:	42a6      	cmp	r6, r4
 8003b0e:	d109      	bne.n	8003b24 <__libc_init_array+0x24>
 8003b10:	2600      	movs	r6, #0
 8003b12:	f000 fc47 	bl	80043a4 <_init>
 8003b16:	4d0a      	ldr	r5, [pc, #40]	; (8003b40 <__libc_init_array+0x40>)
 8003b18:	4c0a      	ldr	r4, [pc, #40]	; (8003b44 <__libc_init_array+0x44>)
 8003b1a:	1b64      	subs	r4, r4, r5
 8003b1c:	10a4      	asrs	r4, r4, #2
 8003b1e:	42a6      	cmp	r6, r4
 8003b20:	d105      	bne.n	8003b2e <__libc_init_array+0x2e>
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	00b3      	lsls	r3, r6, #2
 8003b26:	58eb      	ldr	r3, [r5, r3]
 8003b28:	4798      	blx	r3
 8003b2a:	3601      	adds	r6, #1
 8003b2c:	e7ee      	b.n	8003b0c <__libc_init_array+0xc>
 8003b2e:	00b3      	lsls	r3, r6, #2
 8003b30:	58eb      	ldr	r3, [r5, r3]
 8003b32:	4798      	blx	r3
 8003b34:	3601      	adds	r6, #1
 8003b36:	e7f2      	b.n	8003b1e <__libc_init_array+0x1e>
 8003b38:	080044bc 	.word	0x080044bc
 8003b3c:	080044bc 	.word	0x080044bc
 8003b40:	080044bc 	.word	0x080044bc
 8003b44:	080044c0 	.word	0x080044c0

08003b48 <memset>:
 8003b48:	0003      	movs	r3, r0
 8003b4a:	1882      	adds	r2, r0, r2
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	7019      	strb	r1, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <siprintf>:
 8003b58:	b40e      	push	{r1, r2, r3}
 8003b5a:	b500      	push	{lr}
 8003b5c:	490b      	ldr	r1, [pc, #44]	; (8003b8c <siprintf+0x34>)
 8003b5e:	b09c      	sub	sp, #112	; 0x70
 8003b60:	ab1d      	add	r3, sp, #116	; 0x74
 8003b62:	9002      	str	r0, [sp, #8]
 8003b64:	9006      	str	r0, [sp, #24]
 8003b66:	9107      	str	r1, [sp, #28]
 8003b68:	9104      	str	r1, [sp, #16]
 8003b6a:	4809      	ldr	r0, [pc, #36]	; (8003b90 <siprintf+0x38>)
 8003b6c:	4909      	ldr	r1, [pc, #36]	; (8003b94 <siprintf+0x3c>)
 8003b6e:	cb04      	ldmia	r3!, {r2}
 8003b70:	9105      	str	r1, [sp, #20]
 8003b72:	6800      	ldr	r0, [r0, #0]
 8003b74:	a902      	add	r1, sp, #8
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	f000 f870 	bl	8003c5c <_svfiprintf_r>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9a02      	ldr	r2, [sp, #8]
 8003b80:	7013      	strb	r3, [r2, #0]
 8003b82:	b01c      	add	sp, #112	; 0x70
 8003b84:	bc08      	pop	{r3}
 8003b86:	b003      	add	sp, #12
 8003b88:	4718      	bx	r3
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	7fffffff 	.word	0x7fffffff
 8003b90:	20000010 	.word	0x20000010
 8003b94:	ffff0208 	.word	0xffff0208

08003b98 <__ssputs_r>:
 8003b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9a:	688e      	ldr	r6, [r1, #8]
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	0007      	movs	r7, r0
 8003ba0:	000c      	movs	r4, r1
 8003ba2:	9203      	str	r2, [sp, #12]
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	429e      	cmp	r6, r3
 8003ba8:	d83c      	bhi.n	8003c24 <__ssputs_r+0x8c>
 8003baa:	2390      	movs	r3, #144	; 0x90
 8003bac:	898a      	ldrh	r2, [r1, #12]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	421a      	tst	r2, r3
 8003bb2:	d034      	beq.n	8003c1e <__ssputs_r+0x86>
 8003bb4:	2503      	movs	r5, #3
 8003bb6:	6909      	ldr	r1, [r1, #16]
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	1a5b      	subs	r3, r3, r1
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	6963      	ldr	r3, [r4, #20]
 8003bc0:	9802      	ldr	r0, [sp, #8]
 8003bc2:	435d      	muls	r5, r3
 8003bc4:	0feb      	lsrs	r3, r5, #31
 8003bc6:	195d      	adds	r5, r3, r5
 8003bc8:	9b01      	ldr	r3, [sp, #4]
 8003bca:	106d      	asrs	r5, r5, #1
 8003bcc:	3301      	adds	r3, #1
 8003bce:	181b      	adds	r3, r3, r0
 8003bd0:	42ab      	cmp	r3, r5
 8003bd2:	d900      	bls.n	8003bd6 <__ssputs_r+0x3e>
 8003bd4:	001d      	movs	r5, r3
 8003bd6:	0553      	lsls	r3, r2, #21
 8003bd8:	d532      	bpl.n	8003c40 <__ssputs_r+0xa8>
 8003bda:	0029      	movs	r1, r5
 8003bdc:	0038      	movs	r0, r7
 8003bde:	f000 fb31 	bl	8004244 <_malloc_r>
 8003be2:	1e06      	subs	r6, r0, #0
 8003be4:	d109      	bne.n	8003bfa <__ssputs_r+0x62>
 8003be6:	230c      	movs	r3, #12
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	2340      	movs	r3, #64	; 0x40
 8003bec:	2001      	movs	r0, #1
 8003bee:	89a2      	ldrh	r2, [r4, #12]
 8003bf0:	4240      	negs	r0, r0
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	b005      	add	sp, #20
 8003bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfa:	9a02      	ldr	r2, [sp, #8]
 8003bfc:	6921      	ldr	r1, [r4, #16]
 8003bfe:	f000 faba 	bl	8004176 <memcpy>
 8003c02:	89a3      	ldrh	r3, [r4, #12]
 8003c04:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <__ssputs_r+0xc0>)
 8003c06:	401a      	ands	r2, r3
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	81a3      	strh	r3, [r4, #12]
 8003c0e:	9b02      	ldr	r3, [sp, #8]
 8003c10:	6126      	str	r6, [r4, #16]
 8003c12:	18f6      	adds	r6, r6, r3
 8003c14:	6026      	str	r6, [r4, #0]
 8003c16:	6165      	str	r5, [r4, #20]
 8003c18:	9e01      	ldr	r6, [sp, #4]
 8003c1a:	1aed      	subs	r5, r5, r3
 8003c1c:	60a5      	str	r5, [r4, #8]
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	429e      	cmp	r6, r3
 8003c22:	d900      	bls.n	8003c26 <__ssputs_r+0x8e>
 8003c24:	9e01      	ldr	r6, [sp, #4]
 8003c26:	0032      	movs	r2, r6
 8003c28:	9903      	ldr	r1, [sp, #12]
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	f000 faac 	bl	8004188 <memmove>
 8003c30:	68a3      	ldr	r3, [r4, #8]
 8003c32:	2000      	movs	r0, #0
 8003c34:	1b9b      	subs	r3, r3, r6
 8003c36:	60a3      	str	r3, [r4, #8]
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	199e      	adds	r6, r3, r6
 8003c3c:	6026      	str	r6, [r4, #0]
 8003c3e:	e7da      	b.n	8003bf6 <__ssputs_r+0x5e>
 8003c40:	002a      	movs	r2, r5
 8003c42:	0038      	movs	r0, r7
 8003c44:	f000 fb5c 	bl	8004300 <_realloc_r>
 8003c48:	1e06      	subs	r6, r0, #0
 8003c4a:	d1e0      	bne.n	8003c0e <__ssputs_r+0x76>
 8003c4c:	0038      	movs	r0, r7
 8003c4e:	6921      	ldr	r1, [r4, #16]
 8003c50:	f000 faae 	bl	80041b0 <_free_r>
 8003c54:	e7c7      	b.n	8003be6 <__ssputs_r+0x4e>
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	fffffb7f 	.word	0xfffffb7f

08003c5c <_svfiprintf_r>:
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	b0a1      	sub	sp, #132	; 0x84
 8003c60:	9003      	str	r0, [sp, #12]
 8003c62:	001d      	movs	r5, r3
 8003c64:	898b      	ldrh	r3, [r1, #12]
 8003c66:	000f      	movs	r7, r1
 8003c68:	0016      	movs	r6, r2
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	d511      	bpl.n	8003c92 <_svfiprintf_r+0x36>
 8003c6e:	690b      	ldr	r3, [r1, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10e      	bne.n	8003c92 <_svfiprintf_r+0x36>
 8003c74:	2140      	movs	r1, #64	; 0x40
 8003c76:	f000 fae5 	bl	8004244 <_malloc_r>
 8003c7a:	6038      	str	r0, [r7, #0]
 8003c7c:	6138      	str	r0, [r7, #16]
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d105      	bne.n	8003c8e <_svfiprintf_r+0x32>
 8003c82:	230c      	movs	r3, #12
 8003c84:	9a03      	ldr	r2, [sp, #12]
 8003c86:	3801      	subs	r0, #1
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	b021      	add	sp, #132	; 0x84
 8003c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8e:	2340      	movs	r3, #64	; 0x40
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	2300      	movs	r3, #0
 8003c94:	ac08      	add	r4, sp, #32
 8003c96:	6163      	str	r3, [r4, #20]
 8003c98:	3320      	adds	r3, #32
 8003c9a:	7663      	strb	r3, [r4, #25]
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	76a3      	strb	r3, [r4, #26]
 8003ca0:	9507      	str	r5, [sp, #28]
 8003ca2:	0035      	movs	r5, r6
 8003ca4:	782b      	ldrb	r3, [r5, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <_svfiprintf_r+0x52>
 8003caa:	2b25      	cmp	r3, #37	; 0x25
 8003cac:	d147      	bne.n	8003d3e <_svfiprintf_r+0xe2>
 8003cae:	1bab      	subs	r3, r5, r6
 8003cb0:	9305      	str	r3, [sp, #20]
 8003cb2:	42b5      	cmp	r5, r6
 8003cb4:	d00c      	beq.n	8003cd0 <_svfiprintf_r+0x74>
 8003cb6:	0032      	movs	r2, r6
 8003cb8:	0039      	movs	r1, r7
 8003cba:	9803      	ldr	r0, [sp, #12]
 8003cbc:	f7ff ff6c 	bl	8003b98 <__ssputs_r>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d100      	bne.n	8003cc6 <_svfiprintf_r+0x6a>
 8003cc4:	e0ae      	b.n	8003e24 <_svfiprintf_r+0x1c8>
 8003cc6:	6962      	ldr	r2, [r4, #20]
 8003cc8:	9b05      	ldr	r3, [sp, #20]
 8003cca:	4694      	mov	ip, r2
 8003ccc:	4463      	add	r3, ip
 8003cce:	6163      	str	r3, [r4, #20]
 8003cd0:	782b      	ldrb	r3, [r5, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d100      	bne.n	8003cd8 <_svfiprintf_r+0x7c>
 8003cd6:	e0a5      	b.n	8003e24 <_svfiprintf_r+0x1c8>
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2300      	movs	r3, #0
 8003cdc:	4252      	negs	r2, r2
 8003cde:	6062      	str	r2, [r4, #4]
 8003ce0:	a904      	add	r1, sp, #16
 8003ce2:	3254      	adds	r2, #84	; 0x54
 8003ce4:	1852      	adds	r2, r2, r1
 8003ce6:	1c6e      	adds	r6, r5, #1
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	60e3      	str	r3, [r4, #12]
 8003cec:	60a3      	str	r3, [r4, #8]
 8003cee:	7013      	strb	r3, [r2, #0]
 8003cf0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003cf2:	2205      	movs	r2, #5
 8003cf4:	7831      	ldrb	r1, [r6, #0]
 8003cf6:	4854      	ldr	r0, [pc, #336]	; (8003e48 <_svfiprintf_r+0x1ec>)
 8003cf8:	f000 fa32 	bl	8004160 <memchr>
 8003cfc:	1c75      	adds	r5, r6, #1
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d11f      	bne.n	8003d42 <_svfiprintf_r+0xe6>
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	06d3      	lsls	r3, r2, #27
 8003d06:	d504      	bpl.n	8003d12 <_svfiprintf_r+0xb6>
 8003d08:	2353      	movs	r3, #83	; 0x53
 8003d0a:	a904      	add	r1, sp, #16
 8003d0c:	185b      	adds	r3, r3, r1
 8003d0e:	2120      	movs	r1, #32
 8003d10:	7019      	strb	r1, [r3, #0]
 8003d12:	0713      	lsls	r3, r2, #28
 8003d14:	d504      	bpl.n	8003d20 <_svfiprintf_r+0xc4>
 8003d16:	2353      	movs	r3, #83	; 0x53
 8003d18:	a904      	add	r1, sp, #16
 8003d1a:	185b      	adds	r3, r3, r1
 8003d1c:	212b      	movs	r1, #43	; 0x2b
 8003d1e:	7019      	strb	r1, [r3, #0]
 8003d20:	7833      	ldrb	r3, [r6, #0]
 8003d22:	2b2a      	cmp	r3, #42	; 0x2a
 8003d24:	d016      	beq.n	8003d54 <_svfiprintf_r+0xf8>
 8003d26:	0035      	movs	r5, r6
 8003d28:	2100      	movs	r1, #0
 8003d2a:	200a      	movs	r0, #10
 8003d2c:	68e3      	ldr	r3, [r4, #12]
 8003d2e:	782a      	ldrb	r2, [r5, #0]
 8003d30:	1c6e      	adds	r6, r5, #1
 8003d32:	3a30      	subs	r2, #48	; 0x30
 8003d34:	2a09      	cmp	r2, #9
 8003d36:	d94e      	bls.n	8003dd6 <_svfiprintf_r+0x17a>
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	d111      	bne.n	8003d60 <_svfiprintf_r+0x104>
 8003d3c:	e017      	b.n	8003d6e <_svfiprintf_r+0x112>
 8003d3e:	3501      	adds	r5, #1
 8003d40:	e7b0      	b.n	8003ca4 <_svfiprintf_r+0x48>
 8003d42:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <_svfiprintf_r+0x1ec>)
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	1ac0      	subs	r0, r0, r3
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4083      	lsls	r3, r0
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	002e      	movs	r6, r5
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	e7ce      	b.n	8003cf2 <_svfiprintf_r+0x96>
 8003d54:	9b07      	ldr	r3, [sp, #28]
 8003d56:	1d19      	adds	r1, r3, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	9107      	str	r1, [sp, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	db01      	blt.n	8003d64 <_svfiprintf_r+0x108>
 8003d60:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d62:	e004      	b.n	8003d6e <_svfiprintf_r+0x112>
 8003d64:	425b      	negs	r3, r3
 8003d66:	60e3      	str	r3, [r4, #12]
 8003d68:	2302      	movs	r3, #2
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	782b      	ldrb	r3, [r5, #0]
 8003d70:	2b2e      	cmp	r3, #46	; 0x2e
 8003d72:	d10a      	bne.n	8003d8a <_svfiprintf_r+0x12e>
 8003d74:	786b      	ldrb	r3, [r5, #1]
 8003d76:	2b2a      	cmp	r3, #42	; 0x2a
 8003d78:	d135      	bne.n	8003de6 <_svfiprintf_r+0x18a>
 8003d7a:	9b07      	ldr	r3, [sp, #28]
 8003d7c:	3502      	adds	r5, #2
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	9207      	str	r2, [sp, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db2b      	blt.n	8003de0 <_svfiprintf_r+0x184>
 8003d88:	9309      	str	r3, [sp, #36]	; 0x24
 8003d8a:	4e30      	ldr	r6, [pc, #192]	; (8003e4c <_svfiprintf_r+0x1f0>)
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	0030      	movs	r0, r6
 8003d90:	7829      	ldrb	r1, [r5, #0]
 8003d92:	f000 f9e5 	bl	8004160 <memchr>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d006      	beq.n	8003da8 <_svfiprintf_r+0x14c>
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	1b80      	subs	r0, r0, r6
 8003d9e:	4083      	lsls	r3, r0
 8003da0:	6822      	ldr	r2, [r4, #0]
 8003da2:	3501      	adds	r5, #1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	7829      	ldrb	r1, [r5, #0]
 8003daa:	2206      	movs	r2, #6
 8003dac:	4828      	ldr	r0, [pc, #160]	; (8003e50 <_svfiprintf_r+0x1f4>)
 8003dae:	1c6e      	adds	r6, r5, #1
 8003db0:	7621      	strb	r1, [r4, #24]
 8003db2:	f000 f9d5 	bl	8004160 <memchr>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d03c      	beq.n	8003e34 <_svfiprintf_r+0x1d8>
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <_svfiprintf_r+0x1f8>)
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d125      	bne.n	8003e0c <_svfiprintf_r+0x1b0>
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	9b07      	ldr	r3, [sp, #28]
 8003dc4:	3307      	adds	r3, #7
 8003dc6:	4393      	bics	r3, r2
 8003dc8:	3308      	adds	r3, #8
 8003dca:	9307      	str	r3, [sp, #28]
 8003dcc:	6963      	ldr	r3, [r4, #20]
 8003dce:	9a04      	ldr	r2, [sp, #16]
 8003dd0:	189b      	adds	r3, r3, r2
 8003dd2:	6163      	str	r3, [r4, #20]
 8003dd4:	e765      	b.n	8003ca2 <_svfiprintf_r+0x46>
 8003dd6:	4343      	muls	r3, r0
 8003dd8:	0035      	movs	r5, r6
 8003dda:	2101      	movs	r1, #1
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	e7a6      	b.n	8003d2e <_svfiprintf_r+0xd2>
 8003de0:	2301      	movs	r3, #1
 8003de2:	425b      	negs	r3, r3
 8003de4:	e7d0      	b.n	8003d88 <_svfiprintf_r+0x12c>
 8003de6:	2300      	movs	r3, #0
 8003de8:	200a      	movs	r0, #10
 8003dea:	001a      	movs	r2, r3
 8003dec:	3501      	adds	r5, #1
 8003dee:	6063      	str	r3, [r4, #4]
 8003df0:	7829      	ldrb	r1, [r5, #0]
 8003df2:	1c6e      	adds	r6, r5, #1
 8003df4:	3930      	subs	r1, #48	; 0x30
 8003df6:	2909      	cmp	r1, #9
 8003df8:	d903      	bls.n	8003e02 <_svfiprintf_r+0x1a6>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0c5      	beq.n	8003d8a <_svfiprintf_r+0x12e>
 8003dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8003e00:	e7c3      	b.n	8003d8a <_svfiprintf_r+0x12e>
 8003e02:	4342      	muls	r2, r0
 8003e04:	0035      	movs	r5, r6
 8003e06:	2301      	movs	r3, #1
 8003e08:	1852      	adds	r2, r2, r1
 8003e0a:	e7f1      	b.n	8003df0 <_svfiprintf_r+0x194>
 8003e0c:	ab07      	add	r3, sp, #28
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	003a      	movs	r2, r7
 8003e12:	0021      	movs	r1, r4
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <_svfiprintf_r+0x1fc>)
 8003e16:	9803      	ldr	r0, [sp, #12]
 8003e18:	e000      	b.n	8003e1c <_svfiprintf_r+0x1c0>
 8003e1a:	bf00      	nop
 8003e1c:	9004      	str	r0, [sp, #16]
 8003e1e:	9b04      	ldr	r3, [sp, #16]
 8003e20:	3301      	adds	r3, #1
 8003e22:	d1d3      	bne.n	8003dcc <_svfiprintf_r+0x170>
 8003e24:	89bb      	ldrh	r3, [r7, #12]
 8003e26:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003e28:	065b      	lsls	r3, r3, #25
 8003e2a:	d400      	bmi.n	8003e2e <_svfiprintf_r+0x1d2>
 8003e2c:	e72d      	b.n	8003c8a <_svfiprintf_r+0x2e>
 8003e2e:	2001      	movs	r0, #1
 8003e30:	4240      	negs	r0, r0
 8003e32:	e72a      	b.n	8003c8a <_svfiprintf_r+0x2e>
 8003e34:	ab07      	add	r3, sp, #28
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	003a      	movs	r2, r7
 8003e3a:	0021      	movs	r1, r4
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <_svfiprintf_r+0x1fc>)
 8003e3e:	9803      	ldr	r0, [sp, #12]
 8003e40:	f000 f87c 	bl	8003f3c <_printf_i>
 8003e44:	e7ea      	b.n	8003e1c <_svfiprintf_r+0x1c0>
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	08004480 	.word	0x08004480
 8003e4c:	08004486 	.word	0x08004486
 8003e50:	0800448a 	.word	0x0800448a
 8003e54:	00000000 	.word	0x00000000
 8003e58:	08003b99 	.word	0x08003b99

08003e5c <_printf_common>:
 8003e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e5e:	0015      	movs	r5, r2
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	688a      	ldr	r2, [r1, #8]
 8003e64:	690b      	ldr	r3, [r1, #16]
 8003e66:	000c      	movs	r4, r1
 8003e68:	9000      	str	r0, [sp, #0]
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	da00      	bge.n	8003e70 <_printf_common+0x14>
 8003e6e:	0013      	movs	r3, r2
 8003e70:	0022      	movs	r2, r4
 8003e72:	602b      	str	r3, [r5, #0]
 8003e74:	3243      	adds	r2, #67	; 0x43
 8003e76:	7812      	ldrb	r2, [r2, #0]
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d001      	beq.n	8003e80 <_printf_common+0x24>
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	069b      	lsls	r3, r3, #26
 8003e84:	d502      	bpl.n	8003e8c <_printf_common+0x30>
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	3302      	adds	r3, #2
 8003e8a:	602b      	str	r3, [r5, #0]
 8003e8c:	6822      	ldr	r2, [r4, #0]
 8003e8e:	2306      	movs	r3, #6
 8003e90:	0017      	movs	r7, r2
 8003e92:	401f      	ands	r7, r3
 8003e94:	421a      	tst	r2, r3
 8003e96:	d027      	beq.n	8003ee8 <_printf_common+0x8c>
 8003e98:	0023      	movs	r3, r4
 8003e9a:	3343      	adds	r3, #67	; 0x43
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	1e5a      	subs	r2, r3, #1
 8003ea0:	4193      	sbcs	r3, r2
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	0692      	lsls	r2, r2, #26
 8003ea6:	d430      	bmi.n	8003f0a <_printf_common+0xae>
 8003ea8:	0022      	movs	r2, r4
 8003eaa:	9901      	ldr	r1, [sp, #4]
 8003eac:	9800      	ldr	r0, [sp, #0]
 8003eae:	9e08      	ldr	r6, [sp, #32]
 8003eb0:	3243      	adds	r2, #67	; 0x43
 8003eb2:	47b0      	blx	r6
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d025      	beq.n	8003f04 <_printf_common+0xa8>
 8003eb8:	2306      	movs	r3, #6
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	682a      	ldr	r2, [r5, #0]
 8003ebe:	68e1      	ldr	r1, [r4, #12]
 8003ec0:	2500      	movs	r5, #0
 8003ec2:	4003      	ands	r3, r0
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d103      	bne.n	8003ed0 <_printf_common+0x74>
 8003ec8:	1a8d      	subs	r5, r1, r2
 8003eca:	43eb      	mvns	r3, r5
 8003ecc:	17db      	asrs	r3, r3, #31
 8003ece:	401d      	ands	r5, r3
 8003ed0:	68a3      	ldr	r3, [r4, #8]
 8003ed2:	6922      	ldr	r2, [r4, #16]
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	dd01      	ble.n	8003edc <_printf_common+0x80>
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	18ed      	adds	r5, r5, r3
 8003edc:	2700      	movs	r7, #0
 8003ede:	42bd      	cmp	r5, r7
 8003ee0:	d120      	bne.n	8003f24 <_printf_common+0xc8>
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	e010      	b.n	8003f08 <_printf_common+0xac>
 8003ee6:	3701      	adds	r7, #1
 8003ee8:	68e3      	ldr	r3, [r4, #12]
 8003eea:	682a      	ldr	r2, [r5, #0]
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	42bb      	cmp	r3, r7
 8003ef0:	ddd2      	ble.n	8003e98 <_printf_common+0x3c>
 8003ef2:	0022      	movs	r2, r4
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	9901      	ldr	r1, [sp, #4]
 8003ef8:	9800      	ldr	r0, [sp, #0]
 8003efa:	9e08      	ldr	r6, [sp, #32]
 8003efc:	3219      	adds	r2, #25
 8003efe:	47b0      	blx	r6
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d1f0      	bne.n	8003ee6 <_printf_common+0x8a>
 8003f04:	2001      	movs	r0, #1
 8003f06:	4240      	negs	r0, r0
 8003f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f0a:	2030      	movs	r0, #48	; 0x30
 8003f0c:	18e1      	adds	r1, r4, r3
 8003f0e:	3143      	adds	r1, #67	; 0x43
 8003f10:	7008      	strb	r0, [r1, #0]
 8003f12:	0021      	movs	r1, r4
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	3145      	adds	r1, #69	; 0x45
 8003f18:	7809      	ldrb	r1, [r1, #0]
 8003f1a:	18a2      	adds	r2, r4, r2
 8003f1c:	3243      	adds	r2, #67	; 0x43
 8003f1e:	3302      	adds	r3, #2
 8003f20:	7011      	strb	r1, [r2, #0]
 8003f22:	e7c1      	b.n	8003ea8 <_printf_common+0x4c>
 8003f24:	0022      	movs	r2, r4
 8003f26:	2301      	movs	r3, #1
 8003f28:	9901      	ldr	r1, [sp, #4]
 8003f2a:	9800      	ldr	r0, [sp, #0]
 8003f2c:	9e08      	ldr	r6, [sp, #32]
 8003f2e:	321a      	adds	r2, #26
 8003f30:	47b0      	blx	r6
 8003f32:	1c43      	adds	r3, r0, #1
 8003f34:	d0e6      	beq.n	8003f04 <_printf_common+0xa8>
 8003f36:	3701      	adds	r7, #1
 8003f38:	e7d1      	b.n	8003ede <_printf_common+0x82>
	...

08003f3c <_printf_i>:
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	b08b      	sub	sp, #44	; 0x2c
 8003f40:	9206      	str	r2, [sp, #24]
 8003f42:	000a      	movs	r2, r1
 8003f44:	3243      	adds	r2, #67	; 0x43
 8003f46:	9307      	str	r3, [sp, #28]
 8003f48:	9005      	str	r0, [sp, #20]
 8003f4a:	9204      	str	r2, [sp, #16]
 8003f4c:	7e0a      	ldrb	r2, [r1, #24]
 8003f4e:	000c      	movs	r4, r1
 8003f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f52:	2a78      	cmp	r2, #120	; 0x78
 8003f54:	d806      	bhi.n	8003f64 <_printf_i+0x28>
 8003f56:	2a62      	cmp	r2, #98	; 0x62
 8003f58:	d808      	bhi.n	8003f6c <_printf_i+0x30>
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	d100      	bne.n	8003f60 <_printf_i+0x24>
 8003f5e:	e0c0      	b.n	80040e2 <_printf_i+0x1a6>
 8003f60:	2a58      	cmp	r2, #88	; 0x58
 8003f62:	d052      	beq.n	800400a <_printf_i+0xce>
 8003f64:	0026      	movs	r6, r4
 8003f66:	3642      	adds	r6, #66	; 0x42
 8003f68:	7032      	strb	r2, [r6, #0]
 8003f6a:	e022      	b.n	8003fb2 <_printf_i+0x76>
 8003f6c:	0010      	movs	r0, r2
 8003f6e:	3863      	subs	r0, #99	; 0x63
 8003f70:	2815      	cmp	r0, #21
 8003f72:	d8f7      	bhi.n	8003f64 <_printf_i+0x28>
 8003f74:	f7fc f8c8 	bl	8000108 <__gnu_thumb1_case_shi>
 8003f78:	001f0016 	.word	0x001f0016
 8003f7c:	fff6fff6 	.word	0xfff6fff6
 8003f80:	fff6fff6 	.word	0xfff6fff6
 8003f84:	fff6001f 	.word	0xfff6001f
 8003f88:	fff6fff6 	.word	0xfff6fff6
 8003f8c:	00a8fff6 	.word	0x00a8fff6
 8003f90:	009a0036 	.word	0x009a0036
 8003f94:	fff6fff6 	.word	0xfff6fff6
 8003f98:	fff600b9 	.word	0xfff600b9
 8003f9c:	fff60036 	.word	0xfff60036
 8003fa0:	009efff6 	.word	0x009efff6
 8003fa4:	0026      	movs	r6, r4
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	3642      	adds	r6, #66	; 0x42
 8003faa:	1d11      	adds	r1, r2, #4
 8003fac:	6019      	str	r1, [r3, #0]
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	7033      	strb	r3, [r6, #0]
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0a7      	b.n	8004106 <_printf_i+0x1ca>
 8003fb6:	6808      	ldr	r0, [r1, #0]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	1d0a      	adds	r2, r1, #4
 8003fbc:	0605      	lsls	r5, r0, #24
 8003fbe:	d50b      	bpl.n	8003fd8 <_printf_i+0x9c>
 8003fc0:	680d      	ldr	r5, [r1, #0]
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	2d00      	cmp	r5, #0
 8003fc6:	da03      	bge.n	8003fd0 <_printf_i+0x94>
 8003fc8:	232d      	movs	r3, #45	; 0x2d
 8003fca:	9a04      	ldr	r2, [sp, #16]
 8003fcc:	426d      	negs	r5, r5
 8003fce:	7013      	strb	r3, [r2, #0]
 8003fd0:	4b61      	ldr	r3, [pc, #388]	; (8004158 <_printf_i+0x21c>)
 8003fd2:	270a      	movs	r7, #10
 8003fd4:	9303      	str	r3, [sp, #12]
 8003fd6:	e032      	b.n	800403e <_printf_i+0x102>
 8003fd8:	680d      	ldr	r5, [r1, #0]
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	0641      	lsls	r1, r0, #25
 8003fde:	d5f1      	bpl.n	8003fc4 <_printf_i+0x88>
 8003fe0:	b22d      	sxth	r5, r5
 8003fe2:	e7ef      	b.n	8003fc4 <_printf_i+0x88>
 8003fe4:	680d      	ldr	r5, [r1, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	1d08      	adds	r0, r1, #4
 8003fea:	6018      	str	r0, [r3, #0]
 8003fec:	062e      	lsls	r6, r5, #24
 8003fee:	d501      	bpl.n	8003ff4 <_printf_i+0xb8>
 8003ff0:	680d      	ldr	r5, [r1, #0]
 8003ff2:	e003      	b.n	8003ffc <_printf_i+0xc0>
 8003ff4:	066d      	lsls	r5, r5, #25
 8003ff6:	d5fb      	bpl.n	8003ff0 <_printf_i+0xb4>
 8003ff8:	680d      	ldr	r5, [r1, #0]
 8003ffa:	b2ad      	uxth	r5, r5
 8003ffc:	4b56      	ldr	r3, [pc, #344]	; (8004158 <_printf_i+0x21c>)
 8003ffe:	270a      	movs	r7, #10
 8004000:	9303      	str	r3, [sp, #12]
 8004002:	2a6f      	cmp	r2, #111	; 0x6f
 8004004:	d117      	bne.n	8004036 <_printf_i+0xfa>
 8004006:	2708      	movs	r7, #8
 8004008:	e015      	b.n	8004036 <_printf_i+0xfa>
 800400a:	3145      	adds	r1, #69	; 0x45
 800400c:	700a      	strb	r2, [r1, #0]
 800400e:	4a52      	ldr	r2, [pc, #328]	; (8004158 <_printf_i+0x21c>)
 8004010:	9203      	str	r2, [sp, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	6821      	ldr	r1, [r4, #0]
 8004016:	ca20      	ldmia	r2!, {r5}
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	0608      	lsls	r0, r1, #24
 800401c:	d550      	bpl.n	80040c0 <_printf_i+0x184>
 800401e:	07cb      	lsls	r3, r1, #31
 8004020:	d502      	bpl.n	8004028 <_printf_i+0xec>
 8004022:	2320      	movs	r3, #32
 8004024:	4319      	orrs	r1, r3
 8004026:	6021      	str	r1, [r4, #0]
 8004028:	2710      	movs	r7, #16
 800402a:	2d00      	cmp	r5, #0
 800402c:	d103      	bne.n	8004036 <_printf_i+0xfa>
 800402e:	2320      	movs	r3, #32
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	439a      	bics	r2, r3
 8004034:	6022      	str	r2, [r4, #0]
 8004036:	0023      	movs	r3, r4
 8004038:	2200      	movs	r2, #0
 800403a:	3343      	adds	r3, #67	; 0x43
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	6863      	ldr	r3, [r4, #4]
 8004040:	60a3      	str	r3, [r4, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	db03      	blt.n	800404e <_printf_i+0x112>
 8004046:	2204      	movs	r2, #4
 8004048:	6821      	ldr	r1, [r4, #0]
 800404a:	4391      	bics	r1, r2
 800404c:	6021      	str	r1, [r4, #0]
 800404e:	2d00      	cmp	r5, #0
 8004050:	d102      	bne.n	8004058 <_printf_i+0x11c>
 8004052:	9e04      	ldr	r6, [sp, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00c      	beq.n	8004072 <_printf_i+0x136>
 8004058:	9e04      	ldr	r6, [sp, #16]
 800405a:	0028      	movs	r0, r5
 800405c:	0039      	movs	r1, r7
 800405e:	f7fc f8e3 	bl	8000228 <__aeabi_uidivmod>
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	3e01      	subs	r6, #1
 8004066:	5c5b      	ldrb	r3, [r3, r1]
 8004068:	7033      	strb	r3, [r6, #0]
 800406a:	002b      	movs	r3, r5
 800406c:	0005      	movs	r5, r0
 800406e:	429f      	cmp	r7, r3
 8004070:	d9f3      	bls.n	800405a <_printf_i+0x11e>
 8004072:	2f08      	cmp	r7, #8
 8004074:	d109      	bne.n	800408a <_printf_i+0x14e>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	07db      	lsls	r3, r3, #31
 800407a:	d506      	bpl.n	800408a <_printf_i+0x14e>
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	6922      	ldr	r2, [r4, #16]
 8004080:	4293      	cmp	r3, r2
 8004082:	dc02      	bgt.n	800408a <_printf_i+0x14e>
 8004084:	2330      	movs	r3, #48	; 0x30
 8004086:	3e01      	subs	r6, #1
 8004088:	7033      	strb	r3, [r6, #0]
 800408a:	9b04      	ldr	r3, [sp, #16]
 800408c:	1b9b      	subs	r3, r3, r6
 800408e:	6123      	str	r3, [r4, #16]
 8004090:	9b07      	ldr	r3, [sp, #28]
 8004092:	0021      	movs	r1, r4
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	9805      	ldr	r0, [sp, #20]
 8004098:	9b06      	ldr	r3, [sp, #24]
 800409a:	aa09      	add	r2, sp, #36	; 0x24
 800409c:	f7ff fede 	bl	8003e5c <_printf_common>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d135      	bne.n	8004110 <_printf_i+0x1d4>
 80040a4:	2001      	movs	r0, #1
 80040a6:	4240      	negs	r0, r0
 80040a8:	b00b      	add	sp, #44	; 0x2c
 80040aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ac:	2220      	movs	r2, #32
 80040ae:	6809      	ldr	r1, [r1, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	6022      	str	r2, [r4, #0]
 80040b4:	0022      	movs	r2, r4
 80040b6:	2178      	movs	r1, #120	; 0x78
 80040b8:	3245      	adds	r2, #69	; 0x45
 80040ba:	7011      	strb	r1, [r2, #0]
 80040bc:	4a27      	ldr	r2, [pc, #156]	; (800415c <_printf_i+0x220>)
 80040be:	e7a7      	b.n	8004010 <_printf_i+0xd4>
 80040c0:	0648      	lsls	r0, r1, #25
 80040c2:	d5ac      	bpl.n	800401e <_printf_i+0xe2>
 80040c4:	b2ad      	uxth	r5, r5
 80040c6:	e7aa      	b.n	800401e <_printf_i+0xe2>
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	680d      	ldr	r5, [r1, #0]
 80040cc:	1d10      	adds	r0, r2, #4
 80040ce:	6949      	ldr	r1, [r1, #20]
 80040d0:	6018      	str	r0, [r3, #0]
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	062e      	lsls	r6, r5, #24
 80040d6:	d501      	bpl.n	80040dc <_printf_i+0x1a0>
 80040d8:	6019      	str	r1, [r3, #0]
 80040da:	e002      	b.n	80040e2 <_printf_i+0x1a6>
 80040dc:	066d      	lsls	r5, r5, #25
 80040de:	d5fb      	bpl.n	80040d8 <_printf_i+0x19c>
 80040e0:	8019      	strh	r1, [r3, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	9e04      	ldr	r6, [sp, #16]
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	e7d2      	b.n	8004090 <_printf_i+0x154>
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	1d11      	adds	r1, r2, #4
 80040ee:	6019      	str	r1, [r3, #0]
 80040f0:	6816      	ldr	r6, [r2, #0]
 80040f2:	2100      	movs	r1, #0
 80040f4:	0030      	movs	r0, r6
 80040f6:	6862      	ldr	r2, [r4, #4]
 80040f8:	f000 f832 	bl	8004160 <memchr>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d001      	beq.n	8004104 <_printf_i+0x1c8>
 8004100:	1b80      	subs	r0, r0, r6
 8004102:	6060      	str	r0, [r4, #4]
 8004104:	6863      	ldr	r3, [r4, #4]
 8004106:	6123      	str	r3, [r4, #16]
 8004108:	2300      	movs	r3, #0
 800410a:	9a04      	ldr	r2, [sp, #16]
 800410c:	7013      	strb	r3, [r2, #0]
 800410e:	e7bf      	b.n	8004090 <_printf_i+0x154>
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	0032      	movs	r2, r6
 8004114:	9906      	ldr	r1, [sp, #24]
 8004116:	9805      	ldr	r0, [sp, #20]
 8004118:	9d07      	ldr	r5, [sp, #28]
 800411a:	47a8      	blx	r5
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d0c1      	beq.n	80040a4 <_printf_i+0x168>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	079b      	lsls	r3, r3, #30
 8004124:	d415      	bmi.n	8004152 <_printf_i+0x216>
 8004126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004128:	68e0      	ldr	r0, [r4, #12]
 800412a:	4298      	cmp	r0, r3
 800412c:	dabc      	bge.n	80040a8 <_printf_i+0x16c>
 800412e:	0018      	movs	r0, r3
 8004130:	e7ba      	b.n	80040a8 <_printf_i+0x16c>
 8004132:	0022      	movs	r2, r4
 8004134:	2301      	movs	r3, #1
 8004136:	9906      	ldr	r1, [sp, #24]
 8004138:	9805      	ldr	r0, [sp, #20]
 800413a:	9e07      	ldr	r6, [sp, #28]
 800413c:	3219      	adds	r2, #25
 800413e:	47b0      	blx	r6
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d0af      	beq.n	80040a4 <_printf_i+0x168>
 8004144:	3501      	adds	r5, #1
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	42ab      	cmp	r3, r5
 800414e:	dcf0      	bgt.n	8004132 <_printf_i+0x1f6>
 8004150:	e7e9      	b.n	8004126 <_printf_i+0x1ea>
 8004152:	2500      	movs	r5, #0
 8004154:	e7f7      	b.n	8004146 <_printf_i+0x20a>
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	08004491 	.word	0x08004491
 800415c:	080044a2 	.word	0x080044a2

08004160 <memchr>:
 8004160:	b2c9      	uxtb	r1, r1
 8004162:	1882      	adds	r2, r0, r2
 8004164:	4290      	cmp	r0, r2
 8004166:	d101      	bne.n	800416c <memchr+0xc>
 8004168:	2000      	movs	r0, #0
 800416a:	4770      	bx	lr
 800416c:	7803      	ldrb	r3, [r0, #0]
 800416e:	428b      	cmp	r3, r1
 8004170:	d0fb      	beq.n	800416a <memchr+0xa>
 8004172:	3001      	adds	r0, #1
 8004174:	e7f6      	b.n	8004164 <memchr+0x4>

08004176 <memcpy>:
 8004176:	2300      	movs	r3, #0
 8004178:	b510      	push	{r4, lr}
 800417a:	429a      	cmp	r2, r3
 800417c:	d100      	bne.n	8004180 <memcpy+0xa>
 800417e:	bd10      	pop	{r4, pc}
 8004180:	5ccc      	ldrb	r4, [r1, r3]
 8004182:	54c4      	strb	r4, [r0, r3]
 8004184:	3301      	adds	r3, #1
 8004186:	e7f8      	b.n	800417a <memcpy+0x4>

08004188 <memmove>:
 8004188:	b510      	push	{r4, lr}
 800418a:	4288      	cmp	r0, r1
 800418c:	d902      	bls.n	8004194 <memmove+0xc>
 800418e:	188b      	adds	r3, r1, r2
 8004190:	4298      	cmp	r0, r3
 8004192:	d303      	bcc.n	800419c <memmove+0x14>
 8004194:	2300      	movs	r3, #0
 8004196:	e007      	b.n	80041a8 <memmove+0x20>
 8004198:	5c8b      	ldrb	r3, [r1, r2]
 800419a:	5483      	strb	r3, [r0, r2]
 800419c:	3a01      	subs	r2, #1
 800419e:	d2fb      	bcs.n	8004198 <memmove+0x10>
 80041a0:	bd10      	pop	{r4, pc}
 80041a2:	5ccc      	ldrb	r4, [r1, r3]
 80041a4:	54c4      	strb	r4, [r0, r3]
 80041a6:	3301      	adds	r3, #1
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1fa      	bne.n	80041a2 <memmove+0x1a>
 80041ac:	e7f8      	b.n	80041a0 <memmove+0x18>
	...

080041b0 <_free_r>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	0005      	movs	r5, r0
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d010      	beq.n	80041da <_free_r+0x2a>
 80041b8:	1f0c      	subs	r4, r1, #4
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <_free_r+0x12>
 80041c0:	18e4      	adds	r4, r4, r3
 80041c2:	0028      	movs	r0, r5
 80041c4:	f000 f8d4 	bl	8004370 <__malloc_lock>
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <_free_r+0x90>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <_free_r+0x2c>
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	6014      	str	r4, [r2, #0]
 80041d4:	0028      	movs	r0, r5
 80041d6:	f000 f8d3 	bl	8004380 <__malloc_unlock>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d908      	bls.n	80041f2 <_free_r+0x42>
 80041e0:	6821      	ldr	r1, [r4, #0]
 80041e2:	1860      	adds	r0, r4, r1
 80041e4:	4283      	cmp	r3, r0
 80041e6:	d1f3      	bne.n	80041d0 <_free_r+0x20>
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	1841      	adds	r1, r0, r1
 80041ee:	6021      	str	r1, [r4, #0]
 80041f0:	e7ee      	b.n	80041d0 <_free_r+0x20>
 80041f2:	001a      	movs	r2, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <_free_r+0x4e>
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	d9f9      	bls.n	80041f2 <_free_r+0x42>
 80041fe:	6811      	ldr	r1, [r2, #0]
 8004200:	1850      	adds	r0, r2, r1
 8004202:	42a0      	cmp	r0, r4
 8004204:	d10b      	bne.n	800421e <_free_r+0x6e>
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	1809      	adds	r1, r1, r0
 800420a:	1850      	adds	r0, r2, r1
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	4283      	cmp	r3, r0
 8004210:	d1e0      	bne.n	80041d4 <_free_r+0x24>
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	1841      	adds	r1, r0, r1
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	6053      	str	r3, [r2, #4]
 800421c:	e7da      	b.n	80041d4 <_free_r+0x24>
 800421e:	42a0      	cmp	r0, r4
 8004220:	d902      	bls.n	8004228 <_free_r+0x78>
 8004222:	230c      	movs	r3, #12
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	e7d5      	b.n	80041d4 <_free_r+0x24>
 8004228:	6821      	ldr	r1, [r4, #0]
 800422a:	1860      	adds	r0, r4, r1
 800422c:	4283      	cmp	r3, r0
 800422e:	d103      	bne.n	8004238 <_free_r+0x88>
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	1841      	adds	r1, r0, r1
 8004236:	6021      	str	r1, [r4, #0]
 8004238:	6063      	str	r3, [r4, #4]
 800423a:	6054      	str	r4, [r2, #4]
 800423c:	e7ca      	b.n	80041d4 <_free_r+0x24>
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	200000e0 	.word	0x200000e0

08004244 <_malloc_r>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	2303      	movs	r3, #3
 8004248:	1ccd      	adds	r5, r1, #3
 800424a:	439d      	bics	r5, r3
 800424c:	3508      	adds	r5, #8
 800424e:	0006      	movs	r6, r0
 8004250:	2d0c      	cmp	r5, #12
 8004252:	d21f      	bcs.n	8004294 <_malloc_r+0x50>
 8004254:	250c      	movs	r5, #12
 8004256:	42a9      	cmp	r1, r5
 8004258:	d81e      	bhi.n	8004298 <_malloc_r+0x54>
 800425a:	0030      	movs	r0, r6
 800425c:	f000 f888 	bl	8004370 <__malloc_lock>
 8004260:	4925      	ldr	r1, [pc, #148]	; (80042f8 <_malloc_r+0xb4>)
 8004262:	680a      	ldr	r2, [r1, #0]
 8004264:	0014      	movs	r4, r2
 8004266:	2c00      	cmp	r4, #0
 8004268:	d11a      	bne.n	80042a0 <_malloc_r+0x5c>
 800426a:	4f24      	ldr	r7, [pc, #144]	; (80042fc <_malloc_r+0xb8>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <_malloc_r+0x38>
 8004272:	0021      	movs	r1, r4
 8004274:	0030      	movs	r0, r6
 8004276:	f000 f869 	bl	800434c <_sbrk_r>
 800427a:	6038      	str	r0, [r7, #0]
 800427c:	0029      	movs	r1, r5
 800427e:	0030      	movs	r0, r6
 8004280:	f000 f864 	bl	800434c <_sbrk_r>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d12b      	bne.n	80042e0 <_malloc_r+0x9c>
 8004288:	230c      	movs	r3, #12
 800428a:	0030      	movs	r0, r6
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	f000 f877 	bl	8004380 <__malloc_unlock>
 8004292:	e003      	b.n	800429c <_malloc_r+0x58>
 8004294:	2d00      	cmp	r5, #0
 8004296:	dade      	bge.n	8004256 <_malloc_r+0x12>
 8004298:	230c      	movs	r3, #12
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	2000      	movs	r0, #0
 800429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	1b5b      	subs	r3, r3, r5
 80042a4:	d419      	bmi.n	80042da <_malloc_r+0x96>
 80042a6:	2b0b      	cmp	r3, #11
 80042a8:	d903      	bls.n	80042b2 <_malloc_r+0x6e>
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	18e4      	adds	r4, r4, r3
 80042ae:	6025      	str	r5, [r4, #0]
 80042b0:	e003      	b.n	80042ba <_malloc_r+0x76>
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	42a2      	cmp	r2, r4
 80042b6:	d10e      	bne.n	80042d6 <_malloc_r+0x92>
 80042b8:	600b      	str	r3, [r1, #0]
 80042ba:	0030      	movs	r0, r6
 80042bc:	f000 f860 	bl	8004380 <__malloc_unlock>
 80042c0:	0020      	movs	r0, r4
 80042c2:	2207      	movs	r2, #7
 80042c4:	300b      	adds	r0, #11
 80042c6:	1d23      	adds	r3, r4, #4
 80042c8:	4390      	bics	r0, r2
 80042ca:	1ac2      	subs	r2, r0, r3
 80042cc:	4298      	cmp	r0, r3
 80042ce:	d0e6      	beq.n	800429e <_malloc_r+0x5a>
 80042d0:	1a1b      	subs	r3, r3, r0
 80042d2:	50a3      	str	r3, [r4, r2]
 80042d4:	e7e3      	b.n	800429e <_malloc_r+0x5a>
 80042d6:	6053      	str	r3, [r2, #4]
 80042d8:	e7ef      	b.n	80042ba <_malloc_r+0x76>
 80042da:	0022      	movs	r2, r4
 80042dc:	6864      	ldr	r4, [r4, #4]
 80042de:	e7c2      	b.n	8004266 <_malloc_r+0x22>
 80042e0:	2303      	movs	r3, #3
 80042e2:	1cc4      	adds	r4, r0, #3
 80042e4:	439c      	bics	r4, r3
 80042e6:	42a0      	cmp	r0, r4
 80042e8:	d0e1      	beq.n	80042ae <_malloc_r+0x6a>
 80042ea:	1a21      	subs	r1, r4, r0
 80042ec:	0030      	movs	r0, r6
 80042ee:	f000 f82d 	bl	800434c <_sbrk_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	d1db      	bne.n	80042ae <_malloc_r+0x6a>
 80042f6:	e7c7      	b.n	8004288 <_malloc_r+0x44>
 80042f8:	200000e0 	.word	0x200000e0
 80042fc:	200000e4 	.word	0x200000e4

08004300 <_realloc_r>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	0007      	movs	r7, r0
 8004304:	000d      	movs	r5, r1
 8004306:	0016      	movs	r6, r2
 8004308:	2900      	cmp	r1, #0
 800430a:	d105      	bne.n	8004318 <_realloc_r+0x18>
 800430c:	0011      	movs	r1, r2
 800430e:	f7ff ff99 	bl	8004244 <_malloc_r>
 8004312:	0004      	movs	r4, r0
 8004314:	0020      	movs	r0, r4
 8004316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004318:	2a00      	cmp	r2, #0
 800431a:	d103      	bne.n	8004324 <_realloc_r+0x24>
 800431c:	f7ff ff48 	bl	80041b0 <_free_r>
 8004320:	0034      	movs	r4, r6
 8004322:	e7f7      	b.n	8004314 <_realloc_r+0x14>
 8004324:	f000 f834 	bl	8004390 <_malloc_usable_size_r>
 8004328:	002c      	movs	r4, r5
 800432a:	42b0      	cmp	r0, r6
 800432c:	d2f2      	bcs.n	8004314 <_realloc_r+0x14>
 800432e:	0031      	movs	r1, r6
 8004330:	0038      	movs	r0, r7
 8004332:	f7ff ff87 	bl	8004244 <_malloc_r>
 8004336:	1e04      	subs	r4, r0, #0
 8004338:	d0ec      	beq.n	8004314 <_realloc_r+0x14>
 800433a:	0029      	movs	r1, r5
 800433c:	0032      	movs	r2, r6
 800433e:	f7ff ff1a 	bl	8004176 <memcpy>
 8004342:	0029      	movs	r1, r5
 8004344:	0038      	movs	r0, r7
 8004346:	f7ff ff33 	bl	80041b0 <_free_r>
 800434a:	e7e3      	b.n	8004314 <_realloc_r+0x14>

0800434c <_sbrk_r>:
 800434c:	2300      	movs	r3, #0
 800434e:	b570      	push	{r4, r5, r6, lr}
 8004350:	4d06      	ldr	r5, [pc, #24]	; (800436c <_sbrk_r+0x20>)
 8004352:	0004      	movs	r4, r0
 8004354:	0008      	movs	r0, r1
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	f7fc ff58 	bl	800120c <_sbrk>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d103      	bne.n	8004368 <_sbrk_r+0x1c>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d000      	beq.n	8004368 <_sbrk_r+0x1c>
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	bd70      	pop	{r4, r5, r6, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	200002bc 	.word	0x200002bc

08004370 <__malloc_lock>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4802      	ldr	r0, [pc, #8]	; (800437c <__malloc_lock+0xc>)
 8004374:	f000 f814 	bl	80043a0 <__retarget_lock_acquire_recursive>
 8004378:	bd10      	pop	{r4, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	200002c4 	.word	0x200002c4

08004380 <__malloc_unlock>:
 8004380:	b510      	push	{r4, lr}
 8004382:	4802      	ldr	r0, [pc, #8]	; (800438c <__malloc_unlock+0xc>)
 8004384:	f000 f80d 	bl	80043a2 <__retarget_lock_release_recursive>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	200002c4 	.word	0x200002c4

08004390 <_malloc_usable_size_r>:
 8004390:	1f0b      	subs	r3, r1, #4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	1f18      	subs	r0, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	da01      	bge.n	800439e <_malloc_usable_size_r+0xe>
 800439a:	580b      	ldr	r3, [r1, r0]
 800439c:	18c0      	adds	r0, r0, r3
 800439e:	4770      	bx	lr

080043a0 <__retarget_lock_acquire_recursive>:
 80043a0:	4770      	bx	lr

080043a2 <__retarget_lock_release_recursive>:
 80043a2:	4770      	bx	lr

080043a4 <_init>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr

080043b0 <_fini>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr
