
VERICI-DEVRE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a30  08003a30  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08003a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000018c  08003bc4  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003bc4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4b2  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a3  00000000  00000000  0002c666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010cc8  00000000  00000000  0002f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c35a  00000000  00000000  00040350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067ef3  00000000  00000000  0004c6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b459d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a08  00000000  00000000  000b45f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000018c 	.word	0x2000018c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003964 	.word	0x08003964

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000190 	.word	0x20000190
 8000104:	08003964 	.word	0x08003964

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <delayMicroseconds>:
void vSpi3BurstReadFIFO(byte ptr[], byte length);     /** SPI-3 burst read N byte to FIFO**/

void vSpi3WriteByte(byte dat);    /** SPI-3 send one byte **/
void delayMicroseconds(void);

void delayMicroseconds(){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
	 // for (int i = 0; i <= 1; i++){
	  		  //HAL_UART_Transmit( &hlpuart1, (uint8_t *)"geliyor\r\n",9, 100);
int i=0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]
 // HAL_UART_Transmit( &hlpuart1, (uint8_t *)"giriyor\r\n",9, 100);

//HAL_Delay(1);
	  	  //}
  }
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}

080004ae <InputSDIO>:

void InputSDIO(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 fa49 	bl	8003954 <memset>
  	    /* Check the parameters */
	GPIO_InitStruct.Pin = SDIO_Pin;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2280      	movs	r2, #128	; 0x80
 80004c6:	00d2      	lsls	r2, r2, #3
 80004c8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	1d3a      	adds	r2, r7, #4
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fa40 	bl	8001964 <HAL_GPIO_Init>
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b006      	add	sp, #24
 80004ea:	bd80      	pop	{r7, pc}

080004ec <OutputSDIO>:
void OutputSDIO(void){
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <OutputSDIO+0xb8>)
 80004f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <OutputSDIO+0xb8>)
 80004f8:	2104      	movs	r1, #4
 80004fa:	430a      	orrs	r2, r1
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <OutputSDIO+0xb8>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	2204      	movs	r2, #4
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <OutputSDIO+0xb8>)
 800050c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <OutputSDIO+0xb8>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	430a      	orrs	r2, r1
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <OutputSDIO+0xb8>)
 8000518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	4013      	ands	r3, r2
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <OutputSDIO+0xb8>)
 8000524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000526:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <OutputSDIO+0xb8>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <OutputSDIO+0xb8>)
 8000530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <OutputSDIO+0xb8>)
 800053c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <OutputSDIO+0xb8>)
 8000540:	2102      	movs	r1, #2
 8000542:	430a      	orrs	r2, r1
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <OutputSDIO+0xb8>)
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	2202      	movs	r2, #2
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	00d9      	lsls	r1, r3, #3
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2200      	movs	r2, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fb8c 	bl	8001c7a <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	2414      	movs	r4, #20
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f003 f9f1 	bl	8003954 <memset>
  	GPIO_InitStruct.Pin = SDIO_Pin;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	00d2      	lsls	r2, r2, #3
 800057a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2201      	movs	r2, #1
 8000580:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	187a      	adds	r2, r7, r1
 8000590:	23a0      	movs	r3, #160	; 0xa0
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f001 f9e4 	bl	8001964 <HAL_GPIO_Init>
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b00b      	add	sp, #44	; 0x2c
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	40021000 	.word	0x40021000

080005a8 <OutputSDCK>:

void OutputSDCK(void){
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b08b      	sub	sp, #44	; 0x2c
 80005ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <OutputSDCK+0xb8>)
 80005b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <OutputSDCK+0xb8>)
 80005b4:	2104      	movs	r1, #4
 80005b6:	430a      	orrs	r2, r1
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <OutputSDCK+0xb8>)
 80005bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005be:	2204      	movs	r2, #4
 80005c0:	4013      	ands	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <OutputSDCK+0xb8>)
 80005c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <OutputSDCK+0xb8>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	430a      	orrs	r2, r1
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <OutputSDCK+0xb8>)
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <OutputSDCK+0xb8>)
 80005e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <OutputSDCK+0xb8>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <OutputSDCK+0xb8>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ee:	2201      	movs	r2, #1
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <OutputSDCK+0xb8>)
 80005f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <OutputSDCK+0xb8>)
 80005fc:	2102      	movs	r1, #2
 80005fe:	430a      	orrs	r2, r1
 8000600:	62da      	str	r2, [r3, #44]	; 0x2c
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <OutputSDCK+0xb8>)
 8000604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000606:	2202      	movs	r2, #2
 8000608:	4013      	ands	r3, r2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	0099      	lsls	r1, r3, #2
 8000612:	23a0      	movs	r3, #160	; 0xa0
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2200      	movs	r2, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fb2e 	bl	8001c7a <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	2414      	movs	r4, #20
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0018      	movs	r0, r3
 8000624:	2314      	movs	r3, #20
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f003 f993 	bl	8003954 <memset>
  	GPIO_InitStruct.Pin = SCLK_Pin;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	0092      	lsls	r2, r2, #2
 8000636:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	187a      	adds	r2, r7, r1
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f001 f986 	bl	8001964 <HAL_GPIO_Init>

}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b00b      	add	sp, #44	; 0x2c
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	40021000 	.word	0x40021000

08000664 <OutputFCSB>:

void OutputFCSB(void){
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b08b      	sub	sp, #44	; 0x2c
 8000668:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <OutputFCSB+0xb4>)
 800066c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <OutputFCSB+0xb4>)
 8000670:	2104      	movs	r1, #4
 8000672:	430a      	orrs	r2, r1
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <OutputFCSB+0xb4>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	2204      	movs	r2, #4
 800067c:	4013      	ands	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	4b25      	ldr	r3, [pc, #148]	; (8000718 <OutputFCSB+0xb4>)
 8000684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <OutputFCSB+0xb4>)
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	430a      	orrs	r2, r1
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <OutputFCSB+0xb4>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	4013      	ands	r3, r2
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <OutputFCSB+0xb4>)
 800069c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <OutputFCSB+0xb4>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <OutputFCSB+0xb4>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <OutputFCSB+0xb4>)
 80006b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <OutputFCSB+0xb4>)
 80006b8:	2102      	movs	r1, #2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <OutputFCSB+0xb4>)
 80006c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c2:	2202      	movs	r2, #2
 80006c4:	4013      	ands	r3, r2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 80006ca:	23a0      	movs	r3, #160	; 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2200      	movs	r2, #0
 80006d0:	2104      	movs	r1, #4
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fad1 	bl	8001c7a <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	2414      	movs	r4, #20
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f003 f936 	bl	8003954 <memset>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 80006e8:	0021      	movs	r1, r4
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2204      	movs	r2, #4
 80006ee:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	187a      	adds	r2, r7, r1
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f001 f92a 	bl	8001964 <HAL_GPIO_Init>


}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b00b      	add	sp, #44	; 0x2c
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	40021000 	.word	0x40021000

0800071c <OutputCSB>:

void OutputCSB(void){
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08b      	sub	sp, #44	; 0x2c
 8000720:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <OutputCSB+0xb4>)
 8000724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <OutputCSB+0xb4>)
 8000728:	2104      	movs	r1, #4
 800072a:	430a      	orrs	r2, r1
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <OutputCSB+0xb4>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	2204      	movs	r2, #4
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <OutputCSB+0xb4>)
 800073c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <OutputCSB+0xb4>)
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	430a      	orrs	r2, r1
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <OutputCSB+0xb4>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	4013      	ands	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <OutputCSB+0xb4>)
 8000754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <OutputCSB+0xb4>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <OutputCSB+0xb4>)
 8000760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <OutputCSB+0xb4>)
 800076c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <OutputCSB+0xb4>)
 8000770:	2102      	movs	r1, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <OutputCSB+0xb4>)
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	2202      	movs	r2, #2
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 8000782:	23a0      	movs	r3, #160	; 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fa75 	bl	8001c7a <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	2414      	movs	r4, #20
 8000792:	193b      	adds	r3, r7, r4
 8000794:	0018      	movs	r0, r3
 8000796:	2314      	movs	r3, #20
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f003 f8da 	bl	8003954 <memset>
  	GPIO_InitStruct.Pin = CSB_Pin;
 80007a0:	0021      	movs	r1, r4
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2202      	movs	r2, #2
 80007a6:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2201      	movs	r2, #1
 80007ac:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	187a      	adds	r2, r7, r1
 80007bc:	23a0      	movs	r3, #160	; 0xa0
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 f8ce 	bl	8001964 <HAL_GPIO_Init>
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b00b      	add	sp, #44	; 0x2c
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <vSpi3Init>:

void vSpi3Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  OutputCSB();
 80007d8:	f7ff ffa0 	bl	800071c <OutputCSB>
  OutputFCSB();
 80007dc:	f7ff ff42 	bl	8000664 <OutputFCSB>
  OutputSDCK();
 80007e0:	f7ff fee2 	bl	80005a8 <OutputSDCK>
  OutputSDIO();
 80007e4:	f7ff fe82 	bl	80004ec <OutputSDIO>

  SetCSB();
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2201      	movs	r2, #1
 80007ee:	2102      	movs	r1, #2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fa42 	bl	8001c7a <HAL_GPIO_WritePin>
  SetFCSB();
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2201      	movs	r2, #1
 80007fc:	2104      	movs	r1, #4
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fa3b 	bl	8001c7a <HAL_GPIO_WritePin>
  SetSDIO();
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	00d9      	lsls	r1, r3, #3
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2201      	movs	r2, #1
 800080e:	0018      	movs	r0, r3
 8000810:	f001 fa33 	bl	8001c7a <HAL_GPIO_WritePin>
  ClrSDCK();
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	0099      	lsls	r1, r3, #2
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2200      	movs	r2, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fa2b 	bl	8001c7a <HAL_GPIO_WritePin>
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <vSpi3WriteByte>:
**Func:   SPI-3 send one byte
**Input:
**Output:
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	0002      	movs	r2, r0
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	701a      	strb	r2, [r3, #0]

  byte bitcnt;

  SetFCSB();        //FCSB = 1;
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	2104      	movs	r1, #4
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fa1b 	bl	8001c7a <HAL_GPIO_WritePin>

  OutputSDIO();     //SDA output mode
 8000844:	f7ff fe52 	bl	80004ec <OutputSDIO>
  SetSDIO();        //    output 1
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	00d9      	lsls	r1, r3, #3
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	2201      	movs	r2, #1
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fa11 	bl	8001c7a <HAL_GPIO_WritePin>

  ClrSDCK();
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	0099      	lsls	r1, r3, #2
 800085c:	23a0      	movs	r3, #160	; 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	2200      	movs	r2, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f001 fa09 	bl	8001c7a <HAL_GPIO_WritePin>
  ClrCSB();
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2200      	movs	r2, #0
 800086e:	2102      	movs	r1, #2
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fa02 	bl	8001c7a <HAL_GPIO_WritePin>

  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000876:	230f      	movs	r3, #15
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	2208      	movs	r2, #8
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e034      	b.n	80008ea <vSpi3WriteByte+0xc0>
    {
    ClrSDCK();
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	0099      	lsls	r1, r3, #2
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2200      	movs	r2, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f001 f9f5 	bl	8001c7a <HAL_GPIO_WritePin>
    delayMicroseconds();//delayMicroseconds(SPI3_SPEED);
 8000890:	f7ff fe04 	bl	800049c <delayMicroseconds>
    if(dat&0x80)
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	da08      	bge.n	80008b0 <vSpi3WriteByte+0x86>
      SetSDIO();
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	00d9      	lsls	r1, r3, #3
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2201      	movs	r2, #1
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 f9e6 	bl	8001c7a <HAL_GPIO_WritePin>
 80008ae:	e007      	b.n	80008c0 <vSpi3WriteByte+0x96>
    else
      ClrSDIO();
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	00d9      	lsls	r1, r3, #3
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2200      	movs	r2, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 f9dd 	bl	8001c7a <HAL_GPIO_WritePin>
    SetSDCK();
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	0099      	lsls	r1, r3, #2
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2201      	movs	r2, #1
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 f9d5 	bl	8001c7a <HAL_GPIO_WritePin>
    dat <<= 1;
 80008d0:	1dfa      	adds	r2, r7, #7
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	18db      	adds	r3, r3, r3
 80008d8:	7013      	strb	r3, [r2, #0]
    delayMicroseconds();//delayMicroseconds(SPI3_SPEED);
 80008da:	f7ff fddf 	bl	800049c <delayMicroseconds>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 80008de:	210f      	movs	r1, #15
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	3a01      	subs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	230f      	movs	r3, #15
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1c5      	bne.n	8000880 <vSpi3WriteByte+0x56>
    }
  ClrSDCK();
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	0099      	lsls	r1, r3, #2
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2200      	movs	r2, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 f9bb 	bl	8001c7a <HAL_GPIO_WritePin>
  SetSDIO();
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	00d9      	lsls	r1, r3, #3
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	2201      	movs	r2, #1
 800090e:	0018      	movs	r0, r3
 8000910:	f001 f9b3 	bl	8001c7a <HAL_GPIO_WritePin>
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}

0800091c <bSpi3ReadByte>:
**Func:   SPI-3 read one byte
**Input:
**Output:
**********************************************************/
byte bSpi3ReadByte(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  byte RdPara = 0;
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
  byte bitcnt;

  ClrCSB();
 8000928:	23a0      	movs	r3, #160	; 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2200      	movs	r2, #0
 800092e:	2102      	movs	r1, #2
 8000930:	0018      	movs	r0, r3
 8000932:	f001 f9a2 	bl	8001c7a <HAL_GPIO_WritePin>
  InputSDIO();
 8000936:	f7ff fdba 	bl	80004ae <InputSDIO>

  for(bitcnt=8; bitcnt!=0; bitcnt--)
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	2208      	movs	r2, #8
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e04c      	b.n	80009dc <bSpi3ReadByte+0xc0>
    {
    ClrSDCK();
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	0099      	lsls	r1, r3, #2
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2200      	movs	r2, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f001 f994 	bl	8001c7a <HAL_GPIO_WritePin>
    RdPara <<= 1;
 8000952:	1dfa      	adds	r2, r7, #7
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	18db      	adds	r3, r3, r3
 800095a:	7013      	strb	r3, [r2, #0]
    delayMicroseconds();//delayMicroseconds(SPI3_SPEED);
 800095c:	f7ff fd9e 	bl	800049c <delayMicroseconds>
    SetSDCK();
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	0099      	lsls	r1, r3, #2
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2201      	movs	r2, #1
 800096a:	0018      	movs	r0, r3
 800096c:	f001 f985 	bl	8001c7a <HAL_GPIO_WritePin>
    delayMicroseconds();//delayMicroseconds(SPI3_SPEED);
 8000970:	f7ff fd94 	bl	800049c <delayMicroseconds>

    if(HAL_GPIO_ReadPin(SDIO_GPIO_Port, SDIO_Pin) == 1){
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	00da      	lsls	r2, r3, #3
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f95e 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000984:	0003      	movs	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	d103      	bne.n	8000992 <bSpi3ReadByte+0x76>
          c=1;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <bSpi3ReadByte+0x108>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	e00c      	b.n	80009ac <bSpi3ReadByte+0x90>
        }else if(HAL_GPIO_ReadPin(SDIO_GPIO_Port, SDIO_Pin) == 0){
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	23a0      	movs	r3, #160	; 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f94f 	bl	8001c40 <HAL_GPIO_ReadPin>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d102      	bne.n	80009ac <bSpi3ReadByte+0x90>
          c=0;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <bSpi3ReadByte+0x108>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
        }


    if(c==1)
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <bSpi3ReadByte+0x108>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d106      	bne.n	80009c2 <bSpi3ReadByte+0xa6>
      RdPara |= 0x01;
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	1dfa      	adds	r2, r7, #7
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	2101      	movs	r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	e007      	b.n	80009d2 <bSpi3ReadByte+0xb6>
    else if(c==0)
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <bSpi3ReadByte+0x108>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d103      	bne.n	80009d2 <bSpi3ReadByte+0xb6>
      RdPara |= 0x00;
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	1dfa      	adds	r2, r7, #7
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	701a      	strb	r2, [r3, #0]
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 80009d2:	1dbb      	adds	r3, r7, #6
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	3a01      	subs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1ae      	bne.n	8000942 <bSpi3ReadByte+0x26>
    }
  ClrSDCK();
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	0099      	lsls	r1, r3, #2
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	2200      	movs	r2, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 f943 	bl	8001c7a <HAL_GPIO_WritePin>
  OutputSDIO();
 80009f4:	f7ff fd7a 	bl	80004ec <OutputSDIO>
  SetSDIO();
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	00d9      	lsls	r1, r3, #3
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2201      	movs	r2, #1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f939 	bl	8001c7a <HAL_GPIO_WritePin>
  SetCSB();
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2102      	movs	r1, #2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 f932 	bl	8001c7a <HAL_GPIO_WritePin>
  return(RdPara);
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000230 	.word	0x20000230

08000a28 <vSpi3Write>:
**Func:   SPI Write One word
**Input:  Write word
**Output: none
**********************************************************/
void vSpi3Write(word dat)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  vSpi3WriteByte((byte)(dat>>8)&0x7F);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	227f      	movs	r2, #127	; 0x7f
 8000a38:	4013      	ands	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff fef4 	bl	800082a <vSpi3WriteByte>
  vSpi3WriteByte((byte)dat);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff feef 	bl	800082a <vSpi3WriteByte>
  SetCSB();
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	2201      	movs	r2, #1
 8000a52:	2102      	movs	r1, #2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 f910 	bl	8001c7a <HAL_GPIO_WritePin>
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <bSpi3Read>:
**Func:   SPI-3 Read One byte
**Input:  readout addresss
**Output: readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	0002      	movs	r2, r0
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	701a      	strb	r2, [r3, #0]
    vSpi3WriteByte(addr|0x80);
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	4252      	negs	r2, r2
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fed5 	bl	800082a <vSpi3WriteByte>
  return(bSpi3ReadByte());
 8000a80:	f7ff ff4c 	bl	800091c <bSpi3ReadByte>
 8000a84:	0003      	movs	r3, r0
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <vSpi3WriteFIFO>:
**Func:   SPI-3 send one byte to FIFO
**Input:  one byte buffer
**Output: none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	0002      	movs	r2, r0
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	701a      	strb	r2, [r3, #0]
  byte bitcnt;

  SetCSB();
 8000a9a:	23a0      	movs	r3, #160	; 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 f8e9 	bl	8001c7a <HAL_GPIO_WritePin>
  OutputSDIO();
 8000aa8:	f7ff fd20 	bl	80004ec <OutputSDIO>
  ClrSDCK();
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	0099      	lsls	r1, r3, #2
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 f8df 	bl	8001c7a <HAL_GPIO_WritePin>
  ClrFCSB();      //FCSB = 0
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 f8d8 	bl	8001c7a <HAL_GPIO_WritePin>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000aca:	230f      	movs	r3, #15
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	2208      	movs	r2, #8
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e034      	b.n	8000b3e <vSpi3WriteFIFO+0xb0>
    {
    ClrSDCK();
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	0099      	lsls	r1, r3, #2
 8000ad8:	23a0      	movs	r3, #160	; 0xa0
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2200      	movs	r2, #0
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f8cb 	bl	8001c7a <HAL_GPIO_WritePin>

    if(dat&0x80)
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da08      	bge.n	8000b00 <vSpi3WriteFIFO+0x72>
      SetSDIO();
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	00d9      	lsls	r1, r3, #3
 8000af2:	23a0      	movs	r3, #160	; 0xa0
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	2201      	movs	r2, #1
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 f8be 	bl	8001c7a <HAL_GPIO_WritePin>
 8000afe:	e007      	b.n	8000b10 <vSpi3WriteFIFO+0x82>
    else
      ClrSDIO();
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	00d9      	lsls	r1, r3, #3
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 f8b5 	bl	8001c7a <HAL_GPIO_WritePin>
    delayMicroseconds();//delayMicroseconds(SPI3_SPEED);
 8000b10:	f7ff fcc4 	bl	800049c <delayMicroseconds>
    SetSDCK();
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	0099      	lsls	r1, r3, #2
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 f8ab 	bl	8001c7a <HAL_GPIO_WritePin>
    delayMicroseconds();//delayMicroseconds(SPI3_SPEED);
 8000b24:	f7ff fcba 	bl	800049c <delayMicroseconds>
    dat <<= 1;
 8000b28:	1dfa      	adds	r2, r7, #7
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	18db      	adds	r3, r3, r3
 8000b30:	7013      	strb	r3, [r2, #0]
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000b32:	210f      	movs	r1, #15
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	781a      	ldrb	r2, [r3, #0]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	3a01      	subs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	230f      	movs	r3, #15
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1c5      	bne.n	8000ad4 <vSpi3WriteFIFO+0x46>
    }
  ClrSDCK();
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	0099      	lsls	r1, r3, #2
 8000b4c:	23a0      	movs	r3, #160	; 0xa0
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	2200      	movs	r2, #0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 f891 	bl	8001c7a <HAL_GPIO_WritePin>
  delayMicroseconds();//delayMicroseconds(SPI3_SPEED);    //Time-Critical
 8000b58:	f7ff fca0 	bl	800049c <delayMicroseconds>
  delayMicroseconds();//delayMicroseconds(SPI3_SPEED);    //Time-Critical
 8000b5c:	f7ff fc9e 	bl	800049c <delayMicroseconds>
  SetFCSB();
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	2201      	movs	r2, #1
 8000b66:	2104      	movs	r1, #4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 f886 	bl	8001c7a <HAL_GPIO_WritePin>
  SetSDIO();
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	00d9      	lsls	r1, r3, #3
 8000b72:	23a0      	movs	r3, #160	; 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	2201      	movs	r2, #1
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 f87e 	bl	8001c7a <HAL_GPIO_WritePin>
  delayMicroseconds();//delayMicroseconds(SPI3_SPEED);    //Time-Critical
 8000b7e:	f7ff fc8d 	bl	800049c <delayMicroseconds>
  delayMicroseconds();//delayMicroseconds(SPI3_SPEED);    //Time-Critical
 8000b82:	f7ff fc8b 	bl	800049c <delayMicroseconds>
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <vSpi3BurstWriteFIFO>:
**Func:   burst wirte N byte to FIFO
**Input:  array length & head pointer
**Output: none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	000a      	movs	r2, r1
 8000b98:	1cfb      	adds	r3, r7, #3
 8000b9a:	701a      	strb	r2, [r3, #0]
  byte i;
  if(length!=0x00)
 8000b9c:	1cfb      	adds	r3, r7, #3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d023      	beq.n	8000bec <vSpi3BurstWriteFIFO+0x5e>
  {
	  for(i=0;i<length;i++)
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e00d      	b.n	8000bca <vSpi3BurstWriteFIFO+0x3c>
		  vSpi3WriteFIFO(ptr[i]);
 8000bae:	240f      	movs	r4, #15
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff ff67 	bl	8000a8e <vSpi3WriteFIFO>
	  for(i=0;i<length;i++)
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	3201      	adds	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	210f      	movs	r1, #15
 8000bcc:	187a      	adds	r2, r7, r1
 8000bce:	1cfb      	adds	r3, r7, #3
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d3ea      	bcc.n	8000bae <vSpi3BurstWriteFIFO+0x20>
	  byte vSpi3WriteFIFO1;
	  vSpi3WriteFIFO1 = bSpi3Read(i);
 8000bd8:	230e      	movs	r3, #14
 8000bda:	18fc      	adds	r4, r7, r3
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff3e 	bl	8000a62 <bSpi3Read>
 8000be6:	0003      	movs	r3, r0
 8000be8:	7023      	strb	r3, [r4, #0]
  }
  return;
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46c0      	nop			; (mov r8, r8)
}
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b005      	add	sp, #20
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <bGoTx>:
  byte  PktRssi;
  byte  RssiTrig;
  byte  node_id_size=0;     //0: none,disable,  max:4
  word node_id=0;        //16bit, for testing
  byte bGoTx(void)
  {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
    }
    if(i>=100)
      return(false);
    #endif

    vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <bGoTx+0x60>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff13 	bl	8000a28 <vSpi3Write>
    for(i=0; i<100; i++){
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e013      	b.n	8000c32 <bGoTx+0x3e>
      delayMicroseconds();
 8000c0a:	f7ff fc47 	bl	800049c <delayMicroseconds>
      tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000c0e:	2061      	movs	r0, #97	; 0x61
 8000c10:	f7ff ff27 	bl	8000a62 <bSpi3Read>
 8000c14:	0003      	movs	r3, r0
 8000c16:	0019      	movs	r1, r3
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	701a      	strb	r2, [r3, #0]
      if(tmp==MODE_STA_TX)
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b06      	cmp	r3, #6
 8000c26:	d009      	beq.n	8000c3c <bGoTx+0x48>
    for(i=0; i<100; i++){
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	3201      	adds	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b63      	cmp	r3, #99	; 0x63
 8000c38:	d9e7      	bls.n	8000c0a <bGoTx+0x16>
 8000c3a:	e000      	b.n	8000c3e <bGoTx+0x4a>
        break;
 8000c3c:	46c0      	nop			; (mov r8, r8)
    }
    if(i>=100)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b63      	cmp	r3, #99	; 0x63
 8000c44:	d901      	bls.n	8000c4a <bGoTx+0x56>
      return(false);
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <bGoTx+0x58>
    else
      return(true);
 8000c4a:	2301      	movs	r3, #1
  }
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	00006040 	.word	0x00006040

08000c58 <bGoSleep>:
  **Function: Entry Sleep Mode
  **Input:    none
  **Output:   none
  **********************************************************/
  byte bGoSleep(void)
  {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
    byte tmp;

    vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <bGoSleep+0x3c>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fee1 	bl	8000a28 <vSpi3Write>
    delayMicroseconds();   //enough?
 8000c66:	f7ff fc19 	bl	800049c <delayMicroseconds>
    tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000c6a:	2061      	movs	r0, #97	; 0x61
 8000c6c:	f7ff fef9 	bl	8000a62 <bSpi3Read>
 8000c70:	0003      	movs	r3, r0
 8000c72:	0019      	movs	r1, r3
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	220f      	movs	r2, #15
 8000c78:	400a      	ands	r2, r1
 8000c7a:	701a      	strb	r2, [r3, #0]
    if(tmp==MODE_GO_SLEEP)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b10      	cmp	r3, #16
 8000c82:	d101      	bne.n	8000c88 <bGoSleep+0x30>
      return(true);
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <bGoSleep+0x32>
    else
      return(false);
 8000c88:	2300      	movs	r3, #0
  }
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	00006010 	.word	0x00006010

08000c98 <bGoStandby>:
  **Function: Entry Standby Mode
  **Input:    none
  **Output:   none
  **********************************************************/
  byte bGoStandby(void)
  {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
    byte tmp, i;

    RssiTrig = false;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <bGoStandby+0x68>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <bGoStandby+0x6c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff febe 	bl	8000a28 <vSpi3Write>
    for(i=0; i<100; i++){
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e013      	b.n	8000cdc <bGoStandby+0x44>
      delayMicroseconds();
 8000cb4:	f7ff fbf2 	bl	800049c <delayMicroseconds>
      tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000cb8:	2061      	movs	r0, #97	; 0x61
 8000cba:	f7ff fed2 	bl	8000a62 <bSpi3Read>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	1dbb      	adds	r3, r7, #6
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]

      if(tmp==MODE_STA_STBY)
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d009      	beq.n	8000ce6 <bGoStandby+0x4e>
    for(i=0; i<100; i++){
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	3201      	adds	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b63      	cmp	r3, #99	; 0x63
 8000ce2:	d9e7      	bls.n	8000cb4 <bGoStandby+0x1c>
 8000ce4:	e000      	b.n	8000ce8 <bGoStandby+0x50>
        break;
 8000ce6:	46c0      	nop			; (mov r8, r8)
    }
    if(i>=100)
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b63      	cmp	r3, #99	; 0x63
 8000cee:	d901      	bls.n	8000cf4 <bGoStandby+0x5c>
      return(false);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e000      	b.n	8000cf6 <bGoStandby+0x5e>
    else
      return(true);
 8000cf4:	2301      	movs	r3, #1
  }
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	200001a9 	.word	0x200001a9
 8000d04:	00006002 	.word	0x00006002

08000d08 <vSoftReset>:
  **Function: Software reset Chipset
  **Input:    none
  **Output:   none
  **********************************************************/
  void vSoftReset(void)
  {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <vSoftReset+0x18>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff fe8a 	bl	8000a28 <vSpi3Write>
    HAL_Delay(1);       //enough?
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fd4d 	bl	80017b4 <HAL_Delay>
  }
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	00007fff 	.word	0x00007fff

08000d24 <vGpioFuncCfg>:
  **Function: GPIO Function config
  **Input:    none
  **Output:   none
  **********************************************************/
  void vGpioFuncCfg(byte io_cfg)
  {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	22ca      	movs	r2, #202	; 0xca
 8000d36:	01d2      	lsls	r2, r2, #7
 8000d38:	4694      	mov	ip, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fe73 	bl	8000a28 <vSpi3Write>
  }
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <vIntSrcCfg>:
  **Function: config interrupt source
  **Input:    int_1, int_2
  **Output:   none
  **********************************************************/
  void vIntSrcCfg(byte int_1, byte int_2)
  {
 8000d4a:	b590      	push	{r4, r7, lr}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	0002      	movs	r2, r0
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	1dbb      	adds	r3, r7, #6
 8000d58:	1c0a      	adds	r2, r1, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
    byte tmp;
    tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 8000d5c:	2066      	movs	r0, #102	; 0x66
 8000d5e:	f7ff fe80 	bl	8000a62 <bSpi3Read>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	240f      	movs	r4, #15
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	221f      	movs	r2, #31
 8000d6c:	4391      	bics	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8000d72:	193a      	adds	r2, r7, r4
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	22cc      	movs	r2, #204	; 0xcc
 8000d80:	01d2      	lsls	r2, r2, #7
 8000d82:	4694      	mov	ip, r2
 8000d84:	4463      	add	r3, ip
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fe4e 	bl	8000a28 <vSpi3Write>

    tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 8000d8c:	2067      	movs	r0, #103	; 0x67
 8000d8e:	f7ff fe68 	bl	8000a62 <bSpi3Read>
 8000d92:	0003      	movs	r3, r0
 8000d94:	0019      	movs	r1, r3
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	221f      	movs	r2, #31
 8000d9a:	4391      	bics	r1, r2
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8000da0:	193a      	adds	r2, r7, r4
 8000da2:	1dbb      	adds	r3, r7, #6
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	22ce      	movs	r2, #206	; 0xce
 8000dae:	01d2      	lsls	r2, r2, #7
 8000db0:	4694      	mov	ip, r2
 8000db2:	4463      	add	r3, ip
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fe37 	bl	8000a28 <vSpi3Write>
  }
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b005      	add	sp, #20
 8000dc0:	bd90      	pop	{r4, r7, pc}

08000dc2 <vEnableAntSwitch>:
  **Function:
  **Input:
  **Output:   none
  **********************************************************/
  void vEnableAntSwitch(byte mode)
  {
 8000dc2:	b5b0      	push	{r4, r5, r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	0002      	movs	r2, r0
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	701a      	strb	r2, [r3, #0]
    byte tmp;
    tmp = bSpi3Read(CMT23_INT1_CTL);
 8000dce:	250f      	movs	r5, #15
 8000dd0:	197c      	adds	r4, r7, r5
 8000dd2:	2066      	movs	r0, #102	; 0x66
 8000dd4:	f7ff fe45 	bl	8000a62 <bSpi3Read>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	7023      	strb	r3, [r4, #0]
    tmp&= 0x3F;
 8000ddc:	197b      	adds	r3, r7, r5
 8000dde:	197a      	adds	r2, r7, r5
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	213f      	movs	r1, #63	; 0x3f
 8000de4:	400a      	ands	r2, r1
 8000de6:	701a      	strb	r2, [r3, #0]
    switch(mode)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d002      	beq.n	8000df6 <vEnableAntSwitch+0x34>
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d009      	beq.n	8000e08 <vEnableAntSwitch+0x46>
        tmp |= RF_SWT1_EN; break;   //GPO1=RxActive; GPO2=TxActive
      case 2:
        tmp |= RF_SWT2_EN; break;   //GPO1=RxActive; GPO2=!RxActive
      case 0:
      default:
        break;              //Disable
 8000df4:	e010      	b.n	8000e18 <vEnableAntSwitch+0x56>
        tmp |= RF_SWT1_EN; break;   //GPO1=RxActive; GPO2=TxActive
 8000df6:	220f      	movs	r2, #15
 8000df8:	18bb      	adds	r3, r7, r2
 8000dfa:	18ba      	adds	r2, r7, r2
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	4249      	negs	r1, r1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e007      	b.n	8000e18 <vEnableAntSwitch+0x56>
        tmp |= RF_SWT2_EN; break;   //GPO1=RxActive; GPO2=!RxActive
 8000e08:	220f      	movs	r2, #15
 8000e0a:	18bb      	adds	r3, r7, r2
 8000e0c:	18ba      	adds	r2, r7, r2
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	430a      	orrs	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	46c0      	nop			; (mov r8, r8)
    }
    vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	22cc      	movs	r2, #204	; 0xcc
 8000e20:	01d2      	lsls	r2, r2, #7
 8000e22:	4694      	mov	ip, r2
 8000e24:	4463      	add	r3, ip
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fdfe 	bl	8000a28 <vSpi3Write>
  }
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b004      	add	sp, #16
 8000e32:	bdb0      	pop	{r4, r5, r7, pc}

08000e34 <vIntSrcEnable>:
  **Function: enable interrupt source
  **Input:    en_int
  **Output:   none
  **********************************************************/
  void vIntSrcEnable(byte en_int)
  {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	22d0      	movs	r2, #208	; 0xd0
 8000e46:	01d2      	lsls	r2, r2, #7
 8000e48:	4694      	mov	ip, r2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fdeb 	bl	8000a28 <vSpi3Write>
  }
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <bIntSrcFlagClr>:
  **Function: clear flag
  **Input:    none
  **Output:   equ CMT23_INT_EN
  **********************************************************/
  byte bIntSrcFlagClr(void)
  {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
    //byte tmp;
    //byte int_clr2 = 0;
    //byte int_clr1 = 0;
    byte flg = 0;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
      int_clr1 |= RX_TIMEOUT_CLR;
      flg |= RX_TMO_EN;
    }
    vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1); //Clear flag
  #endif
    vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <bIntSrcFlagClr+0x28>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fddc 	bl	8000a28 <vSpi3Write>
    vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF); //Clear flag
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <bIntSrcFlagClr+0x2c>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff fdd8 	bl	8000a28 <vSpi3Write>

    return(flg);
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
  }
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	00006a07 	.word	0x00006a07
 8000e88:	00006bff 	.word	0x00006bff

08000e8c <vClearFIFO>:
  **Function: clear FIFO buffer
  **Input:    none
  **Output:   FIFO state
  **********************************************************/
  byte vClearFIFO(void)
  {
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
    byte tmp;
    tmp = bSpi3Read(CMT23_FIFO_FLG);
 8000e92:	1dfc      	adds	r4, r7, #7
 8000e94:	206e      	movs	r0, #110	; 0x6e
 8000e96:	f7ff fde4 	bl	8000a62 <bSpi3Read>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	7023      	strb	r3, [r4, #0]
    vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <vClearFIFO+0x28>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff fdc1 	bl	8000a28 <vSpi3Write>
    return(tmp);
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
  }
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b003      	add	sp, #12
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	00006c03 	.word	0x00006c03

08000eb8 <vEnableWrFifo>:

  #if 1   //splite fifo, tx:32bytes, rx:32bytes;
  void vEnableWrFifo(void)
  {
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
    byte tmp;
    tmp = bSpi3Read(CMT23_FIFO_CTL);
 8000ebe:	1dfc      	adds	r4, r7, #7
 8000ec0:	2069      	movs	r0, #105	; 0x69
 8000ec2:	f7ff fdce 	bl	8000a62 <bSpi3Read>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	7023      	strb	r3, [r4, #0]
    tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	1dfa      	adds	r2, r7, #7
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	22d2      	movs	r2, #210	; 0xd2
 8000edc:	01d2      	lsls	r2, r2, #7
 8000ede:	4694      	mov	ip, r2
 8000ee0:	4463      	add	r3, ip
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fda0 	bl	8000a28 <vSpi3Write>


  }
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b003      	add	sp, #12
 8000eee:	bd90      	pop	{r4, r7, pc}

08000ef0 <vInit>:
  **Function: Init. CMT2300A
  **Input:    none
  **Output:   none
  **********************************************************/
  void vInit(void)
  {
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
    byte tmp;
    vSpi3Init();
 8000ef6:	f7ff fc6d 	bl	80007d4 <vSpi3Init>
    //GPO3In();


    vSoftReset();
 8000efa:	f7ff ff05 	bl	8000d08 <vSoftReset>
    HAL_Delay(20);
 8000efe:	2014      	movs	r0, #20
 8000f00:	f000 fc58 	bl	80017b4 <HAL_Delay>
    bGoStandby();
 8000f04:	f7ff fec8 	bl	8000c98 <bGoStandby>

    //
    tmp = bSpi3Read(CMT23_MODE_STA);
 8000f08:	1dfc      	adds	r4, r7, #7
 8000f0a:	2061      	movs	r0, #97	; 0x61
 8000f0c:	f7ff fda9 	bl	8000a62 <bSpi3Read>
 8000f10:	0003      	movs	r3, r0
 8000f12:	7023      	strb	r3, [r4, #0]
    tmp|= EEP_CPY_DIS;
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
    tmp&= (~RSTN_IN_EN);      //Disable RstPin
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	1dfa      	adds	r2, r7, #7
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	2120      	movs	r1, #32
 8000f28:	438a      	bics	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	22c2      	movs	r2, #194	; 0xc2
 8000f32:	01d2      	lsls	r2, r2, #7
 8000f34:	4694      	mov	ip, r2
 8000f36:	4463      	add	r3, ip
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff fd75 	bl	8000a28 <vSpi3Write>

    bIntSrcFlagClr();
 8000f3e:	f7ff ff8d 	bl	8000e5c <bIntSrcFlagClr>
  }
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b003      	add	sp, #12
 8000f48:	bd90      	pop	{r4, r7, pc}

08000f4a <vCfgBank>:

  void vCfgBank(word cfg[], byte length)
  {
 8000f4a:	b590      	push	{r4, r7, lr}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	000a      	movs	r2, r1
 8000f54:	1cfb      	adds	r3, r7, #3
 8000f56:	701a      	strb	r2, [r3, #0]
    byte i;

    if(length!=0){
 8000f58:	1cfb      	adds	r3, r7, #3
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01a      	beq.n	8000f96 <vCfgBank+0x4c>
      for(i=0; i<length; i++)
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e00e      	b.n	8000f88 <vCfgBank+0x3e>
        vSpi3Write(cfg[i]);
 8000f6a:	240f      	movs	r4, #15
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	18d3      	adds	r3, r2, r3
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fd55 	bl	8000a28 <vSpi3Write>
      for(i=0; i<length; i++)
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	3201      	adds	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fa      	adds	r2, r7, r3
 8000f8c:	1cfb      	adds	r3, r7, #3
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d3e9      	bcc.n	8000f6a <vCfgBank+0x20>
    }
  }
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b005      	add	sp, #20
 8000f9c:	bd90      	pop	{r4, r7, pc}

08000f9e <bSendMessage>:
    rev = 0xFF;
    return(rev);
  }

  byte bSendMessage(byte msg[], byte length)
  {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	1cfb      	adds	r3, r7, #3
 8000faa:	701a      	strb	r2, [r3, #0]

    bIntSrcFlagClr();
 8000fac:	f7ff ff56 	bl	8000e5c <bIntSrcFlagClr>

  #if 1
    //mode1
    vSetTxPayloadLength(length);
 8000fb0:	1cfb      	adds	r3, r7, #3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f813 	bl	8000fe0 <vSetTxPayloadLength>

    bGoStandby();
 8000fba:	f7ff fe6d 	bl	8000c98 <bGoStandby>

    vEnableWrFifo();
 8000fbe:	f7ff ff7b 	bl	8000eb8 <vEnableWrFifo>

    vSpi3BurstWriteFIFO(msg, length);
 8000fc2:	1cfb      	adds	r3, r7, #3
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff fddf 	bl	8000b8e <vSpi3BurstWriteFIFO>

    bGoTx();
 8000fd0:	f7ff fe10 	bl	8000bf4 <bGoTx>
    vSetTxPayloadLength(length);
    bGoTx();
    vEnableWrFifo();
    vSpi3BurstWriteFIFO(msg, length);
  #endif
    return(true);
 8000fd4:	2301      	movs	r3, #1
  }
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <vSetTxPayloadLength>:

  void vSetTxPayloadLength(word length)
  {
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    byte tmp;
    byte len;
    bGoStandby();
 8000fe8:	f7ff fe56 	bl	8000c98 <bGoStandby>
    tmp = bSpi3Read(CMT23_PKT_CTRL1);
 8000fec:	250f      	movs	r5, #15
 8000fee:	197c      	adds	r4, r7, r5
 8000ff0:	2045      	movs	r0, #69	; 0x45
 8000ff2:	f7ff fd36 	bl	8000a62 <bSpi3Read>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	7023      	strb	r3, [r4, #0]
    tmp&= 0x8F;
 8000ffa:	0028      	movs	r0, r5
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	183a      	adds	r2, r7, r0
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	2170      	movs	r1, #112	; 0x70
 8001004:	438a      	bics	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]

    if(length!=0){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d01c      	beq.n	8001048 <vSetTxPayloadLength+0x68>
      if(FixedPktLength){
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <vSetTxPayloadLength+0xc0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00c      	beq.n	8001030 <vSetTxPayloadLength+0x50>
        tmp &= ~(1<<0);   //clear bit0
 8001016:	183b      	adds	r3, r7, r0
 8001018:	183a      	adds	r2, r7, r0
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	438a      	bics	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
        len = length - 1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	230e      	movs	r3, #14
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	3a01      	subs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e00f      	b.n	8001050 <vSetTxPayloadLength+0x70>
      }
      else{
        tmp |= (1<<0);     //set bit0
 8001030:	220f      	movs	r2, #15
 8001032:	18bb      	adds	r3, r7, r2
 8001034:	18ba      	adds	r2, r7, r2
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
        len = length;
 800103e:	230e      	movs	r3, #14
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e003      	b.n	8001050 <vSetTxPayloadLength+0x70>
      }
    }else
      len = 0;
 8001048:	230e      	movs	r3, #14
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]

    tmp|= (((byte)(len>>8)&0x07)<<4);
 8001050:	240e      	movs	r4, #14
 8001052:	193b      	adds	r3, r7, r4
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	121b      	asrs	r3, r3, #8
 8001058:	b2db      	uxtb	r3, r3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	b25b      	sxtb	r3, r3
 800105e:	2270      	movs	r2, #112	; 0x70
 8001060:	4013      	ands	r3, r2
 8001062:	b25a      	sxtb	r2, r3
 8001064:	210f      	movs	r1, #15
 8001066:	187b      	adds	r3, r7, r1
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b25a      	sxtb	r2, r3
 8001070:	187b      	adds	r3, r7, r1
 8001072:	701a      	strb	r2, [r3, #0]
    vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 8001074:	187b      	adds	r3, r7, r1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	228a      	movs	r2, #138	; 0x8a
 800107a:	01d2      	lsls	r2, r2, #7
 800107c:	4694      	mov	ip, r2
 800107e:	4463      	add	r3, ip
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff fcd1 	bl	8000a28 <vSpi3Write>
    vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len); //Payload length
 8001086:	193b      	adds	r3, r7, r4
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	228c      	movs	r2, #140	; 0x8c
 800108c:	01d2      	lsls	r2, r2, #7
 800108e:	4694      	mov	ip, r2
 8001090:	4463      	add	r3, ip
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff fcc8 	bl	8000a28 <vSpi3Write>
    //bGoSleep();
  }
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bdb0      	pop	{r4, r5, r7, pc}
 80010a0:	20000234 	.word	0x20000234

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b090      	sub	sp, #64	; 0x40
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f000 fb13 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f8a1 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 f98d 	bl	80013d0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010b6:	f000 f909 	bl	80012cc <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80010ba:	f000 f935 	bl	8001328 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Basladi\r\n", 9, 100);
 80010be:	493f      	ldr	r1, [pc, #252]	; (80011bc <main+0x118>)
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <main+0x11c>)
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	2209      	movs	r2, #9
 80010c6:	f001 ff57 	bl	8002f78 <HAL_UART_Transmit>
  #define TX_NUM  21
#define TX_NUM2  2

  byte tx_buf[32] = {'H','o','p','e','R','F',' ','R','F','M',' ','C','O','B','R','F','M','3','0','0','A'};
 80010ca:	2320      	movs	r3, #32
 80010cc:	18f9      	adds	r1, r7, r3
 80010ce:	4a3d      	ldr	r2, [pc, #244]	; (80011c4 <main+0x120>)
 80010d0:	000b      	movs	r3, r1
 80010d2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80010d4:	c331      	stmia	r3!, {r0, r4, r5}
 80010d6:	ca11      	ldmia	r2!, {r0, r4}
 80010d8:	c311      	stmia	r3!, {r0, r4}
 80010da:	8812      	ldrh	r2, [r2, #0]
 80010dc:	801a      	strh	r2, [r3, #0]
 80010de:	2316      	movs	r3, #22
 80010e0:	18cb      	adds	r3, r1, r3
 80010e2:	220a      	movs	r2, #10
 80010e4:	2100      	movs	r1, #0
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 fc34 	bl	8003954 <memset>
  byte tx_buf2[32] = {'a','a'};
 80010ec:	003b      	movs	r3, r7
 80010ee:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <main+0x124>)
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	3304      	adds	r3, #4
 80010f4:	221c      	movs	r2, #28
 80010f6:	2100      	movs	r1, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f002 fc2b 	bl	8003954 <memset>


  FixedPktLength    = false;
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <main+0x128>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]

  PayloadLength     = 21;
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <main+0x12c>)
 8001106:	2215      	movs	r2, #21
 8001108:	601a      	str	r2, [r3, #0]
  vInit();
 800110a:	f7ff fef1 	bl	8000ef0 <vInit>
  vCfgBank(CMTBank, 12);
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <main+0x130>)
 8001110:	210c      	movs	r1, #12
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff ff19 	bl	8000f4a <vCfgBank>
  vCfgBank(SystemBank, 12);
 8001118:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <main+0x134>)
 800111a:	210c      	movs	r1, #12
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff ff14 	bl	8000f4a <vCfgBank>
  vCfgBank(FrequencyBank, 8);
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <main+0x138>)
 8001124:	2108      	movs	r1, #8
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff ff0f 	bl	8000f4a <vCfgBank>
  vCfgBank(DataRateBank, 24);
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <main+0x13c>)
 800112e:	2118      	movs	r1, #24
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff ff0a 	bl	8000f4a <vCfgBank>
  vCfgBank(BasebandBank, 29);
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <main+0x140>)
 8001138:	211d      	movs	r1, #29
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff ff05 	bl	8000f4a <vCfgBank>
  vCfgBank(TXBank, 11);
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <main+0x144>)
 8001142:	210b      	movs	r1, #11
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ff00 	bl	8000f4a <vCfgBank>
  vEnableAntSwitch(0);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fe39 	bl	8000dc2 <vEnableAntSwitch>
  vGpioFuncCfg(GPIO1_DCLK+GPIO2_DCLK+GPIO3_INT2);   //GPIO Maping
 8001150:	202f      	movs	r0, #47	; 0x2f
 8001152:	f7ff fde7 	bl	8000d24 <vGpioFuncCfg>

  vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 8001156:	210a      	movs	r1, #10
 8001158:	2010      	movs	r0, #16
 800115a:	f7ff fdf6 	bl	8000d4a <vIntSrcCfg>
  vIntSrcEnable(TX_DONE_EN);
 800115e:	2020      	movs	r0, #32
 8001160:	f7ff fe68 	bl	8000e34 <vIntSrcEnable>
  vClearFIFO();
 8001164:	f7ff fe92 	bl	8000e8c <vClearFIFO>
  bGoSleep();
 8001168:	f7ff fd76 	bl	8000c58 <bGoSleep>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Tx...\r\n", 7, 100);
 800116c:	491f      	ldr	r1, [pc, #124]	; (80011ec <main+0x148>)
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <main+0x11c>)
 8001170:	2364      	movs	r3, #100	; 0x64
 8001172:	2207      	movs	r2, #7
 8001174:	f001 ff00 	bl	8002f78 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static int tx_cnt=0;

	  bSendMessage(tx_buf2, TX_NUM2);
 8001178:	003b      	movs	r3, r7
 800117a:	2102      	movs	r1, #2
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ff0e 	bl	8000f9e <bSendMessage>
	  while(GPO3_L());
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	015a      	lsls	r2, r3, #5
 8001188:	23a0      	movs	r3, #160	; 0xa0
 800118a:	05db      	lsls	r3, r3, #23
 800118c:	0011      	movs	r1, r2
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fd56 	bl	8001c40 <HAL_GPIO_ReadPin>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d0f5      	beq.n	8001184 <main+0xe0>
	 bIntSrcFlagClr();
 8001198:	f7ff fe60 	bl	8000e5c <bIntSrcFlagClr>
	 vClearFIFO();
 800119c:	f7ff fe76 	bl	8000e8c <vClearFIFO>
	  bGoSleep();
 80011a0:	f7ff fd5a 	bl	8000c58 <bGoSleep>
	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"TX......\r\n",12, 100);
 80011a4:	4912      	ldr	r1, [pc, #72]	; (80011f0 <main+0x14c>)
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <main+0x11c>)
 80011a8:	2364      	movs	r3, #100	; 0x64
 80011aa:	220c      	movs	r2, #12
 80011ac:	f001 fee4 	bl	8002f78 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80011b0:	23fa      	movs	r3, #250	; 0xfa
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fafd 	bl	80017b4 <HAL_Delay>
  {
 80011ba:	e7dd      	b.n	8001178 <main+0xd4>
 80011bc:	0800397c 	.word	0x0800397c
 80011c0:	200001ac 	.word	0x200001ac
 80011c4:	0800399c 	.word	0x0800399c
 80011c8:	00006161 	.word	0x00006161
 80011cc:	20000234 	.word	0x20000234
 80011d0:	20000238 	.word	0x20000238
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000030 	.word	0x20000030
 80011dc:	20000060 	.word	0x20000060
 80011e0:	20000080 	.word	0x20000080
 80011e4:	200000e0 	.word	0x200000e0
 80011e8:	20000154 	.word	0x20000154
 80011ec:	08003988 	.word	0x08003988
 80011f0:	08003990 	.word	0x08003990

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b099      	sub	sp, #100	; 0x64
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	242c      	movs	r4, #44	; 0x2c
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	0018      	movs	r0, r3
 8001200:	2334      	movs	r3, #52	; 0x34
 8001202:	001a      	movs	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	f002 fba5 	bl	8003954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120a:	2318      	movs	r3, #24
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	0018      	movs	r0, r3
 8001210:	2314      	movs	r3, #20
 8001212:	001a      	movs	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	f002 fb9d 	bl	8003954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121a:	003b      	movs	r3, r7
 800121c:	0018      	movs	r0, r3
 800121e:	2318      	movs	r3, #24
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f002 fb96 	bl	8003954 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <SystemClock_Config+0xd0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <SystemClock_Config+0xd4>)
 800122e:	401a      	ands	r2, r3
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <SystemClock_Config+0xd0>)
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	0109      	lsls	r1, r1, #4
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800123a:	0021      	movs	r1, r4
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2210      	movs	r2, #16
 8001240:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2201      	movs	r2, #1
 8001246:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	22a0      	movs	r2, #160	; 0xa0
 8001252:	0212      	lsls	r2, r2, #8
 8001254:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	187b      	adds	r3, r7, r1
 800125e:	0018      	movs	r0, r3
 8001260:	f000 fd28 	bl	8001cb4 <HAL_RCC_OscConfig>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001268:	f000 f93e 	bl	80014e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	2118      	movs	r1, #24
 800126e:	187b      	adds	r3, r7, r1
 8001270:	220f      	movs	r2, #15
 8001272:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2100      	movs	r1, #0
 8001290:	0018      	movs	r0, r3
 8001292:	f001 f88b 	bl	80023ac <HAL_RCC_ClockConfig>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800129a:	f000 f925 	bl	80014e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800129e:	003b      	movs	r3, r7
 80012a0:	2204      	movs	r2, #4
 80012a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80012a4:	003b      	movs	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012aa:	003b      	movs	r3, r7
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 faa1 	bl	80027f4 <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012b6:	f000 f917 	bl	80014e8 <Error_Handler>
  }
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b019      	add	sp, #100	; 0x64
 80012c0:	bd90      	pop	{r4, r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	40007000 	.word	0x40007000
 80012c8:	ffffe7ff 	.word	0xffffe7ff

080012cc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <MX_LPUART1_UART_Init+0x58>)
 80012d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012d8:	22e1      	movs	r2, #225	; 0xe1
 80012da:	0252      	lsls	r2, r2, #9
 80012dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <MX_LPUART1_UART_Init+0x54>)
 800130a:	0018      	movs	r0, r3
 800130c:	f001 fde0 	bl	8002ed0 <HAL_UART_Init>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d001      	beq.n	8001318 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 f8e8 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	200001ac 	.word	0x200001ac
 8001324:	40004800 	.word	0x40004800

08001328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	2308      	movs	r3, #8
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	0018      	movs	r0, r3
 8001334:	2310      	movs	r3, #16
 8001336:	001a      	movs	r2, r3
 8001338:	2100      	movs	r1, #0
 800133a:	f002 fb0b 	bl	8003954 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	003b      	movs	r3, r7
 8001340:	0018      	movs	r0, r3
 8001342:	2308      	movs	r3, #8
 8001344:	001a      	movs	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	f002 fb04 	bl	8003954 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_TIM2_Init+0xa0>)
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	05d2      	lsls	r2, r2, #23
 8001352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001356:	2223      	movs	r2, #35	; 0x23
 8001358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_TIM2_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <MX_TIM2_Init+0xa4>)
 8001364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_TIM2_Init+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fb63 	bl	8002a40 <HAL_TIM_Base_Init>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800137e:	f000 f8b3 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	2108      	movs	r1, #8
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	0152      	lsls	r2, r2, #5
 800138a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138c:	187a      	adds	r2, r7, r1
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001390:	0011      	movs	r1, r2
 8001392:	0018      	movs	r0, r3
 8001394:	f001 fb94 	bl	8002ac0 <HAL_TIM_ConfigClockSource>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800139c:	f000 f8a4 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	003b      	movs	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	003b      	movs	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ac:	003a      	movs	r2, r7
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_TIM2_Init+0xa0>)
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f001 fd3c 	bl	8002e30 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80013bc:	f000 f894 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b006      	add	sp, #24
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000023c 	.word	0x2000023c
 80013cc:	0000ffff 	.word	0x0000ffff

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b08b      	sub	sp, #44	; 0x2c
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	2414      	movs	r4, #20
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	0018      	movs	r0, r3
 80013dc:	2314      	movs	r3, #20
 80013de:	001a      	movs	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f002 fab7 	bl	8003954 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <MX_GPIO_Init+0x10c>)
 80013e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <MX_GPIO_Init+0x10c>)
 80013ec:	2104      	movs	r1, #4
 80013ee:	430a      	orrs	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_GPIO_Init+0x10c>)
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <MX_GPIO_Init+0x10c>)
 8001400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <MX_GPIO_Init+0x10c>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	430a      	orrs	r2, r1
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
 800140a:	4b34      	ldr	r3, [pc, #208]	; (80014dc <MX_GPIO_Init+0x10c>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <MX_GPIO_Init+0x10c>)
 8001418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <MX_GPIO_Init+0x10c>)
 800141c:	2101      	movs	r1, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <MX_GPIO_Init+0x10c>)
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <MX_GPIO_Init+0x10c>)
 8001430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <MX_GPIO_Init+0x10c>)
 8001434:	2102      	movs	r1, #2
 8001436:	430a      	orrs	r2, r1
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <MX_GPIO_Init+0x10c>)
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	2202      	movs	r2, #2
 8001440:	4013      	ands	r3, r2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	4825      	ldr	r0, [pc, #148]	; (80014e0 <MX_GPIO_Init+0x110>)
 800144c:	2200      	movs	r2, #0
 800144e:	0019      	movs	r1, r3
 8001450:	f000 fc13 	bl	8001c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|FCSB_Pin|BUZZER_Pin|SCLK_Pin
 8001454:	4923      	ldr	r1, [pc, #140]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	2200      	movs	r2, #0
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fc0c 	bl	8001c7a <HAL_GPIO_WritePin>
                          |SDIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	0192      	lsls	r2, r2, #6
 8001468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	193b      	adds	r3, r7, r4
 800146c:	2201      	movs	r2, #1
 800146e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	193b      	adds	r3, r7, r4
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800147c:	193b      	adds	r3, r7, r4
 800147e:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <MX_GPIO_Init+0x110>)
 8001480:	0019      	movs	r1, r3
 8001482:	0010      	movs	r0, r2
 8001484:	f000 fa6e 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin BUZZER_Pin SCLK_Pin
                           SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin|FCSB_Pin|BUZZER_Pin|SCLK_Pin
 8001488:	193b      	adds	r3, r7, r4
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <MX_GPIO_Init+0x114>)
 800148c:	601a      	str	r2, [r3, #0]
                          |SDIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2201      	movs	r2, #1
 8001492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	193a      	adds	r2, r7, r4
 80014a2:	23a0      	movs	r3, #160	; 0xa0
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fa5b 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPO3_Pin */
  GPIO_InitStruct.Pin = GPO3_Pin;
 80014ae:	0021      	movs	r1, r4
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	0152      	lsls	r2, r2, #5
 80014b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 80014c4:	187a      	adds	r2, r7, r1
 80014c6:	23a0      	movs	r3, #160	; 0xa0
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	0011      	movs	r1, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f000 fa49 	bl	8001964 <HAL_GPIO_Init>

}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b00b      	add	sp, #44	; 0x2c
 80014d8:	bd90      	pop	{r4, r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000
 80014e0:	50000800 	.word	0x50000800
 80014e4:	00000616 	.word	0x00000616

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_MspInit+0x24>)
 80014fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_MspInit+0x24>)
 80014fe:	2101      	movs	r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HAL_MspInit+0x24>)
 8001506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_MspInit+0x24>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0549      	lsls	r1, r1, #21
 800150e:	430a      	orrs	r2, r1
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08b      	sub	sp, #44	; 0x2c
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	2414      	movs	r4, #20
 8001526:	193b      	adds	r3, r7, r4
 8001528:	0018      	movs	r0, r3
 800152a:	2314      	movs	r3, #20
 800152c:	001a      	movs	r2, r3
 800152e:	2100      	movs	r1, #0
 8001530:	f002 fa10 	bl	8003954 <memset>
  if(huart->Instance==LPUART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a28      	ldr	r2, [pc, #160]	; (80015dc <HAL_UART_MspInit+0xc0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d14a      	bne.n	80015d4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 8001540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	02c9      	lsls	r1, r1, #11
 8001548:	430a      	orrs	r2, r1
 800154a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 8001552:	2104      	movs	r1, #4
 8001554:	430a      	orrs	r2, r1
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2204      	movs	r2, #4
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 8001566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 800156a:	2102      	movs	r1, #2
 800156c:	430a      	orrs	r2, r1
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_UART_MspInit+0xc4>)
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157c:	193b      	adds	r3, r7, r4
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	193b      	adds	r3, r7, r4
 8001584:	2202      	movs	r2, #2
 8001586:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	193b      	adds	r3, r7, r4
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2203      	movs	r2, #3
 8001592:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001594:	193b      	adds	r3, r7, r4
 8001596:	2206      	movs	r2, #6
 8001598:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	193b      	adds	r3, r7, r4
 800159c:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_UART_MspInit+0xc8>)
 800159e:	0019      	movs	r1, r3
 80015a0:	0010      	movs	r0, r2
 80015a2:	f000 f9df 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015a6:	0021      	movs	r1, r4
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	00d2      	lsls	r2, r2, #3
 80015ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2202      	movs	r2, #2
 80015b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2203      	movs	r2, #3
 80015c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2206      	movs	r2, #6
 80015c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_UART_MspInit+0xcc>)
 80015cc:	0019      	movs	r1, r3
 80015ce:	0010      	movs	r0, r2
 80015d0:	f000 f9c8 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b00b      	add	sp, #44	; 0x2c
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	40004800 	.word	0x40004800
 80015e0:	40021000 	.word	0x40021000
 80015e4:	50000800 	.word	0x50000800
 80015e8:	50000400 	.word	0x50000400

080015ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d105      	bne.n	800160c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <HAL_TIM_Base_MspInit+0x28>)
 8001602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_TIM_Base_MspInit+0x28>)
 8001606:	2101      	movs	r1, #1
 8001608:	430a      	orrs	r2, r1
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f89e 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001652:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001654:	4813      	ldr	r0, [pc, #76]	; (80016a4 <LoopForever+0x6>)
    LDR R1, [R0]
 8001656:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001658:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <LoopForever+0xa>)
    CMP R1, R2
 800165c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800165e:	d105      	bne.n	800166c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001662:	4913      	ldr	r1, [pc, #76]	; (80016b0 <LoopForever+0x12>)
    STR R1, [R0]
 8001664:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001666:	4813      	ldr	r0, [pc, #76]	; (80016b4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001668:	4913      	ldr	r1, [pc, #76]	; (80016b8 <LoopForever+0x1a>)
    STR R1, [R0]
 800166a:	6001      	str	r1, [r0, #0]

0800166c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <LoopForever+0x1e>)
  ldr r1, =_edata
 800166e:	4914      	ldr	r1, [pc, #80]	; (80016c0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <LoopForever+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001684:	4c11      	ldr	r4, [pc, #68]	; (80016cc <LoopForever+0x2e>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001692:	f7ff ffd8 	bl	8001646 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001696:	f002 f939 	bl	800390c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169a:	f7ff fd03 	bl	80010a4 <main>

0800169e <LoopForever>:

LoopForever:
    b LoopForever
 800169e:	e7fe      	b.n	800169e <LoopForever>
   ldr   r0, =_estack
 80016a0:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80016a4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80016a8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80016ac:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80016b0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80016b4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80016b8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80016c4:	08003a38 	.word	0x08003a38
  ldr r2, =_sbss
 80016c8:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80016cc:	20000280 	.word	0x20000280

080016d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_IRQHandler>
	...

080016d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_Init+0x3c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_Init+0x3c>)
 80016e6:	2140      	movs	r1, #64	; 0x40
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f811 	bl	8001714 <HAL_InitTick>
 80016f2:	1e03      	subs	r3, r0, #0
 80016f4:	d003      	beq.n	80016fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e001      	b.n	8001702 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fe:	f7ff fef9 	bl	80014f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40022000 	.word	0x40022000

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_InitTick+0x5c>)
 800171e:	681c      	ldr	r4, [r3, #0]
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_InitTick+0x60>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	0019      	movs	r1, r3
 8001726:	23fa      	movs	r3, #250	; 0xfa
 8001728:	0098      	lsls	r0, r3, #2
 800172a:	f7fe fced 	bl	8000108 <__udivsi3>
 800172e:	0003      	movs	r3, r0
 8001730:	0019      	movs	r1, r3
 8001732:	0020      	movs	r0, r4
 8001734:	f7fe fce8 	bl	8000108 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	0018      	movs	r0, r3
 800173c:	f000 f905 	bl	800194a <HAL_SYSTICK_Config>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e00f      	b.n	8001768 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d80b      	bhi.n	8001766 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	2301      	movs	r3, #1
 8001752:	425b      	negs	r3, r3
 8001754:	2200      	movs	r2, #0
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f8e2 	bl	8001920 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_InitTick+0x64>)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b003      	add	sp, #12
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	20000180 	.word	0x20000180
 8001774:	20000188 	.word	0x20000188
 8001778:	20000184 	.word	0x20000184

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_IncTick+0x1c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	001a      	movs	r2, r3
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_IncTick+0x20>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	18d2      	adds	r2, r2, r3
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_IncTick+0x20>)
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	20000188 	.word	0x20000188
 800179c:	2000027c 	.word	0x2000027c

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <HAL_GetTick+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	2000027c 	.word	0x2000027c

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fff0 	bl	80017a0 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	001a      	movs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	189b      	adds	r3, r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	f7ff ffe0 	bl	80017a0 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b004      	add	sp, #16
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	20000188 	.word	0x20000188

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	0002      	movs	r2, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b7f      	cmp	r3, #127	; 0x7f
 8001810:	d828      	bhi.n	8001864 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001812:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <__NVIC_SetPriority+0xd4>)
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	33c0      	adds	r3, #192	; 0xc0
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	589b      	ldr	r3, [r3, r2]
 8001822:	1dfa      	adds	r2, r7, #7
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	0011      	movs	r1, r2
 8001828:	2203      	movs	r2, #3
 800182a:	400a      	ands	r2, r1
 800182c:	00d2      	lsls	r2, r2, #3
 800182e:	21ff      	movs	r1, #255	; 0xff
 8001830:	4091      	lsls	r1, r2
 8001832:	000a      	movs	r2, r1
 8001834:	43d2      	mvns	r2, r2
 8001836:	401a      	ands	r2, r3
 8001838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	22ff      	movs	r2, #255	; 0xff
 8001840:	401a      	ands	r2, r3
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	0018      	movs	r0, r3
 8001848:	2303      	movs	r3, #3
 800184a:	4003      	ands	r3, r0
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001850:	481f      	ldr	r0, [pc, #124]	; (80018d0 <__NVIC_SetPriority+0xd4>)
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	430a      	orrs	r2, r1
 800185c:	33c0      	adds	r3, #192	; 0xc0
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001862:	e031      	b.n	80018c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <__NVIC_SetPriority+0xd8>)
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	0019      	movs	r1, r3
 800186c:	230f      	movs	r3, #15
 800186e:	400b      	ands	r3, r1
 8001870:	3b08      	subs	r3, #8
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3306      	adds	r3, #6
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1dfa      	adds	r2, r7, #7
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	0011      	movs	r1, r2
 8001884:	2203      	movs	r2, #3
 8001886:	400a      	ands	r2, r1
 8001888:	00d2      	lsls	r2, r2, #3
 800188a:	21ff      	movs	r1, #255	; 0xff
 800188c:	4091      	lsls	r1, r2
 800188e:	000a      	movs	r2, r1
 8001890:	43d2      	mvns	r2, r2
 8001892:	401a      	ands	r2, r3
 8001894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	22ff      	movs	r2, #255	; 0xff
 800189c:	401a      	ands	r2, r3
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	0018      	movs	r0, r3
 80018a4:	2303      	movs	r3, #3
 80018a6:	4003      	ands	r3, r0
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <__NVIC_SetPriority+0xd8>)
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	001c      	movs	r4, r3
 80018b4:	230f      	movs	r3, #15
 80018b6:	4023      	ands	r3, r4
 80018b8:	3b08      	subs	r3, #8
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	430a      	orrs	r2, r1
 80018be:	3306      	adds	r3, #6
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	18c3      	adds	r3, r0, r3
 80018c4:	3304      	adds	r3, #4
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b003      	add	sp, #12
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1e5a      	subs	r2, r3, #1
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	045b      	lsls	r3, r3, #17
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d301      	bcc.n	80018f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ec:	2301      	movs	r3, #1
 80018ee:	e010      	b.n	8001912 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <SysTick_Config+0x44>)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	3a01      	subs	r2, #1
 80018f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f8:	2301      	movs	r3, #1
 80018fa:	425b      	negs	r3, r3
 80018fc:	2103      	movs	r1, #3
 80018fe:	0018      	movs	r0, r3
 8001900:	f7ff ff7c 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x44>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x44>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	210f      	movs	r1, #15
 800192c:	187b      	adds	r3, r7, r1
 800192e:	1c02      	adds	r2, r0, #0
 8001930:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	187b      	adds	r3, r7, r1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b25b      	sxtb	r3, r3
 800193a:	0011      	movs	r1, r2
 800193c:	0018      	movs	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	b004      	add	sp, #16
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff ffbf 	bl	80018d8 <SysTick_Config>
 800195a:	0003      	movs	r3, r0
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800197a:	e149      	b.n	8001c10 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4091      	lsls	r1, r2
 8001986:	000a      	movs	r2, r1
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d100      	bne.n	8001994 <HAL_GPIO_Init+0x30>
 8001992:	e13a      	b.n	8001c0a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	4013      	ands	r3, r2
 800199c:	2b01      	cmp	r3, #1
 800199e:	d005      	beq.n	80019ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2203      	movs	r2, #3
 80019a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d130      	bne.n	8001a0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	43da      	mvns	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	409a      	lsls	r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e2:	2201      	movs	r2, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	2201      	movs	r2, #1
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2203      	movs	r2, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d017      	beq.n	8001a4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d123      	bne.n	8001a9e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	08da      	lsrs	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	58d3      	ldr	r3, [r2, r3]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2207      	movs	r2, #7
 8001a68:	4013      	ands	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	43da      	mvns	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2107      	movs	r1, #7
 8001a82:	400b      	ands	r3, r1
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	6939      	ldr	r1, [r7, #16]
 8001a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	0013      	movs	r3, r2
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2203      	movs	r2, #3
 8001abc:	401a      	ands	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	4013      	ands	r3, r2
 8001adc:	d100      	bne.n	8001ae0 <HAL_GPIO_Init+0x17c>
 8001ade:	e094      	b.n	8001c0a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae0:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <HAL_GPIO_Init+0x2c4>)
 8001ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_GPIO_Init+0x2c4>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aec:	4a4f      	ldr	r2, [pc, #316]	; (8001c2c <HAL_GPIO_Init+0x2c8>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	589b      	ldr	r3, [r3, r2]
 8001af8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2203      	movs	r2, #3
 8001afe:	4013      	ands	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	409a      	lsls	r2, r3
 8001b06:	0013      	movs	r3, r2
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	23a0      	movs	r3, #160	; 0xa0
 8001b14:	05db      	lsls	r3, r3, #23
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0x1de>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a44      	ldr	r2, [pc, #272]	; (8001c30 <HAL_GPIO_Init+0x2cc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <HAL_GPIO_Init+0x1da>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a43      	ldr	r2, [pc, #268]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <HAL_GPIO_Init+0x1d6>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a42      	ldr	r2, [pc, #264]	; (8001c38 <HAL_GPIO_Init+0x2d4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_GPIO_Init+0x1d2>
 8001b32:	2305      	movs	r3, #5
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b42:	2300      	movs	r3, #0
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	2103      	movs	r1, #3
 8001b48:	400a      	ands	r2, r1
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b54:	4935      	ldr	r1, [pc, #212]	; (8001c2c <HAL_GPIO_Init+0x2c8>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43da      	mvns	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	035b      	lsls	r3, r3, #13
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43da      	mvns	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	039b      	lsls	r3, r3, #14
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	40da      	lsrs	r2, r3
 8001c18:	1e13      	subs	r3, r2, #0
 8001c1a:	d000      	beq.n	8001c1e <HAL_GPIO_Init+0x2ba>
 8001c1c:	e6ae      	b.n	800197c <HAL_GPIO_Init+0x18>
  }
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b006      	add	sp, #24
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	50000400 	.word	0x50000400
 8001c34:	50000800 	.word	0x50000800
 8001c38:	50001c00 	.word	0x50001c00
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	000a      	movs	r2, r1
 8001c4a:	1cbb      	adds	r3, r7, #2
 8001c4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	1cba      	adds	r2, r7, #2
 8001c54:	8812      	ldrh	r2, [r2, #0]
 8001c56:	4013      	ands	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e003      	b.n	8001c6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	0008      	movs	r0, r1
 8001c84:	0011      	movs	r1, r2
 8001c86:	1cbb      	adds	r3, r7, #2
 8001c88:	1c02      	adds	r2, r0, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	1c7b      	adds	r3, r7, #1
 8001c8e:	1c0a      	adds	r2, r1, #0
 8001c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c92:	1c7b      	adds	r3, r7, #1
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	1cbb      	adds	r3, r7, #2
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ca2:	e003      	b.n	8001cac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ca4:	1cbb      	adds	r3, r7, #2
 8001ca6:	881a      	ldrh	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f000 fb6c 	bl	80023a0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc8:	4bc8      	ldr	r3, [pc, #800]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd2:	4bc6      	ldr	r3, [pc, #792]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d100      	bne.n	8001cea <HAL_RCC_OscConfig+0x36>
 8001ce8:	e07d      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d007      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d112      	bne.n	8001d1c <HAL_RCC_OscConfig+0x68>
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	025b      	lsls	r3, r3, #9
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10d      	bne.n	8001d1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	4bba      	ldr	r3, [pc, #744]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5a>
 8001d0c:	e06a      	b.n	8001de4 <HAL_RCC_OscConfig+0x130>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d166      	bne.n	8001de4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f000 fb42 	bl	80023a0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	025b      	lsls	r3, r3, #9
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x84>
 8001d28:	4bb0      	ldr	r3, [pc, #704]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4baf      	ldr	r3, [pc, #700]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	0249      	lsls	r1, r1, #9
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e027      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	23a0      	movs	r3, #160	; 0xa0
 8001d3e:	02db      	lsls	r3, r3, #11
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d10e      	bne.n	8001d62 <HAL_RCC_OscConfig+0xae>
 8001d44:	4ba9      	ldr	r3, [pc, #676]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4ba8      	ldr	r3, [pc, #672]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	02c9      	lsls	r1, r1, #11
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	4ba6      	ldr	r3, [pc, #664]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4ba5      	ldr	r3, [pc, #660]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0249      	lsls	r1, r1, #9
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e012      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d62:	4ba2      	ldr	r3, [pc, #648]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4ba1      	ldr	r3, [pc, #644]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d68:	49a1      	ldr	r1, [pc, #644]	; (8001ff0 <HAL_RCC_OscConfig+0x33c>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	4b9f      	ldr	r3, [pc, #636]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	025b      	lsls	r3, r3, #9
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4b9b      	ldr	r3, [pc, #620]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b9a      	ldr	r3, [pc, #616]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001d82:	499c      	ldr	r1, [pc, #624]	; (8001ff4 <HAL_RCC_OscConfig+0x340>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d014      	beq.n	8001dba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fd06 	bl	80017a0 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9a:	f7ff fd01 	bl	80017a0 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e2f9      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dac:	4b8f      	ldr	r3, [pc, #572]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	029b      	lsls	r3, r3, #10
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0xe6>
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fcf1 	bl	80017a0 <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fcec 	bl	80017a0 <HAL_GetTick>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e2e4      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd6:	4b85      	ldr	r3, [pc, #532]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	029b      	lsls	r3, r3, #10
 8001dde:	4013      	ands	r3, r2
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x110>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x13e>
 8001df0:	e099      	b.n	8001f26 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e00:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b79      	ldr	r3, [pc, #484]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e06:	2120      	movs	r1, #32
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	2220      	movs	r2, #32
 8001e10:	4393      	bics	r3, r2
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	d13e      	bne.n	8001e9e <HAL_RCC_OscConfig+0x1ea>
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d13b      	bne.n	8001e9e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e26:	4b71      	ldr	r3, [pc, #452]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d004      	beq.n	8001e3a <HAL_RCC_OscConfig+0x186>
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e2b2      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x344>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	021a      	lsls	r2, r3, #8
 8001e4a:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2209      	movs	r2, #9
 8001e56:	4393      	bics	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e62:	f000 fbeb 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8001e66:	0001      	movs	r1, r0
 8001e68:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	220f      	movs	r2, #15
 8001e70:	4013      	ands	r3, r2
 8001e72:	4a62      	ldr	r2, [pc, #392]	; (8001ffc <HAL_RCC_OscConfig+0x348>)
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	000a      	movs	r2, r1
 8001e78:	40da      	lsrs	r2, r3
 8001e7a:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCC_OscConfig+0x34c>)
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e7e:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_RCC_OscConfig+0x350>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2513      	movs	r5, #19
 8001e84:	197c      	adds	r4, r7, r5
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fc44 	bl	8001714 <HAL_InitTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e90:	197b      	adds	r3, r7, r5
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d046      	beq.n	8001f26 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001e98:	197b      	adds	r3, r7, r5
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	e280      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d027      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ea4:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2209      	movs	r2, #9
 8001eaa:	4393      	bics	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fc73 	bl	80017a0 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fc6e 	bl	80017a0 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e266      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ed2:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d0f1      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b43      	ldr	r3, [pc, #268]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a45      	ldr	r2, [pc, #276]	; (8001ff8 <HAL_RCC_OscConfig+0x344>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	021a      	lsls	r2, r3, #8
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	e018      	b.n	8001f26 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	438a      	bics	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fc4e 	bl	80017a0 <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fc49 	bl	80017a0 <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e241      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f1c:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2204      	movs	r2, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d1f1      	bne.n	8001f0a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <HAL_RCC_OscConfig+0x27e>
 8001f30:	e0a1      	b.n	8002076 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d140      	bne.n	8001fba <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f38:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x29c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e227      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a2c      	ldr	r2, [pc, #176]	; (8002008 <HAL_RCC_OscConfig+0x354>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	0a19      	lsrs	r1, r3, #8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	061a      	lsls	r2, r3, #24
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	0b5b      	lsrs	r3, r3, #13
 8001f7e:	3301      	adds	r3, #1
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	0212      	lsls	r2, r2, #8
 8001f84:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	400b      	ands	r3, r1
 8001f90:	491a      	ldr	r1, [pc, #104]	; (8001ffc <HAL_RCC_OscConfig+0x348>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_RCC_OscConfig+0x34c>)
 8001f98:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCC_OscConfig+0x350>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2513      	movs	r5, #19
 8001fa0:	197c      	adds	r4, r7, r5
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff fbb6 	bl	8001714 <HAL_InitTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001fac:	197b      	adds	r3, r7, r5
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d060      	beq.n	8002076 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001fb4:	197b      	adds	r3, r7, r5
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	e1f2      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03f      	beq.n	8002042 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x338>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	0049      	lsls	r1, r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fbe6 	bl	80017a0 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fd8:	e018      	b.n	800200c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fda:	f7ff fbe1 	bl	80017a0 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d911      	bls.n	800200c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1d9      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	fffeffff 	.word	0xfffeffff
 8001ff4:	fffbffff 	.word	0xfffbffff
 8001ff8:	ffffe0ff 	.word	0xffffe0ff
 8001ffc:	080039bc 	.word	0x080039bc
 8002000:	20000180 	.word	0x20000180
 8002004:	20000184 	.word	0x20000184
 8002008:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800200c:	4bc9      	ldr	r3, [pc, #804]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d0e0      	beq.n	8001fda <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002018:	4bc6      	ldr	r3, [pc, #792]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4ac6      	ldr	r2, [pc, #792]	; (8002338 <HAL_RCC_OscConfig+0x684>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	4bc3      	ldr	r3, [pc, #780]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202c:	4bc1      	ldr	r3, [pc, #772]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	0a19      	lsrs	r1, r3, #8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	061a      	lsls	r2, r3, #24
 800203a:	4bbe      	ldr	r3, [pc, #760]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	e019      	b.n	8002076 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002042:	4bbc      	ldr	r3, [pc, #752]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4bbb      	ldr	r3, [pc, #748]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002048:	49bc      	ldr	r1, [pc, #752]	; (800233c <HAL_RCC_OscConfig+0x688>)
 800204a:	400a      	ands	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fba7 	bl	80017a0 <HAL_GetTick>
 8002052:	0003      	movs	r3, r0
 8002054:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002058:	f7ff fba2 	bl	80017a0 <HAL_GetTick>
 800205c:	0002      	movs	r2, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e19a      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800206a:	4bb2      	ldr	r3, [pc, #712]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2208      	movs	r2, #8
 800207c:	4013      	ands	r3, r2
 800207e:	d036      	beq.n	80020ee <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d019      	beq.n	80020bc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002088:	4baa      	ldr	r3, [pc, #680]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800208a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800208c:	4ba9      	ldr	r3, [pc, #676]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800208e:	2101      	movs	r1, #1
 8002090:	430a      	orrs	r2, r1
 8002092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fb84 	bl	80017a0 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209e:	f7ff fb7f 	bl	80017a0 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e177      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020b0:	4ba0      	ldr	r3, [pc, #640]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	2202      	movs	r2, #2
 80020b6:	4013      	ands	r3, r2
 80020b8:	d0f1      	beq.n	800209e <HAL_RCC_OscConfig+0x3ea>
 80020ba:	e018      	b.n	80020ee <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b9d      	ldr	r3, [pc, #628]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80020be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c0:	4b9c      	ldr	r3, [pc, #624]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	438a      	bics	r2, r1
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7ff fb6a 	bl	80017a0 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d2:	f7ff fb65 	bl	80017a0 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e15d      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020e4:	4b93      	ldr	r3, [pc, #588]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80020e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d1f1      	bne.n	80020d2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	d100      	bne.n	80020fa <HAL_RCC_OscConfig+0x446>
 80020f8:	e0ae      	b.n	8002258 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	2023      	movs	r0, #35	; 0x23
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	055b      	lsls	r3, r3, #21
 800210a:	4013      	ands	r3, r2
 800210c:	d109      	bne.n	8002122 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0549      	lsls	r1, r1, #21
 8002118:	430a      	orrs	r2, r1
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800211c:	183b      	adds	r3, r7, r0
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b87      	ldr	r3, [pc, #540]	; (8002340 <HAL_RCC_OscConfig+0x68c>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_RCC_OscConfig+0x68c>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b83      	ldr	r3, [pc, #524]	; (8002340 <HAL_RCC_OscConfig+0x68c>)
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0049      	lsls	r1, r1, #1
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213c:	f7ff fb30 	bl	80017a0 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7ff fb2b 	bl	80017a0 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e123      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <HAL_RCC_OscConfig+0x68c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4013      	ands	r3, r2
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x4cc>
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	0049      	lsls	r1, r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	651a      	str	r2, [r3, #80]	; 0x50
 800217e:	e031      	b.n	80021e4 <HAL_RCC_OscConfig+0x530>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4ee>
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800218a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218c:	4b69      	ldr	r3, [pc, #420]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800218e:	496b      	ldr	r1, [pc, #428]	; (800233c <HAL_RCC_OscConfig+0x688>)
 8002190:	400a      	ands	r2, r1
 8002192:	651a      	str	r2, [r3, #80]	; 0x50
 8002194:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800219a:	496a      	ldr	r1, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x690>)
 800219c:	400a      	ands	r2, r1
 800219e:	651a      	str	r2, [r3, #80]	; 0x50
 80021a0:	e020      	b.n	80021e4 <HAL_RCC_OscConfig+0x530>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	23a0      	movs	r3, #160	; 0xa0
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10e      	bne.n	80021cc <HAL_RCC_OscConfig+0x518>
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b2:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	00c9      	lsls	r1, r1, #3
 80021b8:	430a      	orrs	r2, r1
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50
 80021bc:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c0:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	0049      	lsls	r1, r1, #1
 80021c6:	430a      	orrs	r2, r1
 80021c8:	651a      	str	r2, [r3, #80]	; 0x50
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x530>
 80021cc:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021d0:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021d2:	495a      	ldr	r1, [pc, #360]	; (800233c <HAL_RCC_OscConfig+0x688>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	651a      	str	r2, [r3, #80]	; 0x50
 80021d8:	4b56      	ldr	r3, [pc, #344]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021dc:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80021de:	4959      	ldr	r1, [pc, #356]	; (8002344 <HAL_RCC_OscConfig+0x690>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7ff fad8 	bl	80017a0 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f4:	e009      	b.n	800220a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7ff fad3 	bl	80017a0 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_RCC_OscConfig+0x694>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0ca      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800220c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4013      	ands	r3, r2
 8002214:	d0ef      	beq.n	80021f6 <HAL_RCC_OscConfig+0x542>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7ff fac2 	bl	80017a0 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002220:	e009      	b.n	8002236 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff fabd 	bl	80017a0 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4a46      	ldr	r2, [pc, #280]	; (8002348 <HAL_RCC_OscConfig+0x694>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0b4      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002236:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d1ef      	bne.n	8002222 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002242:	2323      	movs	r3, #35	; 0x23
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800224e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002252:	493e      	ldr	r1, [pc, #248]	; (800234c <HAL_RCC_OscConfig+0x698>)
 8002254:	400a      	ands	r2, r1
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	2b00      	cmp	r3, #0
 800225e:	d100      	bne.n	8002262 <HAL_RCC_OscConfig+0x5ae>
 8002260:	e09d      	b.n	800239e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d100      	bne.n	800226a <HAL_RCC_OscConfig+0x5b6>
 8002268:	e076      	b.n	8002358 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2b02      	cmp	r3, #2
 8002270:	d145      	bne.n	80022fe <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_RCC_OscConfig+0x69c>)
 800227a:	400a      	ands	r2, r1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff fa8f 	bl	80017a0 <HAL_GetTick>
 8002282:	0003      	movs	r3, r0
 8002284:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff fa8a 	bl	80017a0 <HAL_GetTick>
 800228c:	0002      	movs	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e082      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	049b      	lsls	r3, r3, #18
 80022a2:	4013      	ands	r3, r2
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_RCC_OscConfig+0x6a0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	431a      	orrs	r2, r3
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0449      	lsls	r1, r1, #17
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fa64 	bl	80017a0 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff fa5f 	bl	80017a0 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e057      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	049b      	lsls	r3, r3, #18
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x62a>
 80022fc:	e04f      	b.n	800239e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002304:	4912      	ldr	r1, [pc, #72]	; (8002350 <HAL_RCC_OscConfig+0x69c>)
 8002306:	400a      	ands	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff fa49 	bl	80017a0 <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff fa44 	bl	80017a0 <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e03c      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002326:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_OscConfig+0x680>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	049b      	lsls	r3, r3, #18
 800232e:	4013      	ands	r3, r2
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x660>
 8002332:	e034      	b.n	800239e <HAL_RCC_OscConfig+0x6ea>
 8002334:	40021000 	.word	0x40021000
 8002338:	ffff1fff 	.word	0xffff1fff
 800233c:	fffffeff 	.word	0xfffffeff
 8002340:	40007000 	.word	0x40007000
 8002344:	fffffbff 	.word	0xfffffbff
 8002348:	00001388 	.word	0x00001388
 800234c:	efffffff 	.word	0xefffffff
 8002350:	feffffff 	.word	0xfeffffff
 8002354:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_OscConfig+0x6f4>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	025b      	lsls	r3, r3, #9
 8002370:	401a      	ands	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	429a      	cmp	r2, r3
 8002378:	d10f      	bne.n	800239a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	23f0      	movs	r3, #240	; 0xf0
 800237e:	039b      	lsls	r3, r3, #14
 8002380:	401a      	ands	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d107      	bne.n	800239a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	23c0      	movs	r3, #192	; 0xc0
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b00a      	add	sp, #40	; 0x28
 80023a6:	bdb0      	pop	{r4, r5, r7, pc}
 80023a8:	40021000 	.word	0x40021000

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e128      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b96      	ldr	r3, [pc, #600]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d91e      	bls.n	800240c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b93      	ldr	r3, [pc, #588]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4393      	bics	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	4b90      	ldr	r3, [pc, #576]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e0:	f7ff f9de 	bl	80017a0 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e8:	e009      	b.n	80023fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7ff f9d9 	bl	80017a0 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a8a      	ldr	r2, [pc, #552]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e109      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b87      	ldr	r3, [pc, #540]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	4013      	ands	r3, r2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b83      	ldr	r3, [pc, #524]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	22f0      	movs	r2, #240	; 0xf0
 800241c:	4393      	bics	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b7f      	ldr	r3, [pc, #508]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d100      	bne.n	8002436 <HAL_RCC_ClockConfig+0x8a>
 8002434:	e089      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243e:	4b79      	ldr	r3, [pc, #484]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	4013      	ands	r3, r2
 8002448:	d120      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0e1      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	049b      	lsls	r3, r3, #18
 800245e:	4013      	ands	r3, r2
 8002460:	d114      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0d5      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d106      	bne.n	800247c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	d109      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0ca      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800247c:	4b69      	ldr	r3, [pc, #420]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4013      	ands	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0c2      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248c:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2203      	movs	r2, #3
 8002492:	4393      	bics	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4b62      	ldr	r3, [pc, #392]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7ff f97e 	bl	80017a0 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d111      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b0:	e009      	b.n	80024c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b2:	f7ff f975 	bl	80017a0 <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0a5      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	220c      	movs	r2, #12
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d1ef      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x106>
 80024d2:	e03a      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d111      	bne.n	8002500 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7ff f95f 	bl	80017a0 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e08f      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f2:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	220c      	movs	r2, #12
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d1ef      	bne.n	80024de <HAL_RCC_ClockConfig+0x132>
 80024fe:	e024      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d11b      	bne.n	8002540 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002508:	e009      	b.n	800251e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7ff f949 	bl	80017a0 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e079      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	220c      	movs	r2, #12
 8002524:	4013      	ands	r3, r2
 8002526:	2b04      	cmp	r3, #4
 8002528:	d1ef      	bne.n	800250a <HAL_RCC_ClockConfig+0x15e>
 800252a:	e00e      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7ff f938 	bl	80017a0 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	4a3a      	ldr	r2, [pc, #232]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e068      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002540:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	220c      	movs	r2, #12
 8002546:	4013      	ands	r3, r2
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d21e      	bcs.n	8002596 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800256a:	f7ff f919 	bl	80017a0 <HAL_GetTick>
 800256e:	0003      	movs	r3, r0
 8002570:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	e009      	b.n	8002588 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7ff f914 	bl	80017a0 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	4a28      	ldr	r2, [pc, #160]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e044      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d1ee      	bne.n	8002574 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2204      	movs	r2, #4
 800259c:	4013      	ands	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x27c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4013      	ands	r3, r2
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_RCC_ClockConfig+0x280>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00da      	lsls	r2, r3, #3
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d4:	f000 f832 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025d8:	0001      	movs	r1, r0
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	220f      	movs	r2, #15
 80025e2:	4013      	ands	r3, r2
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x284>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	000a      	movs	r2, r1
 80025ea:	40da      	lsrs	r2, r3
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_RCC_ClockConfig+0x288>)
 80025ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_RCC_ClockConfig+0x28c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	250b      	movs	r5, #11
 80025f6:	197c      	adds	r4, r7, r5
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff f88b 	bl	8001714 <HAL_InitTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002602:	197b      	adds	r3, r7, r5
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800260a:	197b      	adds	r3, r7, r5
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	e000      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b004      	add	sp, #16
 8002618:	bdb0      	pop	{r4, r5, r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40022000 	.word	0x40022000
 8002620:	00001388 	.word	0x00001388
 8002624:	40021000 	.word	0x40021000
 8002628:	fffff8ff 	.word	0xfffff8ff
 800262c:	ffffc7ff 	.word	0xffffc7ff
 8002630:	080039bc 	.word	0x080039bc
 8002634:	20000180 	.word	0x20000180
 8002638:	20000184 	.word	0x20000184

0800263c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b5b0      	push	{r4, r5, r7, lr}
 800263e:	b08e      	sub	sp, #56	; 0x38
 8002640:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	230c      	movs	r3, #12
 800264c:	4013      	ands	r3, r2
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d014      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x40>
 8002652:	d900      	bls.n	8002656 <HAL_RCC_GetSysClockFreq+0x1a>
 8002654:	e07b      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x112>
 8002656:	2b04      	cmp	r3, #4
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x24>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x3a>
 800265e:	e076      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002660:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	4013      	ands	r3, r2
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_GetSysClockFreq+0x13c>)
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800266e:	e07c      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCC_GetSysClockFreq+0x140>)
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002674:	e079      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002676:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_RCC_GetSysClockFreq+0x144>)
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800267a:	e076      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	0c9a      	lsrs	r2, r3, #18
 8002680:	230f      	movs	r3, #15
 8002682:	401a      	ands	r2, r3
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_GetSysClockFreq+0x148>)
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	0d9a      	lsrs	r2, r3, #22
 800268e:	2303      	movs	r3, #3
 8002690:	4013      	ands	r3, r2
 8002692:	3301      	adds	r3, #1
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	025b      	lsls	r3, r3, #9
 800269e:	4013      	ands	r3, r2
 80026a0:	d01a      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	4a35      	ldr	r2, [pc, #212]	; (8002780 <HAL_RCC_GetSysClockFreq+0x144>)
 80026ac:	2300      	movs	r3, #0
 80026ae:	69b8      	ldr	r0, [r7, #24]
 80026b0:	69f9      	ldr	r1, [r7, #28]
 80026b2:	f7fd fdd5 	bl	8000260 <__aeabi_lmul>
 80026b6:	0002      	movs	r2, r0
 80026b8:	000b      	movs	r3, r1
 80026ba:	0010      	movs	r0, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f7fd fda9 	bl	8000220 <__aeabi_uldivmod>
 80026ce:	0002      	movs	r2, r0
 80026d0:	000b      	movs	r3, r1
 80026d2:	0013      	movs	r3, r2
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
 80026d6:	e037      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	4013      	ands	r3, r2
 80026e0:	d01a      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026ec:	2300      	movs	r3, #0
 80026ee:	68b8      	ldr	r0, [r7, #8]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	f7fd fdb5 	bl	8000260 <__aeabi_lmul>
 80026f6:	0002      	movs	r2, r0
 80026f8:	000b      	movs	r3, r1
 80026fa:	0010      	movs	r0, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f7fd fd89 	bl	8000220 <__aeabi_uldivmod>
 800270e:	0002      	movs	r2, r0
 8002710:	000b      	movs	r3, r1
 8002712:	0013      	movs	r3, r2
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
 8002716:	e017      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	0018      	movs	r0, r3
 800271c:	2300      	movs	r3, #0
 800271e:	0019      	movs	r1, r3
 8002720:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_RCC_GetSysClockFreq+0x140>)
 8002722:	2300      	movs	r3, #0
 8002724:	f7fd fd9c 	bl	8000260 <__aeabi_lmul>
 8002728:	0002      	movs	r2, r0
 800272a:	000b      	movs	r3, r1
 800272c:	0010      	movs	r0, r2
 800272e:	0019      	movs	r1, r3
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	001c      	movs	r4, r3
 8002734:	2300      	movs	r3, #0
 8002736:	001d      	movs	r5, r3
 8002738:	0022      	movs	r2, r4
 800273a:	002b      	movs	r3, r5
 800273c:	f7fd fd70 	bl	8000220 <__aeabi_uldivmod>
 8002740:	0002      	movs	r2, r0
 8002742:	000b      	movs	r3, r1
 8002744:	0013      	movs	r3, r2
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800274c:	e00d      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0b5b      	lsrs	r3, r3, #13
 8002754:	2207      	movs	r2, #7
 8002756:	4013      	ands	r3, r2
 8002758:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	3301      	adds	r3, #1
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	0212      	lsls	r2, r2, #8
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002768:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b00e      	add	sp, #56	; 0x38
 8002772:	bdb0      	pop	{r4, r5, r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	003d0900 	.word	0x003d0900
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200
 8002784:	080039d4 	.word	0x080039d4

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b02      	ldr	r3, [pc, #8]	; (8002798 <HAL_RCC_GetHCLKFreq+0x10>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	20000180 	.word	0x20000180

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff2 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a4:	0001      	movs	r1, r0
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	2207      	movs	r2, #7
 80027ae:	4013      	ands	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	40d9      	lsrs	r1, r3
 80027b6:	000b      	movs	r3, r1
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	40021000 	.word	0x40021000
 80027c4:	080039cc 	.word	0x080039cc

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	0001      	movs	r1, r0
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	0adb      	lsrs	r3, r3, #11
 80027d8:	2207      	movs	r2, #7
 80027da:	4013      	ands	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	40d9      	lsrs	r1, r3
 80027e2:	000b      	movs	r3, r1
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000
 80027f0:	080039cc 	.word	0x080039cc

080027f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80027fc:	2017      	movs	r0, #23
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2220      	movs	r2, #32
 800280a:	4013      	ands	r3, r2
 800280c:	d100      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800280e:	e0c2      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002810:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	055b      	lsls	r3, r3, #21
 8002818:	4013      	ands	r3, r2
 800281a:	d109      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800281e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002820:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0549      	lsls	r1, r1, #21
 8002826:	430a      	orrs	r2, r1
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800282a:	183b      	adds	r3, r7, r0
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d11a      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283c:	4b77      	ldr	r3, [pc, #476]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	0049      	lsls	r1, r1, #1
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe ffa9 	bl	80017a0 <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	e008      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002854:	f7fe ffa4 	bl	80017a0 <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0d4      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4013      	ands	r3, r2
 8002870:	d0f0      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002872:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	23c0      	movs	r3, #192	; 0xc0
 8002878:	039b      	lsls	r3, r3, #14
 800287a:	4013      	ands	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	039b      	lsls	r3, r3, #14
 8002886:	4013      	ands	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	429a      	cmp	r2, r3
 800288c:	d013      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	029b      	lsls	r3, r3, #10
 8002896:	401a      	ands	r2, r3
 8002898:	23c0      	movs	r3, #192	; 0xc0
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	429a      	cmp	r2, r3
 800289e:	d10a      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80028a0:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	401a      	ands	r2, r3
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0ac      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80028b6:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ba:	23c0      	movs	r3, #192	; 0xc0
 80028bc:	029b      	lsls	r3, r3, #10
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03b      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	23c0      	movs	r3, #192	; 0xc0
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	4013      	ands	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d033      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2220      	movs	r2, #32
 80028de:	4013      	ands	r3, r2
 80028e0:	d02e      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80028e2:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	4a4e      	ldr	r2, [pc, #312]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	0309      	lsls	r1, r1, #12
 80028f6:	430a      	orrs	r2, r1
 80028f8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002900:	4948      	ldr	r1, [pc, #288]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002902:	400a      	ands	r2, r1
 8002904:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d014      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe ff43 	bl	80017a0 <HAL_GetTick>
 800291a:	0003      	movs	r3, r0
 800291c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800291e:	e009      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7fe ff3e 	bl	80017a0 <HAL_GetTick>
 8002924:	0002      	movs	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	4a3f      	ldr	r2, [pc, #252]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e06d      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002934:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d0ef      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	23c0      	movs	r3, #192	; 0xc0
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	401a      	ands	r2, r3
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	029b      	lsls	r3, r3, #10
 800294e:	429a      	cmp	r2, r3
 8002950:	d10c      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a35      	ldr	r2, [pc, #212]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002958:	4013      	ands	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	23c0      	movs	r3, #192	; 0xc0
 8002962:	039b      	lsls	r3, r3, #14
 8002964:	401a      	ands	r2, r3
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800296e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	23c0      	movs	r3, #192	; 0xc0
 8002976:	029b      	lsls	r3, r3, #10
 8002978:	401a      	ands	r2, r3
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800297c:	430a      	orrs	r2, r1
 800297e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002980:	2317      	movs	r3, #23
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800298c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002990:	4927      	ldr	r1, [pc, #156]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002992:	400a      	ands	r2, r1
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d009      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	220c      	movs	r2, #12
 80029a6:	4393      	bics	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2204      	movs	r2, #4
 80029ba:	4013      	ands	r3, r2
 80029bc:	d009      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029ce:	430a      	orrs	r2, r1
 80029d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2208      	movs	r2, #8
 80029d8:	4013      	ands	r3, r2
 80029da:	d009      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029ec:	430a      	orrs	r2, r1
 80029ee:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	4013      	ands	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b006      	add	sp, #24
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	fffcffff 	.word	0xfffcffff
 8002a24:	fff7ffff 	.word	0xfff7ffff
 8002a28:	00001388 	.word	0x00001388
 8002a2c:	ffcfffff 	.word	0xffcfffff
 8002a30:	efffffff 	.word	0xefffffff
 8002a34:	fffff3ff 	.word	0xfffff3ff
 8002a38:	ffffcfff 	.word	0xffffcfff
 8002a3c:	fff3ffff 	.word	0xfff3ffff

08002a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e032      	b.n	8002ab8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2239      	movs	r2, #57	; 0x39
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2238      	movs	r2, #56	; 0x38
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fe fdbf 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2239      	movs	r2, #57	; 0x39
 8002a72:	2102      	movs	r1, #2
 8002a74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	0019      	movs	r1, r3
 8002a80:	0010      	movs	r0, r2
 8002a82:	f000 f8f1 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	223e      	movs	r2, #62	; 0x3e
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	223a      	movs	r2, #58	; 0x3a
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223b      	movs	r2, #59	; 0x3b
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223c      	movs	r2, #60	; 0x3c
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223d      	movs	r2, #61	; 0x3d
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2239      	movs	r2, #57	; 0x39
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	230f      	movs	r3, #15
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2238      	movs	r2, #56	; 0x38
 8002ad6:	5c9b      	ldrb	r3, [r3, r2]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_ConfigClockSource+0x20>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0bc      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x19a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2238      	movs	r2, #56	; 0x38
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2239      	movs	r2, #57	; 0x39
 8002aec:	2102      	movs	r1, #2
 8002aee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2277      	movs	r2, #119	; 0x77
 8002afc:	4393      	bics	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	0192      	lsls	r2, r2, #6
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d040      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xde>
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	0192      	lsls	r2, r2, #6
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d900      	bls.n	8002b26 <HAL_TIM_ConfigClockSource+0x66>
 8002b24:	e088      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	0152      	lsls	r2, r2, #5
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d100      	bne.n	8002b30 <HAL_TIM_ConfigClockSource+0x70>
 8002b2e:	e088      	b.n	8002c42 <HAL_TIM_ConfigClockSource+0x182>
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	0152      	lsls	r2, r2, #5
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d900      	bls.n	8002b3a <HAL_TIM_ConfigClockSource+0x7a>
 8002b38:	e07e      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b3a:	2b70      	cmp	r3, #112	; 0x70
 8002b3c:	d018      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0xb0>
 8002b3e:	d900      	bls.n	8002b42 <HAL_TIM_ConfigClockSource+0x82>
 8002b40:	e07a      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b42:	2b60      	cmp	r3, #96	; 0x60
 8002b44:	d04f      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x126>
 8002b46:	d900      	bls.n	8002b4a <HAL_TIM_ConfigClockSource+0x8a>
 8002b48:	e076      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b4a:	2b50      	cmp	r3, #80	; 0x50
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x106>
 8002b4e:	d900      	bls.n	8002b52 <HAL_TIM_ConfigClockSource+0x92>
 8002b50:	e072      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d057      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x146>
 8002b56:	d900      	bls.n	8002b5a <HAL_TIM_ConfigClockSource+0x9a>
 8002b58:	e06e      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b5a:	2b30      	cmp	r3, #48	; 0x30
 8002b5c:	d063      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b5e:	d86b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d060      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b64:	d868      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d05d      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d05b      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b6e:	e063      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f000 f936 	bl	8002df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2277      	movs	r2, #119	; 0x77
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e052      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f000 f91f 	bl	8002df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	01c9      	lsls	r1, r1, #7
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
      break;
 8002bc4:	e03e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	f000 f892 	bl	8002cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2150      	movs	r1, #80	; 0x50
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f8ec 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 8002be4:	e02e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	f000 f8b0 	bl	8002d58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2160      	movs	r1, #96	; 0x60
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 f8dc 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 8002c04:	e01e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	001a      	movs	r2, r3
 8002c14:	f000 f872 	bl	8002cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	; 0x40
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f8cc 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 8002c24:	e00e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0019      	movs	r1, r3
 8002c30:	0010      	movs	r0, r2
 8002c32:	f000 f8c3 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 8002c36:	e005      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
      break;
 8002c40:	e000      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2239      	movs	r2, #57	; 0x39
 8002c48:	2101      	movs	r1, #1
 8002c4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2238      	movs	r2, #56	; 0x38
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]

  return status;
 8002c54:	230f      	movs	r3, #15
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	ffff00ff 	.word	0xffff00ff

08002c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	05db      	lsls	r3, r3, #23
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d003      	beq.n	8002c8a <TIM_Base_SetConfig+0x22>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <TIM_Base_SetConfig+0x8c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2270      	movs	r2, #112	; 0x70
 8002c8e:	4393      	bics	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	05db      	lsls	r3, r3, #23
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0x46>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <TIM_Base_SetConfig+0x8c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <TIM_Base_SetConfig+0x90>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	615a      	str	r2, [r3, #20]
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40010800 	.word	0x40010800
 8002cf8:	fffffcff 	.word	0xfffffcff

08002cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4393      	bics	r3, r2
 8002d16:	001a      	movs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	22f0      	movs	r2, #240	; 0xf0
 8002d26:	4393      	bics	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	220a      	movs	r2, #10
 8002d38:	4393      	bics	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b006      	add	sp, #24
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <TIM_TI2_ConfigInputStage+0x60>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	031b      	lsls	r3, r3, #12
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	22a0      	movs	r2, #160	; 0xa0
 8002d94:	4393      	bics	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	ffff0fff 	.word	0xffff0fff

08002dbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2270      	movs	r2, #112	; 0x70
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	2207      	movs	r2, #7
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b004      	add	sp, #16
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <TIM_ETR_SetConfig+0x3c>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	021a      	lsls	r2, r3, #8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b006      	add	sp, #24
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	ffff00ff 	.word	0xffff00ff

08002e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2238      	movs	r2, #56	; 0x38
 8002e3e:	5c9b      	ldrb	r3, [r3, r2]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e03d      	b.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2238      	movs	r2, #56	; 0x38
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2239      	movs	r2, #57	; 0x39
 8002e54:	2102      	movs	r1, #2
 8002e56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2270      	movs	r2, #112	; 0x70
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d004      	beq.n	8002e98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10c      	bne.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2239      	movs	r2, #57	; 0x39
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2238      	movs	r2, #56	; 0x38
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40010800 	.word	0x40010800

08002ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e044      	b.n	8002f6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2274      	movs	r2, #116	; 0x74
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fe fb11 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2224      	movs	r2, #36	; 0x24
 8002efe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 f8d8 	bl	80030c8 <UART_SetConfig>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e024      	b.n	8002f6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fb2d 	bl	800358c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	490d      	ldr	r1, [pc, #52]	; (8002f74 <HAL_UART_Init+0xa4>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	212a      	movs	r1, #42	; 0x2a
 8002f4e:	438a      	bics	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 fbc5 	bl	80036f4 <UART_CheckIdleState>
 8002f6a:	0003      	movs	r3, r0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	ffffb7ff 	.word	0xffffb7ff

08002f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	1dbb      	adds	r3, r7, #6
 8002f86:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d000      	beq.n	8002f92 <HAL_UART_Transmit+0x1a>
 8002f90:	e095      	b.n	80030be <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_UART_Transmit+0x28>
 8002f98:	1dbb      	adds	r3, r7, #6
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e08d      	b.n	80030c0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	015b      	lsls	r3, r3, #5
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d109      	bne.n	8002fc4 <HAL_UART_Transmit+0x4c>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e07d      	b.n	80030c0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2274      	movs	r2, #116	; 0x74
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Transmit+0x5a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e076      	b.n	80030c0 <HAL_UART_Transmit+0x148>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2274      	movs	r2, #116	; 0x74
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2221      	movs	r2, #33	; 0x21
 8002fe6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fbda 	bl	80017a0 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1dba      	adds	r2, r7, #6
 8002ff4:	2150      	movs	r1, #80	; 0x50
 8002ff6:	8812      	ldrh	r2, [r2, #0]
 8002ff8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1dba      	adds	r2, r7, #6
 8002ffe:	2152      	movs	r1, #82	; 0x52
 8003000:	8812      	ldrh	r2, [r2, #0]
 8003002:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	429a      	cmp	r2, r3
 800300e:	d108      	bne.n	8003022 <HAL_UART_Transmit+0xaa>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e003      	b.n	800302a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2274      	movs	r2, #116	; 0x74
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003032:	e02c      	b.n	800308e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	0013      	movs	r3, r2
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	f000 fb9f 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d001      	beq.n	800304e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e038      	b.n	80030c0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	001a      	movs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	05d2      	lsls	r2, r2, #23
 8003060:	0dd2      	lsrs	r2, r2, #23
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	3302      	adds	r3, #2
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e007      	b.n	800307c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2252      	movs	r2, #82	; 0x52
 8003080:	5a9b      	ldrh	r3, [r3, r2]
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b299      	uxth	r1, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2252      	movs	r2, #82	; 0x52
 800308c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2252      	movs	r2, #82	; 0x52
 8003092:	5a9b      	ldrh	r3, [r3, r2]
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1cc      	bne.n	8003034 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	0013      	movs	r3, r2
 80030a4:	2200      	movs	r2, #0
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	f000 fb6c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80030ac:	1e03      	subs	r3, r0, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e005      	b.n	80030c0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b008      	add	sp, #32
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b08e      	sub	sp, #56	; 0x38
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030d0:	231a      	movs	r3, #26
 80030d2:	2218      	movs	r2, #24
 80030d4:	4694      	mov	ip, r2
 80030d6:	44bc      	add	ip, r7
 80030d8:	4463      	add	r3, ip
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4abc      	ldr	r2, [pc, #752]	; (80033f0 <UART_SetConfig+0x328>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4ab8      	ldr	r2, [pc, #736]	; (80033f4 <UART_SetConfig+0x32c>)
 8003114:	4013      	ands	r3, r2
 8003116:	0019      	movs	r1, r3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4ab2      	ldr	r2, [pc, #712]	; (80033f8 <UART_SetConfig+0x330>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800313a:	4313      	orrs	r3, r2
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4aad      	ldr	r2, [pc, #692]	; (80033fc <UART_SetConfig+0x334>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa9      	ldr	r2, [pc, #676]	; (8003400 <UART_SetConfig+0x338>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d136      	bne.n	80031cc <UART_SetConfig+0x104>
 800315e:	4ba9      	ldr	r3, [pc, #676]	; (8003404 <UART_SetConfig+0x33c>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	220c      	movs	r2, #12
 8003164:	4013      	ands	r3, r2
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d020      	beq.n	80031ac <UART_SetConfig+0xe4>
 800316a:	d827      	bhi.n	80031bc <UART_SetConfig+0xf4>
 800316c:	2b08      	cmp	r3, #8
 800316e:	d00d      	beq.n	800318c <UART_SetConfig+0xc4>
 8003170:	d824      	bhi.n	80031bc <UART_SetConfig+0xf4>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <UART_SetConfig+0xb4>
 8003176:	2b04      	cmp	r3, #4
 8003178:	d010      	beq.n	800319c <UART_SetConfig+0xd4>
 800317a:	e01f      	b.n	80031bc <UART_SetConfig+0xf4>
 800317c:	231b      	movs	r3, #27
 800317e:	2218      	movs	r2, #24
 8003180:	4694      	mov	ip, r2
 8003182:	44bc      	add	ip, r7
 8003184:	4463      	add	r3, ip
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e06f      	b.n	800326c <UART_SetConfig+0x1a4>
 800318c:	231b      	movs	r3, #27
 800318e:	2218      	movs	r2, #24
 8003190:	4694      	mov	ip, r2
 8003192:	44bc      	add	ip, r7
 8003194:	4463      	add	r3, ip
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e067      	b.n	800326c <UART_SetConfig+0x1a4>
 800319c:	231b      	movs	r3, #27
 800319e:	2218      	movs	r2, #24
 80031a0:	4694      	mov	ip, r2
 80031a2:	44bc      	add	ip, r7
 80031a4:	4463      	add	r3, ip
 80031a6:	2204      	movs	r2, #4
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e05f      	b.n	800326c <UART_SetConfig+0x1a4>
 80031ac:	231b      	movs	r3, #27
 80031ae:	2218      	movs	r2, #24
 80031b0:	4694      	mov	ip, r2
 80031b2:	44bc      	add	ip, r7
 80031b4:	4463      	add	r3, ip
 80031b6:	2208      	movs	r2, #8
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e057      	b.n	800326c <UART_SetConfig+0x1a4>
 80031bc:	231b      	movs	r3, #27
 80031be:	2218      	movs	r2, #24
 80031c0:	4694      	mov	ip, r2
 80031c2:	44bc      	add	ip, r7
 80031c4:	4463      	add	r3, ip
 80031c6:	2210      	movs	r2, #16
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e04f      	b.n	800326c <UART_SetConfig+0x1a4>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a89      	ldr	r2, [pc, #548]	; (80033f8 <UART_SetConfig+0x330>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d143      	bne.n	800325e <UART_SetConfig+0x196>
 80031d6:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <UART_SetConfig+0x33c>)
 80031d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031da:	23c0      	movs	r3, #192	; 0xc0
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4013      	ands	r3, r2
 80031e0:	22c0      	movs	r2, #192	; 0xc0
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02a      	beq.n	800323e <UART_SetConfig+0x176>
 80031e8:	22c0      	movs	r2, #192	; 0xc0
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d82e      	bhi.n	800324e <UART_SetConfig+0x186>
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d012      	beq.n	800321e <UART_SetConfig+0x156>
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d826      	bhi.n	800324e <UART_SetConfig+0x186>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <UART_SetConfig+0x146>
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	00d2      	lsls	r2, r2, #3
 8003208:	4293      	cmp	r3, r2
 800320a:	d010      	beq.n	800322e <UART_SetConfig+0x166>
 800320c:	e01f      	b.n	800324e <UART_SetConfig+0x186>
 800320e:	231b      	movs	r3, #27
 8003210:	2218      	movs	r2, #24
 8003212:	4694      	mov	ip, r2
 8003214:	44bc      	add	ip, r7
 8003216:	4463      	add	r3, ip
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e026      	b.n	800326c <UART_SetConfig+0x1a4>
 800321e:	231b      	movs	r3, #27
 8003220:	2218      	movs	r2, #24
 8003222:	4694      	mov	ip, r2
 8003224:	44bc      	add	ip, r7
 8003226:	4463      	add	r3, ip
 8003228:	2202      	movs	r2, #2
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e01e      	b.n	800326c <UART_SetConfig+0x1a4>
 800322e:	231b      	movs	r3, #27
 8003230:	2218      	movs	r2, #24
 8003232:	4694      	mov	ip, r2
 8003234:	44bc      	add	ip, r7
 8003236:	4463      	add	r3, ip
 8003238:	2204      	movs	r2, #4
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e016      	b.n	800326c <UART_SetConfig+0x1a4>
 800323e:	231b      	movs	r3, #27
 8003240:	2218      	movs	r2, #24
 8003242:	4694      	mov	ip, r2
 8003244:	44bc      	add	ip, r7
 8003246:	4463      	add	r3, ip
 8003248:	2208      	movs	r2, #8
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e00e      	b.n	800326c <UART_SetConfig+0x1a4>
 800324e:	231b      	movs	r3, #27
 8003250:	2218      	movs	r2, #24
 8003252:	4694      	mov	ip, r2
 8003254:	44bc      	add	ip, r7
 8003256:	4463      	add	r3, ip
 8003258:	2210      	movs	r2, #16
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e006      	b.n	800326c <UART_SetConfig+0x1a4>
 800325e:	231b      	movs	r3, #27
 8003260:	2218      	movs	r2, #24
 8003262:	4694      	mov	ip, r2
 8003264:	44bc      	add	ip, r7
 8003266:	4463      	add	r3, ip
 8003268:	2210      	movs	r2, #16
 800326a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <UART_SetConfig+0x330>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d000      	beq.n	8003278 <UART_SetConfig+0x1b0>
 8003276:	e088      	b.n	800338a <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003278:	231b      	movs	r3, #27
 800327a:	2218      	movs	r2, #24
 800327c:	4694      	mov	ip, r2
 800327e:	44bc      	add	ip, r7
 8003280:	4463      	add	r3, ip
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d01d      	beq.n	80032c4 <UART_SetConfig+0x1fc>
 8003288:	dc20      	bgt.n	80032cc <UART_SetConfig+0x204>
 800328a:	2b04      	cmp	r3, #4
 800328c:	d015      	beq.n	80032ba <UART_SetConfig+0x1f2>
 800328e:	dc1d      	bgt.n	80032cc <UART_SetConfig+0x204>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <UART_SetConfig+0x1d2>
 8003294:	2b02      	cmp	r3, #2
 8003296:	d005      	beq.n	80032a4 <UART_SetConfig+0x1dc>
 8003298:	e018      	b.n	80032cc <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800329a:	f7ff fa7f 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 800329e:	0003      	movs	r3, r0
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032a2:	e01d      	b.n	80032e0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032a4:	4b57      	ldr	r3, [pc, #348]	; (8003404 <UART_SetConfig+0x33c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2210      	movs	r2, #16
 80032aa:	4013      	ands	r3, r2
 80032ac:	d002      	beq.n	80032b4 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <UART_SetConfig+0x340>)
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032b2:	e015      	b.n	80032e0 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b55      	ldr	r3, [pc, #340]	; (800340c <UART_SetConfig+0x344>)
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032b8:	e012      	b.n	80032e0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7ff f9bf 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80032be:	0003      	movs	r3, r0
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032c2:	e00d      	b.n	80032e0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032ca:	e009      	b.n	80032e0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80032d0:	231a      	movs	r3, #26
 80032d2:	2218      	movs	r2, #24
 80032d4:	4694      	mov	ip, r2
 80032d6:	44bc      	add	ip, r7
 80032d8:	4463      	add	r3, ip
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
        break;
 80032de:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d100      	bne.n	80032e8 <UART_SetConfig+0x220>
 80032e6:	e139      	b.n	800355c <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	0013      	movs	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	189b      	adds	r3, r3, r2
 80032f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d305      	bcc.n	8003304 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003300:	429a      	cmp	r2, r3
 8003302:	d907      	bls.n	8003314 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8003304:	231a      	movs	r3, #26
 8003306:	2218      	movs	r2, #24
 8003308:	4694      	mov	ip, r2
 800330a:	44bc      	add	ip, r7
 800330c:	4463      	add	r3, ip
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e123      	b.n	800355c <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	6939      	ldr	r1, [r7, #16]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	000b      	movs	r3, r1
 8003322:	0e1b      	lsrs	r3, r3, #24
 8003324:	0010      	movs	r0, r2
 8003326:	0205      	lsls	r5, r0, #8
 8003328:	431d      	orrs	r5, r3
 800332a:	000b      	movs	r3, r1
 800332c:	021c      	lsls	r4, r3, #8
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68b8      	ldr	r0, [r7, #8]
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	1900      	adds	r0, r0, r4
 8003340:	4169      	adcs	r1, r5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	2300      	movs	r3, #0
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f7fc ff66 	bl	8000220 <__aeabi_uldivmod>
 8003354:	0002      	movs	r2, r0
 8003356:	000b      	movs	r3, r1
 8003358:	0013      	movs	r3, r2
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800335c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335e:	23c0      	movs	r3, #192	; 0xc0
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	429a      	cmp	r2, r3
 8003364:	d309      	bcc.n	800337a <UART_SetConfig+0x2b2>
 8003366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	035b      	lsls	r3, r3, #13
 800336c:	429a      	cmp	r2, r3
 800336e:	d204      	bcs.n	800337a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	e0f0      	b.n	800355c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800337a:	231a      	movs	r3, #26
 800337c:	2218      	movs	r2, #24
 800337e:	4694      	mov	ip, r2
 8003380:	44bc      	add	ip, r7
 8003382:	4463      	add	r3, ip
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	e0e8      	b.n	800355c <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	429a      	cmp	r2, r3
 8003394:	d000      	beq.n	8003398 <UART_SetConfig+0x2d0>
 8003396:	e087      	b.n	80034a8 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003398:	231b      	movs	r3, #27
 800339a:	2218      	movs	r2, #24
 800339c:	4694      	mov	ip, r2
 800339e:	44bc      	add	ip, r7
 80033a0:	4463      	add	r3, ip
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d835      	bhi.n	8003414 <UART_SetConfig+0x34c>
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <UART_SetConfig+0x348>)
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b2:	f7ff f9f3 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80033b6:	0003      	movs	r3, r0
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033ba:	e035      	b.n	8003428 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033bc:	f7ff fa04 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 80033c0:	0003      	movs	r3, r0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033c4:	e030      	b.n	8003428 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <UART_SetConfig+0x33c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2210      	movs	r2, #16
 80033cc:	4013      	ands	r3, r2
 80033ce:	d002      	beq.n	80033d6 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <UART_SetConfig+0x340>)
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033d4:	e028      	b.n	8003428 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <UART_SetConfig+0x344>)
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033da:	e025      	b.n	8003428 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033dc:	f7ff f92e 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80033e0:	0003      	movs	r3, r0
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033e4:	e020      	b.n	8003428 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033ec:	e01c      	b.n	8003428 <UART_SetConfig+0x360>
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	efff69f3 	.word	0xefff69f3
 80033f4:	ffffcfff 	.word	0xffffcfff
 80033f8:	40004800 	.word	0x40004800
 80033fc:	fffff4ff 	.word	0xfffff4ff
 8003400:	40004400 	.word	0x40004400
 8003404:	40021000 	.word	0x40021000
 8003408:	003d0900 	.word	0x003d0900
 800340c:	00f42400 	.word	0x00f42400
 8003410:	080039e0 	.word	0x080039e0
      default:
        pclk = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003418:	231a      	movs	r3, #26
 800341a:	2218      	movs	r2, #24
 800341c:	4694      	mov	ip, r2
 800341e:	44bc      	add	ip, r7
 8003420:	4463      	add	r3, ip
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
        break;
 8003426:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d100      	bne.n	8003430 <UART_SetConfig+0x368>
 800342e:	e095      	b.n	800355c <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	005a      	lsls	r2, r3, #1
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	18d2      	adds	r2, r2, r3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0019      	movs	r1, r3
 8003442:	0010      	movs	r0, r2
 8003444:	f7fc fe60 	bl	8000108 <__udivsi3>
 8003448:	0003      	movs	r3, r0
 800344a:	b29b      	uxth	r3, r3
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d921      	bls.n	8003498 <UART_SetConfig+0x3d0>
 8003454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	025b      	lsls	r3, r3, #9
 800345a:	429a      	cmp	r2, r3
 800345c:	d21c      	bcs.n	8003498 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	b29a      	uxth	r2, r3
 8003462:	200e      	movs	r0, #14
 8003464:	2418      	movs	r4, #24
 8003466:	193b      	adds	r3, r7, r4
 8003468:	181b      	adds	r3, r3, r0
 800346a:	210f      	movs	r1, #15
 800346c:	438a      	bics	r2, r1
 800346e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	b29b      	uxth	r3, r3
 8003476:	2207      	movs	r2, #7
 8003478:	4013      	ands	r3, r2
 800347a:	b299      	uxth	r1, r3
 800347c:	193b      	adds	r3, r7, r4
 800347e:	181b      	adds	r3, r3, r0
 8003480:	193a      	adds	r2, r7, r4
 8003482:	1812      	adds	r2, r2, r0
 8003484:	8812      	ldrh	r2, [r2, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	193a      	adds	r2, r7, r4
 8003490:	1812      	adds	r2, r2, r0
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	e061      	b.n	800355c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003498:	231a      	movs	r3, #26
 800349a:	2218      	movs	r2, #24
 800349c:	4694      	mov	ip, r2
 800349e:	44bc      	add	ip, r7
 80034a0:	4463      	add	r3, ip
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e059      	b.n	800355c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a8:	231b      	movs	r3, #27
 80034aa:	2218      	movs	r2, #24
 80034ac:	4694      	mov	ip, r2
 80034ae:	44bc      	add	ip, r7
 80034b0:	4463      	add	r3, ip
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d822      	bhi.n	80034fe <UART_SetConfig+0x436>
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	4b30      	ldr	r3, [pc, #192]	; (800357c <UART_SetConfig+0x4b4>)
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c2:	f7ff f96b 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80034c6:	0003      	movs	r3, r0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ca:	e022      	b.n	8003512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7ff f97c 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 80034d0:	0003      	movs	r3, r0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034d4:	e01d      	b.n	8003512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <UART_SetConfig+0x4b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2210      	movs	r2, #16
 80034dc:	4013      	ands	r3, r2
 80034de:	d002      	beq.n	80034e6 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <UART_SetConfig+0x4bc>)
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034e4:	e015      	b.n	8003512 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80034e6:	4b28      	ldr	r3, [pc, #160]	; (8003588 <UART_SetConfig+0x4c0>)
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ea:	e012      	b.n	8003512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ec:	f7ff f8a6 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80034f0:	0003      	movs	r3, r0
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034f4:	e00d      	b.n	8003512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034fc:	e009      	b.n	8003512 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003502:	231a      	movs	r3, #26
 8003504:	2218      	movs	r2, #24
 8003506:	4694      	mov	ip, r2
 8003508:	44bc      	add	ip, r7
 800350a:	4463      	add	r3, ip
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
        break;
 8003510:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d021      	beq.n	800355c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	085a      	lsrs	r2, r3, #1
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	18d2      	adds	r2, r2, r3
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	0019      	movs	r1, r3
 8003528:	0010      	movs	r0, r2
 800352a:	f7fc fded 	bl	8000108 <__udivsi3>
 800352e:	0003      	movs	r3, r0
 8003530:	b29b      	uxth	r3, r3
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d909      	bls.n	800354e <UART_SetConfig+0x486>
 800353a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	025b      	lsls	r3, r3, #9
 8003540:	429a      	cmp	r2, r3
 8003542:	d204      	bcs.n	800354e <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	e006      	b.n	800355c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800354e:	231a      	movs	r3, #26
 8003550:	2218      	movs	r2, #24
 8003552:	4694      	mov	ip, r2
 8003554:	44bc      	add	ip, r7
 8003556:	4463      	add	r3, ip
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2200      	movs	r2, #0
 8003560:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2200      	movs	r2, #0
 8003566:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003568:	231a      	movs	r3, #26
 800356a:	2218      	movs	r2, #24
 800356c:	4694      	mov	ip, r2
 800356e:	44bc      	add	ip, r7
 8003570:	4463      	add	r3, ip
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b00e      	add	sp, #56	; 0x38
 800357a:	bdb0      	pop	{r4, r5, r7, pc}
 800357c:	08003a04 	.word	0x08003a04
 8003580:	40021000 	.word	0x40021000
 8003584:	003d0900 	.word	0x003d0900
 8003588:	00f42400 	.word	0x00f42400

0800358c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	d00b      	beq.n	80035b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a4a      	ldr	r2, [pc, #296]	; (80036d0 <UART_AdvFeatureConfig+0x144>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2202      	movs	r2, #2
 80035bc:	4013      	ands	r3, r2
 80035be:	d00b      	beq.n	80035d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a43      	ldr	r2, [pc, #268]	; (80036d4 <UART_AdvFeatureConfig+0x148>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2204      	movs	r2, #4
 80035de:	4013      	ands	r3, r2
 80035e0:	d00b      	beq.n	80035fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a3b      	ldr	r2, [pc, #236]	; (80036d8 <UART_AdvFeatureConfig+0x14c>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2208      	movs	r2, #8
 8003600:	4013      	ands	r3, r2
 8003602:	d00b      	beq.n	800361c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a34      	ldr	r2, [pc, #208]	; (80036dc <UART_AdvFeatureConfig+0x150>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2210      	movs	r2, #16
 8003622:	4013      	ands	r3, r2
 8003624:	d00b      	beq.n	800363e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a2c      	ldr	r2, [pc, #176]	; (80036e0 <UART_AdvFeatureConfig+0x154>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2220      	movs	r2, #32
 8003644:	4013      	ands	r3, r2
 8003646:	d00b      	beq.n	8003660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <UART_AdvFeatureConfig+0x158>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2240      	movs	r2, #64	; 0x40
 8003666:	4013      	ands	r3, r2
 8003668:	d01d      	beq.n	80036a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <UART_AdvFeatureConfig+0x15c>)
 8003672:	4013      	ands	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	035b      	lsls	r3, r3, #13
 800368a:	429a      	cmp	r2, r3
 800368c:	d10b      	bne.n	80036a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a15      	ldr	r2, [pc, #84]	; (80036ec <UART_AdvFeatureConfig+0x160>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	4013      	ands	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <UART_AdvFeatureConfig+0x164>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
  }
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffdffff 	.word	0xfffdffff
 80036d4:	fffeffff 	.word	0xfffeffff
 80036d8:	fffbffff 	.word	0xfffbffff
 80036dc:	ffff7fff 	.word	0xffff7fff
 80036e0:	ffffefff 	.word	0xffffefff
 80036e4:	ffffdfff 	.word	0xffffdfff
 80036e8:	ffefffff 	.word	0xffefffff
 80036ec:	ff9fffff 	.word	0xff9fffff
 80036f0:	fff7ffff 	.word	0xfff7ffff

080036f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	2100      	movs	r1, #0
 8003702:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003704:	f7fe f84c 	bl	80017a0 <HAL_GetTick>
 8003708:	0003      	movs	r3, r0
 800370a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2208      	movs	r2, #8
 8003714:	4013      	ands	r3, r2
 8003716:	2b08      	cmp	r3, #8
 8003718:	d10c      	bne.n	8003734 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	0391      	lsls	r1, r2, #14
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4a17      	ldr	r2, [pc, #92]	; (8003780 <UART_CheckIdleState+0x8c>)
 8003724:	9200      	str	r2, [sp, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	f000 f82c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800372c:	1e03      	subs	r3, r0, #0
 800372e:	d001      	beq.n	8003734 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e021      	b.n	8003778 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2204      	movs	r2, #4
 800373c:	4013      	ands	r3, r2
 800373e:	2b04      	cmp	r3, #4
 8003740:	d10c      	bne.n	800375c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	03d1      	lsls	r1, r2, #15
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <UART_CheckIdleState+0x8c>)
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	f000 f818 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d001      	beq.n	800375c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e00d      	b.n	8003778 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2274      	movs	r2, #116	; 0x74
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b004      	add	sp, #16
 800377e:	bd80      	pop	{r7, pc}
 8003780:	01ffffff 	.word	0x01ffffff

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b094      	sub	sp, #80	; 0x50
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e0a3      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003798:	3301      	adds	r3, #1
 800379a:	d100      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0x1a>
 800379c:	e09f      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd ffff 	bl	80017a0 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d13d      	bne.n	8003830 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b4:	f3ef 8310 	mrs	r3, PRIMASK
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
 80037be:	2301      	movs	r3, #1
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	f383 8810 	msr	PRIMASK, r3
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	494c      	ldr	r1, [pc, #304]	; (8003908 <UART_WaitOnFlagUntilTimeout+0x184>)
 80037d6:	400a      	ands	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	f383 8810 	msr	PRIMASK, r3
}
 80037e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80037ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40
 80037f0:	2301      	movs	r3, #1
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	f383 8810 	msr	PRIMASK, r3
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2101      	movs	r1, #1
 8003808:	438a      	bics	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2274      	movs	r2, #116	; 0x74
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e067      	b.n	8003900 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2204      	movs	r2, #4
 8003838:	4013      	ands	r3, r2
 800383a:	d050      	beq.n	80038de <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	401a      	ands	r2, r3
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	429a      	cmp	r2, r3
 800384e:	d146      	bne.n	80038de <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2280      	movs	r2, #128	; 0x80
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385a:	f3ef 8310 	mrs	r3, PRIMASK
 800385e:	613b      	str	r3, [r7, #16]
  return(result);
 8003860:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f383 8810 	msr	PRIMASK, r3
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4923      	ldr	r1, [pc, #140]	; (8003908 <UART_WaitOnFlagUntilTimeout+0x184>)
 800387c:	400a      	ands	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003882:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	61fb      	str	r3, [r7, #28]
  return(result);
 8003892:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
 8003896:	2301      	movs	r3, #1
 8003898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	438a      	bics	r2, r1
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	2120      	movs	r1, #32
 80038d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2274      	movs	r2, #116	; 0x74
 80038d6:	2100      	movs	r1, #0
 80038d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e010      	b.n	8003900 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	4013      	ands	r3, r2
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	425a      	negs	r2, r3
 80038ee:	4153      	adcs	r3, r2
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	001a      	movs	r2, r3
 80038f4:	1dfb      	adds	r3, r7, #7
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d100      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0x17a>
 80038fc:	e74b      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b014      	add	sp, #80	; 0x50
 8003906:	bd80      	pop	{r7, pc}
 8003908:	fffffe5f 	.word	0xfffffe5f

0800390c <__libc_init_array>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	2600      	movs	r6, #0
 8003910:	4d0c      	ldr	r5, [pc, #48]	; (8003944 <__libc_init_array+0x38>)
 8003912:	4c0d      	ldr	r4, [pc, #52]	; (8003948 <__libc_init_array+0x3c>)
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	42a6      	cmp	r6, r4
 800391a:	d109      	bne.n	8003930 <__libc_init_array+0x24>
 800391c:	2600      	movs	r6, #0
 800391e:	f000 f821 	bl	8003964 <_init>
 8003922:	4d0a      	ldr	r5, [pc, #40]	; (800394c <__libc_init_array+0x40>)
 8003924:	4c0a      	ldr	r4, [pc, #40]	; (8003950 <__libc_init_array+0x44>)
 8003926:	1b64      	subs	r4, r4, r5
 8003928:	10a4      	asrs	r4, r4, #2
 800392a:	42a6      	cmp	r6, r4
 800392c:	d105      	bne.n	800393a <__libc_init_array+0x2e>
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	00b3      	lsls	r3, r6, #2
 8003932:	58eb      	ldr	r3, [r5, r3]
 8003934:	4798      	blx	r3
 8003936:	3601      	adds	r6, #1
 8003938:	e7ee      	b.n	8003918 <__libc_init_array+0xc>
 800393a:	00b3      	lsls	r3, r6, #2
 800393c:	58eb      	ldr	r3, [r5, r3]
 800393e:	4798      	blx	r3
 8003940:	3601      	adds	r6, #1
 8003942:	e7f2      	b.n	800392a <__libc_init_array+0x1e>
 8003944:	08003a30 	.word	0x08003a30
 8003948:	08003a30 	.word	0x08003a30
 800394c:	08003a30 	.word	0x08003a30
 8003950:	08003a34 	.word	0x08003a34

08003954 <memset>:
 8003954:	0003      	movs	r3, r0
 8003956:	1882      	adds	r2, r0, r2
 8003958:	4293      	cmp	r3, r2
 800395a:	d100      	bne.n	800395e <memset+0xa>
 800395c:	4770      	bx	lr
 800395e:	7019      	strb	r1, [r3, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	e7f9      	b.n	8003958 <memset+0x4>

08003964 <_init>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr

08003970 <_fini>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr
