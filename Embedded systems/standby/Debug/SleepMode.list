
SleepMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08003804  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003804  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc76  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdc  00000000  00000000  0002bd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002e1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011771  00000000  00000000  0002ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba91  00000000  00000000  00040199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a305  00000000  00000000  0004bc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5f2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002298  00000000  00000000  000b5f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003698 	.word	0x08003698

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003698 	.word	0x08003698

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fb00 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f86a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f944 	bl	8000748 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004c0:	f000 f8e0 	bl	8000684 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80004c4:	f000 f90c 	bl	80006e0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <main+0xb4>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fee2 	bl	8002294 <HAL_RTCEx_DeactivateWakeUpTimer>
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <main+0xb4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	22ff      	movs	r2, #255	; 0xff
 80004d8:	401a      	ands	r2, r3
 80004da:	4b22      	ldr	r3, [pc, #136]	; (8000564 <main+0xb4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4922      	ldr	r1, [pc, #136]	; (8000568 <main+0xb8>)
 80004e0:	430a      	orrs	r2, r1
 80004e2:	60da      	str	r2, [r3, #12]
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <main+0xbc>)
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	0352      	lsls	r2, r2, #13
 80004ea:	615a      	str	r2, [r3, #20]
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x0009, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <main+0xb4>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	2109      	movs	r1, #9
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 fe08 	bl	8002108 <HAL_RTCEx_SetWakeUpTimer_IT>

    /* USER CODE BEGIN 3 */
	  /*HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle with a pin to check the wake-up period
	  HAL_Delay(2000);*/

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	019b      	lsls	r3, r3, #6
 80004fc:	481c      	ldr	r0, [pc, #112]	; (8000570 <main+0xc0>)
 80004fe:	2201      	movs	r2, #1
 8000500:	0019      	movs	r1, r3
 8000502:	f000 fdd5 	bl	80010b0 <HAL_GPIO_WritePin>
	        HAL_UART_Transmit(&hlpuart1, "yandi\r\n", 7, 1000);
 8000506:	23fa      	movs	r3, #250	; 0xfa
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	491a      	ldr	r1, [pc, #104]	; (8000574 <main+0xc4>)
 800050c:	481a      	ldr	r0, [pc, #104]	; (8000578 <main+0xc8>)
 800050e:	2207      	movs	r2, #7
 8000510:	f001 ffa0 	bl	8002454 <HAL_UART_Transmit>

	        HAL_Delay(3000);
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <main+0xcc>)
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fb3e 	bl	8000b98 <HAL_Delay>


	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	019b      	lsls	r3, r3, #6
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0xc0>)
 8000522:	2200      	movs	r2, #0
 8000524:	0019      	movs	r1, r3
 8000526:	f000 fdc3 	bl	80010b0 <HAL_GPIO_WritePin>
	        HAL_UART_Transmit(&hlpuart1, "sondu\r\n", 7, 1000);
 800052a:	23fa      	movs	r3, #250	; 0xfa
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4914      	ldr	r1, [pc, #80]	; (8000580 <main+0xd0>)
 8000530:	4811      	ldr	r0, [pc, #68]	; (8000578 <main+0xc8>)
 8000532:	2207      	movs	r2, #7
 8000534:	f001 ff8e 	bl	8002454 <HAL_UART_Transmit>

	  HAL_SuspendTick(); // Disable SysTick, otherwise it would wake-up the CPU within 1 ms
 8000538:	f000 fb52 	bl	8000be0 <HAL_SuspendTick>

	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800053c:	2101      	movs	r1, #1
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fdd4 	bl	80010ec <HAL_PWR_EnterSLEEPMode>
	  HAL_ResumeTick(); // Enable SysTick after wake-up
 8000544:	f000 fb5a 	bl	8000bfc <HAL_ResumeTick>

	  printf("About to enter the STANDBY MODE\r\n");
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <main+0xd4>)
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <main+0xd8>)
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f002 fc7c 	bl	8002e4c <siprintf>
 8000554:	0003      	movs	r3, r0
 8000556:	b29a      	uxth	r2, r3
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <main+0xdc>)
 800055a:	490b      	ldr	r1, [pc, #44]	; (8000588 <main+0xd8>)
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <main+0xc8>)
 800055e:	f001 ff79 	bl	8002454 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000562:	e7c9      	b.n	80004f8 <main+0x48>
 8000564:	2000021c 	.word	0x2000021c
 8000568:	fffffb7f 	.word	0xfffffb7f
 800056c:	40010400 	.word	0x40010400
 8000570:	50000800 	.word	0x50000800
 8000574:	080036b0 	.word	0x080036b0
 8000578:	20000198 	.word	0x20000198
 800057c:	00000bb8 	.word	0x00000bb8
 8000580:	080036b8 	.word	0x080036b8
 8000584:	080036c0 	.word	0x080036c0
 8000588:	20000098 	.word	0x20000098
 800058c:	0000ffff 	.word	0x0000ffff

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b099      	sub	sp, #100	; 0x64
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	242c      	movs	r4, #44	; 0x2c
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2334      	movs	r3, #52	; 0x34
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 fc4b 	bl	8002e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a6:	2318      	movs	r3, #24
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	0018      	movs	r0, r3
 80005ac:	2314      	movs	r3, #20
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f002 fc43 	bl	8002e3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	2318      	movs	r3, #24
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f002 fc3c 	bl	8002e3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	4b2d      	ldr	r3, [pc, #180]	; (800067c <SystemClock_Config+0xec>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a2d      	ldr	r2, [pc, #180]	; (8000680 <SystemClock_Config+0xf0>)
 80005ca:	401a      	ands	r2, r3
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <SystemClock_Config+0xec>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0109      	lsls	r1, r1, #4
 80005d2:	430a      	orrs	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005d6:	0021      	movs	r1, r4
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	220a      	movs	r2, #10
 80005dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2210      	movs	r2, #16
 80005e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2201      	movs	r2, #1
 80005ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2202      	movs	r2, #2
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	02d2      	lsls	r2, r2, #11
 8000602:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	03d2      	lsls	r2, r2, #15
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	187b      	adds	r3, r7, r1
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fdc4 	bl	800119c <HAL_RCC_OscConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000618:	f000 f90a 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	2118      	movs	r1, #24
 800061e:	187b      	adds	r3, r7, r1
 8000620:	220f      	movs	r2, #15
 8000622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2203      	movs	r2, #3
 8000628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2101      	movs	r1, #1
 8000640:	0018      	movs	r0, r3
 8000642:	f001 f927 	bl	8001894 <HAL_RCC_ClockConfig>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800064a:	f000 f8f1 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
 800064e:	003b      	movs	r3, r7
 8000650:	2224      	movs	r2, #36	; 0x24
 8000652:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000654:	003b      	movs	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800065a:	003b      	movs	r3, r7
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0292      	lsls	r2, r2, #10
 8000660:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fb39 	bl	8001cdc <HAL_RCCEx_PeriphCLKConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800066e:	f000 f8df 	bl	8000830 <Error_Handler>
  }
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b019      	add	sp, #100	; 0x64
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40007000 	.word	0x40007000
 8000680:	ffffe7ff 	.word	0xffffe7ff

08000684 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_LPUART1_UART_Init+0x58>)
 800068c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 8000690:	22e1      	movs	r2, #225	; 0xe1
 8000692:	0252      	lsls	r2, r2, #9
 8000694:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_LPUART1_UART_Init+0x54>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fe72 	bl	80023ac <HAL_UART_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f8b0 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000198 	.word	0x20000198
 80006dc:	40004800 	.word	0x40004800

080006e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_RTC_Init+0x60>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_RTC_Init+0x64>)
 80006e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_RTC_Init+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_RTC_Init+0x60>)
 80006f2:	227f      	movs	r2, #127	; 0x7f
 80006f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_RTC_Init+0x60>)
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_RTC_Init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_RTC_Init+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_RTC_Init+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_RTC_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_RTC_Init+0x60>)
 8000716:	0018      	movs	r0, r3
 8000718:	f001 fc06 	bl	8001f28 <HAL_RTC_Init>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000720:	f000 f886 	bl	8000830 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 7, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_RTC_Init+0x60>)
 8000726:	2204      	movs	r2, #4
 8000728:	2107      	movs	r1, #7
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fcec 	bl	8002108 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000734:	f000 f87c 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	2000021c 	.word	0x2000021c
 8000744:	40002800 	.word	0x40002800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b089      	sub	sp, #36	; 0x24
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	240c      	movs	r4, #12
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	2314      	movs	r3, #20
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f002 fb6f 	bl	8002e3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000764:	2104      	movs	r1, #4
 8000766:	430a      	orrs	r2, r1
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_GPIO_Init+0xd0>)
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	2204      	movs	r2, #4
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_GPIO_Init+0xd0>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000794:	2102      	movs	r1, #2
 8000796:	430a      	orrs	r2, r1
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0xd0>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	2202      	movs	r2, #2
 80007a0:	4013      	ands	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	481c      	ldr	r0, [pc, #112]	; (800081c <MX_GPIO_Init+0xd4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	0019      	movs	r1, r3
 80007b0:	f000 fc7e 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	2200      	movs	r2, #0
 80007ba:	2104      	movs	r1, #4
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fc77 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0192      	lsls	r2, r2, #6
 80007c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <MX_GPIO_Init+0xd4>)
 80007e0:	0019      	movs	r1, r3
 80007e2:	0010      	movs	r0, r2
 80007e4:	f000 faf6 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e8:	0021      	movs	r1, r4
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2204      	movs	r2, #4
 80007ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2201      	movs	r2, #1
 80007f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	187a      	adds	r2, r7, r1
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fae2 	bl	8000dd4 <HAL_GPIO_Init>

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b009      	add	sp, #36	; 0x24
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	50000800 	.word	0x50000800

08000820 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	// Callback called from the RTC interrupt service routine
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <HAL_MspInit+0x24>)
 8000842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x24>)
 8000846:	2101      	movs	r1, #1
 8000848:	430a      	orrs	r2, r1
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <HAL_MspInit+0x24>)
 800084e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_MspInit+0x24>)
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0549      	lsls	r1, r1, #21
 8000856:	430a      	orrs	r2, r1
 8000858:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b08b      	sub	sp, #44	; 0x2c
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	2414      	movs	r4, #20
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	2314      	movs	r3, #20
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f002 fae0 	bl	8002e3c <memset>
  if(huart->Instance==LPUART1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a28      	ldr	r2, [pc, #160]	; (8000924 <HAL_UART_MspInit+0xc0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d14a      	bne.n	800091c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <HAL_UART_MspInit+0xc4>)
 8000888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <HAL_UART_MspInit+0xc4>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	02c9      	lsls	r1, r1, #11
 8000890:	430a      	orrs	r2, r1
 8000892:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <HAL_UART_MspInit+0xc4>)
 8000896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <HAL_UART_MspInit+0xc4>)
 800089a:	2104      	movs	r1, #4
 800089c:	430a      	orrs	r2, r1
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <HAL_UART_MspInit+0xc4>)
 80008a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a4:	2204      	movs	r2, #4
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <HAL_UART_MspInit+0xc4>)
 80008ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <HAL_UART_MspInit+0xc4>)
 80008b2:	2102      	movs	r1, #2
 80008b4:	430a      	orrs	r2, r1
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_UART_MspInit+0xc4>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	2202      	movs	r2, #2
 80008be:	4013      	ands	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2201      	movs	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2203      	movs	r2, #3
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2206      	movs	r2, #6
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	4a11      	ldr	r2, [pc, #68]	; (800092c <HAL_UART_MspInit+0xc8>)
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f000 fa73 	bl	8000dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	00d2      	lsls	r2, r2, #3
 80008f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2202      	movs	r2, #2
 80008fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2203      	movs	r2, #3
 8000908:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2206      	movs	r2, #6
 800090e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	187b      	adds	r3, r7, r1
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_UART_MspInit+0xcc>)
 8000914:	0019      	movs	r1, r3
 8000916:	0010      	movs	r0, r2
 8000918:	f000 fa5c 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b00b      	add	sp, #44	; 0x2c
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	40004800 	.word	0x40004800
 8000928:	40021000 	.word	0x40021000
 800092c:	50000800 	.word	0x50000800
 8000930:	50000400 	.word	0x50000400

08000934 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_RTC_MspInit+0x38>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10e      	bne.n	8000964 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_RTC_MspInit+0x3c>)
 8000948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_RTC_MspInit+0x3c>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	02c9      	lsls	r1, r1, #11
 8000950:	430a      	orrs	r2, r1
 8000952:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2002      	movs	r0, #2
 800095a:	f000 fa09 	bl	8000d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800095e:	2002      	movs	r0, #2
 8000960:	f000 fa1b 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40002800 	.word	0x40002800
 8000970:	40021000 	.word	0x40021000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f8e2 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <RTC_IRQHandler+0x14>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 fcd4 	bl	8002358 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	2000021c 	.word	0x2000021c

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f002 f9fc 	bl	8002de8 <__errno>
 80009f0:	0003      	movs	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	425b      	negs	r3, r3
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	18d2      	adds	r2, r2, r3
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b006      	add	sp, #24
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20002000 	.word	0x20002000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	20000258 	.word	0x20000258

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a3a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a3c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <LoopForever+0xa>)
    CMP R1, R2
 8000a40:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a42:	d105      	bne.n	8000a50 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a46:	4913      	ldr	r1, [pc, #76]	; (8000a94 <LoopForever+0x12>)
    STR R1, [R0]
 8000a48:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a4c:	4913      	ldr	r1, [pc, #76]	; (8000a9c <LoopForever+0x1a>)
    STR R1, [R0]
 8000a4e:	6001      	str	r1, [r0, #0]

08000a50 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a52:	4914      	ldr	r1, [pc, #80]	; (8000aa4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <LoopForever+0x26>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a68:	4c11      	ldr	r4, [pc, #68]	; (8000ab0 <LoopForever+0x2e>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a76:	f7ff ffd7 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f002 f9bb 	bl	8002df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7e:	f7ff fd17 	bl	80004b0 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
   ldr   r0, =_estack
 8000a84:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000a88:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a8c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a90:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a94:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a98:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a9c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa8:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 8000aac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ab0:	20000254 	.word	0x20000254

08000ab4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x3c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_Init+0x3c>)
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f811 	bl	8000af8 <HAL_InitTick>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	e001      	b.n	8000ae6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae2:	f7ff feab 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_InitTick+0x5c>)
 8000b02:	681c      	ldr	r4, [r3, #0]
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_InitTick+0x60>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0019      	movs	r1, r3
 8000b0a:	23fa      	movs	r3, #250	; 0xfa
 8000b0c:	0098      	lsls	r0, r3, #2
 8000b0e:	f7ff fb05 	bl	800011c <__udivsi3>
 8000b12:	0003      	movs	r3, r0
 8000b14:	0019      	movs	r1, r3
 8000b16:	0020      	movs	r0, r4
 8000b18:	f7ff fb00 	bl	800011c <__udivsi3>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f94b 	bl	8000dba <HAL_SYSTICK_Config>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e00f      	b.n	8000b4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d80b      	bhi.n	8000b4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f918 	bl	8000d70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_InitTick+0x64>)
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b003      	add	sp, #12
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_IncTick+0x1c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	001a      	movs	r2, r3
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_IncTick+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	18d2      	adds	r2, r2, r3
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_IncTick+0x20>)
 8000b72:	601a      	str	r2, [r3, #0]
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000240 	.word	0x20000240

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <HAL_GetTick+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000240 	.word	0x20000240

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff fff0 	bl	8000b84 <HAL_GetTick>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_Delay+0x44>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	189b      	adds	r3, r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	f7ff ffe0 	bl	8000b84 <HAL_GetTick>
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000008 	.word	0x20000008

08000be0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_SuspendTick+0x18>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_SuspendTick+0x18>)
 8000bea:	2102      	movs	r1, #2
 8000bec:	438a      	bics	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <HAL_ResumeTick+0x18>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_ResumeTick+0x18>)
 8000c06:	2102      	movs	r1, #2
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0002      	movs	r2, r0
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b7f      	cmp	r3, #127	; 0x7f
 8000c2a:	d809      	bhi.n	8000c40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	001a      	movs	r2, r3
 8000c32:	231f      	movs	r3, #31
 8000c34:	401a      	ands	r2, r3
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_EnableIRQ+0x30>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	000a      	movs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
  }
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	0002      	movs	r2, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c60:	d828      	bhi.n	8000cb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c62:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <__NVIC_SetPriority+0xd4>)
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	33c0      	adds	r3, #192	; 0xc0
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	589b      	ldr	r3, [r3, r2]
 8000c72:	1dfa      	adds	r2, r7, #7
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	0011      	movs	r1, r2
 8000c78:	2203      	movs	r2, #3
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	00d2      	lsls	r2, r2, #3
 8000c7e:	21ff      	movs	r1, #255	; 0xff
 8000c80:	4091      	lsls	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	401a      	ands	r2, r3
 8000c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	019b      	lsls	r3, r3, #6
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	401a      	ands	r2, r3
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	0018      	movs	r0, r3
 8000c98:	2303      	movs	r3, #3
 8000c9a:	4003      	ands	r3, r0
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca0:	481f      	ldr	r0, [pc, #124]	; (8000d20 <__NVIC_SetPriority+0xd4>)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	430a      	orrs	r2, r1
 8000cac:	33c0      	adds	r3, #192	; 0xc0
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cb2:	e031      	b.n	8000d18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <__NVIC_SetPriority+0xd8>)
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0019      	movs	r1, r3
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	400b      	ands	r3, r1
 8000cc0:	3b08      	subs	r3, #8
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3306      	adds	r3, #6
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	18d3      	adds	r3, r2, r3
 8000cca:	3304      	adds	r3, #4
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1dfa      	adds	r2, r7, #7
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	00d2      	lsls	r2, r2, #3
 8000cda:	21ff      	movs	r1, #255	; 0xff
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	43d2      	mvns	r2, r2
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	22ff      	movs	r2, #255	; 0xff
 8000cec:	401a      	ands	r2, r3
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	4003      	ands	r3, r0
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <__NVIC_SetPriority+0xd8>)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	001c      	movs	r4, r3
 8000d04:	230f      	movs	r3, #15
 8000d06:	4023      	ands	r3, r4
 8000d08:	3b08      	subs	r3, #8
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	3306      	adds	r3, #6
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	18c3      	adds	r3, r0, r3
 8000d14:	3304      	adds	r3, #4
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b003      	add	sp, #12
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	045b      	lsls	r3, r3, #17
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d301      	bcc.n	8000d40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e010      	b.n	8000d62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <SysTick_Config+0x44>)
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	3a01      	subs	r2, #1
 8000d46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d48:	2301      	movs	r3, #1
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff ff7c 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x44>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x44>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	1c02      	adds	r2, r0, #0
 8000d80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	0002      	movs	r2, r0
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ff33 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ffaf 	bl	8000d28 <SysTick_Config>
 8000dca:	0003      	movs	r3, r0
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dea:	e149      	b.n	8001080 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d100      	bne.n	8000e04 <HAL_GPIO_Init+0x30>
 8000e02:	e13a      	b.n	800107a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d005      	beq.n	8000e1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d130      	bne.n	8000e7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	43da      	mvns	r2, r3
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	0013      	movs	r3, r2
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e52:	2201      	movs	r2, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	2201      	movs	r2, #1
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2203      	movs	r2, #3
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d017      	beq.n	8000eba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d123      	bne.n	8000f0e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	58d3      	ldr	r3, [r2, r3]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	4013      	ands	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	691a      	ldr	r2, [r3, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	6939      	ldr	r1, [r7, #16]
 8000f0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	029b      	lsls	r3, r3, #10
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d100      	bne.n	8000f50 <HAL_GPIO_Init+0x17c>
 8000f4e:	e094      	b.n	800107a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_GPIO_Init+0x2c4>)
 8000f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f54:	4b50      	ldr	r3, [pc, #320]	; (8001098 <HAL_GPIO_Init+0x2c4>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	589b      	ldr	r3, [r3, r2]
 8000f68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	23a0      	movs	r3, #160	; 0xa0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1de>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a44      	ldr	r2, [pc, #272]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1da>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a43      	ldr	r2, [pc, #268]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a42      	ldr	r2, [pc, #264]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1d2>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	400a      	ands	r2, r1
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	025b      	lsls	r3, r3, #9
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	035b      	lsls	r3, r3, #13
 800103e:	4013      	ands	r3, r2
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	039b      	lsls	r3, r3, #14
 8001068:	4013      	ands	r3, r2
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	40da      	lsrs	r2, r3
 8001088:	1e13      	subs	r3, r2, #0
 800108a:	d000      	beq.n	800108e <HAL_GPIO_Init+0x2ba>
 800108c:	e6ae      	b.n	8000dec <HAL_GPIO_Init+0x18>
  }
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b006      	add	sp, #24
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	50000400 	.word	0x50000400
 80010a4:	50000800 	.word	0x50000800
 80010a8:	50001c00 	.word	0x50001c00
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	0008      	movs	r0, r1
 80010ba:	0011      	movs	r1, r2
 80010bc:	1cbb      	adds	r3, r7, #2
 80010be:	1c02      	adds	r2, r0, #0
 80010c0:	801a      	strh	r2, [r3, #0]
 80010c2:	1c7b      	adds	r3, r7, #1
 80010c4:	1c0a      	adds	r2, r1, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c8:	1c7b      	adds	r3, r7, #1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d0:	1cbb      	adds	r3, r7, #2
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010d8:	e003      	b.n	80010e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010da:	1cbb      	adds	r3, r7, #2
 80010dc:	881a      	ldrh	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	000a      	movs	r2, r1
 80010f6:	1cfb      	adds	r3, r7, #3
 80010f8:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_PWR_EnterSLEEPMode+0xa4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	2201      	movs	r2, #1
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <HAL_PWR_EnterSLEEPMode+0x40>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001126:	491b      	ldr	r1, [pc, #108]	; (8001194 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8001128:	400a      	ands	r2, r1
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2203      	movs	r2, #3
 8001136:	4393      	bics	r3, r2
 8001138:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_PWR_EnterSLEEPMode+0xac>)
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_PWR_EnterSLEEPMode+0xac>)
 800114e:	2104      	movs	r1, #4
 8001150:	438a      	bics	r2, r1
 8001152:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001154:	1cfb      	adds	r3, r7, #3
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800115c:	bf30      	wfi
 800115e:	e002      	b.n	8001166 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001160:	bf40      	sev
    __WFE();
 8001162:	bf20      	wfe
    __WFE();
 8001164:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d009      	beq.n	8001180 <HAL_PWR_EnterSLEEPMode+0x94>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	0089      	lsls	r1, r1, #2
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8001180:	46c0      	nop			; (mov r8, r8)

}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b006      	add	sp, #24
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	40007000 	.word	0x40007000
 8001190:	40010000 	.word	0x40010000
 8001194:	fffffdff 	.word	0xfffffdff
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f000 fb6c 	bl	8001888 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b0:	4bc8      	ldr	r3, [pc, #800]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	220c      	movs	r2, #12
 80011b6:	4013      	ands	r3, r2
 80011b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ba:	4bc6      	ldr	r3, [pc, #792]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	025b      	lsls	r3, r3, #9
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2201      	movs	r2, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x36>
 80011d0:	e07d      	b.n	80012ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d007      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d112      	bne.n	8001204 <HAL_RCC_OscConfig+0x68>
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	025b      	lsls	r3, r3, #9
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d10d      	bne.n	8001204 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	4bba      	ldr	r3, [pc, #744]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4013      	ands	r3, r2
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x5a>
 80011f4:	e06a      	b.n	80012cc <HAL_RCC_OscConfig+0x130>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d166      	bne.n	80012cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	f000 fb42 	bl	8001888 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	429a      	cmp	r2, r3
 800120e:	d107      	bne.n	8001220 <HAL_RCC_OscConfig+0x84>
 8001210:	4bb0      	ldr	r3, [pc, #704]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4baf      	ldr	r3, [pc, #700]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	0249      	lsls	r1, r1, #9
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e027      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	23a0      	movs	r3, #160	; 0xa0
 8001226:	02db      	lsls	r3, r3, #11
 8001228:	429a      	cmp	r2, r3
 800122a:	d10e      	bne.n	800124a <HAL_RCC_OscConfig+0xae>
 800122c:	4ba9      	ldr	r3, [pc, #676]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4ba8      	ldr	r3, [pc, #672]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	02c9      	lsls	r1, r1, #11
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	4ba6      	ldr	r3, [pc, #664]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4ba5      	ldr	r3, [pc, #660]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0249      	lsls	r1, r1, #9
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e012      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 800124a:	4ba2      	ldr	r3, [pc, #648]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4ba1      	ldr	r3, [pc, #644]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001250:	49a1      	ldr	r1, [pc, #644]	; (80014d8 <HAL_RCC_OscConfig+0x33c>)
 8001252:	400a      	ands	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	4b9f      	ldr	r3, [pc, #636]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4b9b      	ldr	r3, [pc, #620]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b9a      	ldr	r3, [pc, #616]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800126a:	499c      	ldr	r1, [pc, #624]	; (80014dc <HAL_RCC_OscConfig+0x340>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d014      	beq.n	80012a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fc84 	bl	8000b84 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001282:	f7ff fc7f 	bl	8000b84 <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b64      	cmp	r3, #100	; 0x64
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e2f9      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001294:	4b8f      	ldr	r3, [pc, #572]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0xe6>
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc6f 	bl	8000b84 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fc6a 	bl	8000b84 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e2e4      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012be:	4b85      	ldr	r3, [pc, #532]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	029b      	lsls	r3, r3, #10
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x110>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d100      	bne.n	80012da <HAL_RCC_OscConfig+0x13e>
 80012d8:	e099      	b.n	800140e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	2220      	movs	r2, #32
 80012e4:	4013      	ands	r3, r2
 80012e6:	d009      	beq.n	80012fc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80012e8:	4b7a      	ldr	r3, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80012ee:	2120      	movs	r1, #32
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	2220      	movs	r2, #32
 80012f8:	4393      	bics	r3, r2
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d005      	beq.n	800130e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	2b0c      	cmp	r3, #12
 8001306:	d13e      	bne.n	8001386 <HAL_RCC_OscConfig+0x1ea>
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d13b      	bne.n	8001386 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d004      	beq.n	8001322 <HAL_RCC_OscConfig+0x186>
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e2b2      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b6c      	ldr	r3, [pc, #432]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <HAL_RCC_OscConfig+0x344>)
 8001328:	4013      	ands	r3, r2
 800132a:	0019      	movs	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	021a      	lsls	r2, r3, #8
 8001332:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001334:	430a      	orrs	r2, r1
 8001336:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001338:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2209      	movs	r2, #9
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800134a:	f000 fbeb 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 800134e:	0001      	movs	r1, r0
 8001350:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	220f      	movs	r2, #15
 8001358:	4013      	ands	r3, r2
 800135a:	4a62      	ldr	r2, [pc, #392]	; (80014e4 <HAL_RCC_OscConfig+0x348>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	000a      	movs	r2, r1
 8001360:	40da      	lsrs	r2, r3
 8001362:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <HAL_RCC_OscConfig+0x34c>)
 8001364:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001366:	4b61      	ldr	r3, [pc, #388]	; (80014ec <HAL_RCC_OscConfig+0x350>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2513      	movs	r5, #19
 800136c:	197c      	adds	r4, r7, r5
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff fbc2 	bl	8000af8 <HAL_InitTick>
 8001374:	0003      	movs	r3, r0
 8001376:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001378:	197b      	adds	r3, r7, r5
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d046      	beq.n	800140e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001380:	197b      	adds	r3, r7, r5
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	e280      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	2b00      	cmp	r3, #0
 800138a:	d027      	beq.n	80013dc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800138c:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2209      	movs	r2, #9
 8001392:	4393      	bics	r3, r2
 8001394:	0019      	movs	r1, r3
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fbf1 	bl	8000b84 <HAL_GetTick>
 80013a2:	0003      	movs	r3, r0
 80013a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a8:	f7ff fbec 	bl	8000b84 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e266      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ba:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2204      	movs	r2, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f1      	beq.n	80013a8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a45      	ldr	r2, [pc, #276]	; (80014e0 <HAL_RCC_OscConfig+0x344>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	021a      	lsls	r2, r3, #8
 80013d4:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	e018      	b.n	800140e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013dc:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	438a      	bics	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fbcc 	bl	8000b84 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fbc7 	bl	8000b84 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e241      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2204      	movs	r2, #4
 800140a:	4013      	ands	r3, r2
 800140c:	d1f1      	bne.n	80013f2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2210      	movs	r2, #16
 8001414:	4013      	ands	r3, r2
 8001416:	d100      	bne.n	800141a <HAL_RCC_OscConfig+0x27e>
 8001418:	e0a1      	b.n	800155e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d140      	bne.n	80014a2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d005      	beq.n	8001438 <HAL_RCC_OscConfig+0x29c>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e227      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <HAL_RCC_OscConfig+0x354>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	0a19      	lsrs	r1, r3, #8
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	061a      	lsls	r2, r3, #24
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 800145c:	430a      	orrs	r2, r1
 800145e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	0b5b      	lsrs	r3, r3, #13
 8001466:	3301      	adds	r3, #1
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	0212      	lsls	r2, r2, #8
 800146c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	210f      	movs	r1, #15
 8001476:	400b      	ands	r3, r1
 8001478:	491a      	ldr	r1, [pc, #104]	; (80014e4 <HAL_RCC_OscConfig+0x348>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_RCC_OscConfig+0x34c>)
 8001480:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_RCC_OscConfig+0x350>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2513      	movs	r5, #19
 8001488:	197c      	adds	r4, r7, r5
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fb34 	bl	8000af8 <HAL_InitTick>
 8001490:	0003      	movs	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001494:	197b      	adds	r3, r7, r5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d060      	beq.n	800155e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800149c:	197b      	adds	r3, r7, r5
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	e1f2      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d03f      	beq.n	800152a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0049      	lsls	r1, r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb64 	bl	8000b84 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014c0:	e018      	b.n	80014f4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c2:	f7ff fb5f 	bl	8000b84 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d911      	bls.n	80014f4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1d9      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	fffeffff 	.word	0xfffeffff
 80014dc:	fffbffff 	.word	0xfffbffff
 80014e0:	ffffe0ff 	.word	0xffffe0ff
 80014e4:	080036e4 	.word	0x080036e4
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000004 	.word	0x20000004
 80014f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014f4:	4bc9      	ldr	r3, [pc, #804]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d0e0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001500:	4bc6      	ldr	r3, [pc, #792]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4ac6      	ldr	r2, [pc, #792]	; (8001820 <HAL_RCC_OscConfig+0x684>)
 8001506:	4013      	ands	r3, r2
 8001508:	0019      	movs	r1, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	4bc3      	ldr	r3, [pc, #780]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001514:	4bc1      	ldr	r3, [pc, #772]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	0a19      	lsrs	r1, r3, #8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	061a      	lsls	r2, r3, #24
 8001522:	4bbe      	ldr	r3, [pc, #760]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	e019      	b.n	800155e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800152a:	4bbc      	ldr	r3, [pc, #752]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4bbb      	ldr	r3, [pc, #748]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001530:	49bc      	ldr	r1, [pc, #752]	; (8001824 <HAL_RCC_OscConfig+0x688>)
 8001532:	400a      	ands	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb25 	bl	8000b84 <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001540:	f7ff fb20 	bl	8000b84 <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e19a      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001552:	4bb2      	ldr	r3, [pc, #712]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4013      	ands	r3, r2
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2208      	movs	r2, #8
 8001564:	4013      	ands	r3, r2
 8001566:	d036      	beq.n	80015d6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d019      	beq.n	80015a4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001570:	4baa      	ldr	r3, [pc, #680]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001574:	4ba9      	ldr	r3, [pc, #676]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001576:	2101      	movs	r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fb02 	bl	8000b84 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fafd 	bl	8000b84 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e177      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001598:	4ba0      	ldr	r3, [pc, #640]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800159a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d0f1      	beq.n	8001586 <HAL_RCC_OscConfig+0x3ea>
 80015a2:	e018      	b.n	80015d6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a4:	4b9d      	ldr	r3, [pc, #628]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80015a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a8:	4b9c      	ldr	r3, [pc, #624]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	438a      	bics	r2, r1
 80015ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fae8 	bl	8000b84 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fae3 	bl	8000b84 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e15d      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015cc:	4b93      	ldr	r3, [pc, #588]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80015ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f1      	bne.n	80015ba <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2204      	movs	r2, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x446>
 80015e0:	e0ae      	b.n	8001740 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2023      	movs	r0, #35	; 0x23
 80015e4:	183b      	adds	r3, r7, r0
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b8c      	ldr	r3, [pc, #560]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80015ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	055b      	lsls	r3, r3, #21
 80015f2:	4013      	ands	r3, r2
 80015f4:	d109      	bne.n	800160a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b89      	ldr	r3, [pc, #548]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80015f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0549      	lsls	r1, r1, #21
 8001600:	430a      	orrs	r2, r1
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001604:	183b      	adds	r3, r7, r0
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b87      	ldr	r3, [pc, #540]	; (8001828 <HAL_RCC_OscConfig+0x68c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4013      	ands	r3, r2
 8001614:	d11a      	bne.n	800164c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b84      	ldr	r3, [pc, #528]	; (8001828 <HAL_RCC_OscConfig+0x68c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b83      	ldr	r3, [pc, #524]	; (8001828 <HAL_RCC_OscConfig+0x68c>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0049      	lsls	r1, r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001624:	f7ff faae 	bl	8000b84 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7ff faa9 	bl	8000b84 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e123      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b79      	ldr	r3, [pc, #484]	; (8001828 <HAL_RCC_OscConfig+0x68c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4013      	ands	r3, r2
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x4cc>
 8001658:	4b70      	ldr	r3, [pc, #448]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800165a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	0049      	lsls	r1, r1, #1
 8001662:	430a      	orrs	r2, r1
 8001664:	651a      	str	r2, [r3, #80]	; 0x50
 8001666:	e031      	b.n	80016cc <HAL_RCC_OscConfig+0x530>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x4ee>
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001674:	4b69      	ldr	r3, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001676:	496b      	ldr	r1, [pc, #428]	; (8001824 <HAL_RCC_OscConfig+0x688>)
 8001678:	400a      	ands	r2, r1
 800167a:	651a      	str	r2, [r3, #80]	; 0x50
 800167c:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800167e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001682:	496a      	ldr	r1, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x690>)
 8001684:	400a      	ands	r2, r1
 8001686:	651a      	str	r2, [r3, #80]	; 0x50
 8001688:	e020      	b.n	80016cc <HAL_RCC_OscConfig+0x530>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	23a0      	movs	r3, #160	; 0xa0
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	429a      	cmp	r2, r3
 8001694:	d10e      	bne.n	80016b4 <HAL_RCC_OscConfig+0x518>
 8001696:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169a:	4b60      	ldr	r3, [pc, #384]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	00c9      	lsls	r1, r1, #3
 80016a0:	430a      	orrs	r2, r1
 80016a2:	651a      	str	r2, [r3, #80]	; 0x50
 80016a4:	4b5d      	ldr	r3, [pc, #372]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80016a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a8:	4b5c      	ldr	r3, [pc, #368]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0049      	lsls	r1, r1, #1
 80016ae:	430a      	orrs	r2, r1
 80016b0:	651a      	str	r2, [r3, #80]	; 0x50
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x530>
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80016b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b8:	4b58      	ldr	r3, [pc, #352]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80016ba:	495a      	ldr	r1, [pc, #360]	; (8001824 <HAL_RCC_OscConfig+0x688>)
 80016bc:	400a      	ands	r2, r1
 80016be:	651a      	str	r2, [r3, #80]	; 0x50
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80016c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c4:	4b55      	ldr	r3, [pc, #340]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80016c6:	4959      	ldr	r1, [pc, #356]	; (800182c <HAL_RCC_OscConfig+0x690>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d015      	beq.n	8001700 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa56 	bl	8000b84 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016dc:	e009      	b.n	80016f2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fa51 	bl	8000b84 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a51      	ldr	r2, [pc, #324]	; (8001830 <HAL_RCC_OscConfig+0x694>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0ca      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80016f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d0ef      	beq.n	80016de <HAL_RCC_OscConfig+0x542>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fa40 	bl	8000b84 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001708:	e009      	b.n	800171e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fa3b 	bl	8000b84 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4a46      	ldr	r2, [pc, #280]	; (8001830 <HAL_RCC_OscConfig+0x694>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e0b4      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800172a:	2323      	movs	r3, #35	; 0x23
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800173a:	493e      	ldr	r1, [pc, #248]	; (8001834 <HAL_RCC_OscConfig+0x698>)
 800173c:	400a      	ands	r2, r1
 800173e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x5ae>
 8001748:	e09d      	b.n	8001886 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d100      	bne.n	8001752 <HAL_RCC_OscConfig+0x5b6>
 8001750:	e076      	b.n	8001840 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	2b02      	cmp	r3, #2
 8001758:	d145      	bne.n	80017e6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x680>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_RCC_OscConfig+0x69c>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fa0d 	bl	8000b84 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fa08 	bl	8000b84 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e082      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	049b      	lsls	r3, r3, #18
 800178a:	4013      	ands	r3, r2
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x6a0>)
 8001794:	4013      	ands	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	431a      	orrs	r2, r3
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80017aa:	430a      	orrs	r2, r1
 80017ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	0449      	lsls	r1, r1, #17
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff f9e2 	bl	8000b84 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff f9dd 	bl	8000b84 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e057      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	049b      	lsls	r3, r3, #18
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x62a>
 80017e4:	e04f      	b.n	8001886 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_RCC_OscConfig+0x680>)
 80017ec:	4912      	ldr	r1, [pc, #72]	; (8001838 <HAL_RCC_OscConfig+0x69c>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff f9c7 	bl	8000b84 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f9c2 	bl	8000b84 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e03c      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800180e:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_RCC_OscConfig+0x680>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x660>
 800181a:	e034      	b.n	8001886 <HAL_RCC_OscConfig+0x6ea>
 800181c:	40021000 	.word	0x40021000
 8001820:	ffff1fff 	.word	0xffff1fff
 8001824:	fffffeff 	.word	0xfffffeff
 8001828:	40007000 	.word	0x40007000
 800182c:	fffffbff 	.word	0xfffffbff
 8001830:	00001388 	.word	0x00001388
 8001834:	efffffff 	.word	0xefffffff
 8001838:	feffffff 	.word	0xfeffffff
 800183c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e01d      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_RCC_OscConfig+0x6f4>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	429a      	cmp	r2, r3
 8001860:	d10f      	bne.n	8001882 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	23f0      	movs	r3, #240	; 0xf0
 8001866:	039b      	lsls	r3, r3, #14
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	401a      	ands	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b00a      	add	sp, #40	; 0x28
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e128      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b96      	ldr	r3, [pc, #600]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d91e      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b93      	ldr	r3, [pc, #588]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4393      	bics	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018c8:	f7ff f95c 	bl	8000b84 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d2:	f7ff f957 	bl	8000b84 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a8a      	ldr	r2, [pc, #552]	; (8001b08 <HAL_RCC_ClockConfig+0x274>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e109      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1ee      	bne.n	80018d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fe:	4b83      	ldr	r3, [pc, #524]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	22f0      	movs	r2, #240	; 0xf0
 8001904:	4393      	bics	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	4b7f      	ldr	r3, [pc, #508]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 800190e:	430a      	orrs	r2, r1
 8001910:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2201      	movs	r2, #1
 8001918:	4013      	ands	r3, r2
 800191a:	d100      	bne.n	800191e <HAL_RCC_ClockConfig+0x8a>
 800191c:	e089      	b.n	8001a32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001926:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	029b      	lsls	r3, r3, #10
 800192e:	4013      	ands	r3, r2
 8001930:	d120      	bne.n	8001974 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0e1      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	049b      	lsls	r3, r3, #18
 8001946:	4013      	ands	r3, r2
 8001948:	d114      	bne.n	8001974 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0d5      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d106      	bne.n	8001964 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2204      	movs	r2, #4
 800195c:	4013      	ands	r3, r2
 800195e:	d109      	bne.n	8001974 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0ca      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001964:	4b69      	ldr	r3, [pc, #420]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0c2      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001974:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2203      	movs	r2, #3
 800197a:	4393      	bics	r3, r2
 800197c:	0019      	movs	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7ff f8fc 	bl	8000b84 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d111      	bne.n	80019bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001998:	e009      	b.n	80019ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199a:	f7ff f8f3 	bl	8000b84 <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x274>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e0a5      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ae:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	220c      	movs	r2, #12
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d1ef      	bne.n	800199a <HAL_RCC_ClockConfig+0x106>
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d111      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c4:	e009      	b.n	80019da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c6:	f7ff f8dd 	bl	8000b84 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x274>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e08f      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019da:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	220c      	movs	r2, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x132>
 80019e6:	e024      	b.n	8001a32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d11b      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f0:	e009      	b.n	8001a06 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7ff f8c7 	bl	8000b84 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <HAL_RCC_ClockConfig+0x274>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e079      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d1ef      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x15e>
 8001a12:	e00e      	b.n	8001a32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff f8b6 	bl	8000b84 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	4a3a      	ldr	r2, [pc, #232]	; (8001b08 <HAL_RCC_ClockConfig+0x274>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e068      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d21e      	bcs.n	8001a7e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a40:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	4393      	bics	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a52:	f7ff f897 	bl	8000b84 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	e009      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff f892 	bl	8000b84 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <HAL_RCC_ClockConfig+0x274>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e044      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_ClockConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2204      	movs	r2, #4
 8001a84:	4013      	ands	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <HAL_RCC_ClockConfig+0x27c>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d00a      	beq.n	8001abc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_RCC_ClockConfig+0x280>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	00da      	lsls	r2, r3, #3
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001abc:	f000 f832 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_ClockConfig+0x278>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	220f      	movs	r2, #15
 8001aca:	4013      	ands	r3, r2
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_RCC_ClockConfig+0x284>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	000a      	movs	r2, r1
 8001ad2:	40da      	lsrs	r2, r3
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_ClockConfig+0x288>)
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_ClockConfig+0x28c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	250b      	movs	r5, #11
 8001ade:	197c      	adds	r4, r7, r5
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff f809 	bl	8000af8 <HAL_InitTick>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001aea:	197b      	adds	r3, r7, r5
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001af2:	197b      	adds	r3, r7, r5
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	e000      	b.n	8001afa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b004      	add	sp, #16
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40022000 	.word	0x40022000
 8001b08:	00001388 	.word	0x00001388
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	fffff8ff 	.word	0xfffff8ff
 8001b14:	ffffc7ff 	.word	0xffffc7ff
 8001b18:	080036e4 	.word	0x080036e4
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b32:	230c      	movs	r3, #12
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d014      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3a:	d900      	bls.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1a>
 8001b3c:	e07b      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x112>
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x24>
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b46:	e076      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b48:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b56:	e07c      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b5c:	e079      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b62:	e076      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	0c9a      	lsrs	r2, r3, #18
 8001b68:	230f      	movs	r3, #15
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x148>)
 8001b6e:	5c9b      	ldrb	r3, [r3, r2]
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	0d9a      	lsrs	r2, r3, #22
 8001b76:	2303      	movs	r3, #3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	025b      	lsls	r3, r3, #9
 8001b86:	4013      	ands	r3, r2
 8001b88:	d01a      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b94:	2300      	movs	r3, #0
 8001b96:	69b8      	ldr	r0, [r7, #24]
 8001b98:	69f9      	ldr	r1, [r7, #28]
 8001b9a:	f7fe fb6b 	bl	8000274 <__aeabi_lmul>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	000b      	movs	r3, r1
 8001ba2:	0010      	movs	r0, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f7fe fb3f 	bl	8000234 <__aeabi_uldivmod>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	000b      	movs	r3, r1
 8001bba:	0013      	movs	r3, r2
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bbe:	e037      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d01a      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	68b8      	ldr	r0, [r7, #8]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	f7fe fb4b 	bl	8000274 <__aeabi_lmul>
 8001bde:	0002      	movs	r2, r0
 8001be0:	000b      	movs	r3, r1
 8001be2:	0010      	movs	r0, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f7fe fb1f 	bl	8000234 <__aeabi_uldivmod>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	000b      	movs	r3, r1
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfe:	e017      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	0018      	movs	r0, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	0019      	movs	r1, r3
 8001c08:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f7fe fb32 	bl	8000274 <__aeabi_lmul>
 8001c10:	0002      	movs	r2, r0
 8001c12:	000b      	movs	r3, r1
 8001c14:	0010      	movs	r0, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	001d      	movs	r5, r3
 8001c20:	0022      	movs	r2, r4
 8001c22:	002b      	movs	r3, r5
 8001c24:	f7fe fb06 	bl	8000234 <__aeabi_uldivmod>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	000b      	movs	r3, r1
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c34:	e00d      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	0b5b      	lsrs	r3, r3, #13
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	4013      	ands	r3, r2
 8001c40:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	3301      	adds	r3, #1
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	0212      	lsls	r2, r2, #8
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c50:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b00e      	add	sp, #56	; 0x38
 8001c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	003d0900 	.word	0x003d0900
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	007a1200 	.word	0x007a1200
 8001c6c:	080036fc 	.word	0x080036fc

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff2 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c8c:	0001      	movs	r1, r0
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	2207      	movs	r2, #7
 8001c96:	4013      	ands	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c9a:	5cd3      	ldrb	r3, [r2, r3]
 8001c9c:	40d9      	lsrs	r1, r3
 8001c9e:	000b      	movs	r3, r1
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	080036f4 	.word	0x080036f4

08001cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cb4:	f7ff ffdc 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cb8:	0001      	movs	r1, r0
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	0adb      	lsrs	r3, r3, #11
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	40d9      	lsrs	r1, r3
 8001cca:	000b      	movs	r3, r1
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	080036f4 	.word	0x080036f4

08001cdc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ce4:	2017      	movs	r0, #23
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d100      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001cf6:	e0c2      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf8:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	055b      	lsls	r3, r3, #21
 8001d00:	4013      	ands	r3, r2
 8001d02:	d109      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d08:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0549      	lsls	r1, r1, #21
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d12:	183b      	adds	r3, r7, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d11a      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d24:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b76      	ldr	r3, [pc, #472]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0049      	lsls	r1, r1, #1
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7fe ff27 	bl	8000b84 <HAL_GetTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	e008      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7fe ff22 	bl	8000b84 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0d4      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d5a:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	23c0      	movs	r3, #192	; 0xc0
 8001d60:	039b      	lsls	r3, r3, #14
 8001d62:	4013      	ands	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	23c0      	movs	r3, #192	; 0xc0
 8001d6c:	039b      	lsls	r3, r3, #14
 8001d6e:	4013      	ands	r3, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d013      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	23c0      	movs	r3, #192	; 0xc0
 8001d7c:	029b      	lsls	r3, r3, #10
 8001d7e:	401a      	ands	r2, r3
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10a      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d88:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	401a      	ands	r2, r3
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d101      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0ac      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	029b      	lsls	r3, r3, #10
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d03b      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	029b      	lsls	r3, r3, #10
 8001db8:	4013      	ands	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d033      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d02e      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001dca:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dce:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0309      	lsls	r1, r1, #12
 8001dde:	430a      	orrs	r2, r1
 8001de0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001de8:	4948      	ldr	r1, [pc, #288]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001dee:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d014      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fec1 	bl	8000b84 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e06:	e009      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7fe febc 	bl	8000b84 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4a3f      	ldr	r2, [pc, #252]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e06d      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d0ef      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	23c0      	movs	r3, #192	; 0xc0
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	401a      	ands	r2, r3
 8001e32:	23c0      	movs	r3, #192	; 0xc0
 8001e34:	029b      	lsls	r3, r3, #10
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a35      	ldr	r2, [pc, #212]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	23c0      	movs	r3, #192	; 0xc0
 8001e4a:	039b      	lsls	r3, r3, #14
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e56:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	23c0      	movs	r3, #192	; 0xc0
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	401a      	ands	r2, r3
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e64:	430a      	orrs	r2, r1
 8001e66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e68:	2317      	movs	r3, #23
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d105      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e78:	4927      	ldr	r1, [pc, #156]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2202      	movs	r2, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	220c      	movs	r2, #12
 8001e8e:	4393      	bics	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b006      	add	sp, #24
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	fffcffff 	.word	0xfffcffff
 8001f0c:	fff7ffff 	.word	0xfff7ffff
 8001f10:	00001388 	.word	0x00001388
 8001f14:	ffcfffff 	.word	0xffcfffff
 8001f18:	efffffff 	.word	0xefffffff
 8001f1c:	fffff3ff 	.word	0xfffff3ff
 8001f20:	ffffcfff 	.word	0xffffcfff
 8001f24:	fff3ffff 	.word	0xfff3ffff

08001f28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e08e      	b.n	8002058 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2221      	movs	r2, #33	; 0x21
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7fe fcef 	bl	8000934 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2221      	movs	r2, #33	; 0x21
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	22ca      	movs	r2, #202	; 0xca
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2253      	movs	r2, #83	; 0x53
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 f89e 	bl	80020b2 <RTC_EnterInitMode>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	2104      	movs	r1, #4
 8001f88:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e064      	b.n	8002058 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4931      	ldr	r1, [pc, #196]	; (8002060 <HAL_RTC_Init+0x138>)
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6899      	ldr	r1, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68d2      	ldr	r2, [r2, #12]
 8001fc4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6919      	ldr	r1, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2220      	movs	r2, #32
 800201a:	4013      	ands	r3, r2
 800201c:	d113      	bne.n	8002046 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f81f 	bl	8002064 <HAL_RTC_WaitForSynchro>
 8002026:	1e03      	subs	r3, r0, #0
 8002028:	d00d      	beq.n	8002046 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2221      	movs	r2, #33	; 0x21
 8002036:	2104      	movs	r1, #4
 8002038:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2220      	movs	r2, #32
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e008      	b.n	8002058 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2221      	movs	r2, #33	; 0x21
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002056:	2300      	movs	r3, #0
  }
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}
 8002060:	ff8fffbf 	.word	0xff8fffbf

08002064 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	21a0      	movs	r1, #160	; 0xa0
 8002078:	438a      	bics	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800207c:	f7fe fd82 	bl	8000b84 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002084:	e00a      	b.n	800209c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002086:	f7fe fd7d 	bl	8000b84 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad2      	subs	r2, r2, r3
 8002090:	23fa      	movs	r3, #250	; 0xfa
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	429a      	cmp	r2, r3
 8002096:	d901      	bls.n	800209c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e006      	b.n	80020aa <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	4013      	ands	r3, r2
 80020a6:	d0ee      	beq.n	8002086 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b004      	add	sp, #16
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	4013      	ands	r3, r2
 80020c4:	d11a      	bne.n	80020fc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4252      	negs	r2, r2
 80020ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80020d0:	f7fe fd58 	bl	8000b84 <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80020d8:	e00a      	b.n	80020f0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80020da:	f7fe fd53 	bl	8000b84 <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	23fa      	movs	r3, #250	; 0xfa
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d901      	bls.n	80020f0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e006      	b.n	80020fe <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	4013      	ands	r3, r2
 80020fa:	d0ee      	beq.n	80020da <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800211e:	2302      	movs	r3, #2
 8002120:	e0ad      	b.n	800227e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	2101      	movs	r1, #1
 8002128:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2221      	movs	r2, #33	; 0x21
 800212e:	2102      	movs	r1, #2
 8002130:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	22ca      	movs	r2, #202	; 0xca
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2253      	movs	r2, #83	; 0x53
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4013      	ands	r3, r2
 800214e:	d021      	beq.n	8002194 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8002150:	f7fe fd18 	bl	8000b84 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002158:	e016      	b.n	8002188 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800215a:	f7fe fd13 	bl	8000b84 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	23fa      	movs	r3, #250	; 0xfa
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d90d      	bls.n	8002188 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	22ff      	movs	r2, #255	; 0xff
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2221      	movs	r2, #33	; 0x21
 8002178:	2103      	movs	r1, #3
 800217a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e07a      	b.n	800227e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d1e2      	bne.n	800215a <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	493a      	ldr	r1, [pc, #232]	; (8002288 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	401a      	ands	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4936      	ldr	r1, [pc, #216]	; (800228c <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80021b8:	f7fe fce4 	bl	8000b84 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80021c0:	e016      	b.n	80021f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021c2:	f7fe fcdf 	bl	8000b84 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	1ad2      	subs	r2, r2, r3
 80021cc:	23fa      	movs	r3, #250	; 0xfa
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d90d      	bls.n	80021f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	22ff      	movs	r2, #255	; 0xff
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2221      	movs	r2, #33	; 0x21
 80021e0:	2103      	movs	r1, #3
 80021e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e046      	b.n	800227e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2204      	movs	r2, #4
 80021f8:	4013      	ands	r3, r2
 80021fa:	d0e2      	beq.n	80021c2 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2107      	movs	r1, #7
 8002210:	438a      	bics	r2, r1
 8002212:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	0349      	lsls	r1, r1, #13
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0349      	lsls	r1, r1, #13
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	01c9      	lsls	r1, r1, #7
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	00c9      	lsls	r1, r1, #3
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	22ff      	movs	r2, #255	; 0xff
 800226a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2221      	movs	r2, #33	; 0x21
 8002270:	2101      	movs	r1, #1
 8002272:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	2100      	movs	r1, #0
 800227a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b006      	add	sp, #24
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	fffffbff 	.word	0xfffffbff
 800228c:	fffffb7f 	.word	0xfffffb7f
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e04e      	b.n	8002348 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	2102      	movs	r1, #2
 80022b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	22ca      	movs	r2, #202	; 0xca
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2253      	movs	r2, #83	; 0x53
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	491e      	ldr	r1, [pc, #120]	; (8002350 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	491b      	ldr	r1, [pc, #108]	; (8002354 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80022ea:	f7fe fc4b 	bl	8000b84 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80022f2:	e016      	b.n	8002322 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022f4:	f7fe fc46 	bl	8000b84 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad2      	subs	r2, r2, r3
 80022fe:	23fa      	movs	r3, #250	; 0xfa
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	429a      	cmp	r2, r3
 8002304:	d90d      	bls.n	8002322 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	22ff      	movs	r2, #255	; 0xff
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	2103      	movs	r1, #3
 8002314:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e012      	b.n	8002348 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2204      	movs	r2, #4
 800232a:	4013      	ands	r3, r2
 800232c:	d0e2      	beq.n	80022f4 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	22ff      	movs	r2, #255	; 0xff
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2221      	movs	r2, #33	; 0x21
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	2100      	movs	r1, #0
 8002344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b004      	add	sp, #16
 800234e:	bd80      	pop	{r7, pc}
 8002350:	fffffbff 	.word	0xfffffbff
 8002354:	ffffbfff 	.word	0xffffbfff

08002358 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4013      	ands	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f7fe fa55 	bl	8000820 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	22ff      	movs	r2, #255	; 0xff
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8002386:	430a      	orrs	r2, r1
 8002388:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0352      	lsls	r2, r2, #13
 8002390:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2221      	movs	r2, #33	; 0x21
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	fffffb7f 	.word	0xfffffb7f
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e044      	b.n	8002448 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2274      	movs	r2, #116	; 0x74
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7fe fa47 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2224      	movs	r2, #36	; 0x24
 80023da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	438a      	bics	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f8d8 	bl	80025a4 <UART_SetConfig>
 80023f4:	0003      	movs	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e024      	b.n	8002448 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fb2d 	bl	8002a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	490d      	ldr	r1, [pc, #52]	; (8002450 <HAL_UART_Init+0xa4>)
 800241a:	400a      	ands	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	212a      	movs	r1, #42	; 0x2a
 800242a:	438a      	bics	r2, r1
 800242c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 fbc5 	bl	8002bd0 <UART_CheckIdleState>
 8002446:	0003      	movs	r3, r0
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}
 8002450:	ffffb7ff 	.word	0xffffb7ff

08002454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002468:	2b20      	cmp	r3, #32
 800246a:	d000      	beq.n	800246e <HAL_UART_Transmit+0x1a>
 800246c:	e095      	b.n	800259a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_UART_Transmit+0x28>
 8002474:	1dbb      	adds	r3, r7, #6
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e08d      	b.n	800259c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	015b      	lsls	r3, r3, #5
 8002488:	429a      	cmp	r2, r3
 800248a:	d109      	bne.n	80024a0 <HAL_UART_Transmit+0x4c>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2201      	movs	r2, #1
 8002498:	4013      	ands	r3, r2
 800249a:	d001      	beq.n	80024a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e07d      	b.n	800259c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2274      	movs	r2, #116	; 0x74
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Transmit+0x5a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e076      	b.n	800259c <HAL_UART_Transmit+0x148>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2274      	movs	r2, #116	; 0x74
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	2100      	movs	r1, #0
 80024bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2221      	movs	r2, #33	; 0x21
 80024c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fb5e 	bl	8000b84 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1dba      	adds	r2, r7, #6
 80024d0:	2150      	movs	r1, #80	; 0x50
 80024d2:	8812      	ldrh	r2, [r2, #0]
 80024d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1dba      	adds	r2, r7, #6
 80024da:	2152      	movs	r1, #82	; 0x52
 80024dc:	8812      	ldrh	r2, [r2, #0]
 80024de:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d108      	bne.n	80024fe <HAL_UART_Transmit+0xaa>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	e003      	b.n	8002506 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2274      	movs	r2, #116	; 0x74
 800250a:	2100      	movs	r1, #0
 800250c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800250e:	e02c      	b.n	800256a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	0013      	movs	r3, r2
 800251a:	2200      	movs	r2, #0
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	f000 fb9f 	bl	8002c60 <UART_WaitOnFlagUntilTimeout>
 8002522:	1e03      	subs	r3, r0, #0
 8002524:	d001      	beq.n	800252a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e038      	b.n	800259c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	001a      	movs	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	05d2      	lsls	r2, r2, #23
 800253c:	0dd2      	lsrs	r2, r2, #23
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	3302      	adds	r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	e007      	b.n	8002558 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2252      	movs	r2, #82	; 0x52
 800255c:	5a9b      	ldrh	r3, [r3, r2]
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b299      	uxth	r1, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2252      	movs	r2, #82	; 0x52
 8002568:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2252      	movs	r2, #82	; 0x52
 800256e:	5a9b      	ldrh	r3, [r3, r2]
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1cc      	bne.n	8002510 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	0013      	movs	r3, r2
 8002580:	2200      	movs	r2, #0
 8002582:	2140      	movs	r1, #64	; 0x40
 8002584:	f000 fb6c 	bl	8002c60 <UART_WaitOnFlagUntilTimeout>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e005      	b.n	800259c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b008      	add	sp, #32
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a4:	b5b0      	push	{r4, r5, r7, lr}
 80025a6:	b08e      	sub	sp, #56	; 0x38
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025ac:	231a      	movs	r3, #26
 80025ae:	2218      	movs	r2, #24
 80025b0:	4694      	mov	ip, r2
 80025b2:	44bc      	add	ip, r7
 80025b4:	4463      	add	r3, ip
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4abc      	ldr	r2, [pc, #752]	; (80028cc <UART_SetConfig+0x328>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4ab8      	ldr	r2, [pc, #736]	; (80028d0 <UART_SetConfig+0x32c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4ab2      	ldr	r2, [pc, #712]	; (80028d4 <UART_SetConfig+0x330>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002616:	4313      	orrs	r3, r2
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4aad      	ldr	r2, [pc, #692]	; (80028d8 <UART_SetConfig+0x334>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262c:	430a      	orrs	r2, r1
 800262e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4aa9      	ldr	r2, [pc, #676]	; (80028dc <UART_SetConfig+0x338>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d136      	bne.n	80026a8 <UART_SetConfig+0x104>
 800263a:	4ba9      	ldr	r3, [pc, #676]	; (80028e0 <UART_SetConfig+0x33c>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	220c      	movs	r2, #12
 8002640:	4013      	ands	r3, r2
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d020      	beq.n	8002688 <UART_SetConfig+0xe4>
 8002646:	d827      	bhi.n	8002698 <UART_SetConfig+0xf4>
 8002648:	2b08      	cmp	r3, #8
 800264a:	d00d      	beq.n	8002668 <UART_SetConfig+0xc4>
 800264c:	d824      	bhi.n	8002698 <UART_SetConfig+0xf4>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <UART_SetConfig+0xb4>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d010      	beq.n	8002678 <UART_SetConfig+0xd4>
 8002656:	e01f      	b.n	8002698 <UART_SetConfig+0xf4>
 8002658:	231b      	movs	r3, #27
 800265a:	2218      	movs	r2, #24
 800265c:	4694      	mov	ip, r2
 800265e:	44bc      	add	ip, r7
 8002660:	4463      	add	r3, ip
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e06f      	b.n	8002748 <UART_SetConfig+0x1a4>
 8002668:	231b      	movs	r3, #27
 800266a:	2218      	movs	r2, #24
 800266c:	4694      	mov	ip, r2
 800266e:	44bc      	add	ip, r7
 8002670:	4463      	add	r3, ip
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e067      	b.n	8002748 <UART_SetConfig+0x1a4>
 8002678:	231b      	movs	r3, #27
 800267a:	2218      	movs	r2, #24
 800267c:	4694      	mov	ip, r2
 800267e:	44bc      	add	ip, r7
 8002680:	4463      	add	r3, ip
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e05f      	b.n	8002748 <UART_SetConfig+0x1a4>
 8002688:	231b      	movs	r3, #27
 800268a:	2218      	movs	r2, #24
 800268c:	4694      	mov	ip, r2
 800268e:	44bc      	add	ip, r7
 8002690:	4463      	add	r3, ip
 8002692:	2208      	movs	r2, #8
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e057      	b.n	8002748 <UART_SetConfig+0x1a4>
 8002698:	231b      	movs	r3, #27
 800269a:	2218      	movs	r2, #24
 800269c:	4694      	mov	ip, r2
 800269e:	44bc      	add	ip, r7
 80026a0:	4463      	add	r3, ip
 80026a2:	2210      	movs	r2, #16
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e04f      	b.n	8002748 <UART_SetConfig+0x1a4>
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a89      	ldr	r2, [pc, #548]	; (80028d4 <UART_SetConfig+0x330>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d143      	bne.n	800273a <UART_SetConfig+0x196>
 80026b2:	4b8b      	ldr	r3, [pc, #556]	; (80028e0 <UART_SetConfig+0x33c>)
 80026b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b6:	23c0      	movs	r3, #192	; 0xc0
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	4013      	ands	r3, r2
 80026bc:	22c0      	movs	r2, #192	; 0xc0
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d02a      	beq.n	800271a <UART_SetConfig+0x176>
 80026c4:	22c0      	movs	r2, #192	; 0xc0
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d82e      	bhi.n	800272a <UART_SetConfig+0x186>
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d012      	beq.n	80026fa <UART_SetConfig+0x156>
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	4293      	cmp	r3, r2
 80026da:	d826      	bhi.n	800272a <UART_SetConfig+0x186>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <UART_SetConfig+0x146>
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	00d2      	lsls	r2, r2, #3
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d010      	beq.n	800270a <UART_SetConfig+0x166>
 80026e8:	e01f      	b.n	800272a <UART_SetConfig+0x186>
 80026ea:	231b      	movs	r3, #27
 80026ec:	2218      	movs	r2, #24
 80026ee:	4694      	mov	ip, r2
 80026f0:	44bc      	add	ip, r7
 80026f2:	4463      	add	r3, ip
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e026      	b.n	8002748 <UART_SetConfig+0x1a4>
 80026fa:	231b      	movs	r3, #27
 80026fc:	2218      	movs	r2, #24
 80026fe:	4694      	mov	ip, r2
 8002700:	44bc      	add	ip, r7
 8002702:	4463      	add	r3, ip
 8002704:	2202      	movs	r2, #2
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e01e      	b.n	8002748 <UART_SetConfig+0x1a4>
 800270a:	231b      	movs	r3, #27
 800270c:	2218      	movs	r2, #24
 800270e:	4694      	mov	ip, r2
 8002710:	44bc      	add	ip, r7
 8002712:	4463      	add	r3, ip
 8002714:	2204      	movs	r2, #4
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e016      	b.n	8002748 <UART_SetConfig+0x1a4>
 800271a:	231b      	movs	r3, #27
 800271c:	2218      	movs	r2, #24
 800271e:	4694      	mov	ip, r2
 8002720:	44bc      	add	ip, r7
 8002722:	4463      	add	r3, ip
 8002724:	2208      	movs	r2, #8
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e00e      	b.n	8002748 <UART_SetConfig+0x1a4>
 800272a:	231b      	movs	r3, #27
 800272c:	2218      	movs	r2, #24
 800272e:	4694      	mov	ip, r2
 8002730:	44bc      	add	ip, r7
 8002732:	4463      	add	r3, ip
 8002734:	2210      	movs	r2, #16
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e006      	b.n	8002748 <UART_SetConfig+0x1a4>
 800273a:	231b      	movs	r3, #27
 800273c:	2218      	movs	r2, #24
 800273e:	4694      	mov	ip, r2
 8002740:	44bc      	add	ip, r7
 8002742:	4463      	add	r3, ip
 8002744:	2210      	movs	r2, #16
 8002746:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a61      	ldr	r2, [pc, #388]	; (80028d4 <UART_SetConfig+0x330>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d000      	beq.n	8002754 <UART_SetConfig+0x1b0>
 8002752:	e088      	b.n	8002866 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002754:	231b      	movs	r3, #27
 8002756:	2218      	movs	r2, #24
 8002758:	4694      	mov	ip, r2
 800275a:	44bc      	add	ip, r7
 800275c:	4463      	add	r3, ip
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d01d      	beq.n	80027a0 <UART_SetConfig+0x1fc>
 8002764:	dc20      	bgt.n	80027a8 <UART_SetConfig+0x204>
 8002766:	2b04      	cmp	r3, #4
 8002768:	d015      	beq.n	8002796 <UART_SetConfig+0x1f2>
 800276a:	dc1d      	bgt.n	80027a8 <UART_SetConfig+0x204>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <UART_SetConfig+0x1d2>
 8002770:	2b02      	cmp	r3, #2
 8002772:	d005      	beq.n	8002780 <UART_SetConfig+0x1dc>
 8002774:	e018      	b.n	80027a8 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002776:	f7ff fa85 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 800277a:	0003      	movs	r3, r0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800277e:	e01d      	b.n	80027bc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002780:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <UART_SetConfig+0x33c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2210      	movs	r2, #16
 8002786:	4013      	ands	r3, r2
 8002788:	d002      	beq.n	8002790 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800278a:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <UART_SetConfig+0x340>)
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800278e:	e015      	b.n	80027bc <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002790:	4b55      	ldr	r3, [pc, #340]	; (80028e8 <UART_SetConfig+0x344>)
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002794:	e012      	b.n	80027bc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002796:	f7ff f9c5 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 800279a:	0003      	movs	r3, r0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800279e:	e00d      	b.n	80027bc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027a6:	e009      	b.n	80027bc <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027ac:	231a      	movs	r3, #26
 80027ae:	2218      	movs	r2, #24
 80027b0:	4694      	mov	ip, r2
 80027b2:	44bc      	add	ip, r7
 80027b4:	4463      	add	r3, ip
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
        break;
 80027ba:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d100      	bne.n	80027c4 <UART_SetConfig+0x220>
 80027c2:	e139      	b.n	8002a38 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	0013      	movs	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d305      	bcc.n	80027e0 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027dc:	429a      	cmp	r2, r3
 80027de:	d907      	bls.n	80027f0 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80027e0:	231a      	movs	r3, #26
 80027e2:	2218      	movs	r2, #24
 80027e4:	4694      	mov	ip, r2
 80027e6:	44bc      	add	ip, r7
 80027e8:	4463      	add	r3, ip
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e123      	b.n	8002a38 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	6939      	ldr	r1, [r7, #16]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	000b      	movs	r3, r1
 80027fe:	0e1b      	lsrs	r3, r3, #24
 8002800:	0010      	movs	r0, r2
 8002802:	0205      	lsls	r5, r0, #8
 8002804:	431d      	orrs	r5, r3
 8002806:	000b      	movs	r3, r1
 8002808:	021c      	lsls	r4, r3, #8
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68b8      	ldr	r0, [r7, #8]
 8002818:	68f9      	ldr	r1, [r7, #12]
 800281a:	1900      	adds	r0, r0, r4
 800281c:	4169      	adcs	r1, r5
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f7fd fd02 	bl	8000234 <__aeabi_uldivmod>
 8002830:	0002      	movs	r2, r0
 8002832:	000b      	movs	r3, r1
 8002834:	0013      	movs	r3, r2
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800283a:	23c0      	movs	r3, #192	; 0xc0
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	429a      	cmp	r2, r3
 8002840:	d309      	bcc.n	8002856 <UART_SetConfig+0x2b2>
 8002842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	035b      	lsls	r3, r3, #13
 8002848:	429a      	cmp	r2, r3
 800284a:	d204      	bcs.n	8002856 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	e0f0      	b.n	8002a38 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002856:	231a      	movs	r3, #26
 8002858:	2218      	movs	r2, #24
 800285a:	4694      	mov	ip, r2
 800285c:	44bc      	add	ip, r7
 800285e:	4463      	add	r3, ip
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e0e8      	b.n	8002a38 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	429a      	cmp	r2, r3
 8002870:	d000      	beq.n	8002874 <UART_SetConfig+0x2d0>
 8002872:	e087      	b.n	8002984 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002874:	231b      	movs	r3, #27
 8002876:	2218      	movs	r2, #24
 8002878:	4694      	mov	ip, r2
 800287a:	44bc      	add	ip, r7
 800287c:	4463      	add	r3, ip
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d835      	bhi.n	80028f0 <UART_SetConfig+0x34c>
 8002884:	009a      	lsls	r2, r3, #2
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <UART_SetConfig+0x348>)
 8002888:	18d3      	adds	r3, r2, r3
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800288e:	f7ff f9f9 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8002892:	0003      	movs	r3, r0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002896:	e035      	b.n	8002904 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002898:	f7ff fa0a 	bl	8001cb0 <HAL_RCC_GetPCLK2Freq>
 800289c:	0003      	movs	r3, r0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028a0:	e030      	b.n	8002904 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <UART_SetConfig+0x33c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2210      	movs	r2, #16
 80028a8:	4013      	ands	r3, r2
 80028aa:	d002      	beq.n	80028b2 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <UART_SetConfig+0x340>)
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028b0:	e028      	b.n	8002904 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <UART_SetConfig+0x344>)
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028b6:	e025      	b.n	8002904 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b8:	f7ff f934 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 80028bc:	0003      	movs	r3, r0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c0:	e020      	b.n	8002904 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c8:	e01c      	b.n	8002904 <UART_SetConfig+0x360>
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	efff69f3 	.word	0xefff69f3
 80028d0:	ffffcfff 	.word	0xffffcfff
 80028d4:	40004800 	.word	0x40004800
 80028d8:	fffff4ff 	.word	0xfffff4ff
 80028dc:	40004400 	.word	0x40004400
 80028e0:	40021000 	.word	0x40021000
 80028e4:	003d0900 	.word	0x003d0900
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	08003708 	.word	0x08003708
      default:
        pclk = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028f4:	231a      	movs	r3, #26
 80028f6:	2218      	movs	r2, #24
 80028f8:	4694      	mov	ip, r2
 80028fa:	44bc      	add	ip, r7
 80028fc:	4463      	add	r3, ip
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
        break;
 8002902:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d100      	bne.n	800290c <UART_SetConfig+0x368>
 800290a:	e095      	b.n	8002a38 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	005a      	lsls	r2, r3, #1
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	18d2      	adds	r2, r2, r3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0019      	movs	r1, r3
 800291e:	0010      	movs	r0, r2
 8002920:	f7fd fbfc 	bl	800011c <__udivsi3>
 8002924:	0003      	movs	r3, r0
 8002926:	b29b      	uxth	r3, r3
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d921      	bls.n	8002974 <UART_SetConfig+0x3d0>
 8002930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	025b      	lsls	r3, r3, #9
 8002936:	429a      	cmp	r2, r3
 8002938:	d21c      	bcs.n	8002974 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	b29a      	uxth	r2, r3
 800293e:	200e      	movs	r0, #14
 8002940:	2418      	movs	r4, #24
 8002942:	193b      	adds	r3, r7, r4
 8002944:	181b      	adds	r3, r3, r0
 8002946:	210f      	movs	r1, #15
 8002948:	438a      	bics	r2, r1
 800294a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	b29b      	uxth	r3, r3
 8002952:	2207      	movs	r2, #7
 8002954:	4013      	ands	r3, r2
 8002956:	b299      	uxth	r1, r3
 8002958:	193b      	adds	r3, r7, r4
 800295a:	181b      	adds	r3, r3, r0
 800295c:	193a      	adds	r2, r7, r4
 800295e:	1812      	adds	r2, r2, r0
 8002960:	8812      	ldrh	r2, [r2, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	193a      	adds	r2, r7, r4
 800296c:	1812      	adds	r2, r2, r0
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e061      	b.n	8002a38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002974:	231a      	movs	r3, #26
 8002976:	2218      	movs	r2, #24
 8002978:	4694      	mov	ip, r2
 800297a:	44bc      	add	ip, r7
 800297c:	4463      	add	r3, ip
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e059      	b.n	8002a38 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002984:	231b      	movs	r3, #27
 8002986:	2218      	movs	r2, #24
 8002988:	4694      	mov	ip, r2
 800298a:	44bc      	add	ip, r7
 800298c:	4463      	add	r3, ip
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d822      	bhi.n	80029da <UART_SetConfig+0x436>
 8002994:	009a      	lsls	r2, r3, #2
 8002996:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <UART_SetConfig+0x4b4>)
 8002998:	18d3      	adds	r3, r2, r3
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800299e:	f7ff f971 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 80029a2:	0003      	movs	r3, r0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029a6:	e022      	b.n	80029ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029a8:	f7ff f982 	bl	8001cb0 <HAL_RCC_GetPCLK2Freq>
 80029ac:	0003      	movs	r3, r0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b0:	e01d      	b.n	80029ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <UART_SetConfig+0x4b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2210      	movs	r2, #16
 80029b8:	4013      	ands	r3, r2
 80029ba:	d002      	beq.n	80029c2 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <UART_SetConfig+0x4bc>)
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029c0:	e015      	b.n	80029ee <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <UART_SetConfig+0x4c0>)
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029c6:	e012      	b.n	80029ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029c8:	f7ff f8ac 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 80029cc:	0003      	movs	r3, r0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d0:	e00d      	b.n	80029ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d8:	e009      	b.n	80029ee <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029de:	231a      	movs	r3, #26
 80029e0:	2218      	movs	r2, #24
 80029e2:	4694      	mov	ip, r2
 80029e4:	44bc      	add	ip, r7
 80029e6:	4463      	add	r3, ip
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
        break;
 80029ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d021      	beq.n	8002a38 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	085a      	lsrs	r2, r3, #1
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	18d2      	adds	r2, r2, r3
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	0019      	movs	r1, r3
 8002a04:	0010      	movs	r0, r2
 8002a06:	f7fd fb89 	bl	800011c <__udivsi3>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2b0f      	cmp	r3, #15
 8002a14:	d909      	bls.n	8002a2a <UART_SetConfig+0x486>
 8002a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	025b      	lsls	r3, r3, #9
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d204      	bcs.n	8002a2a <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e006      	b.n	8002a38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002a2a:	231a      	movs	r3, #26
 8002a2c:	2218      	movs	r2, #24
 8002a2e:	4694      	mov	ip, r2
 8002a30:	44bc      	add	ip, r7
 8002a32:	4463      	add	r3, ip
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	2200      	movs	r2, #0
 8002a42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a44:	231a      	movs	r3, #26
 8002a46:	2218      	movs	r2, #24
 8002a48:	4694      	mov	ip, r2
 8002a4a:	44bc      	add	ip, r7
 8002a4c:	4463      	add	r3, ip
 8002a4e:	781b      	ldrb	r3, [r3, #0]
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b00e      	add	sp, #56	; 0x38
 8002a56:	bdb0      	pop	{r4, r5, r7, pc}
 8002a58:	0800372c 	.word	0x0800372c
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	003d0900 	.word	0x003d0900
 8002a64:	00f42400 	.word	0x00f42400

08002a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2201      	movs	r2, #1
 8002a76:	4013      	ands	r3, r2
 8002a78:	d00b      	beq.n	8002a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <UART_AdvFeatureConfig+0x144>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2202      	movs	r2, #2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d00b      	beq.n	8002ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4a43      	ldr	r2, [pc, #268]	; (8002bb0 <UART_AdvFeatureConfig+0x148>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2204      	movs	r2, #4
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a3b      	ldr	r2, [pc, #236]	; (8002bb4 <UART_AdvFeatureConfig+0x14c>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2208      	movs	r2, #8
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00b      	beq.n	8002af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a34      	ldr	r2, [pc, #208]	; (8002bb8 <UART_AdvFeatureConfig+0x150>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2210      	movs	r2, #16
 8002afe:	4013      	ands	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a2c      	ldr	r2, [pc, #176]	; (8002bbc <UART_AdvFeatureConfig+0x154>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	d00b      	beq.n	8002b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <UART_AdvFeatureConfig+0x158>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2240      	movs	r2, #64	; 0x40
 8002b42:	4013      	ands	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <UART_AdvFeatureConfig+0x15c>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	035b      	lsls	r3, r3, #13
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10b      	bne.n	8002b82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <UART_AdvFeatureConfig+0x160>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <UART_AdvFeatureConfig+0x164>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
  }
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	fffdffff 	.word	0xfffdffff
 8002bb0:	fffeffff 	.word	0xfffeffff
 8002bb4:	fffbffff 	.word	0xfffbffff
 8002bb8:	ffff7fff 	.word	0xffff7fff
 8002bbc:	ffffefff 	.word	0xffffefff
 8002bc0:	ffffdfff 	.word	0xffffdfff
 8002bc4:	ffefffff 	.word	0xffefffff
 8002bc8:	ff9fffff 	.word	0xff9fffff
 8002bcc:	fff7ffff 	.word	0xfff7ffff

08002bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002be0:	f7fd ffd0 	bl	8000b84 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d10c      	bne.n	8002c10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	0391      	lsls	r1, r2, #14
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <UART_CheckIdleState+0x8c>)
 8002c00:	9200      	str	r2, [sp, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f000 f82c 	bl	8002c60 <UART_WaitOnFlagUntilTimeout>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d001      	beq.n	8002c10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e021      	b.n	8002c54 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2204      	movs	r2, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d10c      	bne.n	8002c38 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	03d1      	lsls	r1, r2, #15
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <UART_CheckIdleState+0x8c>)
 8002c28:	9200      	str	r2, [sp, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f000 f818 	bl	8002c60 <UART_WaitOnFlagUntilTimeout>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d001      	beq.n	8002c38 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e00d      	b.n	8002c54 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2274      	movs	r2, #116	; 0x74
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b004      	add	sp, #16
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	01ffffff 	.word	0x01ffffff

08002c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b094      	sub	sp, #80	; 0x50
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	1dfb      	adds	r3, r7, #7
 8002c6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c70:	e0a3      	b.n	8002dba <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c74:	3301      	adds	r3, #1
 8002c76:	d100      	bne.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002c78:	e09f      	b.n	8002dba <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fd ff83 	bl	8000b84 <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d13d      	bne.n	8002d0c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c90:	f3ef 8310 	mrs	r3, PRIMASK
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	494c      	ldr	r1, [pc, #304]	; (8002de4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	f383 8810 	msr	PRIMASK, r3
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cca:	643b      	str	r3, [r7, #64]	; 0x40
 8002ccc:	2301      	movs	r3, #1
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cee:	f383 8810 	msr	PRIMASK, r3
}
 8002cf2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2274      	movs	r2, #116	; 0x74
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e067      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2204      	movs	r2, #4
 8002d14:	4013      	ands	r3, r2
 8002d16:	d050      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	401a      	ands	r2, r3
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d146      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	0112      	lsls	r2, r2, #4
 8002d34:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d36:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d3c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	2301      	movs	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4923      	ldr	r1, [pc, #140]	; (8002de4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d68:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d70:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d72:	2301      	movs	r3, #1
 8002d74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f383 8810 	msr	PRIMASK, r3
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	2120      	movs	r1, #32
 8002dac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2274      	movs	r2, #116	; 0x74
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e010      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	425a      	negs	r2, r3
 8002dca:	4153      	adcs	r3, r2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	001a      	movs	r2, r3
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d100      	bne.n	8002dda <UART_WaitOnFlagUntilTimeout+0x17a>
 8002dd8:	e74b      	b.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b014      	add	sp, #80	; 0x50
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	fffffe5f 	.word	0xfffffe5f

08002de8 <__errno>:
 8002de8:	4b01      	ldr	r3, [pc, #4]	; (8002df0 <__errno+0x8>)
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	4770      	bx	lr
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	2000000c 	.word	0x2000000c

08002df4 <__libc_init_array>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	2600      	movs	r6, #0
 8002df8:	4d0c      	ldr	r5, [pc, #48]	; (8002e2c <__libc_init_array+0x38>)
 8002dfa:	4c0d      	ldr	r4, [pc, #52]	; (8002e30 <__libc_init_array+0x3c>)
 8002dfc:	1b64      	subs	r4, r4, r5
 8002dfe:	10a4      	asrs	r4, r4, #2
 8002e00:	42a6      	cmp	r6, r4
 8002e02:	d109      	bne.n	8002e18 <__libc_init_array+0x24>
 8002e04:	2600      	movs	r6, #0
 8002e06:	f000 fc47 	bl	8003698 <_init>
 8002e0a:	4d0a      	ldr	r5, [pc, #40]	; (8002e34 <__libc_init_array+0x40>)
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	; (8002e38 <__libc_init_array+0x44>)
 8002e0e:	1b64      	subs	r4, r4, r5
 8002e10:	10a4      	asrs	r4, r4, #2
 8002e12:	42a6      	cmp	r6, r4
 8002e14:	d105      	bne.n	8002e22 <__libc_init_array+0x2e>
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	00b3      	lsls	r3, r6, #2
 8002e1a:	58eb      	ldr	r3, [r5, r3]
 8002e1c:	4798      	blx	r3
 8002e1e:	3601      	adds	r6, #1
 8002e20:	e7ee      	b.n	8002e00 <__libc_init_array+0xc>
 8002e22:	00b3      	lsls	r3, r6, #2
 8002e24:	58eb      	ldr	r3, [r5, r3]
 8002e26:	4798      	blx	r3
 8002e28:	3601      	adds	r6, #1
 8002e2a:	e7f2      	b.n	8002e12 <__libc_init_array+0x1e>
 8002e2c:	0800378c 	.word	0x0800378c
 8002e30:	0800378c 	.word	0x0800378c
 8002e34:	0800378c 	.word	0x0800378c
 8002e38:	08003790 	.word	0x08003790

08002e3c <memset>:
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	1882      	adds	r2, r0, r2
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d100      	bne.n	8002e46 <memset+0xa>
 8002e44:	4770      	bx	lr
 8002e46:	7019      	strb	r1, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	e7f9      	b.n	8002e40 <memset+0x4>

08002e4c <siprintf>:
 8002e4c:	b40e      	push	{r1, r2, r3}
 8002e4e:	b500      	push	{lr}
 8002e50:	490b      	ldr	r1, [pc, #44]	; (8002e80 <siprintf+0x34>)
 8002e52:	b09c      	sub	sp, #112	; 0x70
 8002e54:	ab1d      	add	r3, sp, #116	; 0x74
 8002e56:	9002      	str	r0, [sp, #8]
 8002e58:	9006      	str	r0, [sp, #24]
 8002e5a:	9107      	str	r1, [sp, #28]
 8002e5c:	9104      	str	r1, [sp, #16]
 8002e5e:	4809      	ldr	r0, [pc, #36]	; (8002e84 <siprintf+0x38>)
 8002e60:	4909      	ldr	r1, [pc, #36]	; (8002e88 <siprintf+0x3c>)
 8002e62:	cb04      	ldmia	r3!, {r2}
 8002e64:	9105      	str	r1, [sp, #20]
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	a902      	add	r1, sp, #8
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	f000 f870 	bl	8002f50 <_svfiprintf_r>
 8002e70:	2300      	movs	r3, #0
 8002e72:	9a02      	ldr	r2, [sp, #8]
 8002e74:	7013      	strb	r3, [r2, #0]
 8002e76:	b01c      	add	sp, #112	; 0x70
 8002e78:	bc08      	pop	{r3}
 8002e7a:	b003      	add	sp, #12
 8002e7c:	4718      	bx	r3
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	7fffffff 	.word	0x7fffffff
 8002e84:	2000000c 	.word	0x2000000c
 8002e88:	ffff0208 	.word	0xffff0208

08002e8c <__ssputs_r>:
 8002e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8e:	688e      	ldr	r6, [r1, #8]
 8002e90:	b085      	sub	sp, #20
 8002e92:	0007      	movs	r7, r0
 8002e94:	000c      	movs	r4, r1
 8002e96:	9203      	str	r2, [sp, #12]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	429e      	cmp	r6, r3
 8002e9c:	d83c      	bhi.n	8002f18 <__ssputs_r+0x8c>
 8002e9e:	2390      	movs	r3, #144	; 0x90
 8002ea0:	898a      	ldrh	r2, [r1, #12]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	421a      	tst	r2, r3
 8002ea6:	d034      	beq.n	8002f12 <__ssputs_r+0x86>
 8002ea8:	2503      	movs	r5, #3
 8002eaa:	6909      	ldr	r1, [r1, #16]
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	1a5b      	subs	r3, r3, r1
 8002eb0:	9302      	str	r3, [sp, #8]
 8002eb2:	6963      	ldr	r3, [r4, #20]
 8002eb4:	9802      	ldr	r0, [sp, #8]
 8002eb6:	435d      	muls	r5, r3
 8002eb8:	0feb      	lsrs	r3, r5, #31
 8002eba:	195d      	adds	r5, r3, r5
 8002ebc:	9b01      	ldr	r3, [sp, #4]
 8002ebe:	106d      	asrs	r5, r5, #1
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	181b      	adds	r3, r3, r0
 8002ec4:	42ab      	cmp	r3, r5
 8002ec6:	d900      	bls.n	8002eca <__ssputs_r+0x3e>
 8002ec8:	001d      	movs	r5, r3
 8002eca:	0553      	lsls	r3, r2, #21
 8002ecc:	d532      	bpl.n	8002f34 <__ssputs_r+0xa8>
 8002ece:	0029      	movs	r1, r5
 8002ed0:	0038      	movs	r0, r7
 8002ed2:	f000 fb31 	bl	8003538 <_malloc_r>
 8002ed6:	1e06      	subs	r6, r0, #0
 8002ed8:	d109      	bne.n	8002eee <__ssputs_r+0x62>
 8002eda:	230c      	movs	r3, #12
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	89a2      	ldrh	r2, [r4, #12]
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	81a3      	strh	r3, [r4, #12]
 8002eea:	b005      	add	sp, #20
 8002eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eee:	9a02      	ldr	r2, [sp, #8]
 8002ef0:	6921      	ldr	r1, [r4, #16]
 8002ef2:	f000 faba 	bl	800346a <memcpy>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <__ssputs_r+0xc0>)
 8002efa:	401a      	ands	r2, r3
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	4313      	orrs	r3, r2
 8002f00:	81a3      	strh	r3, [r4, #12]
 8002f02:	9b02      	ldr	r3, [sp, #8]
 8002f04:	6126      	str	r6, [r4, #16]
 8002f06:	18f6      	adds	r6, r6, r3
 8002f08:	6026      	str	r6, [r4, #0]
 8002f0a:	6165      	str	r5, [r4, #20]
 8002f0c:	9e01      	ldr	r6, [sp, #4]
 8002f0e:	1aed      	subs	r5, r5, r3
 8002f10:	60a5      	str	r5, [r4, #8]
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	429e      	cmp	r6, r3
 8002f16:	d900      	bls.n	8002f1a <__ssputs_r+0x8e>
 8002f18:	9e01      	ldr	r6, [sp, #4]
 8002f1a:	0032      	movs	r2, r6
 8002f1c:	9903      	ldr	r1, [sp, #12]
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	f000 faac 	bl	800347c <memmove>
 8002f24:	68a3      	ldr	r3, [r4, #8]
 8002f26:	2000      	movs	r0, #0
 8002f28:	1b9b      	subs	r3, r3, r6
 8002f2a:	60a3      	str	r3, [r4, #8]
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	199e      	adds	r6, r3, r6
 8002f30:	6026      	str	r6, [r4, #0]
 8002f32:	e7da      	b.n	8002eea <__ssputs_r+0x5e>
 8002f34:	002a      	movs	r2, r5
 8002f36:	0038      	movs	r0, r7
 8002f38:	f000 fb5c 	bl	80035f4 <_realloc_r>
 8002f3c:	1e06      	subs	r6, r0, #0
 8002f3e:	d1e0      	bne.n	8002f02 <__ssputs_r+0x76>
 8002f40:	0038      	movs	r0, r7
 8002f42:	6921      	ldr	r1, [r4, #16]
 8002f44:	f000 faae 	bl	80034a4 <_free_r>
 8002f48:	e7c7      	b.n	8002eda <__ssputs_r+0x4e>
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	fffffb7f 	.word	0xfffffb7f

08002f50 <_svfiprintf_r>:
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	b0a1      	sub	sp, #132	; 0x84
 8002f54:	9003      	str	r0, [sp, #12]
 8002f56:	001d      	movs	r5, r3
 8002f58:	898b      	ldrh	r3, [r1, #12]
 8002f5a:	000f      	movs	r7, r1
 8002f5c:	0016      	movs	r6, r2
 8002f5e:	061b      	lsls	r3, r3, #24
 8002f60:	d511      	bpl.n	8002f86 <_svfiprintf_r+0x36>
 8002f62:	690b      	ldr	r3, [r1, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10e      	bne.n	8002f86 <_svfiprintf_r+0x36>
 8002f68:	2140      	movs	r1, #64	; 0x40
 8002f6a:	f000 fae5 	bl	8003538 <_malloc_r>
 8002f6e:	6038      	str	r0, [r7, #0]
 8002f70:	6138      	str	r0, [r7, #16]
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d105      	bne.n	8002f82 <_svfiprintf_r+0x32>
 8002f76:	230c      	movs	r3, #12
 8002f78:	9a03      	ldr	r2, [sp, #12]
 8002f7a:	3801      	subs	r0, #1
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	b021      	add	sp, #132	; 0x84
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f82:	2340      	movs	r3, #64	; 0x40
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	2300      	movs	r3, #0
 8002f88:	ac08      	add	r4, sp, #32
 8002f8a:	6163      	str	r3, [r4, #20]
 8002f8c:	3320      	adds	r3, #32
 8002f8e:	7663      	strb	r3, [r4, #25]
 8002f90:	3310      	adds	r3, #16
 8002f92:	76a3      	strb	r3, [r4, #26]
 8002f94:	9507      	str	r5, [sp, #28]
 8002f96:	0035      	movs	r5, r6
 8002f98:	782b      	ldrb	r3, [r5, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <_svfiprintf_r+0x52>
 8002f9e:	2b25      	cmp	r3, #37	; 0x25
 8002fa0:	d147      	bne.n	8003032 <_svfiprintf_r+0xe2>
 8002fa2:	1bab      	subs	r3, r5, r6
 8002fa4:	9305      	str	r3, [sp, #20]
 8002fa6:	42b5      	cmp	r5, r6
 8002fa8:	d00c      	beq.n	8002fc4 <_svfiprintf_r+0x74>
 8002faa:	0032      	movs	r2, r6
 8002fac:	0039      	movs	r1, r7
 8002fae:	9803      	ldr	r0, [sp, #12]
 8002fb0:	f7ff ff6c 	bl	8002e8c <__ssputs_r>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d100      	bne.n	8002fba <_svfiprintf_r+0x6a>
 8002fb8:	e0ae      	b.n	8003118 <_svfiprintf_r+0x1c8>
 8002fba:	6962      	ldr	r2, [r4, #20]
 8002fbc:	9b05      	ldr	r3, [sp, #20]
 8002fbe:	4694      	mov	ip, r2
 8002fc0:	4463      	add	r3, ip
 8002fc2:	6163      	str	r3, [r4, #20]
 8002fc4:	782b      	ldrb	r3, [r5, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d100      	bne.n	8002fcc <_svfiprintf_r+0x7c>
 8002fca:	e0a5      	b.n	8003118 <_svfiprintf_r+0x1c8>
 8002fcc:	2201      	movs	r2, #1
 8002fce:	2300      	movs	r3, #0
 8002fd0:	4252      	negs	r2, r2
 8002fd2:	6062      	str	r2, [r4, #4]
 8002fd4:	a904      	add	r1, sp, #16
 8002fd6:	3254      	adds	r2, #84	; 0x54
 8002fd8:	1852      	adds	r2, r2, r1
 8002fda:	1c6e      	adds	r6, r5, #1
 8002fdc:	6023      	str	r3, [r4, #0]
 8002fde:	60e3      	str	r3, [r4, #12]
 8002fe0:	60a3      	str	r3, [r4, #8]
 8002fe2:	7013      	strb	r3, [r2, #0]
 8002fe4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fe6:	2205      	movs	r2, #5
 8002fe8:	7831      	ldrb	r1, [r6, #0]
 8002fea:	4854      	ldr	r0, [pc, #336]	; (800313c <_svfiprintf_r+0x1ec>)
 8002fec:	f000 fa32 	bl	8003454 <memchr>
 8002ff0:	1c75      	adds	r5, r6, #1
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d11f      	bne.n	8003036 <_svfiprintf_r+0xe6>
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	06d3      	lsls	r3, r2, #27
 8002ffa:	d504      	bpl.n	8003006 <_svfiprintf_r+0xb6>
 8002ffc:	2353      	movs	r3, #83	; 0x53
 8002ffe:	a904      	add	r1, sp, #16
 8003000:	185b      	adds	r3, r3, r1
 8003002:	2120      	movs	r1, #32
 8003004:	7019      	strb	r1, [r3, #0]
 8003006:	0713      	lsls	r3, r2, #28
 8003008:	d504      	bpl.n	8003014 <_svfiprintf_r+0xc4>
 800300a:	2353      	movs	r3, #83	; 0x53
 800300c:	a904      	add	r1, sp, #16
 800300e:	185b      	adds	r3, r3, r1
 8003010:	212b      	movs	r1, #43	; 0x2b
 8003012:	7019      	strb	r1, [r3, #0]
 8003014:	7833      	ldrb	r3, [r6, #0]
 8003016:	2b2a      	cmp	r3, #42	; 0x2a
 8003018:	d016      	beq.n	8003048 <_svfiprintf_r+0xf8>
 800301a:	0035      	movs	r5, r6
 800301c:	2100      	movs	r1, #0
 800301e:	200a      	movs	r0, #10
 8003020:	68e3      	ldr	r3, [r4, #12]
 8003022:	782a      	ldrb	r2, [r5, #0]
 8003024:	1c6e      	adds	r6, r5, #1
 8003026:	3a30      	subs	r2, #48	; 0x30
 8003028:	2a09      	cmp	r2, #9
 800302a:	d94e      	bls.n	80030ca <_svfiprintf_r+0x17a>
 800302c:	2900      	cmp	r1, #0
 800302e:	d111      	bne.n	8003054 <_svfiprintf_r+0x104>
 8003030:	e017      	b.n	8003062 <_svfiprintf_r+0x112>
 8003032:	3501      	adds	r5, #1
 8003034:	e7b0      	b.n	8002f98 <_svfiprintf_r+0x48>
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <_svfiprintf_r+0x1ec>)
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	1ac0      	subs	r0, r0, r3
 800303c:	2301      	movs	r3, #1
 800303e:	4083      	lsls	r3, r0
 8003040:	4313      	orrs	r3, r2
 8003042:	002e      	movs	r6, r5
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	e7ce      	b.n	8002fe6 <_svfiprintf_r+0x96>
 8003048:	9b07      	ldr	r3, [sp, #28]
 800304a:	1d19      	adds	r1, r3, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	9107      	str	r1, [sp, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	db01      	blt.n	8003058 <_svfiprintf_r+0x108>
 8003054:	930b      	str	r3, [sp, #44]	; 0x2c
 8003056:	e004      	b.n	8003062 <_svfiprintf_r+0x112>
 8003058:	425b      	negs	r3, r3
 800305a:	60e3      	str	r3, [r4, #12]
 800305c:	2302      	movs	r3, #2
 800305e:	4313      	orrs	r3, r2
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	782b      	ldrb	r3, [r5, #0]
 8003064:	2b2e      	cmp	r3, #46	; 0x2e
 8003066:	d10a      	bne.n	800307e <_svfiprintf_r+0x12e>
 8003068:	786b      	ldrb	r3, [r5, #1]
 800306a:	2b2a      	cmp	r3, #42	; 0x2a
 800306c:	d135      	bne.n	80030da <_svfiprintf_r+0x18a>
 800306e:	9b07      	ldr	r3, [sp, #28]
 8003070:	3502      	adds	r5, #2
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	9207      	str	r2, [sp, #28]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db2b      	blt.n	80030d4 <_svfiprintf_r+0x184>
 800307c:	9309      	str	r3, [sp, #36]	; 0x24
 800307e:	4e30      	ldr	r6, [pc, #192]	; (8003140 <_svfiprintf_r+0x1f0>)
 8003080:	2203      	movs	r2, #3
 8003082:	0030      	movs	r0, r6
 8003084:	7829      	ldrb	r1, [r5, #0]
 8003086:	f000 f9e5 	bl	8003454 <memchr>
 800308a:	2800      	cmp	r0, #0
 800308c:	d006      	beq.n	800309c <_svfiprintf_r+0x14c>
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	1b80      	subs	r0, r0, r6
 8003092:	4083      	lsls	r3, r0
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	3501      	adds	r5, #1
 8003098:	4313      	orrs	r3, r2
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	7829      	ldrb	r1, [r5, #0]
 800309e:	2206      	movs	r2, #6
 80030a0:	4828      	ldr	r0, [pc, #160]	; (8003144 <_svfiprintf_r+0x1f4>)
 80030a2:	1c6e      	adds	r6, r5, #1
 80030a4:	7621      	strb	r1, [r4, #24]
 80030a6:	f000 f9d5 	bl	8003454 <memchr>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d03c      	beq.n	8003128 <_svfiprintf_r+0x1d8>
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <_svfiprintf_r+0x1f8>)
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d125      	bne.n	8003100 <_svfiprintf_r+0x1b0>
 80030b4:	2207      	movs	r2, #7
 80030b6:	9b07      	ldr	r3, [sp, #28]
 80030b8:	3307      	adds	r3, #7
 80030ba:	4393      	bics	r3, r2
 80030bc:	3308      	adds	r3, #8
 80030be:	9307      	str	r3, [sp, #28]
 80030c0:	6963      	ldr	r3, [r4, #20]
 80030c2:	9a04      	ldr	r2, [sp, #16]
 80030c4:	189b      	adds	r3, r3, r2
 80030c6:	6163      	str	r3, [r4, #20]
 80030c8:	e765      	b.n	8002f96 <_svfiprintf_r+0x46>
 80030ca:	4343      	muls	r3, r0
 80030cc:	0035      	movs	r5, r6
 80030ce:	2101      	movs	r1, #1
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	e7a6      	b.n	8003022 <_svfiprintf_r+0xd2>
 80030d4:	2301      	movs	r3, #1
 80030d6:	425b      	negs	r3, r3
 80030d8:	e7d0      	b.n	800307c <_svfiprintf_r+0x12c>
 80030da:	2300      	movs	r3, #0
 80030dc:	200a      	movs	r0, #10
 80030de:	001a      	movs	r2, r3
 80030e0:	3501      	adds	r5, #1
 80030e2:	6063      	str	r3, [r4, #4]
 80030e4:	7829      	ldrb	r1, [r5, #0]
 80030e6:	1c6e      	adds	r6, r5, #1
 80030e8:	3930      	subs	r1, #48	; 0x30
 80030ea:	2909      	cmp	r1, #9
 80030ec:	d903      	bls.n	80030f6 <_svfiprintf_r+0x1a6>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0c5      	beq.n	800307e <_svfiprintf_r+0x12e>
 80030f2:	9209      	str	r2, [sp, #36]	; 0x24
 80030f4:	e7c3      	b.n	800307e <_svfiprintf_r+0x12e>
 80030f6:	4342      	muls	r2, r0
 80030f8:	0035      	movs	r5, r6
 80030fa:	2301      	movs	r3, #1
 80030fc:	1852      	adds	r2, r2, r1
 80030fe:	e7f1      	b.n	80030e4 <_svfiprintf_r+0x194>
 8003100:	ab07      	add	r3, sp, #28
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	003a      	movs	r2, r7
 8003106:	0021      	movs	r1, r4
 8003108:	4b10      	ldr	r3, [pc, #64]	; (800314c <_svfiprintf_r+0x1fc>)
 800310a:	9803      	ldr	r0, [sp, #12]
 800310c:	e000      	b.n	8003110 <_svfiprintf_r+0x1c0>
 800310e:	bf00      	nop
 8003110:	9004      	str	r0, [sp, #16]
 8003112:	9b04      	ldr	r3, [sp, #16]
 8003114:	3301      	adds	r3, #1
 8003116:	d1d3      	bne.n	80030c0 <_svfiprintf_r+0x170>
 8003118:	89bb      	ldrh	r3, [r7, #12]
 800311a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800311c:	065b      	lsls	r3, r3, #25
 800311e:	d400      	bmi.n	8003122 <_svfiprintf_r+0x1d2>
 8003120:	e72d      	b.n	8002f7e <_svfiprintf_r+0x2e>
 8003122:	2001      	movs	r0, #1
 8003124:	4240      	negs	r0, r0
 8003126:	e72a      	b.n	8002f7e <_svfiprintf_r+0x2e>
 8003128:	ab07      	add	r3, sp, #28
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	003a      	movs	r2, r7
 800312e:	0021      	movs	r1, r4
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <_svfiprintf_r+0x1fc>)
 8003132:	9803      	ldr	r0, [sp, #12]
 8003134:	f000 f87c 	bl	8003230 <_printf_i>
 8003138:	e7ea      	b.n	8003110 <_svfiprintf_r+0x1c0>
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	08003750 	.word	0x08003750
 8003140:	08003756 	.word	0x08003756
 8003144:	0800375a 	.word	0x0800375a
 8003148:	00000000 	.word	0x00000000
 800314c:	08002e8d 	.word	0x08002e8d

08003150 <_printf_common>:
 8003150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003152:	0015      	movs	r5, r2
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	688a      	ldr	r2, [r1, #8]
 8003158:	690b      	ldr	r3, [r1, #16]
 800315a:	000c      	movs	r4, r1
 800315c:	9000      	str	r0, [sp, #0]
 800315e:	4293      	cmp	r3, r2
 8003160:	da00      	bge.n	8003164 <_printf_common+0x14>
 8003162:	0013      	movs	r3, r2
 8003164:	0022      	movs	r2, r4
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	3243      	adds	r2, #67	; 0x43
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	2a00      	cmp	r2, #0
 800316e:	d001      	beq.n	8003174 <_printf_common+0x24>
 8003170:	3301      	adds	r3, #1
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	d502      	bpl.n	8003180 <_printf_common+0x30>
 800317a:	682b      	ldr	r3, [r5, #0]
 800317c:	3302      	adds	r3, #2
 800317e:	602b      	str	r3, [r5, #0]
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	2306      	movs	r3, #6
 8003184:	0017      	movs	r7, r2
 8003186:	401f      	ands	r7, r3
 8003188:	421a      	tst	r2, r3
 800318a:	d027      	beq.n	80031dc <_printf_common+0x8c>
 800318c:	0023      	movs	r3, r4
 800318e:	3343      	adds	r3, #67	; 0x43
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	1e5a      	subs	r2, r3, #1
 8003194:	4193      	sbcs	r3, r2
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	0692      	lsls	r2, r2, #26
 800319a:	d430      	bmi.n	80031fe <_printf_common+0xae>
 800319c:	0022      	movs	r2, r4
 800319e:	9901      	ldr	r1, [sp, #4]
 80031a0:	9800      	ldr	r0, [sp, #0]
 80031a2:	9e08      	ldr	r6, [sp, #32]
 80031a4:	3243      	adds	r2, #67	; 0x43
 80031a6:	47b0      	blx	r6
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d025      	beq.n	80031f8 <_printf_common+0xa8>
 80031ac:	2306      	movs	r3, #6
 80031ae:	6820      	ldr	r0, [r4, #0]
 80031b0:	682a      	ldr	r2, [r5, #0]
 80031b2:	68e1      	ldr	r1, [r4, #12]
 80031b4:	2500      	movs	r5, #0
 80031b6:	4003      	ands	r3, r0
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d103      	bne.n	80031c4 <_printf_common+0x74>
 80031bc:	1a8d      	subs	r5, r1, r2
 80031be:	43eb      	mvns	r3, r5
 80031c0:	17db      	asrs	r3, r3, #31
 80031c2:	401d      	ands	r5, r3
 80031c4:	68a3      	ldr	r3, [r4, #8]
 80031c6:	6922      	ldr	r2, [r4, #16]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	dd01      	ble.n	80031d0 <_printf_common+0x80>
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	18ed      	adds	r5, r5, r3
 80031d0:	2700      	movs	r7, #0
 80031d2:	42bd      	cmp	r5, r7
 80031d4:	d120      	bne.n	8003218 <_printf_common+0xc8>
 80031d6:	2000      	movs	r0, #0
 80031d8:	e010      	b.n	80031fc <_printf_common+0xac>
 80031da:	3701      	adds	r7, #1
 80031dc:	68e3      	ldr	r3, [r4, #12]
 80031de:	682a      	ldr	r2, [r5, #0]
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	42bb      	cmp	r3, r7
 80031e4:	ddd2      	ble.n	800318c <_printf_common+0x3c>
 80031e6:	0022      	movs	r2, r4
 80031e8:	2301      	movs	r3, #1
 80031ea:	9901      	ldr	r1, [sp, #4]
 80031ec:	9800      	ldr	r0, [sp, #0]
 80031ee:	9e08      	ldr	r6, [sp, #32]
 80031f0:	3219      	adds	r2, #25
 80031f2:	47b0      	blx	r6
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d1f0      	bne.n	80031da <_printf_common+0x8a>
 80031f8:	2001      	movs	r0, #1
 80031fa:	4240      	negs	r0, r0
 80031fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031fe:	2030      	movs	r0, #48	; 0x30
 8003200:	18e1      	adds	r1, r4, r3
 8003202:	3143      	adds	r1, #67	; 0x43
 8003204:	7008      	strb	r0, [r1, #0]
 8003206:	0021      	movs	r1, r4
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	3145      	adds	r1, #69	; 0x45
 800320c:	7809      	ldrb	r1, [r1, #0]
 800320e:	18a2      	adds	r2, r4, r2
 8003210:	3243      	adds	r2, #67	; 0x43
 8003212:	3302      	adds	r3, #2
 8003214:	7011      	strb	r1, [r2, #0]
 8003216:	e7c1      	b.n	800319c <_printf_common+0x4c>
 8003218:	0022      	movs	r2, r4
 800321a:	2301      	movs	r3, #1
 800321c:	9901      	ldr	r1, [sp, #4]
 800321e:	9800      	ldr	r0, [sp, #0]
 8003220:	9e08      	ldr	r6, [sp, #32]
 8003222:	321a      	adds	r2, #26
 8003224:	47b0      	blx	r6
 8003226:	1c43      	adds	r3, r0, #1
 8003228:	d0e6      	beq.n	80031f8 <_printf_common+0xa8>
 800322a:	3701      	adds	r7, #1
 800322c:	e7d1      	b.n	80031d2 <_printf_common+0x82>
	...

08003230 <_printf_i>:
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b08b      	sub	sp, #44	; 0x2c
 8003234:	9206      	str	r2, [sp, #24]
 8003236:	000a      	movs	r2, r1
 8003238:	3243      	adds	r2, #67	; 0x43
 800323a:	9307      	str	r3, [sp, #28]
 800323c:	9005      	str	r0, [sp, #20]
 800323e:	9204      	str	r2, [sp, #16]
 8003240:	7e0a      	ldrb	r2, [r1, #24]
 8003242:	000c      	movs	r4, r1
 8003244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003246:	2a78      	cmp	r2, #120	; 0x78
 8003248:	d806      	bhi.n	8003258 <_printf_i+0x28>
 800324a:	2a62      	cmp	r2, #98	; 0x62
 800324c:	d808      	bhi.n	8003260 <_printf_i+0x30>
 800324e:	2a00      	cmp	r2, #0
 8003250:	d100      	bne.n	8003254 <_printf_i+0x24>
 8003252:	e0c0      	b.n	80033d6 <_printf_i+0x1a6>
 8003254:	2a58      	cmp	r2, #88	; 0x58
 8003256:	d052      	beq.n	80032fe <_printf_i+0xce>
 8003258:	0026      	movs	r6, r4
 800325a:	3642      	adds	r6, #66	; 0x42
 800325c:	7032      	strb	r2, [r6, #0]
 800325e:	e022      	b.n	80032a6 <_printf_i+0x76>
 8003260:	0010      	movs	r0, r2
 8003262:	3863      	subs	r0, #99	; 0x63
 8003264:	2815      	cmp	r0, #21
 8003266:	d8f7      	bhi.n	8003258 <_printf_i+0x28>
 8003268:	f7fc ff4e 	bl	8000108 <__gnu_thumb1_case_shi>
 800326c:	001f0016 	.word	0x001f0016
 8003270:	fff6fff6 	.word	0xfff6fff6
 8003274:	fff6fff6 	.word	0xfff6fff6
 8003278:	fff6001f 	.word	0xfff6001f
 800327c:	fff6fff6 	.word	0xfff6fff6
 8003280:	00a8fff6 	.word	0x00a8fff6
 8003284:	009a0036 	.word	0x009a0036
 8003288:	fff6fff6 	.word	0xfff6fff6
 800328c:	fff600b9 	.word	0xfff600b9
 8003290:	fff60036 	.word	0xfff60036
 8003294:	009efff6 	.word	0x009efff6
 8003298:	0026      	movs	r6, r4
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	3642      	adds	r6, #66	; 0x42
 800329e:	1d11      	adds	r1, r2, #4
 80032a0:	6019      	str	r1, [r3, #0]
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	7033      	strb	r3, [r6, #0]
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0a7      	b.n	80033fa <_printf_i+0x1ca>
 80032aa:	6808      	ldr	r0, [r1, #0]
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	1d0a      	adds	r2, r1, #4
 80032b0:	0605      	lsls	r5, r0, #24
 80032b2:	d50b      	bpl.n	80032cc <_printf_i+0x9c>
 80032b4:	680d      	ldr	r5, [r1, #0]
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	da03      	bge.n	80032c4 <_printf_i+0x94>
 80032bc:	232d      	movs	r3, #45	; 0x2d
 80032be:	9a04      	ldr	r2, [sp, #16]
 80032c0:	426d      	negs	r5, r5
 80032c2:	7013      	strb	r3, [r2, #0]
 80032c4:	4b61      	ldr	r3, [pc, #388]	; (800344c <_printf_i+0x21c>)
 80032c6:	270a      	movs	r7, #10
 80032c8:	9303      	str	r3, [sp, #12]
 80032ca:	e032      	b.n	8003332 <_printf_i+0x102>
 80032cc:	680d      	ldr	r5, [r1, #0]
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	0641      	lsls	r1, r0, #25
 80032d2:	d5f1      	bpl.n	80032b8 <_printf_i+0x88>
 80032d4:	b22d      	sxth	r5, r5
 80032d6:	e7ef      	b.n	80032b8 <_printf_i+0x88>
 80032d8:	680d      	ldr	r5, [r1, #0]
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	1d08      	adds	r0, r1, #4
 80032de:	6018      	str	r0, [r3, #0]
 80032e0:	062e      	lsls	r6, r5, #24
 80032e2:	d501      	bpl.n	80032e8 <_printf_i+0xb8>
 80032e4:	680d      	ldr	r5, [r1, #0]
 80032e6:	e003      	b.n	80032f0 <_printf_i+0xc0>
 80032e8:	066d      	lsls	r5, r5, #25
 80032ea:	d5fb      	bpl.n	80032e4 <_printf_i+0xb4>
 80032ec:	680d      	ldr	r5, [r1, #0]
 80032ee:	b2ad      	uxth	r5, r5
 80032f0:	4b56      	ldr	r3, [pc, #344]	; (800344c <_printf_i+0x21c>)
 80032f2:	270a      	movs	r7, #10
 80032f4:	9303      	str	r3, [sp, #12]
 80032f6:	2a6f      	cmp	r2, #111	; 0x6f
 80032f8:	d117      	bne.n	800332a <_printf_i+0xfa>
 80032fa:	2708      	movs	r7, #8
 80032fc:	e015      	b.n	800332a <_printf_i+0xfa>
 80032fe:	3145      	adds	r1, #69	; 0x45
 8003300:	700a      	strb	r2, [r1, #0]
 8003302:	4a52      	ldr	r2, [pc, #328]	; (800344c <_printf_i+0x21c>)
 8003304:	9203      	str	r2, [sp, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	6821      	ldr	r1, [r4, #0]
 800330a:	ca20      	ldmia	r2!, {r5}
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	0608      	lsls	r0, r1, #24
 8003310:	d550      	bpl.n	80033b4 <_printf_i+0x184>
 8003312:	07cb      	lsls	r3, r1, #31
 8003314:	d502      	bpl.n	800331c <_printf_i+0xec>
 8003316:	2320      	movs	r3, #32
 8003318:	4319      	orrs	r1, r3
 800331a:	6021      	str	r1, [r4, #0]
 800331c:	2710      	movs	r7, #16
 800331e:	2d00      	cmp	r5, #0
 8003320:	d103      	bne.n	800332a <_printf_i+0xfa>
 8003322:	2320      	movs	r3, #32
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	439a      	bics	r2, r3
 8003328:	6022      	str	r2, [r4, #0]
 800332a:	0023      	movs	r3, r4
 800332c:	2200      	movs	r2, #0
 800332e:	3343      	adds	r3, #67	; 0x43
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	6863      	ldr	r3, [r4, #4]
 8003334:	60a3      	str	r3, [r4, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db03      	blt.n	8003342 <_printf_i+0x112>
 800333a:	2204      	movs	r2, #4
 800333c:	6821      	ldr	r1, [r4, #0]
 800333e:	4391      	bics	r1, r2
 8003340:	6021      	str	r1, [r4, #0]
 8003342:	2d00      	cmp	r5, #0
 8003344:	d102      	bne.n	800334c <_printf_i+0x11c>
 8003346:	9e04      	ldr	r6, [sp, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00c      	beq.n	8003366 <_printf_i+0x136>
 800334c:	9e04      	ldr	r6, [sp, #16]
 800334e:	0028      	movs	r0, r5
 8003350:	0039      	movs	r1, r7
 8003352:	f7fc ff69 	bl	8000228 <__aeabi_uidivmod>
 8003356:	9b03      	ldr	r3, [sp, #12]
 8003358:	3e01      	subs	r6, #1
 800335a:	5c5b      	ldrb	r3, [r3, r1]
 800335c:	7033      	strb	r3, [r6, #0]
 800335e:	002b      	movs	r3, r5
 8003360:	0005      	movs	r5, r0
 8003362:	429f      	cmp	r7, r3
 8003364:	d9f3      	bls.n	800334e <_printf_i+0x11e>
 8003366:	2f08      	cmp	r7, #8
 8003368:	d109      	bne.n	800337e <_printf_i+0x14e>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	07db      	lsls	r3, r3, #31
 800336e:	d506      	bpl.n	800337e <_printf_i+0x14e>
 8003370:	6863      	ldr	r3, [r4, #4]
 8003372:	6922      	ldr	r2, [r4, #16]
 8003374:	4293      	cmp	r3, r2
 8003376:	dc02      	bgt.n	800337e <_printf_i+0x14e>
 8003378:	2330      	movs	r3, #48	; 0x30
 800337a:	3e01      	subs	r6, #1
 800337c:	7033      	strb	r3, [r6, #0]
 800337e:	9b04      	ldr	r3, [sp, #16]
 8003380:	1b9b      	subs	r3, r3, r6
 8003382:	6123      	str	r3, [r4, #16]
 8003384:	9b07      	ldr	r3, [sp, #28]
 8003386:	0021      	movs	r1, r4
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	9805      	ldr	r0, [sp, #20]
 800338c:	9b06      	ldr	r3, [sp, #24]
 800338e:	aa09      	add	r2, sp, #36	; 0x24
 8003390:	f7ff fede 	bl	8003150 <_printf_common>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d135      	bne.n	8003404 <_printf_i+0x1d4>
 8003398:	2001      	movs	r0, #1
 800339a:	4240      	negs	r0, r0
 800339c:	b00b      	add	sp, #44	; 0x2c
 800339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a0:	2220      	movs	r2, #32
 80033a2:	6809      	ldr	r1, [r1, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	6022      	str	r2, [r4, #0]
 80033a8:	0022      	movs	r2, r4
 80033aa:	2178      	movs	r1, #120	; 0x78
 80033ac:	3245      	adds	r2, #69	; 0x45
 80033ae:	7011      	strb	r1, [r2, #0]
 80033b0:	4a27      	ldr	r2, [pc, #156]	; (8003450 <_printf_i+0x220>)
 80033b2:	e7a7      	b.n	8003304 <_printf_i+0xd4>
 80033b4:	0648      	lsls	r0, r1, #25
 80033b6:	d5ac      	bpl.n	8003312 <_printf_i+0xe2>
 80033b8:	b2ad      	uxth	r5, r5
 80033ba:	e7aa      	b.n	8003312 <_printf_i+0xe2>
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	680d      	ldr	r5, [r1, #0]
 80033c0:	1d10      	adds	r0, r2, #4
 80033c2:	6949      	ldr	r1, [r1, #20]
 80033c4:	6018      	str	r0, [r3, #0]
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	062e      	lsls	r6, r5, #24
 80033ca:	d501      	bpl.n	80033d0 <_printf_i+0x1a0>
 80033cc:	6019      	str	r1, [r3, #0]
 80033ce:	e002      	b.n	80033d6 <_printf_i+0x1a6>
 80033d0:	066d      	lsls	r5, r5, #25
 80033d2:	d5fb      	bpl.n	80033cc <_printf_i+0x19c>
 80033d4:	8019      	strh	r1, [r3, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9e04      	ldr	r6, [sp, #16]
 80033da:	6123      	str	r3, [r4, #16]
 80033dc:	e7d2      	b.n	8003384 <_printf_i+0x154>
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	1d11      	adds	r1, r2, #4
 80033e2:	6019      	str	r1, [r3, #0]
 80033e4:	6816      	ldr	r6, [r2, #0]
 80033e6:	2100      	movs	r1, #0
 80033e8:	0030      	movs	r0, r6
 80033ea:	6862      	ldr	r2, [r4, #4]
 80033ec:	f000 f832 	bl	8003454 <memchr>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d001      	beq.n	80033f8 <_printf_i+0x1c8>
 80033f4:	1b80      	subs	r0, r0, r6
 80033f6:	6060      	str	r0, [r4, #4]
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	6123      	str	r3, [r4, #16]
 80033fc:	2300      	movs	r3, #0
 80033fe:	9a04      	ldr	r2, [sp, #16]
 8003400:	7013      	strb	r3, [r2, #0]
 8003402:	e7bf      	b.n	8003384 <_printf_i+0x154>
 8003404:	6923      	ldr	r3, [r4, #16]
 8003406:	0032      	movs	r2, r6
 8003408:	9906      	ldr	r1, [sp, #24]
 800340a:	9805      	ldr	r0, [sp, #20]
 800340c:	9d07      	ldr	r5, [sp, #28]
 800340e:	47a8      	blx	r5
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d0c1      	beq.n	8003398 <_printf_i+0x168>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	079b      	lsls	r3, r3, #30
 8003418:	d415      	bmi.n	8003446 <_printf_i+0x216>
 800341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341c:	68e0      	ldr	r0, [r4, #12]
 800341e:	4298      	cmp	r0, r3
 8003420:	dabc      	bge.n	800339c <_printf_i+0x16c>
 8003422:	0018      	movs	r0, r3
 8003424:	e7ba      	b.n	800339c <_printf_i+0x16c>
 8003426:	0022      	movs	r2, r4
 8003428:	2301      	movs	r3, #1
 800342a:	9906      	ldr	r1, [sp, #24]
 800342c:	9805      	ldr	r0, [sp, #20]
 800342e:	9e07      	ldr	r6, [sp, #28]
 8003430:	3219      	adds	r2, #25
 8003432:	47b0      	blx	r6
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	d0af      	beq.n	8003398 <_printf_i+0x168>
 8003438:	3501      	adds	r5, #1
 800343a:	68e3      	ldr	r3, [r4, #12]
 800343c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	42ab      	cmp	r3, r5
 8003442:	dcf0      	bgt.n	8003426 <_printf_i+0x1f6>
 8003444:	e7e9      	b.n	800341a <_printf_i+0x1ea>
 8003446:	2500      	movs	r5, #0
 8003448:	e7f7      	b.n	800343a <_printf_i+0x20a>
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	08003761 	.word	0x08003761
 8003450:	08003772 	.word	0x08003772

08003454 <memchr>:
 8003454:	b2c9      	uxtb	r1, r1
 8003456:	1882      	adds	r2, r0, r2
 8003458:	4290      	cmp	r0, r2
 800345a:	d101      	bne.n	8003460 <memchr+0xc>
 800345c:	2000      	movs	r0, #0
 800345e:	4770      	bx	lr
 8003460:	7803      	ldrb	r3, [r0, #0]
 8003462:	428b      	cmp	r3, r1
 8003464:	d0fb      	beq.n	800345e <memchr+0xa>
 8003466:	3001      	adds	r0, #1
 8003468:	e7f6      	b.n	8003458 <memchr+0x4>

0800346a <memcpy>:
 800346a:	2300      	movs	r3, #0
 800346c:	b510      	push	{r4, lr}
 800346e:	429a      	cmp	r2, r3
 8003470:	d100      	bne.n	8003474 <memcpy+0xa>
 8003472:	bd10      	pop	{r4, pc}
 8003474:	5ccc      	ldrb	r4, [r1, r3]
 8003476:	54c4      	strb	r4, [r0, r3]
 8003478:	3301      	adds	r3, #1
 800347a:	e7f8      	b.n	800346e <memcpy+0x4>

0800347c <memmove>:
 800347c:	b510      	push	{r4, lr}
 800347e:	4288      	cmp	r0, r1
 8003480:	d902      	bls.n	8003488 <memmove+0xc>
 8003482:	188b      	adds	r3, r1, r2
 8003484:	4298      	cmp	r0, r3
 8003486:	d303      	bcc.n	8003490 <memmove+0x14>
 8003488:	2300      	movs	r3, #0
 800348a:	e007      	b.n	800349c <memmove+0x20>
 800348c:	5c8b      	ldrb	r3, [r1, r2]
 800348e:	5483      	strb	r3, [r0, r2]
 8003490:	3a01      	subs	r2, #1
 8003492:	d2fb      	bcs.n	800348c <memmove+0x10>
 8003494:	bd10      	pop	{r4, pc}
 8003496:	5ccc      	ldrb	r4, [r1, r3]
 8003498:	54c4      	strb	r4, [r0, r3]
 800349a:	3301      	adds	r3, #1
 800349c:	429a      	cmp	r2, r3
 800349e:	d1fa      	bne.n	8003496 <memmove+0x1a>
 80034a0:	e7f8      	b.n	8003494 <memmove+0x18>
	...

080034a4 <_free_r>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	0005      	movs	r5, r0
 80034a8:	2900      	cmp	r1, #0
 80034aa:	d010      	beq.n	80034ce <_free_r+0x2a>
 80034ac:	1f0c      	subs	r4, r1, #4
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da00      	bge.n	80034b6 <_free_r+0x12>
 80034b4:	18e4      	adds	r4, r4, r3
 80034b6:	0028      	movs	r0, r5
 80034b8:	f000 f8d4 	bl	8003664 <__malloc_lock>
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <_free_r+0x90>)
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <_free_r+0x2c>
 80034c4:	6063      	str	r3, [r4, #4]
 80034c6:	6014      	str	r4, [r2, #0]
 80034c8:	0028      	movs	r0, r5
 80034ca:	f000 f8d3 	bl	8003674 <__malloc_unlock>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	42a3      	cmp	r3, r4
 80034d2:	d908      	bls.n	80034e6 <_free_r+0x42>
 80034d4:	6821      	ldr	r1, [r4, #0]
 80034d6:	1860      	adds	r0, r4, r1
 80034d8:	4283      	cmp	r3, r0
 80034da:	d1f3      	bne.n	80034c4 <_free_r+0x20>
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	1841      	adds	r1, r0, r1
 80034e2:	6021      	str	r1, [r4, #0]
 80034e4:	e7ee      	b.n	80034c4 <_free_r+0x20>
 80034e6:	001a      	movs	r2, r3
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <_free_r+0x4e>
 80034ee:	42a3      	cmp	r3, r4
 80034f0:	d9f9      	bls.n	80034e6 <_free_r+0x42>
 80034f2:	6811      	ldr	r1, [r2, #0]
 80034f4:	1850      	adds	r0, r2, r1
 80034f6:	42a0      	cmp	r0, r4
 80034f8:	d10b      	bne.n	8003512 <_free_r+0x6e>
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	1809      	adds	r1, r1, r0
 80034fe:	1850      	adds	r0, r2, r1
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	4283      	cmp	r3, r0
 8003504:	d1e0      	bne.n	80034c8 <_free_r+0x24>
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	1841      	adds	r1, r0, r1
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	6053      	str	r3, [r2, #4]
 8003510:	e7da      	b.n	80034c8 <_free_r+0x24>
 8003512:	42a0      	cmp	r0, r4
 8003514:	d902      	bls.n	800351c <_free_r+0x78>
 8003516:	230c      	movs	r3, #12
 8003518:	602b      	str	r3, [r5, #0]
 800351a:	e7d5      	b.n	80034c8 <_free_r+0x24>
 800351c:	6821      	ldr	r1, [r4, #0]
 800351e:	1860      	adds	r0, r4, r1
 8003520:	4283      	cmp	r3, r0
 8003522:	d103      	bne.n	800352c <_free_r+0x88>
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	1841      	adds	r1, r0, r1
 800352a:	6021      	str	r1, [r4, #0]
 800352c:	6063      	str	r3, [r4, #4]
 800352e:	6054      	str	r4, [r2, #4]
 8003530:	e7ca      	b.n	80034c8 <_free_r+0x24>
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	20000090 	.word	0x20000090

08003538 <_malloc_r>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	2303      	movs	r3, #3
 800353c:	1ccd      	adds	r5, r1, #3
 800353e:	439d      	bics	r5, r3
 8003540:	3508      	adds	r5, #8
 8003542:	0006      	movs	r6, r0
 8003544:	2d0c      	cmp	r5, #12
 8003546:	d21f      	bcs.n	8003588 <_malloc_r+0x50>
 8003548:	250c      	movs	r5, #12
 800354a:	42a9      	cmp	r1, r5
 800354c:	d81e      	bhi.n	800358c <_malloc_r+0x54>
 800354e:	0030      	movs	r0, r6
 8003550:	f000 f888 	bl	8003664 <__malloc_lock>
 8003554:	4925      	ldr	r1, [pc, #148]	; (80035ec <_malloc_r+0xb4>)
 8003556:	680a      	ldr	r2, [r1, #0]
 8003558:	0014      	movs	r4, r2
 800355a:	2c00      	cmp	r4, #0
 800355c:	d11a      	bne.n	8003594 <_malloc_r+0x5c>
 800355e:	4f24      	ldr	r7, [pc, #144]	; (80035f0 <_malloc_r+0xb8>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <_malloc_r+0x38>
 8003566:	0021      	movs	r1, r4
 8003568:	0030      	movs	r0, r6
 800356a:	f000 f869 	bl	8003640 <_sbrk_r>
 800356e:	6038      	str	r0, [r7, #0]
 8003570:	0029      	movs	r1, r5
 8003572:	0030      	movs	r0, r6
 8003574:	f000 f864 	bl	8003640 <_sbrk_r>
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	d12b      	bne.n	80035d4 <_malloc_r+0x9c>
 800357c:	230c      	movs	r3, #12
 800357e:	0030      	movs	r0, r6
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	f000 f877 	bl	8003674 <__malloc_unlock>
 8003586:	e003      	b.n	8003590 <_malloc_r+0x58>
 8003588:	2d00      	cmp	r5, #0
 800358a:	dade      	bge.n	800354a <_malloc_r+0x12>
 800358c:	230c      	movs	r3, #12
 800358e:	6033      	str	r3, [r6, #0]
 8003590:	2000      	movs	r0, #0
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	1b5b      	subs	r3, r3, r5
 8003598:	d419      	bmi.n	80035ce <_malloc_r+0x96>
 800359a:	2b0b      	cmp	r3, #11
 800359c:	d903      	bls.n	80035a6 <_malloc_r+0x6e>
 800359e:	6023      	str	r3, [r4, #0]
 80035a0:	18e4      	adds	r4, r4, r3
 80035a2:	6025      	str	r5, [r4, #0]
 80035a4:	e003      	b.n	80035ae <_malloc_r+0x76>
 80035a6:	6863      	ldr	r3, [r4, #4]
 80035a8:	42a2      	cmp	r2, r4
 80035aa:	d10e      	bne.n	80035ca <_malloc_r+0x92>
 80035ac:	600b      	str	r3, [r1, #0]
 80035ae:	0030      	movs	r0, r6
 80035b0:	f000 f860 	bl	8003674 <__malloc_unlock>
 80035b4:	0020      	movs	r0, r4
 80035b6:	2207      	movs	r2, #7
 80035b8:	300b      	adds	r0, #11
 80035ba:	1d23      	adds	r3, r4, #4
 80035bc:	4390      	bics	r0, r2
 80035be:	1ac2      	subs	r2, r0, r3
 80035c0:	4298      	cmp	r0, r3
 80035c2:	d0e6      	beq.n	8003592 <_malloc_r+0x5a>
 80035c4:	1a1b      	subs	r3, r3, r0
 80035c6:	50a3      	str	r3, [r4, r2]
 80035c8:	e7e3      	b.n	8003592 <_malloc_r+0x5a>
 80035ca:	6053      	str	r3, [r2, #4]
 80035cc:	e7ef      	b.n	80035ae <_malloc_r+0x76>
 80035ce:	0022      	movs	r2, r4
 80035d0:	6864      	ldr	r4, [r4, #4]
 80035d2:	e7c2      	b.n	800355a <_malloc_r+0x22>
 80035d4:	2303      	movs	r3, #3
 80035d6:	1cc4      	adds	r4, r0, #3
 80035d8:	439c      	bics	r4, r3
 80035da:	42a0      	cmp	r0, r4
 80035dc:	d0e1      	beq.n	80035a2 <_malloc_r+0x6a>
 80035de:	1a21      	subs	r1, r4, r0
 80035e0:	0030      	movs	r0, r6
 80035e2:	f000 f82d 	bl	8003640 <_sbrk_r>
 80035e6:	1c43      	adds	r3, r0, #1
 80035e8:	d1db      	bne.n	80035a2 <_malloc_r+0x6a>
 80035ea:	e7c7      	b.n	800357c <_malloc_r+0x44>
 80035ec:	20000090 	.word	0x20000090
 80035f0:	20000094 	.word	0x20000094

080035f4 <_realloc_r>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	0007      	movs	r7, r0
 80035f8:	000d      	movs	r5, r1
 80035fa:	0016      	movs	r6, r2
 80035fc:	2900      	cmp	r1, #0
 80035fe:	d105      	bne.n	800360c <_realloc_r+0x18>
 8003600:	0011      	movs	r1, r2
 8003602:	f7ff ff99 	bl	8003538 <_malloc_r>
 8003606:	0004      	movs	r4, r0
 8003608:	0020      	movs	r0, r4
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360c:	2a00      	cmp	r2, #0
 800360e:	d103      	bne.n	8003618 <_realloc_r+0x24>
 8003610:	f7ff ff48 	bl	80034a4 <_free_r>
 8003614:	0034      	movs	r4, r6
 8003616:	e7f7      	b.n	8003608 <_realloc_r+0x14>
 8003618:	f000 f834 	bl	8003684 <_malloc_usable_size_r>
 800361c:	002c      	movs	r4, r5
 800361e:	42b0      	cmp	r0, r6
 8003620:	d2f2      	bcs.n	8003608 <_realloc_r+0x14>
 8003622:	0031      	movs	r1, r6
 8003624:	0038      	movs	r0, r7
 8003626:	f7ff ff87 	bl	8003538 <_malloc_r>
 800362a:	1e04      	subs	r4, r0, #0
 800362c:	d0ec      	beq.n	8003608 <_realloc_r+0x14>
 800362e:	0029      	movs	r1, r5
 8003630:	0032      	movs	r2, r6
 8003632:	f7ff ff1a 	bl	800346a <memcpy>
 8003636:	0029      	movs	r1, r5
 8003638:	0038      	movs	r0, r7
 800363a:	f7ff ff33 	bl	80034a4 <_free_r>
 800363e:	e7e3      	b.n	8003608 <_realloc_r+0x14>

08003640 <_sbrk_r>:
 8003640:	2300      	movs	r3, #0
 8003642:	b570      	push	{r4, r5, r6, lr}
 8003644:	4d06      	ldr	r5, [pc, #24]	; (8003660 <_sbrk_r+0x20>)
 8003646:	0004      	movs	r4, r0
 8003648:	0008      	movs	r0, r1
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	f7fd f9b6 	bl	80009bc <_sbrk>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d103      	bne.n	800365c <_sbrk_r+0x1c>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d000      	beq.n	800365c <_sbrk_r+0x1c>
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	20000244 	.word	0x20000244

08003664 <__malloc_lock>:
 8003664:	b510      	push	{r4, lr}
 8003666:	4802      	ldr	r0, [pc, #8]	; (8003670 <__malloc_lock+0xc>)
 8003668:	f000 f814 	bl	8003694 <__retarget_lock_acquire_recursive>
 800366c:	bd10      	pop	{r4, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	2000024c 	.word	0x2000024c

08003674 <__malloc_unlock>:
 8003674:	b510      	push	{r4, lr}
 8003676:	4802      	ldr	r0, [pc, #8]	; (8003680 <__malloc_unlock+0xc>)
 8003678:	f000 f80d 	bl	8003696 <__retarget_lock_release_recursive>
 800367c:	bd10      	pop	{r4, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	2000024c 	.word	0x2000024c

08003684 <_malloc_usable_size_r>:
 8003684:	1f0b      	subs	r3, r1, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1f18      	subs	r0, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	da01      	bge.n	8003692 <_malloc_usable_size_r+0xe>
 800368e:	580b      	ldr	r3, [r1, r0]
 8003690:	18c0      	adds	r0, r0, r3
 8003692:	4770      	bx	lr

08003694 <__retarget_lock_acquire_recursive>:
 8003694:	4770      	bx	lr

08003696 <__retarget_lock_release_recursive>:
 8003696:	4770      	bx	lr

08003698 <_init>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr

080036a4 <_fini>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr
