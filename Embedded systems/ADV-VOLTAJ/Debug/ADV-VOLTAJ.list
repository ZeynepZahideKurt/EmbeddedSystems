
ADV-VOLTAJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800369c  0800369c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  080036b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080036b0  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c97  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001852  00000000  00000000  00029ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010345  00000000  00000000  0002c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ec5  00000000  00000000  0003c6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063565  00000000  00000000  000465b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a9b17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae8  00000000  00000000  000a9b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003550 	.word	0x08003550

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003550 	.word	0x08003550

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 fb80 	bl	80009d4 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 fb7b 	bl	80009d4 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fdiv>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	464f      	mov	r7, r9
 800044c:	4646      	mov	r6, r8
 800044e:	46d6      	mov	lr, sl
 8000450:	0245      	lsls	r5, r0, #9
 8000452:	b5c0      	push	{r6, r7, lr}
 8000454:	0047      	lsls	r7, r0, #1
 8000456:	1c0c      	adds	r4, r1, #0
 8000458:	0a6d      	lsrs	r5, r5, #9
 800045a:	0e3f      	lsrs	r7, r7, #24
 800045c:	0fc6      	lsrs	r6, r0, #31
 800045e:	2f00      	cmp	r7, #0
 8000460:	d066      	beq.n	8000530 <__aeabi_fdiv+0xe8>
 8000462:	2fff      	cmp	r7, #255	; 0xff
 8000464:	d06c      	beq.n	8000540 <__aeabi_fdiv+0xf8>
 8000466:	2300      	movs	r3, #0
 8000468:	00ea      	lsls	r2, r5, #3
 800046a:	2580      	movs	r5, #128	; 0x80
 800046c:	4699      	mov	r9, r3
 800046e:	469a      	mov	sl, r3
 8000470:	04ed      	lsls	r5, r5, #19
 8000472:	4315      	orrs	r5, r2
 8000474:	3f7f      	subs	r7, #127	; 0x7f
 8000476:	0260      	lsls	r0, r4, #9
 8000478:	0061      	lsls	r1, r4, #1
 800047a:	0a43      	lsrs	r3, r0, #9
 800047c:	4698      	mov	r8, r3
 800047e:	0e09      	lsrs	r1, r1, #24
 8000480:	0fe4      	lsrs	r4, r4, #31
 8000482:	2900      	cmp	r1, #0
 8000484:	d048      	beq.n	8000518 <__aeabi_fdiv+0xd0>
 8000486:	29ff      	cmp	r1, #255	; 0xff
 8000488:	d010      	beq.n	80004ac <__aeabi_fdiv+0x64>
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	00d8      	lsls	r0, r3, #3
 800048e:	04d2      	lsls	r2, r2, #19
 8000490:	4302      	orrs	r2, r0
 8000492:	4690      	mov	r8, r2
 8000494:	2000      	movs	r0, #0
 8000496:	397f      	subs	r1, #127	; 0x7f
 8000498:	464a      	mov	r2, r9
 800049a:	0033      	movs	r3, r6
 800049c:	1a7f      	subs	r7, r7, r1
 800049e:	4302      	orrs	r2, r0
 80004a0:	496c      	ldr	r1, [pc, #432]	; (8000654 <__aeabi_fdiv+0x20c>)
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	588a      	ldr	r2, [r1, r2]
 80004a6:	4063      	eors	r3, r4
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4697      	mov	pc, r2
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d16d      	bne.n	800058c <__aeabi_fdiv+0x144>
 80004b0:	2002      	movs	r0, #2
 80004b2:	3fff      	subs	r7, #255	; 0xff
 80004b4:	e033      	b.n	800051e <__aeabi_fdiv+0xd6>
 80004b6:	2300      	movs	r3, #0
 80004b8:	4698      	mov	r8, r3
 80004ba:	0026      	movs	r6, r4
 80004bc:	4645      	mov	r5, r8
 80004be:	4682      	mov	sl, r0
 80004c0:	4653      	mov	r3, sl
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fdiv+0x80>
 80004c6:	e07f      	b.n	80005c8 <__aeabi_fdiv+0x180>
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d100      	bne.n	80004ce <__aeabi_fdiv+0x86>
 80004cc:	e094      	b.n	80005f8 <__aeabi_fdiv+0x1b0>
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d017      	beq.n	8000502 <__aeabi_fdiv+0xba>
 80004d2:	0038      	movs	r0, r7
 80004d4:	307f      	adds	r0, #127	; 0x7f
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd5f      	ble.n	800059a <__aeabi_fdiv+0x152>
 80004da:	076b      	lsls	r3, r5, #29
 80004dc:	d004      	beq.n	80004e8 <__aeabi_fdiv+0xa0>
 80004de:	230f      	movs	r3, #15
 80004e0:	402b      	ands	r3, r5
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fdiv+0xa0>
 80004e6:	3504      	adds	r5, #4
 80004e8:	012b      	lsls	r3, r5, #4
 80004ea:	d503      	bpl.n	80004f4 <__aeabi_fdiv+0xac>
 80004ec:	0038      	movs	r0, r7
 80004ee:	4b5a      	ldr	r3, [pc, #360]	; (8000658 <__aeabi_fdiv+0x210>)
 80004f0:	3080      	adds	r0, #128	; 0x80
 80004f2:	401d      	ands	r5, r3
 80004f4:	28fe      	cmp	r0, #254	; 0xfe
 80004f6:	dc67      	bgt.n	80005c8 <__aeabi_fdiv+0x180>
 80004f8:	01ad      	lsls	r5, r5, #6
 80004fa:	0a6d      	lsrs	r5, r5, #9
 80004fc:	b2c0      	uxtb	r0, r0
 80004fe:	e002      	b.n	8000506 <__aeabi_fdiv+0xbe>
 8000500:	001e      	movs	r6, r3
 8000502:	2000      	movs	r0, #0
 8000504:	2500      	movs	r5, #0
 8000506:	05c0      	lsls	r0, r0, #23
 8000508:	4328      	orrs	r0, r5
 800050a:	07f6      	lsls	r6, r6, #31
 800050c:	4330      	orrs	r0, r6
 800050e:	bce0      	pop	{r5, r6, r7}
 8000510:	46ba      	mov	sl, r7
 8000512:	46b1      	mov	r9, r6
 8000514:	46a8      	mov	r8, r5
 8000516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000518:	2b00      	cmp	r3, #0
 800051a:	d12b      	bne.n	8000574 <__aeabi_fdiv+0x12c>
 800051c:	2001      	movs	r0, #1
 800051e:	464a      	mov	r2, r9
 8000520:	0033      	movs	r3, r6
 8000522:	494e      	ldr	r1, [pc, #312]	; (800065c <__aeabi_fdiv+0x214>)
 8000524:	4302      	orrs	r2, r0
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	588a      	ldr	r2, [r1, r2]
 800052a:	4063      	eors	r3, r4
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4697      	mov	pc, r2
 8000530:	2d00      	cmp	r5, #0
 8000532:	d113      	bne.n	800055c <__aeabi_fdiv+0x114>
 8000534:	2304      	movs	r3, #4
 8000536:	4699      	mov	r9, r3
 8000538:	3b03      	subs	r3, #3
 800053a:	2700      	movs	r7, #0
 800053c:	469a      	mov	sl, r3
 800053e:	e79a      	b.n	8000476 <__aeabi_fdiv+0x2e>
 8000540:	2d00      	cmp	r5, #0
 8000542:	d105      	bne.n	8000550 <__aeabi_fdiv+0x108>
 8000544:	2308      	movs	r3, #8
 8000546:	4699      	mov	r9, r3
 8000548:	3b06      	subs	r3, #6
 800054a:	27ff      	movs	r7, #255	; 0xff
 800054c:	469a      	mov	sl, r3
 800054e:	e792      	b.n	8000476 <__aeabi_fdiv+0x2e>
 8000550:	230c      	movs	r3, #12
 8000552:	4699      	mov	r9, r3
 8000554:	3b09      	subs	r3, #9
 8000556:	27ff      	movs	r7, #255	; 0xff
 8000558:	469a      	mov	sl, r3
 800055a:	e78c      	b.n	8000476 <__aeabi_fdiv+0x2e>
 800055c:	0028      	movs	r0, r5
 800055e:	f000 fa1b 	bl	8000998 <__clzsi2>
 8000562:	2776      	movs	r7, #118	; 0x76
 8000564:	1f43      	subs	r3, r0, #5
 8000566:	409d      	lsls	r5, r3
 8000568:	2300      	movs	r3, #0
 800056a:	427f      	negs	r7, r7
 800056c:	4699      	mov	r9, r3
 800056e:	469a      	mov	sl, r3
 8000570:	1a3f      	subs	r7, r7, r0
 8000572:	e780      	b.n	8000476 <__aeabi_fdiv+0x2e>
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fa0f 	bl	8000998 <__clzsi2>
 800057a:	4642      	mov	r2, r8
 800057c:	1f43      	subs	r3, r0, #5
 800057e:	2176      	movs	r1, #118	; 0x76
 8000580:	409a      	lsls	r2, r3
 8000582:	4249      	negs	r1, r1
 8000584:	1a09      	subs	r1, r1, r0
 8000586:	4690      	mov	r8, r2
 8000588:	2000      	movs	r0, #0
 800058a:	e785      	b.n	8000498 <__aeabi_fdiv+0x50>
 800058c:	21ff      	movs	r1, #255	; 0xff
 800058e:	2003      	movs	r0, #3
 8000590:	e782      	b.n	8000498 <__aeabi_fdiv+0x50>
 8000592:	001e      	movs	r6, r3
 8000594:	20ff      	movs	r0, #255	; 0xff
 8000596:	2500      	movs	r5, #0
 8000598:	e7b5      	b.n	8000506 <__aeabi_fdiv+0xbe>
 800059a:	2301      	movs	r3, #1
 800059c:	1a1b      	subs	r3, r3, r0
 800059e:	2b1b      	cmp	r3, #27
 80005a0:	dcaf      	bgt.n	8000502 <__aeabi_fdiv+0xba>
 80005a2:	379e      	adds	r7, #158	; 0x9e
 80005a4:	0029      	movs	r1, r5
 80005a6:	40bd      	lsls	r5, r7
 80005a8:	40d9      	lsrs	r1, r3
 80005aa:	1e6a      	subs	r2, r5, #1
 80005ac:	4195      	sbcs	r5, r2
 80005ae:	430d      	orrs	r5, r1
 80005b0:	076b      	lsls	r3, r5, #29
 80005b2:	d004      	beq.n	80005be <__aeabi_fdiv+0x176>
 80005b4:	230f      	movs	r3, #15
 80005b6:	402b      	ands	r3, r5
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d000      	beq.n	80005be <__aeabi_fdiv+0x176>
 80005bc:	3504      	adds	r5, #4
 80005be:	016b      	lsls	r3, r5, #5
 80005c0:	d544      	bpl.n	800064c <__aeabi_fdiv+0x204>
 80005c2:	2001      	movs	r0, #1
 80005c4:	2500      	movs	r5, #0
 80005c6:	e79e      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005c8:	20ff      	movs	r0, #255	; 0xff
 80005ca:	2500      	movs	r5, #0
 80005cc:	e79b      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005ce:	2580      	movs	r5, #128	; 0x80
 80005d0:	2600      	movs	r6, #0
 80005d2:	20ff      	movs	r0, #255	; 0xff
 80005d4:	03ed      	lsls	r5, r5, #15
 80005d6:	e796      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005d8:	2300      	movs	r3, #0
 80005da:	4698      	mov	r8, r3
 80005dc:	2080      	movs	r0, #128	; 0x80
 80005de:	03c0      	lsls	r0, r0, #15
 80005e0:	4205      	tst	r5, r0
 80005e2:	d009      	beq.n	80005f8 <__aeabi_fdiv+0x1b0>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4203      	tst	r3, r0
 80005e8:	d106      	bne.n	80005f8 <__aeabi_fdiv+0x1b0>
 80005ea:	4645      	mov	r5, r8
 80005ec:	4305      	orrs	r5, r0
 80005ee:	026d      	lsls	r5, r5, #9
 80005f0:	0026      	movs	r6, r4
 80005f2:	20ff      	movs	r0, #255	; 0xff
 80005f4:	0a6d      	lsrs	r5, r5, #9
 80005f6:	e786      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005f8:	2080      	movs	r0, #128	; 0x80
 80005fa:	03c0      	lsls	r0, r0, #15
 80005fc:	4305      	orrs	r5, r0
 80005fe:	026d      	lsls	r5, r5, #9
 8000600:	20ff      	movs	r0, #255	; 0xff
 8000602:	0a6d      	lsrs	r5, r5, #9
 8000604:	e77f      	b.n	8000506 <__aeabi_fdiv+0xbe>
 8000606:	4641      	mov	r1, r8
 8000608:	016a      	lsls	r2, r5, #5
 800060a:	0148      	lsls	r0, r1, #5
 800060c:	4282      	cmp	r2, r0
 800060e:	d219      	bcs.n	8000644 <__aeabi_fdiv+0x1fc>
 8000610:	211b      	movs	r1, #27
 8000612:	2500      	movs	r5, #0
 8000614:	3f01      	subs	r7, #1
 8000616:	2601      	movs	r6, #1
 8000618:	0014      	movs	r4, r2
 800061a:	006d      	lsls	r5, r5, #1
 800061c:	0052      	lsls	r2, r2, #1
 800061e:	2c00      	cmp	r4, #0
 8000620:	db01      	blt.n	8000626 <__aeabi_fdiv+0x1de>
 8000622:	4290      	cmp	r0, r2
 8000624:	d801      	bhi.n	800062a <__aeabi_fdiv+0x1e2>
 8000626:	1a12      	subs	r2, r2, r0
 8000628:	4335      	orrs	r5, r6
 800062a:	3901      	subs	r1, #1
 800062c:	2900      	cmp	r1, #0
 800062e:	d1f3      	bne.n	8000618 <__aeabi_fdiv+0x1d0>
 8000630:	1e50      	subs	r0, r2, #1
 8000632:	4182      	sbcs	r2, r0
 8000634:	0038      	movs	r0, r7
 8000636:	307f      	adds	r0, #127	; 0x7f
 8000638:	001e      	movs	r6, r3
 800063a:	4315      	orrs	r5, r2
 800063c:	2800      	cmp	r0, #0
 800063e:	dd00      	ble.n	8000642 <__aeabi_fdiv+0x1fa>
 8000640:	e74b      	b.n	80004da <__aeabi_fdiv+0x92>
 8000642:	e7aa      	b.n	800059a <__aeabi_fdiv+0x152>
 8000644:	211a      	movs	r1, #26
 8000646:	2501      	movs	r5, #1
 8000648:	1a12      	subs	r2, r2, r0
 800064a:	e7e4      	b.n	8000616 <__aeabi_fdiv+0x1ce>
 800064c:	01ad      	lsls	r5, r5, #6
 800064e:	2000      	movs	r0, #0
 8000650:	0a6d      	lsrs	r5, r5, #9
 8000652:	e758      	b.n	8000506 <__aeabi_fdiv+0xbe>
 8000654:	08003568 	.word	0x08003568
 8000658:	f7ffffff 	.word	0xf7ffffff
 800065c:	080035a8 	.word	0x080035a8

08000660 <__aeabi_fmul>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	4657      	mov	r7, sl
 8000664:	464e      	mov	r6, r9
 8000666:	4645      	mov	r5, r8
 8000668:	46de      	mov	lr, fp
 800066a:	0244      	lsls	r4, r0, #9
 800066c:	b5e0      	push	{r5, r6, r7, lr}
 800066e:	0045      	lsls	r5, r0, #1
 8000670:	1c0f      	adds	r7, r1, #0
 8000672:	0a64      	lsrs	r4, r4, #9
 8000674:	0e2d      	lsrs	r5, r5, #24
 8000676:	0fc6      	lsrs	r6, r0, #31
 8000678:	2d00      	cmp	r5, #0
 800067a:	d047      	beq.n	800070c <__aeabi_fmul+0xac>
 800067c:	2dff      	cmp	r5, #255	; 0xff
 800067e:	d04d      	beq.n	800071c <__aeabi_fmul+0xbc>
 8000680:	2300      	movs	r3, #0
 8000682:	2080      	movs	r0, #128	; 0x80
 8000684:	469a      	mov	sl, r3
 8000686:	469b      	mov	fp, r3
 8000688:	00e4      	lsls	r4, r4, #3
 800068a:	04c0      	lsls	r0, r0, #19
 800068c:	4304      	orrs	r4, r0
 800068e:	3d7f      	subs	r5, #127	; 0x7f
 8000690:	0278      	lsls	r0, r7, #9
 8000692:	0a43      	lsrs	r3, r0, #9
 8000694:	4699      	mov	r9, r3
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	0ffb      	lsrs	r3, r7, #31
 800069a:	4698      	mov	r8, r3
 800069c:	0e12      	lsrs	r2, r2, #24
 800069e:	464b      	mov	r3, r9
 80006a0:	d044      	beq.n	800072c <__aeabi_fmul+0xcc>
 80006a2:	2aff      	cmp	r2, #255	; 0xff
 80006a4:	d011      	beq.n	80006ca <__aeabi_fmul+0x6a>
 80006a6:	00d8      	lsls	r0, r3, #3
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	04db      	lsls	r3, r3, #19
 80006ac:	4303      	orrs	r3, r0
 80006ae:	4699      	mov	r9, r3
 80006b0:	2000      	movs	r0, #0
 80006b2:	3a7f      	subs	r2, #127	; 0x7f
 80006b4:	18ad      	adds	r5, r5, r2
 80006b6:	4647      	mov	r7, r8
 80006b8:	4653      	mov	r3, sl
 80006ba:	4077      	eors	r7, r6
 80006bc:	1c69      	adds	r1, r5, #1
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	d83f      	bhi.n	8000742 <__aeabi_fmul+0xe2>
 80006c2:	4a72      	ldr	r2, [pc, #456]	; (800088c <__aeabi_fmul+0x22c>)
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	58d3      	ldr	r3, [r2, r3]
 80006c8:	469f      	mov	pc, r3
 80006ca:	35ff      	adds	r5, #255	; 0xff
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fmul+0x72>
 80006d0:	e079      	b.n	80007c6 <__aeabi_fmul+0x166>
 80006d2:	4652      	mov	r2, sl
 80006d4:	2302      	movs	r3, #2
 80006d6:	431a      	orrs	r2, r3
 80006d8:	4692      	mov	sl, r2
 80006da:	2002      	movs	r0, #2
 80006dc:	e7eb      	b.n	80006b6 <__aeabi_fmul+0x56>
 80006de:	4647      	mov	r7, r8
 80006e0:	464c      	mov	r4, r9
 80006e2:	4683      	mov	fp, r0
 80006e4:	465b      	mov	r3, fp
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d028      	beq.n	800073c <__aeabi_fmul+0xdc>
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fmul+0x90>
 80006ee:	e0c6      	b.n	800087e <__aeabi_fmul+0x21e>
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d14f      	bne.n	8000794 <__aeabi_fmul+0x134>
 80006f4:	2000      	movs	r0, #0
 80006f6:	2400      	movs	r4, #0
 80006f8:	05c0      	lsls	r0, r0, #23
 80006fa:	07ff      	lsls	r7, r7, #31
 80006fc:	4320      	orrs	r0, r4
 80006fe:	4338      	orrs	r0, r7
 8000700:	bcf0      	pop	{r4, r5, r6, r7}
 8000702:	46bb      	mov	fp, r7
 8000704:	46b2      	mov	sl, r6
 8000706:	46a9      	mov	r9, r5
 8000708:	46a0      	mov	r8, r4
 800070a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800070c:	2c00      	cmp	r4, #0
 800070e:	d171      	bne.n	80007f4 <__aeabi_fmul+0x194>
 8000710:	2304      	movs	r3, #4
 8000712:	469a      	mov	sl, r3
 8000714:	3b03      	subs	r3, #3
 8000716:	2500      	movs	r5, #0
 8000718:	469b      	mov	fp, r3
 800071a:	e7b9      	b.n	8000690 <__aeabi_fmul+0x30>
 800071c:	2c00      	cmp	r4, #0
 800071e:	d163      	bne.n	80007e8 <__aeabi_fmul+0x188>
 8000720:	2308      	movs	r3, #8
 8000722:	469a      	mov	sl, r3
 8000724:	3b06      	subs	r3, #6
 8000726:	25ff      	movs	r5, #255	; 0xff
 8000728:	469b      	mov	fp, r3
 800072a:	e7b1      	b.n	8000690 <__aeabi_fmul+0x30>
 800072c:	2b00      	cmp	r3, #0
 800072e:	d150      	bne.n	80007d2 <__aeabi_fmul+0x172>
 8000730:	4652      	mov	r2, sl
 8000732:	3301      	adds	r3, #1
 8000734:	431a      	orrs	r2, r3
 8000736:	4692      	mov	sl, r2
 8000738:	2001      	movs	r0, #1
 800073a:	e7bc      	b.n	80006b6 <__aeabi_fmul+0x56>
 800073c:	20ff      	movs	r0, #255	; 0xff
 800073e:	2400      	movs	r4, #0
 8000740:	e7da      	b.n	80006f8 <__aeabi_fmul+0x98>
 8000742:	4648      	mov	r0, r9
 8000744:	0c26      	lsrs	r6, r4, #16
 8000746:	0424      	lsls	r4, r4, #16
 8000748:	0c22      	lsrs	r2, r4, #16
 800074a:	0404      	lsls	r4, r0, #16
 800074c:	0c24      	lsrs	r4, r4, #16
 800074e:	464b      	mov	r3, r9
 8000750:	0020      	movs	r0, r4
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	4350      	muls	r0, r2
 8000756:	4374      	muls	r4, r6
 8000758:	435a      	muls	r2, r3
 800075a:	435e      	muls	r6, r3
 800075c:	1912      	adds	r2, r2, r4
 800075e:	0c03      	lsrs	r3, r0, #16
 8000760:	189b      	adds	r3, r3, r2
 8000762:	429c      	cmp	r4, r3
 8000764:	d903      	bls.n	800076e <__aeabi_fmul+0x10e>
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	0252      	lsls	r2, r2, #9
 800076a:	4694      	mov	ip, r2
 800076c:	4466      	add	r6, ip
 800076e:	0400      	lsls	r0, r0, #16
 8000770:	041a      	lsls	r2, r3, #16
 8000772:	0c00      	lsrs	r0, r0, #16
 8000774:	1812      	adds	r2, r2, r0
 8000776:	0194      	lsls	r4, r2, #6
 8000778:	1e60      	subs	r0, r4, #1
 800077a:	4184      	sbcs	r4, r0
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	0e92      	lsrs	r2, r2, #26
 8000780:	199b      	adds	r3, r3, r6
 8000782:	4314      	orrs	r4, r2
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	431c      	orrs	r4, r3
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	d572      	bpl.n	8000872 <__aeabi_fmul+0x212>
 800078c:	2001      	movs	r0, #1
 800078e:	0863      	lsrs	r3, r4, #1
 8000790:	4004      	ands	r4, r0
 8000792:	431c      	orrs	r4, r3
 8000794:	0008      	movs	r0, r1
 8000796:	307f      	adds	r0, #127	; 0x7f
 8000798:	2800      	cmp	r0, #0
 800079a:	dd3c      	ble.n	8000816 <__aeabi_fmul+0x1b6>
 800079c:	0763      	lsls	r3, r4, #29
 800079e:	d004      	beq.n	80007aa <__aeabi_fmul+0x14a>
 80007a0:	230f      	movs	r3, #15
 80007a2:	4023      	ands	r3, r4
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d000      	beq.n	80007aa <__aeabi_fmul+0x14a>
 80007a8:	3404      	adds	r4, #4
 80007aa:	0123      	lsls	r3, r4, #4
 80007ac:	d503      	bpl.n	80007b6 <__aeabi_fmul+0x156>
 80007ae:	3180      	adds	r1, #128	; 0x80
 80007b0:	0008      	movs	r0, r1
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <__aeabi_fmul+0x230>)
 80007b4:	401c      	ands	r4, r3
 80007b6:	28fe      	cmp	r0, #254	; 0xfe
 80007b8:	dcc0      	bgt.n	800073c <__aeabi_fmul+0xdc>
 80007ba:	01a4      	lsls	r4, r4, #6
 80007bc:	0a64      	lsrs	r4, r4, #9
 80007be:	b2c0      	uxtb	r0, r0
 80007c0:	e79a      	b.n	80006f8 <__aeabi_fmul+0x98>
 80007c2:	0037      	movs	r7, r6
 80007c4:	e78e      	b.n	80006e4 <__aeabi_fmul+0x84>
 80007c6:	4652      	mov	r2, sl
 80007c8:	2303      	movs	r3, #3
 80007ca:	431a      	orrs	r2, r3
 80007cc:	4692      	mov	sl, r2
 80007ce:	2003      	movs	r0, #3
 80007d0:	e771      	b.n	80006b6 <__aeabi_fmul+0x56>
 80007d2:	4648      	mov	r0, r9
 80007d4:	f000 f8e0 	bl	8000998 <__clzsi2>
 80007d8:	464a      	mov	r2, r9
 80007da:	1f43      	subs	r3, r0, #5
 80007dc:	409a      	lsls	r2, r3
 80007de:	1a2d      	subs	r5, r5, r0
 80007e0:	4691      	mov	r9, r2
 80007e2:	2000      	movs	r0, #0
 80007e4:	3d76      	subs	r5, #118	; 0x76
 80007e6:	e766      	b.n	80006b6 <__aeabi_fmul+0x56>
 80007e8:	230c      	movs	r3, #12
 80007ea:	469a      	mov	sl, r3
 80007ec:	3b09      	subs	r3, #9
 80007ee:	25ff      	movs	r5, #255	; 0xff
 80007f0:	469b      	mov	fp, r3
 80007f2:	e74d      	b.n	8000690 <__aeabi_fmul+0x30>
 80007f4:	0020      	movs	r0, r4
 80007f6:	f000 f8cf 	bl	8000998 <__clzsi2>
 80007fa:	2576      	movs	r5, #118	; 0x76
 80007fc:	1f43      	subs	r3, r0, #5
 80007fe:	409c      	lsls	r4, r3
 8000800:	2300      	movs	r3, #0
 8000802:	426d      	negs	r5, r5
 8000804:	469a      	mov	sl, r3
 8000806:	469b      	mov	fp, r3
 8000808:	1a2d      	subs	r5, r5, r0
 800080a:	e741      	b.n	8000690 <__aeabi_fmul+0x30>
 800080c:	2480      	movs	r4, #128	; 0x80
 800080e:	2700      	movs	r7, #0
 8000810:	20ff      	movs	r0, #255	; 0xff
 8000812:	03e4      	lsls	r4, r4, #15
 8000814:	e770      	b.n	80006f8 <__aeabi_fmul+0x98>
 8000816:	2301      	movs	r3, #1
 8000818:	1a1b      	subs	r3, r3, r0
 800081a:	2b1b      	cmp	r3, #27
 800081c:	dd00      	ble.n	8000820 <__aeabi_fmul+0x1c0>
 800081e:	e769      	b.n	80006f4 <__aeabi_fmul+0x94>
 8000820:	319e      	adds	r1, #158	; 0x9e
 8000822:	0020      	movs	r0, r4
 8000824:	408c      	lsls	r4, r1
 8000826:	40d8      	lsrs	r0, r3
 8000828:	1e63      	subs	r3, r4, #1
 800082a:	419c      	sbcs	r4, r3
 800082c:	4304      	orrs	r4, r0
 800082e:	0763      	lsls	r3, r4, #29
 8000830:	d004      	beq.n	800083c <__aeabi_fmul+0x1dc>
 8000832:	230f      	movs	r3, #15
 8000834:	4023      	ands	r3, r4
 8000836:	2b04      	cmp	r3, #4
 8000838:	d000      	beq.n	800083c <__aeabi_fmul+0x1dc>
 800083a:	3404      	adds	r4, #4
 800083c:	0163      	lsls	r3, r4, #5
 800083e:	d51a      	bpl.n	8000876 <__aeabi_fmul+0x216>
 8000840:	2001      	movs	r0, #1
 8000842:	2400      	movs	r4, #0
 8000844:	e758      	b.n	80006f8 <__aeabi_fmul+0x98>
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	03c0      	lsls	r0, r0, #15
 800084a:	4204      	tst	r4, r0
 800084c:	d009      	beq.n	8000862 <__aeabi_fmul+0x202>
 800084e:	464b      	mov	r3, r9
 8000850:	4203      	tst	r3, r0
 8000852:	d106      	bne.n	8000862 <__aeabi_fmul+0x202>
 8000854:	464c      	mov	r4, r9
 8000856:	4304      	orrs	r4, r0
 8000858:	0264      	lsls	r4, r4, #9
 800085a:	4647      	mov	r7, r8
 800085c:	20ff      	movs	r0, #255	; 0xff
 800085e:	0a64      	lsrs	r4, r4, #9
 8000860:	e74a      	b.n	80006f8 <__aeabi_fmul+0x98>
 8000862:	2080      	movs	r0, #128	; 0x80
 8000864:	03c0      	lsls	r0, r0, #15
 8000866:	4304      	orrs	r4, r0
 8000868:	0264      	lsls	r4, r4, #9
 800086a:	0037      	movs	r7, r6
 800086c:	20ff      	movs	r0, #255	; 0xff
 800086e:	0a64      	lsrs	r4, r4, #9
 8000870:	e742      	b.n	80006f8 <__aeabi_fmul+0x98>
 8000872:	0029      	movs	r1, r5
 8000874:	e78e      	b.n	8000794 <__aeabi_fmul+0x134>
 8000876:	01a4      	lsls	r4, r4, #6
 8000878:	2000      	movs	r0, #0
 800087a:	0a64      	lsrs	r4, r4, #9
 800087c:	e73c      	b.n	80006f8 <__aeabi_fmul+0x98>
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	03c0      	lsls	r0, r0, #15
 8000882:	4304      	orrs	r4, r0
 8000884:	0264      	lsls	r4, r4, #9
 8000886:	20ff      	movs	r0, #255	; 0xff
 8000888:	0a64      	lsrs	r4, r4, #9
 800088a:	e735      	b.n	80006f8 <__aeabi_fmul+0x98>
 800088c:	080035e8 	.word	0x080035e8
 8000890:	f7ffffff 	.word	0xf7ffffff

08000894 <__aeabi_i2f>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	2800      	cmp	r0, #0
 8000898:	d013      	beq.n	80008c2 <__aeabi_i2f+0x2e>
 800089a:	17c3      	asrs	r3, r0, #31
 800089c:	18c5      	adds	r5, r0, r3
 800089e:	405d      	eors	r5, r3
 80008a0:	0fc4      	lsrs	r4, r0, #31
 80008a2:	0028      	movs	r0, r5
 80008a4:	f000 f878 	bl	8000998 <__clzsi2>
 80008a8:	239e      	movs	r3, #158	; 0x9e
 80008aa:	0001      	movs	r1, r0
 80008ac:	1a1b      	subs	r3, r3, r0
 80008ae:	2b96      	cmp	r3, #150	; 0x96
 80008b0:	dc0f      	bgt.n	80008d2 <__aeabi_i2f+0x3e>
 80008b2:	2808      	cmp	r0, #8
 80008b4:	dd01      	ble.n	80008ba <__aeabi_i2f+0x26>
 80008b6:	3908      	subs	r1, #8
 80008b8:	408d      	lsls	r5, r1
 80008ba:	026d      	lsls	r5, r5, #9
 80008bc:	0a6d      	lsrs	r5, r5, #9
 80008be:	b2d8      	uxtb	r0, r3
 80008c0:	e002      	b.n	80008c8 <__aeabi_i2f+0x34>
 80008c2:	2400      	movs	r4, #0
 80008c4:	2000      	movs	r0, #0
 80008c6:	2500      	movs	r5, #0
 80008c8:	05c0      	lsls	r0, r0, #23
 80008ca:	4328      	orrs	r0, r5
 80008cc:	07e4      	lsls	r4, r4, #31
 80008ce:	4320      	orrs	r0, r4
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	2b99      	cmp	r3, #153	; 0x99
 80008d4:	dd0b      	ble.n	80008ee <__aeabi_i2f+0x5a>
 80008d6:	2205      	movs	r2, #5
 80008d8:	002e      	movs	r6, r5
 80008da:	1a12      	subs	r2, r2, r0
 80008dc:	40d6      	lsrs	r6, r2
 80008de:	0002      	movs	r2, r0
 80008e0:	321b      	adds	r2, #27
 80008e2:	4095      	lsls	r5, r2
 80008e4:	0028      	movs	r0, r5
 80008e6:	1e45      	subs	r5, r0, #1
 80008e8:	41a8      	sbcs	r0, r5
 80008ea:	0035      	movs	r5, r6
 80008ec:	4305      	orrs	r5, r0
 80008ee:	2905      	cmp	r1, #5
 80008f0:	dd01      	ble.n	80008f6 <__aeabi_i2f+0x62>
 80008f2:	1f4a      	subs	r2, r1, #5
 80008f4:	4095      	lsls	r5, r2
 80008f6:	002a      	movs	r2, r5
 80008f8:	4e08      	ldr	r6, [pc, #32]	; (800091c <__aeabi_i2f+0x88>)
 80008fa:	4032      	ands	r2, r6
 80008fc:	0768      	lsls	r0, r5, #29
 80008fe:	d009      	beq.n	8000914 <__aeabi_i2f+0x80>
 8000900:	200f      	movs	r0, #15
 8000902:	4028      	ands	r0, r5
 8000904:	2804      	cmp	r0, #4
 8000906:	d005      	beq.n	8000914 <__aeabi_i2f+0x80>
 8000908:	3204      	adds	r2, #4
 800090a:	0150      	lsls	r0, r2, #5
 800090c:	d502      	bpl.n	8000914 <__aeabi_i2f+0x80>
 800090e:	239f      	movs	r3, #159	; 0x9f
 8000910:	4032      	ands	r2, r6
 8000912:	1a5b      	subs	r3, r3, r1
 8000914:	0192      	lsls	r2, r2, #6
 8000916:	0a55      	lsrs	r5, r2, #9
 8000918:	b2d8      	uxtb	r0, r3
 800091a:	e7d5      	b.n	80008c8 <__aeabi_i2f+0x34>
 800091c:	fbffffff 	.word	0xfbffffff

08000920 <__aeabi_ui2f>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	1e05      	subs	r5, r0, #0
 8000924:	d00e      	beq.n	8000944 <__aeabi_ui2f+0x24>
 8000926:	f000 f837 	bl	8000998 <__clzsi2>
 800092a:	239e      	movs	r3, #158	; 0x9e
 800092c:	0004      	movs	r4, r0
 800092e:	1a1b      	subs	r3, r3, r0
 8000930:	2b96      	cmp	r3, #150	; 0x96
 8000932:	dc0c      	bgt.n	800094e <__aeabi_ui2f+0x2e>
 8000934:	2808      	cmp	r0, #8
 8000936:	dd01      	ble.n	800093c <__aeabi_ui2f+0x1c>
 8000938:	3c08      	subs	r4, #8
 800093a:	40a5      	lsls	r5, r4
 800093c:	026d      	lsls	r5, r5, #9
 800093e:	0a6d      	lsrs	r5, r5, #9
 8000940:	b2d8      	uxtb	r0, r3
 8000942:	e001      	b.n	8000948 <__aeabi_ui2f+0x28>
 8000944:	2000      	movs	r0, #0
 8000946:	2500      	movs	r5, #0
 8000948:	05c0      	lsls	r0, r0, #23
 800094a:	4328      	orrs	r0, r5
 800094c:	bd70      	pop	{r4, r5, r6, pc}
 800094e:	2b99      	cmp	r3, #153	; 0x99
 8000950:	dd09      	ble.n	8000966 <__aeabi_ui2f+0x46>
 8000952:	0002      	movs	r2, r0
 8000954:	0029      	movs	r1, r5
 8000956:	321b      	adds	r2, #27
 8000958:	4091      	lsls	r1, r2
 800095a:	1e4a      	subs	r2, r1, #1
 800095c:	4191      	sbcs	r1, r2
 800095e:	2205      	movs	r2, #5
 8000960:	1a12      	subs	r2, r2, r0
 8000962:	40d5      	lsrs	r5, r2
 8000964:	430d      	orrs	r5, r1
 8000966:	2c05      	cmp	r4, #5
 8000968:	dd01      	ble.n	800096e <__aeabi_ui2f+0x4e>
 800096a:	1f62      	subs	r2, r4, #5
 800096c:	4095      	lsls	r5, r2
 800096e:	0029      	movs	r1, r5
 8000970:	4e08      	ldr	r6, [pc, #32]	; (8000994 <__aeabi_ui2f+0x74>)
 8000972:	4031      	ands	r1, r6
 8000974:	076a      	lsls	r2, r5, #29
 8000976:	d009      	beq.n	800098c <__aeabi_ui2f+0x6c>
 8000978:	200f      	movs	r0, #15
 800097a:	4028      	ands	r0, r5
 800097c:	2804      	cmp	r0, #4
 800097e:	d005      	beq.n	800098c <__aeabi_ui2f+0x6c>
 8000980:	3104      	adds	r1, #4
 8000982:	014a      	lsls	r2, r1, #5
 8000984:	d502      	bpl.n	800098c <__aeabi_ui2f+0x6c>
 8000986:	239f      	movs	r3, #159	; 0x9f
 8000988:	4031      	ands	r1, r6
 800098a:	1b1b      	subs	r3, r3, r4
 800098c:	0189      	lsls	r1, r1, #6
 800098e:	0a4d      	lsrs	r5, r1, #9
 8000990:	b2d8      	uxtb	r0, r3
 8000992:	e7d9      	b.n	8000948 <__aeabi_ui2f+0x28>
 8000994:	fbffffff 	.word	0xfbffffff

08000998 <__clzsi2>:
 8000998:	211c      	movs	r1, #28
 800099a:	2301      	movs	r3, #1
 800099c:	041b      	lsls	r3, r3, #16
 800099e:	4298      	cmp	r0, r3
 80009a0:	d301      	bcc.n	80009a6 <__clzsi2+0xe>
 80009a2:	0c00      	lsrs	r0, r0, #16
 80009a4:	3910      	subs	r1, #16
 80009a6:	0a1b      	lsrs	r3, r3, #8
 80009a8:	4298      	cmp	r0, r3
 80009aa:	d301      	bcc.n	80009b0 <__clzsi2+0x18>
 80009ac:	0a00      	lsrs	r0, r0, #8
 80009ae:	3908      	subs	r1, #8
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d301      	bcc.n	80009ba <__clzsi2+0x22>
 80009b6:	0900      	lsrs	r0, r0, #4
 80009b8:	3904      	subs	r1, #4
 80009ba:	a202      	add	r2, pc, #8	; (adr r2, 80009c4 <__clzsi2+0x2c>)
 80009bc:	5c10      	ldrb	r0, [r2, r0]
 80009be:	1840      	adds	r0, r0, r1
 80009c0:	4770      	bx	lr
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	02020304 	.word	0x02020304
 80009c8:	01010101 	.word	0x01010101
	...

080009d4 <__clzdi2>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	2900      	cmp	r1, #0
 80009d8:	d103      	bne.n	80009e2 <__clzdi2+0xe>
 80009da:	f7ff ffdd 	bl	8000998 <__clzsi2>
 80009de:	3020      	adds	r0, #32
 80009e0:	e002      	b.n	80009e8 <__clzdi2+0x14>
 80009e2:	1c08      	adds	r0, r1, #0
 80009e4:	f7ff ffd8 	bl	8000998 <__clzsi2>
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 faa3 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f83d 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f000 f93b 	bl	8000c74 <MX_GPIO_Init>
  MX_ADC_Init();
 80009fe:	f000 f8a5 	bl	8000b4c <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000a02:	f000 f909 	bl	8000c18 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <main+0x7c>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 ff5a 	bl	80018c4 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc);
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <main+0x7c>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fc76 	bl	8001304 <HAL_ADC_Start>

	  	HAL_ADC_PollForConversion(&hadc, 100);
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <main+0x7c>)
 8000a1a:	2164      	movs	r1, #100	; 0x64
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fd05 	bl	800142c <HAL_ADC_PollForConversion>
	  	uint16_t VREFINTADC = HAL_ADC_GetValue(&hadc);
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <main+0x7c>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fd9d 	bl	8001564 <HAL_ADC_GetValue>
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dbb      	adds	r3, r7, #6
 8000a2e:	801a      	strh	r2, [r3, #0]
	  	HAL_ADC_Stop(&hadc);
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <main+0x7c>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fcba 	bl	80013ac <HAL_ADC_Stop>
	  	float VDD = 3000.0 * (*VREFINT_CAL / (float) VREFINTADC);
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <main+0x80>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff ff29 	bl	8000894 <__aeabi_i2f>
 8000a42:	1c04      	adds	r4, r0, #0
 8000a44:	1dbb      	adds	r3, r7, #6
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff69 	bl	8000920 <__aeabi_ui2f>
 8000a4e:	1c03      	adds	r3, r0, #0
 8000a50:	1c19      	adds	r1, r3, #0
 8000a52:	1c20      	adds	r0, r4, #0
 8000a54:	f7ff fcf8 	bl	8000448 <__aeabi_fdiv>
 8000a58:	1c03      	adds	r3, r0, #0
 8000a5a:	4905      	ldr	r1, [pc, #20]	; (8000a70 <main+0x84>)
 8000a5c:	1c18      	adds	r0, r3, #0
 8000a5e:	f7ff fdff 	bl	8000660 <__aeabi_fmul>
 8000a62:	1c03      	adds	r3, r0, #0
 8000a64:	603b      	str	r3, [r7, #0]
  {
 8000a66:	e7d3      	b.n	8000a10 <main+0x24>
 8000a68:	200000c4 	.word	0x200000c4
 8000a6c:	1ff80078 	.word	0x1ff80078
 8000a70:	453b8000 	.word	0x453b8000

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b099      	sub	sp, #100	; 0x64
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	242c      	movs	r4, #44	; 0x2c
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2334      	movs	r3, #52	; 0x34
 8000a82:	001a      	movs	r2, r3
 8000a84:	2100      	movs	r1, #0
 8000a86:	f002 fd5b 	bl	8003540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2314      	movs	r3, #20
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f002 fd53 	bl	8003540 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2318      	movs	r3, #24
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f002 fd4c 	bl	8003540 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <SystemClock_Config+0xd0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <SystemClock_Config+0xd4>)
 8000aae:	401a      	ands	r2, r3
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <SystemClock_Config+0xd0>)
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0109      	lsls	r1, r1, #4
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aba:	0021      	movs	r1, r4
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2210      	movs	r2, #16
 8000ac0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	22a0      	movs	r2, #160	; 0xa0
 8000ad2:	0212      	lsls	r2, r2, #8
 8000ad4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f9ce 	bl	8001e80 <HAL_RCC_OscConfig>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ae8:	f000 f930 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	2118      	movs	r1, #24
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	220f      	movs	r2, #15
 8000af2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 fd31 	bl	8002578 <HAL_RCC_ClockConfig>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b1a:	f000 f917 	bl	8000d4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2204      	movs	r2, #4
 8000b22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 ff47 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b36:	f000 f909 	bl	8000d4c <Error_Handler>
  }
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b019      	add	sp, #100	; 0x64
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40007000 	.word	0x40007000
 8000b48:	ffffe7ff 	.word	0xffffe7ff

08000b4c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b52:	003b      	movs	r3, r7
 8000b54:	0018      	movs	r0, r3
 8000b56:	2308      	movs	r3, #8
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f002 fcf0 	bl	8003540 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b62:	4a2b      	ldr	r2, [pc, #172]	; (8000c10 <MX_ADC_Init+0xc4>)
 8000b64:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b6e:	22c0      	movs	r2, #192	; 0xc0
 8000b70:	0612      	lsls	r2, r2, #24
 8000b72:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b8e:	2220      	movs	r2, #32
 8000b90:	2100      	movs	r1, #0
 8000b92:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b96:	2221      	movs	r2, #33	; 0x21
 8000b98:	2100      	movs	r1, #0
 8000b9a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000ba4:	22c2      	movs	r2, #194	; 0xc2
 8000ba6:	32ff      	adds	r2, #255	; 0xff
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bac:	222c      	movs	r2, #44	; 0x2c
 8000bae:	2100      	movs	r1, #0
 8000bb0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fa22 	bl	800101c <HAL_ADC_Init>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000bdc:	f000 f8b6 	bl	8000d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000be0:	003b      	movs	r3, r7
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <MX_ADC_Init+0xc8>)
 8000be4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000be6:	003b      	movs	r3, r7
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	0152      	lsls	r2, r2, #5
 8000bec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bee:	003a      	movs	r2, r7
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_ADC_Init+0xc0>)
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fcc1 	bl	800157c <HAL_ADC_ConfigChannel>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000bfe:	f000 f8a5 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	200000c4 	.word	0x200000c4
 8000c10:	40012400 	.word	0x40012400
 8000c14:	44020000 	.word	0x44020000

08000c18 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <MX_LPUART1_UART_Init+0x58>)
 8000c20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c24:	22e1      	movs	r2, #225	; 0xe1
 8000c26:	0252      	lsls	r2, r2, #9
 8000c28:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <MX_LPUART1_UART_Init+0x54>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 ffd8 	bl	8002c0c <HAL_UART_Init>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f000 f874 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000028 	.word	0x20000028
 8000c70:	40004800 	.word	0x40004800

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b08b      	sub	sp, #44	; 0x2c
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	2414      	movs	r4, #20
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2314      	movs	r3, #20
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f002 fc5b 	bl	8003540 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000c90:	2104      	movs	r1, #4
 8000c92:	430a      	orrs	r2, r1
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	430a      	orrs	r2, r1
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cd8:	2102      	movs	r1, #2
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cea:	23a0      	movs	r3, #160	; 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f001 f8a6 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2201      	movs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	193a      	adds	r2, r7, r4
 8000d12:	23a0      	movs	r3, #160	; 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 ff25 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2203      	movs	r2, #3
 8000d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <MX_GPIO_Init+0xd4>)
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	f000 ff16 	bl	8001b68 <HAL_GPIO_Init>

}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b00b      	add	sp, #44	; 0x2c
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	40021000 	.word	0x40021000
 8000d48:	50000400 	.word	0x50000400

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_MspInit+0x24>)
 8000d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x24>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	430a      	orrs	r2, r1
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <HAL_MspInit+0x24>)
 8000d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_MspInit+0x24>)
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	0549      	lsls	r1, r1, #21
 8000d72:	430a      	orrs	r2, r1
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_ADC_MspInit+0x28>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_ADC_MspInit+0x2c>)
 8000d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_ADC_MspInit+0x2c>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0089      	lsls	r1, r1, #2
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40012400 	.word	0x40012400
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b08b      	sub	sp, #44	; 0x2c
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	2414      	movs	r4, #20
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2314      	movs	r3, #20
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f002 fbbc 	bl	8003540 <memset>
  if(huart->Instance==LPUART1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <HAL_UART_MspInit+0xc0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d14a      	bne.n	8000e68 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd6:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	02c9      	lsls	r1, r1, #11
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000de6:	2104      	movs	r1, #4
 8000de8:	430a      	orrs	r2, r1
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	2204      	movs	r2, #4
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000dfe:	2102      	movs	r1, #2
 8000e00:	430a      	orrs	r2, r1
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	2202      	movs	r2, #2
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2202      	movs	r2, #2
 8000e1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2203      	movs	r2, #3
 8000e26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0xc8>)
 8000e32:	0019      	movs	r1, r3
 8000e34:	0010      	movs	r0, r2
 8000e36:	f000 fe97 	bl	8001b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2202      	movs	r2, #2
 8000e48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2203      	movs	r2, #3
 8000e54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2206      	movs	r2, #6
 8000e5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_UART_MspInit+0xcc>)
 8000e60:	0019      	movs	r1, r3
 8000e62:	0010      	movs	r0, r2
 8000e64:	f000 fe80 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b00b      	add	sp, #44	; 0x2c
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	40004800 	.word	0x40004800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	50000800 	.word	0x50000800
 8000e7c:	50000400 	.word	0x50000400

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f89e 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000eba:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <LoopForever+0x6>)
    LDR R1, [R0]
 8000ebe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ec0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ec2:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <LoopForever+0xa>)
    CMP R1, R2
 8000ec4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ec6:	d105      	bne.n	8000ed4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000eca:	4913      	ldr	r1, [pc, #76]	; (8000f18 <LoopForever+0x12>)
    STR R1, [R0]
 8000ecc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ece:	4813      	ldr	r0, [pc, #76]	; (8000f1c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ed0:	4913      	ldr	r1, [pc, #76]	; (8000f20 <LoopForever+0x1a>)
    STR R1, [R0]
 8000ed2:	6001      	str	r1, [r0, #0]

08000ed4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ed6:	4914      	ldr	r1, [pc, #80]	; (8000f28 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <LoopForever+0x26>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000eec:	4c11      	ldr	r4, [pc, #68]	; (8000f34 <LoopForever+0x2e>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000efa:	f7ff ffd8 	bl	8000eae <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f002 fafb 	bl	80034f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fd73 	bl	80009ec <main>

08000f06 <LoopForever>:

LoopForever:
    b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
   ldr   r0, =_estack
 8000f08:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000f0c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f10:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000f14:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000f18:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f1c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f20:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f2c:	080036a4 	.word	0x080036a4
  ldr r2, =_sbss
 8000f30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f34:	20000124 	.word	0x20000124

08000f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_IRQHandler>
	...

08000f3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x3c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Init+0x3c>)
 8000f4e:	2140      	movs	r1, #64	; 0x40
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f811 	bl	8000f7c <HAL_InitTick>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e001      	b.n	8000f6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f66:	f7ff fef7 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000f86:	681c      	ldr	r4, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	23fa      	movs	r3, #250	; 0xfa
 8000f90:	0098      	lsls	r0, r3, #2
 8000f92:	f7ff f8b9 	bl	8000108 <__udivsi3>
 8000f96:	0003      	movs	r3, r0
 8000f98:	0019      	movs	r1, r3
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	f7ff f8b4 	bl	8000108 <__udivsi3>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fdd3 	bl	8001b4e <HAL_SYSTICK_Config>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e00f      	b.n	8000fd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d80b      	bhi.n	8000fce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fdb0 	bl	8001b24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_InitTick+0x64>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x1c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	001a      	movs	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x20>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	18d2      	adds	r2, r2, r3
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_IncTick+0x20>)
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	20000008 	.word	0x20000008
 8001004:	20000120 	.word	0x20000120

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_GetTick+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e159      	b.n	80012e2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10a      	bne.n	800104c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2250      	movs	r2, #80	; 0x50
 8001040:	2100      	movs	r1, #0
 8001042:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fe9a 	bl	8000d80 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	2210      	movs	r2, #16
 8001052:	4013      	ands	r3, r2
 8001054:	2b10      	cmp	r3, #16
 8001056:	d005      	beq.n	8001064 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001062:	d00b      	beq.n	800107c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001068:	2210      	movs	r2, #16
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2250      	movs	r2, #80	; 0x50
 8001074:	2100      	movs	r1, #0
 8001076:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e132      	b.n	80012e2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	4a9a      	ldr	r2, [pc, #616]	; (80012ec <HAL_ADC_Init+0x2d0>)
 8001082:	4013      	ands	r3, r2
 8001084:	2202      	movs	r2, #2
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2203      	movs	r2, #3
 8001094:	4013      	ands	r3, r2
 8001096:	2b01      	cmp	r3, #1
 8001098:	d108      	bne.n	80010ac <HAL_ADC_Init+0x90>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_ADC_Init+0x90>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_ADC_Init+0x92>
 80010ac:	2300      	movs	r3, #0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d149      	bne.n	8001146 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	23c0      	movs	r3, #192	; 0xc0
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d00b      	beq.n	80010d6 <HAL_ADC_Init+0xba>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d005      	beq.n	80010d6 <HAL_ADC_Init+0xba>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d111      	bne.n	80010fa <HAL_ADC_Init+0xde>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	0892      	lsrs	r2, r2, #2
 80010e4:	611a      	str	r2, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6919      	ldr	r1, [r3, #16]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	e014      	b.n	8001124 <HAL_ADC_Init+0x108>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	0892      	lsrs	r2, r2, #2
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	4b79      	ldr	r3, [pc, #484]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 8001110:	4978      	ldr	r1, [pc, #480]	; (80012f4 <HAL_ADC_Init+0x2d8>)
 8001112:	400a      	ands	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4b74      	ldr	r3, [pc, #464]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2118      	movs	r1, #24
 8001130:	438a      	bics	r2, r1
 8001132:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68d9      	ldr	r1, [r3, #12]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001146:	4b6a      	ldr	r3, [pc, #424]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 800114c:	496a      	ldr	r1, [pc, #424]	; (80012f8 <HAL_ADC_Init+0x2dc>)
 800114e:	400a      	ands	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001152:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115a:	065a      	lsls	r2, r3, #25
 800115c:	4b64      	ldr	r3, [pc, #400]	; (80012f0 <HAL_ADC_Init+0x2d4>)
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	055b      	lsls	r3, r3, #21
 800116c:	4013      	ands	r3, r2
 800116e:	d108      	bne.n	8001182 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	0549      	lsls	r1, r1, #21
 800117e:	430a      	orrs	r2, r1
 8001180:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	495b      	ldr	r1, [pc, #364]	; (80012fc <HAL_ADC_Init+0x2e0>)
 800118e:	400a      	ands	r2, r1
 8001190:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68d9      	ldr	r1, [r3, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d101      	bne.n	80011a8 <HAL_ADC_Init+0x18c>
 80011a4:	2304      	movs	r3, #4
 80011a6:	e000      	b.n	80011aa <HAL_ADC_Init+0x18e>
 80011a8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011aa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2020      	movs	r0, #32
 80011b0:	5c1b      	ldrb	r3, [r3, r0]
 80011b2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011b4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	202c      	movs	r0, #44	; 0x2c
 80011ba:	5c1b      	ldrb	r3, [r3, r0]
 80011bc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011be:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011cc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011d4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011e2:	23c2      	movs	r3, #194	; 0xc2
 80011e4:	33ff      	adds	r3, #255	; 0xff
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d00b      	beq.n	8001202 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68d9      	ldr	r1, [r3, #12]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2221      	movs	r2, #33	; 0x21
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d11a      	bne.n	8001242 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	5c9b      	ldrb	r3, [r3, r2]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	0249      	lsls	r1, r1, #9
 8001224:	430a      	orrs	r2, r1
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	e00b      	b.n	8001242 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	2220      	movs	r2, #32
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	2201      	movs	r2, #1
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001246:	2b01      	cmp	r3, #1
 8001248:	d11f      	bne.n	800128a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	492a      	ldr	r1, [pc, #168]	; (8001300 <HAL_ADC_Init+0x2e4>)
 8001256:	400a      	ands	r2, r1
 8001258:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6919      	ldr	r1, [r3, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001268:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800126e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2101      	movs	r1, #1
 8001284:	430a      	orrs	r2, r1
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	e00e      	b.n	80012a8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	2b01      	cmp	r3, #1
 8001296:	d107      	bne.n	80012a8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2101      	movs	r1, #1
 80012a4:	438a      	bics	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2107      	movs	r1, #7
 80012b4:	438a      	bics	r2, r1
 80012b6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6959      	ldr	r1, [r3, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	2203      	movs	r2, #3
 80012d6:	4393      	bics	r3, r2
 80012d8:	2201      	movs	r2, #1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	fffffefd 	.word	0xfffffefd
 80012f0:	40012708 	.word	0x40012708
 80012f4:	ffc3ffff 	.word	0xffc3ffff
 80012f8:	fdffffff 	.word	0xfdffffff
 80012fc:	fffe0219 	.word	0xfffe0219
 8001300:	fffffc03 	.word	0xfffffc03

08001304 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	230f      	movs	r3, #15
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2204      	movs	r2, #4
 800131c:	4013      	ands	r3, r2
 800131e:	d138      	bne.n	8001392 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2250      	movs	r2, #80	; 0x50
 8001324:	5c9b      	ldrb	r3, [r3, r2]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_ADC_Start+0x2a>
 800132a:	2302      	movs	r3, #2
 800132c:	e038      	b.n	80013a0 <HAL_ADC_Start+0x9c>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2250      	movs	r2, #80	; 0x50
 8001332:	2101      	movs	r1, #1
 8001334:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d007      	beq.n	800134e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800133e:	230f      	movs	r3, #15
 8001340:	18fc      	adds	r4, r7, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f000 f981 	bl	800164c <ADC_Enable>
 800134a:	0003      	movs	r3, r0
 800134c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800134e:	230f      	movs	r3, #15
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d120      	bne.n	800139a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_ADC_Start+0xa4>)
 800135e:	4013      	ands	r3, r2
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	0052      	lsls	r2, r2, #1
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2250      	movs	r2, #80	; 0x50
 8001374:	2100      	movs	r1, #0
 8001376:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	221c      	movs	r2, #28
 800137e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2104      	movs	r1, #4
 800138c:	430a      	orrs	r2, r1
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e003      	b.n	800139a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800139a:	230f      	movs	r3, #15
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	781b      	ldrb	r3, [r3, #0]
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b005      	add	sp, #20
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	fffff0fe 	.word	0xfffff0fe

080013ac <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b4:	230f      	movs	r3, #15
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2250      	movs	r2, #80	; 0x50
 80013c0:	5c9b      	ldrb	r3, [r3, r2]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <HAL_ADC_Stop+0x1e>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e029      	b.n	800141e <HAL_ADC_Stop+0x72>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2250      	movs	r2, #80	; 0x50
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013d2:	250f      	movs	r5, #15
 80013d4:	197c      	adds	r4, r7, r5
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0018      	movs	r0, r3
 80013da:	f000 fa06 	bl	80017ea <ADC_ConversionStop>
 80013de:	0003      	movs	r3, r0
 80013e0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013e2:	197b      	adds	r3, r7, r5
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d112      	bne.n	8001410 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80013ea:	197c      	adds	r4, r7, r5
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 f994 	bl	800171c <ADC_Disable>
 80013f4:	0003      	movs	r3, r0
 80013f6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013f8:	197b      	adds	r3, r7, r5
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_ADC_Stop+0x7c>)
 8001406:	4013      	ands	r3, r2
 8001408:	2201      	movs	r2, #1
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2250      	movs	r2, #80	; 0x50
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	781b      	ldrb	r3, [r3, #0]
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bdb0      	pop	{r4, r5, r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	fffffefe 	.word	0xfffffefe

0800142c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d102      	bne.n	800144c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001446:	2308      	movs	r3, #8
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e014      	b.n	8001476 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10b      	bne.n	8001472 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145e:	2220      	movs	r2, #32
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2250      	movs	r2, #80	; 0x50
 800146a:	2100      	movs	r1, #0
 800146c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e072      	b.n	8001558 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001472:	230c      	movs	r3, #12
 8001474:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001476:	f7ff fdc7 	bl	8001008 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800147e:	e01f      	b.n	80014c0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	d01c      	beq.n	80014c0 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <HAL_ADC_PollForConversion+0x70>
 800148c:	f7ff fdbc 	bl	8001008 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d211      	bcs.n	80014c0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	d10b      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	2204      	movs	r2, #4
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2250      	movs	r2, #80	; 0x50
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e04b      	b.n	8001558 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0d9      	beq.n	8001480 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	4013      	ands	r3, r2
 80014e6:	d12e      	bne.n	8001546 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d129      	bne.n	8001546 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2208      	movs	r2, #8
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d122      	bne.n	8001546 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d110      	bne.n	800152e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	210c      	movs	r1, #12
 8001518:	438a      	bics	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001520:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_ADC_PollForConversion+0x134>)
 8001522:	4013      	ands	r3, r2
 8001524:	2201      	movs	r2, #1
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
 800152c:	e00b      	b.n	8001546 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	2220      	movs	r2, #32
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	2201      	movs	r2, #1
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b004      	add	sp, #16
 800155e:	bd80      	pop	{r7, pc}
 8001560:	fffffefe 	.word	0xfffffefe

08001564 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2250      	movs	r2, #80	; 0x50
 800158a:	5c9b      	ldrb	r3, [r3, r2]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x18>
 8001590:	2302      	movs	r3, #2
 8001592:	e050      	b.n	8001636 <HAL_ADC_ConfigChannel+0xba>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2250      	movs	r2, #80	; 0x50
 8001598:	2101      	movs	r1, #1
 800159a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2204      	movs	r2, #4
 80015a4:	4013      	ands	r3, r2
 80015a6:	d00b      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	2220      	movs	r2, #32
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2250      	movs	r2, #80	; 0x50
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e03a      	b.n	8001636 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_ADC_ConfigChannel+0xc4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d018      	beq.n	80015fc <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	035b      	lsls	r3, r3, #13
 80015d6:	0b5a      	lsrs	r2, r3, #13
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	4013      	ands	r3, r2
 80015ea:	d01f      	beq.n	800162c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_ADC_ConfigChannel+0xc8>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_ADC_ConfigChannel+0xc8>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	03c9      	lsls	r1, r1, #15
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e017      	b.n	800162c <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	035b      	lsls	r3, r3, #13
 8001608:	0b5b      	lsrs	r3, r3, #13
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	029b      	lsls	r3, r3, #10
 800161c:	4013      	ands	r3, r2
 800161e:	d005      	beq.n	800162c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_ADC_ConfigChannel+0xc8>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <HAL_ADC_ConfigChannel+0xc8>)
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <HAL_ADC_ConfigChannel+0xcc>)
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2250      	movs	r2, #80	; 0x50
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	00001001 	.word	0x00001001
 8001644:	40012708 	.word	0x40012708
 8001648:	ffbfffff 	.word	0xffbfffff

0800164c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2203      	movs	r2, #3
 8001660:	4013      	ands	r3, r2
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <ADC_Enable+0x2c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <ADC_Enable+0x2c>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <ADC_Enable+0x2e>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d146      	bne.n	800170c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <ADC_Enable+0xcc>)
 8001686:	4013      	ands	r3, r2
 8001688:	d00d      	beq.n	80016a6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	2210      	movs	r2, #16
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	2201      	movs	r2, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e033      	b.n	800170e <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f000 f8e4 	bl	8001884 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80016bc:	f7ff fca4 	bl	8001008 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016c4:	e01b      	b.n	80016fe <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016c6:	f7ff fc9f 	bl	8001008 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d914      	bls.n	80016fe <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d00d      	beq.n	80016fe <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	2210      	movs	r2, #16
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	2201      	movs	r2, #1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e007      	b.n	800170e <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	2b01      	cmp	r3, #1
 800170a:	d1dc      	bne.n	80016c6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	80000017 	.word	0x80000017

0800171c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2203      	movs	r2, #3
 8001730:	4013      	ands	r3, r2
 8001732:	2b01      	cmp	r3, #1
 8001734:	d108      	bne.n	8001748 <ADC_Disable+0x2c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <ADC_Disable+0x2c>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <ADC_Disable+0x2e>
 8001748:	2300      	movs	r3, #0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d048      	beq.n	80017e0 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2205      	movs	r2, #5
 8001756:	4013      	ands	r3, r2
 8001758:	2b01      	cmp	r3, #1
 800175a:	d110      	bne.n	800177e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2102      	movs	r1, #2
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2203      	movs	r2, #3
 8001772:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001774:	f7ff fc48 	bl	8001008 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800177c:	e029      	b.n	80017d2 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	2210      	movs	r2, #16
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	2201      	movs	r2, #1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e023      	b.n	80017e2 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800179a:	f7ff fc35 	bl	8001008 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b0a      	cmp	r3, #10
 80017a6:	d914      	bls.n	80017d2 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10d      	bne.n	80017d2 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	2210      	movs	r2, #16
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	2201      	movs	r2, #1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e007      	b.n	80017e2 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d0dc      	beq.n	800179a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bd80      	pop	{r7, pc}

080017ea <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2204      	movs	r2, #4
 80017fe:	4013      	ands	r3, r2
 8001800:	d03a      	beq.n	8001878 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	2b04      	cmp	r3, #4
 800180e:	d10d      	bne.n	800182c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800181a:	d107      	bne.n	800182c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2110      	movs	r1, #16
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800182c:	f7ff fbec 	bl	8001008 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001834:	e01a      	b.n	800186c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001836:	f7ff fbe7 	bl	8001008 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b0a      	cmp	r3, #10
 8001842:	d913      	bls.n	800186c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2204      	movs	r2, #4
 800184c:	4013      	ands	r3, r2
 800184e:	d00d      	beq.n	800186c <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	2210      	movs	r2, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	2201      	movs	r2, #1
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e006      	b.n	800187a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2204      	movs	r2, #4
 8001874:	4013      	ands	r3, r2
 8001876:	d1de      	bne.n	8001836 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b004      	add	sp, #16
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <ADC_DelayMicroSecond+0x38>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	490b      	ldr	r1, [pc, #44]	; (80018c0 <ADC_DelayMicroSecond+0x3c>)
 8001892:	0018      	movs	r0, r3
 8001894:	f7fe fc38 	bl	8000108 <__udivsi3>
 8001898:	0003      	movs	r3, r0
 800189a:	001a      	movs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4353      	muls	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80018a2:	e002      	b.n	80018aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f9      	bne.n	80018a4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b004      	add	sp, #16
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	20000000 	.word	0x20000000
 80018c0:	000f4240 	.word	0x000f4240

080018c4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ce:	2317      	movs	r3, #23
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2250      	movs	r2, #80	; 0x50
 80018e2:	5c9b      	ldrb	r3, [r3, r2]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_ADCEx_Calibration_Start+0x28>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e083      	b.n	80019f4 <HAL_ADCEx_Calibration_Start+0x130>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2250      	movs	r2, #80	; 0x50
 80018f0:	2101      	movs	r1, #1
 80018f2:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2203      	movs	r2, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_ADCEx_Calibration_Start+0x50>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_ADCEx_Calibration_Start+0x50>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_ADCEx_Calibration_Start+0x52>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d15b      	bne.n	80019d2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	4a37      	ldr	r2, [pc, #220]	; (80019fc <HAL_ADCEx_Calibration_Start+0x138>)
 8001920:	4013      	ands	r3, r2
 8001922:	2202      	movs	r2, #2
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2203      	movs	r2, #3
 8001932:	4013      	ands	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2103      	movs	r1, #3
 8001942:	438a      	bics	r2, r1
 8001944:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	0609      	lsls	r1, r1, #24
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001958:	f7ff fb56 	bl	8001008 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001960:	e01d      	b.n	800199e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001962:	f7ff fb51 	bl	8001008 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b0a      	cmp	r3, #10
 800196e:	d916      	bls.n	800199e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0fdb      	lsrs	r3, r3, #31
 8001978:	07da      	lsls	r2, r3, #31
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	429a      	cmp	r2, r3
 8001980:	d10d      	bne.n	800199e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	2212      	movs	r2, #18
 8001988:	4393      	bics	r3, r2
 800198a:	2210      	movs	r2, #16
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2250      	movs	r2, #80	; 0x50
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e02a      	b.n	80019f4 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	0fdb      	lsrs	r3, r3, #31
 80019a6:	07da      	lsls	r2, r3, #31
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	061b      	lsls	r3, r3, #24
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d0d8      	beq.n	8001962 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68d9      	ldr	r1, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	430a      	orrs	r2, r1
 80019be:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	2203      	movs	r2, #3
 80019c6:	4393      	bics	r3, r2
 80019c8:	2201      	movs	r2, #1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
 80019d0:	e009      	b.n	80019e6 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d6:	2220      	movs	r2, #32
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80019de:	2317      	movs	r3, #23
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2250      	movs	r2, #80	; 0x50
 80019ea:	2100      	movs	r1, #0
 80019ec:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80019ee:	2317      	movs	r3, #23
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	781b      	ldrb	r3, [r3, #0]
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b006      	add	sp, #24
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	fffffefd 	.word	0xfffffefd

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	0002      	movs	r2, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b7f      	cmp	r3, #127	; 0x7f
 8001a14:	d828      	bhi.n	8001a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a16:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <__NVIC_SetPriority+0xd4>)
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	33c0      	adds	r3, #192	; 0xc0
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	589b      	ldr	r3, [r3, r2]
 8001a26:	1dfa      	adds	r2, r7, #7
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	400a      	ands	r2, r1
 8001a30:	00d2      	lsls	r2, r2, #3
 8001a32:	21ff      	movs	r1, #255	; 0xff
 8001a34:	4091      	lsls	r1, r2
 8001a36:	000a      	movs	r2, r1
 8001a38:	43d2      	mvns	r2, r2
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	22ff      	movs	r2, #255	; 0xff
 8001a44:	401a      	ands	r2, r3
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	4003      	ands	r3, r0
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a54:	481f      	ldr	r0, [pc, #124]	; (8001ad4 <__NVIC_SetPriority+0xd4>)
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	33c0      	adds	r3, #192	; 0xc0
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a66:	e031      	b.n	8001acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <__NVIC_SetPriority+0xd8>)
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	0019      	movs	r1, r3
 8001a70:	230f      	movs	r3, #15
 8001a72:	400b      	ands	r3, r1
 8001a74:	3b08      	subs	r3, #8
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3306      	adds	r3, #6
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	18d3      	adds	r3, r2, r3
 8001a7e:	3304      	adds	r3, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1dfa      	adds	r2, r7, #7
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	0011      	movs	r1, r2
 8001a88:	2203      	movs	r2, #3
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	00d2      	lsls	r2, r2, #3
 8001a8e:	21ff      	movs	r1, #255	; 0xff
 8001a90:	4091      	lsls	r1, r2
 8001a92:	000a      	movs	r2, r1
 8001a94:	43d2      	mvns	r2, r2
 8001a96:	401a      	ands	r2, r3
 8001a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	22ff      	movs	r2, #255	; 0xff
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	4003      	ands	r3, r0
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <__NVIC_SetPriority+0xd8>)
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	001c      	movs	r4, r3
 8001ab8:	230f      	movs	r3, #15
 8001aba:	4023      	ands	r3, r4
 8001abc:	3b08      	subs	r3, #8
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	3306      	adds	r3, #6
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	18c3      	adds	r3, r0, r3
 8001ac8:	3304      	adds	r3, #4
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b003      	add	sp, #12
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	045b      	lsls	r3, r3, #17
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d301      	bcc.n	8001af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af0:	2301      	movs	r3, #1
 8001af2:	e010      	b.n	8001b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <SysTick_Config+0x44>)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	3a01      	subs	r2, #1
 8001afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afc:	2301      	movs	r3, #1
 8001afe:	425b      	negs	r3, r3
 8001b00:	2103      	movs	r1, #3
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff ff7c 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x44>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x44>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	210f      	movs	r1, #15
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	1c02      	adds	r2, r0, #0
 8001b34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	0011      	movs	r1, r2
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b004      	add	sp, #16
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff ffbf 	bl	8001adc <SysTick_Config>
 8001b5e:	0003      	movs	r3, r0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b7e:	e149      	b.n	8001e14 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4091      	lsls	r1, r2
 8001b8a:	000a      	movs	r2, r1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d100      	bne.n	8001b98 <HAL_GPIO_Init+0x30>
 8001b96:	e13a      	b.n	8001e0e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d005      	beq.n	8001bb0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d130      	bne.n	8001c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be6:	2201      	movs	r2, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
 8001bec:	0013      	movs	r3, r2
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d017      	beq.n	8001c4e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2203      	movs	r2, #3
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d123      	bne.n	8001ca2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	58d3      	ldr	r3, [r2, r3]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	409a      	lsls	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	43da      	mvns	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2107      	movs	r1, #7
 8001c86:	400b      	ands	r3, r1
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	6939      	ldr	r1, [r7, #16]
 8001ca0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	23c0      	movs	r3, #192	; 0xc0
 8001cdc:	029b      	lsls	r3, r3, #10
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d100      	bne.n	8001ce4 <HAL_GPIO_Init+0x17c>
 8001ce2:	e094      	b.n	8001e0e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf0:	4a4f      	ldr	r2, [pc, #316]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	589b      	ldr	r3, [r3, r2]
 8001cfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2203      	movs	r2, #3
 8001d02:	4013      	ands	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	23a0      	movs	r3, #160	; 0xa0
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x1de>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a44      	ldr	r2, [pc, #272]	; (8001e34 <HAL_GPIO_Init+0x2cc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x1da>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x1d6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_GPIO_Init+0x2d4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x1d2>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x1e0>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x1e0>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x1e0>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x1e0>
 8001d46:	2300      	movs	r3, #0
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d58:	4935      	ldr	r1, [pc, #212]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	025b      	lsls	r3, r3, #9
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	035b      	lsls	r3, r3, #13
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	039b      	lsls	r3, r3, #14
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	40da      	lsrs	r2, r3
 8001e1c:	1e13      	subs	r3, r2, #0
 8001e1e:	d000      	beq.n	8001e22 <HAL_GPIO_Init+0x2ba>
 8001e20:	e6ae      	b.n	8001b80 <HAL_GPIO_Init+0x18>
  }
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b006      	add	sp, #24
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	50000400 	.word	0x50000400
 8001e38:	50000800 	.word	0x50000800
 8001e3c:	50001c00 	.word	0x50001c00
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	0008      	movs	r0, r1
 8001e4e:	0011      	movs	r1, r2
 8001e50:	1cbb      	adds	r3, r7, #2
 8001e52:	1c02      	adds	r2, r0, #0
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	1c7b      	adds	r3, r7, #1
 8001e58:	1c0a      	adds	r2, r1, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5c:	1c7b      	adds	r3, r7, #1
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	881a      	ldrh	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e6c:	e003      	b.n	8001e76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e6e:	1cbb      	adds	r3, r7, #2
 8001e70:	881a      	ldrh	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b002      	add	sp, #8
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f000 fb6c 	bl	800256c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e94:	4bc8      	ldr	r3, [pc, #800]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	220c      	movs	r2, #12
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9e:	4bc6      	ldr	r3, [pc, #792]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	025b      	lsls	r3, r3, #9
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x36>
 8001eb4:	e07d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d007      	beq.n	8001ecc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d112      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x68>
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4bba      	ldr	r3, [pc, #744]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d100      	bne.n	8001eda <HAL_RCC_OscConfig+0x5a>
 8001ed8:	e06a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x130>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d166      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f000 fb42 	bl	800256c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	025b      	lsls	r3, r3, #9
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_OscConfig+0x84>
 8001ef4:	4bb0      	ldr	r3, [pc, #704]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4baf      	ldr	r3, [pc, #700]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	0249      	lsls	r1, r1, #9
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e027      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	23a0      	movs	r3, #160	; 0xa0
 8001f0a:	02db      	lsls	r3, r3, #11
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d10e      	bne.n	8001f2e <HAL_RCC_OscConfig+0xae>
 8001f10:	4ba9      	ldr	r3, [pc, #676]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4ba8      	ldr	r3, [pc, #672]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	02c9      	lsls	r1, r1, #11
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	4ba6      	ldr	r3, [pc, #664]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4ba5      	ldr	r3, [pc, #660]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0249      	lsls	r1, r1, #9
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e012      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f2e:	4ba2      	ldr	r3, [pc, #648]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4ba1      	ldr	r3, [pc, #644]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f34:	49a1      	ldr	r1, [pc, #644]	; (80021bc <HAL_RCC_OscConfig+0x33c>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	4b9f      	ldr	r3, [pc, #636]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	025b      	lsls	r3, r3, #9
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4b9b      	ldr	r3, [pc, #620]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b9a      	ldr	r3, [pc, #616]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	499c      	ldr	r1, [pc, #624]	; (80021c0 <HAL_RCC_OscConfig+0x340>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d014      	beq.n	8001f86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f854 	bl	8001008 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f66:	f7ff f84f 	bl	8001008 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e2f9      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f78:	4b8f      	ldr	r3, [pc, #572]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0xe6>
 8001f84:	e015      	b.n	8001fb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff f83f 	bl	8001008 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f83a 	bl	8001008 <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e2e4      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fa2:	4b85      	ldr	r3, [pc, #532]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x110>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d100      	bne.n	8001fbe <HAL_RCC_OscConfig+0x13e>
 8001fbc:	e099      	b.n	80020f2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001fcc:	4b7a      	ldr	r3, [pc, #488]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fd2:	2120      	movs	r1, #32
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	2220      	movs	r2, #32
 8001fdc:	4393      	bics	r3, r2
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d13e      	bne.n	800206a <HAL_RCC_OscConfig+0x1ea>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d13b      	bne.n	800206a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ff2:	4b71      	ldr	r3, [pc, #452]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_RCC_OscConfig+0x186>
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e2b2      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b6c      	ldr	r3, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a6e      	ldr	r2, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x344>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	021a      	lsls	r2, r3, #8
 8002016:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002018:	430a      	orrs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800201c:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2209      	movs	r2, #9
 8002022:	4393      	bics	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202e:	f000 fbeb 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8002032:	0001      	movs	r1, r0
 8002034:	4b60      	ldr	r3, [pc, #384]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	220f      	movs	r2, #15
 800203c:	4013      	ands	r3, r2
 800203e:	4a62      	ldr	r2, [pc, #392]	; (80021c8 <HAL_RCC_OscConfig+0x348>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	000a      	movs	r2, r1
 8002044:	40da      	lsrs	r2, r3
 8002046:	4b61      	ldr	r3, [pc, #388]	; (80021cc <HAL_RCC_OscConfig+0x34c>)
 8002048:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800204a:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_OscConfig+0x350>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2513      	movs	r5, #19
 8002050:	197c      	adds	r4, r7, r5
 8002052:	0018      	movs	r0, r3
 8002054:	f7fe ff92 	bl	8000f7c <HAL_InitTick>
 8002058:	0003      	movs	r3, r0
 800205a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800205c:	197b      	adds	r3, r7, r5
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d046      	beq.n	80020f2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002064:	197b      	adds	r3, r7, r5
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	e280      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d027      	beq.n	80020c0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002070:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2209      	movs	r2, #9
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe ffc1 	bl	8001008 <HAL_GetTick>
 8002086:	0003      	movs	r3, r0
 8002088:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe ffbc 	bl	8001008 <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e266      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800209e:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2204      	movs	r2, #4
 80020a4:	4013      	ands	r3, r2
 80020a6:	d0f1      	beq.n	800208c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a45      	ldr	r2, [pc, #276]	; (80021c4 <HAL_RCC_OscConfig+0x344>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	021a      	lsls	r2, r3, #8
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	e018      	b.n	80020f2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c0:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	438a      	bics	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff9c 	bl	8001008 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d6:	f7fe ff97 	bl	8001008 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e241      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020e8:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2204      	movs	r2, #4
 80020ee:	4013      	ands	r3, r2
 80020f0:	d1f1      	bne.n	80020d6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	4013      	ands	r3, r2
 80020fa:	d100      	bne.n	80020fe <HAL_RCC_OscConfig+0x27e>
 80020fc:	e0a1      	b.n	8002242 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d140      	bne.n	8002186 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x29c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e227      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <HAL_RCC_OscConfig+0x354>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	0a19      	lsrs	r1, r3, #8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	061a      	lsls	r2, r3, #24
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	0b5b      	lsrs	r3, r3, #13
 800214a:	3301      	adds	r3, #1
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0212      	lsls	r2, r2, #8
 8002150:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	210f      	movs	r1, #15
 800215a:	400b      	ands	r3, r1
 800215c:	491a      	ldr	r1, [pc, #104]	; (80021c8 <HAL_RCC_OscConfig+0x348>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_OscConfig+0x34c>)
 8002164:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_RCC_OscConfig+0x350>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2513      	movs	r5, #19
 800216c:	197c      	adds	r4, r7, r5
 800216e:	0018      	movs	r0, r3
 8002170:	f7fe ff04 	bl	8000f7c <HAL_InitTick>
 8002174:	0003      	movs	r3, r0
 8002176:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002178:	197b      	adds	r3, r7, r5
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d060      	beq.n	8002242 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002180:	197b      	adds	r3, r7, r5
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	e1f2      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03f      	beq.n	800220e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0049      	lsls	r1, r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe ff34 	bl	8001008 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021a4:	e018      	b.n	80021d8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a6:	f7fe ff2f 	bl	8001008 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d911      	bls.n	80021d8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1d9      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
 80021b8:	40021000 	.word	0x40021000
 80021bc:	fffeffff 	.word	0xfffeffff
 80021c0:	fffbffff 	.word	0xfffbffff
 80021c4:	ffffe0ff 	.word	0xffffe0ff
 80021c8:	08003628 	.word	0x08003628
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000004 	.word	0x20000004
 80021d4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021d8:	4bc9      	ldr	r3, [pc, #804]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d0e0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	4bc6      	ldr	r3, [pc, #792]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4ac6      	ldr	r2, [pc, #792]	; (8002504 <HAL_RCC_OscConfig+0x684>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4bc3      	ldr	r3, [pc, #780]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f8:	4bc1      	ldr	r3, [pc, #772]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	0a19      	lsrs	r1, r3, #8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	061a      	lsls	r2, r3, #24
 8002206:	4bbe      	ldr	r3, [pc, #760]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	e019      	b.n	8002242 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220e:	4bbc      	ldr	r3, [pc, #752]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4bbb      	ldr	r3, [pc, #748]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002214:	49bc      	ldr	r1, [pc, #752]	; (8002508 <HAL_RCC_OscConfig+0x688>)
 8002216:	400a      	ands	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fef5 	bl	8001008 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002224:	f7fe fef0 	bl	8001008 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e19a      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002236:	4bb2      	ldr	r3, [pc, #712]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2208      	movs	r2, #8
 8002248:	4013      	ands	r3, r2
 800224a:	d036      	beq.n	80022ba <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d019      	beq.n	8002288 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002254:	4baa      	ldr	r3, [pc, #680]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002258:	4ba9      	ldr	r3, [pc, #676]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe fed2 	bl	8001008 <HAL_GetTick>
 8002264:	0003      	movs	r3, r0
 8002266:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226a:	f7fe fecd 	bl	8001008 <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e177      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800227c:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d0f1      	beq.n	800226a <HAL_RCC_OscConfig+0x3ea>
 8002286:	e018      	b.n	80022ba <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002288:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800228a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800228c:	4b9c      	ldr	r3, [pc, #624]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800228e:	2101      	movs	r1, #1
 8002290:	438a      	bics	r2, r1
 8002292:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe feb8 	bl	8001008 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229e:	f7fe feb3 	bl	8001008 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e15d      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022b0:	4b93      	ldr	r3, [pc, #588]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b4:	2202      	movs	r2, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d1f1      	bne.n	800229e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2204      	movs	r2, #4
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x446>
 80022c4:	e0ae      	b.n	8002424 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2023      	movs	r0, #35	; 0x23
 80022c8:	183b      	adds	r3, r7, r0
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ce:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80022d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	055b      	lsls	r3, r3, #21
 80022d6:	4013      	ands	r3, r2
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b89      	ldr	r3, [pc, #548]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80022dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0549      	lsls	r1, r1, #21
 80022e4:	430a      	orrs	r2, r1
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022e8:	183b      	adds	r3, r7, r0
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b87      	ldr	r3, [pc, #540]	; (800250c <HAL_RCC_OscConfig+0x68c>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d11a      	bne.n	8002330 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b84      	ldr	r3, [pc, #528]	; (800250c <HAL_RCC_OscConfig+0x68c>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b83      	ldr	r3, [pc, #524]	; (800250c <HAL_RCC_OscConfig+0x68c>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002308:	f7fe fe7e 	bl	8001008 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe fe79 	bl	8001008 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e123      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	4b79      	ldr	r3, [pc, #484]	; (800250c <HAL_RCC_OscConfig+0x68c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x4cc>
 800233c:	4b70      	ldr	r3, [pc, #448]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800233e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0049      	lsls	r1, r1, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
 800234a:	e031      	b.n	80023b0 <HAL_RCC_OscConfig+0x530>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x4ee>
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002358:	4b69      	ldr	r3, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800235a:	496b      	ldr	r1, [pc, #428]	; (8002508 <HAL_RCC_OscConfig+0x688>)
 800235c:	400a      	ands	r2, r1
 800235e:	651a      	str	r2, [r3, #80]	; 0x50
 8002360:	4b67      	ldr	r3, [pc, #412]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002366:	496a      	ldr	r1, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x690>)
 8002368:	400a      	ands	r2, r1
 800236a:	651a      	str	r2, [r3, #80]	; 0x50
 800236c:	e020      	b.n	80023b0 <HAL_RCC_OscConfig+0x530>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	23a0      	movs	r3, #160	; 0xa0
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	429a      	cmp	r2, r3
 8002378:	d10e      	bne.n	8002398 <HAL_RCC_OscConfig+0x518>
 800237a:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800237c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800237e:	4b60      	ldr	r3, [pc, #384]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	00c9      	lsls	r1, r1, #3
 8002384:	430a      	orrs	r2, r1
 8002386:	651a      	str	r2, [r3, #80]	; 0x50
 8002388:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800238a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800238c:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	0049      	lsls	r1, r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	651a      	str	r2, [r3, #80]	; 0x50
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x530>
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800239a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800239e:	495a      	ldr	r1, [pc, #360]	; (8002508 <HAL_RCC_OscConfig+0x688>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	651a      	str	r2, [r3, #80]	; 0x50
 80023a4:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80023a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a8:	4b55      	ldr	r3, [pc, #340]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80023aa:	4959      	ldr	r1, [pc, #356]	; (8002510 <HAL_RCC_OscConfig+0x690>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7fe fe26 	bl	8001008 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c0:	e009      	b.n	80023d6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fe21 	bl	8001008 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4a51      	ldr	r2, [pc, #324]	; (8002514 <HAL_RCC_OscConfig+0x694>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0ca      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80023d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d0ef      	beq.n	80023c2 <HAL_RCC_OscConfig+0x542>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe fe10 	bl	8001008 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ec:	e009      	b.n	8002402 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fe0b 	bl	8001008 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	4a46      	ldr	r2, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x694>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0b4      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d1ef      	bne.n	80023ee <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240e:	2323      	movs	r3, #35	; 0x23
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800241a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241c:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800241e:	493e      	ldr	r1, [pc, #248]	; (8002518 <HAL_RCC_OscConfig+0x698>)
 8002420:	400a      	ands	r2, r1
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <HAL_RCC_OscConfig+0x5ae>
 800242c:	e09d      	b.n	800256a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d100      	bne.n	8002436 <HAL_RCC_OscConfig+0x5b6>
 8002434:	e076      	b.n	8002524 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b02      	cmp	r3, #2
 800243c:	d145      	bne.n	80024ca <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_RCC_OscConfig+0x69c>)
 8002446:	400a      	ands	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fddd 	bl	8001008 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fdd8 	bl	8001008 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e082      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	4013      	ands	r3, r2
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <HAL_RCC_OscConfig+0x6a0>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	431a      	orrs	r2, r3
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800248e:	430a      	orrs	r2, r1
 8002490:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0449      	lsls	r1, r1, #17
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fdb2 	bl	8001008 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fdad 	bl	8001008 <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e057      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	049b      	lsls	r3, r3, #18
 80024c4:	4013      	ands	r3, r2
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x62a>
 80024c8:	e04f      	b.n	800256a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80024d0:	4912      	ldr	r1, [pc, #72]	; (800251c <HAL_RCC_OscConfig+0x69c>)
 80024d2:	400a      	ands	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fd97 	bl	8001008 <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fd92 	bl	8001008 <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e03c      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024f2:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	049b      	lsls	r3, r3, #18
 80024fa:	4013      	ands	r3, r2
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x660>
 80024fe:	e034      	b.n	800256a <HAL_RCC_OscConfig+0x6ea>
 8002500:	40021000 	.word	0x40021000
 8002504:	ffff1fff 	.word	0xffff1fff
 8002508:	fffffeff 	.word	0xfffffeff
 800250c:	40007000 	.word	0x40007000
 8002510:	fffffbff 	.word	0xfffffbff
 8002514:	00001388 	.word	0x00001388
 8002518:	efffffff 	.word	0xefffffff
 800251c:	feffffff 	.word	0xfeffffff
 8002520:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCC_OscConfig+0x6f4>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	401a      	ands	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	429a      	cmp	r2, r3
 8002544:	d10f      	bne.n	8002566 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	23f0      	movs	r3, #240	; 0xf0
 800254a:	039b      	lsls	r3, r3, #14
 800254c:	401a      	ands	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d107      	bne.n	8002566 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	23c0      	movs	r3, #192	; 0xc0
 800255a:	041b      	lsls	r3, r3, #16
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b00a      	add	sp, #40	; 0x28
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e128      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d91e      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2201      	movs	r2, #1
 80025a0:	4393      	bics	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fd2c 	bl	8001008 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b4:	e009      	b.n	80025ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b6:	f7fe fd27 	bl	8001008 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4a8a      	ldr	r2, [pc, #552]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e109      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b87      	ldr	r3, [pc, #540]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2202      	movs	r2, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b83      	ldr	r3, [pc, #524]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	22f0      	movs	r2, #240	; 0xf0
 80025e8:	4393      	bics	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <HAL_RCC_ClockConfig+0x8a>
 8002600:	e089      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260a:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	029b      	lsls	r3, r3, #10
 8002612:	4013      	ands	r3, r2
 8002614:	d120      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0e1      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	049b      	lsls	r3, r3, #18
 800262a:	4013      	ands	r3, r2
 800262c:	d114      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0d5      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d106      	bne.n	8002648 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2204      	movs	r2, #4
 8002640:	4013      	ands	r3, r2
 8002642:	d109      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0ca      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002648:	4b69      	ldr	r3, [pc, #420]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0c2      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002658:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2203      	movs	r2, #3
 800265e:	4393      	bics	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fccc 	bl	8001008 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d111      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800267c:	e009      	b.n	8002692 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fcc3 	bl	8001008 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0a5      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	220c      	movs	r2, #12
 8002698:	4013      	ands	r3, r2
 800269a:	2b08      	cmp	r3, #8
 800269c:	d1ef      	bne.n	800267e <HAL_RCC_ClockConfig+0x106>
 800269e:	e03a      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	e009      	b.n	80026be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026aa:	f7fe fcad 	bl	8001008 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	4a4d      	ldr	r2, [pc, #308]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e08f      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	220c      	movs	r2, #12
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d1ef      	bne.n	80026aa <HAL_RCC_ClockConfig+0x132>
 80026ca:	e024      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d11b      	bne.n	800270c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d6:	f7fe fc97 	bl	8001008 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	4a42      	ldr	r2, [pc, #264]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e079      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	220c      	movs	r2, #12
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d1ef      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x15e>
 80026f6:	e00e      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fe fc86 	bl	8001008 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e068      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	220c      	movs	r2, #12
 8002712:	4013      	ands	r3, r2
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	4013      	ands	r3, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d21e      	bcs.n	8002762 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	4393      	bics	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002736:	f7fe fc67 	bl	8001008 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	e009      	b.n	8002754 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe fc62 	bl	8001008 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	4a28      	ldr	r2, [pc, #160]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e044      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d1ee      	bne.n	8002740 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x27c>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2208      	movs	r2, #8
 8002786:	4013      	ands	r3, r2
 8002788:	d00a      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x280>)
 8002790:	4013      	ands	r3, r2
 8002792:	0019      	movs	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	00da      	lsls	r2, r3, #3
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a0:	f000 f832 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027a4:	0001      	movs	r1, r0
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	220f      	movs	r2, #15
 80027ae:	4013      	ands	r3, r2
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x284>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	000a      	movs	r2, r1
 80027b6:	40da      	lsrs	r2, r3
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_ClockConfig+0x288>)
 80027ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_RCC_ClockConfig+0x28c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	250b      	movs	r5, #11
 80027c2:	197c      	adds	r4, r7, r5
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fe fbd9 	bl	8000f7c <HAL_InitTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027ce:	197b      	adds	r3, r7, r5
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027d6:	197b      	adds	r3, r7, r5
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	e000      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bdb0      	pop	{r4, r5, r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40022000 	.word	0x40022000
 80027ec:	00001388 	.word	0x00001388
 80027f0:	40021000 	.word	0x40021000
 80027f4:	fffff8ff 	.word	0xfffff8ff
 80027f8:	ffffc7ff 	.word	0xffffc7ff
 80027fc:	08003628 	.word	0x08003628
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002816:	230c      	movs	r3, #12
 8002818:	4013      	ands	r3, r2
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d014      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x40>
 800281e:	d900      	bls.n	8002822 <HAL_RCC_GetSysClockFreq+0x1a>
 8002820:	e07b      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x112>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x24>
 8002826:	2b08      	cmp	r3, #8
 8002828:	d00b      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x3a>
 800282a:	e076      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800282c:	4b44      	ldr	r3, [pc, #272]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	4013      	ands	r3, r2
 8002834:	d002      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002836:	4b43      	ldr	r3, [pc, #268]	; (8002944 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800283a:	e07c      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800283c:	4b42      	ldr	r3, [pc, #264]	; (8002948 <HAL_RCC_GetSysClockFreq+0x140>)
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002840:	e079      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002842:	4b42      	ldr	r3, [pc, #264]	; (800294c <HAL_RCC_GetSysClockFreq+0x144>)
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002846:	e076      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	0c9a      	lsrs	r2, r3, #18
 800284c:	230f      	movs	r3, #15
 800284e:	401a      	ands	r2, r3
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_GetSysClockFreq+0x148>)
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	0d9a      	lsrs	r2, r3, #22
 800285a:	2303      	movs	r3, #3
 800285c:	4013      	ands	r3, r2
 800285e:	3301      	adds	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	025b      	lsls	r3, r3, #9
 800286a:	4013      	ands	r3, r2
 800286c:	d01a      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	4a35      	ldr	r2, [pc, #212]	; (800294c <HAL_RCC_GetSysClockFreq+0x144>)
 8002878:	2300      	movs	r3, #0
 800287a:	69b8      	ldr	r0, [r7, #24]
 800287c:	69f9      	ldr	r1, [r7, #28]
 800287e:	f7fd fcef 	bl	8000260 <__aeabi_lmul>
 8002882:	0002      	movs	r2, r0
 8002884:	000b      	movs	r3, r1
 8002886:	0010      	movs	r0, r2
 8002888:	0019      	movs	r1, r3
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f7fd fcc3 	bl	8000220 <__aeabi_uldivmod>
 800289a:	0002      	movs	r2, r0
 800289c:	000b      	movs	r3, r1
 800289e:	0013      	movs	r3, r2
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
 80028a2:	e037      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2210      	movs	r2, #16
 80028aa:	4013      	ands	r3, r2
 80028ac:	d01a      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028b8:	2300      	movs	r3, #0
 80028ba:	68b8      	ldr	r0, [r7, #8]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	f7fd fccf 	bl	8000260 <__aeabi_lmul>
 80028c2:	0002      	movs	r2, r0
 80028c4:	000b      	movs	r3, r1
 80028c6:	0010      	movs	r0, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f7fd fca3 	bl	8000220 <__aeabi_uldivmod>
 80028da:	0002      	movs	r2, r0
 80028dc:	000b      	movs	r3, r1
 80028de:	0013      	movs	r3, r2
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
 80028e2:	e017      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	0018      	movs	r0, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	0019      	movs	r1, r3
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <HAL_RCC_GetSysClockFreq+0x140>)
 80028ee:	2300      	movs	r3, #0
 80028f0:	f7fd fcb6 	bl	8000260 <__aeabi_lmul>
 80028f4:	0002      	movs	r2, r0
 80028f6:	000b      	movs	r3, r1
 80028f8:	0010      	movs	r0, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	001c      	movs	r4, r3
 8002900:	2300      	movs	r3, #0
 8002902:	001d      	movs	r5, r3
 8002904:	0022      	movs	r2, r4
 8002906:	002b      	movs	r3, r5
 8002908:	f7fd fc8a 	bl	8000220 <__aeabi_uldivmod>
 800290c:	0002      	movs	r2, r0
 800290e:	000b      	movs	r3, r1
 8002910:	0013      	movs	r3, r2
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002918:	e00d      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	2207      	movs	r2, #7
 8002922:	4013      	ands	r3, r2
 8002924:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	3301      	adds	r3, #1
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	0212      	lsls	r2, r2, #8
 800292e:	409a      	lsls	r2, r3
 8002930:	0013      	movs	r3, r2
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002934:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b00e      	add	sp, #56	; 0x38
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	003d0900 	.word	0x003d0900
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200
 8002950:	08003640 	.word	0x08003640

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_RCC_GetHCLKFreq+0x10>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff2 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002970:	0001      	movs	r1, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	2207      	movs	r2, #7
 800297a:	4013      	ands	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	40d9      	lsrs	r1, r3
 8002982:	000b      	movs	r3, r1
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40021000 	.word	0x40021000
 8002990:	08003638 	.word	0x08003638

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	0001      	movs	r1, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	0adb      	lsrs	r3, r3, #11
 80029a4:	2207      	movs	r2, #7
 80029a6:	4013      	ands	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	40d9      	lsrs	r1, r3
 80029ae:	000b      	movs	r3, r1
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08003638 	.word	0x08003638

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029c8:	2017      	movs	r0, #23
 80029ca:	183b      	adds	r3, r7, r0
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2220      	movs	r2, #32
 80029d6:	4013      	ands	r3, r2
 80029d8:	d100      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80029da:	e0c2      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029dc:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	055b      	lsls	r3, r3, #21
 80029e4:	4013      	ands	r3, r2
 80029e6:	d109      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ec:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	0549      	lsls	r1, r1, #21
 80029f2:	430a      	orrs	r2, r1
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b7a      	ldr	r3, [pc, #488]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	d11a      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a08:	4b77      	ldr	r3, [pc, #476]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	0049      	lsls	r1, r1, #1
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7fe faf7 	bl	8001008 <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	e008      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe faf2 	bl	8001008 <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0d4      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a3e:	4b69      	ldr	r3, [pc, #420]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	23c0      	movs	r3, #192	; 0xc0
 8002a44:	039b      	lsls	r3, r3, #14
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	23c0      	movs	r3, #192	; 0xc0
 8002a50:	039b      	lsls	r3, r3, #14
 8002a52:	4013      	ands	r3, r2
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d013      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	23c0      	movs	r3, #192	; 0xc0
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	401a      	ands	r2, r3
 8002a64:	23c0      	movs	r3, #192	; 0xc0
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d10a      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a6c:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	029b      	lsls	r3, r3, #10
 8002a74:	401a      	ands	r2, r3
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	029b      	lsls	r3, r3, #10
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0ac      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a82:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a86:	23c0      	movs	r3, #192	; 0xc0
 8002a88:	029b      	lsls	r3, r3, #10
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d03b      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	23c0      	movs	r3, #192	; 0xc0
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d033      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d02e      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002aae:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	4a4e      	ldr	r2, [pc, #312]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002abc:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0309      	lsls	r1, r1, #12
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aca:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002acc:	4948      	ldr	r1, [pc, #288]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002ad2:	4b44      	ldr	r3, [pc, #272]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d014      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fa91 	bl	8001008 <HAL_GetTick>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aea:	e009      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fa8c 	bl	8001008 <HAL_GetTick>
 8002af0:	0002      	movs	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	4a3f      	ldr	r2, [pc, #252]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e06d      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d0ef      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	23c0      	movs	r3, #192	; 0xc0
 8002b12:	029b      	lsls	r3, r3, #10
 8002b14:	401a      	ands	r2, r3
 8002b16:	23c0      	movs	r3, #192	; 0xc0
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a35      	ldr	r2, [pc, #212]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	23c0      	movs	r3, #192	; 0xc0
 8002b2e:	039b      	lsls	r3, r3, #14
 8002b30:	401a      	ands	r2, r3
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b3a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	029b      	lsls	r3, r3, #10
 8002b44:	401a      	ands	r2, r3
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b4c:	2317      	movs	r3, #23
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b5c:	4927      	ldr	r1, [pc, #156]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b5e:	400a      	ands	r2, r1
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2202      	movs	r2, #2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	220c      	movs	r2, #12
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2204      	movs	r2, #4
 8002b86:	4013      	ands	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b006      	add	sp, #24
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40007000 	.word	0x40007000
 8002bec:	fffcffff 	.word	0xfffcffff
 8002bf0:	fff7ffff 	.word	0xfff7ffff
 8002bf4:	00001388 	.word	0x00001388
 8002bf8:	ffcfffff 	.word	0xffcfffff
 8002bfc:	efffffff 	.word	0xefffffff
 8002c00:	fffff3ff 	.word	0xfffff3ff
 8002c04:	ffffcfff 	.word	0xffffcfff
 8002c08:	fff3ffff 	.word	0xfff3ffff

08002c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e044      	b.n	8002ca8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2274      	movs	r2, #116	; 0x74
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fe f8bd 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2224      	movs	r2, #36	; 0x24
 8002c3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	438a      	bics	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 f830 	bl	8002cb4 <UART_SetConfig>
 8002c54:	0003      	movs	r3, r0
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e024      	b.n	8002ca8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 fa85 	bl	8003178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	490d      	ldr	r1, [pc, #52]	; (8002cb0 <HAL_UART_Init+0xa4>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	212a      	movs	r1, #42	; 0x2a
 8002c8a:	438a      	bics	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 fb1d 	bl	80032e0 <UART_CheckIdleState>
 8002ca6:	0003      	movs	r3, r0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	ffffb7ff 	.word	0xffffb7ff

08002cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	b5b0      	push	{r4, r5, r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cbc:	231a      	movs	r3, #26
 8002cbe:	2218      	movs	r2, #24
 8002cc0:	4694      	mov	ip, r2
 8002cc2:	44bc      	add	ip, r7
 8002cc4:	4463      	add	r3, ip
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4abc      	ldr	r2, [pc, #752]	; (8002fdc <UART_SetConfig+0x328>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4ab8      	ldr	r2, [pc, #736]	; (8002fe0 <UART_SetConfig+0x32c>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4ab2      	ldr	r2, [pc, #712]	; (8002fe4 <UART_SetConfig+0x330>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d26:	4313      	orrs	r3, r2
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4aad      	ldr	r2, [pc, #692]	; (8002fe8 <UART_SetConfig+0x334>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4aa9      	ldr	r2, [pc, #676]	; (8002fec <UART_SetConfig+0x338>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d136      	bne.n	8002db8 <UART_SetConfig+0x104>
 8002d4a:	4ba9      	ldr	r3, [pc, #676]	; (8002ff0 <UART_SetConfig+0x33c>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	220c      	movs	r2, #12
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d020      	beq.n	8002d98 <UART_SetConfig+0xe4>
 8002d56:	d827      	bhi.n	8002da8 <UART_SetConfig+0xf4>
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d00d      	beq.n	8002d78 <UART_SetConfig+0xc4>
 8002d5c:	d824      	bhi.n	8002da8 <UART_SetConfig+0xf4>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <UART_SetConfig+0xb4>
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d010      	beq.n	8002d88 <UART_SetConfig+0xd4>
 8002d66:	e01f      	b.n	8002da8 <UART_SetConfig+0xf4>
 8002d68:	231b      	movs	r3, #27
 8002d6a:	2218      	movs	r2, #24
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	44bc      	add	ip, r7
 8002d70:	4463      	add	r3, ip
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e06f      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002d78:	231b      	movs	r3, #27
 8002d7a:	2218      	movs	r2, #24
 8002d7c:	4694      	mov	ip, r2
 8002d7e:	44bc      	add	ip, r7
 8002d80:	4463      	add	r3, ip
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e067      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002d88:	231b      	movs	r3, #27
 8002d8a:	2218      	movs	r2, #24
 8002d8c:	4694      	mov	ip, r2
 8002d8e:	44bc      	add	ip, r7
 8002d90:	4463      	add	r3, ip
 8002d92:	2204      	movs	r2, #4
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e05f      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2218      	movs	r2, #24
 8002d9c:	4694      	mov	ip, r2
 8002d9e:	44bc      	add	ip, r7
 8002da0:	4463      	add	r3, ip
 8002da2:	2208      	movs	r2, #8
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e057      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002da8:	231b      	movs	r3, #27
 8002daa:	2218      	movs	r2, #24
 8002dac:	4694      	mov	ip, r2
 8002dae:	44bc      	add	ip, r7
 8002db0:	4463      	add	r3, ip
 8002db2:	2210      	movs	r2, #16
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e04f      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a89      	ldr	r2, [pc, #548]	; (8002fe4 <UART_SetConfig+0x330>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d143      	bne.n	8002e4a <UART_SetConfig+0x196>
 8002dc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ff0 <UART_SetConfig+0x33c>)
 8002dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dc6:	23c0      	movs	r3, #192	; 0xc0
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4013      	ands	r3, r2
 8002dcc:	22c0      	movs	r2, #192	; 0xc0
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d02a      	beq.n	8002e2a <UART_SetConfig+0x176>
 8002dd4:	22c0      	movs	r2, #192	; 0xc0
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d82e      	bhi.n	8002e3a <UART_SetConfig+0x186>
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d012      	beq.n	8002e0a <UART_SetConfig+0x156>
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d826      	bhi.n	8002e3a <UART_SetConfig+0x186>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <UART_SetConfig+0x146>
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	00d2      	lsls	r2, r2, #3
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d010      	beq.n	8002e1a <UART_SetConfig+0x166>
 8002df8:	e01f      	b.n	8002e3a <UART_SetConfig+0x186>
 8002dfa:	231b      	movs	r3, #27
 8002dfc:	2218      	movs	r2, #24
 8002dfe:	4694      	mov	ip, r2
 8002e00:	44bc      	add	ip, r7
 8002e02:	4463      	add	r3, ip
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e026      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002e0a:	231b      	movs	r3, #27
 8002e0c:	2218      	movs	r2, #24
 8002e0e:	4694      	mov	ip, r2
 8002e10:	44bc      	add	ip, r7
 8002e12:	4463      	add	r3, ip
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e01e      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002e1a:	231b      	movs	r3, #27
 8002e1c:	2218      	movs	r2, #24
 8002e1e:	4694      	mov	ip, r2
 8002e20:	44bc      	add	ip, r7
 8002e22:	4463      	add	r3, ip
 8002e24:	2204      	movs	r2, #4
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e016      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002e2a:	231b      	movs	r3, #27
 8002e2c:	2218      	movs	r2, #24
 8002e2e:	4694      	mov	ip, r2
 8002e30:	44bc      	add	ip, r7
 8002e32:	4463      	add	r3, ip
 8002e34:	2208      	movs	r2, #8
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e00e      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002e3a:	231b      	movs	r3, #27
 8002e3c:	2218      	movs	r2, #24
 8002e3e:	4694      	mov	ip, r2
 8002e40:	44bc      	add	ip, r7
 8002e42:	4463      	add	r3, ip
 8002e44:	2210      	movs	r2, #16
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e006      	b.n	8002e58 <UART_SetConfig+0x1a4>
 8002e4a:	231b      	movs	r3, #27
 8002e4c:	2218      	movs	r2, #24
 8002e4e:	4694      	mov	ip, r2
 8002e50:	44bc      	add	ip, r7
 8002e52:	4463      	add	r3, ip
 8002e54:	2210      	movs	r2, #16
 8002e56:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <UART_SetConfig+0x330>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d000      	beq.n	8002e64 <UART_SetConfig+0x1b0>
 8002e62:	e088      	b.n	8002f76 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e64:	231b      	movs	r3, #27
 8002e66:	2218      	movs	r2, #24
 8002e68:	4694      	mov	ip, r2
 8002e6a:	44bc      	add	ip, r7
 8002e6c:	4463      	add	r3, ip
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d01d      	beq.n	8002eb0 <UART_SetConfig+0x1fc>
 8002e74:	dc20      	bgt.n	8002eb8 <UART_SetConfig+0x204>
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d015      	beq.n	8002ea6 <UART_SetConfig+0x1f2>
 8002e7a:	dc1d      	bgt.n	8002eb8 <UART_SetConfig+0x204>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <UART_SetConfig+0x1d2>
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d005      	beq.n	8002e90 <UART_SetConfig+0x1dc>
 8002e84:	e018      	b.n	8002eb8 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e86:	f7ff fd6f 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e8e:	e01d      	b.n	8002ecc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e90:	4b57      	ldr	r3, [pc, #348]	; (8002ff0 <UART_SetConfig+0x33c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2210      	movs	r2, #16
 8002e96:	4013      	ands	r3, r2
 8002e98:	d002      	beq.n	8002ea0 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e9a:	4b56      	ldr	r3, [pc, #344]	; (8002ff4 <UART_SetConfig+0x340>)
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e9e:	e015      	b.n	8002ecc <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002ea0:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <UART_SetConfig+0x344>)
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea4:	e012      	b.n	8002ecc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea6:	f7ff fcaf 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eae:	e00d      	b.n	8002ecc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eb6:	e009      	b.n	8002ecc <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ebc:	231a      	movs	r3, #26
 8002ebe:	2218      	movs	r2, #24
 8002ec0:	4694      	mov	ip, r2
 8002ec2:	44bc      	add	ip, r7
 8002ec4:	4463      	add	r3, ip
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
        break;
 8002eca:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d100      	bne.n	8002ed4 <UART_SetConfig+0x220>
 8002ed2:	e139      	b.n	8003148 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	0013      	movs	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d305      	bcc.n	8002ef0 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d907      	bls.n	8002f00 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002ef0:	231a      	movs	r3, #26
 8002ef2:	2218      	movs	r2, #24
 8002ef4:	4694      	mov	ip, r2
 8002ef6:	44bc      	add	ip, r7
 8002ef8:	4463      	add	r3, ip
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e123      	b.n	8003148 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	6939      	ldr	r1, [r7, #16]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	000b      	movs	r3, r1
 8002f0e:	0e1b      	lsrs	r3, r3, #24
 8002f10:	0010      	movs	r0, r2
 8002f12:	0205      	lsls	r5, r0, #8
 8002f14:	431d      	orrs	r5, r3
 8002f16:	000b      	movs	r3, r1
 8002f18:	021c      	lsls	r4, r3, #8
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	1900      	adds	r0, r0, r4
 8002f2c:	4169      	adcs	r1, r5
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f7fd f970 	bl	8000220 <__aeabi_uldivmod>
 8002f40:	0002      	movs	r2, r0
 8002f42:	000b      	movs	r3, r1
 8002f44:	0013      	movs	r3, r2
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4a:	23c0      	movs	r3, #192	; 0xc0
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d309      	bcc.n	8002f66 <UART_SetConfig+0x2b2>
 8002f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	035b      	lsls	r3, r3, #13
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d204      	bcs.n	8002f66 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	e0f0      	b.n	8003148 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002f66:	231a      	movs	r3, #26
 8002f68:	2218      	movs	r2, #24
 8002f6a:	4694      	mov	ip, r2
 8002f6c:	44bc      	add	ip, r7
 8002f6e:	4463      	add	r3, ip
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e0e8      	b.n	8003148 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d000      	beq.n	8002f84 <UART_SetConfig+0x2d0>
 8002f82:	e087      	b.n	8003094 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002f84:	231b      	movs	r3, #27
 8002f86:	2218      	movs	r2, #24
 8002f88:	4694      	mov	ip, r2
 8002f8a:	44bc      	add	ip, r7
 8002f8c:	4463      	add	r3, ip
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d835      	bhi.n	8003000 <UART_SetConfig+0x34c>
 8002f94:	009a      	lsls	r2, r3, #2
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <UART_SetConfig+0x348>)
 8002f98:	18d3      	adds	r3, r2, r3
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9e:	f7ff fce3 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa6:	e035      	b.n	8003014 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7ff fcf4 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8002fac:	0003      	movs	r3, r0
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fb0:	e030      	b.n	8003014 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <UART_SetConfig+0x33c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d002      	beq.n	8002fc2 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <UART_SetConfig+0x340>)
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fc0:	e028      	b.n	8003014 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <UART_SetConfig+0x344>)
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fc6:	e025      	b.n	8003014 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc8:	f7ff fc1e 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fd0:	e020      	b.n	8003014 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fd8:	e01c      	b.n	8003014 <UART_SetConfig+0x360>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	efff69f3 	.word	0xefff69f3
 8002fe0:	ffffcfff 	.word	0xffffcfff
 8002fe4:	40004800 	.word	0x40004800
 8002fe8:	fffff4ff 	.word	0xfffff4ff
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	003d0900 	.word	0x003d0900
 8002ff8:	00f42400 	.word	0x00f42400
 8002ffc:	0800364c 	.word	0x0800364c
      default:
        pclk = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003004:	231a      	movs	r3, #26
 8003006:	2218      	movs	r2, #24
 8003008:	4694      	mov	ip, r2
 800300a:	44bc      	add	ip, r7
 800300c:	4463      	add	r3, ip
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
        break;
 8003012:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d100      	bne.n	800301c <UART_SetConfig+0x368>
 800301a:	e095      	b.n	8003148 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	005a      	lsls	r2, r3, #1
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	18d2      	adds	r2, r2, r3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0019      	movs	r1, r3
 800302e:	0010      	movs	r0, r2
 8003030:	f7fd f86a 	bl	8000108 <__udivsi3>
 8003034:	0003      	movs	r3, r0
 8003036:	b29b      	uxth	r3, r3
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d921      	bls.n	8003084 <UART_SetConfig+0x3d0>
 8003040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	429a      	cmp	r2, r3
 8003048:	d21c      	bcs.n	8003084 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	b29a      	uxth	r2, r3
 800304e:	200e      	movs	r0, #14
 8003050:	2418      	movs	r4, #24
 8003052:	193b      	adds	r3, r7, r4
 8003054:	181b      	adds	r3, r3, r0
 8003056:	210f      	movs	r1, #15
 8003058:	438a      	bics	r2, r1
 800305a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	2207      	movs	r2, #7
 8003064:	4013      	ands	r3, r2
 8003066:	b299      	uxth	r1, r3
 8003068:	193b      	adds	r3, r7, r4
 800306a:	181b      	adds	r3, r3, r0
 800306c:	193a      	adds	r2, r7, r4
 800306e:	1812      	adds	r2, r2, r0
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	193a      	adds	r2, r7, r4
 800307c:	1812      	adds	r2, r2, r0
 800307e:	8812      	ldrh	r2, [r2, #0]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	e061      	b.n	8003148 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003084:	231a      	movs	r3, #26
 8003086:	2218      	movs	r2, #24
 8003088:	4694      	mov	ip, r2
 800308a:	44bc      	add	ip, r7
 800308c:	4463      	add	r3, ip
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e059      	b.n	8003148 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003094:	231b      	movs	r3, #27
 8003096:	2218      	movs	r2, #24
 8003098:	4694      	mov	ip, r2
 800309a:	44bc      	add	ip, r7
 800309c:	4463      	add	r3, ip
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d822      	bhi.n	80030ea <UART_SetConfig+0x436>
 80030a4:	009a      	lsls	r2, r3, #2
 80030a6:	4b30      	ldr	r3, [pc, #192]	; (8003168 <UART_SetConfig+0x4b4>)
 80030a8:	18d3      	adds	r3, r2, r3
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ae:	f7ff fc5b 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 80030b2:	0003      	movs	r3, r0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030b6:	e022      	b.n	80030fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b8:	f7ff fc6c 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80030bc:	0003      	movs	r3, r0
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030c0:	e01d      	b.n	80030fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <UART_SetConfig+0x4b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2210      	movs	r2, #16
 80030c8:	4013      	ands	r3, r2
 80030ca:	d002      	beq.n	80030d2 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <UART_SetConfig+0x4bc>)
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030d0:	e015      	b.n	80030fe <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <UART_SetConfig+0x4c0>)
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030d6:	e012      	b.n	80030fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d8:	f7ff fb96 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80030dc:	0003      	movs	r3, r0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030e0:	e00d      	b.n	80030fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030e8:	e009      	b.n	80030fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030ee:	231a      	movs	r3, #26
 80030f0:	2218      	movs	r2, #24
 80030f2:	4694      	mov	ip, r2
 80030f4:	44bc      	add	ip, r7
 80030f6:	4463      	add	r3, ip
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
        break;
 80030fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d021      	beq.n	8003148 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	085a      	lsrs	r2, r3, #1
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	18d2      	adds	r2, r2, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	0019      	movs	r1, r3
 8003114:	0010      	movs	r0, r2
 8003116:	f7fc fff7 	bl	8000108 <__udivsi3>
 800311a:	0003      	movs	r3, r0
 800311c:	b29b      	uxth	r3, r3
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d909      	bls.n	800313a <UART_SetConfig+0x486>
 8003126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	025b      	lsls	r3, r3, #9
 800312c:	429a      	cmp	r2, r3
 800312e:	d204      	bcs.n	800313a <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	e006      	b.n	8003148 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800313a:	231a      	movs	r3, #26
 800313c:	2218      	movs	r2, #24
 800313e:	4694      	mov	ip, r2
 8003140:	44bc      	add	ip, r7
 8003142:	4463      	add	r3, ip
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2200      	movs	r2, #0
 800314c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2200      	movs	r2, #0
 8003152:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003154:	231a      	movs	r3, #26
 8003156:	2218      	movs	r2, #24
 8003158:	4694      	mov	ip, r2
 800315a:	44bc      	add	ip, r7
 800315c:	4463      	add	r3, ip
 800315e:	781b      	ldrb	r3, [r3, #0]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b00e      	add	sp, #56	; 0x38
 8003166:	bdb0      	pop	{r4, r5, r7, pc}
 8003168:	08003670 	.word	0x08003670
 800316c:	40021000 	.word	0x40021000
 8003170:	003d0900 	.word	0x003d0900
 8003174:	00f42400 	.word	0x00f42400

08003178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	d00b      	beq.n	80031a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <UART_AdvFeatureConfig+0x144>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d00b      	beq.n	80031c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <UART_AdvFeatureConfig+0x148>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <UART_AdvFeatureConfig+0x14c>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2208      	movs	r2, #8
 80031ec:	4013      	ands	r3, r2
 80031ee:	d00b      	beq.n	8003208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <UART_AdvFeatureConfig+0x150>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2210      	movs	r2, #16
 800320e:	4013      	ands	r3, r2
 8003210:	d00b      	beq.n	800322a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <UART_AdvFeatureConfig+0x154>)
 800321a:	4013      	ands	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2220      	movs	r2, #32
 8003230:	4013      	ands	r3, r2
 8003232:	d00b      	beq.n	800324c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <UART_AdvFeatureConfig+0x158>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2240      	movs	r2, #64	; 0x40
 8003252:	4013      	ands	r3, r2
 8003254:	d01d      	beq.n	8003292 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <UART_AdvFeatureConfig+0x15c>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	035b      	lsls	r3, r3, #13
 8003276:	429a      	cmp	r2, r3
 8003278:	d10b      	bne.n	8003292 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <UART_AdvFeatureConfig+0x160>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	4013      	ands	r3, r2
 800329a:	d00b      	beq.n	80032b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <UART_AdvFeatureConfig+0x164>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	fffdffff 	.word	0xfffdffff
 80032c0:	fffeffff 	.word	0xfffeffff
 80032c4:	fffbffff 	.word	0xfffbffff
 80032c8:	ffff7fff 	.word	0xffff7fff
 80032cc:	ffffefff 	.word	0xffffefff
 80032d0:	ffffdfff 	.word	0xffffdfff
 80032d4:	ffefffff 	.word	0xffefffff
 80032d8:	ff9fffff 	.word	0xff9fffff
 80032dc:	fff7ffff 	.word	0xfff7ffff

080032e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	2100      	movs	r1, #0
 80032ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032f0:	f7fd fe8a 	bl	8001008 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2208      	movs	r2, #8
 8003300:	4013      	ands	r3, r2
 8003302:	2b08      	cmp	r3, #8
 8003304:	d10c      	bne.n	8003320 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	0391      	lsls	r1, r2, #14
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <UART_CheckIdleState+0x8c>)
 8003310:	9200      	str	r2, [sp, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	f000 f82c 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 8003318:	1e03      	subs	r3, r0, #0
 800331a:	d001      	beq.n	8003320 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e021      	b.n	8003364 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	4013      	ands	r3, r2
 800332a:	2b04      	cmp	r3, #4
 800332c:	d10c      	bne.n	8003348 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	03d1      	lsls	r1, r2, #15
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4a0d      	ldr	r2, [pc, #52]	; (800336c <UART_CheckIdleState+0x8c>)
 8003338:	9200      	str	r2, [sp, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	f000 f818 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d001      	beq.n	8003348 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e00d      	b.n	8003364 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2274      	movs	r2, #116	; 0x74
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b004      	add	sp, #16
 800336a:	bd80      	pop	{r7, pc}
 800336c:	01ffffff 	.word	0x01ffffff

08003370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b094      	sub	sp, #80	; 0x50
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	1dfb      	adds	r3, r7, #7
 800337e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003380:	e0a3      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003384:	3301      	adds	r3, #1
 8003386:	d100      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003388:	e09f      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fd fe3d 	bl	8001008 <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800339a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339c:	2b00      	cmp	r3, #0
 800339e:	d13d      	bne.n	800341c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a0:	f3ef 8310 	mrs	r3, PRIMASK
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a8:	647b      	str	r3, [r7, #68]	; 0x44
 80033aa:	2301      	movs	r3, #1
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	494c      	ldr	r1, [pc, #304]	; (80034f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	f383 8810 	msr	PRIMASK, r3
}
 80033d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d2:	f3ef 8310 	mrs	r3, PRIMASK
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033da:	643b      	str	r3, [r7, #64]	; 0x40
 80033dc:	2301      	movs	r3, #1
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	f383 8810 	msr	PRIMASK, r3
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	438a      	bics	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2274      	movs	r2, #116	; 0x74
 8003414:	2100      	movs	r1, #0
 8003416:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e067      	b.n	80034ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2204      	movs	r2, #4
 8003424:	4013      	ands	r3, r2
 8003426:	d050      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	401a      	ands	r2, r3
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	429a      	cmp	r2, r3
 800343a:	d146      	bne.n	80034ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003446:	f3ef 8310 	mrs	r3, PRIMASK
 800344a:	613b      	str	r3, [r7, #16]
  return(result);
 800344c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003450:	2301      	movs	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4923      	ldr	r1, [pc, #140]	; (80034f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003478:	f3ef 8310 	mrs	r3, PRIMASK
 800347c:	61fb      	str	r3, [r7, #28]
  return(result);
 800347e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003480:	64bb      	str	r3, [r7, #72]	; 0x48
 8003482:	2301      	movs	r3, #1
 8003484:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	438a      	bics	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f383 8810 	msr	PRIMASK, r3
}
 80034a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	2120      	movs	r1, #32
 80034bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2274      	movs	r2, #116	; 0x74
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e010      	b.n	80034ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	425a      	negs	r2, r3
 80034da:	4153      	adcs	r3, r2
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	001a      	movs	r2, r3
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d100      	bne.n	80034ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80034e8:	e74b      	b.n	8003382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b014      	add	sp, #80	; 0x50
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	fffffe5f 	.word	0xfffffe5f

080034f8 <__libc_init_array>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	2600      	movs	r6, #0
 80034fc:	4d0c      	ldr	r5, [pc, #48]	; (8003530 <__libc_init_array+0x38>)
 80034fe:	4c0d      	ldr	r4, [pc, #52]	; (8003534 <__libc_init_array+0x3c>)
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	42a6      	cmp	r6, r4
 8003506:	d109      	bne.n	800351c <__libc_init_array+0x24>
 8003508:	2600      	movs	r6, #0
 800350a:	f000 f821 	bl	8003550 <_init>
 800350e:	4d0a      	ldr	r5, [pc, #40]	; (8003538 <__libc_init_array+0x40>)
 8003510:	4c0a      	ldr	r4, [pc, #40]	; (800353c <__libc_init_array+0x44>)
 8003512:	1b64      	subs	r4, r4, r5
 8003514:	10a4      	asrs	r4, r4, #2
 8003516:	42a6      	cmp	r6, r4
 8003518:	d105      	bne.n	8003526 <__libc_init_array+0x2e>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	00b3      	lsls	r3, r6, #2
 800351e:	58eb      	ldr	r3, [r5, r3]
 8003520:	4798      	blx	r3
 8003522:	3601      	adds	r6, #1
 8003524:	e7ee      	b.n	8003504 <__libc_init_array+0xc>
 8003526:	00b3      	lsls	r3, r6, #2
 8003528:	58eb      	ldr	r3, [r5, r3]
 800352a:	4798      	blx	r3
 800352c:	3601      	adds	r6, #1
 800352e:	e7f2      	b.n	8003516 <__libc_init_array+0x1e>
 8003530:	0800369c 	.word	0x0800369c
 8003534:	0800369c 	.word	0x0800369c
 8003538:	0800369c 	.word	0x0800369c
 800353c:	080036a0 	.word	0x080036a0

08003540 <memset>:
 8003540:	0003      	movs	r3, r0
 8003542:	1882      	adds	r2, r0, r2
 8003544:	4293      	cmp	r3, r2
 8003546:	d100      	bne.n	800354a <memset+0xa>
 8003548:	4770      	bx	lr
 800354a:	7019      	strb	r1, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	e7f9      	b.n	8003544 <memset+0x4>

08003550 <_init>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003556:	bc08      	pop	{r3}
 8003558:	469e      	mov	lr, r3
 800355a:	4770      	bx	lr

0800355c <_fini>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr
