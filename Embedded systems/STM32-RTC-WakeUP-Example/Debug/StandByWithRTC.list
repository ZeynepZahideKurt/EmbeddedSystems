
StandByWithRTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003800  08003800  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08003878  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003878  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc56  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bff  00000000  00000000  0002bcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011790  00000000  00000000  0002ea18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000baae  00000000  00000000  000401a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a33f  00000000  00000000  0004bc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5f95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000227c  00000000  00000000  000b5fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036e4 	.word	0x080036e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080036e4 	.word	0x080036e4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004b6:	f000 fb3f 	bl	8000b38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ba:	f000 f8a3 	bl	8000604 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004be:	f000 f97f 	bl	80007c0 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80004c2:	f000 f919 	bl	80006f8 <MX_LPUART1_UART_Init>
	MX_RTC_Init();
 80004c6:	f000 f945 	bl	8000754 <MX_RTC_Init>

	/* USER CODE BEGIN 2 */

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80004ca:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <main+0x124>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	2202      	movs	r2, #2
 80004d0:	4013      	ands	r3, r2
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d12e      	bne.n	8000534 <main+0x84>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80004d6:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <main+0x124>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b3e      	ldr	r3, [pc, #248]	; (80005d4 <main+0x124>)
 80004dc:	2108      	movs	r1, #8
 80004de:	430a      	orrs	r2, r1
 80004e0:	601a      	str	r2, [r3, #0]
		printf("Wakeup from the STANDBY MODE\n\n");
 80004e2:	4a3d      	ldr	r2, [pc, #244]	; (80005d8 <main+0x128>)
 80004e4:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <main+0x12c>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 fcd5 	bl	8002e98 <siprintf>
 80004ee:	0003      	movs	r3, r0
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <main+0x130>)
 80004f4:	4939      	ldr	r1, [pc, #228]	; (80005dc <main+0x12c>)
 80004f6:	483b      	ldr	r0, [pc, #236]	; (80005e4 <main+0x134>)
 80004f8:	f001 ffd2 	bl	80024a0 <HAL_UART_Transmit>
		for (int i = 0; i < 20; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	e00c      	b.n	800051c <main+0x6c>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	019b      	lsls	r3, r3, #6
 8000506:	4a38      	ldr	r2, [pc, #224]	; (80005e8 <main+0x138>)
 8000508:	0019      	movs	r1, r3
 800050a:	0010      	movs	r0, r2
 800050c:	f000 fe11 	bl	8001132 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000510:	20c8      	movs	r0, #200	; 0xc8
 8000512:	f000 fb81 	bl	8000c18 <HAL_Delay>
		for (int i = 0; i < 20; i++) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3301      	adds	r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b13      	cmp	r3, #19
 8000520:	ddef      	ble.n	8000502 <main+0x52>
		}
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fe2e 	bl	8001188 <HAL_PWR_DisableWakeUpPin>
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800052c:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <main+0x13c>)
 800052e:	0018      	movs	r0, r3
 8000530:	f001 fece 	bl	80022d0 <HAL_RTCEx_DeactivateWakeUpTimer>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <main+0x124>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <main+0x124>)
 800053a:	2104      	movs	r1, #4
 800053c:	430a      	orrs	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <main+0x13c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	22ff      	movs	r2, #255	; 0xff
 8000548:	401a      	ands	r2, r3
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <main+0x13c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4928      	ldr	r1, [pc, #160]	; (80005f0 <main+0x140>)
 8000550:	430a      	orrs	r2, r1
 8000552:	60da      	str	r2, [r3, #12]
	printf("About to enter the STANDBY MODE\n\n");
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <main+0x144>)
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <main+0x12c>)
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f002 fc9c 	bl	8002e98 <siprintf>
 8000560:	0003      	movs	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <main+0x130>)
 8000566:	491d      	ldr	r1, [pc, #116]	; (80005dc <main+0x12c>)
 8000568:	481e      	ldr	r0, [pc, #120]	; (80005e4 <main+0x134>)
 800056a:	f001 ff99 	bl	80024a0 <HAL_UART_Transmit>
	for (int i = 0; i < 5; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	e00d      	b.n	8000590 <main+0xe0>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	019b      	lsls	r3, r3, #6
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <main+0x138>)
 800057a:	0019      	movs	r1, r3
 800057c:	0010      	movs	r0, r2
 800057e:	f000 fdd8 	bl	8001132 <HAL_GPIO_TogglePin>
		HAL_Delay(750);
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <main+0x148>)
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fb47 	bl	8000c18 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	ddee      	ble.n	8000574 <main+0xc4>
	}
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fde4 	bl	8001168 <HAL_PWR_EnableWakeUpPin>
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A55, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80005a0:	4916      	ldr	r1, [pc, #88]	; (80005fc <main+0x14c>)
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <main+0x13c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fdcc 	bl	8002144 <HAL_RTCEx_SetWakeUpTimer_IT>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <main+0x104>
			!= HAL_OK) {
		Error_Handler();
 80005b0:	f000 f97e 	bl	80008b0 <Error_Handler>
	}
	printf("STANDBY MODE is ON\n\n");
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <main+0x150>)
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0x12c>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fc6c 	bl	8002e98 <siprintf>
 80005c0:	0003      	movs	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <main+0x130>)
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <main+0x12c>)
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x134>)
 80005ca:	f001 ff69 	bl	80024a0 <HAL_UART_Transmit>

	HAL_PWR_EnterSTANDBYMode();
 80005ce:	f000 fded 	bl	80011ac <HAL_PWR_EnterSTANDBYMode>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005d2:	e7fe      	b.n	80005d2 <main+0x122>
 80005d4:	40007000 	.word	0x40007000
 80005d8:	080036fc 	.word	0x080036fc
 80005dc:	20000098 	.word	0x20000098
 80005e0:	0000ffff 	.word	0x0000ffff
 80005e4:	20000198 	.word	0x20000198
 80005e8:	50000800 	.word	0x50000800
 80005ec:	2000021c 	.word	0x2000021c
 80005f0:	fffffb7f 	.word	0xfffffb7f
 80005f4:	0800371c 	.word	0x0800371c
 80005f8:	000002ee 	.word	0x000002ee
 80005fc:	00005a55 	.word	0x00005a55
 8000600:	08003740 	.word	0x08003740

08000604 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b099      	sub	sp, #100	; 0x64
 8000608:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800060a:	242c      	movs	r4, #44	; 0x2c
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2334      	movs	r3, #52	; 0x34
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f002 fc37 	bl	8002e88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800061a:	2318      	movs	r3, #24
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	0018      	movs	r0, r3
 8000620:	2314      	movs	r3, #20
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f002 fc2f 	bl	8002e88 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800062a:	003b      	movs	r3, r7
 800062c:	0018      	movs	r0, r3
 800062e:	2318      	movs	r3, #24
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f002 fc28 	bl	8002e88 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemClock_Config+0xec>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <SystemClock_Config+0xf0>)
 800063e:	401a      	ands	r2, r3
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0xec>)
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	0109      	lsls	r1, r1, #4
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800064a:	0021      	movs	r1, r4
 800064c:	187b      	adds	r3, r7, r1
 800064e:	220a      	movs	r2, #10
 8000650:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2210      	movs	r2, #16
 800065c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2202      	movs	r2, #2
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	02d2      	lsls	r2, r2, #11
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000680:	187b      	adds	r3, r7, r1
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fda8 	bl	80011d8 <HAL_RCC_OscConfig>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x8c>
		Error_Handler();
 800068c:	f000 f910 	bl	80008b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000690:	2118      	movs	r1, #24
 8000692:	187b      	adds	r3, r7, r1
 8000694:	220f      	movs	r2, #15
 8000696:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2203      	movs	r2, #3
 800069c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2101      	movs	r1, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 f90b 	bl	80018d0 <HAL_RCC_ClockConfig>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xbe>
		Error_Handler();
 80006be:	f000 f8f7 	bl	80008b0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1
 80006c2:	003b      	movs	r3, r7
 80006c4:	2224      	movs	r2, #36	; 0x24
 80006c6:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_RTC;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	0292      	lsls	r2, r2, #10
 80006d4:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006d6:	003b      	movs	r3, r7
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fb1d 	bl	8001d18 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xe2>
		Error_Handler();
 80006e2:	f000 f8e5 	bl	80008b0 <Error_Handler>
	}
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b019      	add	sp, #100	; 0x64
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40007000 	.word	0x40007000
 80006f4:	ffffe7ff 	.word	0xffffe7ff

080006f8 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_LPUART1_UART_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 8000704:	22e1      	movs	r2, #225	; 0xe1
 8000706:	0252      	lsls	r2, r2, #9
 8000708:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_LPUART1_UART_Init+0x54>)
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fe5e 	bl	80023f8 <HAL_UART_Init>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 8000740:	f000 f8b6 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000198 	.word	0x20000198
 8000750:	40004800 	.word	0x40004800

08000754 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_RTC_Init+0x60>)
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <MX_RTC_Init+0x64>)
 800075c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_RTC_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_RTC_Init+0x60>)
 8000766:	227f      	movs	r2, #127	; 0x7f
 8000768:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 295;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_RTC_Init+0x60>)
 800076c:	2228      	movs	r2, #40	; 0x28
 800076e:	32ff      	adds	r2, #255	; 0xff
 8000770:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_RTC_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_RTC_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_RTC_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_RTC_Init+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_RTC_Init+0x60>)
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fbe9 	bl	8001f64 <HAL_RTC_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_RTC_Init+0x46>
		Error_Handler();
 8000796:	f000 f88b 	bl	80008b0 <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A55, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <MX_RTC_Init+0x68>)
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <MX_RTC_Init+0x60>)
 800079e:	2200      	movs	r2, #0
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fccf 	bl	8002144 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80007aa:	f000 f881 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000021c 	.word	0x2000021c
 80007b8:	40002800 	.word	0x40002800
 80007bc:	00005a55 	.word	0x00005a55

080007c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007c6:	2414      	movs	r4, #20
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2314      	movs	r3, #20
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f002 fb59 	bl	8002e88 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007dc:	2104      	movs	r1, #4
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	2204      	movs	r2, #4
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_GPIO_Init+0xe8>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_GPIO_Init+0xe8>)
 800080c:	2101      	movs	r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000824:	2102      	movs	r1, #2
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_GPIO_Init+0xe8>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	2202      	movs	r2, #2
 8000830:	4013      	ands	r3, r2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	481c      	ldr	r0, [pc, #112]	; (80008ac <MX_GPIO_Init+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	0019      	movs	r1, r3
 8000840:	f000 fc5a 	bl	80010f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	2200      	movs	r2, #0
 800084a:	2104      	movs	r1, #4
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fc53 	bl	80010f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : led_Pin */
	GPIO_InitStruct.Pin = led_Pin;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0192      	lsls	r2, r2, #6
 8000858:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800086c:	193b      	adds	r3, r7, r4
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_GPIO_Init+0xec>)
 8000870:	0019      	movs	r1, r3
 8000872:	0010      	movs	r0, r2
 8000874:	f000 fad2 	bl	8000e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000878:	0021      	movs	r1, r4
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2204      	movs	r2, #4
 800087e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2201      	movs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	187a      	adds	r2, r7, r1
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	0011      	movs	r1, r2
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fabe 	bl	8000e1c <HAL_GPIO_Init>

}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b00b      	add	sp, #44	; 0x2c
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000800 	.word	0x50000800

080008b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <HAL_MspInit+0x24>)
 80008c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x24>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	430a      	orrs	r2, r1
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <HAL_MspInit+0x24>)
 80008ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_MspInit+0x24>)
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0549      	lsls	r1, r1, #21
 80008d6:	430a      	orrs	r2, r1
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b08b      	sub	sp, #44	; 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008ec:	2414      	movs	r4, #20
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	2314      	movs	r3, #20
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f002 fac6 	bl	8002e88 <memset>
	if (huart->Instance == LPUART1) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <HAL_UART_MspInit+0xc0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d14a      	bne.n	800099c <HAL_UART_MspInit+0xb8>
		/* USER CODE BEGIN LPUART1_MspInit 0 */

		/* USER CODE END LPUART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_LPUART1_CLK_ENABLE();
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 8000908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	02c9      	lsls	r1, r1, #11
 8000910:	430a      	orrs	r2, r1
 8000912:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 8000916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 800091a:	2104      	movs	r1, #4
 800091c:	430a      	orrs	r2, r1
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 8000922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000924:	2204      	movs	r2, #4
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 800092e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 8000932:	2102      	movs	r1, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_UART_MspInit+0xc4>)
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	2202      	movs	r2, #2
 800093e:	4013      	ands	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
		/**LPUART1 GPIO Configuration
		 PC0     ------> LPUART1_RX
		 PB10     ------> LPUART1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2203      	movs	r2, #3
 800095a:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2206      	movs	r2, #6
 8000960:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	193b      	adds	r3, r7, r4
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <HAL_UART_MspInit+0xc8>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f000 fa57 	bl	8000e1c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096e:	0021      	movs	r1, r4
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	00d2      	lsls	r2, r2, #3
 8000976:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2202      	movs	r2, #2
 800097c:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2203      	movs	r2, #3
 8000988:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2206      	movs	r2, #6
 800098e:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	187b      	adds	r3, r7, r1
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_UART_MspInit+0xcc>)
 8000994:	0019      	movs	r1, r3
 8000996:	0010      	movs	r0, r2
 8000998:	f000 fa40 	bl	8000e1c <HAL_GPIO_Init>
		/* USER CODE BEGIN LPUART1_MspInit 1 */

		/* USER CODE END LPUART1_MspInit 1 */
	}

}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b00b      	add	sp, #44	; 0x2c
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	40004800 	.word	0x40004800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	50000800 	.word	0x50000800
 80009b0:	50000400 	.word	0x50000400

080009b4 <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if (hrtc->Instance == RTC) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_RTC_MspInit+0x38>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d10e      	bne.n	80009e4 <HAL_RTC_MspInit+0x30>
		/* USER CODE BEGIN RTC_MspInit 0 */

		/* USER CODE END RTC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_RTC_MspInit+0x3c>)
 80009c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_RTC_MspInit+0x3c>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	02c9      	lsls	r1, r1, #11
 80009d0:	430a      	orrs	r2, r1
 80009d2:	651a      	str	r2, [r3, #80]	; 0x50
		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2002      	movs	r0, #2
 80009da:	f000 f9ed 	bl	8000db8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(RTC_IRQn);
 80009de:	2002      	movs	r0, #2
 80009e0:	f000 f9ff 	bl	8000de2 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN RTC_MspInit 1 */

		/* USER CODE END RTC_MspInit 1 */
	}

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40002800 	.word	0x40002800
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable Interrupt.
 */
void NMI_Handler(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000a18:	f000 f8e2 	bl	8000be0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <RTC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
 */
void RTC_IRQHandler(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_IRQn 0 */

	/* USER CODE END RTC_IRQn 0 */
	HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <RTC_IRQHandler+0x14>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fcb2 	bl	8002394 <HAL_RTCEx_WakeUpTimerIRQHandler>
	/* USER CODE BEGIN RTC_IRQn 1 */

	/* USER CODE END RTC_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	2000021c 	.word	0x2000021c

08000a3c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
		errno = ENOMEM;
 8000a6c:	f002 f9e2 	bl	8002e34 <__errno>
 8000a70:	0003      	movs	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	425b      	negs	r3, r3
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	18d2      	adds	r2, r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_sbrk+0x64>)
 8000a8c:	601a      	str	r2, [r3, #0]

	return (void*) prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b006      	add	sp, #24
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20002000 	.word	0x20002000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	20000258 	.word	0x20000258

08000aa8 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ab6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <LoopForever+0x6>)
    LDR R1, [R0]
 8000aba:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000abc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <LoopForever+0xa>)
    CMP R1, R2
 8000ac0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ac2:	d105      	bne.n	8000ad0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ac6:	4913      	ldr	r1, [pc, #76]	; (8000b14 <LoopForever+0x12>)
    STR R1, [R0]
 8000ac8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000aca:	4813      	ldr	r0, [pc, #76]	; (8000b18 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000acc:	4913      	ldr	r1, [pc, #76]	; (8000b1c <LoopForever+0x1a>)
    STR R1, [R0]
 8000ace:	6001      	str	r1, [r0, #0]

08000ad0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ad2:	4914      	ldr	r1, [pc, #80]	; (8000b24 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <LoopForever+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ae8:	4c11      	ldr	r4, [pc, #68]	; (8000b30 <LoopForever+0x2e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000af6:	f7ff ffd7 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f002 f9a1 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fcd7 	bl	80004b0 <main>

08000b02 <LoopForever>:

LoopForever:
    b LoopForever
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
   ldr   r0, =_estack
 8000b04:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000b08:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b0c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b10:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b14:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b18:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b1c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b28:	08003808 	.word	0x08003808
  ldr r2, =_sbss
 8000b2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b30:	20000254 	.word	0x20000254

08000b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_IRQHandler>
	...

08000b38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x3c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Init+0x3c>)
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f811 	bl	8000b78 <HAL_InitTick>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	e001      	b.n	8000b66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b62:	f7ff feab 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000b82:	681c      	ldr	r4, [r3, #0]
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_InitTick+0x60>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	0019      	movs	r1, r3
 8000b8a:	23fa      	movs	r3, #250	; 0xfa
 8000b8c:	0098      	lsls	r0, r3, #2
 8000b8e:	f7ff fac5 	bl	800011c <__udivsi3>
 8000b92:	0003      	movs	r3, r0
 8000b94:	0019      	movs	r1, r3
 8000b96:	0020      	movs	r0, r4
 8000b98:	f7ff fac0 	bl	800011c <__udivsi3>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 f92f 	bl	8000e02 <HAL_SYSTICK_Config>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e00f      	b.n	8000bcc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d80b      	bhi.n	8000bca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 f8fc 	bl	8000db8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_InitTick+0x64>)
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b003      	add	sp, #12
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	001a      	movs	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	18d2      	adds	r2, r2, r3
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000240 	.word	0x20000240

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000240 	.word	0x20000240

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	0003      	movs	r3, r0
 8000c26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	001a      	movs	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	0002      	movs	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b7f      	cmp	r3, #127	; 0x7f
 8000c72:	d809      	bhi.n	8000c88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	001a      	movs	r2, r3
 8000c7a:	231f      	movs	r3, #31
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_EnableIRQ+0x30>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	4091      	lsls	r1, r2
 8000c84:	000a      	movs	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  }
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ca8:	d828      	bhi.n	8000cfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000caa:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <__NVIC_SetPriority+0xd4>)
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	33c0      	adds	r3, #192	; 0xc0
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	589b      	ldr	r3, [r3, r2]
 8000cba:	1dfa      	adds	r2, r7, #7
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	21ff      	movs	r1, #255	; 0xff
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	401a      	ands	r2, r3
 8000cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	22ff      	movs	r2, #255	; 0xff
 8000cd8:	401a      	ands	r2, r3
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	4003      	ands	r3, r0
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce8:	481f      	ldr	r0, [pc, #124]	; (8000d68 <__NVIC_SetPriority+0xd4>)
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	33c0      	adds	r3, #192	; 0xc0
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cfa:	e031      	b.n	8000d60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <__NVIC_SetPriority+0xd8>)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0019      	movs	r1, r3
 8000d04:	230f      	movs	r3, #15
 8000d06:	400b      	ands	r3, r1
 8000d08:	3b08      	subs	r3, #8
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3306      	adds	r3, #6
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	18d3      	adds	r3, r2, r3
 8000d12:	3304      	adds	r3, #4
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	1dfa      	adds	r2, r7, #7
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	400a      	ands	r2, r1
 8000d20:	00d2      	lsls	r2, r2, #3
 8000d22:	21ff      	movs	r1, #255	; 0xff
 8000d24:	4091      	lsls	r1, r2
 8000d26:	000a      	movs	r2, r1
 8000d28:	43d2      	mvns	r2, r2
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	019b      	lsls	r3, r3, #6
 8000d32:	22ff      	movs	r2, #255	; 0xff
 8000d34:	401a      	ands	r2, r3
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	4003      	ands	r3, r0
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <__NVIC_SetPriority+0xd8>)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	001c      	movs	r4, r3
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	4023      	ands	r3, r4
 8000d50:	3b08      	subs	r3, #8
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	430a      	orrs	r2, r1
 8000d56:	3306      	adds	r3, #6
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	18c3      	adds	r3, r0, r3
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b003      	add	sp, #12
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	045b      	lsls	r3, r3, #17
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d301      	bcc.n	8000d88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d84:	2301      	movs	r3, #1
 8000d86:	e010      	b.n	8000daa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <SysTick_Config+0x44>)
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
 8000d94:	2103      	movs	r1, #3
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff ff7c 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x44>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x44>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	1c02      	adds	r2, r0, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	0002      	movs	r2, r0
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff33 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ffaf 	bl	8000d70 <SysTick_Config>
 8000e12:	0003      	movs	r3, r0
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e32:	e149      	b.n	80010c8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <HAL_GPIO_Init+0x30>
 8000e4a:	e13a      	b.n	80010c2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	409a      	lsls	r2, r3
 8000e86:	0013      	movs	r3, r2
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2203      	movs	r2, #3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	58d3      	ldr	r3, [r2, r3]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2207      	movs	r2, #7
 8000f20:	4013      	ands	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2107      	movs	r1, #7
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	6939      	ldr	r1, [r7, #16]
 8000f54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	401a      	ands	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	23c0      	movs	r3, #192	; 0xc0
 8000f90:	029b      	lsls	r3, r3, #10
 8000f92:	4013      	ands	r3, r2
 8000f94:	d100      	bne.n	8000f98 <HAL_GPIO_Init+0x17c>
 8000f96:	e094      	b.n	80010c2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9c:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	589b      	ldr	r3, [r3, r2]
 8000fb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	23a0      	movs	r3, #160	; 0xa0
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x1de>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x1da>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a43      	ldr	r2, [pc, #268]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x1d6>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_GPIO_Init+0x2d4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x1d2>
 8000fea:	2305      	movs	r3, #5
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	2103      	movs	r1, #3
 8001000:	400a      	ands	r2, r1
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <HAL_GPIO_Init+0x2c8>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	025b      	lsls	r3, r3, #9
 8001032:	4013      	ands	r3, r2
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	035b      	lsls	r3, r3, #13
 8001086:	4013      	ands	r3, r2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43da      	mvns	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	039b      	lsls	r3, r3, #14
 80010b0:	4013      	ands	r3, r2
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_GPIO_Init+0x2d8>)
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	1e13      	subs	r3, r2, #0
 80010d2:	d000      	beq.n	80010d6 <HAL_GPIO_Init+0x2ba>
 80010d4:	e6ae      	b.n	8000e34 <HAL_GPIO_Init+0x18>
  }
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	50000400 	.word	0x50000400
 80010ec:	50000800 	.word	0x50000800
 80010f0:	50001c00 	.word	0x50001c00
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	0008      	movs	r0, r1
 8001102:	0011      	movs	r1, r2
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	1c02      	adds	r2, r0, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	1c7b      	adds	r3, r7, #1
 800110c:	1c0a      	adds	r2, r1, #0
 800110e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001110:	1c7b      	adds	r3, r7, #1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001118:	1cbb      	adds	r3, r7, #2
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001122:	1cbb      	adds	r3, r7, #2
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	000a      	movs	r2, r1
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001146:	1cbb      	adds	r3, r7, #2
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	041a      	lsls	r2, r3, #16
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	1cb9      	adds	r1, r7, #2
 8001156:	8809      	ldrh	r1, [r1, #0]
 8001158:	400b      	ands	r3, r1
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b004      	add	sp, #16
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40007000 	.word	0x40007000

08001188 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_PWR_DisableWakeUpPin+0x20>)
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	43d9      	mvns	r1, r3
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_PWR_DisableWakeUpPin+0x20>)
 800119a:	400a      	ands	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	40007000 	.word	0x40007000

080011ac <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80011b6:	2102      	movs	r1, #2
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	430a      	orrs	r2, r1
 80011c6:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80011c8:	bf30      	wfi
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40007000 	.word	0x40007000
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f000 fb6c 	bl	80018c4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ec:	4bc8      	ldr	r3, [pc, #800]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	220c      	movs	r2, #12
 80011f2:	4013      	ands	r3, r2
 80011f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f6:	4bc6      	ldr	r3, [pc, #792]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2201      	movs	r2, #1
 8001208:	4013      	ands	r3, r2
 800120a:	d100      	bne.n	800120e <HAL_RCC_OscConfig+0x36>
 800120c:	e07d      	b.n	800130a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	2b08      	cmp	r3, #8
 8001212:	d007      	beq.n	8001224 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d112      	bne.n	8001240 <HAL_RCC_OscConfig+0x68>
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	429a      	cmp	r2, r3
 8001222:	d10d      	bne.n	8001240 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	4bba      	ldr	r3, [pc, #744]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4013      	ands	r3, r2
 800122e:	d100      	bne.n	8001232 <HAL_RCC_OscConfig+0x5a>
 8001230:	e06a      	b.n	8001308 <HAL_RCC_OscConfig+0x130>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d166      	bne.n	8001308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 fb42 	bl	80018c4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	429a      	cmp	r2, r3
 800124a:	d107      	bne.n	800125c <HAL_RCC_OscConfig+0x84>
 800124c:	4bb0      	ldr	r3, [pc, #704]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4baf      	ldr	r3, [pc, #700]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0249      	lsls	r1, r1, #9
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e027      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	02db      	lsls	r3, r3, #11
 8001264:	429a      	cmp	r2, r3
 8001266:	d10e      	bne.n	8001286 <HAL_RCC_OscConfig+0xae>
 8001268:	4ba9      	ldr	r3, [pc, #676]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4ba8      	ldr	r3, [pc, #672]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	02c9      	lsls	r1, r1, #11
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	4ba6      	ldr	r3, [pc, #664]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4ba5      	ldr	r3, [pc, #660]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	0249      	lsls	r1, r1, #9
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	e012      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 8001286:	4ba2      	ldr	r3, [pc, #648]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4ba1      	ldr	r3, [pc, #644]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800128c:	49a1      	ldr	r1, [pc, #644]	; (8001514 <HAL_RCC_OscConfig+0x33c>)
 800128e:	400a      	ands	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	4b9f      	ldr	r3, [pc, #636]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	4013      	ands	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4b9b      	ldr	r3, [pc, #620]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b9a      	ldr	r3, [pc, #616]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80012a6:	499c      	ldr	r1, [pc, #624]	; (8001518 <HAL_RCC_OscConfig+0x340>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d014      	beq.n	80012de <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fca6 	bl	8000c04 <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012be:	f7ff fca1 	bl	8000c04 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e2f9      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012d0:	4b8f      	ldr	r3, [pc, #572]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4013      	ands	r3, r2
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0xe6>
 80012dc:	e015      	b.n	800130a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fc91 	bl	8000c04 <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc8c 	bl	8000c04 <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e2e4      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x110>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d100      	bne.n	8001316 <HAL_RCC_OscConfig+0x13e>
 8001314:	e099      	b.n	800144a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	2220      	movs	r2, #32
 8001320:	4013      	ands	r3, r2
 8001322:	d009      	beq.n	8001338 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001324:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b79      	ldr	r3, [pc, #484]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800132a:	2120      	movs	r1, #32
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	2220      	movs	r2, #32
 8001334:	4393      	bics	r3, r2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d005      	beq.n	800134a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d13e      	bne.n	80013c2 <HAL_RCC_OscConfig+0x1ea>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d13b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800134a:	4b71      	ldr	r3, [pc, #452]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2204      	movs	r2, #4
 8001350:	4013      	ands	r3, r2
 8001352:	d004      	beq.n	800135e <HAL_RCC_OscConfig+0x186>
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e2b2      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a6e      	ldr	r2, [pc, #440]	; (800151c <HAL_RCC_OscConfig+0x344>)
 8001364:	4013      	ands	r3, r2
 8001366:	0019      	movs	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	021a      	lsls	r2, r3, #8
 800136e:	4b68      	ldr	r3, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001374:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2209      	movs	r2, #9
 800137a:	4393      	bics	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001386:	f000 fbeb 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 800138a:	0001      	movs	r1, r0
 800138c:	4b60      	ldr	r3, [pc, #384]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	220f      	movs	r2, #15
 8001394:	4013      	ands	r3, r2
 8001396:	4a62      	ldr	r2, [pc, #392]	; (8001520 <HAL_RCC_OscConfig+0x348>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	000a      	movs	r2, r1
 800139c:	40da      	lsrs	r2, r3
 800139e:	4b61      	ldr	r3, [pc, #388]	; (8001524 <HAL_RCC_OscConfig+0x34c>)
 80013a0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013a2:	4b61      	ldr	r3, [pc, #388]	; (8001528 <HAL_RCC_OscConfig+0x350>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2513      	movs	r5, #19
 80013a8:	197c      	adds	r4, r7, r5
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff fbe4 	bl	8000b78 <HAL_InitTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d046      	beq.n	800144a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013bc:	197b      	adds	r3, r7, r5
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	e280      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d027      	beq.n	8001418 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013c8:	4b51      	ldr	r3, [pc, #324]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2209      	movs	r2, #9
 80013ce:	4393      	bics	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80013d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fc13 	bl	8000c04 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc0e 	bl	8000c04 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e266      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2204      	movs	r2, #4
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f1      	beq.n	80013e4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a45      	ldr	r2, [pc, #276]	; (800151c <HAL_RCC_OscConfig+0x344>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	021a      	lsls	r2, r3, #8
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001412:	430a      	orrs	r2, r1
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e018      	b.n	800144a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001418:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800141e:	2101      	movs	r1, #1
 8001420:	438a      	bics	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fbee 	bl	8000c04 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff fbe9 	bl	8000c04 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e241      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2204      	movs	r2, #4
 8001446:	4013      	ands	r3, r2
 8001448:	d1f1      	bne.n	800142e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2210      	movs	r2, #16
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x27e>
 8001454:	e0a1      	b.n	800159a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d140      	bne.n	80014de <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x29c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e227      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a2c      	ldr	r2, [pc, #176]	; (800152c <HAL_RCC_OscConfig+0x354>)
 800147a:	4013      	ands	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1a      	ldr	r2, [r3, #32]
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	0a19      	lsrs	r1, r3, #8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	061a      	lsls	r2, r3, #24
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	0b5b      	lsrs	r3, r3, #13
 80014a2:	3301      	adds	r3, #1
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	0212      	lsls	r2, r2, #8
 80014a8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	210f      	movs	r1, #15
 80014b2:	400b      	ands	r3, r1
 80014b4:	491a      	ldr	r1, [pc, #104]	; (8001520 <HAL_RCC_OscConfig+0x348>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x34c>)
 80014bc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_RCC_OscConfig+0x350>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2513      	movs	r5, #19
 80014c4:	197c      	adds	r4, r7, r5
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff fb56 	bl	8000b78 <HAL_InitTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014d0:	197b      	adds	r3, r7, r5
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d060      	beq.n	800159a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80014d8:	197b      	adds	r3, r7, r5
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	e1f2      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03f      	beq.n	8001566 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	0049      	lsls	r1, r1, #1
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb86 	bl	8000c04 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fe:	f7ff fb81 	bl	8000c04 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d911      	bls.n	8001530 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1d9      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
 8001510:	40021000 	.word	0x40021000
 8001514:	fffeffff 	.word	0xfffeffff
 8001518:	fffbffff 	.word	0xfffbffff
 800151c:	ffffe0ff 	.word	0xffffe0ff
 8001520:	08003758 	.word	0x08003758
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004
 800152c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001530:	4bc9      	ldr	r3, [pc, #804]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d0e0      	beq.n	80014fe <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153c:	4bc6      	ldr	r3, [pc, #792]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4ac6      	ldr	r2, [pc, #792]	; (800185c <HAL_RCC_OscConfig+0x684>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1a      	ldr	r2, [r3, #32]
 800154a:	4bc3      	ldr	r3, [pc, #780]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800154c:	430a      	orrs	r2, r1
 800154e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001550:	4bc1      	ldr	r3, [pc, #772]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	0a19      	lsrs	r1, r3, #8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	061a      	lsls	r2, r3, #24
 800155e:	4bbe      	ldr	r3, [pc, #760]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	e019      	b.n	800159a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001566:	4bbc      	ldr	r3, [pc, #752]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4bbb      	ldr	r3, [pc, #748]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800156c:	49bc      	ldr	r1, [pc, #752]	; (8001860 <HAL_RCC_OscConfig+0x688>)
 800156e:	400a      	ands	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fb47 	bl	8000c04 <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157c:	f7ff fb42 	bl	8000c04 <HAL_GetTick>
 8001580:	0002      	movs	r2, r0
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e19a      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800158e:	4bb2      	ldr	r3, [pc, #712]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2208      	movs	r2, #8
 80015a0:	4013      	ands	r3, r2
 80015a2:	d036      	beq.n	8001612 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d019      	beq.n	80015e0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ac:	4baa      	ldr	r3, [pc, #680]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80015ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b0:	4ba9      	ldr	r3, [pc, #676]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fb24 	bl	8000c04 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fb1f 	bl	8000c04 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e177      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d4:	4ba0      	ldr	r3, [pc, #640]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80015d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d8:	2202      	movs	r2, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d0f1      	beq.n	80015c2 <HAL_RCC_OscConfig+0x3ea>
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	4b9d      	ldr	r3, [pc, #628]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80015e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e4:	4b9c      	ldr	r3, [pc, #624]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb0a 	bl	8000c04 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb05 	bl	8000c04 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e15d      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001608:	4b93      	ldr	r3, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800160a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800160c:	2202      	movs	r2, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d1f1      	bne.n	80015f6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2204      	movs	r2, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x446>
 800161c:	e0ae      	b.n	800177c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2023      	movs	r0, #35	; 0x23
 8001620:	183b      	adds	r3, r7, r0
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	055b      	lsls	r3, r3, #21
 800162e:	4013      	ands	r3, r2
 8001630:	d109      	bne.n	8001646 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001636:	4b88      	ldr	r3, [pc, #544]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0549      	lsls	r1, r1, #21
 800163c:	430a      	orrs	r2, r1
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001640:	183b      	adds	r3, r7, r0
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b87      	ldr	r3, [pc, #540]	; (8001864 <HAL_RCC_OscConfig+0x68c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4013      	ands	r3, r2
 8001650:	d11a      	bne.n	8001688 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x68c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b83      	ldr	r3, [pc, #524]	; (8001864 <HAL_RCC_OscConfig+0x68c>)
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	0049      	lsls	r1, r1, #1
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001660:	f7ff fad0 	bl	8000c04 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff facb 	bl	8000c04 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b64      	cmp	r3, #100	; 0x64
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e123      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b79      	ldr	r3, [pc, #484]	; (8001864 <HAL_RCC_OscConfig+0x68c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	429a      	cmp	r2, r3
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4cc>
 8001694:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001698:	4b6f      	ldr	r3, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	0049      	lsls	r1, r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	651a      	str	r2, [r3, #80]	; 0x50
 80016a2:	e031      	b.n	8001708 <HAL_RCC_OscConfig+0x530>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4ee>
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b0:	4b69      	ldr	r3, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016b2:	496b      	ldr	r1, [pc, #428]	; (8001860 <HAL_RCC_OscConfig+0x688>)
 80016b4:	400a      	ands	r2, r1
 80016b6:	651a      	str	r2, [r3, #80]	; 0x50
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016be:	496a      	ldr	r1, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x690>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	651a      	str	r2, [r3, #80]	; 0x50
 80016c4:	e020      	b.n	8001708 <HAL_RCC_OscConfig+0x530>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d10e      	bne.n	80016f0 <HAL_RCC_OscConfig+0x518>
 80016d2:	4b61      	ldr	r3, [pc, #388]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d6:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	430a      	orrs	r2, r1
 80016de:	651a      	str	r2, [r3, #80]	; 0x50
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e4:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0049      	lsls	r1, r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	651a      	str	r2, [r3, #80]	; 0x50
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0x530>
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f4:	4b58      	ldr	r3, [pc, #352]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016f6:	495a      	ldr	r1, [pc, #360]	; (8001860 <HAL_RCC_OscConfig+0x688>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	651a      	str	r2, [r3, #80]	; 0x50
 80016fc:	4b56      	ldr	r3, [pc, #344]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80016fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001700:	4b55      	ldr	r3, [pc, #340]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001702:	4959      	ldr	r1, [pc, #356]	; (8001868 <HAL_RCC_OscConfig+0x690>)
 8001704:	400a      	ands	r2, r1
 8001706:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d015      	beq.n	800173c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff fa78 	bl	8000c04 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001718:	e009      	b.n	800172e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fa73 	bl	8000c04 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_RCC_OscConfig+0x694>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0ca      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800172e:	4b4a      	ldr	r3, [pc, #296]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4013      	ands	r3, r2
 8001738:	d0ef      	beq.n	800171a <HAL_RCC_OscConfig+0x542>
 800173a:	e014      	b.n	8001766 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fa62 	bl	8000c04 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001744:	e009      	b.n	800175a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fa5d 	bl	8000c04 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_RCC_OscConfig+0x694>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e0b4      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800175c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d1ef      	bne.n	8001746 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001766:	2323      	movs	r3, #35	; 0x23
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001776:	493e      	ldr	r1, [pc, #248]	; (8001870 <HAL_RCC_OscConfig+0x698>)
 8001778:	400a      	ands	r2, r1
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d100      	bne.n	8001786 <HAL_RCC_OscConfig+0x5ae>
 8001784:	e09d      	b.n	80018c2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d100      	bne.n	800178e <HAL_RCC_OscConfig+0x5b6>
 800178c:	e076      	b.n	800187c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b02      	cmp	r3, #2
 8001794:	d145      	bne.n	8001822 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800179c:	4935      	ldr	r1, [pc, #212]	; (8001874 <HAL_RCC_OscConfig+0x69c>)
 800179e:	400a      	ands	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fa2f 	bl	8000c04 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fa2a 	bl	8000c04 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e082      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	049b      	lsls	r3, r3, #18
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x6a0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	431a      	orrs	r2, r3
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0449      	lsls	r1, r1, #17
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa04 	bl	8000c04 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f9ff 	bl	8000c04 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e057      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	049b      	lsls	r3, r3, #18
 800181c:	4013      	ands	r3, r2
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x62a>
 8001820:	e04f      	b.n	80018c2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 8001828:	4912      	ldr	r1, [pc, #72]	; (8001874 <HAL_RCC_OscConfig+0x69c>)
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f9e9 	bl	8000c04 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f9e4 	bl	8000c04 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e03c      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800184a:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_OscConfig+0x680>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x660>
 8001856:	e034      	b.n	80018c2 <HAL_RCC_OscConfig+0x6ea>
 8001858:	40021000 	.word	0x40021000
 800185c:	ffff1fff 	.word	0xffff1fff
 8001860:	fffffeff 	.word	0xfffffeff
 8001864:	40007000 	.word	0x40007000
 8001868:	fffffbff 	.word	0xfffffbff
 800186c:	00001388 	.word	0x00001388
 8001870:	efffffff 	.word	0xefffffff
 8001874:	feffffff 	.word	0xfeffffff
 8001878:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x6f4>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	025b      	lsls	r3, r3, #9
 8001894:	401a      	ands	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	429a      	cmp	r2, r3
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	23f0      	movs	r3, #240	; 0xf0
 80018a2:	039b      	lsls	r3, r3, #14
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d107      	bne.n	80018be <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	23c0      	movs	r3, #192	; 0xc0
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b00a      	add	sp, #40	; 0x28
 80018ca:	bdb0      	pop	{r4, r5, r7, pc}
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e128      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b96      	ldr	r3, [pc, #600]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d91e      	bls.n	8001930 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b93      	ldr	r3, [pc, #588]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4393      	bics	r3, r2
 80018fa:	0019      	movs	r1, r3
 80018fc:	4b90      	ldr	r3, [pc, #576]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001904:	f7ff f97e 	bl	8000c04 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190c:	e009      	b.n	8001922 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7ff f979 	bl	8000c04 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a8a      	ldr	r2, [pc, #552]	; (8001b44 <HAL_RCC_ClockConfig+0x274>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e109      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2201      	movs	r2, #1
 8001928:	4013      	ands	r3, r2
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d1ee      	bne.n	800190e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2202      	movs	r2, #2
 8001936:	4013      	ands	r3, r2
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193a:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	22f0      	movs	r2, #240	; 0xf0
 8001940:	4393      	bics	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 800194a:	430a      	orrs	r2, r1
 800194c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	d100      	bne.n	800195a <HAL_RCC_ClockConfig+0x8a>
 8001958:	e089      	b.n	8001a6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001962:	4b79      	ldr	r3, [pc, #484]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4013      	ands	r3, r2
 800196c:	d120      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0e1      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	049b      	lsls	r3, r3, #18
 8001982:	4013      	ands	r3, r2
 8001984:	d114      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0d5      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2204      	movs	r2, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d109      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0ca      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019a0:	4b69      	ldr	r3, [pc, #420]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0c2      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2203      	movs	r2, #3
 80019b6:	4393      	bics	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c4:	f7ff f91e 	bl	8000c04 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d111      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d6:	f7ff f915 	bl	8000c04 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_RCC_ClockConfig+0x274>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0a5      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ea:	4b57      	ldr	r3, [pc, #348]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	220c      	movs	r2, #12
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x106>
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d111      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	e009      	b.n	8001a16 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a02:	f7ff f8ff 	bl	8000c04 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <HAL_RCC_ClockConfig+0x274>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e08f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a16:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d1ef      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x132>
 8001a22:	e024      	b.n	8001a6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d11b      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7ff f8e9 	bl	8000c04 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <HAL_RCC_ClockConfig+0x274>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e079      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	220c      	movs	r2, #12
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d1ef      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x15e>
 8001a4e:	e00e      	b.n	8001a6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7ff f8d8 	bl	8000c04 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <HAL_RCC_ClockConfig+0x274>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e068      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	220c      	movs	r2, #12
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d21e      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4393      	bics	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a8e:	f7ff f8b9 	bl	8000c04 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	e009      	b.n	8001aac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff f8b4 	bl	8000c04 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_RCC_ClockConfig+0x274>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e044      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_RCC_ClockConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d1ee      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a20      	ldr	r2, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x27c>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2208      	movs	r2, #8
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d00a      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_RCC_ClockConfig+0x280>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	00da      	lsls	r2, r3, #3
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af8:	f000 f832 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001afc:	0001      	movs	r1, r0
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_ClockConfig+0x278>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	220f      	movs	r2, #15
 8001b06:	4013      	ands	r3, r2
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_RCC_ClockConfig+0x284>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	40da      	lsrs	r2, r3
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_ClockConfig+0x288>)
 8001b12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_RCC_ClockConfig+0x28c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	250b      	movs	r5, #11
 8001b1a:	197c      	adds	r4, r7, r5
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff f82b 	bl	8000b78 <HAL_InitTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b26:	197b      	adds	r3, r7, r5
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b2e:	197b      	adds	r3, r7, r5
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b004      	add	sp, #16
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	40022000 	.word	0x40022000
 8001b44:	00001388 	.word	0x00001388
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	fffff8ff 	.word	0xfffff8ff
 8001b50:	ffffc7ff 	.word	0xffffc7ff
 8001b54:	08003758 	.word	0x08003758
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b08e      	sub	sp, #56	; 0x38
 8001b64:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b66:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b6e:	230c      	movs	r3, #12
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d014      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b76:	d900      	bls.n	8001b7a <HAL_RCC_GetSysClockFreq+0x1a>
 8001b78:	e07b      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x112>
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x24>
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d00b      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b82:	e076      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b84:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2210      	movs	r2, #16
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b92:	e07c      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b98:	e079      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9a:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9e:	e076      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	0c9a      	lsrs	r2, r3, #18
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001baa:	5c9b      	ldrb	r3, [r3, r2]
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	0d9a      	lsrs	r2, r3, #22
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d01a      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	4a35      	ldr	r2, [pc, #212]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	69b8      	ldr	r0, [r7, #24]
 8001bd4:	69f9      	ldr	r1, [r7, #28]
 8001bd6:	f7fe fb4d 	bl	8000274 <__aeabi_lmul>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	000b      	movs	r3, r1
 8001bde:	0010      	movs	r0, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f7fe fb21 	bl	8000234 <__aeabi_uldivmod>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	000b      	movs	r3, r1
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfa:	e037      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bfc:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2210      	movs	r2, #16
 8001c02:	4013      	ands	r3, r2
 8001c04:	d01a      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c10:	2300      	movs	r3, #0
 8001c12:	68b8      	ldr	r0, [r7, #8]
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	f7fe fb2d 	bl	8000274 <__aeabi_lmul>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	0010      	movs	r0, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f7fe fb01 	bl	8000234 <__aeabi_uldivmod>
 8001c32:	0002      	movs	r2, r0
 8001c34:	000b      	movs	r3, r1
 8001c36:	0013      	movs	r3, r2
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3a:	e017      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	0018      	movs	r0, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	0019      	movs	r1, r3
 8001c44:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c46:	2300      	movs	r3, #0
 8001c48:	f7fe fb14 	bl	8000274 <__aeabi_lmul>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	000b      	movs	r3, r1
 8001c50:	0010      	movs	r0, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	001c      	movs	r4, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	001d      	movs	r5, r3
 8001c5c:	0022      	movs	r2, r4
 8001c5e:	002b      	movs	r3, r5
 8001c60:	f7fe fae8 	bl	8000234 <__aeabi_uldivmod>
 8001c64:	0002      	movs	r2, r0
 8001c66:	000b      	movs	r3, r1
 8001c68:	0013      	movs	r3, r2
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c70:	e00d      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0b5b      	lsrs	r3, r3, #13
 8001c78:	2207      	movs	r2, #7
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	3301      	adds	r3, #1
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	0212      	lsls	r2, r2, #8
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c8c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b00e      	add	sp, #56	; 0x38
 8001c96:	bdb0      	pop	{r4, r5, r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	003d0900 	.word	0x003d0900
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	017d7840 	.word	0x017d7840
 8001ca8:	08003770 	.word	0x08003770

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b02      	ldr	r3, [pc, #8]	; (8001cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc4:	f7ff fff2 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cc8:	0001      	movs	r1, r0
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	000b      	movs	r3, r1
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08003768 	.word	0x08003768

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	f7ff ffdc 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf4:	0001      	movs	r1, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0adb      	lsrs	r3, r3, #11
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	4013      	ands	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	40d9      	lsrs	r1, r3
 8001d06:	000b      	movs	r3, r1
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08003768 	.word	0x08003768

08001d18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d20:	2017      	movs	r0, #23
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d100      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d32:	e0c2      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	055b      	lsls	r3, r3, #21
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d109      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d44:	4b7d      	ldr	r3, [pc, #500]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0549      	lsls	r1, r1, #21
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b7a      	ldr	r3, [pc, #488]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11a      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	4b77      	ldr	r3, [pc, #476]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7fe ff49 	bl	8000c04 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	e008      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7fe ff44 	bl	8000c04 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e0d4      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	039b      	lsls	r3, r3, #14
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	039b      	lsls	r3, r3, #14
 8001daa:	4013      	ands	r3, r2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d013      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	401a      	ands	r2, r3
 8001dbc:	23c0      	movs	r3, #192	; 0xc0
 8001dbe:	029b      	lsls	r3, r3, #10
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d10a      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dc4:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	401a      	ands	r2, r3
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	029b      	lsls	r3, r3, #10
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d101      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0ac      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dda:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ddc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dde:	23c0      	movs	r3, #192	; 0xc0
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4013      	ands	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03b      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	23c0      	movs	r3, #192	; 0xc0
 8001df2:	029b      	lsls	r3, r3, #10
 8001df4:	4013      	ands	r3, r2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d033      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2220      	movs	r2, #32
 8001e02:	4013      	ands	r3, r2
 8001e04:	d02e      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e06:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	4a4e      	ldr	r2, [pc, #312]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e10:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	0309      	lsls	r1, r1, #12
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e24:	4948      	ldr	r1, [pc, #288]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d014      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fee3 	bl	8000c04 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e42:	e009      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe fede 	bl	8000c04 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e06d      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0ef      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	23c0      	movs	r3, #192	; 0xc0
 8001e70:	029b      	lsls	r3, r3, #10
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	23c0      	movs	r3, #192	; 0xc0
 8001e86:	039b      	lsls	r3, r3, #14
 8001e88:	401a      	ands	r2, r3
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e92:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea4:	2317      	movs	r3, #23
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb4:	4927      	ldr	r1, [pc, #156]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	220c      	movs	r2, #12
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2204      	movs	r2, #4
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2208      	movs	r2, #8
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b006      	add	sp, #24
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	fffcffff 	.word	0xfffcffff
 8001f48:	fff7ffff 	.word	0xfff7ffff
 8001f4c:	00001388 	.word	0x00001388
 8001f50:	ffcfffff 	.word	0xffcfffff
 8001f54:	efffffff 	.word	0xefffffff
 8001f58:	fffff3ff 	.word	0xfffff3ff
 8001f5c:	ffffcfff 	.word	0xffffcfff
 8001f60:	fff3ffff 	.word	0xfff3ffff

08001f64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e08e      	b.n	8002094 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2221      	movs	r2, #33	; 0x21
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe fd11 	bl	80009b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2221      	movs	r2, #33	; 0x21
 8001f96:	2102      	movs	r1, #2
 8001f98:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	22ca      	movs	r2, #202	; 0xca
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2253      	movs	r2, #83	; 0x53
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 f89e 	bl	80020ee <RTC_EnterInitMode>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2221      	movs	r2, #33	; 0x21
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e064      	b.n	8002094 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4931      	ldr	r1, [pc, #196]	; (800209c <HAL_RTC_Init+0x138>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68d2      	ldr	r2, [r2, #12]
 8002000:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6919      	ldr	r1, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	438a      	bics	r2, r1
 8002024:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2103      	movs	r1, #3
 8002032:	438a      	bics	r2, r1
 8002034:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2220      	movs	r2, #32
 8002056:	4013      	ands	r3, r2
 8002058:	d113      	bne.n	8002082 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f81f 	bl	80020a0 <HAL_RTC_WaitForSynchro>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d00d      	beq.n	8002082 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2221      	movs	r2, #33	; 0x21
 8002072:	2104      	movs	r1, #4
 8002074:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	2100      	movs	r1, #0
 800207c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e008      	b.n	8002094 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2221      	movs	r2, #33	; 0x21
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
  }
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}
 800209c:	ff8fffbf 	.word	0xff8fffbf

080020a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	21a0      	movs	r1, #160	; 0xa0
 80020b4:	438a      	bics	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80020b8:	f7fe fda4 	bl	8000c04 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80020c0:	e00a      	b.n	80020d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80020c2:	f7fe fd9f 	bl	8000c04 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad2      	subs	r2, r2, r3
 80020cc:	23fa      	movs	r3, #250	; 0xfa
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d901      	bls.n	80020d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e006      	b.n	80020e6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0ee      	beq.n	80020c2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b004      	add	sp, #16
 80020ec:	bd80      	pop	{r7, pc}

080020ee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2240      	movs	r2, #64	; 0x40
 80020fe:	4013      	ands	r3, r2
 8002100:	d11a      	bne.n	8002138 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	4252      	negs	r2, r2
 800210a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800210c:	f7fe fd7a 	bl	8000c04 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002114:	e00a      	b.n	800212c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002116:	f7fe fd75 	bl	8000c04 <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1ad2      	subs	r2, r2, r3
 8002120:	23fa      	movs	r3, #250	; 0xfa
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d901      	bls.n	800212c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e006      	b.n	800213a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2240      	movs	r2, #64	; 0x40
 8002134:	4013      	ands	r3, r2
 8002136:	d0ee      	beq.n	8002116 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b004      	add	sp, #16
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800215a:	2302      	movs	r3, #2
 800215c:	e0ad      	b.n	80022ba <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2220      	movs	r2, #32
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2221      	movs	r2, #33	; 0x21
 800216a:	2102      	movs	r1, #2
 800216c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	22ca      	movs	r2, #202	; 0xca
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2253      	movs	r2, #83	; 0x53
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4013      	ands	r3, r2
 800218a:	d021      	beq.n	80021d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 800218c:	f7fe fd3a 	bl	8000c04 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002194:	e016      	b.n	80021c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002196:	f7fe fd35 	bl	8000c04 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	1ad2      	subs	r2, r2, r3
 80021a0:	23fa      	movs	r3, #250	; 0xfa
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d90d      	bls.n	80021c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	22ff      	movs	r2, #255	; 0xff
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2221      	movs	r2, #33	; 0x21
 80021b4:	2103      	movs	r1, #3
 80021b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e07a      	b.n	80022ba <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2204      	movs	r2, #4
 80021cc:	4013      	ands	r3, r2
 80021ce:	d1e2      	bne.n	8002196 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	493a      	ldr	r1, [pc, #232]	; (80022c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80021dc:	400a      	ands	r2, r1
 80021de:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	401a      	ands	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4936      	ldr	r1, [pc, #216]	; (80022c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80021f4:	f7fe fd06 	bl	8000c04 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80021fc:	e016      	b.n	800222c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021fe:	f7fe fd01 	bl	8000c04 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1ad2      	subs	r2, r2, r3
 8002208:	23fa      	movs	r3, #250	; 0xfa
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d90d      	bls.n	800222c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2221      	movs	r2, #33	; 0x21
 800221c:	2103      	movs	r1, #3
 800221e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e046      	b.n	80022ba <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2204      	movs	r2, #4
 8002234:	4013      	ands	r3, r2
 8002236:	d0e2      	beq.n	80021fe <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2107      	movs	r1, #7
 800224c:	438a      	bics	r2, r1
 800224e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	430a      	orrs	r2, r1
 800225e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	0349      	lsls	r1, r1, #13
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	0349      	lsls	r1, r1, #13
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	01c9      	lsls	r1, r1, #7
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	00c9      	lsls	r1, r1, #3
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2221      	movs	r2, #33	; 0x21
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	2100      	movs	r1, #0
 80022b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	fffffbff 	.word	0xfffffbff
 80022c8:	fffffb7f 	.word	0xfffffb7f
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e04e      	b.n	8002384 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2221      	movs	r2, #33	; 0x21
 80022f2:	2102      	movs	r1, #2
 80022f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	22ca      	movs	r2, #202	; 0xca
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2253      	movs	r2, #83	; 0x53
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	491e      	ldr	r1, [pc, #120]	; (800238c <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8002312:	400a      	ands	r2, r1
 8002314:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	491b      	ldr	r1, [pc, #108]	; (8002390 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8002322:	400a      	ands	r2, r1
 8002324:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002326:	f7fe fc6d 	bl	8000c04 <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800232e:	e016      	b.n	800235e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002330:	f7fe fc68 	bl	8000c04 <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad2      	subs	r2, r2, r3
 800233a:	23fa      	movs	r3, #250	; 0xfa
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	429a      	cmp	r2, r3
 8002340:	d90d      	bls.n	800235e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	22ff      	movs	r2, #255	; 0xff
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2221      	movs	r2, #33	; 0x21
 800234e:	2103      	movs	r1, #3
 8002350:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	2100      	movs	r1, #0
 8002358:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e012      	b.n	8002384 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2204      	movs	r2, #4
 8002366:	4013      	ands	r3, r2
 8002368:	d0e2      	beq.n	8002330 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2221      	movs	r2, #33	; 0x21
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b004      	add	sp, #16
 800238a:	bd80      	pop	{r7, pc}
 800238c:	fffffbff 	.word	0xfffffbff
 8002390:	ffffbfff 	.word	0xffffbfff

08002394 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	d00d      	beq.n	80023c6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 f81b 	bl	80023e8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	22ff      	movs	r2, #255	; 0xff
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	0352      	lsls	r2, r2, #13
 80023cc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2221      	movs	r2, #33	; 0x21
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	fffffb7f 	.word	0xfffffb7f
 80023e4:	40010400 	.word	0x40010400

080023e8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e044      	b.n	8002494 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2274      	movs	r2, #116	; 0x74
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f7fe fa61 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2224      	movs	r2, #36	; 0x24
 8002426:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f8d8 	bl	80025f0 <UART_SetConfig>
 8002440:	0003      	movs	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e024      	b.n	8002494 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fb2d 	bl	8002ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	490d      	ldr	r1, [pc, #52]	; (800249c <HAL_UART_Init+0xa4>)
 8002466:	400a      	ands	r2, r1
 8002468:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	212a      	movs	r1, #42	; 0x2a
 8002476:	438a      	bics	r2, r1
 8002478:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 fbc5 	bl	8002c1c <UART_CheckIdleState>
 8002492:	0003      	movs	r3, r0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}
 800249c:	ffffb7ff 	.word	0xffffb7ff

080024a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	1dbb      	adds	r3, r7, #6
 80024ae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d000      	beq.n	80024ba <HAL_UART_Transmit+0x1a>
 80024b8:	e095      	b.n	80025e6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_UART_Transmit+0x28>
 80024c0:	1dbb      	adds	r3, r7, #6
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e08d      	b.n	80025e8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d109      	bne.n	80024ec <HAL_UART_Transmit+0x4c>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d001      	beq.n	80024ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e07d      	b.n	80025e8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2274      	movs	r2, #116	; 0x74
 80024f0:	5c9b      	ldrb	r3, [r3, r2]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Transmit+0x5a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e076      	b.n	80025e8 <HAL_UART_Transmit+0x148>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2274      	movs	r2, #116	; 0x74
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	2100      	movs	r1, #0
 8002508:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	; 0x21
 800250e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002510:	f7fe fb78 	bl	8000c04 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1dba      	adds	r2, r7, #6
 800251c:	2150      	movs	r1, #80	; 0x50
 800251e:	8812      	ldrh	r2, [r2, #0]
 8002520:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1dba      	adds	r2, r7, #6
 8002526:	2152      	movs	r1, #82	; 0x52
 8002528:	8812      	ldrh	r2, [r2, #0]
 800252a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	015b      	lsls	r3, r3, #5
 8002534:	429a      	cmp	r2, r3
 8002536:	d108      	bne.n	800254a <HAL_UART_Transmit+0xaa>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	e003      	b.n	8002552 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2274      	movs	r2, #116	; 0x74
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800255a:	e02c      	b.n	80025b6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	0013      	movs	r3, r2
 8002566:	2200      	movs	r2, #0
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	f000 fb9f 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e038      	b.n	80025e8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	001a      	movs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	05d2      	lsls	r2, r2, #23
 8002588:	0dd2      	lsrs	r2, r2, #23
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3302      	adds	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e007      	b.n	80025a4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3301      	adds	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2252      	movs	r2, #82	; 0x52
 80025a8:	5a9b      	ldrh	r3, [r3, r2]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b299      	uxth	r1, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2252      	movs	r2, #82	; 0x52
 80025b4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2252      	movs	r2, #82	; 0x52
 80025ba:	5a9b      	ldrh	r3, [r3, r2]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1cc      	bne.n	800255c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	0013      	movs	r3, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	2140      	movs	r1, #64	; 0x40
 80025d0:	f000 fb6c 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e005      	b.n	80025e8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e000      	b.n	80025e8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
  }
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b008      	add	sp, #32
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b08e      	sub	sp, #56	; 0x38
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025f8:	231a      	movs	r3, #26
 80025fa:	2218      	movs	r2, #24
 80025fc:	4694      	mov	ip, r2
 80025fe:	44bc      	add	ip, r7
 8002600:	4463      	add	r3, ip
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	431a      	orrs	r2, r3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	431a      	orrs	r2, r3
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4313      	orrs	r3, r2
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4abc      	ldr	r2, [pc, #752]	; (8002918 <UART_SetConfig+0x328>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4ab8      	ldr	r2, [pc, #736]	; (800291c <UART_SetConfig+0x32c>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4ab2      	ldr	r2, [pc, #712]	; (8002920 <UART_SetConfig+0x330>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002662:	4313      	orrs	r3, r2
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4aad      	ldr	r2, [pc, #692]	; (8002924 <UART_SetConfig+0x334>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4aa9      	ldr	r2, [pc, #676]	; (8002928 <UART_SetConfig+0x338>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d136      	bne.n	80026f4 <UART_SetConfig+0x104>
 8002686:	4ba9      	ldr	r3, [pc, #676]	; (800292c <UART_SetConfig+0x33c>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	220c      	movs	r2, #12
 800268c:	4013      	ands	r3, r2
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d020      	beq.n	80026d4 <UART_SetConfig+0xe4>
 8002692:	d827      	bhi.n	80026e4 <UART_SetConfig+0xf4>
 8002694:	2b08      	cmp	r3, #8
 8002696:	d00d      	beq.n	80026b4 <UART_SetConfig+0xc4>
 8002698:	d824      	bhi.n	80026e4 <UART_SetConfig+0xf4>
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <UART_SetConfig+0xb4>
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d010      	beq.n	80026c4 <UART_SetConfig+0xd4>
 80026a2:	e01f      	b.n	80026e4 <UART_SetConfig+0xf4>
 80026a4:	231b      	movs	r3, #27
 80026a6:	2218      	movs	r2, #24
 80026a8:	4694      	mov	ip, r2
 80026aa:	44bc      	add	ip, r7
 80026ac:	4463      	add	r3, ip
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e06f      	b.n	8002794 <UART_SetConfig+0x1a4>
 80026b4:	231b      	movs	r3, #27
 80026b6:	2218      	movs	r2, #24
 80026b8:	4694      	mov	ip, r2
 80026ba:	44bc      	add	ip, r7
 80026bc:	4463      	add	r3, ip
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e067      	b.n	8002794 <UART_SetConfig+0x1a4>
 80026c4:	231b      	movs	r3, #27
 80026c6:	2218      	movs	r2, #24
 80026c8:	4694      	mov	ip, r2
 80026ca:	44bc      	add	ip, r7
 80026cc:	4463      	add	r3, ip
 80026ce:	2204      	movs	r2, #4
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e05f      	b.n	8002794 <UART_SetConfig+0x1a4>
 80026d4:	231b      	movs	r3, #27
 80026d6:	2218      	movs	r2, #24
 80026d8:	4694      	mov	ip, r2
 80026da:	44bc      	add	ip, r7
 80026dc:	4463      	add	r3, ip
 80026de:	2208      	movs	r2, #8
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e057      	b.n	8002794 <UART_SetConfig+0x1a4>
 80026e4:	231b      	movs	r3, #27
 80026e6:	2218      	movs	r2, #24
 80026e8:	4694      	mov	ip, r2
 80026ea:	44bc      	add	ip, r7
 80026ec:	4463      	add	r3, ip
 80026ee:	2210      	movs	r2, #16
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e04f      	b.n	8002794 <UART_SetConfig+0x1a4>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a89      	ldr	r2, [pc, #548]	; (8002920 <UART_SetConfig+0x330>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d143      	bne.n	8002786 <UART_SetConfig+0x196>
 80026fe:	4b8b      	ldr	r3, [pc, #556]	; (800292c <UART_SetConfig+0x33c>)
 8002700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002702:	23c0      	movs	r3, #192	; 0xc0
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	4013      	ands	r3, r2
 8002708:	22c0      	movs	r2, #192	; 0xc0
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	4293      	cmp	r3, r2
 800270e:	d02a      	beq.n	8002766 <UART_SetConfig+0x176>
 8002710:	22c0      	movs	r2, #192	; 0xc0
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	4293      	cmp	r3, r2
 8002716:	d82e      	bhi.n	8002776 <UART_SetConfig+0x186>
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	4293      	cmp	r3, r2
 800271e:	d012      	beq.n	8002746 <UART_SetConfig+0x156>
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	4293      	cmp	r3, r2
 8002726:	d826      	bhi.n	8002776 <UART_SetConfig+0x186>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <UART_SetConfig+0x146>
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	00d2      	lsls	r2, r2, #3
 8002730:	4293      	cmp	r3, r2
 8002732:	d010      	beq.n	8002756 <UART_SetConfig+0x166>
 8002734:	e01f      	b.n	8002776 <UART_SetConfig+0x186>
 8002736:	231b      	movs	r3, #27
 8002738:	2218      	movs	r2, #24
 800273a:	4694      	mov	ip, r2
 800273c:	44bc      	add	ip, r7
 800273e:	4463      	add	r3, ip
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e026      	b.n	8002794 <UART_SetConfig+0x1a4>
 8002746:	231b      	movs	r3, #27
 8002748:	2218      	movs	r2, #24
 800274a:	4694      	mov	ip, r2
 800274c:	44bc      	add	ip, r7
 800274e:	4463      	add	r3, ip
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e01e      	b.n	8002794 <UART_SetConfig+0x1a4>
 8002756:	231b      	movs	r3, #27
 8002758:	2218      	movs	r2, #24
 800275a:	4694      	mov	ip, r2
 800275c:	44bc      	add	ip, r7
 800275e:	4463      	add	r3, ip
 8002760:	2204      	movs	r2, #4
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e016      	b.n	8002794 <UART_SetConfig+0x1a4>
 8002766:	231b      	movs	r3, #27
 8002768:	2218      	movs	r2, #24
 800276a:	4694      	mov	ip, r2
 800276c:	44bc      	add	ip, r7
 800276e:	4463      	add	r3, ip
 8002770:	2208      	movs	r2, #8
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e00e      	b.n	8002794 <UART_SetConfig+0x1a4>
 8002776:	231b      	movs	r3, #27
 8002778:	2218      	movs	r2, #24
 800277a:	4694      	mov	ip, r2
 800277c:	44bc      	add	ip, r7
 800277e:	4463      	add	r3, ip
 8002780:	2210      	movs	r2, #16
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e006      	b.n	8002794 <UART_SetConfig+0x1a4>
 8002786:	231b      	movs	r3, #27
 8002788:	2218      	movs	r2, #24
 800278a:	4694      	mov	ip, r2
 800278c:	44bc      	add	ip, r7
 800278e:	4463      	add	r3, ip
 8002790:	2210      	movs	r2, #16
 8002792:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a61      	ldr	r2, [pc, #388]	; (8002920 <UART_SetConfig+0x330>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d000      	beq.n	80027a0 <UART_SetConfig+0x1b0>
 800279e:	e088      	b.n	80028b2 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027a0:	231b      	movs	r3, #27
 80027a2:	2218      	movs	r2, #24
 80027a4:	4694      	mov	ip, r2
 80027a6:	44bc      	add	ip, r7
 80027a8:	4463      	add	r3, ip
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d01d      	beq.n	80027ec <UART_SetConfig+0x1fc>
 80027b0:	dc20      	bgt.n	80027f4 <UART_SetConfig+0x204>
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d015      	beq.n	80027e2 <UART_SetConfig+0x1f2>
 80027b6:	dc1d      	bgt.n	80027f4 <UART_SetConfig+0x204>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <UART_SetConfig+0x1d2>
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d005      	beq.n	80027cc <UART_SetConfig+0x1dc>
 80027c0:	e018      	b.n	80027f4 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c2:	f7ff fa7d 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 80027c6:	0003      	movs	r3, r0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ca:	e01d      	b.n	8002808 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027cc:	4b57      	ldr	r3, [pc, #348]	; (800292c <UART_SetConfig+0x33c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	4013      	ands	r3, r2
 80027d4:	d002      	beq.n	80027dc <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <UART_SetConfig+0x340>)
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027da:	e015      	b.n	8002808 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80027dc:	4b55      	ldr	r3, [pc, #340]	; (8002934 <UART_SetConfig+0x344>)
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027e0:	e012      	b.n	8002808 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e2:	f7ff f9bd 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 80027e6:	0003      	movs	r3, r0
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ea:	e00d      	b.n	8002808 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027f2:	e009      	b.n	8002808 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027f8:	231a      	movs	r3, #26
 80027fa:	2218      	movs	r2, #24
 80027fc:	4694      	mov	ip, r2
 80027fe:	44bc      	add	ip, r7
 8002800:	4463      	add	r3, ip
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
        break;
 8002806:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d100      	bne.n	8002810 <UART_SetConfig+0x220>
 800280e:	e139      	b.n	8002a84 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	0013      	movs	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	189b      	adds	r3, r3, r2
 800281a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281c:	429a      	cmp	r2, r3
 800281e:	d305      	bcc.n	800282c <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d907      	bls.n	800283c <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 800282c:	231a      	movs	r3, #26
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e123      	b.n	8002a84 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	6939      	ldr	r1, [r7, #16]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	000b      	movs	r3, r1
 800284a:	0e1b      	lsrs	r3, r3, #24
 800284c:	0010      	movs	r0, r2
 800284e:	0205      	lsls	r5, r0, #8
 8002850:	431d      	orrs	r5, r3
 8002852:	000b      	movs	r3, r1
 8002854:	021c      	lsls	r4, r3, #8
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68b8      	ldr	r0, [r7, #8]
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	1900      	adds	r0, r0, r4
 8002868:	4169      	adcs	r1, r5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f7fd fcdc 	bl	8000234 <__aeabi_uldivmod>
 800287c:	0002      	movs	r2, r0
 800287e:	000b      	movs	r3, r1
 8002880:	0013      	movs	r3, r2
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002886:	23c0      	movs	r3, #192	; 0xc0
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	429a      	cmp	r2, r3
 800288c:	d309      	bcc.n	80028a2 <UART_SetConfig+0x2b2>
 800288e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	035b      	lsls	r3, r3, #13
 8002894:	429a      	cmp	r2, r3
 8002896:	d204      	bcs.n	80028a2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	e0f0      	b.n	8002a84 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80028a2:	231a      	movs	r3, #26
 80028a4:	2218      	movs	r2, #24
 80028a6:	4694      	mov	ip, r2
 80028a8:	44bc      	add	ip, r7
 80028aa:	4463      	add	r3, ip
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e0e8      	b.n	8002a84 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d000      	beq.n	80028c0 <UART_SetConfig+0x2d0>
 80028be:	e087      	b.n	80029d0 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80028c0:	231b      	movs	r3, #27
 80028c2:	2218      	movs	r2, #24
 80028c4:	4694      	mov	ip, r2
 80028c6:	44bc      	add	ip, r7
 80028c8:	4463      	add	r3, ip
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d835      	bhi.n	800293c <UART_SetConfig+0x34c>
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <UART_SetConfig+0x348>)
 80028d4:	18d3      	adds	r3, r2, r3
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028da:	f7ff f9f1 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 80028de:	0003      	movs	r3, r0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028e2:	e035      	b.n	8002950 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7ff fa02 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 80028e8:	0003      	movs	r3, r0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ec:	e030      	b.n	8002950 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <UART_SetConfig+0x33c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2210      	movs	r2, #16
 80028f4:	4013      	ands	r3, r2
 80028f6:	d002      	beq.n	80028fe <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <UART_SetConfig+0x340>)
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028fc:	e028      	b.n	8002950 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <UART_SetConfig+0x344>)
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002902:	e025      	b.n	8002950 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002904:	f7ff f92c 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002908:	0003      	movs	r3, r0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800290c:	e020      	b.n	8002950 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002914:	e01c      	b.n	8002950 <UART_SetConfig+0x360>
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	efff69f3 	.word	0xefff69f3
 800291c:	ffffcfff 	.word	0xffffcfff
 8002920:	40004800 	.word	0x40004800
 8002924:	fffff4ff 	.word	0xfffff4ff
 8002928:	40004400 	.word	0x40004400
 800292c:	40021000 	.word	0x40021000
 8002930:	003d0900 	.word	0x003d0900
 8002934:	00f42400 	.word	0x00f42400
 8002938:	0800377c 	.word	0x0800377c
      default:
        pclk = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002940:	231a      	movs	r3, #26
 8002942:	2218      	movs	r2, #24
 8002944:	4694      	mov	ip, r2
 8002946:	44bc      	add	ip, r7
 8002948:	4463      	add	r3, ip
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
        break;
 800294e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d100      	bne.n	8002958 <UART_SetConfig+0x368>
 8002956:	e095      	b.n	8002a84 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	005a      	lsls	r2, r3, #1
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	18d2      	adds	r2, r2, r3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0019      	movs	r1, r3
 800296a:	0010      	movs	r0, r2
 800296c:	f7fd fbd6 	bl	800011c <__udivsi3>
 8002970:	0003      	movs	r3, r0
 8002972:	b29b      	uxth	r3, r3
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d921      	bls.n	80029c0 <UART_SetConfig+0x3d0>
 800297c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	025b      	lsls	r3, r3, #9
 8002982:	429a      	cmp	r2, r3
 8002984:	d21c      	bcs.n	80029c0 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	b29a      	uxth	r2, r3
 800298a:	200e      	movs	r0, #14
 800298c:	2418      	movs	r4, #24
 800298e:	193b      	adds	r3, r7, r4
 8002990:	181b      	adds	r3, r3, r0
 8002992:	210f      	movs	r1, #15
 8002994:	438a      	bics	r2, r1
 8002996:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	2207      	movs	r2, #7
 80029a0:	4013      	ands	r3, r2
 80029a2:	b299      	uxth	r1, r3
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	181b      	adds	r3, r3, r0
 80029a8:	193a      	adds	r2, r7, r4
 80029aa:	1812      	adds	r2, r2, r0
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	193a      	adds	r2, r7, r4
 80029b8:	1812      	adds	r2, r2, r0
 80029ba:	8812      	ldrh	r2, [r2, #0]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e061      	b.n	8002a84 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80029c0:	231a      	movs	r3, #26
 80029c2:	2218      	movs	r2, #24
 80029c4:	4694      	mov	ip, r2
 80029c6:	44bc      	add	ip, r7
 80029c8:	4463      	add	r3, ip
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e059      	b.n	8002a84 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029d0:	231b      	movs	r3, #27
 80029d2:	2218      	movs	r2, #24
 80029d4:	4694      	mov	ip, r2
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d822      	bhi.n	8002a26 <UART_SetConfig+0x436>
 80029e0:	009a      	lsls	r2, r3, #2
 80029e2:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <UART_SetConfig+0x4b4>)
 80029e4:	18d3      	adds	r3, r2, r3
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ea:	f7ff f969 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 80029ee:	0003      	movs	r3, r0
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029f2:	e022      	b.n	8002a3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029f4:	f7ff f97a 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 80029f8:	0003      	movs	r3, r0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029fc:	e01d      	b.n	8002a3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <UART_SetConfig+0x4b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2210      	movs	r2, #16
 8002a04:	4013      	ands	r3, r2
 8002a06:	d002      	beq.n	8002a0e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <UART_SetConfig+0x4bc>)
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a0c:	e015      	b.n	8002a3a <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002a0e:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <UART_SetConfig+0x4c0>)
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a12:	e012      	b.n	8002a3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a14:	f7ff f8a4 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a1c:	e00d      	b.n	8002a3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a24:	e009      	b.n	8002a3a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a2a:	231a      	movs	r3, #26
 8002a2c:	2218      	movs	r2, #24
 8002a2e:	4694      	mov	ip, r2
 8002a30:	44bc      	add	ip, r7
 8002a32:	4463      	add	r3, ip
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
        break;
 8002a38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d021      	beq.n	8002a84 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	085a      	lsrs	r2, r3, #1
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	18d2      	adds	r2, r2, r3
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f7fd fb63 	bl	800011c <__udivsi3>
 8002a56:	0003      	movs	r3, r0
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d909      	bls.n	8002a76 <UART_SetConfig+0x486>
 8002a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	025b      	lsls	r3, r3, #9
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d204      	bcs.n	8002a76 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	e006      	b.n	8002a84 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002a76:	231a      	movs	r3, #26
 8002a78:	2218      	movs	r2, #24
 8002a7a:	4694      	mov	ip, r2
 8002a7c:	44bc      	add	ip, r7
 8002a7e:	4463      	add	r3, ip
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2200      	movs	r2, #0
 8002a88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a90:	231a      	movs	r3, #26
 8002a92:	2218      	movs	r2, #24
 8002a94:	4694      	mov	ip, r2
 8002a96:	44bc      	add	ip, r7
 8002a98:	4463      	add	r3, ip
 8002a9a:	781b      	ldrb	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b00e      	add	sp, #56	; 0x38
 8002aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa4:	080037a0 	.word	0x080037a0
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	003d0900 	.word	0x003d0900
 8002ab0:	00f42400 	.word	0x00f42400

08002ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d00b      	beq.n	8002ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a4a      	ldr	r2, [pc, #296]	; (8002bf8 <UART_AdvFeatureConfig+0x144>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00b      	beq.n	8002b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a43      	ldr	r2, [pc, #268]	; (8002bfc <UART_AdvFeatureConfig+0x148>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <UART_AdvFeatureConfig+0x14c>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2208      	movs	r2, #8
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d00b      	beq.n	8002b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4a34      	ldr	r2, [pc, #208]	; (8002c04 <UART_AdvFeatureConfig+0x150>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	0019      	movs	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2210      	movs	r2, #16
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d00b      	beq.n	8002b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a2c      	ldr	r2, [pc, #176]	; (8002c08 <UART_AdvFeatureConfig+0x154>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <UART_AdvFeatureConfig+0x158>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2240      	movs	r2, #64	; 0x40
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d01d      	beq.n	8002bce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <UART_AdvFeatureConfig+0x15c>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	035b      	lsls	r3, r3, #13
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d10b      	bne.n	8002bce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <UART_AdvFeatureConfig+0x160>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <UART_AdvFeatureConfig+0x164>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  }
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	fffdffff 	.word	0xfffdffff
 8002bfc:	fffeffff 	.word	0xfffeffff
 8002c00:	fffbffff 	.word	0xfffbffff
 8002c04:	ffff7fff 	.word	0xffff7fff
 8002c08:	ffffefff 	.word	0xffffefff
 8002c0c:	ffffdfff 	.word	0xffffdfff
 8002c10:	ffefffff 	.word	0xffefffff
 8002c14:	ff9fffff 	.word	0xff9fffff
 8002c18:	fff7ffff 	.word	0xfff7ffff

08002c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c2c:	f7fd ffea 	bl	8000c04 <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d10c      	bne.n	8002c5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	0391      	lsls	r1, r2, #14
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <UART_CheckIdleState+0x8c>)
 8002c4c:	9200      	str	r2, [sp, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f000 f82c 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e021      	b.n	8002ca0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2204      	movs	r2, #4
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d10c      	bne.n	8002c84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	03d1      	lsls	r1, r2, #15
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <UART_CheckIdleState+0x8c>)
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f000 f818 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d001      	beq.n	8002c84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e00d      	b.n	8002ca0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2274      	movs	r2, #116	; 0x74
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b004      	add	sp, #16
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	01ffffff 	.word	0x01ffffff

08002cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b094      	sub	sp, #80	; 0x50
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	1dfb      	adds	r3, r7, #7
 8002cba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbc:	e0a3      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	d100      	bne.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cc4:	e09f      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fd ff9d 	bl	8000c04 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8002cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d13d      	bne.n	8002d58 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	494c      	ldr	r1, [pc, #304]	; (8002e30 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002cfe:	400a      	ands	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
 8002d18:	2301      	movs	r3, #1
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	f383 8810 	msr	PRIMASK, r3
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	438a      	bics	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	f383 8810 	msr	PRIMASK, r3
}
 8002d3e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2274      	movs	r2, #116	; 0x74
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e067      	b.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	4013      	ands	r3, r2
 8002d62:	d050      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	401a      	ands	r2, r3
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d146      	bne.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d82:	f3ef 8310 	mrs	r3, PRIMASK
 8002d86:	613b      	str	r3, [r7, #16]
  return(result);
 8002d88:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f383 8810 	msr	PRIMASK, r3
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4923      	ldr	r1, [pc, #140]	; (8002e30 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002daa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dba:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	2120      	movs	r1, #32
 8002df8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2274      	movs	r2, #116	; 0x74
 8002dfe:	2100      	movs	r1, #0
 8002e00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e010      	b.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	425a      	negs	r2, r3
 8002e16:	4153      	adcs	r3, r2
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d100      	bne.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e24:	e74b      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b014      	add	sp, #80	; 0x50
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	fffffe5f 	.word	0xfffffe5f

08002e34 <__errno>:
 8002e34:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <__errno+0x8>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	4770      	bx	lr
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	2600      	movs	r6, #0
 8002e44:	4d0c      	ldr	r5, [pc, #48]	; (8002e78 <__libc_init_array+0x38>)
 8002e46:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e48:	1b64      	subs	r4, r4, r5
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	2600      	movs	r6, #0
 8002e52:	f000 fc47 	bl	80036e4 <_init>
 8002e56:	4d0a      	ldr	r5, [pc, #40]	; (8002e80 <__libc_init_array+0x40>)
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <__libc_init_array+0x44>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	00b3      	lsls	r3, r6, #2
 8002e66:	58eb      	ldr	r3, [r5, r3]
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	00b3      	lsls	r3, r6, #2
 8002e70:	58eb      	ldr	r3, [r5, r3]
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08003800 	.word	0x08003800
 8002e7c:	08003800 	.word	0x08003800
 8002e80:	08003800 	.word	0x08003800
 8002e84:	08003804 	.word	0x08003804

08002e88 <memset>:
 8002e88:	0003      	movs	r3, r0
 8002e8a:	1882      	adds	r2, r0, r2
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	7019      	strb	r1, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <siprintf>:
 8002e98:	b40e      	push	{r1, r2, r3}
 8002e9a:	b500      	push	{lr}
 8002e9c:	490b      	ldr	r1, [pc, #44]	; (8002ecc <siprintf+0x34>)
 8002e9e:	b09c      	sub	sp, #112	; 0x70
 8002ea0:	ab1d      	add	r3, sp, #116	; 0x74
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	9006      	str	r0, [sp, #24]
 8002ea6:	9107      	str	r1, [sp, #28]
 8002ea8:	9104      	str	r1, [sp, #16]
 8002eaa:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <siprintf+0x38>)
 8002eac:	4909      	ldr	r1, [pc, #36]	; (8002ed4 <siprintf+0x3c>)
 8002eae:	cb04      	ldmia	r3!, {r2}
 8002eb0:	9105      	str	r1, [sp, #20]
 8002eb2:	6800      	ldr	r0, [r0, #0]
 8002eb4:	a902      	add	r1, sp, #8
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	f000 f870 	bl	8002f9c <_svfiprintf_r>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9a02      	ldr	r2, [sp, #8]
 8002ec0:	7013      	strb	r3, [r2, #0]
 8002ec2:	b01c      	add	sp, #112	; 0x70
 8002ec4:	bc08      	pop	{r3}
 8002ec6:	b003      	add	sp, #12
 8002ec8:	4718      	bx	r3
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	7fffffff 	.word	0x7fffffff
 8002ed0:	2000000c 	.word	0x2000000c
 8002ed4:	ffff0208 	.word	0xffff0208

08002ed8 <__ssputs_r>:
 8002ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eda:	688e      	ldr	r6, [r1, #8]
 8002edc:	b085      	sub	sp, #20
 8002ede:	0007      	movs	r7, r0
 8002ee0:	000c      	movs	r4, r1
 8002ee2:	9203      	str	r2, [sp, #12]
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	429e      	cmp	r6, r3
 8002ee8:	d83c      	bhi.n	8002f64 <__ssputs_r+0x8c>
 8002eea:	2390      	movs	r3, #144	; 0x90
 8002eec:	898a      	ldrh	r2, [r1, #12]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	421a      	tst	r2, r3
 8002ef2:	d034      	beq.n	8002f5e <__ssputs_r+0x86>
 8002ef4:	2503      	movs	r5, #3
 8002ef6:	6909      	ldr	r1, [r1, #16]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	1a5b      	subs	r3, r3, r1
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	6963      	ldr	r3, [r4, #20]
 8002f00:	9802      	ldr	r0, [sp, #8]
 8002f02:	435d      	muls	r5, r3
 8002f04:	0feb      	lsrs	r3, r5, #31
 8002f06:	195d      	adds	r5, r3, r5
 8002f08:	9b01      	ldr	r3, [sp, #4]
 8002f0a:	106d      	asrs	r5, r5, #1
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	181b      	adds	r3, r3, r0
 8002f10:	42ab      	cmp	r3, r5
 8002f12:	d900      	bls.n	8002f16 <__ssputs_r+0x3e>
 8002f14:	001d      	movs	r5, r3
 8002f16:	0553      	lsls	r3, r2, #21
 8002f18:	d532      	bpl.n	8002f80 <__ssputs_r+0xa8>
 8002f1a:	0029      	movs	r1, r5
 8002f1c:	0038      	movs	r0, r7
 8002f1e:	f000 fb31 	bl	8003584 <_malloc_r>
 8002f22:	1e06      	subs	r6, r0, #0
 8002f24:	d109      	bne.n	8002f3a <__ssputs_r+0x62>
 8002f26:	230c      	movs	r3, #12
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	2340      	movs	r3, #64	; 0x40
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	89a2      	ldrh	r2, [r4, #12]
 8002f30:	4240      	negs	r0, r0
 8002f32:	4313      	orrs	r3, r2
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	b005      	add	sp, #20
 8002f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3a:	9a02      	ldr	r2, [sp, #8]
 8002f3c:	6921      	ldr	r1, [r4, #16]
 8002f3e:	f000 faba 	bl	80034b6 <memcpy>
 8002f42:	89a3      	ldrh	r3, [r4, #12]
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <__ssputs_r+0xc0>)
 8002f46:	401a      	ands	r2, r3
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	81a3      	strh	r3, [r4, #12]
 8002f4e:	9b02      	ldr	r3, [sp, #8]
 8002f50:	6126      	str	r6, [r4, #16]
 8002f52:	18f6      	adds	r6, r6, r3
 8002f54:	6026      	str	r6, [r4, #0]
 8002f56:	6165      	str	r5, [r4, #20]
 8002f58:	9e01      	ldr	r6, [sp, #4]
 8002f5a:	1aed      	subs	r5, r5, r3
 8002f5c:	60a5      	str	r5, [r4, #8]
 8002f5e:	9b01      	ldr	r3, [sp, #4]
 8002f60:	429e      	cmp	r6, r3
 8002f62:	d900      	bls.n	8002f66 <__ssputs_r+0x8e>
 8002f64:	9e01      	ldr	r6, [sp, #4]
 8002f66:	0032      	movs	r2, r6
 8002f68:	9903      	ldr	r1, [sp, #12]
 8002f6a:	6820      	ldr	r0, [r4, #0]
 8002f6c:	f000 faac 	bl	80034c8 <memmove>
 8002f70:	68a3      	ldr	r3, [r4, #8]
 8002f72:	2000      	movs	r0, #0
 8002f74:	1b9b      	subs	r3, r3, r6
 8002f76:	60a3      	str	r3, [r4, #8]
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	199e      	adds	r6, r3, r6
 8002f7c:	6026      	str	r6, [r4, #0]
 8002f7e:	e7da      	b.n	8002f36 <__ssputs_r+0x5e>
 8002f80:	002a      	movs	r2, r5
 8002f82:	0038      	movs	r0, r7
 8002f84:	f000 fb5c 	bl	8003640 <_realloc_r>
 8002f88:	1e06      	subs	r6, r0, #0
 8002f8a:	d1e0      	bne.n	8002f4e <__ssputs_r+0x76>
 8002f8c:	0038      	movs	r0, r7
 8002f8e:	6921      	ldr	r1, [r4, #16]
 8002f90:	f000 faae 	bl	80034f0 <_free_r>
 8002f94:	e7c7      	b.n	8002f26 <__ssputs_r+0x4e>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	fffffb7f 	.word	0xfffffb7f

08002f9c <_svfiprintf_r>:
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9e:	b0a1      	sub	sp, #132	; 0x84
 8002fa0:	9003      	str	r0, [sp, #12]
 8002fa2:	001d      	movs	r5, r3
 8002fa4:	898b      	ldrh	r3, [r1, #12]
 8002fa6:	000f      	movs	r7, r1
 8002fa8:	0016      	movs	r6, r2
 8002faa:	061b      	lsls	r3, r3, #24
 8002fac:	d511      	bpl.n	8002fd2 <_svfiprintf_r+0x36>
 8002fae:	690b      	ldr	r3, [r1, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10e      	bne.n	8002fd2 <_svfiprintf_r+0x36>
 8002fb4:	2140      	movs	r1, #64	; 0x40
 8002fb6:	f000 fae5 	bl	8003584 <_malloc_r>
 8002fba:	6038      	str	r0, [r7, #0]
 8002fbc:	6138      	str	r0, [r7, #16]
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d105      	bne.n	8002fce <_svfiprintf_r+0x32>
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	9a03      	ldr	r2, [sp, #12]
 8002fc6:	3801      	subs	r0, #1
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	b021      	add	sp, #132	; 0x84
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fce:	2340      	movs	r3, #64	; 0x40
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	ac08      	add	r4, sp, #32
 8002fd6:	6163      	str	r3, [r4, #20]
 8002fd8:	3320      	adds	r3, #32
 8002fda:	7663      	strb	r3, [r4, #25]
 8002fdc:	3310      	adds	r3, #16
 8002fde:	76a3      	strb	r3, [r4, #26]
 8002fe0:	9507      	str	r5, [sp, #28]
 8002fe2:	0035      	movs	r5, r6
 8002fe4:	782b      	ldrb	r3, [r5, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <_svfiprintf_r+0x52>
 8002fea:	2b25      	cmp	r3, #37	; 0x25
 8002fec:	d147      	bne.n	800307e <_svfiprintf_r+0xe2>
 8002fee:	1bab      	subs	r3, r5, r6
 8002ff0:	9305      	str	r3, [sp, #20]
 8002ff2:	42b5      	cmp	r5, r6
 8002ff4:	d00c      	beq.n	8003010 <_svfiprintf_r+0x74>
 8002ff6:	0032      	movs	r2, r6
 8002ff8:	0039      	movs	r1, r7
 8002ffa:	9803      	ldr	r0, [sp, #12]
 8002ffc:	f7ff ff6c 	bl	8002ed8 <__ssputs_r>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d100      	bne.n	8003006 <_svfiprintf_r+0x6a>
 8003004:	e0ae      	b.n	8003164 <_svfiprintf_r+0x1c8>
 8003006:	6962      	ldr	r2, [r4, #20]
 8003008:	9b05      	ldr	r3, [sp, #20]
 800300a:	4694      	mov	ip, r2
 800300c:	4463      	add	r3, ip
 800300e:	6163      	str	r3, [r4, #20]
 8003010:	782b      	ldrb	r3, [r5, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d100      	bne.n	8003018 <_svfiprintf_r+0x7c>
 8003016:	e0a5      	b.n	8003164 <_svfiprintf_r+0x1c8>
 8003018:	2201      	movs	r2, #1
 800301a:	2300      	movs	r3, #0
 800301c:	4252      	negs	r2, r2
 800301e:	6062      	str	r2, [r4, #4]
 8003020:	a904      	add	r1, sp, #16
 8003022:	3254      	adds	r2, #84	; 0x54
 8003024:	1852      	adds	r2, r2, r1
 8003026:	1c6e      	adds	r6, r5, #1
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	60e3      	str	r3, [r4, #12]
 800302c:	60a3      	str	r3, [r4, #8]
 800302e:	7013      	strb	r3, [r2, #0]
 8003030:	65a3      	str	r3, [r4, #88]	; 0x58
 8003032:	2205      	movs	r2, #5
 8003034:	7831      	ldrb	r1, [r6, #0]
 8003036:	4854      	ldr	r0, [pc, #336]	; (8003188 <_svfiprintf_r+0x1ec>)
 8003038:	f000 fa32 	bl	80034a0 <memchr>
 800303c:	1c75      	adds	r5, r6, #1
 800303e:	2800      	cmp	r0, #0
 8003040:	d11f      	bne.n	8003082 <_svfiprintf_r+0xe6>
 8003042:	6822      	ldr	r2, [r4, #0]
 8003044:	06d3      	lsls	r3, r2, #27
 8003046:	d504      	bpl.n	8003052 <_svfiprintf_r+0xb6>
 8003048:	2353      	movs	r3, #83	; 0x53
 800304a:	a904      	add	r1, sp, #16
 800304c:	185b      	adds	r3, r3, r1
 800304e:	2120      	movs	r1, #32
 8003050:	7019      	strb	r1, [r3, #0]
 8003052:	0713      	lsls	r3, r2, #28
 8003054:	d504      	bpl.n	8003060 <_svfiprintf_r+0xc4>
 8003056:	2353      	movs	r3, #83	; 0x53
 8003058:	a904      	add	r1, sp, #16
 800305a:	185b      	adds	r3, r3, r1
 800305c:	212b      	movs	r1, #43	; 0x2b
 800305e:	7019      	strb	r1, [r3, #0]
 8003060:	7833      	ldrb	r3, [r6, #0]
 8003062:	2b2a      	cmp	r3, #42	; 0x2a
 8003064:	d016      	beq.n	8003094 <_svfiprintf_r+0xf8>
 8003066:	0035      	movs	r5, r6
 8003068:	2100      	movs	r1, #0
 800306a:	200a      	movs	r0, #10
 800306c:	68e3      	ldr	r3, [r4, #12]
 800306e:	782a      	ldrb	r2, [r5, #0]
 8003070:	1c6e      	adds	r6, r5, #1
 8003072:	3a30      	subs	r2, #48	; 0x30
 8003074:	2a09      	cmp	r2, #9
 8003076:	d94e      	bls.n	8003116 <_svfiprintf_r+0x17a>
 8003078:	2900      	cmp	r1, #0
 800307a:	d111      	bne.n	80030a0 <_svfiprintf_r+0x104>
 800307c:	e017      	b.n	80030ae <_svfiprintf_r+0x112>
 800307e:	3501      	adds	r5, #1
 8003080:	e7b0      	b.n	8002fe4 <_svfiprintf_r+0x48>
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <_svfiprintf_r+0x1ec>)
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	1ac0      	subs	r0, r0, r3
 8003088:	2301      	movs	r3, #1
 800308a:	4083      	lsls	r3, r0
 800308c:	4313      	orrs	r3, r2
 800308e:	002e      	movs	r6, r5
 8003090:	6023      	str	r3, [r4, #0]
 8003092:	e7ce      	b.n	8003032 <_svfiprintf_r+0x96>
 8003094:	9b07      	ldr	r3, [sp, #28]
 8003096:	1d19      	adds	r1, r3, #4
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	9107      	str	r1, [sp, #28]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db01      	blt.n	80030a4 <_svfiprintf_r+0x108>
 80030a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80030a2:	e004      	b.n	80030ae <_svfiprintf_r+0x112>
 80030a4:	425b      	negs	r3, r3
 80030a6:	60e3      	str	r3, [r4, #12]
 80030a8:	2302      	movs	r3, #2
 80030aa:	4313      	orrs	r3, r2
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	782b      	ldrb	r3, [r5, #0]
 80030b0:	2b2e      	cmp	r3, #46	; 0x2e
 80030b2:	d10a      	bne.n	80030ca <_svfiprintf_r+0x12e>
 80030b4:	786b      	ldrb	r3, [r5, #1]
 80030b6:	2b2a      	cmp	r3, #42	; 0x2a
 80030b8:	d135      	bne.n	8003126 <_svfiprintf_r+0x18a>
 80030ba:	9b07      	ldr	r3, [sp, #28]
 80030bc:	3502      	adds	r5, #2
 80030be:	1d1a      	adds	r2, r3, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	9207      	str	r2, [sp, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db2b      	blt.n	8003120 <_svfiprintf_r+0x184>
 80030c8:	9309      	str	r3, [sp, #36]	; 0x24
 80030ca:	4e30      	ldr	r6, [pc, #192]	; (800318c <_svfiprintf_r+0x1f0>)
 80030cc:	2203      	movs	r2, #3
 80030ce:	0030      	movs	r0, r6
 80030d0:	7829      	ldrb	r1, [r5, #0]
 80030d2:	f000 f9e5 	bl	80034a0 <memchr>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d006      	beq.n	80030e8 <_svfiprintf_r+0x14c>
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	1b80      	subs	r0, r0, r6
 80030de:	4083      	lsls	r3, r0
 80030e0:	6822      	ldr	r2, [r4, #0]
 80030e2:	3501      	adds	r5, #1
 80030e4:	4313      	orrs	r3, r2
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	7829      	ldrb	r1, [r5, #0]
 80030ea:	2206      	movs	r2, #6
 80030ec:	4828      	ldr	r0, [pc, #160]	; (8003190 <_svfiprintf_r+0x1f4>)
 80030ee:	1c6e      	adds	r6, r5, #1
 80030f0:	7621      	strb	r1, [r4, #24]
 80030f2:	f000 f9d5 	bl	80034a0 <memchr>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d03c      	beq.n	8003174 <_svfiprintf_r+0x1d8>
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <_svfiprintf_r+0x1f8>)
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d125      	bne.n	800314c <_svfiprintf_r+0x1b0>
 8003100:	2207      	movs	r2, #7
 8003102:	9b07      	ldr	r3, [sp, #28]
 8003104:	3307      	adds	r3, #7
 8003106:	4393      	bics	r3, r2
 8003108:	3308      	adds	r3, #8
 800310a:	9307      	str	r3, [sp, #28]
 800310c:	6963      	ldr	r3, [r4, #20]
 800310e:	9a04      	ldr	r2, [sp, #16]
 8003110:	189b      	adds	r3, r3, r2
 8003112:	6163      	str	r3, [r4, #20]
 8003114:	e765      	b.n	8002fe2 <_svfiprintf_r+0x46>
 8003116:	4343      	muls	r3, r0
 8003118:	0035      	movs	r5, r6
 800311a:	2101      	movs	r1, #1
 800311c:	189b      	adds	r3, r3, r2
 800311e:	e7a6      	b.n	800306e <_svfiprintf_r+0xd2>
 8003120:	2301      	movs	r3, #1
 8003122:	425b      	negs	r3, r3
 8003124:	e7d0      	b.n	80030c8 <_svfiprintf_r+0x12c>
 8003126:	2300      	movs	r3, #0
 8003128:	200a      	movs	r0, #10
 800312a:	001a      	movs	r2, r3
 800312c:	3501      	adds	r5, #1
 800312e:	6063      	str	r3, [r4, #4]
 8003130:	7829      	ldrb	r1, [r5, #0]
 8003132:	1c6e      	adds	r6, r5, #1
 8003134:	3930      	subs	r1, #48	; 0x30
 8003136:	2909      	cmp	r1, #9
 8003138:	d903      	bls.n	8003142 <_svfiprintf_r+0x1a6>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0c5      	beq.n	80030ca <_svfiprintf_r+0x12e>
 800313e:	9209      	str	r2, [sp, #36]	; 0x24
 8003140:	e7c3      	b.n	80030ca <_svfiprintf_r+0x12e>
 8003142:	4342      	muls	r2, r0
 8003144:	0035      	movs	r5, r6
 8003146:	2301      	movs	r3, #1
 8003148:	1852      	adds	r2, r2, r1
 800314a:	e7f1      	b.n	8003130 <_svfiprintf_r+0x194>
 800314c:	ab07      	add	r3, sp, #28
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	003a      	movs	r2, r7
 8003152:	0021      	movs	r1, r4
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <_svfiprintf_r+0x1fc>)
 8003156:	9803      	ldr	r0, [sp, #12]
 8003158:	e000      	b.n	800315c <_svfiprintf_r+0x1c0>
 800315a:	bf00      	nop
 800315c:	9004      	str	r0, [sp, #16]
 800315e:	9b04      	ldr	r3, [sp, #16]
 8003160:	3301      	adds	r3, #1
 8003162:	d1d3      	bne.n	800310c <_svfiprintf_r+0x170>
 8003164:	89bb      	ldrh	r3, [r7, #12]
 8003166:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003168:	065b      	lsls	r3, r3, #25
 800316a:	d400      	bmi.n	800316e <_svfiprintf_r+0x1d2>
 800316c:	e72d      	b.n	8002fca <_svfiprintf_r+0x2e>
 800316e:	2001      	movs	r0, #1
 8003170:	4240      	negs	r0, r0
 8003172:	e72a      	b.n	8002fca <_svfiprintf_r+0x2e>
 8003174:	ab07      	add	r3, sp, #28
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	003a      	movs	r2, r7
 800317a:	0021      	movs	r1, r4
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <_svfiprintf_r+0x1fc>)
 800317e:	9803      	ldr	r0, [sp, #12]
 8003180:	f000 f87c 	bl	800327c <_printf_i>
 8003184:	e7ea      	b.n	800315c <_svfiprintf_r+0x1c0>
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	080037c4 	.word	0x080037c4
 800318c:	080037ca 	.word	0x080037ca
 8003190:	080037ce 	.word	0x080037ce
 8003194:	00000000 	.word	0x00000000
 8003198:	08002ed9 	.word	0x08002ed9

0800319c <_printf_common>:
 800319c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800319e:	0015      	movs	r5, r2
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	688a      	ldr	r2, [r1, #8]
 80031a4:	690b      	ldr	r3, [r1, #16]
 80031a6:	000c      	movs	r4, r1
 80031a8:	9000      	str	r0, [sp, #0]
 80031aa:	4293      	cmp	r3, r2
 80031ac:	da00      	bge.n	80031b0 <_printf_common+0x14>
 80031ae:	0013      	movs	r3, r2
 80031b0:	0022      	movs	r2, r4
 80031b2:	602b      	str	r3, [r5, #0]
 80031b4:	3243      	adds	r2, #67	; 0x43
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d001      	beq.n	80031c0 <_printf_common+0x24>
 80031bc:	3301      	adds	r3, #1
 80031be:	602b      	str	r3, [r5, #0]
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	069b      	lsls	r3, r3, #26
 80031c4:	d502      	bpl.n	80031cc <_printf_common+0x30>
 80031c6:	682b      	ldr	r3, [r5, #0]
 80031c8:	3302      	adds	r3, #2
 80031ca:	602b      	str	r3, [r5, #0]
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	2306      	movs	r3, #6
 80031d0:	0017      	movs	r7, r2
 80031d2:	401f      	ands	r7, r3
 80031d4:	421a      	tst	r2, r3
 80031d6:	d027      	beq.n	8003228 <_printf_common+0x8c>
 80031d8:	0023      	movs	r3, r4
 80031da:	3343      	adds	r3, #67	; 0x43
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	4193      	sbcs	r3, r2
 80031e2:	6822      	ldr	r2, [r4, #0]
 80031e4:	0692      	lsls	r2, r2, #26
 80031e6:	d430      	bmi.n	800324a <_printf_common+0xae>
 80031e8:	0022      	movs	r2, r4
 80031ea:	9901      	ldr	r1, [sp, #4]
 80031ec:	9800      	ldr	r0, [sp, #0]
 80031ee:	9e08      	ldr	r6, [sp, #32]
 80031f0:	3243      	adds	r2, #67	; 0x43
 80031f2:	47b0      	blx	r6
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d025      	beq.n	8003244 <_printf_common+0xa8>
 80031f8:	2306      	movs	r3, #6
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	682a      	ldr	r2, [r5, #0]
 80031fe:	68e1      	ldr	r1, [r4, #12]
 8003200:	2500      	movs	r5, #0
 8003202:	4003      	ands	r3, r0
 8003204:	2b04      	cmp	r3, #4
 8003206:	d103      	bne.n	8003210 <_printf_common+0x74>
 8003208:	1a8d      	subs	r5, r1, r2
 800320a:	43eb      	mvns	r3, r5
 800320c:	17db      	asrs	r3, r3, #31
 800320e:	401d      	ands	r5, r3
 8003210:	68a3      	ldr	r3, [r4, #8]
 8003212:	6922      	ldr	r2, [r4, #16]
 8003214:	4293      	cmp	r3, r2
 8003216:	dd01      	ble.n	800321c <_printf_common+0x80>
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	18ed      	adds	r5, r5, r3
 800321c:	2700      	movs	r7, #0
 800321e:	42bd      	cmp	r5, r7
 8003220:	d120      	bne.n	8003264 <_printf_common+0xc8>
 8003222:	2000      	movs	r0, #0
 8003224:	e010      	b.n	8003248 <_printf_common+0xac>
 8003226:	3701      	adds	r7, #1
 8003228:	68e3      	ldr	r3, [r4, #12]
 800322a:	682a      	ldr	r2, [r5, #0]
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	42bb      	cmp	r3, r7
 8003230:	ddd2      	ble.n	80031d8 <_printf_common+0x3c>
 8003232:	0022      	movs	r2, r4
 8003234:	2301      	movs	r3, #1
 8003236:	9901      	ldr	r1, [sp, #4]
 8003238:	9800      	ldr	r0, [sp, #0]
 800323a:	9e08      	ldr	r6, [sp, #32]
 800323c:	3219      	adds	r2, #25
 800323e:	47b0      	blx	r6
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	d1f0      	bne.n	8003226 <_printf_common+0x8a>
 8003244:	2001      	movs	r0, #1
 8003246:	4240      	negs	r0, r0
 8003248:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800324a:	2030      	movs	r0, #48	; 0x30
 800324c:	18e1      	adds	r1, r4, r3
 800324e:	3143      	adds	r1, #67	; 0x43
 8003250:	7008      	strb	r0, [r1, #0]
 8003252:	0021      	movs	r1, r4
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	3145      	adds	r1, #69	; 0x45
 8003258:	7809      	ldrb	r1, [r1, #0]
 800325a:	18a2      	adds	r2, r4, r2
 800325c:	3243      	adds	r2, #67	; 0x43
 800325e:	3302      	adds	r3, #2
 8003260:	7011      	strb	r1, [r2, #0]
 8003262:	e7c1      	b.n	80031e8 <_printf_common+0x4c>
 8003264:	0022      	movs	r2, r4
 8003266:	2301      	movs	r3, #1
 8003268:	9901      	ldr	r1, [sp, #4]
 800326a:	9800      	ldr	r0, [sp, #0]
 800326c:	9e08      	ldr	r6, [sp, #32]
 800326e:	321a      	adds	r2, #26
 8003270:	47b0      	blx	r6
 8003272:	1c43      	adds	r3, r0, #1
 8003274:	d0e6      	beq.n	8003244 <_printf_common+0xa8>
 8003276:	3701      	adds	r7, #1
 8003278:	e7d1      	b.n	800321e <_printf_common+0x82>
	...

0800327c <_printf_i>:
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b08b      	sub	sp, #44	; 0x2c
 8003280:	9206      	str	r2, [sp, #24]
 8003282:	000a      	movs	r2, r1
 8003284:	3243      	adds	r2, #67	; 0x43
 8003286:	9307      	str	r3, [sp, #28]
 8003288:	9005      	str	r0, [sp, #20]
 800328a:	9204      	str	r2, [sp, #16]
 800328c:	7e0a      	ldrb	r2, [r1, #24]
 800328e:	000c      	movs	r4, r1
 8003290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003292:	2a78      	cmp	r2, #120	; 0x78
 8003294:	d806      	bhi.n	80032a4 <_printf_i+0x28>
 8003296:	2a62      	cmp	r2, #98	; 0x62
 8003298:	d808      	bhi.n	80032ac <_printf_i+0x30>
 800329a:	2a00      	cmp	r2, #0
 800329c:	d100      	bne.n	80032a0 <_printf_i+0x24>
 800329e:	e0c0      	b.n	8003422 <_printf_i+0x1a6>
 80032a0:	2a58      	cmp	r2, #88	; 0x58
 80032a2:	d052      	beq.n	800334a <_printf_i+0xce>
 80032a4:	0026      	movs	r6, r4
 80032a6:	3642      	adds	r6, #66	; 0x42
 80032a8:	7032      	strb	r2, [r6, #0]
 80032aa:	e022      	b.n	80032f2 <_printf_i+0x76>
 80032ac:	0010      	movs	r0, r2
 80032ae:	3863      	subs	r0, #99	; 0x63
 80032b0:	2815      	cmp	r0, #21
 80032b2:	d8f7      	bhi.n	80032a4 <_printf_i+0x28>
 80032b4:	f7fc ff28 	bl	8000108 <__gnu_thumb1_case_shi>
 80032b8:	001f0016 	.word	0x001f0016
 80032bc:	fff6fff6 	.word	0xfff6fff6
 80032c0:	fff6fff6 	.word	0xfff6fff6
 80032c4:	fff6001f 	.word	0xfff6001f
 80032c8:	fff6fff6 	.word	0xfff6fff6
 80032cc:	00a8fff6 	.word	0x00a8fff6
 80032d0:	009a0036 	.word	0x009a0036
 80032d4:	fff6fff6 	.word	0xfff6fff6
 80032d8:	fff600b9 	.word	0xfff600b9
 80032dc:	fff60036 	.word	0xfff60036
 80032e0:	009efff6 	.word	0x009efff6
 80032e4:	0026      	movs	r6, r4
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	3642      	adds	r6, #66	; 0x42
 80032ea:	1d11      	adds	r1, r2, #4
 80032ec:	6019      	str	r1, [r3, #0]
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	7033      	strb	r3, [r6, #0]
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0a7      	b.n	8003446 <_printf_i+0x1ca>
 80032f6:	6808      	ldr	r0, [r1, #0]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	1d0a      	adds	r2, r1, #4
 80032fc:	0605      	lsls	r5, r0, #24
 80032fe:	d50b      	bpl.n	8003318 <_printf_i+0x9c>
 8003300:	680d      	ldr	r5, [r1, #0]
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	2d00      	cmp	r5, #0
 8003306:	da03      	bge.n	8003310 <_printf_i+0x94>
 8003308:	232d      	movs	r3, #45	; 0x2d
 800330a:	9a04      	ldr	r2, [sp, #16]
 800330c:	426d      	negs	r5, r5
 800330e:	7013      	strb	r3, [r2, #0]
 8003310:	4b61      	ldr	r3, [pc, #388]	; (8003498 <_printf_i+0x21c>)
 8003312:	270a      	movs	r7, #10
 8003314:	9303      	str	r3, [sp, #12]
 8003316:	e032      	b.n	800337e <_printf_i+0x102>
 8003318:	680d      	ldr	r5, [r1, #0]
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	0641      	lsls	r1, r0, #25
 800331e:	d5f1      	bpl.n	8003304 <_printf_i+0x88>
 8003320:	b22d      	sxth	r5, r5
 8003322:	e7ef      	b.n	8003304 <_printf_i+0x88>
 8003324:	680d      	ldr	r5, [r1, #0]
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	1d08      	adds	r0, r1, #4
 800332a:	6018      	str	r0, [r3, #0]
 800332c:	062e      	lsls	r6, r5, #24
 800332e:	d501      	bpl.n	8003334 <_printf_i+0xb8>
 8003330:	680d      	ldr	r5, [r1, #0]
 8003332:	e003      	b.n	800333c <_printf_i+0xc0>
 8003334:	066d      	lsls	r5, r5, #25
 8003336:	d5fb      	bpl.n	8003330 <_printf_i+0xb4>
 8003338:	680d      	ldr	r5, [r1, #0]
 800333a:	b2ad      	uxth	r5, r5
 800333c:	4b56      	ldr	r3, [pc, #344]	; (8003498 <_printf_i+0x21c>)
 800333e:	270a      	movs	r7, #10
 8003340:	9303      	str	r3, [sp, #12]
 8003342:	2a6f      	cmp	r2, #111	; 0x6f
 8003344:	d117      	bne.n	8003376 <_printf_i+0xfa>
 8003346:	2708      	movs	r7, #8
 8003348:	e015      	b.n	8003376 <_printf_i+0xfa>
 800334a:	3145      	adds	r1, #69	; 0x45
 800334c:	700a      	strb	r2, [r1, #0]
 800334e:	4a52      	ldr	r2, [pc, #328]	; (8003498 <_printf_i+0x21c>)
 8003350:	9203      	str	r2, [sp, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6821      	ldr	r1, [r4, #0]
 8003356:	ca20      	ldmia	r2!, {r5}
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	0608      	lsls	r0, r1, #24
 800335c:	d550      	bpl.n	8003400 <_printf_i+0x184>
 800335e:	07cb      	lsls	r3, r1, #31
 8003360:	d502      	bpl.n	8003368 <_printf_i+0xec>
 8003362:	2320      	movs	r3, #32
 8003364:	4319      	orrs	r1, r3
 8003366:	6021      	str	r1, [r4, #0]
 8003368:	2710      	movs	r7, #16
 800336a:	2d00      	cmp	r5, #0
 800336c:	d103      	bne.n	8003376 <_printf_i+0xfa>
 800336e:	2320      	movs	r3, #32
 8003370:	6822      	ldr	r2, [r4, #0]
 8003372:	439a      	bics	r2, r3
 8003374:	6022      	str	r2, [r4, #0]
 8003376:	0023      	movs	r3, r4
 8003378:	2200      	movs	r2, #0
 800337a:	3343      	adds	r3, #67	; 0x43
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	6863      	ldr	r3, [r4, #4]
 8003380:	60a3      	str	r3, [r4, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db03      	blt.n	800338e <_printf_i+0x112>
 8003386:	2204      	movs	r2, #4
 8003388:	6821      	ldr	r1, [r4, #0]
 800338a:	4391      	bics	r1, r2
 800338c:	6021      	str	r1, [r4, #0]
 800338e:	2d00      	cmp	r5, #0
 8003390:	d102      	bne.n	8003398 <_printf_i+0x11c>
 8003392:	9e04      	ldr	r6, [sp, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00c      	beq.n	80033b2 <_printf_i+0x136>
 8003398:	9e04      	ldr	r6, [sp, #16]
 800339a:	0028      	movs	r0, r5
 800339c:	0039      	movs	r1, r7
 800339e:	f7fc ff43 	bl	8000228 <__aeabi_uidivmod>
 80033a2:	9b03      	ldr	r3, [sp, #12]
 80033a4:	3e01      	subs	r6, #1
 80033a6:	5c5b      	ldrb	r3, [r3, r1]
 80033a8:	7033      	strb	r3, [r6, #0]
 80033aa:	002b      	movs	r3, r5
 80033ac:	0005      	movs	r5, r0
 80033ae:	429f      	cmp	r7, r3
 80033b0:	d9f3      	bls.n	800339a <_printf_i+0x11e>
 80033b2:	2f08      	cmp	r7, #8
 80033b4:	d109      	bne.n	80033ca <_printf_i+0x14e>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	07db      	lsls	r3, r3, #31
 80033ba:	d506      	bpl.n	80033ca <_printf_i+0x14e>
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	6922      	ldr	r2, [r4, #16]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	dc02      	bgt.n	80033ca <_printf_i+0x14e>
 80033c4:	2330      	movs	r3, #48	; 0x30
 80033c6:	3e01      	subs	r6, #1
 80033c8:	7033      	strb	r3, [r6, #0]
 80033ca:	9b04      	ldr	r3, [sp, #16]
 80033cc:	1b9b      	subs	r3, r3, r6
 80033ce:	6123      	str	r3, [r4, #16]
 80033d0:	9b07      	ldr	r3, [sp, #28]
 80033d2:	0021      	movs	r1, r4
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	9805      	ldr	r0, [sp, #20]
 80033d8:	9b06      	ldr	r3, [sp, #24]
 80033da:	aa09      	add	r2, sp, #36	; 0x24
 80033dc:	f7ff fede 	bl	800319c <_printf_common>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d135      	bne.n	8003450 <_printf_i+0x1d4>
 80033e4:	2001      	movs	r0, #1
 80033e6:	4240      	negs	r0, r0
 80033e8:	b00b      	add	sp, #44	; 0x2c
 80033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ec:	2220      	movs	r2, #32
 80033ee:	6809      	ldr	r1, [r1, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	6022      	str	r2, [r4, #0]
 80033f4:	0022      	movs	r2, r4
 80033f6:	2178      	movs	r1, #120	; 0x78
 80033f8:	3245      	adds	r2, #69	; 0x45
 80033fa:	7011      	strb	r1, [r2, #0]
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <_printf_i+0x220>)
 80033fe:	e7a7      	b.n	8003350 <_printf_i+0xd4>
 8003400:	0648      	lsls	r0, r1, #25
 8003402:	d5ac      	bpl.n	800335e <_printf_i+0xe2>
 8003404:	b2ad      	uxth	r5, r5
 8003406:	e7aa      	b.n	800335e <_printf_i+0xe2>
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	680d      	ldr	r5, [r1, #0]
 800340c:	1d10      	adds	r0, r2, #4
 800340e:	6949      	ldr	r1, [r1, #20]
 8003410:	6018      	str	r0, [r3, #0]
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	062e      	lsls	r6, r5, #24
 8003416:	d501      	bpl.n	800341c <_printf_i+0x1a0>
 8003418:	6019      	str	r1, [r3, #0]
 800341a:	e002      	b.n	8003422 <_printf_i+0x1a6>
 800341c:	066d      	lsls	r5, r5, #25
 800341e:	d5fb      	bpl.n	8003418 <_printf_i+0x19c>
 8003420:	8019      	strh	r1, [r3, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	9e04      	ldr	r6, [sp, #16]
 8003426:	6123      	str	r3, [r4, #16]
 8003428:	e7d2      	b.n	80033d0 <_printf_i+0x154>
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	1d11      	adds	r1, r2, #4
 800342e:	6019      	str	r1, [r3, #0]
 8003430:	6816      	ldr	r6, [r2, #0]
 8003432:	2100      	movs	r1, #0
 8003434:	0030      	movs	r0, r6
 8003436:	6862      	ldr	r2, [r4, #4]
 8003438:	f000 f832 	bl	80034a0 <memchr>
 800343c:	2800      	cmp	r0, #0
 800343e:	d001      	beq.n	8003444 <_printf_i+0x1c8>
 8003440:	1b80      	subs	r0, r0, r6
 8003442:	6060      	str	r0, [r4, #4]
 8003444:	6863      	ldr	r3, [r4, #4]
 8003446:	6123      	str	r3, [r4, #16]
 8003448:	2300      	movs	r3, #0
 800344a:	9a04      	ldr	r2, [sp, #16]
 800344c:	7013      	strb	r3, [r2, #0]
 800344e:	e7bf      	b.n	80033d0 <_printf_i+0x154>
 8003450:	6923      	ldr	r3, [r4, #16]
 8003452:	0032      	movs	r2, r6
 8003454:	9906      	ldr	r1, [sp, #24]
 8003456:	9805      	ldr	r0, [sp, #20]
 8003458:	9d07      	ldr	r5, [sp, #28]
 800345a:	47a8      	blx	r5
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d0c1      	beq.n	80033e4 <_printf_i+0x168>
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	079b      	lsls	r3, r3, #30
 8003464:	d415      	bmi.n	8003492 <_printf_i+0x216>
 8003466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003468:	68e0      	ldr	r0, [r4, #12]
 800346a:	4298      	cmp	r0, r3
 800346c:	dabc      	bge.n	80033e8 <_printf_i+0x16c>
 800346e:	0018      	movs	r0, r3
 8003470:	e7ba      	b.n	80033e8 <_printf_i+0x16c>
 8003472:	0022      	movs	r2, r4
 8003474:	2301      	movs	r3, #1
 8003476:	9906      	ldr	r1, [sp, #24]
 8003478:	9805      	ldr	r0, [sp, #20]
 800347a:	9e07      	ldr	r6, [sp, #28]
 800347c:	3219      	adds	r2, #25
 800347e:	47b0      	blx	r6
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d0af      	beq.n	80033e4 <_printf_i+0x168>
 8003484:	3501      	adds	r5, #1
 8003486:	68e3      	ldr	r3, [r4, #12]
 8003488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	42ab      	cmp	r3, r5
 800348e:	dcf0      	bgt.n	8003472 <_printf_i+0x1f6>
 8003490:	e7e9      	b.n	8003466 <_printf_i+0x1ea>
 8003492:	2500      	movs	r5, #0
 8003494:	e7f7      	b.n	8003486 <_printf_i+0x20a>
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	080037d5 	.word	0x080037d5
 800349c:	080037e6 	.word	0x080037e6

080034a0 <memchr>:
 80034a0:	b2c9      	uxtb	r1, r1
 80034a2:	1882      	adds	r2, r0, r2
 80034a4:	4290      	cmp	r0, r2
 80034a6:	d101      	bne.n	80034ac <memchr+0xc>
 80034a8:	2000      	movs	r0, #0
 80034aa:	4770      	bx	lr
 80034ac:	7803      	ldrb	r3, [r0, #0]
 80034ae:	428b      	cmp	r3, r1
 80034b0:	d0fb      	beq.n	80034aa <memchr+0xa>
 80034b2:	3001      	adds	r0, #1
 80034b4:	e7f6      	b.n	80034a4 <memchr+0x4>

080034b6 <memcpy>:
 80034b6:	2300      	movs	r3, #0
 80034b8:	b510      	push	{r4, lr}
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d100      	bne.n	80034c0 <memcpy+0xa>
 80034be:	bd10      	pop	{r4, pc}
 80034c0:	5ccc      	ldrb	r4, [r1, r3]
 80034c2:	54c4      	strb	r4, [r0, r3]
 80034c4:	3301      	adds	r3, #1
 80034c6:	e7f8      	b.n	80034ba <memcpy+0x4>

080034c8 <memmove>:
 80034c8:	b510      	push	{r4, lr}
 80034ca:	4288      	cmp	r0, r1
 80034cc:	d902      	bls.n	80034d4 <memmove+0xc>
 80034ce:	188b      	adds	r3, r1, r2
 80034d0:	4298      	cmp	r0, r3
 80034d2:	d303      	bcc.n	80034dc <memmove+0x14>
 80034d4:	2300      	movs	r3, #0
 80034d6:	e007      	b.n	80034e8 <memmove+0x20>
 80034d8:	5c8b      	ldrb	r3, [r1, r2]
 80034da:	5483      	strb	r3, [r0, r2]
 80034dc:	3a01      	subs	r2, #1
 80034de:	d2fb      	bcs.n	80034d8 <memmove+0x10>
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	5ccc      	ldrb	r4, [r1, r3]
 80034e4:	54c4      	strb	r4, [r0, r3]
 80034e6:	3301      	adds	r3, #1
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1fa      	bne.n	80034e2 <memmove+0x1a>
 80034ec:	e7f8      	b.n	80034e0 <memmove+0x18>
	...

080034f0 <_free_r>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	0005      	movs	r5, r0
 80034f4:	2900      	cmp	r1, #0
 80034f6:	d010      	beq.n	800351a <_free_r+0x2a>
 80034f8:	1f0c      	subs	r4, r1, #4
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da00      	bge.n	8003502 <_free_r+0x12>
 8003500:	18e4      	adds	r4, r4, r3
 8003502:	0028      	movs	r0, r5
 8003504:	f000 f8d4 	bl	80036b0 <__malloc_lock>
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <_free_r+0x90>)
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <_free_r+0x2c>
 8003510:	6063      	str	r3, [r4, #4]
 8003512:	6014      	str	r4, [r2, #0]
 8003514:	0028      	movs	r0, r5
 8003516:	f000 f8d3 	bl	80036c0 <__malloc_unlock>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	42a3      	cmp	r3, r4
 800351e:	d908      	bls.n	8003532 <_free_r+0x42>
 8003520:	6821      	ldr	r1, [r4, #0]
 8003522:	1860      	adds	r0, r4, r1
 8003524:	4283      	cmp	r3, r0
 8003526:	d1f3      	bne.n	8003510 <_free_r+0x20>
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	1841      	adds	r1, r0, r1
 800352e:	6021      	str	r1, [r4, #0]
 8003530:	e7ee      	b.n	8003510 <_free_r+0x20>
 8003532:	001a      	movs	r2, r3
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <_free_r+0x4e>
 800353a:	42a3      	cmp	r3, r4
 800353c:	d9f9      	bls.n	8003532 <_free_r+0x42>
 800353e:	6811      	ldr	r1, [r2, #0]
 8003540:	1850      	adds	r0, r2, r1
 8003542:	42a0      	cmp	r0, r4
 8003544:	d10b      	bne.n	800355e <_free_r+0x6e>
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	1809      	adds	r1, r1, r0
 800354a:	1850      	adds	r0, r2, r1
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	4283      	cmp	r3, r0
 8003550:	d1e0      	bne.n	8003514 <_free_r+0x24>
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	1841      	adds	r1, r0, r1
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	6053      	str	r3, [r2, #4]
 800355c:	e7da      	b.n	8003514 <_free_r+0x24>
 800355e:	42a0      	cmp	r0, r4
 8003560:	d902      	bls.n	8003568 <_free_r+0x78>
 8003562:	230c      	movs	r3, #12
 8003564:	602b      	str	r3, [r5, #0]
 8003566:	e7d5      	b.n	8003514 <_free_r+0x24>
 8003568:	6821      	ldr	r1, [r4, #0]
 800356a:	1860      	adds	r0, r4, r1
 800356c:	4283      	cmp	r3, r0
 800356e:	d103      	bne.n	8003578 <_free_r+0x88>
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	1841      	adds	r1, r0, r1
 8003576:	6021      	str	r1, [r4, #0]
 8003578:	6063      	str	r3, [r4, #4]
 800357a:	6054      	str	r4, [r2, #4]
 800357c:	e7ca      	b.n	8003514 <_free_r+0x24>
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	20000090 	.word	0x20000090

08003584 <_malloc_r>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	2303      	movs	r3, #3
 8003588:	1ccd      	adds	r5, r1, #3
 800358a:	439d      	bics	r5, r3
 800358c:	3508      	adds	r5, #8
 800358e:	0006      	movs	r6, r0
 8003590:	2d0c      	cmp	r5, #12
 8003592:	d21f      	bcs.n	80035d4 <_malloc_r+0x50>
 8003594:	250c      	movs	r5, #12
 8003596:	42a9      	cmp	r1, r5
 8003598:	d81e      	bhi.n	80035d8 <_malloc_r+0x54>
 800359a:	0030      	movs	r0, r6
 800359c:	f000 f888 	bl	80036b0 <__malloc_lock>
 80035a0:	4925      	ldr	r1, [pc, #148]	; (8003638 <_malloc_r+0xb4>)
 80035a2:	680a      	ldr	r2, [r1, #0]
 80035a4:	0014      	movs	r4, r2
 80035a6:	2c00      	cmp	r4, #0
 80035a8:	d11a      	bne.n	80035e0 <_malloc_r+0x5c>
 80035aa:	4f24      	ldr	r7, [pc, #144]	; (800363c <_malloc_r+0xb8>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <_malloc_r+0x38>
 80035b2:	0021      	movs	r1, r4
 80035b4:	0030      	movs	r0, r6
 80035b6:	f000 f869 	bl	800368c <_sbrk_r>
 80035ba:	6038      	str	r0, [r7, #0]
 80035bc:	0029      	movs	r1, r5
 80035be:	0030      	movs	r0, r6
 80035c0:	f000 f864 	bl	800368c <_sbrk_r>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d12b      	bne.n	8003620 <_malloc_r+0x9c>
 80035c8:	230c      	movs	r3, #12
 80035ca:	0030      	movs	r0, r6
 80035cc:	6033      	str	r3, [r6, #0]
 80035ce:	f000 f877 	bl	80036c0 <__malloc_unlock>
 80035d2:	e003      	b.n	80035dc <_malloc_r+0x58>
 80035d4:	2d00      	cmp	r5, #0
 80035d6:	dade      	bge.n	8003596 <_malloc_r+0x12>
 80035d8:	230c      	movs	r3, #12
 80035da:	6033      	str	r3, [r6, #0]
 80035dc:	2000      	movs	r0, #0
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	1b5b      	subs	r3, r3, r5
 80035e4:	d419      	bmi.n	800361a <_malloc_r+0x96>
 80035e6:	2b0b      	cmp	r3, #11
 80035e8:	d903      	bls.n	80035f2 <_malloc_r+0x6e>
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	18e4      	adds	r4, r4, r3
 80035ee:	6025      	str	r5, [r4, #0]
 80035f0:	e003      	b.n	80035fa <_malloc_r+0x76>
 80035f2:	6863      	ldr	r3, [r4, #4]
 80035f4:	42a2      	cmp	r2, r4
 80035f6:	d10e      	bne.n	8003616 <_malloc_r+0x92>
 80035f8:	600b      	str	r3, [r1, #0]
 80035fa:	0030      	movs	r0, r6
 80035fc:	f000 f860 	bl	80036c0 <__malloc_unlock>
 8003600:	0020      	movs	r0, r4
 8003602:	2207      	movs	r2, #7
 8003604:	300b      	adds	r0, #11
 8003606:	1d23      	adds	r3, r4, #4
 8003608:	4390      	bics	r0, r2
 800360a:	1ac2      	subs	r2, r0, r3
 800360c:	4298      	cmp	r0, r3
 800360e:	d0e6      	beq.n	80035de <_malloc_r+0x5a>
 8003610:	1a1b      	subs	r3, r3, r0
 8003612:	50a3      	str	r3, [r4, r2]
 8003614:	e7e3      	b.n	80035de <_malloc_r+0x5a>
 8003616:	6053      	str	r3, [r2, #4]
 8003618:	e7ef      	b.n	80035fa <_malloc_r+0x76>
 800361a:	0022      	movs	r2, r4
 800361c:	6864      	ldr	r4, [r4, #4]
 800361e:	e7c2      	b.n	80035a6 <_malloc_r+0x22>
 8003620:	2303      	movs	r3, #3
 8003622:	1cc4      	adds	r4, r0, #3
 8003624:	439c      	bics	r4, r3
 8003626:	42a0      	cmp	r0, r4
 8003628:	d0e1      	beq.n	80035ee <_malloc_r+0x6a>
 800362a:	1a21      	subs	r1, r4, r0
 800362c:	0030      	movs	r0, r6
 800362e:	f000 f82d 	bl	800368c <_sbrk_r>
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	d1db      	bne.n	80035ee <_malloc_r+0x6a>
 8003636:	e7c7      	b.n	80035c8 <_malloc_r+0x44>
 8003638:	20000090 	.word	0x20000090
 800363c:	20000094 	.word	0x20000094

08003640 <_realloc_r>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	0007      	movs	r7, r0
 8003644:	000d      	movs	r5, r1
 8003646:	0016      	movs	r6, r2
 8003648:	2900      	cmp	r1, #0
 800364a:	d105      	bne.n	8003658 <_realloc_r+0x18>
 800364c:	0011      	movs	r1, r2
 800364e:	f7ff ff99 	bl	8003584 <_malloc_r>
 8003652:	0004      	movs	r4, r0
 8003654:	0020      	movs	r0, r4
 8003656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003658:	2a00      	cmp	r2, #0
 800365a:	d103      	bne.n	8003664 <_realloc_r+0x24>
 800365c:	f7ff ff48 	bl	80034f0 <_free_r>
 8003660:	0034      	movs	r4, r6
 8003662:	e7f7      	b.n	8003654 <_realloc_r+0x14>
 8003664:	f000 f834 	bl	80036d0 <_malloc_usable_size_r>
 8003668:	002c      	movs	r4, r5
 800366a:	42b0      	cmp	r0, r6
 800366c:	d2f2      	bcs.n	8003654 <_realloc_r+0x14>
 800366e:	0031      	movs	r1, r6
 8003670:	0038      	movs	r0, r7
 8003672:	f7ff ff87 	bl	8003584 <_malloc_r>
 8003676:	1e04      	subs	r4, r0, #0
 8003678:	d0ec      	beq.n	8003654 <_realloc_r+0x14>
 800367a:	0029      	movs	r1, r5
 800367c:	0032      	movs	r2, r6
 800367e:	f7ff ff1a 	bl	80034b6 <memcpy>
 8003682:	0029      	movs	r1, r5
 8003684:	0038      	movs	r0, r7
 8003686:	f7ff ff33 	bl	80034f0 <_free_r>
 800368a:	e7e3      	b.n	8003654 <_realloc_r+0x14>

0800368c <_sbrk_r>:
 800368c:	2300      	movs	r3, #0
 800368e:	b570      	push	{r4, r5, r6, lr}
 8003690:	4d06      	ldr	r5, [pc, #24]	; (80036ac <_sbrk_r+0x20>)
 8003692:	0004      	movs	r4, r0
 8003694:	0008      	movs	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7fd f9d0 	bl	8000a3c <_sbrk>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d103      	bne.n	80036a8 <_sbrk_r+0x1c>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d000      	beq.n	80036a8 <_sbrk_r+0x1c>
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	20000244 	.word	0x20000244

080036b0 <__malloc_lock>:
 80036b0:	b510      	push	{r4, lr}
 80036b2:	4802      	ldr	r0, [pc, #8]	; (80036bc <__malloc_lock+0xc>)
 80036b4:	f000 f814 	bl	80036e0 <__retarget_lock_acquire_recursive>
 80036b8:	bd10      	pop	{r4, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	2000024c 	.word	0x2000024c

080036c0 <__malloc_unlock>:
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4802      	ldr	r0, [pc, #8]	; (80036cc <__malloc_unlock+0xc>)
 80036c4:	f000 f80d 	bl	80036e2 <__retarget_lock_release_recursive>
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	2000024c 	.word	0x2000024c

080036d0 <_malloc_usable_size_r>:
 80036d0:	1f0b      	subs	r3, r1, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1f18      	subs	r0, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da01      	bge.n	80036de <_malloc_usable_size_r+0xe>
 80036da:	580b      	ldr	r3, [r1, r0]
 80036dc:	18c0      	adds	r0, r0, r3
 80036de:	4770      	bx	lr

080036e0 <__retarget_lock_acquire_recursive>:
 80036e0:	4770      	bx	lr

080036e2 <__retarget_lock_release_recursive>:
 80036e2:	4770      	bx	lr

080036e4 <_init>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr

080036f0 <_fini>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr
