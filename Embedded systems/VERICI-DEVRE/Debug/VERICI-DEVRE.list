
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003348  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c4  080034c4  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080034cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000018c  08003658  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003658  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ade  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e7  00000000  00000000  00028c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100a9  00000000  00000000  0002afe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a98  00000000  00000000  0003b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060ce4  00000000  00000000  00043b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a480d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a40  00000000  00000000  000a4860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000018c 	.word	0x2000018c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033f0 	.word	0x080033f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000190 	.word	0x20000190
 8000104:	080033f0 	.word	0x080033f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <InputSDIO>:
int c;



void InputSDIO(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	0018      	movs	r0, r3
 80004a6:	2314      	movs	r3, #20
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f002 ff98 	bl	80033e0 <memset>
  	    /* Check the parameters */
	GPIO_InitStruct.Pin = SDIO_Pin;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	00d2      	lsls	r2, r2, #3
 80004b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	1d3a      	adds	r2, r7, #4
 80004c6:	23a0      	movs	r3, #160	; 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f9d7 	bl	8001880 <HAL_GPIO_Init>
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b006      	add	sp, #24
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <OutputSDIO>:
void OutputSDIO(void){
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b08b      	sub	sp, #44	; 0x2c
 80004e0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <OutputSDIO+0xb8>)
 80004e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <OutputSDIO+0xb8>)
 80004e8:	2104      	movs	r1, #4
 80004ea:	430a      	orrs	r2, r1
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <OutputSDIO+0xb8>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f2:	2204      	movs	r2, #4
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <OutputSDIO+0xb8>)
 80004fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fe:	4b25      	ldr	r3, [pc, #148]	; (8000594 <OutputSDIO+0xb8>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	430a      	orrs	r2, r1
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <OutputSDIO+0xb8>)
 8000508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <OutputSDIO+0xb8>)
 8000514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <OutputSDIO+0xb8>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <OutputSDIO+0xb8>)
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <OutputSDIO+0xb8>)
 800052c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <OutputSDIO+0xb8>)
 8000530:	2102      	movs	r1, #2
 8000532:	430a      	orrs	r2, r1
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <OutputSDIO+0xb8>)
 8000538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800053a:	2202      	movs	r2, #2
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	00d9      	lsls	r1, r3, #3
 8000546:	23a0      	movs	r3, #160	; 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2200      	movs	r2, #0
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fb22 	bl	8001b96 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	2414      	movs	r4, #20
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f002 ff3f 	bl	80033e0 <memset>
  	GPIO_InitStruct.Pin = SDIO_Pin;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	00d2      	lsls	r2, r2, #3
 800056a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2201      	movs	r2, #1
 8000570:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	187a      	adds	r2, r7, r1
 8000580:	23a0      	movs	r3, #160	; 0xa0
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f001 f97a 	bl	8001880 <HAL_GPIO_Init>
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b00b      	add	sp, #44	; 0x2c
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <OutputSDCK>:

void OutputSDCK(void){
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b08b      	sub	sp, #44	; 0x2c
 800059c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <OutputSDCK+0xb8>)
 80005a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <OutputSDCK+0xb8>)
 80005a4:	2104      	movs	r1, #4
 80005a6:	430a      	orrs	r2, r1
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <OutputSDCK+0xb8>)
 80005ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ae:	2204      	movs	r2, #4
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <OutputSDCK+0xb8>)
 80005b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <OutputSDCK+0xb8>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	430a      	orrs	r2, r1
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <OutputSDCK+0xb8>)
 80005c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <OutputSDCK+0xb8>)
 80005d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <OutputSDCK+0xb8>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <OutputSDCK+0xb8>)
 80005dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <OutputSDCK+0xb8>)
 80005e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <OutputSDCK+0xb8>)
 80005ec:	2102      	movs	r1, #2
 80005ee:	430a      	orrs	r2, r1
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <OutputSDCK+0xb8>)
 80005f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f6:	2202      	movs	r2, #2
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	0099      	lsls	r1, r3, #2
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fac4 	bl	8001b96 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	2414      	movs	r4, #20
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2314      	movs	r3, #20
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f002 fee1 	bl	80033e0 <memset>
  	GPIO_InitStruct.Pin = SCLK_Pin;
 800061e:	0021      	movs	r1, r4
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2201      	movs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	187a      	adds	r2, r7, r1
 800063c:	23a0      	movs	r3, #160	; 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f001 f91c 	bl	8001880 <HAL_GPIO_Init>

}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b00b      	add	sp, #44	; 0x2c
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40021000 	.word	0x40021000

08000654 <OutputFCSB>:

void OutputFCSB(void){
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b08b      	sub	sp, #44	; 0x2c
 8000658:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <OutputFCSB+0xb4>)
 800065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <OutputFCSB+0xb4>)
 8000660:	2104      	movs	r1, #4
 8000662:	430a      	orrs	r2, r1
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <OutputFCSB+0xb4>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	2204      	movs	r2, #4
 800066c:	4013      	ands	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <OutputFCSB+0xb4>)
 8000674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <OutputFCSB+0xb4>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	430a      	orrs	r2, r1
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <OutputFCSB+0xb4>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <OutputFCSB+0xb4>)
 800068c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <OutputFCSB+0xb4>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <OutputFCSB+0xb4>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <OutputFCSB+0xb4>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <OutputFCSB+0xb4>)
 80006a8:	2102      	movs	r1, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <OutputFCSB+0xb4>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	2202      	movs	r2, #2
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2200      	movs	r2, #0
 80006c0:	2104      	movs	r1, #4
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fa67 	bl	8001b96 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	2414      	movs	r4, #20
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f002 fe84 	bl	80033e0 <memset>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 80006d8:	0021      	movs	r1, r4
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2204      	movs	r2, #4
 80006de:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2201      	movs	r2, #1
 80006e4:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	187a      	adds	r2, r7, r1
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 f8c0 	bl	8001880 <HAL_GPIO_Init>


}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b00b      	add	sp, #44	; 0x2c
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	40021000 	.word	0x40021000

0800070c <OutputCSB>:

void OutputCSB(void){
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b08b      	sub	sp, #44	; 0x2c
 8000710:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <OutputCSB+0xb4>)
 8000714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <OutputCSB+0xb4>)
 8000718:	2104      	movs	r1, #4
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <OutputCSB+0xb4>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	2204      	movs	r2, #4
 8000724:	4013      	ands	r3, r2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <OutputCSB+0xb4>)
 800072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <OutputCSB+0xb4>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	430a      	orrs	r2, r1
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <OutputCSB+0xb4>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <OutputCSB+0xb4>)
 8000744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <OutputCSB+0xb4>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <OutputCSB+0xb4>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <OutputCSB+0xb4>)
 800075c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <OutputCSB+0xb4>)
 8000760:	2102      	movs	r1, #2
 8000762:	430a      	orrs	r2, r1
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <OutputCSB+0xb4>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	2202      	movs	r2, #2
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 8000772:	23a0      	movs	r3, #160	; 0xa0
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	2200      	movs	r2, #0
 8000778:	2102      	movs	r1, #2
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fa0b 	bl	8001b96 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	2414      	movs	r4, #20
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	2314      	movs	r3, #20
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f002 fe28 	bl	80033e0 <memset>
  	GPIO_InitStruct.Pin = CSB_Pin;
 8000790:	0021      	movs	r1, r4
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2202      	movs	r2, #2
 8000796:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2201      	movs	r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	23a0      	movs	r3, #160	; 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 f864 	bl	8001880 <HAL_GPIO_Init>
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b00b      	add	sp, #44	; 0x2c
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	40021000 	.word	0x40021000

080007c4 <vSpi3Init>:
**Name:   vSpi3Init
**Func:   Init Spi-3 Config
**Note:
**********************************************************/
void vSpi3Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  OutputCSB();
 80007c8:	f7ff ffa0 	bl	800070c <OutputCSB>
  OutputFCSB();
 80007cc:	f7ff ff42 	bl	8000654 <OutputFCSB>
  OutputSDCK();
 80007d0:	f7ff fee2 	bl	8000598 <OutputSDCK>
  OutputSDIO();
 80007d4:	f7ff fe82 	bl	80004dc <OutputSDIO>

  SetCSB();
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2201      	movs	r2, #1
 80007de:	2102      	movs	r1, #2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 f9d8 	bl	8001b96 <HAL_GPIO_WritePin>
  SetFCSB();
 80007e6:	23a0      	movs	r3, #160	; 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2201      	movs	r2, #1
 80007ec:	2104      	movs	r1, #4
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 f9d1 	bl	8001b96 <HAL_GPIO_WritePin>
  SetSDIO();
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	00d9      	lsls	r1, r3, #3
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2201      	movs	r2, #1
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 f9c9 	bl	8001b96 <HAL_GPIO_WritePin>
  ClrSDCK();
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	0099      	lsls	r1, r3, #2
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2200      	movs	r2, #0
 800080e:	0018      	movs	r0, r3
 8000810:	f001 f9c1 	bl	8001b96 <HAL_GPIO_WritePin>
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <vSpi3WriteByte>:
**Func:   SPI-3 send one byte
**Input:
**Output:
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b084      	sub	sp, #16
 800081e:	af00      	add	r7, sp, #0
 8000820:	0002      	movs	r2, r0
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	701a      	strb	r2, [r3, #0]

  byte bitcnt;

  SetFCSB();        //FCSB = 1;
 8000826:	23a0      	movs	r3, #160	; 0xa0
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	2201      	movs	r2, #1
 800082c:	2104      	movs	r1, #4
 800082e:	0018      	movs	r0, r3
 8000830:	f001 f9b1 	bl	8001b96 <HAL_GPIO_WritePin>
  OutputSDIO();     //SDA output mode
 8000834:	f7ff fe52 	bl	80004dc <OutputSDIO>
  SetSDIO();        //    output 1
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	00d9      	lsls	r1, r3, #3
 800083c:	23a0      	movs	r3, #160	; 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2201      	movs	r2, #1
 8000842:	0018      	movs	r0, r3
 8000844:	f001 f9a7 	bl	8001b96 <HAL_GPIO_WritePin>
  ClrSDCK();
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	0099      	lsls	r1, r3, #2
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	2200      	movs	r2, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f001 f99f 	bl	8001b96 <HAL_GPIO_WritePin>
  ClrCSB();
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	0018      	movs	r0, r3
 8000862:	f001 f998 	bl	8001b96 <HAL_GPIO_WritePin>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000866:	230f      	movs	r3, #15
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	2208      	movs	r2, #8
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e036      	b.n	80008de <vSpi3WriteByte+0xc4>
    {
	  ClrSDCK();
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	0099      	lsls	r1, r3, #2
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2200      	movs	r2, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f001 f98b 	bl	8001b96 <HAL_GPIO_WritePin>
	  HAL_Delay(1);//delay_us(SPI3_SPEED);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 ff25 	bl	80016d0 <HAL_Delay>
	  if(dat&0x80)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	da08      	bge.n	80008a2 <vSpi3WriteByte+0x88>
		  SetSDIO();
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	00d9      	lsls	r1, r3, #3
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2201      	movs	r2, #1
 800089a:	0018      	movs	r0, r3
 800089c:	f001 f97b 	bl	8001b96 <HAL_GPIO_WritePin>
 80008a0:	e007      	b.n	80008b2 <vSpi3WriteByte+0x98>
	  else
		  ClrSDIO();
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	00d9      	lsls	r1, r3, #3
 80008a6:	23a0      	movs	r3, #160	; 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2200      	movs	r2, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f972 	bl	8001b96 <HAL_GPIO_WritePin>

	  SetSDCK();
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	0099      	lsls	r1, r3, #2
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2201      	movs	r2, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 f96a 	bl	8001b96 <HAL_GPIO_WritePin>
	  dat <<= 1;
 80008c2:	1dfa      	adds	r2, r7, #7
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	18db      	adds	r3, r3, r3
 80008ca:	7013      	strb	r3, [r2, #0]
	  HAL_Delay(1);//delay_us(SPI3_SPEED);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 feff 	bl	80016d0 <HAL_Delay>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 80008d2:	210f      	movs	r1, #15
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	3a01      	subs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	230f      	movs	r3, #15
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1c3      	bne.n	8000870 <vSpi3WriteByte+0x56>

    }

  ClrSDCK();
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	0099      	lsls	r1, r3, #2
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	2200      	movs	r2, #0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 f94f 	bl	8001b96 <HAL_GPIO_WritePin>
  SetSDIO();
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	00d9      	lsls	r1, r3, #3
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	2201      	movs	r2, #1
 8000902:	0018      	movs	r0, r3
 8000904:	f001 f947 	bl	8001b96 <HAL_GPIO_WritePin>
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b004      	add	sp, #16
 800090e:	bd80      	pop	{r7, pc}

08000910 <bSpi3ReadByte>:
**Func:   SPI-3 read one byte
**Input:
**Output:
**********************************************************/
byte bSpi3ReadByte(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  byte RdPara = 0;
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
  byte bitcnt;

  ClrCSB();
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2200      	movs	r2, #0
 8000922:	2102      	movs	r1, #2
 8000924:	0018      	movs	r0, r3
 8000926:	f001 f936 	bl	8001b96 <HAL_GPIO_WritePin>
  InputSDIO();
 800092a:	f7ff fdb7 	bl	800049c <InputSDIO>

  for(bitcnt=8; bitcnt!=0; bitcnt--)
 800092e:	1dbb      	adds	r3, r7, #6
 8000930:	2208      	movs	r2, #8
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e04a      	b.n	80009cc <bSpi3ReadByte+0xbc>
    {
    ClrSDCK();
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	0099      	lsls	r1, r3, #2
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f001 f928 	bl	8001b96 <HAL_GPIO_WritePin>
    RdPara <<= 1;
 8000946:	1dfa      	adds	r2, r7, #7
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	18db      	adds	r3, r3, r3
 800094e:	7013      	strb	r3, [r2, #0]
    HAL_Delay(1);//delay_us(SPI3_SPEED);
 8000950:	2001      	movs	r0, #1
 8000952:	f000 febd 	bl	80016d0 <HAL_Delay>
    SetSDCK();
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	0099      	lsls	r1, r3, #2
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2201      	movs	r2, #1
 8000960:	0018      	movs	r0, r3
 8000962:	f001 f918 	bl	8001b96 <HAL_GPIO_WritePin>
    HAL_Delay(1);//delay_us(SPI3_SPEED);
 8000966:	2001      	movs	r0, #1
 8000968:	f000 feb2 	bl	80016d0 <HAL_Delay>

    if(HAL_GPIO_ReadPin(SDIO_GPIO_Port, SDIO_Pin) == 1){
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	00da      	lsls	r2, r3, #3
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f001 f8f0 	bl	8001b5c <HAL_GPIO_ReadPin>
 800097c:	0003      	movs	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d103      	bne.n	800098a <bSpi3ReadByte+0x7a>
      c=1;
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <bSpi3ReadByte+0x104>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e00c      	b.n	80009a4 <bSpi3ReadByte+0x94>
    }else if(HAL_GPIO_ReadPin(SDIO_GPIO_Port, SDIO_Pin) == 0){
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	00da      	lsls	r2, r3, #3
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f001 f8e1 	bl	8001b5c <HAL_GPIO_ReadPin>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d102      	bne.n	80009a4 <bSpi3ReadByte+0x94>
      c=0;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <bSpi3ReadByte+0x104>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
    }
     //Serial.print("bSpi3ReadByte: ");
   // Serial.println(c);

    if(c==1)
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <bSpi3ReadByte+0x104>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d106      	bne.n	80009ba <bSpi3ReadByte+0xaa>
      RdPara |= 0x01;
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	1dfa      	adds	r2, r7, #7
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	2101      	movs	r1, #1
 80009b4:	430a      	orrs	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	e003      	b.n	80009c2 <bSpi3ReadByte+0xb2>
    else
      RdPara |= 0x00;
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	1dfa      	adds	r2, r7, #7
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	701a      	strb	r2, [r3, #0]
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	1dbb      	adds	r3, r7, #6
 80009c8:	3a01      	subs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1b0      	bne.n	8000936 <bSpi3ReadByte+0x26>
    }
  ClrSDCK();
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	0099      	lsls	r1, r3, #2
 80009d8:	23a0      	movs	r3, #160	; 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	2200      	movs	r2, #0
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 f8d9 	bl	8001b96 <HAL_GPIO_WritePin>
  OutputSDIO();
 80009e4:	f7ff fd7a 	bl	80004dc <OutputSDIO>
  SetSDIO();
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	00d9      	lsls	r1, r3, #3
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2201      	movs	r2, #1
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 f8cf 	bl	8001b96 <HAL_GPIO_WritePin>
  SetCSB();
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	2201      	movs	r2, #1
 80009fe:	2102      	movs	r1, #2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 f8c8 	bl	8001b96 <HAL_GPIO_WritePin>
  return(RdPara);
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000230 	.word	0x20000230

08000a18 <vSpi3Write>:
**Func:   SPI Write One word
**Input:  Write word
**Output: none
**********************************************************/
void vSpi3Write(word dat)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  vSpi3WriteByte((byte)(dat>>8)&0x7F);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	227f      	movs	r2, #127	; 0x7f
 8000a28:	4013      	ands	r3, r2
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fef4 	bl	800081a <vSpi3WriteByte>
  vSpi3WriteByte((byte)dat);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff feef 	bl	800081a <vSpi3WriteByte>
  SetCSB();
 8000a3c:	23a0      	movs	r3, #160	; 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f8a6 	bl	8001b96 <HAL_GPIO_WritePin>
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <bSpi3Read>:
**Func:   SPI-3 Read One byte
**Input:  readout addresss
**Output: readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	0002      	movs	r2, r0
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	701a      	strb	r2, [r3, #0]
    vSpi3WriteByte(addr|0x80);
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	4252      	negs	r2, r2
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fed5 	bl	800081a <vSpi3WriteByte>
  return(bSpi3ReadByte());
 8000a70:	f7ff ff4e 	bl	8000910 <bSpi3ReadByte>
 8000a74:	0003      	movs	r3, r0
}
 8000a76:	0018      	movs	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <vSpi3WriteFIFO>:
**Func:   SPI-3 send one byte to FIFO
**Input:  one byte buffer
**Output: none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b084      	sub	sp, #16
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	0002      	movs	r2, r0
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  byte bitcnt;

  SetCSB();
 8000a8a:	23a0      	movs	r3, #160	; 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2102      	movs	r1, #2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 f87f 	bl	8001b96 <HAL_GPIO_WritePin>
  OutputSDIO();
 8000a98:	f7ff fd20 	bl	80004dc <OutputSDIO>
  ClrSDCK();
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	0099      	lsls	r1, r3, #2
 8000aa0:	23a0      	movs	r3, #160	; 0xa0
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 f875 	bl	8001b96 <HAL_GPIO_WritePin>
  ClrFCSB();      //FCSB = 0
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 f86e 	bl	8001b96 <HAL_GPIO_WritePin>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	2208      	movs	r2, #8
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e036      	b.n	8000b32 <vSpi3WriteFIFO+0xb4>
    {
    ClrSDCK();
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	0099      	lsls	r1, r3, #2
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	2200      	movs	r2, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 f861 	bl	8001b96 <HAL_GPIO_WritePin>

    if(dat&0x80)
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da08      	bge.n	8000af0 <vSpi3WriteFIFO+0x72>
      SetSDIO();
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	00d9      	lsls	r1, r3, #3
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 f854 	bl	8001b96 <HAL_GPIO_WritePin>
 8000aee:	e007      	b.n	8000b00 <vSpi3WriteFIFO+0x82>
    else
      ClrSDIO();
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	00d9      	lsls	r1, r3, #3
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2200      	movs	r2, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 f84b 	bl	8001b96 <HAL_GPIO_WritePin>
    HAL_Delay(1);//delay_us(SPI3_SPEED);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 fde5 	bl	80016d0 <HAL_Delay>
    SetSDCK();
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	0099      	lsls	r1, r3, #2
 8000b0a:	23a0      	movs	r3, #160	; 0xa0
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	2201      	movs	r2, #1
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 f840 	bl	8001b96 <HAL_GPIO_WritePin>
    HAL_Delay(1);//delay_us(SPI3_SPEED);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 fdda 	bl	80016d0 <HAL_Delay>
    dat <<= 1;
 8000b1c:	1dfa      	adds	r2, r7, #7
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	18db      	adds	r3, r3, r3
 8000b24:	7013      	strb	r3, [r2, #0]
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000b26:	210f      	movs	r1, #15
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	3a01      	subs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	230f      	movs	r3, #15
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1c3      	bne.n	8000ac4 <vSpi3WriteFIFO+0x46>
    }
  ClrSDCK();
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	0099      	lsls	r1, r3, #2
 8000b40:	23a0      	movs	r3, #160	; 0xa0
 8000b42:	05db      	lsls	r3, r3, #23
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 f825 	bl	8001b96 <HAL_GPIO_WritePin>
  HAL_Delay(1);//delay_us(SPI3_SPEED);    //Time-Critical
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fdbf 	bl	80016d0 <HAL_Delay>
 // HAL_Delay(1);//delay_us(SPI3_SPEED);    //Time-Critical
  SetFCSB();
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	2201      	movs	r2, #1
 8000b58:	2104      	movs	r1, #4
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 f81b 	bl	8001b96 <HAL_GPIO_WritePin>
  SetSDIO();
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	00d9      	lsls	r1, r3, #3
 8000b64:	23a0      	movs	r3, #160	; 0xa0
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	2201      	movs	r2, #1
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 f813 	bl	8001b96 <HAL_GPIO_WritePin>
  HAL_Delay(1);//delay_us(SPI3_SPEED);    //Time-Critical
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 fdad 	bl	80016d0 <HAL_Delay>
 // HAL_Delay(1);//delay_us(SPI3_SPEED);    //Time-Critical
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <vSpi3BurstWriteFIFO>:
**Func:   burst wirte N byte to FIFO
**Input:  array length & head pointer
**Output: none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 8000b7e:	b590      	push	{r4, r7, lr}
 8000b80:	b085      	sub	sp, #20
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	000a      	movs	r2, r1
 8000b88:	1cfb      	adds	r3, r7, #3
 8000b8a:	701a      	strb	r2, [r3, #0]
  byte i;
  //printf("length: %x\r\n", length);
  //Serial.print(length);
  if(length!=0x00)
 8000b8c:	1cfb      	adds	r3, r7, #3
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d023      	beq.n	8000bdc <vSpi3BurstWriteFIFO+0x5e>
    {
    for(i=0;i<length;i++)
 8000b94:	230f      	movs	r3, #15
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e00d      	b.n	8000bba <vSpi3BurstWriteFIFO+0x3c>
      vSpi3WriteFIFO(ptr[i]);
 8000b9e:	240f      	movs	r4, #15
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	18d3      	adds	r3, r2, r3
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff ff67 	bl	8000a7e <vSpi3WriteFIFO>
    for(i=0;i<length;i++)
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	3201      	adds	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	210f      	movs	r1, #15
 8000bbc:	187a      	adds	r2, r7, r1
 8000bbe:	1cfb      	adds	r3, r7, #3
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3ea      	bcc.n	8000b9e <vSpi3BurstWriteFIFO+0x20>

      //printf("i: %x\r\n", i);

      byte vSpi3WriteFIFO1;
  vSpi3WriteFIFO1 = bSpi3Read(i);
 8000bc8:	230e      	movs	r3, #14
 8000bca:	18fc      	adds	r4, r7, r3
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ff3e 	bl	8000a52 <bSpi3Read>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	7023      	strb	r3, [r4, #0]
  //printf("vSpi3WriteFIFO: %x\r\n", vSpi3WriteFIFO1);
    }
  return;
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46c0      	nop			; (mov r8, r8)
}
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b005      	add	sp, #20
 8000be2:	bd90      	pop	{r4, r7, pc}

08000be4 <bGoTx>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoTx(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  }
  if(i>=100)
    return(false);
  #endif

  vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <bGoTx+0x64>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff13 	bl	8000a18 <vSpi3Write>
  for(i=0; i<100; i++){
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e014      	b.n	8000c24 <bGoTx+0x40>
    HAL_Delay(1);//delay_us(100);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 fd68 	bl	80016d0 <HAL_Delay>
    tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000c00:	2061      	movs	r0, #97	; 0x61
 8000c02:	f7ff ff26 	bl	8000a52 <bSpi3Read>
 8000c06:	0003      	movs	r3, r0
 8000c08:	0019      	movs	r1, r3
 8000c0a:	1dbb      	adds	r3, r7, #6
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	400a      	ands	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
    if(tmp==MODE_STA_TX)
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d009      	beq.n	8000c2e <bGoTx+0x4a>
  for(i=0; i<100; i++){
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	3201      	adds	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b63      	cmp	r3, #99	; 0x63
 8000c2a:	d9e6      	bls.n	8000bfa <bGoTx+0x16>
 8000c2c:	e000      	b.n	8000c30 <bGoTx+0x4c>
      break;
 8000c2e:	46c0      	nop			; (mov r8, r8)
  }
  if(i>=100)
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b63      	cmp	r3, #99	; 0x63
 8000c36:	d901      	bls.n	8000c3c <bGoTx+0x58>
    return(false);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e000      	b.n	8000c3e <bGoTx+0x5a>
  else
    return(true);
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	00006040 	.word	0x00006040

08000c4c <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  byte tmp;

  vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <bGoSleep+0x3c>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fedf 	bl	8000a18 <vSpi3Write>
  HAL_Delay(1);//delay_us(100);   //enough?
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fd38 	bl	80016d0 <HAL_Delay>
  tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000c60:	2061      	movs	r0, #97	; 0x61
 8000c62:	f7ff fef6 	bl	8000a52 <bSpi3Read>
 8000c66:	0003      	movs	r3, r0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	400a      	ands	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
  if(tmp==MODE_GO_SLEEP)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	d101      	bne.n	8000c7e <bGoSleep+0x32>
    return(true);
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <bGoSleep+0x34>
  else
    return(false);
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	00006010 	.word	0x00006010

08000c8c <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  byte tmp, i;

  RssiTrig = false;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <bGoStandby+0x68>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <bGoStandby+0x6c>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff febc 	bl	8000a18 <vSpi3Write>
  for(i=0; i<100; i++){
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e014      	b.n	8000cd2 <bGoStandby+0x46>
    HAL_Delay(1);//delay_us(100);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fd11 	bl	80016d0 <HAL_Delay>
    tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000cae:	2061      	movs	r0, #97	; 0x61
 8000cb0:	f7ff fecf 	bl	8000a52 <bSpi3Read>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	1dbb      	adds	r3, r7, #6
 8000cba:	220f      	movs	r2, #15
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]

    if(tmp==MODE_STA_STBY)
 8000cc0:	1dbb      	adds	r3, r7, #6
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d009      	beq.n	8000cdc <bGoStandby+0x50>
  for(i=0; i<100; i++){
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	781a      	ldrb	r2, [r3, #0]
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	3201      	adds	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b63      	cmp	r3, #99	; 0x63
 8000cd8:	d9e6      	bls.n	8000ca8 <bGoStandby+0x1c>
 8000cda:	e000      	b.n	8000cde <bGoStandby+0x52>
      break;
 8000cdc:	46c0      	nop			; (mov r8, r8)
  }
  if(i>=100)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b63      	cmp	r3, #99	; 0x63
 8000ce4:	d901      	bls.n	8000cea <bGoStandby+0x5e>
    return(false);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <bGoStandby+0x60>
  else
    return(true);
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200001a9 	.word	0x200001a9
 8000cf8:	00006002 	.word	0x00006002

08000cfc <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <vSoftReset+0x18>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fe88 	bl	8000a18 <vSpi3Write>
  HAL_Delay(1);       //enough?
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fce1 	bl	80016d0 <HAL_Delay>

}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	00007fff 	.word	0x00007fff

08000d18 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	22ca      	movs	r2, #202	; 0xca
 8000d2a:	01d2      	lsls	r2, r2, #7
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff fe71 	bl	8000a18 <vSpi3Write>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <vIntSrcCfg>:
**Function: config interrupt source
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 8000d3e:	b590      	push	{r4, r7, lr}
 8000d40:	b085      	sub	sp, #20
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	0002      	movs	r2, r0
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	1dbb      	adds	r3, r7, #6
 8000d4c:	1c0a      	adds	r2, r1, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
  byte tmp;
  tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 8000d50:	2066      	movs	r0, #102	; 0x66
 8000d52:	f7ff fe7e 	bl	8000a52 <bSpi3Read>
 8000d56:	0003      	movs	r3, r0
 8000d58:	0019      	movs	r1, r3
 8000d5a:	240f      	movs	r4, #15
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	221f      	movs	r2, #31
 8000d60:	4391      	bics	r1, r2
 8000d62:	000a      	movs	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8000d66:	193a      	adds	r2, r7, r4
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	22cc      	movs	r2, #204	; 0xcc
 8000d74:	01d2      	lsls	r2, r2, #7
 8000d76:	4694      	mov	ip, r2
 8000d78:	4463      	add	r3, ip
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fe4c 	bl	8000a18 <vSpi3Write>

  tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 8000d80:	2067      	movs	r0, #103	; 0x67
 8000d82:	f7ff fe66 	bl	8000a52 <bSpi3Read>
 8000d86:	0003      	movs	r3, r0
 8000d88:	0019      	movs	r1, r3
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	221f      	movs	r2, #31
 8000d8e:	4391      	bics	r1, r2
 8000d90:	000a      	movs	r2, r1
 8000d92:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8000d94:	193a      	adds	r2, r7, r4
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	22ce      	movs	r2, #206	; 0xce
 8000da2:	01d2      	lsls	r2, r2, #7
 8000da4:	4694      	mov	ip, r2
 8000da6:	4463      	add	r3, ip
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fe35 	bl	8000a18 <vSpi3Write>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b005      	add	sp, #20
 8000db4:	bd90      	pop	{r4, r7, pc}

08000db6 <vEnableAntSwitch>:
**Function:
**Input:
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 8000db6:	b5b0      	push	{r4, r5, r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	0002      	movs	r2, r0
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	701a      	strb	r2, [r3, #0]
  byte tmp;
  tmp = bSpi3Read(CMT23_INT1_CTL);
 8000dc2:	250f      	movs	r5, #15
 8000dc4:	197c      	adds	r4, r7, r5
 8000dc6:	2066      	movs	r0, #102	; 0x66
 8000dc8:	f7ff fe43 	bl	8000a52 <bSpi3Read>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	7023      	strb	r3, [r4, #0]
  tmp&= 0x3F;
 8000dd0:	197b      	adds	r3, r7, r5
 8000dd2:	197a      	adds	r2, r7, r5
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	213f      	movs	r1, #63	; 0x3f
 8000dd8:	400a      	ands	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
  switch(mode)
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d002      	beq.n	8000dea <vEnableAntSwitch+0x34>
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d009      	beq.n	8000dfc <vEnableAntSwitch+0x46>
      tmp |= RF_SWT1_EN; break;   //GPO1=RxActive; GPO2=TxActive
    case 2:
      tmp |= RF_SWT2_EN; break;   //GPO1=RxActive; GPO2=!RxActive
    case 0:
    default:
      break;              //Disable
 8000de8:	e010      	b.n	8000e0c <vEnableAntSwitch+0x56>
      tmp |= RF_SWT1_EN; break;   //GPO1=RxActive; GPO2=TxActive
 8000dea:	220f      	movs	r2, #15
 8000dec:	18bb      	adds	r3, r7, r2
 8000dee:	18ba      	adds	r2, r7, r2
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	4249      	negs	r1, r1
 8000df6:	430a      	orrs	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e007      	b.n	8000e0c <vEnableAntSwitch+0x56>
      tmp |= RF_SWT2_EN; break;   //GPO1=RxActive; GPO2=!RxActive
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	18bb      	adds	r3, r7, r2
 8000e00:	18ba      	adds	r2, r7, r2
 8000e02:	7812      	ldrb	r2, [r2, #0]
 8000e04:	2140      	movs	r1, #64	; 0x40
 8000e06:	430a      	orrs	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	46c0      	nop			; (mov r8, r8)
  }
  vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	22cc      	movs	r2, #204	; 0xcc
 8000e14:	01d2      	lsls	r2, r2, #7
 8000e16:	4694      	mov	ip, r2
 8000e18:	4463      	add	r3, ip
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff fdfc 	bl	8000a18 <vSpi3Write>
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bdb0      	pop	{r4, r5, r7, pc}

08000e28 <vIntSrcEnable>:
**Function: enable interrupt source
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	0002      	movs	r2, r0
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	22d0      	movs	r2, #208	; 0xd0
 8000e3a:	01d2      	lsls	r2, r2, #7
 8000e3c:	4694      	mov	ip, r2
 8000e3e:	4463      	add	r3, ip
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff fde9 	bl	8000a18 <vSpi3Write>
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  //byte tmp;
  //byte int_clr2 = 0;
  //byte int_clr1 = 0;
  byte flg = 0;
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
    int_clr1 |= RX_TIMEOUT_CLR;
    flg |= RX_TMO_EN;
  }
  vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1); //Clear flag
#endif
  vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <bIntSrcFlagClr+0x28>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fdda 	bl	8000a18 <vSpi3Write>
  vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF); //Clear flag
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <bIntSrcFlagClr+0x2c>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff fdd6 	bl	8000a18 <vSpi3Write>

  return(flg);
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	00006a07 	.word	0x00006a07
 8000e7c:	00006bff 	.word	0x00006bff

08000e80 <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  byte tmp;
  tmp = bSpi3Read(CMT23_FIFO_FLG);
 8000e86:	1dfc      	adds	r4, r7, #7
 8000e88:	206e      	movs	r0, #110	; 0x6e
 8000e8a:	f7ff fde2 	bl	8000a52 <bSpi3Read>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	7023      	strb	r3, [r4, #0]
  vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <vClearFIFO+0x28>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff fdbf 	bl	8000a18 <vSpi3Write>
  return(tmp);
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b003      	add	sp, #12
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	00006c03 	.word	0x00006c03

08000eac <vEnableWrFifo>:

#if 1   //splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  byte tmp;
  tmp = bSpi3Read(CMT23_FIFO_CTL);
 8000eb2:	1dfc      	adds	r4, r7, #7
 8000eb4:	2069      	movs	r0, #105	; 0x69
 8000eb6:	f7ff fdcc 	bl	8000a52 <bSpi3Read>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	7023      	strb	r3, [r4, #0]

  tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	1dfa      	adds	r2, r7, #7
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]


  vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	22d2      	movs	r2, #210	; 0xd2
 8000ed0:	01d2      	lsls	r2, r2, #7
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	4463      	add	r3, ip
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff fd9e 	bl	8000a18 <vSpi3Write>


}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b003      	add	sp, #12
 8000ee2:	bd90      	pop	{r4, r7, pc}

08000ee4 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  byte tmp;
 // HAL_UART_Transmit( &hlpuart1, "buradaa3\r\n",10, 100);

  vSpi3Init();
 8000eea:	f7ff fc6b 	bl	80007c4 <vSpi3Init>
  //GPO3In();

//  TX_ANTOut();
  //RX_ANTOut();

  vSoftReset();
 8000eee:	f7ff ff05 	bl	8000cfc <vSoftReset>
  //HAL_UART_Transmit( &hlpuart1, "buradaa5\r\n",10, 100);
  HAL_Delay(20);
 8000ef2:	2014      	movs	r0, #20
 8000ef4:	f000 fbec 	bl	80016d0 <HAL_Delay>
  bGoStandby();
 8000ef8:	f7ff fec8 	bl	8000c8c <bGoStandby>
  //HAL_UART_Transmit( &hlpuart1, "buradaa6\r\n",10, 100);

  //
  tmp = bSpi3Read(CMT23_MODE_STA);
 8000efc:	1dfc      	adds	r4, r7, #7
 8000efe:	2061      	movs	r0, #97	; 0x61
 8000f00:	f7ff fda7 	bl	8000a52 <bSpi3Read>
 8000f04:	0003      	movs	r3, r0
 8000f06:	7023      	strb	r3, [r4, #0]
  tmp|= EEP_CPY_DIS;
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	1dfa      	adds	r2, r7, #7
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	2110      	movs	r1, #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
  tmp&= (~RSTN_IN_EN);      //Disable RstPin
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	22c2      	movs	r2, #194	; 0xc2
 8000f26:	01d2      	lsls	r2, r2, #7
 8000f28:	4694      	mov	ip, r2
 8000f2a:	4463      	add	r3, ip
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff fd73 	bl	8000a18 <vSpi3Write>

  bIntSrcFlagClr();
 8000f32:	f7ff ff8d 	bl	8000e50 <bIntSrcFlagClr>
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b003      	add	sp, #12
 8000f3c:	bd90      	pop	{r4, r7, pc}

08000f3e <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 8000f3e:	b590      	push	{r4, r7, lr}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	000a      	movs	r2, r1
 8000f48:	1cfb      	adds	r3, r7, #3
 8000f4a:	701a      	strb	r2, [r3, #0]
  byte i;

  if(length!=0){
 8000f4c:	1cfb      	adds	r3, r7, #3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d01a      	beq.n	8000f8a <vCfgBank+0x4c>
    for(i=0; i<length; i++)
 8000f54:	230f      	movs	r3, #15
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e00e      	b.n	8000f7c <vCfgBank+0x3e>
      vSpi3Write(cfg[i]);
 8000f5e:	240f      	movs	r4, #15
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff fd53 	bl	8000a18 <vSpi3Write>
    for(i=0; i<length; i++)
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	3201      	adds	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fa      	adds	r2, r7, r3
 8000f80:	1cfb      	adds	r3, r7, #3
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3e9      	bcc.n	8000f5e <vCfgBank+0x20>
  }
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b005      	add	sp, #20
 8000f90:	bd90      	pop	{r4, r7, pc}

08000f92 <bSendMessage>:
  rev = 0xFF;
  return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	1cfb      	adds	r3, r7, #3
 8000f9e:	701a      	strb	r2, [r3, #0]
  bIntSrcFlagClr();
 8000fa0:	f7ff ff56 	bl	8000e50 <bIntSrcFlagClr>
#if 1
  //mode1
  vSetTxPayloadLength(length);
 8000fa4:	1cfb      	adds	r3, r7, #3
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 f813 	bl	8000fd4 <vSetTxPayloadLength>

  bGoStandby();
 8000fae:	f7ff fe6d 	bl	8000c8c <bGoStandby>

  vEnableWrFifo();
 8000fb2:	f7ff ff7b 	bl	8000eac <vEnableWrFifo>
  vSpi3BurstWriteFIFO(msg, length);
 8000fb6:	1cfb      	adds	r3, r7, #3
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	0011      	movs	r1, r2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff fddd 	bl	8000b7e <vSpi3BurstWriteFIFO>
  bGoTx();
 8000fc4:	f7ff fe0e 	bl	8000be4 <bGoTx>
  vSetTxPayloadLength(length);
  bGoTx();
  vEnableWrFifo();
  vSpi3BurstWriteFIFO(msg, length);
#endif
  return(true);
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  byte tmp;
  byte len;
  bGoStandby();
 8000fdc:	f7ff fe56 	bl	8000c8c <bGoStandby>
  tmp = bSpi3Read(CMT23_PKT_CTRL1);
 8000fe0:	250f      	movs	r5, #15
 8000fe2:	197c      	adds	r4, r7, r5
 8000fe4:	2045      	movs	r0, #69	; 0x45
 8000fe6:	f7ff fd34 	bl	8000a52 <bSpi3Read>
 8000fea:	0003      	movs	r3, r0
 8000fec:	7023      	strb	r3, [r4, #0]
  tmp&= 0x8F;
 8000fee:	0028      	movs	r0, r5
 8000ff0:	183b      	adds	r3, r7, r0
 8000ff2:	183a      	adds	r2, r7, r0
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	2170      	movs	r1, #112	; 0x70
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]

  if(length!=0){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01c      	beq.n	800103c <vSetTxPayloadLength+0x68>
    if(FixedPktLength){
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <vSetTxPayloadLength+0xc0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00c      	beq.n	8001024 <vSetTxPayloadLength+0x50>
      tmp &= ~(1<<0);   //clear bit0
 800100a:	183b      	adds	r3, r7, r0
 800100c:	183a      	adds	r2, r7, r0
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	438a      	bics	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
      len = length - 1;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	230e      	movs	r3, #14
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	3a01      	subs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e00f      	b.n	8001044 <vSetTxPayloadLength+0x70>
    }
    else{
      tmp |= (1<<0);     //set bit0
 8001024:	220f      	movs	r2, #15
 8001026:	18bb      	adds	r3, r7, r2
 8001028:	18ba      	adds	r2, r7, r2
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]
      len = length;
 8001032:	230e      	movs	r3, #14
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e003      	b.n	8001044 <vSetTxPayloadLength+0x70>
    }
  }else
    len = 0;
 800103c:	230e      	movs	r3, #14
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]

  tmp|= (((byte)(len>>8)&0x07)<<4);
 8001044:	240e      	movs	r4, #14
 8001046:	193b      	adds	r3, r7, r4
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	121b      	asrs	r3, r3, #8
 800104c:	b2db      	uxtb	r3, r3
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	b25b      	sxtb	r3, r3
 8001052:	2270      	movs	r2, #112	; 0x70
 8001054:	4013      	ands	r3, r2
 8001056:	b25a      	sxtb	r2, r3
 8001058:	210f      	movs	r1, #15
 800105a:	187b      	adds	r3, r7, r1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b25b      	sxtb	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b25a      	sxtb	r2, r3
 8001064:	187b      	adds	r3, r7, r1
 8001066:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 8001068:	187b      	adds	r3, r7, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	228a      	movs	r2, #138	; 0x8a
 800106e:	01d2      	lsls	r2, r2, #7
 8001070:	4694      	mov	ip, r2
 8001072:	4463      	add	r3, ip
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff fccf 	bl	8000a18 <vSpi3Write>
  vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len); //Payload length
 800107a:	193b      	adds	r3, r7, r4
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	228c      	movs	r2, #140	; 0x8c
 8001080:	01d2      	lsls	r2, r2, #7
 8001082:	4694      	mov	ip, r2
 8001084:	4463      	add	r3, ip
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff fcc6 	bl	8000a18 <vSpi3Write>
  //bGoSleep();
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	20000234 	.word	0x20000234

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b092      	sub	sp, #72	; 0x48
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109e:	f000 faa7 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f89f 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f000 f937 	bl	8001318 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010aa:	f000 f907 	bl	80012bc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Base_Start( & htim2);
#define TX_NUM  21

  byte tx_buf[32] = {'H','o','p','e','R','F',' ','R','F','M',' ','C','O','B','R','F','M','3','0','0','A'};
 80010ae:	2324      	movs	r3, #36	; 0x24
 80010b0:	18f9      	adds	r1, r7, r3
 80010b2:	4a3f      	ldr	r2, [pc, #252]	; (80011b0 <main+0x118>)
 80010b4:	000b      	movs	r3, r1
 80010b6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80010b8:	c331      	stmia	r3!, {r0, r4, r5}
 80010ba:	ca11      	ldmia	r2!, {r0, r4}
 80010bc:	c311      	stmia	r3!, {r0, r4}
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	801a      	strh	r2, [r3, #0]
 80010c2:	2316      	movs	r3, #22
 80010c4:	18cb      	adds	r3, r1, r3
 80010c6:	220a      	movs	r2, #10
 80010c8:	2100      	movs	r1, #0
 80010ca:	0018      	movs	r0, r3
 80010cc:	f002 f988 	bl	80033e0 <memset>
  byte rx_buf[32];
  byte mode = 1;   // 0: receive , 1: transmitter
 80010d0:	2447      	movs	r4, #71	; 0x47
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]

//radio configure
  HAL_UART_Transmit( &hlpuart1, "BA......\r\n",12, 100);
 80010d8:	4936      	ldr	r1, [pc, #216]	; (80011b4 <main+0x11c>)
 80010da:	4837      	ldr	r0, [pc, #220]	; (80011b8 <main+0x120>)
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	220c      	movs	r2, #12
 80010e0:	f001 fc90 	bl	8002a04 <HAL_UART_Transmit>
  FixedPktLength    = false;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <main+0x124>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
    PayloadLength     = 21;
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <main+0x128>)
 80010ec:	2215      	movs	r2, #21
 80010ee:	601a      	str	r2, [r3, #0]

    vInit();
 80010f0:	f7ff fef8 	bl	8000ee4 <vInit>
    vCfgBank(CMTBank, 12);
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <main+0x12c>)
 80010f6:	210c      	movs	r1, #12
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff20 	bl	8000f3e <vCfgBank>
    vCfgBank(SystemBank, 12);
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <main+0x130>)
 8001100:	210c      	movs	r1, #12
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff ff1b 	bl	8000f3e <vCfgBank>
    vCfgBank(FrequencyBank, 8);
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <main+0x134>)
 800110a:	2108      	movs	r1, #8
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff ff16 	bl	8000f3e <vCfgBank>
    vCfgBank(DataRateBank, 24);
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <main+0x138>)
 8001114:	2118      	movs	r1, #24
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff ff11 	bl	8000f3e <vCfgBank>
    vCfgBank(BasebandBank, 29);
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <main+0x13c>)
 800111e:	211d      	movs	r1, #29
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ff0c 	bl	8000f3e <vCfgBank>
    vCfgBank(TXBank, 11);
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <main+0x140>)
 8001128:	210b      	movs	r1, #11
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff ff07 	bl	8000f3e <vCfgBank>
    vEnableAntSwitch(0);
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fe40 	bl	8000db6 <vEnableAntSwitch>
    vGpioFuncCfg(GPIO1_DCLK+GPIO2_DCLK+GPIO3_INT2);   //GPIO Maping
 8001136:	202f      	movs	r0, #47	; 0x2f
 8001138:	f7ff fdee 	bl	8000d18 <vGpioFuncCfg>

    HAL_Delay(1);//delay_us(10);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fac7 	bl	80016d0 <HAL_Delay>

      mode = 1;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
      vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 8001148:	210a      	movs	r1, #10
 800114a:	2010      	movs	r0, #16
 800114c:	f7ff fdf7 	bl	8000d3e <vIntSrcCfg>



      vIntSrcEnable(TX_DONE_EN);
 8001150:	2020      	movs	r0, #32
 8001152:	f7ff fe69 	bl	8000e28 <vIntSrcEnable>
      vClearFIFO();
 8001156:	f7ff fe93 	bl	8000e80 <vClearFIFO>

      bGoSleep();
 800115a:	f7ff fd77 	bl	8000c4c <bGoSleep>
      HAL_UART_Transmit( &hlpuart1, "TX......\r\n",12, 100);
 800115e:	491f      	ldr	r1, [pc, #124]	; (80011dc <main+0x144>)
 8001160:	4815      	ldr	r0, [pc, #84]	; (80011b8 <main+0x120>)
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	220c      	movs	r2, #12
 8001166:	f001 fc4d 	bl	8002a04 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t tx_cnt=0;
	   byte tmp;
	        bSendMessage(tx_buf, TX_NUM);
 800116a:	2324      	movs	r3, #36	; 0x24
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	2115      	movs	r1, #21
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff0e 	bl	8000f92 <bSendMessage>
	        while(HAL_GPIO_ReadPin(GPO3_GPIO_Port, GPO3_Pin) == 0);
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	015a      	lsls	r2, r3, #5
 800117c:	23a0      	movs	r3, #160	; 0xa0
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f000 fcea 	bl	8001b5c <HAL_GPIO_ReadPin>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d0f5      	beq.n	8001178 <main+0xe0>
	        bIntSrcFlagClr();
 800118c:	f7ff fe60 	bl	8000e50 <bIntSrcFlagClr>
	        vClearFIFO();
 8001190:	f7ff fe76 	bl	8000e80 <vClearFIFO>
	        bGoSleep();
 8001194:	f7ff fd5a 	bl	8000c4c <bGoSleep>
	        HAL_UART_Transmit( &hlpuart1, "gonderildi\r\n",12, 100);
 8001198:	4911      	ldr	r1, [pc, #68]	; (80011e0 <main+0x148>)
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <main+0x120>)
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	220c      	movs	r2, #12
 80011a0:	f001 fc30 	bl	8002a04 <HAL_UART_Transmit>

	        HAL_Delay(1000);
 80011a4:	23fa      	movs	r3, #250	; 0xfa
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 fa91 	bl	80016d0 <HAL_Delay>
  {
 80011ae:	e7dc      	b.n	800116a <main+0xd2>
 80011b0:	08003430 	.word	0x08003430
 80011b4:	08003408 	.word	0x08003408
 80011b8:	200001ac 	.word	0x200001ac
 80011bc:	20000234 	.word	0x20000234
 80011c0:	20000238 	.word	0x20000238
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000030 	.word	0x20000030
 80011cc:	20000060 	.word	0x20000060
 80011d0:	20000080 	.word	0x20000080
 80011d4:	200000e0 	.word	0x200000e0
 80011d8:	20000154 	.word	0x20000154
 80011dc:	08003414 	.word	0x08003414
 80011e0:	08003420 	.word	0x08003420

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b099      	sub	sp, #100	; 0x64
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	242c      	movs	r4, #44	; 0x2c
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	0018      	movs	r0, r3
 80011f0:	2334      	movs	r3, #52	; 0x34
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f002 f8f3 	bl	80033e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fa:	2318      	movs	r3, #24
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	0018      	movs	r0, r3
 8001200:	2314      	movs	r3, #20
 8001202:	001a      	movs	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	f002 f8eb 	bl	80033e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120a:	003b      	movs	r3, r7
 800120c:	0018      	movs	r0, r3
 800120e:	2318      	movs	r3, #24
 8001210:	001a      	movs	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	f002 f8e4 	bl	80033e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <SystemClock_Config+0xd0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <SystemClock_Config+0xd4>)
 800121e:	401a      	ands	r2, r3
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <SystemClock_Config+0xd0>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	0109      	lsls	r1, r1, #4
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800122a:	0021      	movs	r1, r4
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2210      	movs	r2, #16
 8001230:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2201      	movs	r2, #1
 8001236:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	22a0      	movs	r2, #160	; 0xa0
 8001242:	0212      	lsls	r2, r2, #8
 8001244:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	187b      	adds	r3, r7, r1
 800124e:	0018      	movs	r0, r3
 8001250:	f000 fcbe 	bl	8001bd0 <HAL_RCC_OscConfig>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001258:	f000 f8ea 	bl	8001430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	2118      	movs	r1, #24
 800125e:	187b      	adds	r3, r7, r1
 8001260:	220f      	movs	r2, #15
 8001262:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2100      	movs	r1, #0
 8001280:	0018      	movs	r0, r3
 8001282:	f001 f821 	bl	80022c8 <HAL_RCC_ClockConfig>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800128a:	f000 f8d1 	bl	8001430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800128e:	003b      	movs	r3, r7
 8001290:	2204      	movs	r2, #4
 8001292:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001294:	003b      	movs	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129a:	003b      	movs	r3, r7
 800129c:	0018      	movs	r0, r3
 800129e:	f001 fa37 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012a6:	f000 f8c3 	bl	8001430 <Error_Handler>
  }
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b019      	add	sp, #100	; 0x64
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	40007000 	.word	0x40007000
 80012b8:	ffffe7ff 	.word	0xffffe7ff

080012bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <MX_LPUART1_UART_Init+0x58>)
 80012c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012c8:	22e1      	movs	r2, #225	; 0xe1
 80012ca:	0252      	lsls	r2, r2, #9
 80012cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <MX_LPUART1_UART_Init+0x54>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 fb2e 	bl	800295c <HAL_UART_Init>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001304:	f000 f894 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	200001ac 	.word	0x200001ac
 8001314:	40004800 	.word	0x40004800

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	2414      	movs	r4, #20
 8001320:	193b      	adds	r3, r7, r4
 8001322:	0018      	movs	r0, r3
 8001324:	2314      	movs	r3, #20
 8001326:	001a      	movs	r2, r3
 8001328:	2100      	movs	r1, #0
 800132a:	f002 f859 	bl	80033e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001334:	2104      	movs	r1, #4
 8001336:	430a      	orrs	r2, r1
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <MX_GPIO_Init+0x10c>)
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	2204      	movs	r2, #4
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <MX_GPIO_Init+0x10c>)
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	430a      	orrs	r2, r1
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	4013      	ands	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001364:	2101      	movs	r1, #1
 8001366:	430a      	orrs	r2, r1
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <MX_GPIO_Init+0x10c>)
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	2201      	movs	r2, #1
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <MX_GPIO_Init+0x10c>)
 800137c:	2102      	movs	r1, #2
 800137e:	430a      	orrs	r2, r1
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_GPIO_Init+0x10c>)
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	019b      	lsls	r3, r3, #6
 8001392:	4825      	ldr	r0, [pc, #148]	; (8001428 <MX_GPIO_Init+0x110>)
 8001394:	2200      	movs	r2, #0
 8001396:	0019      	movs	r1, r3
 8001398:	f000 fbfd 	bl	8001b96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|FCSB_Pin|BUZZER_Pin|SCLK_Pin
 800139c:	4923      	ldr	r1, [pc, #140]	; (800142c <MX_GPIO_Init+0x114>)
 800139e:	23a0      	movs	r3, #160	; 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	2200      	movs	r2, #0
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 fbf6 	bl	8001b96 <HAL_GPIO_WritePin>
                          |SDIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	0192      	lsls	r2, r2, #6
 80013b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2201      	movs	r2, #1
 80013b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <MX_GPIO_Init+0x110>)
 80013c8:	0019      	movs	r1, r3
 80013ca:	0010      	movs	r0, r2
 80013cc:	f000 fa58 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin BUZZER_Pin SCLK_Pin
                           SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin|FCSB_Pin|BUZZER_Pin|SCLK_Pin
 80013d0:	193b      	adds	r3, r7, r4
 80013d2:	4a16      	ldr	r2, [pc, #88]	; (800142c <MX_GPIO_Init+0x114>)
 80013d4:	601a      	str	r2, [r3, #0]
                          |SDIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	2201      	movs	r2, #1
 80013da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	193a      	adds	r2, r7, r4
 80013ea:	23a0      	movs	r3, #160	; 0xa0
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 fa45 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPO3_Pin */
  GPIO_InitStruct.Pin = GPO3_Pin;
 80013f6:	0021      	movs	r1, r4
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	0152      	lsls	r2, r2, #5
 80013fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 800140c:	187a      	adds	r2, r7, r1
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fa33 	bl	8001880 <HAL_GPIO_Init>

}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b00b      	add	sp, #44	; 0x2c
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	40021000 	.word	0x40021000
 8001428:	50000800 	.word	0x50000800
 800142c:	00000616 	.word	0x00000616

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_MspInit+0x24>)
 8001442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x24>)
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_MspInit+0x24>)
 800144e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_MspInit+0x24>)
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	0549      	lsls	r1, r1, #21
 8001456:	430a      	orrs	r2, r1
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b08b      	sub	sp, #44	; 0x2c
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	2414      	movs	r4, #20
 800146e:	193b      	adds	r3, r7, r4
 8001470:	0018      	movs	r0, r3
 8001472:	2314      	movs	r3, #20
 8001474:	001a      	movs	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	f001 ffb2 	bl	80033e0 <memset>
  if(huart->Instance==LPUART1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <HAL_UART_MspInit+0xc0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d14a      	bne.n	800151c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_UART_MspInit+0xc4>)
 8001488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <HAL_UART_MspInit+0xc4>)
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	02c9      	lsls	r1, r1, #11
 8001490:	430a      	orrs	r2, r1
 8001492:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_UART_MspInit+0xc4>)
 8001496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_UART_MspInit+0xc4>)
 800149a:	2104      	movs	r1, #4
 800149c:	430a      	orrs	r2, r1
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_UART_MspInit+0xc4>)
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2204      	movs	r2, #4
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_UART_MspInit+0xc4>)
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_UART_MspInit+0xc4>)
 80014b2:	2102      	movs	r1, #2
 80014b4:	430a      	orrs	r2, r1
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_UART_MspInit+0xc4>)
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	2202      	movs	r2, #2
 80014ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	2203      	movs	r2, #3
 80014da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	2206      	movs	r2, #6
 80014e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_UART_MspInit+0xc8>)
 80014e6:	0019      	movs	r1, r3
 80014e8:	0010      	movs	r0, r2
 80014ea:	f000 f9c9 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ee:	0021      	movs	r1, r4
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	00d2      	lsls	r2, r2, #3
 80014f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2202      	movs	r2, #2
 80014fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2203      	movs	r2, #3
 8001508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2206      	movs	r2, #6
 800150e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	187b      	adds	r3, r7, r1
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_UART_MspInit+0xcc>)
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f000 f9b2 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b00b      	add	sp, #44	; 0x2c
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	40004800 	.word	0x40004800
 8001528:	40021000 	.word	0x40021000
 800152c:	50000800 	.word	0x50000800
 8001530:	50000400 	.word	0x50000400

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f89e 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800156e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001570:	4813      	ldr	r0, [pc, #76]	; (80015c0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001572:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001574:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <LoopForever+0xa>)
    CMP R1, R2
 8001578:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800157a:	d105      	bne.n	8001588 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800157e:	4913      	ldr	r1, [pc, #76]	; (80015cc <LoopForever+0x12>)
    STR R1, [R0]
 8001580:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001584:	4913      	ldr	r1, [pc, #76]	; (80015d4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001586:	6001      	str	r1, [r0, #0]

08001588 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800158a:	4914      	ldr	r1, [pc, #80]	; (80015dc <LoopForever+0x22>)
  ldr r2, =_sidata
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <LoopForever+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80015a0:	4c11      	ldr	r4, [pc, #68]	; (80015e8 <LoopForever+0x2e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015ae:	f7ff ffd8 	bl	8001562 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f001 fef1 	bl	8003398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fd6f 	bl	8001098 <main>

080015ba <LoopForever>:

LoopForever:
    b LoopForever
 80015ba:	e7fe      	b.n	80015ba <LoopForever>
   ldr   r0, =_estack
 80015bc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80015c0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80015c4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80015c8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80015cc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80015d0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80015d4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80015e0:	080034cc 	.word	0x080034cc
  ldr r2, =_sbss
 80015e4:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80015e8:	20000240 	.word	0x20000240

080015ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_IRQHandler>
	...

080015f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x3c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Init+0x3c>)
 8001602:	2140      	movs	r1, #64	; 0x40
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f811 	bl	8001630 <HAL_InitTick>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d003      	beq.n	800161a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e001      	b.n	800161e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800161a:	f7ff ff0f 	bl	800143c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_InitTick+0x5c>)
 800163a:	681c      	ldr	r4, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_InitTick+0x60>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	0019      	movs	r1, r3
 8001642:	23fa      	movs	r3, #250	; 0xfa
 8001644:	0098      	lsls	r0, r3, #2
 8001646:	f7fe fd5f 	bl	8000108 <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	0019      	movs	r1, r3
 800164e:	0020      	movs	r0, r4
 8001650:	f7fe fd5a 	bl	8000108 <__udivsi3>
 8001654:	0003      	movs	r3, r0
 8001656:	0018      	movs	r0, r3
 8001658:	f000 f905 	bl	8001866 <HAL_SYSTICK_Config>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e00f      	b.n	8001684 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d80b      	bhi.n	8001682 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	2301      	movs	r3, #1
 800166e:	425b      	negs	r3, r3
 8001670:	2200      	movs	r2, #0
 8001672:	0018      	movs	r0, r3
 8001674:	f000 f8e2 	bl	800183c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_InitTick+0x64>)
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b003      	add	sp, #12
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	20000180 	.word	0x20000180
 8001690:	20000188 	.word	0x20000188
 8001694:	20000184 	.word	0x20000184

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x1c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	001a      	movs	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x20>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	18d2      	adds	r2, r2, r3
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_IncTick+0x20>)
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	20000188 	.word	0x20000188
 80016b8:	2000023c 	.word	0x2000023c

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	2000023c 	.word	0x2000023c

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff fff0 	bl	80016bc <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	001a      	movs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	189b      	adds	r3, r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	f7ff ffe0 	bl	80016bc <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b004      	add	sp, #16
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	20000188 	.word	0x20000188

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	0002      	movs	r2, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b7f      	cmp	r3, #127	; 0x7f
 800172c:	d828      	bhi.n	8001780 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800172e:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <__NVIC_SetPriority+0xd4>)
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	33c0      	adds	r3, #192	; 0xc0
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	589b      	ldr	r3, [r3, r2]
 800173e:	1dfa      	adds	r2, r7, #7
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	0011      	movs	r1, r2
 8001744:	2203      	movs	r2, #3
 8001746:	400a      	ands	r2, r1
 8001748:	00d2      	lsls	r2, r2, #3
 800174a:	21ff      	movs	r1, #255	; 0xff
 800174c:	4091      	lsls	r1, r2
 800174e:	000a      	movs	r2, r1
 8001750:	43d2      	mvns	r2, r2
 8001752:	401a      	ands	r2, r3
 8001754:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	019b      	lsls	r3, r3, #6
 800175a:	22ff      	movs	r2, #255	; 0xff
 800175c:	401a      	ands	r2, r3
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	0018      	movs	r0, r3
 8001764:	2303      	movs	r3, #3
 8001766:	4003      	ands	r3, r0
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800176c:	481f      	ldr	r0, [pc, #124]	; (80017ec <__NVIC_SetPriority+0xd4>)
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b25b      	sxtb	r3, r3
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	430a      	orrs	r2, r1
 8001778:	33c0      	adds	r3, #192	; 0xc0
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800177e:	e031      	b.n	80017e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <__NVIC_SetPriority+0xd8>)
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	0019      	movs	r1, r3
 8001788:	230f      	movs	r3, #15
 800178a:	400b      	ands	r3, r1
 800178c:	3b08      	subs	r3, #8
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3306      	adds	r3, #6
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	3304      	adds	r3, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	1dfa      	adds	r2, r7, #7
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	0011      	movs	r1, r2
 80017a0:	2203      	movs	r2, #3
 80017a2:	400a      	ands	r2, r1
 80017a4:	00d2      	lsls	r2, r2, #3
 80017a6:	21ff      	movs	r1, #255	; 0xff
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	43d2      	mvns	r2, r2
 80017ae:	401a      	ands	r2, r3
 80017b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	401a      	ands	r2, r3
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	0018      	movs	r0, r3
 80017c0:	2303      	movs	r3, #3
 80017c2:	4003      	ands	r3, r0
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c8:	4809      	ldr	r0, [pc, #36]	; (80017f0 <__NVIC_SetPriority+0xd8>)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	001c      	movs	r4, r3
 80017d0:	230f      	movs	r3, #15
 80017d2:	4023      	ands	r3, r4
 80017d4:	3b08      	subs	r3, #8
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	430a      	orrs	r2, r1
 80017da:	3306      	adds	r3, #6
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	18c3      	adds	r3, r0, r3
 80017e0:	3304      	adds	r3, #4
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b003      	add	sp, #12
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	1e5a      	subs	r2, r3, #1
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	045b      	lsls	r3, r3, #17
 8001804:	429a      	cmp	r2, r3
 8001806:	d301      	bcc.n	800180c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001808:	2301      	movs	r3, #1
 800180a:	e010      	b.n	800182e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <SysTick_Config+0x44>)
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	3a01      	subs	r2, #1
 8001812:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001814:	2301      	movs	r3, #1
 8001816:	425b      	negs	r3, r3
 8001818:	2103      	movs	r1, #3
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff ff7c 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x44>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x44>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	210f      	movs	r1, #15
 8001848:	187b      	adds	r3, r7, r1
 800184a:	1c02      	adds	r2, r0, #0
 800184c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	187b      	adds	r3, r7, r1
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b004      	add	sp, #16
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff ffbf 	bl	80017f4 <SysTick_Config>
 8001876:	0003      	movs	r3, r0
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001896:	e149      	b.n	8001b2c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d100      	bne.n	80018b0 <HAL_GPIO_Init+0x30>
 80018ae:	e13a      	b.n	8001b26 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d005      	beq.n	80018c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d130      	bne.n	800192a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	409a      	lsls	r2, r3
 80018d6:	0013      	movs	r3, r2
 80018d8:	43da      	mvns	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fe:	2201      	movs	r2, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	2201      	movs	r2, #1
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2203      	movs	r2, #3
 8001930:	4013      	ands	r3, r2
 8001932:	2b03      	cmp	r3, #3
 8001934:	d017      	beq.n	8001966 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	43da      	mvns	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	4013      	ands	r3, r2
 800196e:	2b02      	cmp	r3, #2
 8001970:	d123      	bne.n	80019ba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	58d3      	ldr	r3, [r2, r3]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2107      	movs	r1, #7
 800199e:	400b      	ands	r3, r1
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	6939      	ldr	r1, [r7, #16]
 80019b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	43da      	mvns	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	401a      	ands	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	23c0      	movs	r3, #192	; 0xc0
 80019f4:	029b      	lsls	r3, r3, #10
 80019f6:	4013      	ands	r3, r2
 80019f8:	d100      	bne.n	80019fc <HAL_GPIO_Init+0x17c>
 80019fa:	e094      	b.n	8001b26 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fc:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_GPIO_Init+0x2c4>)
 80019fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a08:	4a4f      	ldr	r2, [pc, #316]	; (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	589b      	ldr	r3, [r3, r2]
 8001a14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	43da      	mvns	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	23a0      	movs	r3, #160	; 0xa0
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0x1de>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a44      	ldr	r2, [pc, #272]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_Init+0x1da>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a43      	ldr	r2, [pc, #268]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_Init+0x1d6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a42      	ldr	r2, [pc, #264]	; (8001b54 <HAL_GPIO_Init+0x2d4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_Init+0x1d2>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	2103      	movs	r1, #3
 8001a64:	400a      	ands	r2, r1
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43da      	mvns	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4013      	ands	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43da      	mvns	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	035b      	lsls	r3, r3, #13
 8001aea:	4013      	ands	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43da      	mvns	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_GPIO_Init+0x2d8>)
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	1e13      	subs	r3, r2, #0
 8001b36:	d000      	beq.n	8001b3a <HAL_GPIO_Init+0x2ba>
 8001b38:	e6ae      	b.n	8001898 <HAL_GPIO_Init+0x18>
  }
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b006      	add	sp, #24
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	50000400 	.word	0x50000400
 8001b50:	50000800 	.word	0x50000800
 8001b54:	50001c00 	.word	0x50001c00
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	000a      	movs	r2, r1
 8001b66:	1cbb      	adds	r3, r7, #2
 8001b68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	1cba      	adds	r2, r7, #2
 8001b70:	8812      	ldrh	r2, [r2, #0]
 8001b72:	4013      	ands	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b76:	230f      	movs	r3, #15
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b80:	230f      	movs	r3, #15
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b88:	230f      	movs	r3, #15
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	0008      	movs	r0, r1
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	1cbb      	adds	r3, r7, #2
 8001ba4:	1c02      	adds	r2, r0, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	1c7b      	adds	r3, r7, #1
 8001baa:	1c0a      	adds	r2, r1, #0
 8001bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bae:	1c7b      	adds	r3, r7, #1
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	1cbb      	adds	r3, r7, #2
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001bbe:	e003      	b.n	8001bc8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f000 fb6c 	bl	80022bc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be4:	4bc8      	ldr	r3, [pc, #800]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	220c      	movs	r2, #12
 8001bea:	4013      	ands	r3, r2
 8001bec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bee:	4bc6      	ldr	r3, [pc, #792]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	d100      	bne.n	8001c06 <HAL_RCC_OscConfig+0x36>
 8001c04:	e07d      	b.n	8001d02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d007      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d112      	bne.n	8001c38 <HAL_RCC_OscConfig+0x68>
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	025b      	lsls	r3, r3, #9
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d10d      	bne.n	8001c38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	4bba      	ldr	r3, [pc, #744]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	029b      	lsls	r3, r3, #10
 8001c24:	4013      	ands	r3, r2
 8001c26:	d100      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5a>
 8001c28:	e06a      	b.n	8001d00 <HAL_RCC_OscConfig+0x130>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d166      	bne.n	8001d00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f000 fb42 	bl	80022bc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	025b      	lsls	r3, r3, #9
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x84>
 8001c44:	4bb0      	ldr	r3, [pc, #704]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4baf      	ldr	r3, [pc, #700]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	0249      	lsls	r1, r1, #9
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e027      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	23a0      	movs	r3, #160	; 0xa0
 8001c5a:	02db      	lsls	r3, r3, #11
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d10e      	bne.n	8001c7e <HAL_RCC_OscConfig+0xae>
 8001c60:	4ba9      	ldr	r3, [pc, #676]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4ba8      	ldr	r3, [pc, #672]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	02c9      	lsls	r1, r1, #11
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	4ba6      	ldr	r3, [pc, #664]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4ba5      	ldr	r3, [pc, #660]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	0249      	lsls	r1, r1, #9
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e012      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c7e:	4ba2      	ldr	r3, [pc, #648]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c84:	49a1      	ldr	r1, [pc, #644]	; (8001f0c <HAL_RCC_OscConfig+0x33c>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	4b9f      	ldr	r3, [pc, #636]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	025b      	lsls	r3, r3, #9
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4b9b      	ldr	r3, [pc, #620]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b9a      	ldr	r3, [pc, #616]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	499c      	ldr	r1, [pc, #624]	; (8001f10 <HAL_RCC_OscConfig+0x340>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d014      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fd06 	bl	80016bc <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fd01 	bl	80016bc <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e2f9      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc8:	4b8f      	ldr	r3, [pc, #572]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xe6>
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fcf1 	bl	80016bc <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fcec 	bl	80016bc <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e2e4      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cf2:	4b85      	ldr	r3, [pc, #532]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x110>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x13e>
 8001d0c:	e099      	b.n	8001e42 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	2220      	movs	r2, #32
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d1c:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d22:	2120      	movs	r1, #32
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d13e      	bne.n	8001dba <HAL_RCC_OscConfig+0x1ea>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d13b      	bne.n	8001dba <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d42:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d004      	beq.n	8001d56 <HAL_RCC_OscConfig+0x186>
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e2b2      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a6e      	ldr	r2, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x344>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	021a      	lsls	r2, r3, #8
 8001d66:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d6c:	4b66      	ldr	r3, [pc, #408]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2209      	movs	r2, #9
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 fbeb 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8001d82:	0001      	movs	r1, r0
 8001d84:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	4a62      	ldr	r2, [pc, #392]	; (8001f18 <HAL_RCC_OscConfig+0x348>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	000a      	movs	r2, r1
 8001d94:	40da      	lsrs	r2, r3
 8001d96:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <HAL_RCC_OscConfig+0x34c>)
 8001d98:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d9a:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x350>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2513      	movs	r5, #19
 8001da0:	197c      	adds	r4, r7, r5
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff fc44 	bl	8001630 <HAL_InitTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001dac:	197b      	adds	r3, r7, r5
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d046      	beq.n	8001e42 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001db4:	197b      	adds	r3, r7, r5
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	e280      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d027      	beq.n	8001e10 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dc0:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2209      	movs	r2, #9
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fc73 	bl	80016bc <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc6e 	bl	80016bc <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e266      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d0f1      	beq.n	8001ddc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <HAL_RCC_OscConfig+0x344>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	021a      	lsls	r2, r3, #8
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e10:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	438a      	bics	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fc4e 	bl	80016bc <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff fc49 	bl	80016bc <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e241      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d1f1      	bne.n	8001e26 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2210      	movs	r2, #16
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d100      	bne.n	8001e4e <HAL_RCC_OscConfig+0x27e>
 8001e4c:	e0a1      	b.n	8001f92 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d140      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e54:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_OscConfig+0x29c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e227      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <HAL_RCC_OscConfig+0x354>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	0a19      	lsrs	r1, r3, #8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	061a      	lsls	r2, r3, #24
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	0b5b      	lsrs	r3, r3, #13
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	0212      	lsls	r2, r2, #8
 8001ea0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	210f      	movs	r1, #15
 8001eaa:	400b      	ands	r3, r1
 8001eac:	491a      	ldr	r1, [pc, #104]	; (8001f18 <HAL_RCC_OscConfig+0x348>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_RCC_OscConfig+0x34c>)
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_RCC_OscConfig+0x350>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2513      	movs	r5, #19
 8001ebc:	197c      	adds	r4, r7, r5
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fbb6 	bl	8001630 <HAL_InitTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ec8:	197b      	adds	r3, r7, r5
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d060      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001ed0:	197b      	adds	r3, r7, r5
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	e1f2      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d03f      	beq.n	8001f5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	0049      	lsls	r1, r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff fbe6 	bl	80016bc <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ef4:	e018      	b.n	8001f28 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fbe1 	bl	80016bc <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d911      	bls.n	8001f28 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1d9      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	fffeffff 	.word	0xfffeffff
 8001f10:	fffbffff 	.word	0xfffbffff
 8001f14:	ffffe0ff 	.word	0xffffe0ff
 8001f18:	08003450 	.word	0x08003450
 8001f1c:	20000180 	.word	0x20000180
 8001f20:	20000184 	.word	0x20000184
 8001f24:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f28:	4bc9      	ldr	r3, [pc, #804]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d0e0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f34:	4bc6      	ldr	r3, [pc, #792]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4ac6      	ldr	r2, [pc, #792]	; (8002254 <HAL_RCC_OscConfig+0x684>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	4bc3      	ldr	r3, [pc, #780]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f48:	4bc1      	ldr	r3, [pc, #772]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	0a19      	lsrs	r1, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	061a      	lsls	r2, r3, #24
 8001f56:	4bbe      	ldr	r3, [pc, #760]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	e019      	b.n	8001f92 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f5e:	4bbc      	ldr	r3, [pc, #752]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4bbb      	ldr	r3, [pc, #748]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f64:	49bc      	ldr	r1, [pc, #752]	; (8002258 <HAL_RCC_OscConfig+0x688>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fba7 	bl	80016bc <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f74:	f7ff fba2 	bl	80016bc <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e19a      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f86:	4bb2      	ldr	r3, [pc, #712]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2208      	movs	r2, #8
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d036      	beq.n	800200a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d019      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa4:	4baa      	ldr	r3, [pc, #680]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa8:	4ba9      	ldr	r3, [pc, #676]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fb84 	bl	80016bc <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fba:	f7ff fb7f 	bl	80016bc <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e177      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fcc:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d0f1      	beq.n	8001fba <HAL_RCC_OscConfig+0x3ea>
 8001fd6:	e018      	b.n	800200a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001fda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fdc:	4b9c      	ldr	r3, [pc, #624]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fb6a 	bl	80016bc <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fee:	f7ff fb65 	bl	80016bc <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e15d      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002000:	4b93      	ldr	r3, [pc, #588]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d1f1      	bne.n	8001fee <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2204      	movs	r2, #4
 8002010:	4013      	ands	r3, r2
 8002012:	d100      	bne.n	8002016 <HAL_RCC_OscConfig+0x446>
 8002014:	e0ae      	b.n	8002174 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2023      	movs	r0, #35	; 0x23
 8002018:	183b      	adds	r3, r7, r0
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b8c      	ldr	r3, [pc, #560]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	055b      	lsls	r3, r3, #21
 8002026:	4013      	ands	r3, r2
 8002028:	d109      	bne.n	800203e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b89      	ldr	r3, [pc, #548]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 800202c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0549      	lsls	r1, r1, #21
 8002034:	430a      	orrs	r2, r1
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002038:	183b      	adds	r3, r7, r0
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203e:	4b87      	ldr	r3, [pc, #540]	; (800225c <HAL_RCC_OscConfig+0x68c>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4013      	ands	r3, r2
 8002048:	d11a      	bne.n	8002080 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204a:	4b84      	ldr	r3, [pc, #528]	; (800225c <HAL_RCC_OscConfig+0x68c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b83      	ldr	r3, [pc, #524]	; (800225c <HAL_RCC_OscConfig+0x68c>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0049      	lsls	r1, r1, #1
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002058:	f7ff fb30 	bl	80016bc <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7ff fb2b 	bl	80016bc <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b64      	cmp	r3, #100	; 0x64
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e123      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <HAL_RCC_OscConfig+0x68c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4013      	ands	r3, r2
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4cc>
 800208c:	4b70      	ldr	r3, [pc, #448]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 800208e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0049      	lsls	r1, r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	651a      	str	r2, [r3, #80]	; 0x50
 800209a:	e031      	b.n	8002100 <HAL_RCC_OscConfig+0x530>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10c      	bne.n	80020be <HAL_RCC_OscConfig+0x4ee>
 80020a4:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a8:	4b69      	ldr	r3, [pc, #420]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020aa:	496b      	ldr	r1, [pc, #428]	; (8002258 <HAL_RCC_OscConfig+0x688>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	651a      	str	r2, [r3, #80]	; 0x50
 80020b0:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b4:	4b66      	ldr	r3, [pc, #408]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020b6:	496a      	ldr	r1, [pc, #424]	; (8002260 <HAL_RCC_OscConfig+0x690>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	651a      	str	r2, [r3, #80]	; 0x50
 80020bc:	e020      	b.n	8002100 <HAL_RCC_OscConfig+0x530>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	23a0      	movs	r3, #160	; 0xa0
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d10e      	bne.n	80020e8 <HAL_RCC_OscConfig+0x518>
 80020ca:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ce:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	00c9      	lsls	r1, r1, #3
 80020d4:	430a      	orrs	r2, r1
 80020d6:	651a      	str	r2, [r3, #80]	; 0x50
 80020d8:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020dc:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	651a      	str	r2, [r3, #80]	; 0x50
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0x530>
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ec:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020ee:	495a      	ldr	r1, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x688>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	651a      	str	r2, [r3, #80]	; 0x50
 80020f4:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f8:	4b55      	ldr	r3, [pc, #340]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80020fa:	4959      	ldr	r1, [pc, #356]	; (8002260 <HAL_RCC_OscConfig+0x690>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7ff fad8 	bl	80016bc <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002110:	e009      	b.n	8002126 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff fad3 	bl	80016bc <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	4a51      	ldr	r2, [pc, #324]	; (8002264 <HAL_RCC_OscConfig+0x694>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0ca      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d0ef      	beq.n	8002112 <HAL_RCC_OscConfig+0x542>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff fac2 	bl	80016bc <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800213c:	e009      	b.n	8002152 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff fabd 	bl	80016bc <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a46      	ldr	r2, [pc, #280]	; (8002264 <HAL_RCC_OscConfig+0x694>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0b4      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d1ef      	bne.n	800213e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800215e:	2323      	movs	r3, #35	; 0x23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 800216a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 800216e:	493e      	ldr	r1, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x698>)
 8002170:	400a      	ands	r2, r1
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	2b00      	cmp	r3, #0
 800217a:	d100      	bne.n	800217e <HAL_RCC_OscConfig+0x5ae>
 800217c:	e09d      	b.n	80022ba <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d100      	bne.n	8002186 <HAL_RCC_OscConfig+0x5b6>
 8002184:	e076      	b.n	8002274 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b02      	cmp	r3, #2
 800218c:	d145      	bne.n	800221a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002194:	4935      	ldr	r1, [pc, #212]	; (800226c <HAL_RCC_OscConfig+0x69c>)
 8002196:	400a      	ands	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff fa8f 	bl	80016bc <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff fa8a 	bl	80016bc <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e082      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	049b      	lsls	r3, r3, #18
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <HAL_RCC_OscConfig+0x6a0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	431a      	orrs	r2, r3
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	0449      	lsls	r1, r1, #17
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fa64 	bl	80016bc <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff fa5f 	bl	80016bc <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e057      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	049b      	lsls	r3, r3, #18
 8002214:	4013      	ands	r3, r2
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x62a>
 8002218:	e04f      	b.n	80022ba <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002220:	4912      	ldr	r1, [pc, #72]	; (800226c <HAL_RCC_OscConfig+0x69c>)
 8002222:	400a      	ands	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff fa49 	bl	80016bc <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002230:	f7ff fa44 	bl	80016bc <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e03c      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002242:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_RCC_OscConfig+0x680>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	049b      	lsls	r3, r3, #18
 800224a:	4013      	ands	r3, r2
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x660>
 800224e:	e034      	b.n	80022ba <HAL_RCC_OscConfig+0x6ea>
 8002250:	40021000 	.word	0x40021000
 8002254:	ffff1fff 	.word	0xffff1fff
 8002258:	fffffeff 	.word	0xfffffeff
 800225c:	40007000 	.word	0x40007000
 8002260:	fffffbff 	.word	0xfffffbff
 8002264:	00001388 	.word	0x00001388
 8002268:	efffffff 	.word	0xefffffff
 800226c:	feffffff 	.word	0xfeffffff
 8002270:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e01d      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x6f4>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	429a      	cmp	r2, r3
 8002294:	d10f      	bne.n	80022b6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	23f0      	movs	r3, #240	; 0xf0
 800229a:	039b      	lsls	r3, r3, #14
 800229c:	401a      	ands	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	23c0      	movs	r3, #192	; 0xc0
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b00a      	add	sp, #40	; 0x28
 80022c2:	bdb0      	pop	{r4, r5, r7, pc}
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e128      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b96      	ldr	r3, [pc, #600]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d91e      	bls.n	8002328 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b93      	ldr	r3, [pc, #588]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	4b90      	ldr	r3, [pc, #576]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022fc:	f7ff f9de 	bl	80016bc <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002304:	e009      	b.n	800231a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7ff f9d9 	bl	80016bc <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4a8a      	ldr	r2, [pc, #552]	; (800253c <HAL_RCC_ClockConfig+0x274>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e109      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b87      	ldr	r3, [pc, #540]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002332:	4b83      	ldr	r3, [pc, #524]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	22f0      	movs	r2, #240	; 0xf0
 8002338:	4393      	bics	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4b7f      	ldr	r3, [pc, #508]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002342:	430a      	orrs	r2, r1
 8002344:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2201      	movs	r2, #1
 800234c:	4013      	ands	r3, r2
 800234e:	d100      	bne.n	8002352 <HAL_RCC_ClockConfig+0x8a>
 8002350:	e089      	b.n	8002466 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235a:	4b79      	ldr	r3, [pc, #484]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	4013      	ands	r3, r2
 8002364:	d120      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0e1      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	049b      	lsls	r3, r3, #18
 800237a:	4013      	ands	r3, r2
 800237c:	d114      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0d5      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d106      	bne.n	8002398 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2204      	movs	r2, #4
 8002390:	4013      	ands	r3, r2
 8002392:	d109      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0ca      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002398:	4b69      	ldr	r3, [pc, #420]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0c2      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a8:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4393      	bics	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4b62      	ldr	r3, [pc, #392]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7ff f97e 	bl	80016bc <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d111      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023cc:	e009      	b.n	80023e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7ff f975 	bl	80016bc <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a58      	ldr	r2, [pc, #352]	; (800253c <HAL_RCC_ClockConfig+0x274>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0a5      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	220c      	movs	r2, #12
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d1ef      	bne.n	80023ce <HAL_RCC_ClockConfig+0x106>
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d111      	bne.n	800241c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7ff f95f 	bl	80016bc <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a4d      	ldr	r2, [pc, #308]	; (800253c <HAL_RCC_ClockConfig+0x274>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e08f      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240e:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	220c      	movs	r2, #12
 8002414:	4013      	ands	r3, r2
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d1ef      	bne.n	80023fa <HAL_RCC_ClockConfig+0x132>
 800241a:	e024      	b.n	8002466 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d11b      	bne.n	800245c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002424:	e009      	b.n	800243a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7ff f949 	bl	80016bc <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	4a42      	ldr	r2, [pc, #264]	; (800253c <HAL_RCC_ClockConfig+0x274>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e079      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	220c      	movs	r2, #12
 8002440:	4013      	ands	r3, r2
 8002442:	2b04      	cmp	r3, #4
 8002444:	d1ef      	bne.n	8002426 <HAL_RCC_ClockConfig+0x15e>
 8002446:	e00e      	b.n	8002466 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7ff f938 	bl	80016bc <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	4a3a      	ldr	r2, [pc, #232]	; (800253c <HAL_RCC_ClockConfig+0x274>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e068      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800245c:	4b38      	ldr	r3, [pc, #224]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	220c      	movs	r2, #12
 8002462:	4013      	ands	r3, r2
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	4013      	ands	r3, r2
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d21e      	bcs.n	80024b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	4393      	bics	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002486:	f7ff f919 	bl	80016bc <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	e009      	b.n	80024a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7ff f914 	bl	80016bc <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	4a28      	ldr	r2, [pc, #160]	; (800253c <HAL_RCC_ClockConfig+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e044      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4013      	ands	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d1ee      	bne.n	8002490 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2204      	movs	r2, #4
 80024b8:	4013      	ands	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x27c>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2208      	movs	r2, #8
 80024d6:	4013      	ands	r3, r2
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <HAL_RCC_ClockConfig+0x280>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	00da      	lsls	r2, r3, #3
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f0:	f000 f832 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 80024f4:	0001      	movs	r1, r0
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	220f      	movs	r2, #15
 80024fe:	4013      	ands	r3, r2
 8002500:	4a12      	ldr	r2, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x284>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	000a      	movs	r2, r1
 8002506:	40da      	lsrs	r2, r3
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_ClockConfig+0x288>)
 800250a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_ClockConfig+0x28c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	250b      	movs	r5, #11
 8002512:	197c      	adds	r4, r7, r5
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff f88b 	bl	8001630 <HAL_InitTick>
 800251a:	0003      	movs	r3, r0
 800251c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800251e:	197b      	adds	r3, r7, r5
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002526:	197b      	adds	r3, r7, r5
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	e000      	b.n	800252e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bdb0      	pop	{r4, r5, r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	40022000 	.word	0x40022000
 800253c:	00001388 	.word	0x00001388
 8002540:	40021000 	.word	0x40021000
 8002544:	fffff8ff 	.word	0xfffff8ff
 8002548:	ffffc7ff 	.word	0xffffc7ff
 800254c:	08003450 	.word	0x08003450
 8002550:	20000180 	.word	0x20000180
 8002554:	20000184 	.word	0x20000184

08002558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_GetSysClockFreq+0x138>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002566:	230c      	movs	r3, #12
 8002568:	4013      	ands	r3, r2
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d014      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 800256e:	d900      	bls.n	8002572 <HAL_RCC_GetSysClockFreq+0x1a>
 8002570:	e07b      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x112>
 8002572:	2b04      	cmp	r3, #4
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x24>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d00b      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x3a>
 800257a:	e076      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800257c:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_RCC_GetSysClockFreq+0x138>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2210      	movs	r2, #16
 8002582:	4013      	ands	r3, r2
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002586:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800258a:	e07c      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800258c:	4b42      	ldr	r3, [pc, #264]	; (8002698 <HAL_RCC_GetSysClockFreq+0x140>)
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002590:	e079      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_RCC_GetSysClockFreq+0x144>)
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002596:	e076      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	0c9a      	lsrs	r2, r3, #18
 800259c:	230f      	movs	r3, #15
 800259e:	401a      	ands	r2, r3
 80025a0:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x148>)
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	0d9a      	lsrs	r2, r3, #22
 80025aa:	2303      	movs	r3, #3
 80025ac:	4013      	ands	r3, r2
 80025ae:	3301      	adds	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b2:	4b37      	ldr	r3, [pc, #220]	; (8002690 <HAL_RCC_GetSysClockFreq+0x138>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	025b      	lsls	r3, r3, #9
 80025ba:	4013      	ands	r3, r2
 80025bc:	d01a      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	4a35      	ldr	r2, [pc, #212]	; (800269c <HAL_RCC_GetSysClockFreq+0x144>)
 80025c8:	2300      	movs	r3, #0
 80025ca:	69b8      	ldr	r0, [r7, #24]
 80025cc:	69f9      	ldr	r1, [r7, #28]
 80025ce:	f7fd fe47 	bl	8000260 <__aeabi_lmul>
 80025d2:	0002      	movs	r2, r0
 80025d4:	000b      	movs	r3, r1
 80025d6:	0010      	movs	r0, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f7fd fe1b 	bl	8000220 <__aeabi_uldivmod>
 80025ea:	0002      	movs	r2, r0
 80025ec:	000b      	movs	r3, r1
 80025ee:	0013      	movs	r3, r2
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	e037      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_RCC_GetSysClockFreq+0x138>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2210      	movs	r2, #16
 80025fa:	4013      	ands	r3, r2
 80025fc:	d01a      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4a23      	ldr	r2, [pc, #140]	; (8002694 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002608:	2300      	movs	r3, #0
 800260a:	68b8      	ldr	r0, [r7, #8]
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	f7fd fe27 	bl	8000260 <__aeabi_lmul>
 8002612:	0002      	movs	r2, r0
 8002614:	000b      	movs	r3, r1
 8002616:	0010      	movs	r0, r2
 8002618:	0019      	movs	r1, r3
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f7fd fdfb 	bl	8000220 <__aeabi_uldivmod>
 800262a:	0002      	movs	r2, r0
 800262c:	000b      	movs	r3, r1
 800262e:	0013      	movs	r3, r2
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
 8002632:	e017      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	0018      	movs	r0, r3
 8002638:	2300      	movs	r3, #0
 800263a:	0019      	movs	r1, r3
 800263c:	4a16      	ldr	r2, [pc, #88]	; (8002698 <HAL_RCC_GetSysClockFreq+0x140>)
 800263e:	2300      	movs	r3, #0
 8002640:	f7fd fe0e 	bl	8000260 <__aeabi_lmul>
 8002644:	0002      	movs	r2, r0
 8002646:	000b      	movs	r3, r1
 8002648:	0010      	movs	r0, r2
 800264a:	0019      	movs	r1, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	001c      	movs	r4, r3
 8002650:	2300      	movs	r3, #0
 8002652:	001d      	movs	r5, r3
 8002654:	0022      	movs	r2, r4
 8002656:	002b      	movs	r3, r5
 8002658:	f7fd fde2 	bl	8000220 <__aeabi_uldivmod>
 800265c:	0002      	movs	r2, r0
 800265e:	000b      	movs	r3, r1
 8002660:	0013      	movs	r3, r2
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002668:	e00d      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_GetSysClockFreq+0x138>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	0b5b      	lsrs	r3, r3, #13
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	3301      	adds	r3, #1
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	0212      	lsls	r2, r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002684:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b00e      	add	sp, #56	; 0x38
 800268e:	bdb0      	pop	{r4, r5, r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	003d0900 	.word	0x003d0900
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200
 80026a0:	08003468 	.word	0x08003468

080026a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	20000180 	.word	0x20000180

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026bc:	f7ff fff2 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c0:	0001      	movs	r1, r0
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	2207      	movs	r2, #7
 80026ca:	4013      	ands	r3, r2
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	40d9      	lsrs	r1, r3
 80026d2:	000b      	movs	r3, r1
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08003460 	.word	0x08003460

080026e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e8:	f7ff ffdc 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026ec:	0001      	movs	r1, r0
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	0adb      	lsrs	r3, r3, #11
 80026f4:	2207      	movs	r2, #7
 80026f6:	4013      	ands	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_RCC_GetPCLK2Freq+0x28>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	40d9      	lsrs	r1, r3
 80026fe:	000b      	movs	r3, r1
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	40021000 	.word	0x40021000
 800270c:	08003460 	.word	0x08003460

08002710 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002718:	2017      	movs	r0, #23
 800271a:	183b      	adds	r3, r7, r0
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2220      	movs	r2, #32
 8002726:	4013      	ands	r3, r2
 8002728:	d100      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800272a:	e0c2      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272c:	4b81      	ldr	r3, [pc, #516]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800272e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	055b      	lsls	r3, r3, #21
 8002734:	4013      	ands	r3, r2
 8002736:	d109      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b7e      	ldr	r3, [pc, #504]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800273a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273c:	4b7d      	ldr	r3, [pc, #500]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	0549      	lsls	r1, r1, #21
 8002742:	430a      	orrs	r2, r1
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002746:	183b      	adds	r3, r7, r0
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4013      	ands	r3, r2
 8002756:	d11a      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002758:	4b77      	ldr	r3, [pc, #476]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	0049      	lsls	r1, r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7fe ffa9 	bl	80016bc <HAL_GetTick>
 800276a:	0003      	movs	r3, r0
 800276c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	e008      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7fe ffa4 	bl	80016bc <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0d4      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4013      	ands	r3, r2
 800278c:	d0f0      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800278e:	4b69      	ldr	r3, [pc, #420]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	039b      	lsls	r3, r3, #14
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	23c0      	movs	r3, #192	; 0xc0
 80027a0:	039b      	lsls	r3, r3, #14
 80027a2:	4013      	ands	r3, r2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d013      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	029b      	lsls	r3, r3, #10
 80027b2:	401a      	ands	r2, r3
 80027b4:	23c0      	movs	r3, #192	; 0xc0
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d10a      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027bc:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	029b      	lsls	r3, r3, #10
 80027c4:	401a      	ands	r2, r3
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	029b      	lsls	r3, r3, #10
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d101      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0ac      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80027d2:	4b58      	ldr	r3, [pc, #352]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80027d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d6:	23c0      	movs	r3, #192	; 0xc0
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	4013      	ands	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d03b      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	23c0      	movs	r3, #192	; 0xc0
 80027ea:	029b      	lsls	r3, r3, #10
 80027ec:	4013      	ands	r3, r2
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d033      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2220      	movs	r2, #32
 80027fa:	4013      	ands	r3, r2
 80027fc:	d02e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027fe:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	4a4e      	ldr	r2, [pc, #312]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002808:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800280a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800280c:	4b49      	ldr	r3, [pc, #292]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	0309      	lsls	r1, r1, #12
 8002812:	430a      	orrs	r2, r1
 8002814:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800281c:	4948      	ldr	r1, [pc, #288]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800281e:	400a      	ands	r2, r1
 8002820:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4013      	ands	r3, r2
 8002830:	d014      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe ff43 	bl	80016bc <HAL_GetTick>
 8002836:	0003      	movs	r3, r0
 8002838:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283a:	e009      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe ff3e 	bl	80016bc <HAL_GetTick>
 8002840:	0002      	movs	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e06d      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002850:	4b38      	ldr	r3, [pc, #224]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4013      	ands	r3, r2
 800285a:	d0ef      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	23c0      	movs	r3, #192	; 0xc0
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	401a      	ands	r2, r3
 8002866:	23c0      	movs	r3, #192	; 0xc0
 8002868:	029b      	lsls	r3, r3, #10
 800286a:	429a      	cmp	r2, r3
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800286e:	4b31      	ldr	r3, [pc, #196]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a35      	ldr	r2, [pc, #212]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	23c0      	movs	r3, #192	; 0xc0
 800287e:	039b      	lsls	r3, r3, #14
 8002880:	401a      	ands	r2, r3
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800288a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	23c0      	movs	r3, #192	; 0xc0
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	401a      	ands	r2, r3
 8002896:	4b27      	ldr	r3, [pc, #156]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002898:	430a      	orrs	r2, r1
 800289a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289c:	2317      	movs	r3, #23
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028ac:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	220c      	movs	r2, #12
 80028c2:	4393      	bics	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2204      	movs	r2, #4
 80028d6:	4013      	ands	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2208      	movs	r2, #8
 80028f4:	4013      	ands	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002908:	430a      	orrs	r2, r1
 800290a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	4013      	ands	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002926:	430a      	orrs	r2, r1
 8002928:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b006      	add	sp, #24
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	fffcffff 	.word	0xfffcffff
 8002940:	fff7ffff 	.word	0xfff7ffff
 8002944:	00001388 	.word	0x00001388
 8002948:	ffcfffff 	.word	0xffcfffff
 800294c:	efffffff 	.word	0xefffffff
 8002950:	fffff3ff 	.word	0xfffff3ff
 8002954:	ffffcfff 	.word	0xffffcfff
 8002958:	fff3ffff 	.word	0xfff3ffff

0800295c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e044      	b.n	80029f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2274      	movs	r2, #116	; 0x74
 800297a:	2100      	movs	r1, #0
 800297c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f7fe fd6f 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2224      	movs	r2, #36	; 0x24
 800298a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2101      	movs	r1, #1
 8002998:	438a      	bics	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f8d8 	bl	8002b54 <UART_SetConfig>
 80029a4:	0003      	movs	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e024      	b.n	80029f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 fb2d 	bl	8003018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	490d      	ldr	r1, [pc, #52]	; (8002a00 <HAL_UART_Init+0xa4>)
 80029ca:	400a      	ands	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	212a      	movs	r1, #42	; 0x2a
 80029da:	438a      	bics	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2101      	movs	r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 fbc5 	bl	8003180 <UART_CheckIdleState>
 80029f6:	0003      	movs	r3, r0
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	ffffb7ff 	.word	0xffffb7ff

08002a04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	1dbb      	adds	r3, r7, #6
 8002a12:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d000      	beq.n	8002a1e <HAL_UART_Transmit+0x1a>
 8002a1c:	e095      	b.n	8002b4a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_UART_Transmit+0x28>
 8002a24:	1dbb      	adds	r3, r7, #6
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e08d      	b.n	8002b4c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	015b      	lsls	r3, r3, #5
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d109      	bne.n	8002a50 <HAL_UART_Transmit+0x4c>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d001      	beq.n	8002a50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e07d      	b.n	8002b4c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2274      	movs	r2, #116	; 0x74
 8002a54:	5c9b      	ldrb	r3, [r3, r2]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Transmit+0x5a>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e076      	b.n	8002b4c <HAL_UART_Transmit+0x148>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2274      	movs	r2, #116	; 0x74
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2221      	movs	r2, #33	; 0x21
 8002a72:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fe22 	bl	80016bc <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1dba      	adds	r2, r7, #6
 8002a80:	2150      	movs	r1, #80	; 0x50
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1dba      	adds	r2, r7, #6
 8002a8a:	2152      	movs	r1, #82	; 0x52
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	015b      	lsls	r3, r3, #5
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d108      	bne.n	8002aae <HAL_UART_Transmit+0xaa>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e003      	b.n	8002ab6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2274      	movs	r2, #116	; 0x74
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002abe:	e02c      	b.n	8002b1a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	0013      	movs	r3, r2
 8002aca:	2200      	movs	r2, #0
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	f000 fb9f 	bl	8003210 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e038      	b.n	8002b4c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	05d2      	lsls	r2, r2, #23
 8002aec:	0dd2      	lsrs	r2, r2, #23
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	3302      	adds	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e007      	b.n	8002b08 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2252      	movs	r2, #82	; 0x52
 8002b0c:	5a9b      	ldrh	r3, [r3, r2]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b299      	uxth	r1, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2252      	movs	r2, #82	; 0x52
 8002b18:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2252      	movs	r2, #82	; 0x52
 8002b1e:	5a9b      	ldrh	r3, [r3, r2]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1cc      	bne.n	8002ac0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	0013      	movs	r3, r2
 8002b30:	2200      	movs	r2, #0
 8002b32:	2140      	movs	r1, #64	; 0x40
 8002b34:	f000 fb6c 	bl	8003210 <UART_WaitOnFlagUntilTimeout>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e005      	b.n	8002b4c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b008      	add	sp, #32
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b5c:	231a      	movs	r3, #26
 8002b5e:	2218      	movs	r2, #24
 8002b60:	4694      	mov	ip, r2
 8002b62:	44bc      	add	ip, r7
 8002b64:	4463      	add	r3, ip
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4abc      	ldr	r2, [pc, #752]	; (8002e7c <UART_SetConfig+0x328>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4ab8      	ldr	r2, [pc, #736]	; (8002e80 <UART_SetConfig+0x32c>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4ab2      	ldr	r2, [pc, #712]	; (8002e84 <UART_SetConfig+0x330>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d004      	beq.n	8002bca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4aad      	ldr	r2, [pc, #692]	; (8002e88 <UART_SetConfig+0x334>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4aa9      	ldr	r2, [pc, #676]	; (8002e8c <UART_SetConfig+0x338>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d136      	bne.n	8002c58 <UART_SetConfig+0x104>
 8002bea:	4ba9      	ldr	r3, [pc, #676]	; (8002e90 <UART_SetConfig+0x33c>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	220c      	movs	r2, #12
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	d020      	beq.n	8002c38 <UART_SetConfig+0xe4>
 8002bf6:	d827      	bhi.n	8002c48 <UART_SetConfig+0xf4>
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d00d      	beq.n	8002c18 <UART_SetConfig+0xc4>
 8002bfc:	d824      	bhi.n	8002c48 <UART_SetConfig+0xf4>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <UART_SetConfig+0xb4>
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d010      	beq.n	8002c28 <UART_SetConfig+0xd4>
 8002c06:	e01f      	b.n	8002c48 <UART_SetConfig+0xf4>
 8002c08:	231b      	movs	r3, #27
 8002c0a:	2218      	movs	r2, #24
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	44bc      	add	ip, r7
 8002c10:	4463      	add	r3, ip
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e06f      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002c18:	231b      	movs	r3, #27
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	4694      	mov	ip, r2
 8002c1e:	44bc      	add	ip, r7
 8002c20:	4463      	add	r3, ip
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e067      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002c28:	231b      	movs	r3, #27
 8002c2a:	2218      	movs	r2, #24
 8002c2c:	4694      	mov	ip, r2
 8002c2e:	44bc      	add	ip, r7
 8002c30:	4463      	add	r3, ip
 8002c32:	2204      	movs	r2, #4
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e05f      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002c38:	231b      	movs	r3, #27
 8002c3a:	2218      	movs	r2, #24
 8002c3c:	4694      	mov	ip, r2
 8002c3e:	44bc      	add	ip, r7
 8002c40:	4463      	add	r3, ip
 8002c42:	2208      	movs	r2, #8
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e057      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002c48:	231b      	movs	r3, #27
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	4694      	mov	ip, r2
 8002c4e:	44bc      	add	ip, r7
 8002c50:	4463      	add	r3, ip
 8002c52:	2210      	movs	r2, #16
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e04f      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a89      	ldr	r2, [pc, #548]	; (8002e84 <UART_SetConfig+0x330>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d143      	bne.n	8002cea <UART_SetConfig+0x196>
 8002c62:	4b8b      	ldr	r3, [pc, #556]	; (8002e90 <UART_SetConfig+0x33c>)
 8002c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	22c0      	movs	r2, #192	; 0xc0
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d02a      	beq.n	8002cca <UART_SetConfig+0x176>
 8002c74:	22c0      	movs	r2, #192	; 0xc0
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d82e      	bhi.n	8002cda <UART_SetConfig+0x186>
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d012      	beq.n	8002caa <UART_SetConfig+0x156>
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d826      	bhi.n	8002cda <UART_SetConfig+0x186>
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <UART_SetConfig+0x146>
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	00d2      	lsls	r2, r2, #3
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d010      	beq.n	8002cba <UART_SetConfig+0x166>
 8002c98:	e01f      	b.n	8002cda <UART_SetConfig+0x186>
 8002c9a:	231b      	movs	r3, #27
 8002c9c:	2218      	movs	r2, #24
 8002c9e:	4694      	mov	ip, r2
 8002ca0:	44bc      	add	ip, r7
 8002ca2:	4463      	add	r3, ip
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e026      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002caa:	231b      	movs	r3, #27
 8002cac:	2218      	movs	r2, #24
 8002cae:	4694      	mov	ip, r2
 8002cb0:	44bc      	add	ip, r7
 8002cb2:	4463      	add	r3, ip
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e01e      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002cba:	231b      	movs	r3, #27
 8002cbc:	2218      	movs	r2, #24
 8002cbe:	4694      	mov	ip, r2
 8002cc0:	44bc      	add	ip, r7
 8002cc2:	4463      	add	r3, ip
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e016      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002cca:	231b      	movs	r3, #27
 8002ccc:	2218      	movs	r2, #24
 8002cce:	4694      	mov	ip, r2
 8002cd0:	44bc      	add	ip, r7
 8002cd2:	4463      	add	r3, ip
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e00e      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002cda:	231b      	movs	r3, #27
 8002cdc:	2218      	movs	r2, #24
 8002cde:	4694      	mov	ip, r2
 8002ce0:	44bc      	add	ip, r7
 8002ce2:	4463      	add	r3, ip
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e006      	b.n	8002cf8 <UART_SetConfig+0x1a4>
 8002cea:	231b      	movs	r3, #27
 8002cec:	2218      	movs	r2, #24
 8002cee:	4694      	mov	ip, r2
 8002cf0:	44bc      	add	ip, r7
 8002cf2:	4463      	add	r3, ip
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <UART_SetConfig+0x330>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d000      	beq.n	8002d04 <UART_SetConfig+0x1b0>
 8002d02:	e088      	b.n	8002e16 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d04:	231b      	movs	r3, #27
 8002d06:	2218      	movs	r2, #24
 8002d08:	4694      	mov	ip, r2
 8002d0a:	44bc      	add	ip, r7
 8002d0c:	4463      	add	r3, ip
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d01d      	beq.n	8002d50 <UART_SetConfig+0x1fc>
 8002d14:	dc20      	bgt.n	8002d58 <UART_SetConfig+0x204>
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d015      	beq.n	8002d46 <UART_SetConfig+0x1f2>
 8002d1a:	dc1d      	bgt.n	8002d58 <UART_SetConfig+0x204>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <UART_SetConfig+0x1d2>
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d005      	beq.n	8002d30 <UART_SetConfig+0x1dc>
 8002d24:	e018      	b.n	8002d58 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d26:	f7ff fcc7 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d2e:	e01d      	b.n	8002d6c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d30:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <UART_SetConfig+0x33c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2210      	movs	r2, #16
 8002d36:	4013      	ands	r3, r2
 8002d38:	d002      	beq.n	8002d40 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d3a:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <UART_SetConfig+0x340>)
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d3e:	e015      	b.n	8002d6c <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002d40:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <UART_SetConfig+0x344>)
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d44:	e012      	b.n	8002d6c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d46:	f7ff fc07 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d4e:	e00d      	b.n	8002d6c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d56:	e009      	b.n	8002d6c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d5c:	231a      	movs	r3, #26
 8002d5e:	2218      	movs	r2, #24
 8002d60:	4694      	mov	ip, r2
 8002d62:	44bc      	add	ip, r7
 8002d64:	4463      	add	r3, ip
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
        break;
 8002d6a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d100      	bne.n	8002d74 <UART_SetConfig+0x220>
 8002d72:	e139      	b.n	8002fe8 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	0013      	movs	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d305      	bcc.n	8002d90 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d907      	bls.n	8002da0 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002d90:	231a      	movs	r3, #26
 8002d92:	2218      	movs	r2, #24
 8002d94:	4694      	mov	ip, r2
 8002d96:	44bc      	add	ip, r7
 8002d98:	4463      	add	r3, ip
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e123      	b.n	8002fe8 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	000b      	movs	r3, r1
 8002dae:	0e1b      	lsrs	r3, r3, #24
 8002db0:	0010      	movs	r0, r2
 8002db2:	0205      	lsls	r5, r0, #8
 8002db4:	431d      	orrs	r5, r3
 8002db6:	000b      	movs	r3, r1
 8002db8:	021c      	lsls	r4, r3, #8
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68b8      	ldr	r0, [r7, #8]
 8002dc8:	68f9      	ldr	r1, [r7, #12]
 8002dca:	1900      	adds	r0, r0, r4
 8002dcc:	4169      	adcs	r1, r5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f7fd fa20 	bl	8000220 <__aeabi_uldivmod>
 8002de0:	0002      	movs	r2, r0
 8002de2:	000b      	movs	r3, r1
 8002de4:	0013      	movs	r3, r2
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	23c0      	movs	r3, #192	; 0xc0
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d309      	bcc.n	8002e06 <UART_SetConfig+0x2b2>
 8002df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	035b      	lsls	r3, r3, #13
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d204      	bcs.n	8002e06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	e0f0      	b.n	8002fe8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002e06:	231a      	movs	r3, #26
 8002e08:	2218      	movs	r2, #24
 8002e0a:	4694      	mov	ip, r2
 8002e0c:	44bc      	add	ip, r7
 8002e0e:	4463      	add	r3, ip
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e0e8      	b.n	8002fe8 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d000      	beq.n	8002e24 <UART_SetConfig+0x2d0>
 8002e22:	e087      	b.n	8002f34 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002e24:	231b      	movs	r3, #27
 8002e26:	2218      	movs	r2, #24
 8002e28:	4694      	mov	ip, r2
 8002e2a:	44bc      	add	ip, r7
 8002e2c:	4463      	add	r3, ip
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d835      	bhi.n	8002ea0 <UART_SetConfig+0x34c>
 8002e34:	009a      	lsls	r2, r3, #2
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <UART_SetConfig+0x348>)
 8002e38:	18d3      	adds	r3, r2, r3
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e3e:	f7ff fc3b 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8002e42:	0003      	movs	r3, r0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e46:	e035      	b.n	8002eb4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e48:	f7ff fc4c 	bl	80026e4 <HAL_RCC_GetPCLK2Freq>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e50:	e030      	b.n	8002eb4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <UART_SetConfig+0x33c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2210      	movs	r2, #16
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d002      	beq.n	8002e62 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <UART_SetConfig+0x340>)
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e60:	e028      	b.n	8002eb4 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <UART_SetConfig+0x344>)
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e66:	e025      	b.n	8002eb4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e68:	f7ff fb76 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e70:	e020      	b.n	8002eb4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e78:	e01c      	b.n	8002eb4 <UART_SetConfig+0x360>
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	efff69f3 	.word	0xefff69f3
 8002e80:	ffffcfff 	.word	0xffffcfff
 8002e84:	40004800 	.word	0x40004800
 8002e88:	fffff4ff 	.word	0xfffff4ff
 8002e8c:	40004400 	.word	0x40004400
 8002e90:	40021000 	.word	0x40021000
 8002e94:	003d0900 	.word	0x003d0900
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	08003474 	.word	0x08003474
      default:
        pclk = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ea4:	231a      	movs	r3, #26
 8002ea6:	2218      	movs	r2, #24
 8002ea8:	4694      	mov	ip, r2
 8002eaa:	44bc      	add	ip, r7
 8002eac:	4463      	add	r3, ip
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
        break;
 8002eb2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d100      	bne.n	8002ebc <UART_SetConfig+0x368>
 8002eba:	e095      	b.n	8002fe8 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	005a      	lsls	r2, r3, #1
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	18d2      	adds	r2, r2, r3
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0019      	movs	r1, r3
 8002ece:	0010      	movs	r0, r2
 8002ed0:	f7fd f91a 	bl	8000108 <__udivsi3>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	d921      	bls.n	8002f24 <UART_SetConfig+0x3d0>
 8002ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	025b      	lsls	r3, r3, #9
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d21c      	bcs.n	8002f24 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	200e      	movs	r0, #14
 8002ef0:	2418      	movs	r4, #24
 8002ef2:	193b      	adds	r3, r7, r4
 8002ef4:	181b      	adds	r3, r3, r0
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	438a      	bics	r2, r1
 8002efa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2207      	movs	r2, #7
 8002f04:	4013      	ands	r3, r2
 8002f06:	b299      	uxth	r1, r3
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	181b      	adds	r3, r3, r0
 8002f0c:	193a      	adds	r2, r7, r4
 8002f0e:	1812      	adds	r2, r2, r0
 8002f10:	8812      	ldrh	r2, [r2, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	193a      	adds	r2, r7, r4
 8002f1c:	1812      	adds	r2, r2, r0
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	e061      	b.n	8002fe8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002f24:	231a      	movs	r3, #26
 8002f26:	2218      	movs	r2, #24
 8002f28:	4694      	mov	ip, r2
 8002f2a:	44bc      	add	ip, r7
 8002f2c:	4463      	add	r3, ip
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e059      	b.n	8002fe8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f34:	231b      	movs	r3, #27
 8002f36:	2218      	movs	r2, #24
 8002f38:	4694      	mov	ip, r2
 8002f3a:	44bc      	add	ip, r7
 8002f3c:	4463      	add	r3, ip
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d822      	bhi.n	8002f8a <UART_SetConfig+0x436>
 8002f44:	009a      	lsls	r2, r3, #2
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <UART_SetConfig+0x4b4>)
 8002f48:	18d3      	adds	r3, r2, r3
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f4e:	f7ff fbb3 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8002f52:	0003      	movs	r3, r0
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f56:	e022      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f58:	f7ff fbc4 	bl	80026e4 <HAL_RCC_GetPCLK2Freq>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f60:	e01d      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <UART_SetConfig+0x4b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2210      	movs	r2, #16
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d002      	beq.n	8002f72 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <UART_SetConfig+0x4bc>)
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f70:	e015      	b.n	8002f9e <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002f72:	4b28      	ldr	r3, [pc, #160]	; (8003014 <UART_SetConfig+0x4c0>)
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f76:	e012      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f78:	f7ff faee 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f80:	e00d      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f88:	e009      	b.n	8002f9e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f8e:	231a      	movs	r3, #26
 8002f90:	2218      	movs	r2, #24
 8002f92:	4694      	mov	ip, r2
 8002f94:	44bc      	add	ip, r7
 8002f96:	4463      	add	r3, ip
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
        break;
 8002f9c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d021      	beq.n	8002fe8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	085a      	lsrs	r2, r3, #1
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	18d2      	adds	r2, r2, r3
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	f7fd f8a7 	bl	8000108 <__udivsi3>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc2:	2b0f      	cmp	r3, #15
 8002fc4:	d909      	bls.n	8002fda <UART_SetConfig+0x486>
 8002fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	025b      	lsls	r3, r3, #9
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d204      	bcs.n	8002fda <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	e006      	b.n	8002fe8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002fda:	231a      	movs	r3, #26
 8002fdc:	2218      	movs	r2, #24
 8002fde:	4694      	mov	ip, r2
 8002fe0:	44bc      	add	ip, r7
 8002fe2:	4463      	add	r3, ip
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2200      	movs	r2, #0
 8002fec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ff4:	231a      	movs	r3, #26
 8002ff6:	2218      	movs	r2, #24
 8002ff8:	4694      	mov	ip, r2
 8002ffa:	44bc      	add	ip, r7
 8002ffc:	4463      	add	r3, ip
 8002ffe:	781b      	ldrb	r3, [r3, #0]
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b00e      	add	sp, #56	; 0x38
 8003006:	bdb0      	pop	{r4, r5, r7, pc}
 8003008:	08003498 	.word	0x08003498
 800300c:	40021000 	.word	0x40021000
 8003010:	003d0900 	.word	0x003d0900
 8003014:	00f42400 	.word	0x00f42400

08003018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	2201      	movs	r2, #1
 8003026:	4013      	ands	r3, r2
 8003028:	d00b      	beq.n	8003042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a4a      	ldr	r2, [pc, #296]	; (800315c <UART_AdvFeatureConfig+0x144>)
 8003032:	4013      	ands	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2202      	movs	r2, #2
 8003048:	4013      	ands	r3, r2
 800304a:	d00b      	beq.n	8003064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4a43      	ldr	r2, [pc, #268]	; (8003160 <UART_AdvFeatureConfig+0x148>)
 8003054:	4013      	ands	r3, r2
 8003056:	0019      	movs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2204      	movs	r2, #4
 800306a:	4013      	ands	r3, r2
 800306c:	d00b      	beq.n	8003086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <UART_AdvFeatureConfig+0x14c>)
 8003076:	4013      	ands	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2208      	movs	r2, #8
 800308c:	4013      	ands	r3, r2
 800308e:	d00b      	beq.n	80030a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <UART_AdvFeatureConfig+0x150>)
 8003098:	4013      	ands	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2210      	movs	r2, #16
 80030ae:	4013      	ands	r3, r2
 80030b0:	d00b      	beq.n	80030ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a2c      	ldr	r2, [pc, #176]	; (800316c <UART_AdvFeatureConfig+0x154>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2220      	movs	r2, #32
 80030d0:	4013      	ands	r3, r2
 80030d2:	d00b      	beq.n	80030ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	4a25      	ldr	r2, [pc, #148]	; (8003170 <UART_AdvFeatureConfig+0x158>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	4013      	ands	r3, r2
 80030f4:	d01d      	beq.n	8003132 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <UART_AdvFeatureConfig+0x15c>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	035b      	lsls	r3, r3, #13
 8003116:	429a      	cmp	r2, r3
 8003118:	d10b      	bne.n	8003132 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <UART_AdvFeatureConfig+0x160>)
 8003122:	4013      	ands	r3, r2
 8003124:	0019      	movs	r1, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	4013      	ands	r3, r2
 800313a:	d00b      	beq.n	8003154 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <UART_AdvFeatureConfig+0x164>)
 8003144:	4013      	ands	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  }
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}
 800315c:	fffdffff 	.word	0xfffdffff
 8003160:	fffeffff 	.word	0xfffeffff
 8003164:	fffbffff 	.word	0xfffbffff
 8003168:	ffff7fff 	.word	0xffff7fff
 800316c:	ffffefff 	.word	0xffffefff
 8003170:	ffffdfff 	.word	0xffffdfff
 8003174:	ffefffff 	.word	0xffefffff
 8003178:	ff9fffff 	.word	0xff9fffff
 800317c:	fff7ffff 	.word	0xfff7ffff

08003180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	2100      	movs	r1, #0
 800318e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003190:	f7fe fa94 	bl	80016bc <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2208      	movs	r2, #8
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d10c      	bne.n	80031c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0391      	lsls	r1, r2, #14
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <UART_CheckIdleState+0x8c>)
 80031b0:	9200      	str	r2, [sp, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f000 f82c 	bl	8003210 <UART_WaitOnFlagUntilTimeout>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e021      	b.n	8003204 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d10c      	bne.n	80031e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	03d1      	lsls	r1, r2, #15
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4a0d      	ldr	r2, [pc, #52]	; (800320c <UART_CheckIdleState+0x8c>)
 80031d8:	9200      	str	r2, [sp, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	f000 f818 	bl	8003210 <UART_WaitOnFlagUntilTimeout>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d001      	beq.n	80031e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e00d      	b.n	8003204 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2274      	movs	r2, #116	; 0x74
 80031fe:	2100      	movs	r1, #0
 8003200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b004      	add	sp, #16
 800320a:	bd80      	pop	{r7, pc}
 800320c:	01ffffff 	.word	0x01ffffff

08003210 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b094      	sub	sp, #80	; 0x50
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003220:	e0a3      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	3301      	adds	r3, #1
 8003226:	d100      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003228:	e09f      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe fa47 	bl	80016bc <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <UART_WaitOnFlagUntilTimeout+0x30>
 800323a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323c:	2b00      	cmp	r3, #0
 800323e:	d13d      	bne.n	80032bc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003240:	f3ef 8310 	mrs	r3, PRIMASK
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003248:	647b      	str	r3, [r7, #68]	; 0x44
 800324a:	2301      	movs	r3, #1
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	f383 8810 	msr	PRIMASK, r3
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	494c      	ldr	r1, [pc, #304]	; (8003394 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003262:	400a      	ands	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	f383 8810 	msr	PRIMASK, r3
}
 8003270:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003272:	f3ef 8310 	mrs	r3, PRIMASK
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
 800327c:	2301      	movs	r3, #1
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	f383 8810 	msr	PRIMASK, r3
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	438a      	bics	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329e:	f383 8810 	msr	PRIMASK, r3
}
 80032a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2274      	movs	r2, #116	; 0x74
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e067      	b.n	800338c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2204      	movs	r2, #4
 80032c4:	4013      	ands	r3, r2
 80032c6:	d050      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	401a      	ands	r2, r3
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	429a      	cmp	r2, r3
 80032da:	d146      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ea:	613b      	str	r3, [r7, #16]
  return(result);
 80032ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f0:	2301      	movs	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4923      	ldr	r1, [pc, #140]	; (8003394 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003308:	400a      	ands	r2, r1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f383 8810 	msr	PRIMASK, r3
}
 8003316:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003318:	f3ef 8310 	mrs	r3, PRIMASK
 800331c:	61fb      	str	r3, [r7, #28]
  return(result);
 800331e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003320:	64bb      	str	r3, [r7, #72]	; 0x48
 8003322:	2301      	movs	r3, #1
 8003324:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2101      	movs	r1, #1
 800333a:	438a      	bics	r2, r1
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	2120      	movs	r1, #32
 800335c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2274      	movs	r2, #116	; 0x74
 8003362:	2100      	movs	r1, #0
 8003364:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e010      	b.n	800338c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	425a      	negs	r2, r3
 800337a:	4153      	adcs	r3, r2
 800337c:	b2db      	uxtb	r3, r3
 800337e:	001a      	movs	r2, r3
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d100      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003388:	e74b      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b014      	add	sp, #80	; 0x50
 8003392:	bd80      	pop	{r7, pc}
 8003394:	fffffe5f 	.word	0xfffffe5f

08003398 <__libc_init_array>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	2600      	movs	r6, #0
 800339c:	4d0c      	ldr	r5, [pc, #48]	; (80033d0 <__libc_init_array+0x38>)
 800339e:	4c0d      	ldr	r4, [pc, #52]	; (80033d4 <__libc_init_array+0x3c>)
 80033a0:	1b64      	subs	r4, r4, r5
 80033a2:	10a4      	asrs	r4, r4, #2
 80033a4:	42a6      	cmp	r6, r4
 80033a6:	d109      	bne.n	80033bc <__libc_init_array+0x24>
 80033a8:	2600      	movs	r6, #0
 80033aa:	f000 f821 	bl	80033f0 <_init>
 80033ae:	4d0a      	ldr	r5, [pc, #40]	; (80033d8 <__libc_init_array+0x40>)
 80033b0:	4c0a      	ldr	r4, [pc, #40]	; (80033dc <__libc_init_array+0x44>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	42a6      	cmp	r6, r4
 80033b8:	d105      	bne.n	80033c6 <__libc_init_array+0x2e>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	00b3      	lsls	r3, r6, #2
 80033be:	58eb      	ldr	r3, [r5, r3]
 80033c0:	4798      	blx	r3
 80033c2:	3601      	adds	r6, #1
 80033c4:	e7ee      	b.n	80033a4 <__libc_init_array+0xc>
 80033c6:	00b3      	lsls	r3, r6, #2
 80033c8:	58eb      	ldr	r3, [r5, r3]
 80033ca:	4798      	blx	r3
 80033cc:	3601      	adds	r6, #1
 80033ce:	e7f2      	b.n	80033b6 <__libc_init_array+0x1e>
 80033d0:	080034c4 	.word	0x080034c4
 80033d4:	080034c4 	.word	0x080034c4
 80033d8:	080034c4 	.word	0x080034c4
 80033dc:	080034c8 	.word	0x080034c8

080033e0 <memset>:
 80033e0:	0003      	movs	r3, r0
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d100      	bne.n	80033ea <memset+0xa>
 80033e8:	4770      	bx	lr
 80033ea:	7019      	strb	r1, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	e7f9      	b.n	80033e4 <memset+0x4>

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
