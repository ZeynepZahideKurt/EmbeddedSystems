
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a8  080048a8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080048b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200001f4  08004aa4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004aa4  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a642  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001982  00000000  00000000  0002a85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0002c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011861  00000000  00000000  0002d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000983f  00000000  00000000  0003ea81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066504  00000000  00000000  000482c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae7c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c0  00000000  00000000  000ae818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004664 	.word	0x08004664

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08004664 	.word	0x08004664

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <InputSDIO>:
int c;



void InputSDIO(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	0018      	movs	r0, r3
 80004ba:	2314      	movs	r3, #20
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f003 f92a 	bl	8003718 <memset>
  	    /* Check the parameters */
	GPIO_InitStruct.Pin = SDIO_Pin;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	00d2      	lsls	r2, r2, #3
 80004ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	1d3a      	adds	r2, r7, #4
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fb63 	bl	8001bac <HAL_GPIO_Init>
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b006      	add	sp, #24
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <OutputSDIO>:
void OutputSDIO(void){
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b08b      	sub	sp, #44	; 0x2c
 80004f4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <OutputSDIO+0xb8>)
 80004f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <OutputSDIO+0xb8>)
 80004fc:	2104      	movs	r1, #4
 80004fe:	430a      	orrs	r2, r1
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <OutputSDIO+0xb8>)
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	2204      	movs	r2, #4
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <OutputSDIO+0xb8>)
 8000510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <OutputSDIO+0xb8>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	430a      	orrs	r2, r1
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <OutputSDIO+0xb8>)
 800051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	4013      	ands	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <OutputSDIO+0xb8>)
 8000528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <OutputSDIO+0xb8>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <OutputSDIO+0xb8>)
 8000534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <OutputSDIO+0xb8>)
 8000540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <OutputSDIO+0xb8>)
 8000544:	2102      	movs	r1, #2
 8000546:	430a      	orrs	r2, r1
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <OutputSDIO+0xb8>)
 800054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054e:	2202      	movs	r2, #2
 8000550:	4013      	ands	r3, r2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	00d9      	lsls	r1, r3, #3
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	2200      	movs	r2, #0
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fcae 	bl	8001ec2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	2414      	movs	r4, #20
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	2314      	movs	r3, #20
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f003 f8d1 	bl	8003718 <memset>
  	GPIO_InitStruct.Pin = SDIO_Pin;
 8000576:	0021      	movs	r1, r4
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	00d2      	lsls	r2, r2, #3
 800057e:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2201      	movs	r2, #1
 8000584:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	187a      	adds	r2, r7, r1
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f001 fb06 	bl	8001bac <HAL_GPIO_Init>
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b00b      	add	sp, #44	; 0x2c
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	40021000 	.word	0x40021000

080005ac <OutputSDCK>:

void OutputSDCK(void){
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b08b      	sub	sp, #44	; 0x2c
 80005b0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <OutputSDCK+0xb8>)
 80005b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <OutputSDCK+0xb8>)
 80005b8:	2104      	movs	r1, #4
 80005ba:	430a      	orrs	r2, r1
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <OutputSDCK+0xb8>)
 80005c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c2:	2204      	movs	r2, #4
 80005c4:	4013      	ands	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <OutputSDCK+0xb8>)
 80005cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <OutputSDCK+0xb8>)
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	430a      	orrs	r2, r1
 80005d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <OutputSDCK+0xb8>)
 80005d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	4013      	ands	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <OutputSDCK+0xb8>)
 80005e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <OutputSDCK+0xb8>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <OutputSDCK+0xb8>)
 80005f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <OutputSDCK+0xb8>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <OutputSDCK+0xb8>)
 8000600:	2102      	movs	r1, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <OutputSDCK+0xb8>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	0099      	lsls	r1, r3, #2
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2200      	movs	r2, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fc50 	bl	8001ec2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 f873 	bl	8003718 <memset>
  	GPIO_InitStruct.Pin = SCLK_Pin;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2201      	movs	r2, #1
 8000640:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	187a      	adds	r2, r7, r1
 8000650:	23a0      	movs	r3, #160	; 0xa0
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f001 faa8 	bl	8001bac <HAL_GPIO_Init>

}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b00b      	add	sp, #44	; 0x2c
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <OutputFCSB>:

void OutputFCSB(void){
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	; 0x2c
 800066c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <OutputFCSB+0xb4>)
 8000670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <OutputFCSB+0xb4>)
 8000674:	2104      	movs	r1, #4
 8000676:	430a      	orrs	r2, r1
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <OutputFCSB+0xb4>)
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <OutputFCSB+0xb4>)
 8000688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <OutputFCSB+0xb4>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	430a      	orrs	r2, r1
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <OutputFCSB+0xb4>)
 8000694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	4013      	ands	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <OutputFCSB+0xb4>)
 80006a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <OutputFCSB+0xb4>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <OutputFCSB+0xb4>)
 80006ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <OutputFCSB+0xb4>)
 80006b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <OutputFCSB+0xb4>)
 80006bc:	2102      	movs	r1, #2
 80006be:	430a      	orrs	r2, r1
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <OutputFCSB+0xb4>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	2202      	movs	r2, #2
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2200      	movs	r2, #0
 80006d4:	2104      	movs	r1, #4
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fbf3 	bl	8001ec2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	2414      	movs	r4, #20
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	2314      	movs	r3, #20
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f003 f816 	bl	8003718 <memset>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2204      	movs	r2, #4
 80006f2:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	187a      	adds	r2, r7, r1
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fa4c 	bl	8001bac <HAL_GPIO_Init>


}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b00b      	add	sp, #44	; 0x2c
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <OutputCSB>:

void OutputCSB(void){
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <OutputCSB+0xb4>)
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <OutputCSB+0xb4>)
 800072c:	2104      	movs	r1, #4
 800072e:	430a      	orrs	r2, r1
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <OutputCSB+0xb4>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	2204      	movs	r2, #4
 8000738:	4013      	ands	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <OutputCSB+0xb4>)
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <OutputCSB+0xb4>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <OutputCSB+0xb4>)
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	4013      	ands	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <OutputCSB+0xb4>)
 8000758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <OutputCSB+0xb4>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <OutputCSB+0xb4>)
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <OutputCSB+0xb4>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <OutputCSB+0xb4>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <OutputCSB+0xb4>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2202      	movs	r2, #2
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fb97 	bl	8001ec2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	2414      	movs	r4, #20
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	2314      	movs	r3, #20
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f002 ffba 	bl	8003718 <memset>
  	GPIO_InitStruct.Pin = CSB_Pin;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2202      	movs	r2, #2
 80007aa:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	187a      	adds	r2, r7, r1
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f9f0 	bl	8001bac <HAL_GPIO_Init>
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b00b      	add	sp, #44	; 0x2c
 80007d2:	bd90      	pop	{r4, r7, pc}
 80007d4:	40021000 	.word	0x40021000

080007d8 <vSpi3Init>:
**Name:   vSpi3Init
**Func:   Init Spi-3 Config
**Note:
**********************************************************/
void vSpi3Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  OutputCSB();
 80007dc:	f7ff ffa0 	bl	8000720 <OutputCSB>
  OutputFCSB();
 80007e0:	f7ff ff42 	bl	8000668 <OutputFCSB>
  OutputSDCK();
 80007e4:	f7ff fee2 	bl	80005ac <OutputSDCK>
  OutputSDIO();
 80007e8:	f7ff fe82 	bl	80004f0 <OutputSDIO>

  SetCSB();
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	05db      	lsls	r3, r3, #23
 80007f0:	2201      	movs	r2, #1
 80007f2:	2102      	movs	r1, #2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fb64 	bl	8001ec2 <HAL_GPIO_WritePin>
  SetFCSB();
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	2201      	movs	r2, #1
 8000800:	2104      	movs	r1, #4
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fb5d 	bl	8001ec2 <HAL_GPIO_WritePin>
  SetSDIO();
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	00d9      	lsls	r1, r3, #3
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	2201      	movs	r2, #1
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fb55 	bl	8001ec2 <HAL_GPIO_WritePin>
  ClrSDCK();
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	0099      	lsls	r1, r3, #2
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2200      	movs	r2, #0
 8000822:	0018      	movs	r0, r3
 8000824:	f001 fb4d 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <vSpi3WriteByte>:
**Func:   SPI-3 send one byte
**Input:
**Output:
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	0002      	movs	r2, r0
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	701a      	strb	r2, [r3, #0]

  byte bitcnt;

  SetFCSB();        //FCSB = 1;
 800083c:	23a0      	movs	r3, #160	; 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2201      	movs	r2, #1
 8000842:	2104      	movs	r1, #4
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fb3c 	bl	8001ec2 <HAL_GPIO_WritePin>
  OutputSDIO();     //SDA output mode
 800084a:	f7ff fe51 	bl	80004f0 <OutputSDIO>
  SetSDIO();        //    output 1
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	00d9      	lsls	r1, r3, #3
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2201      	movs	r2, #1
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fb32 	bl	8001ec2 <HAL_GPIO_WritePin>
  ClrSDCK();
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	0099      	lsls	r1, r3, #2
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	2200      	movs	r2, #0
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fb2a 	bl	8001ec2 <HAL_GPIO_WritePin>
  ClrCSB();
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	0018      	movs	r0, r3
 8000878:	f001 fb23 	bl	8001ec2 <HAL_GPIO_WritePin>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 800087c:	230f      	movs	r3, #15
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	2208      	movs	r2, #8
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	e05d      	b.n	8000942 <vSpi3WriteByte+0x112>
    {
	  HAL_UART_Transmit( &hlpuart1, "buradaa18\r\n",11, 100);
 8000886:	493b      	ldr	r1, [pc, #236]	; (8000974 <vSpi3WriteByte+0x144>)
 8000888:	483b      	ldr	r0, [pc, #236]	; (8000978 <vSpi3WriteByte+0x148>)
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	220b      	movs	r2, #11
 800088e:	f002 fa4f 	bl	8002d30 <HAL_UART_Transmit>
	  ClrSDCK();
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	0099      	lsls	r1, r3, #2
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fb10 	bl	8001ec2 <HAL_GPIO_WritePin>

	  if(dat&0x80){
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	da0e      	bge.n	80008ca <vSpi3WriteByte+0x9a>
		  SetSDIO();
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	00d9      	lsls	r1, r3, #3
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	2201      	movs	r2, #1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fb03 	bl	8001ec2 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit( &hlpuart1, "buradaa19\r\n",11, 100);}
 80008bc:	492f      	ldr	r1, [pc, #188]	; (800097c <vSpi3WriteByte+0x14c>)
 80008be:	482e      	ldr	r0, [pc, #184]	; (8000978 <vSpi3WriteByte+0x148>)
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	220b      	movs	r2, #11
 80008c4:	f002 fa34 	bl	8002d30 <HAL_UART_Transmit>
 80008c8:	e00d      	b.n	80008e6 <vSpi3WriteByte+0xb6>
	  else{
		  ClrSDIO();
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	00d9      	lsls	r1, r3, #3
 80008ce:	23a0      	movs	r3, #160	; 0xa0
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2200      	movs	r2, #0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 faf4 	bl	8001ec2 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit( &hlpuart1, "buradaa20\r\n",11, 100);
 80008da:	4929      	ldr	r1, [pc, #164]	; (8000980 <vSpi3WriteByte+0x150>)
 80008dc:	4826      	ldr	r0, [pc, #152]	; (8000978 <vSpi3WriteByte+0x148>)
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	220b      	movs	r2, #11
 80008e2:	f002 fa25 	bl	8002d30 <HAL_UART_Transmit>
	  }
	  HAL_UART_Transmit( &hlpuart1, "buradaa21\r\n",11, 100);
 80008e6:	4927      	ldr	r1, [pc, #156]	; (8000984 <vSpi3WriteByte+0x154>)
 80008e8:	4823      	ldr	r0, [pc, #140]	; (8000978 <vSpi3WriteByte+0x148>)
 80008ea:	2364      	movs	r3, #100	; 0x64
 80008ec:	220b      	movs	r2, #11
 80008ee:	f002 fa1f 	bl	8002d30 <HAL_UART_Transmit>
	  SetSDCK();
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	0099      	lsls	r1, r3, #2
 80008f6:	23a0      	movs	r3, #160	; 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2201      	movs	r2, #1
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 fae0 	bl	8001ec2 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit( &hlpuart1, "buradaa22\r\n",11, 100);
 8000902:	4921      	ldr	r1, [pc, #132]	; (8000988 <vSpi3WriteByte+0x158>)
 8000904:	481c      	ldr	r0, [pc, #112]	; (8000978 <vSpi3WriteByte+0x148>)
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	220b      	movs	r2, #11
 800090a:	f002 fa11 	bl	8002d30 <HAL_UART_Transmit>
	  dat <<= 1;
 800090e:	1dfa      	adds	r2, r7, #7
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	18db      	adds	r3, r3, r3
 8000916:	7013      	strb	r3, [r2, #0]
	  HAL_UART_Transmit( &hlpuart1, "buradaa23\r\n",11, 100);
 8000918:	491c      	ldr	r1, [pc, #112]	; (800098c <vSpi3WriteByte+0x15c>)
 800091a:	4817      	ldr	r0, [pc, #92]	; (8000978 <vSpi3WriteByte+0x148>)
 800091c:	2364      	movs	r3, #100	; 0x64
 800091e:	220b      	movs	r2, #11
 8000920:	f002 fa06 	bl	8002d30 <HAL_UART_Transmit>
	  HAL_Delay_us(SPI3_SPEED);
 8000924:	2001      	movs	r0, #1
 8000926:	f001 f873 	bl	8001a10 <HAL_Delay_us>
	  HAL_UART_Transmit( &hlpuart1, "buradaa2\r\n",11, 100);
 800092a:	4919      	ldr	r1, [pc, #100]	; (8000990 <vSpi3WriteByte+0x160>)
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <vSpi3WriteByte+0x148>)
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	220b      	movs	r2, #11
 8000932:	f002 f9fd 	bl	8002d30 <HAL_UART_Transmit>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000936:	210f      	movs	r1, #15
 8000938:	187b      	adds	r3, r7, r1
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	187b      	adds	r3, r7, r1
 800093e:	3a01      	subs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	230f      	movs	r3, #15
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d19c      	bne.n	8000886 <vSpi3WriteByte+0x56>

    }

  ClrSDCK();
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	0099      	lsls	r1, r3, #2
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2200      	movs	r2, #0
 8000956:	0018      	movs	r0, r3
 8000958:	f001 fab3 	bl	8001ec2 <HAL_GPIO_WritePin>
  SetSDIO();
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	00d9      	lsls	r1, r3, #3
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2201      	movs	r2, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f001 faab 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b004      	add	sp, #16
 8000972:	bd80      	pop	{r7, pc}
 8000974:	0800467c 	.word	0x0800467c
 8000978:	20000220 	.word	0x20000220
 800097c:	08004688 	.word	0x08004688
 8000980:	08004694 	.word	0x08004694
 8000984:	080046a0 	.word	0x080046a0
 8000988:	080046ac 	.word	0x080046ac
 800098c:	080046b8 	.word	0x080046b8
 8000990:	080046c4 	.word	0x080046c4

08000994 <bSpi3ReadByte>:
**Func:   SPI-3 read one byte
**Input:
**Output:
**********************************************************/
byte bSpi3ReadByte(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  byte RdPara = 0;
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
  byte bitcnt;

  ClrCSB();
 80009a0:	23a0      	movs	r3, #160	; 0xa0
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	2200      	movs	r2, #0
 80009a6:	2102      	movs	r1, #2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 fa8a 	bl	8001ec2 <HAL_GPIO_WritePin>
  InputSDIO();
 80009ae:	f7ff fd7f 	bl	80004b0 <InputSDIO>

  for(bitcnt=8; bitcnt!=0; bitcnt--)
 80009b2:	1dbb      	adds	r3, r7, #6
 80009b4:	2208      	movs	r2, #8
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	e04a      	b.n	8000a50 <bSpi3ReadByte+0xbc>
    {
    ClrSDCK();
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	0099      	lsls	r1, r3, #2
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2200      	movs	r2, #0
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fa7c 	bl	8001ec2 <HAL_GPIO_WritePin>
    RdPara <<= 1;
 80009ca:	1dfa      	adds	r2, r7, #7
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	18db      	adds	r3, r3, r3
 80009d2:	7013      	strb	r3, [r2, #0]
    HAL_Delay_us(SPI3_SPEED);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f001 f81b 	bl	8001a10 <HAL_Delay_us>
    SetSDCK();
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	0099      	lsls	r1, r3, #2
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2201      	movs	r2, #1
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 fa6c 	bl	8001ec2 <HAL_GPIO_WritePin>
    HAL_Delay_us(SPI3_SPEED);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 f810 	bl	8001a10 <HAL_Delay_us>

    if(HAL_GPIO_ReadPin(SDIO_GPIO_Port, SDIO_Pin) == 1){
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	00da      	lsls	r2, r3, #3
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 fa44 	bl	8001e88 <HAL_GPIO_ReadPin>
 8000a00:	0003      	movs	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d103      	bne.n	8000a0e <bSpi3ReadByte+0x7a>
      c=1;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <bSpi3ReadByte+0x104>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e00c      	b.n	8000a28 <bSpi3ReadByte+0x94>
    }else if(HAL_GPIO_ReadPin(SDIO_GPIO_Port, SDIO_Pin) == 0){
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	00da      	lsls	r2, r3, #3
 8000a12:	23a0      	movs	r3, #160	; 0xa0
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fa35 	bl	8001e88 <HAL_GPIO_ReadPin>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d102      	bne.n	8000a28 <bSpi3ReadByte+0x94>
      c=0;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <bSpi3ReadByte+0x104>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
    }
     //Serial.print("bSpi3ReadByte: ");
   // Serial.println(c);

    if(c==1)
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <bSpi3ReadByte+0x104>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d106      	bne.n	8000a3e <bSpi3ReadByte+0xaa>
      RdPara |= 0x01;
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	1dfa      	adds	r2, r7, #7
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	2101      	movs	r1, #1
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e003      	b.n	8000a46 <bSpi3ReadByte+0xb2>
    else
      RdPara |= 0x00;
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	1dfa      	adds	r2, r7, #7
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	701a      	strb	r2, [r3, #0]
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000a46:	1dbb      	adds	r3, r7, #6
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	1dbb      	adds	r3, r7, #6
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	1dbb      	adds	r3, r7, #6
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1b0      	bne.n	80009ba <bSpi3ReadByte+0x26>
    }
  ClrSDCK();
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	0099      	lsls	r1, r3, #2
 8000a5c:	23a0      	movs	r3, #160	; 0xa0
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fa2d 	bl	8001ec2 <HAL_GPIO_WritePin>
  OutputSDIO();
 8000a68:	f7ff fd42 	bl	80004f0 <OutputSDIO>
  SetSDIO();
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	00d9      	lsls	r1, r3, #3
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	2201      	movs	r2, #1
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 fa23 	bl	8001ec2 <HAL_GPIO_WritePin>
  SetCSB();
 8000a7c:	23a0      	movs	r3, #160	; 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	2201      	movs	r2, #1
 8000a82:	2102      	movs	r1, #2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fa1c 	bl	8001ec2 <HAL_GPIO_WritePin>
  return(RdPara);
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	200002a4 	.word	0x200002a4

08000a9c <vSpi3Write>:
**Func:   SPI Write One word
**Input:  Write word
**Output: none
**********************************************************/
void vSpi3Write(word dat)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  //Serial.print("dat: ");   Serial.println(dat);
	HAL_UART_Transmit( &hlpuart1, "buradaa10\r\n",11, 100);
 8000aa4:	4918      	ldr	r1, [pc, #96]	; (8000b08 <vSpi3Write+0x6c>)
 8000aa6:	4819      	ldr	r0, [pc, #100]	; (8000b0c <vSpi3Write+0x70>)
 8000aa8:	2364      	movs	r3, #100	; 0x64
 8000aaa:	220b      	movs	r2, #11
 8000aac:	f002 f940 	bl	8002d30 <HAL_UART_Transmit>
  vSpi3WriteByte((byte)(dat>>8)&0x7F);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	227f      	movs	r2, #127	; 0x7f
 8000ab8:	4013      	ands	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff feb7 	bl	8000830 <vSpi3WriteByte>
  HAL_UART_Transmit( &hlpuart1, "buradaa11\r\n",11, 100);
 8000ac2:	4913      	ldr	r1, [pc, #76]	; (8000b10 <vSpi3Write+0x74>)
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <vSpi3Write+0x70>)
 8000ac6:	2364      	movs	r3, #100	; 0x64
 8000ac8:	220b      	movs	r2, #11
 8000aca:	f002 f931 	bl	8002d30 <HAL_UART_Transmit>
  vSpi3WriteByte((byte)dat);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff feac 	bl	8000830 <vSpi3WriteByte>
  HAL_UART_Transmit( &hlpuart1, "buradaa12\r\n",11, 100);
 8000ad8:	490e      	ldr	r1, [pc, #56]	; (8000b14 <vSpi3Write+0x78>)
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <vSpi3Write+0x70>)
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	220b      	movs	r2, #11
 8000ae0:	f002 f926 	bl	8002d30 <HAL_UART_Transmit>
  SetCSB();
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2102      	movs	r1, #2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f001 f9e8 	bl	8001ec2 <HAL_GPIO_WritePin>
  HAL_UART_Transmit( &hlpuart1, "buradaa13\r\n",11, 100);
 8000af2:	4909      	ldr	r1, [pc, #36]	; (8000b18 <vSpi3Write+0x7c>)
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <vSpi3Write+0x70>)
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	220b      	movs	r2, #11
 8000afa:	f002 f919 	bl	8002d30 <HAL_UART_Transmit>
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	080046d0 	.word	0x080046d0
 8000b0c:	20000220 	.word	0x20000220
 8000b10:	080046dc 	.word	0x080046dc
 8000b14:	080046e8 	.word	0x080046e8
 8000b18:	080046f4 	.word	0x080046f4

08000b1c <bSpi3Read>:
**Func:   SPI-3 Read One byte
**Input:  readout addresss
**Output: readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	0002      	movs	r2, r0
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	701a      	strb	r2, [r3, #0]
    vSpi3WriteByte(addr|0x80);
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	4252      	negs	r2, r2
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fe7b 	bl	8000830 <vSpi3WriteByte>
  return(bSpi3ReadByte());
 8000b3a:	f7ff ff2b 	bl	8000994 <bSpi3ReadByte>
 8000b3e:	0003      	movs	r3, r0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <vSpi3WriteFIFO>:
**Func:   SPI-3 send one byte to FIFO
**Input:  one byte buffer
**Output: none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	701a      	strb	r2, [r3, #0]
  byte bitcnt;

  SetCSB();
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 f9b0 	bl	8001ec2 <HAL_GPIO_WritePin>
  OutputSDIO();
 8000b62:	f7ff fcc5 	bl	80004f0 <OutputSDIO>
  ClrSDCK();
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	0099      	lsls	r1, r3, #2
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2200      	movs	r2, #0
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 f9a6 	bl	8001ec2 <HAL_GPIO_WritePin>
  ClrFCSB();      //FCSB = 0
 8000b76:	23a0      	movs	r3, #160	; 0xa0
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 f99f 	bl	8001ec2 <HAL_GPIO_WritePin>
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2208      	movs	r2, #8
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e036      	b.n	8000bfc <vSpi3WriteFIFO+0xb4>
    {
    ClrSDCK();
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	0099      	lsls	r1, r3, #2
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	2200      	movs	r2, #0
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 f992 	bl	8001ec2 <HAL_GPIO_WritePin>

    if(dat&0x80)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da08      	bge.n	8000bba <vSpi3WriteFIFO+0x72>
      SetSDIO();
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	00d9      	lsls	r1, r3, #3
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 f985 	bl	8001ec2 <HAL_GPIO_WritePin>
 8000bb8:	e007      	b.n	8000bca <vSpi3WriteFIFO+0x82>
    else
      ClrSDIO();
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	00d9      	lsls	r1, r3, #3
 8000bbe:	23a0      	movs	r3, #160	; 0xa0
 8000bc0:	05db      	lsls	r3, r3, #23
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 f97c 	bl	8001ec2 <HAL_GPIO_WritePin>
    HAL_Delay_us(SPI3_SPEED);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 ff20 	bl	8001a10 <HAL_Delay_us>
    SetSDCK();
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	0099      	lsls	r1, r3, #2
 8000bd4:	23a0      	movs	r3, #160	; 0xa0
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2201      	movs	r2, #1
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 f971 	bl	8001ec2 <HAL_GPIO_WritePin>
    HAL_Delay_us(SPI3_SPEED);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 ff15 	bl	8001a10 <HAL_Delay_us>
    dat <<= 1;
 8000be6:	1dfa      	adds	r2, r7, #7
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	18db      	adds	r3, r3, r3
 8000bee:	7013      	strb	r3, [r2, #0]
  for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1c3      	bne.n	8000b8e <vSpi3WriteFIFO+0x46>
    }
  ClrSDCK();
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	0099      	lsls	r1, r3, #2
 8000c0a:	23a0      	movs	r3, #160	; 0xa0
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2200      	movs	r2, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 f956 	bl	8001ec2 <HAL_GPIO_WritePin>
  HAL_Delay_us(SPI3_SPEED);    //Time-Critical
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fefa 	bl	8001a10 <HAL_Delay_us>
  HAL_Delay_us(SPI3_SPEED);    //Time-Critical
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fef7 	bl	8001a10 <HAL_Delay_us>
  SetFCSB();
 8000c22:	23a0      	movs	r3, #160	; 0xa0
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	2201      	movs	r2, #1
 8000c28:	2104      	movs	r1, #4
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 f949 	bl	8001ec2 <HAL_GPIO_WritePin>
  SetSDIO();
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	00d9      	lsls	r1, r3, #3
 8000c34:	23a0      	movs	r3, #160	; 0xa0
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	2201      	movs	r2, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 f941 	bl	8001ec2 <HAL_GPIO_WritePin>
  HAL_Delay_us(SPI3_SPEED);    //Time-Critical
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 fee5 	bl	8001a10 <HAL_Delay_us>
  HAL_Delay_us(SPI3_SPEED);    //Time-Critical
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 fee2 	bl	8001a10 <HAL_Delay_us>
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <vSpi3BurstWriteFIFO>:
**Func:   burst wirte N byte to FIFO
**Input:  array length & head pointer
**Output: none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	000a      	movs	r2, r1
 8000c5e:	1cfb      	adds	r3, r7, #3
 8000c60:	701a      	strb	r2, [r3, #0]
  byte i;
  //printf("length: %x\r\n", length);
  //Serial.print(length);
  if(length!=0x00)
 8000c62:	1cfb      	adds	r3, r7, #3
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d023      	beq.n	8000cb2 <vSpi3BurstWriteFIFO+0x5e>
    {
    for(i=0;i<length;i++)
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e00d      	b.n	8000c90 <vSpi3BurstWriteFIFO+0x3c>
      vSpi3WriteFIFO(ptr[i]);
 8000c74:	240f      	movs	r4, #15
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff61 	bl	8000b48 <vSpi3WriteFIFO>
    for(i=0;i<length;i++)
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	3201      	adds	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	210f      	movs	r1, #15
 8000c92:	187a      	adds	r2, r7, r1
 8000c94:	1cfb      	adds	r3, r7, #3
 8000c96:	7812      	ldrb	r2, [r2, #0]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3ea      	bcc.n	8000c74 <vSpi3BurstWriteFIFO+0x20>

      //printf("i: %x\r\n", i);

      byte vSpi3WriteFIFO1;
  vSpi3WriteFIFO1 = bSpi3Read(i);
 8000c9e:	230e      	movs	r3, #14
 8000ca0:	18fc      	adds	r4, r7, r3
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff ff38 	bl	8000b1c <bSpi3Read>
 8000cac:	0003      	movs	r3, r0
 8000cae:	7023      	strb	r3, [r4, #0]
  //printf("vSpi3WriteFIFO: %x\r\n", vSpi3WriteFIFO1);
    }
  return;
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46c0      	nop			; (mov r8, r8)
}
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b005      	add	sp, #20
 8000cb8:	bd90      	pop	{r4, r7, pc}
	...

08000cbc <bGoTx>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoTx(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  }
  if(i>=100)
    return(false);
  #endif

  vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <bGoTx+0x64>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fee9 	bl	8000a9c <vSpi3Write>
  for(i=0; i<100; i++){
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e014      	b.n	8000cfc <bGoTx+0x40>
    HAL_Delay_us(100);
 8000cd2:	2064      	movs	r0, #100	; 0x64
 8000cd4:	f000 fe9c 	bl	8001a10 <HAL_Delay_us>
    tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000cd8:	2061      	movs	r0, #97	; 0x61
 8000cda:	f7ff ff1f 	bl	8000b1c <bSpi3Read>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	1dbb      	adds	r3, r7, #6
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
    if(tmp==MODE_STA_TX)
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d009      	beq.n	8000d06 <bGoTx+0x4a>
  for(i=0; i<100; i++){
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	3201      	adds	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b63      	cmp	r3, #99	; 0x63
 8000d02:	d9e6      	bls.n	8000cd2 <bGoTx+0x16>
 8000d04:	e000      	b.n	8000d08 <bGoTx+0x4c>
      break;
 8000d06:	46c0      	nop			; (mov r8, r8)
  }
  if(i>=100)
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b63      	cmp	r3, #99	; 0x63
 8000d0e:	d901      	bls.n	8000d14 <bGoTx+0x58>
    return(false);
 8000d10:	2300      	movs	r3, #0
 8000d12:	e000      	b.n	8000d16 <bGoTx+0x5a>
  else
    return(true);
 8000d14:	2301      	movs	r3, #1
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	00006040 	.word	0x00006040

08000d24 <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  byte tmp;

  vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <bGoSleep+0x3c>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff feb5 	bl	8000a9c <vSpi3Write>
  HAL_Delay_us(100);   //enough?
 8000d32:	2064      	movs	r0, #100	; 0x64
 8000d34:	f000 fe6c 	bl	8001a10 <HAL_Delay_us>
  tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000d38:	2061      	movs	r0, #97	; 0x61
 8000d3a:	f7ff feef 	bl	8000b1c <bSpi3Read>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	0019      	movs	r1, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	220f      	movs	r2, #15
 8000d46:	400a      	ands	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
  if(tmp==MODE_GO_SLEEP)
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b10      	cmp	r3, #16
 8000d50:	d101      	bne.n	8000d56 <bGoSleep+0x32>
    return(true);
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <bGoSleep+0x34>
  else
    return(false);
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	00006010 	.word	0x00006010

08000d64 <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  byte tmp, i;

  RssiTrig = false;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <bGoStandby+0x68>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <bGoStandby+0x6c>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fe92 	bl	8000a9c <vSpi3Write>
  for(i=0; i<100; i++){
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e014      	b.n	8000daa <bGoStandby+0x46>
    HAL_Delay_us(100);
 8000d80:	2064      	movs	r0, #100	; 0x64
 8000d82:	f000 fe45 	bl	8001a10 <HAL_Delay_us>
    tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000d86:	2061      	movs	r0, #97	; 0x61
 8000d88:	f7ff fec8 	bl	8000b1c <bSpi3Read>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	0019      	movs	r1, r3
 8000d90:	1dbb      	adds	r3, r7, #6
 8000d92:	220f      	movs	r2, #15
 8000d94:	400a      	ands	r2, r1
 8000d96:	701a      	strb	r2, [r3, #0]

    if(tmp==MODE_STA_STBY)
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d009      	beq.n	8000db4 <bGoStandby+0x50>
  for(i=0; i<100; i++){
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	3201      	adds	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b63      	cmp	r3, #99	; 0x63
 8000db0:	d9e6      	bls.n	8000d80 <bGoStandby+0x1c>
 8000db2:	e000      	b.n	8000db6 <bGoStandby+0x52>
      break;
 8000db4:	46c0      	nop			; (mov r8, r8)
  }
  if(i>=100)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b63      	cmp	r3, #99	; 0x63
 8000dbc:	d901      	bls.n	8000dc2 <bGoStandby+0x5e>
    return(false);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <bGoStandby+0x60>
  else
    return(true);
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000021d 	.word	0x2000021d
 8000dd0:	00006002 	.word	0x00006002

08000dd4 <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit( &hlpuart1, "buradaa7\r\n",10, 100);
 8000dd8:	490d      	ldr	r1, [pc, #52]	; (8000e10 <vSoftReset+0x3c>)
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <vSoftReset+0x40>)
 8000ddc:	2364      	movs	r3, #100	; 0x64
 8000dde:	220a      	movs	r2, #10
 8000de0:	f001 ffa6 	bl	8002d30 <HAL_UART_Transmit>
  vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <vSoftReset+0x44>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff fe58 	bl	8000a9c <vSpi3Write>
  HAL_UART_Transmit( &hlpuart1, "buradaa8\r\n",10, 100);
 8000dec:	490b      	ldr	r1, [pc, #44]	; (8000e1c <vSoftReset+0x48>)
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <vSoftReset+0x40>)
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	220a      	movs	r2, #10
 8000df4:	f001 ff9c 	bl	8002d30 <HAL_UART_Transmit>
  HAL_Delay(1);       //enough?
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 fde5 	bl	80019c8 <HAL_Delay>
  HAL_UART_Transmit( &hlpuart1, "buradaa9\r\n",10, 100);
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <vSoftReset+0x4c>)
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <vSoftReset+0x40>)
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	220a      	movs	r2, #10
 8000e06:	f001 ff93 	bl	8002d30 <HAL_UART_Transmit>
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	08004700 	.word	0x08004700
 8000e14:	20000220 	.word	0x20000220
 8000e18:	00007fff 	.word	0x00007fff
 8000e1c:	0800470c 	.word	0x0800470c
 8000e20:	08004718 	.word	0x08004718

08000e24 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	22ca      	movs	r2, #202	; 0xca
 8000e36:	01d2      	lsls	r2, r2, #7
 8000e38:	4694      	mov	ip, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fe2d 	bl	8000a9c <vSpi3Write>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <vIntSrcCfg>:
**Function: config interrupt source
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 8000e4a:	b590      	push	{r4, r7, lr}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	0002      	movs	r2, r0
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	1dbb      	adds	r3, r7, #6
 8000e58:	1c0a      	adds	r2, r1, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
  byte tmp;
  tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 8000e5c:	2066      	movs	r0, #102	; 0x66
 8000e5e:	f7ff fe5d 	bl	8000b1c <bSpi3Read>
 8000e62:	0003      	movs	r3, r0
 8000e64:	0019      	movs	r1, r3
 8000e66:	240f      	movs	r4, #15
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	221f      	movs	r2, #31
 8000e6c:	4391      	bics	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8000e72:	193a      	adds	r2, r7, r4
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	7812      	ldrb	r2, [r2, #0]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	22cc      	movs	r2, #204	; 0xcc
 8000e80:	01d2      	lsls	r2, r2, #7
 8000e82:	4694      	mov	ip, r2
 8000e84:	4463      	add	r3, ip
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff fe08 	bl	8000a9c <vSpi3Write>

  tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 8000e8c:	2067      	movs	r0, #103	; 0x67
 8000e8e:	f7ff fe45 	bl	8000b1c <bSpi3Read>
 8000e92:	0003      	movs	r3, r0
 8000e94:	0019      	movs	r1, r3
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	221f      	movs	r2, #31
 8000e9a:	4391      	bics	r1, r2
 8000e9c:	000a      	movs	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8000ea0:	193a      	adds	r2, r7, r4
 8000ea2:	1dbb      	adds	r3, r7, #6
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	22ce      	movs	r2, #206	; 0xce
 8000eae:	01d2      	lsls	r2, r2, #7
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fdf1 	bl	8000a9c <vSpi3Write>
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b005      	add	sp, #20
 8000ec0:	bd90      	pop	{r4, r7, pc}

08000ec2 <vEnableAntSwitch>:
**Function:
**Input:
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 8000ec2:	b5b0      	push	{r4, r5, r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	0002      	movs	r2, r0
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	701a      	strb	r2, [r3, #0]
  byte tmp;
  tmp = bSpi3Read(CMT23_INT1_CTL);
 8000ece:	250f      	movs	r5, #15
 8000ed0:	197c      	adds	r4, r7, r5
 8000ed2:	2066      	movs	r0, #102	; 0x66
 8000ed4:	f7ff fe22 	bl	8000b1c <bSpi3Read>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	7023      	strb	r3, [r4, #0]
  tmp&= 0x3F;
 8000edc:	197b      	adds	r3, r7, r5
 8000ede:	197a      	adds	r2, r7, r5
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	213f      	movs	r1, #63	; 0x3f
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]
  switch(mode)
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d002      	beq.n	8000ef6 <vEnableAntSwitch+0x34>
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d009      	beq.n	8000f08 <vEnableAntSwitch+0x46>
      tmp |= RF_SWT1_EN; break;   //GPO1=RxActive; GPO2=TxActive
    case 2:
      tmp |= RF_SWT2_EN; break;   //GPO1=RxActive; GPO2=!RxActive
    case 0:
    default:
      break;              //Disable
 8000ef4:	e010      	b.n	8000f18 <vEnableAntSwitch+0x56>
      tmp |= RF_SWT1_EN; break;   //GPO1=RxActive; GPO2=TxActive
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	18bb      	adds	r3, r7, r2
 8000efa:	18ba      	adds	r2, r7, r2
 8000efc:	7812      	ldrb	r2, [r2, #0]
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	4249      	negs	r1, r1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e007      	b.n	8000f18 <vEnableAntSwitch+0x56>
      tmp |= RF_SWT2_EN; break;   //GPO1=RxActive; GPO2=!RxActive
 8000f08:	220f      	movs	r2, #15
 8000f0a:	18bb      	adds	r3, r7, r2
 8000f0c:	18ba      	adds	r2, r7, r2
 8000f0e:	7812      	ldrb	r2, [r2, #0]
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	430a      	orrs	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	46c0      	nop			; (mov r8, r8)
  }
  vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 8000f18:	230f      	movs	r3, #15
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	22cc      	movs	r2, #204	; 0xcc
 8000f20:	01d2      	lsls	r2, r2, #7
 8000f22:	4694      	mov	ip, r2
 8000f24:	4463      	add	r3, ip
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff fdb8 	bl	8000a9c <vSpi3Write>
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bdb0      	pop	{r4, r5, r7, pc}

08000f34 <vIntSrcEnable>:
**Function: enable interrupt source
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	22d0      	movs	r2, #208	; 0xd0
 8000f46:	01d2      	lsls	r2, r2, #7
 8000f48:	4694      	mov	ip, r2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff fda5 	bl	8000a9c <vSpi3Write>
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  //byte tmp;
  //byte int_clr2 = 0;
  //byte int_clr1 = 0;
  byte flg = 0;
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
    int_clr1 |= RX_TIMEOUT_CLR;
    flg |= RX_TMO_EN;
  }
  vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1); //Clear flag
#endif
  vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <bIntSrcFlagClr+0x28>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff fd96 	bl	8000a9c <vSpi3Write>
  vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF); //Clear flag
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <bIntSrcFlagClr+0x2c>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff fd92 	bl	8000a9c <vSpi3Write>

  return(flg);
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	00006a07 	.word	0x00006a07
 8000f88:	00006bff 	.word	0x00006bff

08000f8c <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  byte tmp;
  tmp = bSpi3Read(CMT23_FIFO_FLG);
 8000f92:	1dfc      	adds	r4, r7, #7
 8000f94:	206e      	movs	r0, #110	; 0x6e
 8000f96:	f7ff fdc1 	bl	8000b1c <bSpi3Read>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	7023      	strb	r3, [r4, #0]
  vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <vClearFIFO+0x28>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff fd7b 	bl	8000a9c <vSpi3Write>
  return(tmp);
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b003      	add	sp, #12
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	00006c03 	.word	0x00006c03

08000fb8 <vEnableWrFifo>:

#if 1   //splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  byte tmp;
  tmp = bSpi3Read(CMT23_FIFO_CTL);
 8000fbe:	1dfc      	adds	r4, r7, #7
 8000fc0:	2069      	movs	r0, #105	; 0x69
 8000fc2:	f7ff fdab 	bl	8000b1c <bSpi3Read>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	7023      	strb	r3, [r4, #0]
  //Serial.print("vEnableWrFifo tmp: "); Serial.println(tmp);

  tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	1dfa      	adds	r2, r7, #7
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
 // printf("tmp: %x\r\n", tmp);

  vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	22d2      	movs	r2, #210	; 0xd2
 8000fdc:	01d2      	lsls	r2, r2, #7
 8000fde:	4694      	mov	ip, r2
 8000fe0:	4463      	add	r3, ip
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fd5a 	bl	8000a9c <vSpi3Write>

  /*byte CMT23_FIFO_CTL1;
  CMT23_FIFO_CTL1 = bSpi3Read(CMT23_FIFO_CTL);
  printf("CMT23_FIFO_CTL'de yazan: %x\r\n", CMT23_FIFO_CTL1);*/

}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b003      	add	sp, #12
 8000fee:	bd90      	pop	{r4, r7, pc}

08000ff0 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  byte tmp;
  HAL_UART_Transmit( &hlpuart1, "buradaa3\r\n",10, 100);
 8000ff6:	4921      	ldr	r1, [pc, #132]	; (800107c <vInit+0x8c>)
 8000ff8:	4821      	ldr	r0, [pc, #132]	; (8001080 <vInit+0x90>)
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	f001 fe97 	bl	8002d30 <HAL_UART_Transmit>

  vSpi3Init();
 8001002:	f7ff fbe9 	bl	80007d8 <vSpi3Init>
  HAL_UART_Transmit( &hlpuart1, "buradaa4\r\n",10, 100);
 8001006:	491f      	ldr	r1, [pc, #124]	; (8001084 <vInit+0x94>)
 8001008:	481d      	ldr	r0, [pc, #116]	; (8001080 <vInit+0x90>)
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	220a      	movs	r2, #10
 800100e:	f001 fe8f 	bl	8002d30 <HAL_UART_Transmit>
  //GPO3In();

//  TX_ANTOut();
  //RX_ANTOut();

  vSoftReset();
 8001012:	f7ff fedf 	bl	8000dd4 <vSoftReset>
  HAL_UART_Transmit( &hlpuart1, "buradaa5\r\n",10, 100);
 8001016:	491c      	ldr	r1, [pc, #112]	; (8001088 <vInit+0x98>)
 8001018:	4819      	ldr	r0, [pc, #100]	; (8001080 <vInit+0x90>)
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	220a      	movs	r2, #10
 800101e:	f001 fe87 	bl	8002d30 <HAL_UART_Transmit>
  HAL_Delay(20);
 8001022:	2014      	movs	r0, #20
 8001024:	f000 fcd0 	bl	80019c8 <HAL_Delay>
  bGoStandby();
 8001028:	f7ff fe9c 	bl	8000d64 <bGoStandby>
  HAL_UART_Transmit( &hlpuart1, "buradaa6\r\n",10, 100);
 800102c:	4917      	ldr	r1, [pc, #92]	; (800108c <vInit+0x9c>)
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <vInit+0x90>)
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	220a      	movs	r2, #10
 8001034:	f001 fe7c 	bl	8002d30 <HAL_UART_Transmit>

  //
  tmp = bSpi3Read(CMT23_MODE_STA);
 8001038:	1dfc      	adds	r4, r7, #7
 800103a:	2061      	movs	r0, #97	; 0x61
 800103c:	f7ff fd6e 	bl	8000b1c <bSpi3Read>
 8001040:	0003      	movs	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
  tmp|= EEP_CPY_DIS;
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	1dfa      	adds	r2, r7, #7
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	2110      	movs	r1, #16
 800104c:	430a      	orrs	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]
  tmp&= (~RSTN_IN_EN);      //Disable RstPin
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	1dfa      	adds	r2, r7, #7
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	2120      	movs	r1, #32
 8001058:	438a      	bics	r2, r1
 800105a:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	22c2      	movs	r2, #194	; 0xc2
 8001062:	01d2      	lsls	r2, r2, #7
 8001064:	4694      	mov	ip, r2
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff fd17 	bl	8000a9c <vSpi3Write>

  bIntSrcFlagClr();
 800106e:	f7ff ff75 	bl	8000f5c <bIntSrcFlagClr>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b003      	add	sp, #12
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	08004724 	.word	0x08004724
 8001080:	20000220 	.word	0x20000220
 8001084:	08004730 	.word	0x08004730
 8001088:	0800473c 	.word	0x0800473c
 800108c:	08004748 	.word	0x08004748

08001090 <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	000a      	movs	r2, r1
 800109a:	1cfb      	adds	r3, r7, #3
 800109c:	701a      	strb	r2, [r3, #0]
  byte i;

  if(length!=0){
 800109e:	1cfb      	adds	r3, r7, #3
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01a      	beq.n	80010dc <vCfgBank+0x4c>
    for(i=0; i<length; i++)
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e00e      	b.n	80010ce <vCfgBank+0x3e>
      vSpi3Write(cfg[i]);
 80010b0:	240f      	movs	r4, #15
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	18d3      	adds	r3, r2, r3
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff fcec 	bl	8000a9c <vSpi3Write>
    for(i=0; i<length; i++)
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	781a      	ldrb	r2, [r3, #0]
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	3201      	adds	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	230f      	movs	r3, #15
 80010d0:	18fa      	adds	r2, r7, r3
 80010d2:	1cfb      	adds	r3, r7, #3
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3e9      	bcc.n	80010b0 <vCfgBank+0x20>
  }
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b005      	add	sp, #20
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <bSendMessage>:
  rev = 0xFF;
  return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	000a      	movs	r2, r1
 80010ee:	1cfb      	adds	r3, r7, #3
 80010f0:	701a      	strb	r2, [r3, #0]
  bIntSrcFlagClr();
 80010f2:	f7ff ff33 	bl	8000f5c <bIntSrcFlagClr>
#if 1
  //mode1
  vSetTxPayloadLength(length);
 80010f6:	1cfb      	adds	r3, r7, #3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f812 	bl	8001124 <vSetTxPayloadLength>

  bGoStandby();
 8001100:	f7ff fe30 	bl	8000d64 <bGoStandby>

  vEnableWrFifo();
 8001104:	f7ff ff58 	bl	8000fb8 <vEnableWrFifo>
  vSpi3BurstWriteFIFO(msg, length);
 8001108:	1cfb      	adds	r3, r7, #3
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fd9f 	bl	8000c54 <vSpi3BurstWriteFIFO>
  bGoTx();
 8001116:	f7ff fdd1 	bl	8000cbc <bGoTx>
  vSetTxPayloadLength(length);
  bGoTx();
  vEnableWrFifo();
  vSpi3BurstWriteFIFO(msg, length);
#endif
  return(true);
 800111a:	2301      	movs	r3, #1
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  byte tmp;
  byte len;
  bGoStandby();
 800112c:	f7ff fe1a 	bl	8000d64 <bGoStandby>
  tmp = bSpi3Read(CMT23_PKT_CTRL1);
 8001130:	250f      	movs	r5, #15
 8001132:	197c      	adds	r4, r7, r5
 8001134:	2045      	movs	r0, #69	; 0x45
 8001136:	f7ff fcf1 	bl	8000b1c <bSpi3Read>
 800113a:	0003      	movs	r3, r0
 800113c:	7023      	strb	r3, [r4, #0]
  tmp&= 0x8F;
 800113e:	0028      	movs	r0, r5
 8001140:	183b      	adds	r3, r7, r0
 8001142:	183a      	adds	r2, r7, r0
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	2170      	movs	r1, #112	; 0x70
 8001148:	438a      	bics	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]

  if(length!=0){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01c      	beq.n	800118c <vSetTxPayloadLength+0x68>
    if(FixedPktLength){
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <vSetTxPayloadLength+0xc0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <vSetTxPayloadLength+0x50>
      tmp &= ~(1<<0);   //clear bit0
 800115a:	183b      	adds	r3, r7, r0
 800115c:	183a      	adds	r2, r7, r0
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	438a      	bics	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
      len = length - 1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	230e      	movs	r3, #14
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	3a01      	subs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e00f      	b.n	8001194 <vSetTxPayloadLength+0x70>
    }
    else{
      tmp |= (1<<0);     //set bit0
 8001174:	220f      	movs	r2, #15
 8001176:	18bb      	adds	r3, r7, r2
 8001178:	18ba      	adds	r2, r7, r2
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
      len = length;
 8001182:	230e      	movs	r3, #14
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	e003      	b.n	8001194 <vSetTxPayloadLength+0x70>
    }
  }else
    len = 0;
 800118c:	230e      	movs	r3, #14
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]

  tmp|= (((byte)(len>>8)&0x07)<<4);
 8001194:	240e      	movs	r4, #14
 8001196:	193b      	adds	r3, r7, r4
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	121b      	asrs	r3, r3, #8
 800119c:	b2db      	uxtb	r3, r3
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	2270      	movs	r2, #112	; 0x70
 80011a4:	4013      	ands	r3, r2
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	210f      	movs	r1, #15
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	701a      	strb	r2, [r3, #0]
  vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	228a      	movs	r2, #138	; 0x8a
 80011be:	01d2      	lsls	r2, r2, #7
 80011c0:	4694      	mov	ip, r2
 80011c2:	4463      	add	r3, ip
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff fc69 	bl	8000a9c <vSpi3Write>
  vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len); //Payload length
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	228c      	movs	r2, #140	; 0x8c
 80011d0:	01d2      	lsls	r2, r2, #7
 80011d2:	4694      	mov	ip, r2
 80011d4:	4463      	add	r3, ip
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff fc60 	bl	8000a9c <vSpi3Write>
  //bGoSleep();
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b004      	add	sp, #16
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}
 80011e4:	200002a8 	.word	0x200002a8

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b092      	sub	sp, #72	; 0x48
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f000 fb7b 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f8d7 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 f96f 	bl	80014d8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80011fa:	f000 f93f 	bl	800147c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

#define TX_NUM  21

  byte tx_buf[32] = {'H','o','p','e','R','F',' ','R','F','M',' ','C','O','B','R','F','M','3','0','0','A'};
 80011fe:	2324      	movs	r3, #36	; 0x24
 8001200:	18f9      	adds	r1, r7, r3
 8001202:	4a58      	ldr	r2, [pc, #352]	; (8001364 <main+0x17c>)
 8001204:	000b      	movs	r3, r1
 8001206:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001208:	c331      	stmia	r3!, {r0, r4, r5}
 800120a:	ca11      	ldmia	r2!, {r0, r4}
 800120c:	c311      	stmia	r3!, {r0, r4}
 800120e:	8812      	ldrh	r2, [r2, #0]
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	2316      	movs	r3, #22
 8001214:	18cb      	adds	r3, r1, r3
 8001216:	220a      	movs	r2, #10
 8001218:	2100      	movs	r1, #0
 800121a:	0018      	movs	r0, r3
 800121c:	f002 fa7c 	bl	8003718 <memset>
  byte rx_buf[32];
  byte mode = 1;   // 0: receive , 1: transmitter
 8001220:	2447      	movs	r4, #71	; 0x47
 8001222:	193b      	adds	r3, r7, r4
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]

//radio configure

  FixedPktLength    = false;
 8001228:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <main+0x180>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
    PayloadLength     = 21;
 800122e:	4b4f      	ldr	r3, [pc, #316]	; (800136c <main+0x184>)
 8001230:	2215      	movs	r2, #21
 8001232:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit( &hlpuart1, "buradaa1\r\n",10, 100);
 8001234:	494e      	ldr	r1, [pc, #312]	; (8001370 <main+0x188>)
 8001236:	484f      	ldr	r0, [pc, #316]	; (8001374 <main+0x18c>)
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	220a      	movs	r2, #10
 800123c:	f001 fd78 	bl	8002d30 <HAL_UART_Transmit>

    vInit();
 8001240:	f7ff fed6 	bl	8000ff0 <vInit>
    HAL_UART_Transmit( &hlpuart1, "buradaa2\r\n",10, 100);
 8001244:	494c      	ldr	r1, [pc, #304]	; (8001378 <main+0x190>)
 8001246:	484b      	ldr	r0, [pc, #300]	; (8001374 <main+0x18c>)
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	220a      	movs	r2, #10
 800124c:	f001 fd70 	bl	8002d30 <HAL_UART_Transmit>
    vCfgBank(CMTBank, 12);
 8001250:	4b4a      	ldr	r3, [pc, #296]	; (800137c <main+0x194>)
 8001252:	210c      	movs	r1, #12
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff1b 	bl	8001090 <vCfgBank>

    vCfgBank(SystemBank, 12);
 800125a:	4b49      	ldr	r3, [pc, #292]	; (8001380 <main+0x198>)
 800125c:	210c      	movs	r1, #12
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff ff16 	bl	8001090 <vCfgBank>
    vCfgBank(FrequencyBank, 8);
 8001264:	4b47      	ldr	r3, [pc, #284]	; (8001384 <main+0x19c>)
 8001266:	2108      	movs	r1, #8
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff11 	bl	8001090 <vCfgBank>
    vCfgBank(DataRateBank, 24);
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <main+0x1a0>)
 8001270:	2118      	movs	r1, #24
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ff0c 	bl	8001090 <vCfgBank>
    vCfgBank(BasebandBank, 29);
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <main+0x1a4>)
 800127a:	211d      	movs	r1, #29
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ff07 	bl	8001090 <vCfgBank>
    vCfgBank(TXBank, 11);
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <main+0x1a8>)
 8001284:	210b      	movs	r1, #11
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff02 	bl	8001090 <vCfgBank>
    vEnableAntSwitch(0);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe18 	bl	8000ec2 <vEnableAntSwitch>
HAL_UART_Transmit( &hlpuart1, "buradaaa\r\n",10, 100);
 8001292:	4940      	ldr	r1, [pc, #256]	; (8001394 <main+0x1ac>)
 8001294:	4837      	ldr	r0, [pc, #220]	; (8001374 <main+0x18c>)
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	220a      	movs	r2, #10
 800129a:	f001 fd49 	bl	8002d30 <HAL_UART_Transmit>
HAL_Delay(500);
 800129e:	23fa      	movs	r3, #250	; 0xfa
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fb90 	bl	80019c8 <HAL_Delay>
    vGpioFuncCfg(GPIO1_DCLK+GPIO2_DCLK+GPIO3_INT2);   //GPIO Maping
 80012a8:	202f      	movs	r0, #47	; 0x2f
 80012aa:	f7ff fdbb 	bl	8000e24 <vGpioFuncCfg>

HAL_UART_Transmit( &hlpuart1, "geliyor",7, 100);
 80012ae:	493a      	ldr	r1, [pc, #232]	; (8001398 <main+0x1b0>)
 80012b0:	4830      	ldr	r0, [pc, #192]	; (8001374 <main+0x18c>)
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	2207      	movs	r2, #7
 80012b6:	f001 fd3b 	bl	8002d30 <HAL_UART_Transmit>
HAL_Delay(500);
 80012ba:	23fa      	movs	r3, #250	; 0xfa
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 fb82 	bl	80019c8 <HAL_Delay>


      mode = 1;
 80012c4:	193b      	adds	r3, r7, r4
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
      vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 80012ca:	210a      	movs	r1, #10
 80012cc:	2010      	movs	r0, #16
 80012ce:	f7ff fdbc 	bl	8000e4a <vIntSrcCfg>



      vIntSrcEnable(TX_DONE_EN);
 80012d2:	2020      	movs	r0, #32
 80012d4:	f7ff fe2e 	bl	8000f34 <vIntSrcEnable>

      vClearFIFO();
 80012d8:	f7ff fe58 	bl	8000f8c <vClearFIFO>

      bGoSleep();
 80012dc:	f7ff fd22 	bl	8000d24 <bGoSleep>
      HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80012e0:	23a0      	movs	r3, #160	; 0xa0
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	2201      	movs	r2, #1
 80012e6:	2110      	movs	r1, #16
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 fdea 	bl	8001ec2 <HAL_GPIO_WritePin>

          	        HAL_Delay(10000);
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <main+0x1b4>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 fb69 	bl	80019c8 <HAL_Delay>
          	        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80012f6:	23a0      	movs	r3, #160	; 0xa0
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	2200      	movs	r2, #0
 80012fc:	2110      	movs	r1, #16
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 fddf 	bl	8001ec2 <HAL_GPIO_WritePin>
      printf("Tx...");
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <main+0x1b8>)
 8001306:	0018      	movs	r0, r3
 8001308:	f002 fa0e 	bl	8003728 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t tx_cnt=0;
	//    byte tmp;
	        bSendMessage(tx_buf, TX_NUM);
 800130c:	2324      	movs	r3, #36	; 0x24
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	2115      	movs	r1, #21
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff fee6 	bl	80010e4 <bSendMessage>
	        while(GPO3_L());
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	015a      	lsls	r2, r3, #5
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f000 fdaf 	bl	8001e88 <HAL_GPIO_ReadPin>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d0f5      	beq.n	800131a <main+0x132>
	        bIntSrcFlagClr();
 800132e:	f7ff fe15 	bl	8000f5c <bIntSrcFlagClr>
	        vClearFIFO();
 8001332:	f7ff fe2b 	bl	8000f8c <vClearFIFO>
	        bGoSleep();
 8001336:	f7ff fcf5 	bl	8000d24 <bGoSleep>
	        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800133a:	23a0      	movs	r3, #160	; 0xa0
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	2201      	movs	r2, #1
 8001340:	2110      	movs	r1, #16
 8001342:	0018      	movs	r0, r3
 8001344:	f000 fdbd 	bl	8001ec2 <HAL_GPIO_WritePin>
	        //printf("Tx: ");
	       // printf(++tx_cnt);
	        HAL_Delay(1000);
 8001348:	23fa      	movs	r3, #250	; 0xfa
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	0018      	movs	r0, r3
 800134e:	f000 fb3b 	bl	80019c8 <HAL_Delay>
	        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	2200      	movs	r2, #0
 8001358:	2110      	movs	r1, #16
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fdb1 	bl	8001ec2 <HAL_GPIO_WritePin>
  {
 8001360:	e7d4      	b.n	800130c <main+0x124>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	0800477c 	.word	0x0800477c
 8001368:	200002a8 	.word	0x200002a8
 800136c:	200002ac 	.word	0x200002ac
 8001370:	08004754 	.word	0x08004754
 8001374:	20000220 	.word	0x20000220
 8001378:	080046c4 	.word	0x080046c4
 800137c:	20000000 	.word	0x20000000
 8001380:	20000030 	.word	0x20000030
 8001384:	20000060 	.word	0x20000060
 8001388:	20000080 	.word	0x20000080
 800138c:	200000e0 	.word	0x200000e0
 8001390:	20000154 	.word	0x20000154
 8001394:	08004760 	.word	0x08004760
 8001398:	0800476c 	.word	0x0800476c
 800139c:	00002710 	.word	0x00002710
 80013a0:	08004774 	.word	0x08004774

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b099      	sub	sp, #100	; 0x64
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	242c      	movs	r4, #44	; 0x2c
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	0018      	movs	r0, r3
 80013b0:	2334      	movs	r3, #52	; 0x34
 80013b2:	001a      	movs	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	f002 f9af 	bl	8003718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ba:	2318      	movs	r3, #24
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	0018      	movs	r0, r3
 80013c0:	2314      	movs	r3, #20
 80013c2:	001a      	movs	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	f002 f9a7 	bl	8003718 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ca:	003b      	movs	r3, r7
 80013cc:	0018      	movs	r0, r3
 80013ce:	2318      	movs	r3, #24
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f002 f9a0 	bl	8003718 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <SystemClock_Config+0xd0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <SystemClock_Config+0xd4>)
 80013de:	401a      	ands	r2, r3
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <SystemClock_Config+0xd0>)
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	0109      	lsls	r1, r1, #4
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013ea:	0021      	movs	r1, r4
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2210      	movs	r2, #16
 80013f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2201      	movs	r2, #1
 80013f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	22a0      	movs	r2, #160	; 0xa0
 8001402:	0212      	lsls	r2, r2, #8
 8001404:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	187b      	adds	r3, r7, r1
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fd74 	bl	8001efc <HAL_RCC_OscConfig>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001418:	f000 f8ea 	bl	80015f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	2118      	movs	r1, #24
 800141e:	187b      	adds	r3, r7, r1
 8001420:	220f      	movs	r2, #15
 8001422:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2100      	movs	r1, #0
 8001440:	0018      	movs	r0, r3
 8001442:	f001 f8d7 	bl	80025f4 <HAL_RCC_ClockConfig>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800144a:	f000 f8d1 	bl	80015f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800144e:	003b      	movs	r3, r7
 8001450:	2204      	movs	r2, #4
 8001452:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001454:	003b      	movs	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	003b      	movs	r3, r7
 800145c:	0018      	movs	r0, r3
 800145e:	f001 faed 	bl	8002a3c <HAL_RCCEx_PeriphCLKConfig>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001466:	f000 f8c3 	bl	80015f0 <Error_Handler>
  }
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b019      	add	sp, #100	; 0x64
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40007000 	.word	0x40007000
 8001478:	ffffe7ff 	.word	0xffffe7ff

0800147c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <MX_LPUART1_UART_Init+0x58>)
 8001484:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 8001488:	22e1      	movs	r2, #225	; 0xe1
 800148a:	0252      	lsls	r2, r2, #9
 800148c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <MX_LPUART1_UART_Init+0x54>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f001 fbe4 	bl	8002c88 <HAL_UART_Init>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d001      	beq.n	80014c8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80014c4:	f000 f894 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000220 	.word	0x20000220
 80014d4:	40004800 	.word	0x40004800

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08b      	sub	sp, #44	; 0x2c
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	2414      	movs	r4, #20
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	0018      	movs	r0, r3
 80014e4:	2314      	movs	r3, #20
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f002 f915 	bl	8003718 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <MX_GPIO_Init+0x10c>)
 80014f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <MX_GPIO_Init+0x10c>)
 80014f4:	2104      	movs	r1, #4
 80014f6:	430a      	orrs	r2, r1
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014fa:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <MX_GPIO_Init+0x10c>)
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	2204      	movs	r2, #4
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <MX_GPIO_Init+0x10c>)
 8001508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <MX_GPIO_Init+0x10c>)
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	430a      	orrs	r2, r1
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <MX_GPIO_Init+0x10c>)
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <MX_GPIO_Init+0x10c>)
 8001520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <MX_GPIO_Init+0x10c>)
 8001524:	2101      	movs	r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <MX_GPIO_Init+0x10c>)
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	2201      	movs	r2, #1
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <MX_GPIO_Init+0x10c>)
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <MX_GPIO_Init+0x10c>)
 800153c:	2102      	movs	r1, #2
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <MX_GPIO_Init+0x10c>)
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	2202      	movs	r2, #2
 8001548:	4013      	ands	r3, r2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	4825      	ldr	r0, [pc, #148]	; (80015e8 <MX_GPIO_Init+0x110>)
 8001554:	2200      	movs	r2, #0
 8001556:	0019      	movs	r1, r3
 8001558:	f000 fcb3 	bl	8001ec2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|FCSB_Pin|BUZZER_Pin|SCLK_Pin
 800155c:	4923      	ldr	r1, [pc, #140]	; (80015ec <MX_GPIO_Init+0x114>)
 800155e:	23a0      	movs	r3, #160	; 0xa0
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	2200      	movs	r2, #0
 8001564:	0018      	movs	r0, r3
 8001566:	f000 fcac 	bl	8001ec2 <HAL_GPIO_WritePin>
                          |SDIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800156a:	193b      	adds	r3, r7, r4
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	0192      	lsls	r2, r2, #6
 8001570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	193b      	adds	r3, r7, r4
 8001574:	2201      	movs	r2, #1
 8001576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	193b      	adds	r3, r7, r4
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001584:	193b      	adds	r3, r7, r4
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <MX_GPIO_Init+0x110>)
 8001588:	0019      	movs	r1, r3
 800158a:	0010      	movs	r0, r2
 800158c:	f000 fb0e 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin BUZZER_Pin SCLK_Pin
                           SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin|FCSB_Pin|BUZZER_Pin|SCLK_Pin
 8001590:	193b      	adds	r3, r7, r4
 8001592:	4a16      	ldr	r2, [pc, #88]	; (80015ec <MX_GPIO_Init+0x114>)
 8001594:	601a      	str	r2, [r3, #0]
                          |SDIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	193b      	adds	r3, r7, r4
 8001598:	2201      	movs	r2, #1
 800159a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	193b      	adds	r3, r7, r4
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	193a      	adds	r2, r7, r4
 80015aa:	23a0      	movs	r3, #160	; 0xa0
 80015ac:	05db      	lsls	r3, r3, #23
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 fafb 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : GPO3_Pin */
  GPIO_InitStruct.Pin = GPO3_Pin;
 80015b6:	0021      	movs	r1, r4
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	0152      	lsls	r2, r2, #5
 80015be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 80015cc:	187a      	adds	r2, r7, r1
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	0011      	movs	r1, r2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f000 fae9 	bl	8001bac <HAL_GPIO_Init>

}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b00b      	add	sp, #44	; 0x2c
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40021000 	.word	0x40021000
 80015e8:	50000800 	.word	0x50000800
 80015ec:	00000616 	.word	0x00000616

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_MspInit+0x24>)
 8001602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_MspInit+0x24>)
 8001606:	2101      	movs	r1, #1
 8001608:	430a      	orrs	r2, r1
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_MspInit+0x24>)
 800160e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_MspInit+0x24>)
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	0549      	lsls	r1, r1, #21
 8001616:	430a      	orrs	r2, r1
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b08b      	sub	sp, #44	; 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	2414      	movs	r4, #20
 800162e:	193b      	adds	r3, r7, r4
 8001630:	0018      	movs	r0, r3
 8001632:	2314      	movs	r3, #20
 8001634:	001a      	movs	r2, r3
 8001636:	2100      	movs	r1, #0
 8001638:	f002 f86e 	bl	8003718 <memset>
  if(huart->Instance==LPUART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_UART_MspInit+0xc0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d14a      	bne.n	80016dc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 8001648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	02c9      	lsls	r1, r1, #11
 8001650:	430a      	orrs	r2, r1
 8001652:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 8001656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 800165a:	2104      	movs	r1, #4
 800165c:	430a      	orrs	r2, r1
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	2204      	movs	r2, #4
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 800166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 8001672:	2102      	movs	r1, #2
 8001674:	430a      	orrs	r2, r1
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_UART_MspInit+0xc4>)
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001684:	193b      	adds	r3, r7, r4
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	193b      	adds	r3, r7, r4
 800168c:	2202      	movs	r2, #2
 800168e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	193b      	adds	r3, r7, r4
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	2203      	movs	r2, #3
 800169a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800169c:	193b      	adds	r3, r7, r4
 800169e:	2206      	movs	r2, #6
 80016a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_UART_MspInit+0xc8>)
 80016a6:	0019      	movs	r1, r3
 80016a8:	0010      	movs	r0, r2
 80016aa:	f000 fa7f 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ae:	0021      	movs	r1, r4
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	00d2      	lsls	r2, r2, #3
 80016b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2202      	movs	r2, #2
 80016bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2203      	movs	r2, #3
 80016c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2206      	movs	r2, #6
 80016ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_UART_MspInit+0xcc>)
 80016d4:	0019      	movs	r1, r3
 80016d6:	0010      	movs	r0, r2
 80016d8:	f000 fa68 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b00b      	add	sp, #44	; 0x2c
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	40004800 	.word	0x40004800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	50000800 	.word	0x50000800
 80016f0:	50000400 	.word	0x50000400

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 f93a 	bl	8001990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00a      	b.n	800174a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001734:	e000      	b.n	8001738 <_read+0x16>
 8001736:	bf00      	nop
 8001738:	0001      	movs	r1, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	b2ca      	uxtb	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbf0      	blt.n	8001734 <_read+0x12>
	}

return len;
 8001752:	687b      	ldr	r3, [r7, #4]
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b006      	add	sp, #24
 800175a:	bd80      	pop	{r7, pc}

0800175c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e009      	b.n	8001782 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	e000      	b.n	800177c <_write+0x20>
 800177a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbf1      	blt.n	800176e <_write+0x12>
	}
	return len;
 800178a:	687b      	ldr	r3, [r7, #4]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b006      	add	sp, #24
 8001792:	bd80      	pop	{r7, pc}

08001794 <_close>:

int _close(int file)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	return -1;
 800179c:	2301      	movs	r3, #1
 800179e:	425b      	negs	r3, r3
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0192      	lsls	r2, r2, #6
 80017b8:	605a      	str	r2, [r3, #4]
	return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_isatty>:

int _isatty(int file)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	0018      	movs	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
	return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f001 ff52 	bl	80036c4 <__errno>
 8001820:	0003      	movs	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	2301      	movs	r3, #1
 8001828:	425b      	negs	r3, r3
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	18d2      	adds	r2, r2, r3
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b006      	add	sp, #24
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20002000 	.word	0x20002000
 800184c:	00000400 	.word	0x00000400
 8001850:	20000210 	.word	0x20000210
 8001854:	200002c8 	.word	0x200002c8

08001858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001866:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <LoopForever+0x6>)
    LDR R1, [R0]
 800186a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800186c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <LoopForever+0xa>)
    CMP R1, R2
 8001870:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001872:	d105      	bne.n	8001880 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001874:	4812      	ldr	r0, [pc, #72]	; (80018c0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001876:	4913      	ldr	r1, [pc, #76]	; (80018c4 <LoopForever+0x12>)
    STR R1, [R0]
 8001878:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800187a:	4813      	ldr	r0, [pc, #76]	; (80018c8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800187c:	4913      	ldr	r1, [pc, #76]	; (80018cc <LoopForever+0x1a>)
    STR R1, [R0]
 800187e:	6001      	str	r1, [r0, #0]

08001880 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001880:	4813      	ldr	r0, [pc, #76]	; (80018d0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001882:	4914      	ldr	r1, [pc, #80]	; (80018d4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <LoopForever+0x26>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001898:	4c11      	ldr	r4, [pc, #68]	; (80018e0 <LoopForever+0x2e>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018a6:	f7ff ffd7 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f001 ff11 	bl	80036d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fc9b 	bl	80011e8 <main>

080018b2 <LoopForever>:

LoopForever:
    b LoopForever
 80018b2:	e7fe      	b.n	80018b2 <LoopForever>
   ldr   r0, =_estack
 80018b4:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80018b8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80018bc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80018c0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80018c4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80018c8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80018cc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80018d8:	080048b0 	.word	0x080048b0
  ldr r2, =_sbss
 80018dc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80018e0:	200002c4 	.word	0x200002c4

080018e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_IRQHandler>
	...

080018e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_Init+0x3c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_Init+0x3c>)
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f811 	bl	8001928 <HAL_InitTick>
 8001906:	1e03      	subs	r3, r0, #0
 8001908:	d003      	beq.n	8001912 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e001      	b.n	8001916 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001912:	f7ff fe73 	bl	80015fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40022000 	.word	0x40022000

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_InitTick+0x5c>)
 8001932:	681c      	ldr	r4, [r3, #0]
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_InitTick+0x60>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	0019      	movs	r1, r3
 800193a:	23fa      	movs	r3, #250	; 0xfa
 800193c:	0098      	lsls	r0, r3, #2
 800193e:	f7fe fbed 	bl	800011c <__udivsi3>
 8001942:	0003      	movs	r3, r0
 8001944:	0019      	movs	r1, r3
 8001946:	0020      	movs	r0, r4
 8001948:	f7fe fbe8 	bl	800011c <__udivsi3>
 800194c:	0003      	movs	r3, r0
 800194e:	0018      	movs	r0, r3
 8001950:	f000 f91f 	bl	8001b92 <HAL_SYSTICK_Config>
 8001954:	1e03      	subs	r3, r0, #0
 8001956:	d001      	beq.n	800195c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e00f      	b.n	800197c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d80b      	bhi.n	800197a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	2301      	movs	r3, #1
 8001966:	425b      	negs	r3, r3
 8001968:	2200      	movs	r2, #0
 800196a:	0018      	movs	r0, r3
 800196c:	f000 f8fc 	bl	8001b68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_InitTick+0x64>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b003      	add	sp, #12
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	20000180 	.word	0x20000180
 8001988:	2000018c 	.word	0x2000018c
 800198c:	20000188 	.word	0x20000188

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x1c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	001a      	movs	r2, r3
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_IncTick+0x20>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	18d2      	adds	r2, r2, r3
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_IncTick+0x20>)
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	2000018c 	.word	0x2000018c
 80019b0:	200002b0 	.word	0x200002b0

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <HAL_GetTick+0x10>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	200002b0 	.word	0x200002b0

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff fff0 	bl	80019b4 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	001a      	movs	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	189b      	adds	r3, r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	f7ff ffe0 	bl	80019b4 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	2000018c 	.word	0x2000018c

08001a10 <HAL_Delay_us>:

}

void HAL_Delay_us(uint32_t tick)

{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

unsigned int start, current;

start = *DWT_CYCCNT;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_Delay_us+0x30>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60fb      	str	r3, [r7, #12]

do

{

current = *DWT_CYCCNT;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_Delay_us+0x30>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60bb      	str	r3, [r7, #8]

} while((current - start) < tick);
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f5      	bhi.n	8001a20 <HAL_Delay_us+0x10>

}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000184 	.word	0x20000184

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b7f      	cmp	r3, #127	; 0x7f
 8001a58:	d828      	bhi.n	8001aac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <__NVIC_SetPriority+0xd4>)
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	33c0      	adds	r3, #192	; 0xc0
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	589b      	ldr	r3, [r3, r2]
 8001a6a:	1dfa      	adds	r2, r7, #7
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	0011      	movs	r1, r2
 8001a70:	2203      	movs	r2, #3
 8001a72:	400a      	ands	r2, r1
 8001a74:	00d2      	lsls	r2, r2, #3
 8001a76:	21ff      	movs	r1, #255	; 0xff
 8001a78:	4091      	lsls	r1, r2
 8001a7a:	000a      	movs	r2, r1
 8001a7c:	43d2      	mvns	r2, r2
 8001a7e:	401a      	ands	r2, r3
 8001a80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	22ff      	movs	r2, #255	; 0xff
 8001a88:	401a      	ands	r2, r3
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	2303      	movs	r3, #3
 8001a92:	4003      	ands	r3, r0
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a98:	481f      	ldr	r0, [pc, #124]	; (8001b18 <__NVIC_SetPriority+0xd4>)
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	33c0      	adds	r3, #192	; 0xc0
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001aaa:	e031      	b.n	8001b10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <__NVIC_SetPriority+0xd8>)
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	3b08      	subs	r3, #8
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3306      	adds	r3, #6
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	18d3      	adds	r3, r2, r3
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1dfa      	adds	r2, r7, #7
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	0011      	movs	r1, r2
 8001acc:	2203      	movs	r2, #3
 8001ace:	400a      	ands	r2, r1
 8001ad0:	00d2      	lsls	r2, r2, #3
 8001ad2:	21ff      	movs	r1, #255	; 0xff
 8001ad4:	4091      	lsls	r1, r2
 8001ad6:	000a      	movs	r2, r1
 8001ad8:	43d2      	mvns	r2, r2
 8001ada:	401a      	ands	r2, r3
 8001adc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	019b      	lsls	r3, r3, #6
 8001ae2:	22ff      	movs	r2, #255	; 0xff
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	0018      	movs	r0, r3
 8001aec:	2303      	movs	r3, #3
 8001aee:	4003      	ands	r3, r0
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <__NVIC_SetPriority+0xd8>)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	001c      	movs	r4, r3
 8001afc:	230f      	movs	r3, #15
 8001afe:	4023      	ands	r3, r4
 8001b00:	3b08      	subs	r3, #8
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	430a      	orrs	r2, r1
 8001b06:	3306      	adds	r3, #6
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	18c3      	adds	r3, r0, r3
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b003      	add	sp, #12
 8001b16:	bd90      	pop	{r4, r7, pc}
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	045b      	lsls	r3, r3, #17
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d301      	bcc.n	8001b38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b34:	2301      	movs	r3, #1
 8001b36:	e010      	b.n	8001b5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <SysTick_Config+0x44>)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b40:	2301      	movs	r3, #1
 8001b42:	425b      	negs	r3, r3
 8001b44:	2103      	movs	r1, #3
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff ff7c 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x44>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x44>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	210f      	movs	r1, #15
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	1c02      	adds	r2, r0, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	0011      	movs	r1, r2
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff ffbf 	bl	8001b20 <SysTick_Config>
 8001ba2:	0003      	movs	r3, r0
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bc2:	e149      	b.n	8001e58 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4091      	lsls	r1, r2
 8001bce:	000a      	movs	r2, r1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d100      	bne.n	8001bdc <HAL_GPIO_Init+0x30>
 8001bda:	e13a      	b.n	8001e52 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d005      	beq.n	8001bf4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2203      	movs	r2, #3
 8001bee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	409a      	lsls	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	43da      	mvns	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	409a      	lsls	r2, r3
 8001c16:	0013      	movs	r3, r2
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	2201      	movs	r2, #1
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d017      	beq.n	8001c92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	43da      	mvns	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	409a      	lsls	r2, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	58d3      	ldr	r3, [r2, r3]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2207      	movs	r2, #7
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2107      	movs	r1, #7
 8001cca:	400b      	ands	r3, r1
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	6939      	ldr	r1, [r7, #16]
 8001ce4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	401a      	ands	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	0013      	movs	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	4013      	ands	r3, r2
 8001d24:	d100      	bne.n	8001d28 <HAL_GPIO_Init+0x17c>
 8001d26:	e094      	b.n	8001e52 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d34:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	589b      	ldr	r3, [r3, r2]
 8001d40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2203      	movs	r2, #3
 8001d46:	4013      	ands	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	0013      	movs	r3, r2
 8001d50:	43da      	mvns	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	23a0      	movs	r3, #160	; 0xa0
 8001d5c:	05db      	lsls	r3, r3, #23
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x1de>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x1da>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a43      	ldr	r2, [pc, #268]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x1d6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a42      	ldr	r2, [pc, #264]	; (8001e80 <HAL_GPIO_Init+0x2d4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x1d2>
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	2103      	movs	r1, #3
 8001d90:	400a      	ands	r2, r1
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	025b      	lsls	r3, r3, #9
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	029b      	lsls	r3, r3, #10
 8001dec:	4013      	ands	r3, r2
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	035b      	lsls	r3, r3, #13
 8001e16:	4013      	ands	r3, r2
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	039b      	lsls	r3, r3, #14
 8001e40:	4013      	ands	r3, r2
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	1e13      	subs	r3, r2, #0
 8001e62:	d000      	beq.n	8001e66 <HAL_GPIO_Init+0x2ba>
 8001e64:	e6ae      	b.n	8001bc4 <HAL_GPIO_Init+0x18>
  }
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b006      	add	sp, #24
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	50000400 	.word	0x50000400
 8001e7c:	50000800 	.word	0x50000800
 8001e80:	50001c00 	.word	0x50001c00
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	000a      	movs	r2, r1
 8001e92:	1cbb      	adds	r3, r7, #2
 8001e94:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	1cba      	adds	r2, r7, #2
 8001e9c:	8812      	ldrh	r2, [r2, #0]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e003      	b.n	8001eb4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	781b      	ldrb	r3, [r3, #0]
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	0008      	movs	r0, r1
 8001ecc:	0011      	movs	r1, r2
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	1c02      	adds	r2, r0, #0
 8001ed2:	801a      	strh	r2, [r3, #0]
 8001ed4:	1c7b      	adds	r3, r7, #1
 8001ed6:	1c0a      	adds	r2, r1, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eda:	1c7b      	adds	r3, r7, #1
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	1cbb      	adds	r3, r7, #2
 8001ee4:	881a      	ldrh	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001eea:	e003      	b.n	8001ef4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001eec:	1cbb      	adds	r3, r7, #2
 8001eee:	881a      	ldrh	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b5b0      	push	{r4, r5, r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f000 fb6c 	bl	80025e8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f10:	4bc8      	ldr	r3, [pc, #800]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	220c      	movs	r2, #12
 8001f16:	4013      	ands	r3, r2
 8001f18:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1a:	4bc6      	ldr	r3, [pc, #792]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	025b      	lsls	r3, r3, #9
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <HAL_RCC_OscConfig+0x36>
 8001f30:	e07d      	b.n	800202e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d007      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d112      	bne.n	8001f64 <HAL_RCC_OscConfig+0x68>
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d10d      	bne.n	8001f64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	4bba      	ldr	r3, [pc, #744]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	d100      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5a>
 8001f54:	e06a      	b.n	800202c <HAL_RCC_OscConfig+0x130>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d166      	bne.n	800202c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f000 fb42 	bl	80025e8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	025b      	lsls	r3, r3, #9
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_OscConfig+0x84>
 8001f70:	4bb0      	ldr	r3, [pc, #704]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4baf      	ldr	r3, [pc, #700]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	0249      	lsls	r1, r1, #9
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e027      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	23a0      	movs	r3, #160	; 0xa0
 8001f86:	02db      	lsls	r3, r3, #11
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10e      	bne.n	8001faa <HAL_RCC_OscConfig+0xae>
 8001f8c:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4ba8      	ldr	r3, [pc, #672]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	02c9      	lsls	r1, r1, #11
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4ba5      	ldr	r3, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	0249      	lsls	r1, r1, #9
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e012      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001faa:	4ba2      	ldr	r3, [pc, #648]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4ba1      	ldr	r3, [pc, #644]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	49a1      	ldr	r1, [pc, #644]	; (8002238 <HAL_RCC_OscConfig+0x33c>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	4b9f      	ldr	r3, [pc, #636]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4b9b      	ldr	r3, [pc, #620]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b9a      	ldr	r3, [pc, #616]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001fca:	499c      	ldr	r1, [pc, #624]	; (800223c <HAL_RCC_OscConfig+0x340>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d014      	beq.n	8002002 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fcec 	bl	80019b4 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fce7 	bl	80019b4 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b64      	cmp	r3, #100	; 0x64
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e2f9      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff4:	4b8f      	ldr	r3, [pc, #572]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	029b      	lsls	r3, r3, #10
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0xe6>
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7ff fcd7 	bl	80019b4 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff fcd2 	bl	80019b4 <HAL_GetTick>
 8002010:	0002      	movs	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e2e4      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800201e:	4b85      	ldr	r3, [pc, #532]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	4013      	ands	r3, r2
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x110>
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d100      	bne.n	800203a <HAL_RCC_OscConfig+0x13e>
 8002038:	e099      	b.n	800216e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	2220      	movs	r2, #32
 8002044:	4013      	ands	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002048:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b79      	ldr	r3, [pc, #484]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 800204e:	2120      	movs	r1, #32
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	2220      	movs	r2, #32
 8002058:	4393      	bics	r3, r2
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d13e      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1ea>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d13b      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800206e:	4b71      	ldr	r3, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2204      	movs	r2, #4
 8002074:	4013      	ands	r3, r2
 8002076:	d004      	beq.n	8002082 <HAL_RCC_OscConfig+0x186>
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e2b2      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a6e      	ldr	r2, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x344>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	021a      	lsls	r2, r3, #8
 8002092:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002098:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2209      	movs	r2, #9
 800209e:	4393      	bics	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80020a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020aa:	f000 fbeb 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 80020ae:	0001      	movs	r1, r0
 80020b0:	4b60      	ldr	r3, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	220f      	movs	r2, #15
 80020b8:	4013      	ands	r3, r2
 80020ba:	4a62      	ldr	r2, [pc, #392]	; (8002244 <HAL_RCC_OscConfig+0x348>)
 80020bc:	5cd3      	ldrb	r3, [r2, r3]
 80020be:	000a      	movs	r2, r1
 80020c0:	40da      	lsrs	r2, r3
 80020c2:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_RCC_OscConfig+0x34c>)
 80020c4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020c6:	4b61      	ldr	r3, [pc, #388]	; (800224c <HAL_RCC_OscConfig+0x350>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2513      	movs	r5, #19
 80020cc:	197c      	adds	r4, r7, r5
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff fc2a 	bl	8001928 <HAL_InitTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020d8:	197b      	adds	r3, r7, r5
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d046      	beq.n	800216e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80020e0:	197b      	adds	r3, r7, r5
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	e280      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d027      	beq.n	800213c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020ec:	4b51      	ldr	r3, [pc, #324]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2209      	movs	r2, #9
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80020f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff fc59 	bl	80019b4 <HAL_GetTick>
 8002102:	0003      	movs	r3, r0
 8002104:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002108:	f7ff fc54 	bl	80019b4 <HAL_GetTick>
 800210c:	0002      	movs	r2, r0
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e266      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2204      	movs	r2, #4
 8002120:	4013      	ands	r3, r2
 8002122:	d0f1      	beq.n	8002108 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a45      	ldr	r2, [pc, #276]	; (8002240 <HAL_RCC_OscConfig+0x344>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	021a      	lsls	r2, r3, #8
 8002134:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	e018      	b.n	800216e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002142:	2101      	movs	r1, #1
 8002144:	438a      	bics	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fc34 	bl	80019b4 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff fc2f 	bl	80019b4 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e241      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2204      	movs	r2, #4
 800216a:	4013      	ands	r3, r2
 800216c:	d1f1      	bne.n	8002152 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2210      	movs	r2, #16
 8002174:	4013      	ands	r3, r2
 8002176:	d100      	bne.n	800217a <HAL_RCC_OscConfig+0x27e>
 8002178:	e0a1      	b.n	80022be <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d140      	bne.n	8002202 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x29c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e227      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002198:	4b26      	ldr	r3, [pc, #152]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_RCC_OscConfig+0x354>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	0a19      	lsrs	r1, r3, #8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	061a      	lsls	r2, r3, #24
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	0b5b      	lsrs	r3, r3, #13
 80021c6:	3301      	adds	r3, #1
 80021c8:	2280      	movs	r2, #128	; 0x80
 80021ca:	0212      	lsls	r2, r2, #8
 80021cc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	210f      	movs	r1, #15
 80021d6:	400b      	ands	r3, r1
 80021d8:	491a      	ldr	r1, [pc, #104]	; (8002244 <HAL_RCC_OscConfig+0x348>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_RCC_OscConfig+0x34c>)
 80021e0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x350>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2513      	movs	r5, #19
 80021e8:	197c      	adds	r4, r7, r5
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff fb9c 	bl	8001928 <HAL_InitTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021f4:	197b      	adds	r3, r7, r5
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d060      	beq.n	80022be <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80021fc:	197b      	adds	r3, r7, r5
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	e1f2      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d03f      	beq.n	800228a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	0049      	lsls	r1, r1, #1
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fbcc 	bl	80019b4 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002220:	e018      	b.n	8002254 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002222:	f7ff fbc7 	bl	80019b4 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d911      	bls.n	8002254 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1d9      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
 8002234:	40021000 	.word	0x40021000
 8002238:	fffeffff 	.word	0xfffeffff
 800223c:	fffbffff 	.word	0xfffbffff
 8002240:	ffffe0ff 	.word	0xffffe0ff
 8002244:	0800479c 	.word	0x0800479c
 8002248:	20000180 	.word	0x20000180
 800224c:	20000188 	.word	0x20000188
 8002250:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002254:	4bc9      	ldr	r3, [pc, #804]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4013      	ands	r3, r2
 800225e:	d0e0      	beq.n	8002222 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002260:	4bc6      	ldr	r3, [pc, #792]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4ac6      	ldr	r2, [pc, #792]	; (8002580 <HAL_RCC_OscConfig+0x684>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	4bc3      	ldr	r3, [pc, #780]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002270:	430a      	orrs	r2, r1
 8002272:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002274:	4bc1      	ldr	r3, [pc, #772]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	0a19      	lsrs	r1, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	061a      	lsls	r2, r3, #24
 8002282:	4bbe      	ldr	r3, [pc, #760]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	e019      	b.n	80022be <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800228a:	4bbc      	ldr	r3, [pc, #752]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4bbb      	ldr	r3, [pc, #748]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002290:	49bc      	ldr	r1, [pc, #752]	; (8002584 <HAL_RCC_OscConfig+0x688>)
 8002292:	400a      	ands	r2, r1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff fb8d 	bl	80019b4 <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a0:	f7ff fb88 	bl	80019b4 <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e19a      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022b2:	4bb2      	ldr	r3, [pc, #712]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4013      	ands	r3, r2
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2208      	movs	r2, #8
 80022c4:	4013      	ands	r3, r2
 80022c6:	d036      	beq.n	8002336 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d019      	beq.n	8002304 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d0:	4baa      	ldr	r3, [pc, #680]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80022d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d4:	4ba9      	ldr	r3, [pc, #676]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fb6a 	bl	80019b4 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff fb65 	bl	80019b4 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e177      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022f8:	4ba0      	ldr	r3, [pc, #640]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d0f1      	beq.n	80022e6 <HAL_RCC_OscConfig+0x3ea>
 8002302:	e018      	b.n	8002336 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002304:	4b9d      	ldr	r3, [pc, #628]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002308:	4b9c      	ldr	r3, [pc, #624]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800230a:	2101      	movs	r1, #1
 800230c:	438a      	bics	r2, r1
 800230e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7ff fb50 	bl	80019b4 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231a:	f7ff fb4b 	bl	80019b4 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e15d      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800232c:	4b93      	ldr	r3, [pc, #588]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800232e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002330:	2202      	movs	r2, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d1f1      	bne.n	800231a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2204      	movs	r2, #4
 800233c:	4013      	ands	r3, r2
 800233e:	d100      	bne.n	8002342 <HAL_RCC_OscConfig+0x446>
 8002340:	e0ae      	b.n	80024a0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2023      	movs	r0, #35	; 0x23
 8002344:	183b      	adds	r3, r7, r0
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800234c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	055b      	lsls	r3, r3, #21
 8002352:	4013      	ands	r3, r2
 8002354:	d109      	bne.n	800236a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0549      	lsls	r1, r1, #21
 8002360:	430a      	orrs	r2, r1
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002364:	183b      	adds	r3, r7, r0
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b87      	ldr	r3, [pc, #540]	; (8002588 <HAL_RCC_OscConfig+0x68c>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d11a      	bne.n	80023ac <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b84      	ldr	r3, [pc, #528]	; (8002588 <HAL_RCC_OscConfig+0x68c>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b83      	ldr	r3, [pc, #524]	; (8002588 <HAL_RCC_OscConfig+0x68c>)
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	0049      	lsls	r1, r1, #1
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7ff fb16 	bl	80019b4 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7ff fb11 	bl	80019b4 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	; 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e123      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b79      	ldr	r3, [pc, #484]	; (8002588 <HAL_RCC_OscConfig+0x68c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4cc>
 80023b8:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023bc:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	651a      	str	r2, [r3, #80]	; 0x50
 80023c6:	e031      	b.n	800242c <HAL_RCC_OscConfig+0x530>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x4ee>
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d4:	4b69      	ldr	r3, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023d6:	496b      	ldr	r1, [pc, #428]	; (8002584 <HAL_RCC_OscConfig+0x688>)
 80023d8:	400a      	ands	r2, r1
 80023da:	651a      	str	r2, [r3, #80]	; 0x50
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e0:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023e2:	496a      	ldr	r1, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x690>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	651a      	str	r2, [r3, #80]	; 0x50
 80023e8:	e020      	b.n	800242c <HAL_RCC_OscConfig+0x530>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	23a0      	movs	r3, #160	; 0xa0
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10e      	bne.n	8002414 <HAL_RCC_OscConfig+0x518>
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fa:	4b60      	ldr	r3, [pc, #384]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	00c9      	lsls	r1, r1, #3
 8002400:	430a      	orrs	r2, r1
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
 8002404:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002408:	4b5c      	ldr	r3, [pc, #368]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	0049      	lsls	r1, r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	651a      	str	r2, [r3, #80]	; 0x50
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x530>
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800241a:	495a      	ldr	r1, [pc, #360]	; (8002584 <HAL_RCC_OscConfig+0x688>)
 800241c:	400a      	ands	r2, r1
 800241e:	651a      	str	r2, [r3, #80]	; 0x50
 8002420:	4b56      	ldr	r3, [pc, #344]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002426:	4959      	ldr	r1, [pc, #356]	; (800258c <HAL_RCC_OscConfig+0x690>)
 8002428:	400a      	ands	r2, r1
 800242a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7ff fabe 	bl	80019b4 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800243c:	e009      	b.n	8002452 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff fab9 	bl	80019b4 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a51      	ldr	r2, [pc, #324]	; (8002590 <HAL_RCC_OscConfig+0x694>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0ca      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d0ef      	beq.n	800243e <HAL_RCC_OscConfig+0x542>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7ff faa8 	bl	80019b4 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002468:	e009      	b.n	800247e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff faa3 	bl	80019b4 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a46      	ldr	r2, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x694>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0b4      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800247e:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800248a:	2323      	movs	r3, #35	; 0x23
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002498:	4b38      	ldr	r3, [pc, #224]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800249a:	493e      	ldr	r1, [pc, #248]	; (8002594 <HAL_RCC_OscConfig+0x698>)
 800249c:	400a      	ands	r2, r1
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d100      	bne.n	80024aa <HAL_RCC_OscConfig+0x5ae>
 80024a8:	e09d      	b.n	80025e6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d100      	bne.n	80024b2 <HAL_RCC_OscConfig+0x5b6>
 80024b0:	e076      	b.n	80025a0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d145      	bne.n	8002546 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80024c0:	4935      	ldr	r1, [pc, #212]	; (8002598 <HAL_RCC_OscConfig+0x69c>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff fa75 	bl	80019b4 <HAL_GetTick>
 80024ca:	0003      	movs	r3, r0
 80024cc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff fa70 	bl	80019b4 <HAL_GetTick>
 80024d4:	0002      	movs	r2, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e082      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	049b      	lsls	r3, r3, #18
 80024ea:	4013      	ands	r3, r2
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCC_OscConfig+0x680>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <HAL_RCC_OscConfig+0x6a0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	431a      	orrs	r2, r3
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800250a:	430a      	orrs	r2, r1
 800250c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0449      	lsls	r1, r1, #17
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fa4a 	bl	80019b4 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fa45 	bl	80019b4 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e057      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	049b      	lsls	r3, r3, #18
 8002540:	4013      	ands	r3, r2
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x62a>
 8002544:	e04f      	b.n	80025e6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_RCC_OscConfig+0x680>)
 800254c:	4912      	ldr	r1, [pc, #72]	; (8002598 <HAL_RCC_OscConfig+0x69c>)
 800254e:	400a      	ands	r2, r1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fa2f 	bl	80019b4 <HAL_GetTick>
 8002556:	0003      	movs	r3, r0
 8002558:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff fa2a 	bl	80019b4 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e03c      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_OscConfig+0x680>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	049b      	lsls	r3, r3, #18
 8002576:	4013      	ands	r3, r2
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x660>
 800257a:	e034      	b.n	80025e6 <HAL_RCC_OscConfig+0x6ea>
 800257c:	40021000 	.word	0x40021000
 8002580:	ffff1fff 	.word	0xffff1fff
 8002584:	fffffeff 	.word	0xfffffeff
 8002588:	40007000 	.word	0x40007000
 800258c:	fffffbff 	.word	0xfffffbff
 8002590:	00001388 	.word	0x00001388
 8002594:	efffffff 	.word	0xefffffff
 8002598:	feffffff 	.word	0xfeffffff
 800259c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e01d      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_OscConfig+0x6f4>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	025b      	lsls	r3, r3, #9
 80025b8:	401a      	ands	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	429a      	cmp	r2, r3
 80025c0:	d10f      	bne.n	80025e2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	23f0      	movs	r3, #240	; 0xf0
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	401a      	ands	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	23c0      	movs	r3, #192	; 0xc0
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b00a      	add	sp, #40	; 0x28
 80025ee:	bdb0      	pop	{r4, r5, r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e128      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b96      	ldr	r3, [pc, #600]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d91e      	bls.n	8002654 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b93      	ldr	r3, [pc, #588]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	4393      	bics	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	4b90      	ldr	r3, [pc, #576]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002628:	f7ff f9c4 	bl	80019b4 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002630:	e009      	b.n	8002646 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002632:	f7ff f9bf 	bl	80019b4 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a8a      	ldr	r2, [pc, #552]	; (8002868 <HAL_RCC_ClockConfig+0x274>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e109      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b87      	ldr	r3, [pc, #540]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	4013      	ands	r3, r2
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2202      	movs	r2, #2
 800265a:	4013      	ands	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265e:	4b83      	ldr	r3, [pc, #524]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	22f0      	movs	r2, #240	; 0xf0
 8002664:	4393      	bics	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b7f      	ldr	r3, [pc, #508]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 800266e:	430a      	orrs	r2, r1
 8002670:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	4013      	ands	r3, r2
 800267a:	d100      	bne.n	800267e <HAL_RCC_ClockConfig+0x8a>
 800267c:	e089      	b.n	8002792 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002686:	4b79      	ldr	r3, [pc, #484]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	4013      	ands	r3, r2
 8002690:	d120      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0e1      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800269e:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	049b      	lsls	r3, r3, #18
 80026a6:	4013      	ands	r3, r2
 80026a8:	d114      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0d5      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2204      	movs	r2, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	d109      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0ca      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026c4:	4b69      	ldr	r3, [pc, #420]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0c2      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d4:	4b65      	ldr	r3, [pc, #404]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2203      	movs	r2, #3
 80026da:	4393      	bics	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4b62      	ldr	r3, [pc, #392]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff f964 	bl	80019b4 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d111      	bne.n	800271c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f8:	e009      	b.n	800270e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fa:	f7ff f95b 	bl	80019b4 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_ClockConfig+0x274>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0a5      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800270e:	4b57      	ldr	r3, [pc, #348]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	220c      	movs	r2, #12
 8002714:	4013      	ands	r3, r2
 8002716:	2b08      	cmp	r3, #8
 8002718:	d1ef      	bne.n	80026fa <HAL_RCC_ClockConfig+0x106>
 800271a:	e03a      	b.n	8002792 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d111      	bne.n	8002748 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	e009      	b.n	800273a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002726:	f7ff f945 	bl	80019b4 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	4a4d      	ldr	r2, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x274>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e08f      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273a:	4b4c      	ldr	r3, [pc, #304]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	220c      	movs	r2, #12
 8002740:	4013      	ands	r3, r2
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_ClockConfig+0x132>
 8002746:	e024      	b.n	8002792 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d11b      	bne.n	8002788 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002750:	e009      	b.n	8002766 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002752:	f7ff f92f 	bl	80019b4 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a42      	ldr	r2, [pc, #264]	; (8002868 <HAL_RCC_ClockConfig+0x274>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e079      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	220c      	movs	r2, #12
 800276c:	4013      	ands	r3, r2
 800276e:	2b04      	cmp	r3, #4
 8002770:	d1ef      	bne.n	8002752 <HAL_RCC_ClockConfig+0x15e>
 8002772:	e00e      	b.n	8002792 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7ff f91e 	bl	80019b4 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <HAL_RCC_ClockConfig+0x274>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e068      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002788:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	220c      	movs	r2, #12
 800278e:	4013      	ands	r3, r2
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	4013      	ands	r3, r2
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d21e      	bcs.n	80027de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a0:	4b30      	ldr	r3, [pc, #192]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027b2:	f7ff f8ff 	bl	80019b4 <HAL_GetTick>
 80027b6:	0003      	movs	r3, r0
 80027b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	e009      	b.n	80027d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7ff f8fa 	bl	80019b4 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	4a28      	ldr	r2, [pc, #160]	; (8002868 <HAL_RCC_ClockConfig+0x274>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e044      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_ClockConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d1ee      	bne.n	80027bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2204      	movs	r2, #4
 80027e4:	4013      	ands	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_RCC_ClockConfig+0x27c>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2208      	movs	r2, #8
 8002802:	4013      	ands	r3, r2
 8002804:	d00a      	beq.n	800281c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <HAL_RCC_ClockConfig+0x280>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00da      	lsls	r2, r3, #3
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800281c:	f000 f832 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002820:	0001      	movs	r1, r0
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x278>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	220f      	movs	r2, #15
 800282a:	4013      	ands	r3, r2
 800282c:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x284>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	000a      	movs	r2, r1
 8002832:	40da      	lsrs	r2, r3
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_ClockConfig+0x288>)
 8002836:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_ClockConfig+0x28c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	250b      	movs	r5, #11
 800283e:	197c      	adds	r4, r7, r5
 8002840:	0018      	movs	r0, r3
 8002842:	f7ff f871 	bl	8001928 <HAL_InitTick>
 8002846:	0003      	movs	r3, r0
 8002848:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800284a:	197b      	adds	r3, r7, r5
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002852:	197b      	adds	r3, r7, r5
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	e000      	b.n	800285a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b004      	add	sp, #16
 8002860:	bdb0      	pop	{r4, r5, r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	40022000 	.word	0x40022000
 8002868:	00001388 	.word	0x00001388
 800286c:	40021000 	.word	0x40021000
 8002870:	fffff8ff 	.word	0xfffff8ff
 8002874:	ffffc7ff 	.word	0xffffc7ff
 8002878:	0800479c 	.word	0x0800479c
 800287c:	20000180 	.word	0x20000180
 8002880:	20000188 	.word	0x20000188

08002884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800288a:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_GetSysClockFreq+0x138>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002892:	230c      	movs	r3, #12
 8002894:	4013      	ands	r3, r2
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d014      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x40>
 800289a:	d900      	bls.n	800289e <HAL_RCC_GetSysClockFreq+0x1a>
 800289c:	e07b      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x112>
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x24>
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x3a>
 80028a6:	e076      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028a8:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_GetSysClockFreq+0x138>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2210      	movs	r2, #16
 80028ae:	4013      	ands	r3, r2
 80028b0:	d002      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028b6:	e07c      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80028b8:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028bc:	e079      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028be:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028c2:	e076      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	0c9a      	lsrs	r2, r3, #18
 80028c8:	230f      	movs	r3, #15
 80028ca:	401a      	ands	r2, r3
 80028cc:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_RCC_GetSysClockFreq+0x148>)
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	0d9a      	lsrs	r2, r3, #22
 80028d6:	2303      	movs	r3, #3
 80028d8:	4013      	ands	r3, r2
 80028da:	3301      	adds	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_GetSysClockFreq+0x138>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	025b      	lsls	r3, r3, #9
 80028e6:	4013      	ands	r3, r2
 80028e8:	d01a      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	4a35      	ldr	r2, [pc, #212]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80028f4:	2300      	movs	r3, #0
 80028f6:	69b8      	ldr	r0, [r7, #24]
 80028f8:	69f9      	ldr	r1, [r7, #28]
 80028fa:	f7fd fcbb 	bl	8000274 <__aeabi_lmul>
 80028fe:	0002      	movs	r2, r0
 8002900:	000b      	movs	r3, r1
 8002902:	0010      	movs	r0, r2
 8002904:	0019      	movs	r1, r3
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f7fd fc8f 	bl	8000234 <__aeabi_uldivmod>
 8002916:	0002      	movs	r2, r0
 8002918:	000b      	movs	r3, r1
 800291a:	0013      	movs	r3, r2
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
 800291e:	e037      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCC_GetSysClockFreq+0x138>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	4013      	ands	r3, r2
 8002928:	d01a      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002934:	2300      	movs	r3, #0
 8002936:	68b8      	ldr	r0, [r7, #8]
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	f7fd fc9b 	bl	8000274 <__aeabi_lmul>
 800293e:	0002      	movs	r2, r0
 8002940:	000b      	movs	r3, r1
 8002942:	0010      	movs	r0, r2
 8002944:	0019      	movs	r1, r3
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f7fd fc6f 	bl	8000234 <__aeabi_uldivmod>
 8002956:	0002      	movs	r2, r0
 8002958:	000b      	movs	r3, r1
 800295a:	0013      	movs	r3, r2
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
 800295e:	e017      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	0018      	movs	r0, r3
 8002964:	2300      	movs	r3, #0
 8002966:	0019      	movs	r1, r3
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x140>)
 800296a:	2300      	movs	r3, #0
 800296c:	f7fd fc82 	bl	8000274 <__aeabi_lmul>
 8002970:	0002      	movs	r2, r0
 8002972:	000b      	movs	r3, r1
 8002974:	0010      	movs	r0, r2
 8002976:	0019      	movs	r1, r3
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	001c      	movs	r4, r3
 800297c:	2300      	movs	r3, #0
 800297e:	001d      	movs	r5, r3
 8002980:	0022      	movs	r2, r4
 8002982:	002b      	movs	r3, r5
 8002984:	f7fd fc56 	bl	8000234 <__aeabi_uldivmod>
 8002988:	0002      	movs	r2, r0
 800298a:	000b      	movs	r3, r1
 800298c:	0013      	movs	r3, r2
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002994:	e00d      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_GetSysClockFreq+0x138>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0b5b      	lsrs	r3, r3, #13
 800299c:	2207      	movs	r2, #7
 800299e:	4013      	ands	r3, r2
 80029a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	3301      	adds	r3, #1
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	0212      	lsls	r2, r2, #8
 80029aa:	409a      	lsls	r2, r3
 80029ac:	0013      	movs	r3, r2
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b00e      	add	sp, #56	; 0x38
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	003d0900 	.word	0x003d0900
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200
 80029cc:	080047b4 	.word	0x080047b4

080029d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b02      	ldr	r3, [pc, #8]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	20000180 	.word	0x20000180

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e8:	f7ff fff2 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 80029ec:	0001      	movs	r1, r0
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	2207      	movs	r2, #7
 80029f6:	4013      	ands	r3, r2
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	40d9      	lsrs	r1, r3
 80029fe:	000b      	movs	r3, r1
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	080047ac 	.word	0x080047ac

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a14:	f7ff ffdc 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a18:	0001      	movs	r1, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	0adb      	lsrs	r3, r3, #11
 8002a20:	2207      	movs	r2, #7
 8002a22:	4013      	ands	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	40d9      	lsrs	r1, r3
 8002a2a:	000b      	movs	r3, r1
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	080047ac 	.word	0x080047ac

08002a3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a44:	2017      	movs	r0, #23
 8002a46:	183b      	adds	r3, r7, r0
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2220      	movs	r2, #32
 8002a52:	4013      	ands	r3, r2
 8002a54:	d100      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a56:	e0c2      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a58:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	055b      	lsls	r3, r3, #21
 8002a60:	4013      	ands	r3, r2
 8002a62:	d109      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a68:	4b7d      	ldr	r3, [pc, #500]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	0549      	lsls	r1, r1, #21
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a72:	183b      	adds	r3, r7, r0
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a78:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	d11a      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a84:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0049      	lsls	r1, r1, #1
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7fe ff8f 	bl	80019b4 <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	e008      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe ff8a 	bl	80019b4 <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0d4      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002aba:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	039b      	lsls	r3, r3, #14
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	23c0      	movs	r3, #192	; 0xc0
 8002acc:	039b      	lsls	r3, r3, #14
 8002ace:	4013      	ands	r3, r2
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d013      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	23c0      	movs	r3, #192	; 0xc0
 8002adc:	029b      	lsls	r3, r3, #10
 8002ade:	401a      	ands	r2, r3
 8002ae0:	23c0      	movs	r3, #192	; 0xc0
 8002ae2:	029b      	lsls	r3, r3, #10
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d10a      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	401a      	ands	r2, r3
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d101      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0ac      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002afe:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	029b      	lsls	r3, r3, #10
 8002b06:	4013      	ands	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	23c0      	movs	r3, #192	; 0xc0
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	4013      	ands	r3, r2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d033      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2220      	movs	r2, #32
 8002b26:	4013      	ands	r3, r2
 8002b28:	d02e      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2e:	4a4e      	ldr	r2, [pc, #312]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	0309      	lsls	r1, r1, #12
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b48:	4948      	ldr	r1, [pc, #288]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b4e:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d014      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe ff29 	bl	80019b4 <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b66:	e009      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe ff24 	bl	80019b4 <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e06d      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b7c:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d0ef      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	23c0      	movs	r3, #192	; 0xc0
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	401a      	ands	r2, r3
 8002b92:	23c0      	movs	r3, #192	; 0xc0
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	23c0      	movs	r3, #192	; 0xc0
 8002baa:	039b      	lsls	r3, r3, #14
 8002bac:	401a      	ands	r2, r3
 8002bae:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bb6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	23c0      	movs	r3, #192	; 0xc0
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc8:	2317      	movs	r3, #23
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bd8:	4927      	ldr	r1, [pc, #156]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bda:	400a      	ands	r2, r1
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	220c      	movs	r2, #12
 8002bee:	4393      	bics	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c06:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2208      	movs	r2, #8
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c28:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b006      	add	sp, #24
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffcffff 	.word	0xfffcffff
 8002c6c:	fff7ffff 	.word	0xfff7ffff
 8002c70:	00001388 	.word	0x00001388
 8002c74:	ffcfffff 	.word	0xffcfffff
 8002c78:	efffffff 	.word	0xefffffff
 8002c7c:	fffff3ff 	.word	0xfffff3ff
 8002c80:	ffffcfff 	.word	0xffffcfff
 8002c84:	fff3ffff 	.word	0xfff3ffff

08002c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e044      	b.n	8002d24 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d107      	bne.n	8002cb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2274      	movs	r2, #116	; 0x74
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fe fcb9 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2224      	movs	r2, #36	; 0x24
 8002cb6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 f8d8 	bl	8002e80 <UART_SetConfig>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e024      	b.n	8002d24 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fb2d 	bl	8003344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	490d      	ldr	r1, [pc, #52]	; (8002d2c <HAL_UART_Init+0xa4>)
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	212a      	movs	r1, #42	; 0x2a
 8002d06:	438a      	bics	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 fbc5 	bl	80034ac <UART_CheckIdleState>
 8002d22:	0003      	movs	r3, r0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	ffffb7ff 	.word	0xffffb7ff

08002d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	1dbb      	adds	r3, r7, #6
 8002d3e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d000      	beq.n	8002d4a <HAL_UART_Transmit+0x1a>
 8002d48:	e095      	b.n	8002e76 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_UART_Transmit+0x28>
 8002d50:	1dbb      	adds	r3, r7, #6
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e08d      	b.n	8002e78 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d109      	bne.n	8002d7c <HAL_UART_Transmit+0x4c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2201      	movs	r2, #1
 8002d74:	4013      	ands	r3, r2
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e07d      	b.n	8002e78 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2274      	movs	r2, #116	; 0x74
 8002d80:	5c9b      	ldrb	r3, [r3, r2]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Transmit+0x5a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e076      	b.n	8002e78 <HAL_UART_Transmit+0x148>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2274      	movs	r2, #116	; 0x74
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	2100      	movs	r1, #0
 8002d98:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2221      	movs	r2, #33	; 0x21
 8002d9e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fe08 	bl	80019b4 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1dba      	adds	r2, r7, #6
 8002dac:	2150      	movs	r1, #80	; 0x50
 8002dae:	8812      	ldrh	r2, [r2, #0]
 8002db0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1dba      	adds	r2, r7, #6
 8002db6:	2152      	movs	r1, #82	; 0x52
 8002db8:	8812      	ldrh	r2, [r2, #0]
 8002dba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d108      	bne.n	8002dda <HAL_UART_Transmit+0xaa>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	e003      	b.n	8002de2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2274      	movs	r2, #116	; 0x74
 8002de6:	2100      	movs	r1, #0
 8002de8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002dea:	e02c      	b.n	8002e46 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	0013      	movs	r3, r2
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	f000 fb9f 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8002dfe:	1e03      	subs	r3, r0, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e038      	b.n	8002e78 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	001a      	movs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	05d2      	lsls	r2, r2, #23
 8002e18:	0dd2      	lsrs	r2, r2, #23
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e007      	b.n	8002e34 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2252      	movs	r2, #82	; 0x52
 8002e38:	5a9b      	ldrh	r3, [r3, r2]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b299      	uxth	r1, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2252      	movs	r2, #82	; 0x52
 8002e44:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2252      	movs	r2, #82	; 0x52
 8002e4a:	5a9b      	ldrh	r3, [r3, r2]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1cc      	bne.n	8002dec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	f000 fb6c 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8002e64:	1e03      	subs	r3, r0, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e005      	b.n	8002e78 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b008      	add	sp, #32
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b08e      	sub	sp, #56	; 0x38
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e88:	231a      	movs	r3, #26
 8002e8a:	2218      	movs	r2, #24
 8002e8c:	4694      	mov	ip, r2
 8002e8e:	44bc      	add	ip, r7
 8002e90:	4463      	add	r3, ip
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4abc      	ldr	r2, [pc, #752]	; (80031a8 <UART_SetConfig+0x328>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4ab8      	ldr	r2, [pc, #736]	; (80031ac <UART_SetConfig+0x32c>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4ab2      	ldr	r2, [pc, #712]	; (80031b0 <UART_SetConfig+0x330>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4aad      	ldr	r2, [pc, #692]	; (80031b4 <UART_SetConfig+0x334>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4aa9      	ldr	r2, [pc, #676]	; (80031b8 <UART_SetConfig+0x338>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d136      	bne.n	8002f84 <UART_SetConfig+0x104>
 8002f16:	4ba9      	ldr	r3, [pc, #676]	; (80031bc <UART_SetConfig+0x33c>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d020      	beq.n	8002f64 <UART_SetConfig+0xe4>
 8002f22:	d827      	bhi.n	8002f74 <UART_SetConfig+0xf4>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d00d      	beq.n	8002f44 <UART_SetConfig+0xc4>
 8002f28:	d824      	bhi.n	8002f74 <UART_SetConfig+0xf4>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <UART_SetConfig+0xb4>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d010      	beq.n	8002f54 <UART_SetConfig+0xd4>
 8002f32:	e01f      	b.n	8002f74 <UART_SetConfig+0xf4>
 8002f34:	231b      	movs	r3, #27
 8002f36:	2218      	movs	r2, #24
 8002f38:	4694      	mov	ip, r2
 8002f3a:	44bc      	add	ip, r7
 8002f3c:	4463      	add	r3, ip
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e06f      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002f44:	231b      	movs	r3, #27
 8002f46:	2218      	movs	r2, #24
 8002f48:	4694      	mov	ip, r2
 8002f4a:	44bc      	add	ip, r7
 8002f4c:	4463      	add	r3, ip
 8002f4e:	2202      	movs	r2, #2
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e067      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002f54:	231b      	movs	r3, #27
 8002f56:	2218      	movs	r2, #24
 8002f58:	4694      	mov	ip, r2
 8002f5a:	44bc      	add	ip, r7
 8002f5c:	4463      	add	r3, ip
 8002f5e:	2204      	movs	r2, #4
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e05f      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002f64:	231b      	movs	r3, #27
 8002f66:	2218      	movs	r2, #24
 8002f68:	4694      	mov	ip, r2
 8002f6a:	44bc      	add	ip, r7
 8002f6c:	4463      	add	r3, ip
 8002f6e:	2208      	movs	r2, #8
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e057      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002f74:	231b      	movs	r3, #27
 8002f76:	2218      	movs	r2, #24
 8002f78:	4694      	mov	ip, r2
 8002f7a:	44bc      	add	ip, r7
 8002f7c:	4463      	add	r3, ip
 8002f7e:	2210      	movs	r2, #16
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e04f      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a89      	ldr	r2, [pc, #548]	; (80031b0 <UART_SetConfig+0x330>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d143      	bne.n	8003016 <UART_SetConfig+0x196>
 8002f8e:	4b8b      	ldr	r3, [pc, #556]	; (80031bc <UART_SetConfig+0x33c>)
 8002f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f92:	23c0      	movs	r3, #192	; 0xc0
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	22c0      	movs	r2, #192	; 0xc0
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d02a      	beq.n	8002ff6 <UART_SetConfig+0x176>
 8002fa0:	22c0      	movs	r2, #192	; 0xc0
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d82e      	bhi.n	8003006 <UART_SetConfig+0x186>
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d012      	beq.n	8002fd6 <UART_SetConfig+0x156>
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d826      	bhi.n	8003006 <UART_SetConfig+0x186>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <UART_SetConfig+0x146>
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	00d2      	lsls	r2, r2, #3
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d010      	beq.n	8002fe6 <UART_SetConfig+0x166>
 8002fc4:	e01f      	b.n	8003006 <UART_SetConfig+0x186>
 8002fc6:	231b      	movs	r3, #27
 8002fc8:	2218      	movs	r2, #24
 8002fca:	4694      	mov	ip, r2
 8002fcc:	44bc      	add	ip, r7
 8002fce:	4463      	add	r3, ip
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e026      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002fd6:	231b      	movs	r3, #27
 8002fd8:	2218      	movs	r2, #24
 8002fda:	4694      	mov	ip, r2
 8002fdc:	44bc      	add	ip, r7
 8002fde:	4463      	add	r3, ip
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e01e      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	2218      	movs	r2, #24
 8002fea:	4694      	mov	ip, r2
 8002fec:	44bc      	add	ip, r7
 8002fee:	4463      	add	r3, ip
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e016      	b.n	8003024 <UART_SetConfig+0x1a4>
 8002ff6:	231b      	movs	r3, #27
 8002ff8:	2218      	movs	r2, #24
 8002ffa:	4694      	mov	ip, r2
 8002ffc:	44bc      	add	ip, r7
 8002ffe:	4463      	add	r3, ip
 8003000:	2208      	movs	r2, #8
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e00e      	b.n	8003024 <UART_SetConfig+0x1a4>
 8003006:	231b      	movs	r3, #27
 8003008:	2218      	movs	r2, #24
 800300a:	4694      	mov	ip, r2
 800300c:	44bc      	add	ip, r7
 800300e:	4463      	add	r3, ip
 8003010:	2210      	movs	r2, #16
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e006      	b.n	8003024 <UART_SetConfig+0x1a4>
 8003016:	231b      	movs	r3, #27
 8003018:	2218      	movs	r2, #24
 800301a:	4694      	mov	ip, r2
 800301c:	44bc      	add	ip, r7
 800301e:	4463      	add	r3, ip
 8003020:	2210      	movs	r2, #16
 8003022:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <UART_SetConfig+0x330>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d000      	beq.n	8003030 <UART_SetConfig+0x1b0>
 800302e:	e088      	b.n	8003142 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003030:	231b      	movs	r3, #27
 8003032:	2218      	movs	r2, #24
 8003034:	4694      	mov	ip, r2
 8003036:	44bc      	add	ip, r7
 8003038:	4463      	add	r3, ip
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d01d      	beq.n	800307c <UART_SetConfig+0x1fc>
 8003040:	dc20      	bgt.n	8003084 <UART_SetConfig+0x204>
 8003042:	2b04      	cmp	r3, #4
 8003044:	d015      	beq.n	8003072 <UART_SetConfig+0x1f2>
 8003046:	dc1d      	bgt.n	8003084 <UART_SetConfig+0x204>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <UART_SetConfig+0x1d2>
 800304c:	2b02      	cmp	r3, #2
 800304e:	d005      	beq.n	800305c <UART_SetConfig+0x1dc>
 8003050:	e018      	b.n	8003084 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003052:	f7ff fcc7 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8003056:	0003      	movs	r3, r0
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800305a:	e01d      	b.n	8003098 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800305c:	4b57      	ldr	r3, [pc, #348]	; (80031bc <UART_SetConfig+0x33c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	4013      	ands	r3, r2
 8003064:	d002      	beq.n	800306c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003066:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <UART_SetConfig+0x340>)
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800306a:	e015      	b.n	8003098 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800306c:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <UART_SetConfig+0x344>)
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003070:	e012      	b.n	8003098 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003072:	f7ff fc07 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8003076:	0003      	movs	r3, r0
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800307a:	e00d      	b.n	8003098 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003082:	e009      	b.n	8003098 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003088:	231a      	movs	r3, #26
 800308a:	2218      	movs	r2, #24
 800308c:	4694      	mov	ip, r2
 800308e:	44bc      	add	ip, r7
 8003090:	4463      	add	r3, ip
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
        break;
 8003096:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d100      	bne.n	80030a0 <UART_SetConfig+0x220>
 800309e:	e139      	b.n	8003314 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	0013      	movs	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d305      	bcc.n	80030bc <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d907      	bls.n	80030cc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80030bc:	231a      	movs	r3, #26
 80030be:	2218      	movs	r2, #24
 80030c0:	4694      	mov	ip, r2
 80030c2:	44bc      	add	ip, r7
 80030c4:	4463      	add	r3, ip
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e123      	b.n	8003314 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	6939      	ldr	r1, [r7, #16]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	000b      	movs	r3, r1
 80030da:	0e1b      	lsrs	r3, r3, #24
 80030dc:	0010      	movs	r0, r2
 80030de:	0205      	lsls	r5, r0, #8
 80030e0:	431d      	orrs	r5, r3
 80030e2:	000b      	movs	r3, r1
 80030e4:	021c      	lsls	r4, r3, #8
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	68f9      	ldr	r1, [r7, #12]
 80030f6:	1900      	adds	r0, r0, r4
 80030f8:	4169      	adcs	r1, r5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	2300      	movs	r3, #0
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f7fd f894 	bl	8000234 <__aeabi_uldivmod>
 800310c:	0002      	movs	r2, r0
 800310e:	000b      	movs	r3, r1
 8003110:	0013      	movs	r3, r2
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003116:	23c0      	movs	r3, #192	; 0xc0
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	429a      	cmp	r2, r3
 800311c:	d309      	bcc.n	8003132 <UART_SetConfig+0x2b2>
 800311e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	035b      	lsls	r3, r3, #13
 8003124:	429a      	cmp	r2, r3
 8003126:	d204      	bcs.n	8003132 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	e0f0      	b.n	8003314 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003132:	231a      	movs	r3, #26
 8003134:	2218      	movs	r2, #24
 8003136:	4694      	mov	ip, r2
 8003138:	44bc      	add	ip, r7
 800313a:	4463      	add	r3, ip
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e0e8      	b.n	8003314 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	429a      	cmp	r2, r3
 800314c:	d000      	beq.n	8003150 <UART_SetConfig+0x2d0>
 800314e:	e087      	b.n	8003260 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003150:	231b      	movs	r3, #27
 8003152:	2218      	movs	r2, #24
 8003154:	4694      	mov	ip, r2
 8003156:	44bc      	add	ip, r7
 8003158:	4463      	add	r3, ip
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d835      	bhi.n	80031cc <UART_SetConfig+0x34c>
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <UART_SetConfig+0x348>)
 8003164:	18d3      	adds	r3, r2, r3
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316a:	f7ff fc3b 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 800316e:	0003      	movs	r3, r0
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003172:	e035      	b.n	80031e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff fc4c 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8003178:	0003      	movs	r3, r0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800317c:	e030      	b.n	80031e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <UART_SetConfig+0x33c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2210      	movs	r2, #16
 8003184:	4013      	ands	r3, r2
 8003186:	d002      	beq.n	800318e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <UART_SetConfig+0x340>)
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800318c:	e028      	b.n	80031e0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <UART_SetConfig+0x344>)
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003192:	e025      	b.n	80031e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003194:	f7ff fb76 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8003198:	0003      	movs	r3, r0
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800319c:	e020      	b.n	80031e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031a4:	e01c      	b.n	80031e0 <UART_SetConfig+0x360>
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	efff69f3 	.word	0xefff69f3
 80031ac:	ffffcfff 	.word	0xffffcfff
 80031b0:	40004800 	.word	0x40004800
 80031b4:	fffff4ff 	.word	0xfffff4ff
 80031b8:	40004400 	.word	0x40004400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	003d0900 	.word	0x003d0900
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	080047c0 	.word	0x080047c0
      default:
        pclk = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031d0:	231a      	movs	r3, #26
 80031d2:	2218      	movs	r2, #24
 80031d4:	4694      	mov	ip, r2
 80031d6:	44bc      	add	ip, r7
 80031d8:	4463      	add	r3, ip
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
        break;
 80031de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d100      	bne.n	80031e8 <UART_SetConfig+0x368>
 80031e6:	e095      	b.n	8003314 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	005a      	lsls	r2, r3, #1
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	18d2      	adds	r2, r2, r3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0019      	movs	r1, r3
 80031fa:	0010      	movs	r0, r2
 80031fc:	f7fc ff8e 	bl	800011c <__udivsi3>
 8003200:	0003      	movs	r3, r0
 8003202:	b29b      	uxth	r3, r3
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d921      	bls.n	8003250 <UART_SetConfig+0x3d0>
 800320c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	025b      	lsls	r3, r3, #9
 8003212:	429a      	cmp	r2, r3
 8003214:	d21c      	bcs.n	8003250 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	b29a      	uxth	r2, r3
 800321a:	200e      	movs	r0, #14
 800321c:	2418      	movs	r4, #24
 800321e:	193b      	adds	r3, r7, r4
 8003220:	181b      	adds	r3, r3, r0
 8003222:	210f      	movs	r1, #15
 8003224:	438a      	bics	r2, r1
 8003226:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	2207      	movs	r2, #7
 8003230:	4013      	ands	r3, r2
 8003232:	b299      	uxth	r1, r3
 8003234:	193b      	adds	r3, r7, r4
 8003236:	181b      	adds	r3, r3, r0
 8003238:	193a      	adds	r2, r7, r4
 800323a:	1812      	adds	r2, r2, r0
 800323c:	8812      	ldrh	r2, [r2, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	193a      	adds	r2, r7, r4
 8003248:	1812      	adds	r2, r2, r0
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	e061      	b.n	8003314 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003250:	231a      	movs	r3, #26
 8003252:	2218      	movs	r2, #24
 8003254:	4694      	mov	ip, r2
 8003256:	44bc      	add	ip, r7
 8003258:	4463      	add	r3, ip
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e059      	b.n	8003314 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003260:	231b      	movs	r3, #27
 8003262:	2218      	movs	r2, #24
 8003264:	4694      	mov	ip, r2
 8003266:	44bc      	add	ip, r7
 8003268:	4463      	add	r3, ip
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d822      	bhi.n	80032b6 <UART_SetConfig+0x436>
 8003270:	009a      	lsls	r2, r3, #2
 8003272:	4b30      	ldr	r3, [pc, #192]	; (8003334 <UART_SetConfig+0x4b4>)
 8003274:	18d3      	adds	r3, r2, r3
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7ff fbb3 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 800327e:	0003      	movs	r3, r0
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003282:	e022      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7ff fbc4 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8003288:	0003      	movs	r3, r0
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800328c:	e01d      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <UART_SetConfig+0x4b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	4013      	ands	r3, r2
 8003296:	d002      	beq.n	800329e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <UART_SetConfig+0x4bc>)
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800329c:	e015      	b.n	80032ca <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800329e:	4b28      	ldr	r3, [pc, #160]	; (8003340 <UART_SetConfig+0x4c0>)
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032a2:	e012      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a4:	f7ff faee 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 80032a8:	0003      	movs	r3, r0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032ac:	e00d      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032b4:	e009      	b.n	80032ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80032ba:	231a      	movs	r3, #26
 80032bc:	2218      	movs	r2, #24
 80032be:	4694      	mov	ip, r2
 80032c0:	44bc      	add	ip, r7
 80032c2:	4463      	add	r3, ip
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
        break;
 80032c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d021      	beq.n	8003314 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	085a      	lsrs	r2, r3, #1
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	18d2      	adds	r2, r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0019      	movs	r1, r3
 80032e0:	0010      	movs	r0, r2
 80032e2:	f7fc ff1b 	bl	800011c <__udivsi3>
 80032e6:	0003      	movs	r3, r0
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	d909      	bls.n	8003306 <UART_SetConfig+0x486>
 80032f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	025b      	lsls	r3, r3, #9
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d204      	bcs.n	8003306 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e006      	b.n	8003314 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003306:	231a      	movs	r3, #26
 8003308:	2218      	movs	r2, #24
 800330a:	4694      	mov	ip, r2
 800330c:	44bc      	add	ip, r7
 800330e:	4463      	add	r3, ip
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2200      	movs	r2, #0
 8003318:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2200      	movs	r2, #0
 800331e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003320:	231a      	movs	r3, #26
 8003322:	2218      	movs	r2, #24
 8003324:	4694      	mov	ip, r2
 8003326:	44bc      	add	ip, r7
 8003328:	4463      	add	r3, ip
 800332a:	781b      	ldrb	r3, [r3, #0]
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b00e      	add	sp, #56	; 0x38
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	080047e4 	.word	0x080047e4
 8003338:	40021000 	.word	0x40021000
 800333c:	003d0900 	.word	0x003d0900
 8003340:	00f42400 	.word	0x00f42400

08003344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2201      	movs	r2, #1
 8003352:	4013      	ands	r3, r2
 8003354:	d00b      	beq.n	800336e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a4a      	ldr	r2, [pc, #296]	; (8003488 <UART_AdvFeatureConfig+0x144>)
 800335e:	4013      	ands	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2202      	movs	r2, #2
 8003374:	4013      	ands	r3, r2
 8003376:	d00b      	beq.n	8003390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a43      	ldr	r2, [pc, #268]	; (800348c <UART_AdvFeatureConfig+0x148>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2204      	movs	r2, #4
 8003396:	4013      	ands	r3, r2
 8003398:	d00b      	beq.n	80033b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a3b      	ldr	r2, [pc, #236]	; (8003490 <UART_AdvFeatureConfig+0x14c>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2208      	movs	r2, #8
 80033b8:	4013      	ands	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4a34      	ldr	r2, [pc, #208]	; (8003494 <UART_AdvFeatureConfig+0x150>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	2210      	movs	r2, #16
 80033da:	4013      	ands	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a2c      	ldr	r2, [pc, #176]	; (8003498 <UART_AdvFeatureConfig+0x154>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2220      	movs	r2, #32
 80033fc:	4013      	ands	r3, r2
 80033fe:	d00b      	beq.n	8003418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4a25      	ldr	r2, [pc, #148]	; (800349c <UART_AdvFeatureConfig+0x158>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	4013      	ands	r3, r2
 8003420:	d01d      	beq.n	800345e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <UART_AdvFeatureConfig+0x15c>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	035b      	lsls	r3, r3, #13
 8003442:	429a      	cmp	r2, r3
 8003444:	d10b      	bne.n	800345e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <UART_AdvFeatureConfig+0x160>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	4013      	ands	r3, r2
 8003466:	d00b      	beq.n	8003480 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <UART_AdvFeatureConfig+0x164>)
 8003470:	4013      	ands	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}
 8003488:	fffdffff 	.word	0xfffdffff
 800348c:	fffeffff 	.word	0xfffeffff
 8003490:	fffbffff 	.word	0xfffbffff
 8003494:	ffff7fff 	.word	0xffff7fff
 8003498:	ffffefff 	.word	0xffffefff
 800349c:	ffffdfff 	.word	0xffffdfff
 80034a0:	ffefffff 	.word	0xffefffff
 80034a4:	ff9fffff 	.word	0xff9fffff
 80034a8:	fff7ffff 	.word	0xfff7ffff

080034ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	2100      	movs	r1, #0
 80034ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034bc:	f7fe fa7a 	bl	80019b4 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2208      	movs	r2, #8
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d10c      	bne.n	80034ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	0391      	lsls	r1, r2, #14
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4a17      	ldr	r2, [pc, #92]	; (8003538 <UART_CheckIdleState+0x8c>)
 80034dc:	9200      	str	r2, [sp, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	f000 f82c 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d001      	beq.n	80034ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e021      	b.n	8003530 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2204      	movs	r2, #4
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d10c      	bne.n	8003514 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	03d1      	lsls	r1, r2, #15
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4a0d      	ldr	r2, [pc, #52]	; (8003538 <UART_CheckIdleState+0x8c>)
 8003504:	9200      	str	r2, [sp, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	f000 f818 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 800350c:	1e03      	subs	r3, r0, #0
 800350e:	d001      	beq.n	8003514 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e00d      	b.n	8003530 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2274      	movs	r2, #116	; 0x74
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}
 8003538:	01ffffff 	.word	0x01ffffff

0800353c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b094      	sub	sp, #80	; 0x50
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354c:	e0a3      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003550:	3301      	adds	r3, #1
 8003552:	d100      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003554:	e09f      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe fa2d 	bl	80019b4 <HAL_GetTick>
 800355a:	0002      	movs	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <UART_WaitOnFlagUntilTimeout+0x30>
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	2b00      	cmp	r3, #0
 800356a:	d13d      	bne.n	80035e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003574:	647b      	str	r3, [r7, #68]	; 0x44
 8003576:	2301      	movs	r3, #1
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	494c      	ldr	r1, [pc, #304]	; (80036c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800358e:	400a      	ands	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359e:	f3ef 8310 	mrs	r3, PRIMASK
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	643b      	str	r3, [r7, #64]	; 0x40
 80035a8:	2301      	movs	r3, #1
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	f383 8810 	msr	PRIMASK, r3
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2101      	movs	r1, #1
 80035c0:	438a      	bics	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2274      	movs	r2, #116	; 0x74
 80035e0:	2100      	movs	r1, #0
 80035e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e067      	b.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2204      	movs	r2, #4
 80035f0:	4013      	ands	r3, r2
 80035f2:	d050      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	401a      	ands	r2, r3
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	429a      	cmp	r2, r3
 8003606:	d146      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003612:	f3ef 8310 	mrs	r3, PRIMASK
 8003616:	613b      	str	r3, [r7, #16]
  return(result);
 8003618:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f383 8810 	msr	PRIMASK, r3
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4923      	ldr	r1, [pc, #140]	; (80036c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8310 	mrs	r3, PRIMASK
 8003648:	61fb      	str	r3, [r7, #28]
  return(result);
 800364a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	64bb      	str	r3, [r7, #72]	; 0x48
 800364e:	2301      	movs	r3, #1
 8003650:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	438a      	bics	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	2120      	movs	r1, #32
 8003688:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2274      	movs	r2, #116	; 0x74
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e010      	b.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	425a      	negs	r2, r3
 80036a6:	4153      	adcs	r3, r2
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	001a      	movs	r2, r3
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d100      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80036b4:	e74b      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b014      	add	sp, #80	; 0x50
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	fffffe5f 	.word	0xfffffe5f

080036c4 <__errno>:
 80036c4:	4b01      	ldr	r3, [pc, #4]	; (80036cc <__errno+0x8>)
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	4770      	bx	lr
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	20000190 	.word	0x20000190

080036d0 <__libc_init_array>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	2600      	movs	r6, #0
 80036d4:	4d0c      	ldr	r5, [pc, #48]	; (8003708 <__libc_init_array+0x38>)
 80036d6:	4c0d      	ldr	r4, [pc, #52]	; (800370c <__libc_init_array+0x3c>)
 80036d8:	1b64      	subs	r4, r4, r5
 80036da:	10a4      	asrs	r4, r4, #2
 80036dc:	42a6      	cmp	r6, r4
 80036de:	d109      	bne.n	80036f4 <__libc_init_array+0x24>
 80036e0:	2600      	movs	r6, #0
 80036e2:	f000 ffbf 	bl	8004664 <_init>
 80036e6:	4d0a      	ldr	r5, [pc, #40]	; (8003710 <__libc_init_array+0x40>)
 80036e8:	4c0a      	ldr	r4, [pc, #40]	; (8003714 <__libc_init_array+0x44>)
 80036ea:	1b64      	subs	r4, r4, r5
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	42a6      	cmp	r6, r4
 80036f0:	d105      	bne.n	80036fe <__libc_init_array+0x2e>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	00b3      	lsls	r3, r6, #2
 80036f6:	58eb      	ldr	r3, [r5, r3]
 80036f8:	4798      	blx	r3
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7ee      	b.n	80036dc <__libc_init_array+0xc>
 80036fe:	00b3      	lsls	r3, r6, #2
 8003700:	58eb      	ldr	r3, [r5, r3]
 8003702:	4798      	blx	r3
 8003704:	3601      	adds	r6, #1
 8003706:	e7f2      	b.n	80036ee <__libc_init_array+0x1e>
 8003708:	080048a8 	.word	0x080048a8
 800370c:	080048a8 	.word	0x080048a8
 8003710:	080048a8 	.word	0x080048a8
 8003714:	080048ac 	.word	0x080048ac

08003718 <memset>:
 8003718:	0003      	movs	r3, r0
 800371a:	1882      	adds	r2, r0, r2
 800371c:	4293      	cmp	r3, r2
 800371e:	d100      	bne.n	8003722 <memset+0xa>
 8003720:	4770      	bx	lr
 8003722:	7019      	strb	r1, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	e7f9      	b.n	800371c <memset+0x4>

08003728 <iprintf>:
 8003728:	b40f      	push	{r0, r1, r2, r3}
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <iprintf+0x30>)
 800372c:	b513      	push	{r0, r1, r4, lr}
 800372e:	681c      	ldr	r4, [r3, #0]
 8003730:	2c00      	cmp	r4, #0
 8003732:	d005      	beq.n	8003740 <iprintf+0x18>
 8003734:	69a3      	ldr	r3, [r4, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <iprintf+0x18>
 800373a:	0020      	movs	r0, r4
 800373c:	f000 f870 	bl	8003820 <__sinit>
 8003740:	ab05      	add	r3, sp, #20
 8003742:	0020      	movs	r0, r4
 8003744:	9a04      	ldr	r2, [sp, #16]
 8003746:	68a1      	ldr	r1, [r4, #8]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	f000 f993 	bl	8003a74 <_vfiprintf_r>
 800374e:	bc16      	pop	{r1, r2, r4}
 8003750:	bc08      	pop	{r3}
 8003752:	b004      	add	sp, #16
 8003754:	4718      	bx	r3
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	20000190 	.word	0x20000190

0800375c <std>:
 800375c:	2300      	movs	r3, #0
 800375e:	b510      	push	{r4, lr}
 8003760:	0004      	movs	r4, r0
 8003762:	6003      	str	r3, [r0, #0]
 8003764:	6043      	str	r3, [r0, #4]
 8003766:	6083      	str	r3, [r0, #8]
 8003768:	8181      	strh	r1, [r0, #12]
 800376a:	6643      	str	r3, [r0, #100]	; 0x64
 800376c:	0019      	movs	r1, r3
 800376e:	81c2      	strh	r2, [r0, #14]
 8003770:	6103      	str	r3, [r0, #16]
 8003772:	6143      	str	r3, [r0, #20]
 8003774:	6183      	str	r3, [r0, #24]
 8003776:	2208      	movs	r2, #8
 8003778:	305c      	adds	r0, #92	; 0x5c
 800377a:	f7ff ffcd 	bl	8003718 <memset>
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <std+0x38>)
 8003780:	6263      	str	r3, [r4, #36]	; 0x24
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <std+0x3c>)
 8003784:	6224      	str	r4, [r4, #32]
 8003786:	62a3      	str	r3, [r4, #40]	; 0x28
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <std+0x40>)
 800378a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <std+0x44>)
 800378e:	6323      	str	r3, [r4, #48]	; 0x30
 8003790:	bd10      	pop	{r4, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	08004011 	.word	0x08004011
 8003798:	08004039 	.word	0x08004039
 800379c:	08004071 	.word	0x08004071
 80037a0:	0800409d 	.word	0x0800409d

080037a4 <_cleanup_r>:
 80037a4:	b510      	push	{r4, lr}
 80037a6:	4902      	ldr	r1, [pc, #8]	; (80037b0 <_cleanup_r+0xc>)
 80037a8:	f000 f8ba 	bl	8003920 <_fwalk_reent>
 80037ac:	bd10      	pop	{r4, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	080043a9 	.word	0x080043a9

080037b4 <__sfmoreglue>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	2568      	movs	r5, #104	; 0x68
 80037b8:	1e4a      	subs	r2, r1, #1
 80037ba:	4355      	muls	r5, r2
 80037bc:	000e      	movs	r6, r1
 80037be:	0029      	movs	r1, r5
 80037c0:	3174      	adds	r1, #116	; 0x74
 80037c2:	f000 f8d1 	bl	8003968 <_malloc_r>
 80037c6:	1e04      	subs	r4, r0, #0
 80037c8:	d008      	beq.n	80037dc <__sfmoreglue+0x28>
 80037ca:	2100      	movs	r1, #0
 80037cc:	002a      	movs	r2, r5
 80037ce:	6001      	str	r1, [r0, #0]
 80037d0:	6046      	str	r6, [r0, #4]
 80037d2:	300c      	adds	r0, #12
 80037d4:	60a0      	str	r0, [r4, #8]
 80037d6:	3268      	adds	r2, #104	; 0x68
 80037d8:	f7ff ff9e 	bl	8003718 <memset>
 80037dc:	0020      	movs	r0, r4
 80037de:	bd70      	pop	{r4, r5, r6, pc}

080037e0 <__sfp_lock_acquire>:
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4802      	ldr	r0, [pc, #8]	; (80037ec <__sfp_lock_acquire+0xc>)
 80037e4:	f000 f8bd 	bl	8003962 <__retarget_lock_acquire_recursive>
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	200002bc 	.word	0x200002bc

080037f0 <__sfp_lock_release>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	4802      	ldr	r0, [pc, #8]	; (80037fc <__sfp_lock_release+0xc>)
 80037f4:	f000 f8b6 	bl	8003964 <__retarget_lock_release_recursive>
 80037f8:	bd10      	pop	{r4, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	200002bc 	.word	0x200002bc

08003800 <__sinit_lock_acquire>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4802      	ldr	r0, [pc, #8]	; (800380c <__sinit_lock_acquire+0xc>)
 8003804:	f000 f8ad 	bl	8003962 <__retarget_lock_acquire_recursive>
 8003808:	bd10      	pop	{r4, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	200002b7 	.word	0x200002b7

08003810 <__sinit_lock_release>:
 8003810:	b510      	push	{r4, lr}
 8003812:	4802      	ldr	r0, [pc, #8]	; (800381c <__sinit_lock_release+0xc>)
 8003814:	f000 f8a6 	bl	8003964 <__retarget_lock_release_recursive>
 8003818:	bd10      	pop	{r4, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	200002b7 	.word	0x200002b7

08003820 <__sinit>:
 8003820:	b513      	push	{r0, r1, r4, lr}
 8003822:	0004      	movs	r4, r0
 8003824:	f7ff ffec 	bl	8003800 <__sinit_lock_acquire>
 8003828:	69a3      	ldr	r3, [r4, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <__sinit+0x14>
 800382e:	f7ff ffef 	bl	8003810 <__sinit_lock_release>
 8003832:	bd13      	pop	{r0, r1, r4, pc}
 8003834:	64a3      	str	r3, [r4, #72]	; 0x48
 8003836:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003838:	6523      	str	r3, [r4, #80]	; 0x50
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <__sinit+0x68>)
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <__sinit+0x6c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	62a2      	str	r2, [r4, #40]	; 0x28
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	42a3      	cmp	r3, r4
 8003846:	d101      	bne.n	800384c <__sinit+0x2c>
 8003848:	2301      	movs	r3, #1
 800384a:	61a3      	str	r3, [r4, #24]
 800384c:	0020      	movs	r0, r4
 800384e:	f000 f81f 	bl	8003890 <__sfp>
 8003852:	6060      	str	r0, [r4, #4]
 8003854:	0020      	movs	r0, r4
 8003856:	f000 f81b 	bl	8003890 <__sfp>
 800385a:	60a0      	str	r0, [r4, #8]
 800385c:	0020      	movs	r0, r4
 800385e:	f000 f817 	bl	8003890 <__sfp>
 8003862:	2200      	movs	r2, #0
 8003864:	2104      	movs	r1, #4
 8003866:	60e0      	str	r0, [r4, #12]
 8003868:	6860      	ldr	r0, [r4, #4]
 800386a:	f7ff ff77 	bl	800375c <std>
 800386e:	2201      	movs	r2, #1
 8003870:	2109      	movs	r1, #9
 8003872:	68a0      	ldr	r0, [r4, #8]
 8003874:	f7ff ff72 	bl	800375c <std>
 8003878:	2202      	movs	r2, #2
 800387a:	2112      	movs	r1, #18
 800387c:	68e0      	ldr	r0, [r4, #12]
 800387e:	f7ff ff6d 	bl	800375c <std>
 8003882:	2301      	movs	r3, #1
 8003884:	61a3      	str	r3, [r4, #24]
 8003886:	e7d2      	b.n	800382e <__sinit+0xe>
 8003888:	08004808 	.word	0x08004808
 800388c:	080037a5 	.word	0x080037a5

08003890 <__sfp>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	0007      	movs	r7, r0
 8003894:	f7ff ffa4 	bl	80037e0 <__sfp_lock_acquire>
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <__sfp+0x88>)
 800389a:	681e      	ldr	r6, [r3, #0]
 800389c:	69b3      	ldr	r3, [r6, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <__sfp+0x18>
 80038a2:	0030      	movs	r0, r6
 80038a4:	f7ff ffbc 	bl	8003820 <__sinit>
 80038a8:	3648      	adds	r6, #72	; 0x48
 80038aa:	68b4      	ldr	r4, [r6, #8]
 80038ac:	6873      	ldr	r3, [r6, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	d504      	bpl.n	80038bc <__sfp+0x2c>
 80038b2:	6833      	ldr	r3, [r6, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d022      	beq.n	80038fe <__sfp+0x6e>
 80038b8:	6836      	ldr	r6, [r6, #0]
 80038ba:	e7f6      	b.n	80038aa <__sfp+0x1a>
 80038bc:	220c      	movs	r2, #12
 80038be:	5ea5      	ldrsh	r5, [r4, r2]
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	d11a      	bne.n	80038fa <__sfp+0x6a>
 80038c4:	0020      	movs	r0, r4
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <__sfp+0x8c>)
 80038c8:	3058      	adds	r0, #88	; 0x58
 80038ca:	60e3      	str	r3, [r4, #12]
 80038cc:	6665      	str	r5, [r4, #100]	; 0x64
 80038ce:	f000 f847 	bl	8003960 <__retarget_lock_init_recursive>
 80038d2:	f7ff ff8d 	bl	80037f0 <__sfp_lock_release>
 80038d6:	0020      	movs	r0, r4
 80038d8:	2208      	movs	r2, #8
 80038da:	0029      	movs	r1, r5
 80038dc:	6025      	str	r5, [r4, #0]
 80038de:	60a5      	str	r5, [r4, #8]
 80038e0:	6065      	str	r5, [r4, #4]
 80038e2:	6125      	str	r5, [r4, #16]
 80038e4:	6165      	str	r5, [r4, #20]
 80038e6:	61a5      	str	r5, [r4, #24]
 80038e8:	305c      	adds	r0, #92	; 0x5c
 80038ea:	f7ff ff15 	bl	8003718 <memset>
 80038ee:	6365      	str	r5, [r4, #52]	; 0x34
 80038f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80038f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80038f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80038f6:	0020      	movs	r0, r4
 80038f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038fa:	3468      	adds	r4, #104	; 0x68
 80038fc:	e7d7      	b.n	80038ae <__sfp+0x1e>
 80038fe:	2104      	movs	r1, #4
 8003900:	0038      	movs	r0, r7
 8003902:	f7ff ff57 	bl	80037b4 <__sfmoreglue>
 8003906:	1e04      	subs	r4, r0, #0
 8003908:	6030      	str	r0, [r6, #0]
 800390a:	d1d5      	bne.n	80038b8 <__sfp+0x28>
 800390c:	f7ff ff70 	bl	80037f0 <__sfp_lock_release>
 8003910:	230c      	movs	r3, #12
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	e7ef      	b.n	80038f6 <__sfp+0x66>
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	08004808 	.word	0x08004808
 800391c:	ffff0001 	.word	0xffff0001

08003920 <_fwalk_reent>:
 8003920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003922:	0004      	movs	r4, r0
 8003924:	0006      	movs	r6, r0
 8003926:	2700      	movs	r7, #0
 8003928:	9101      	str	r1, [sp, #4]
 800392a:	3448      	adds	r4, #72	; 0x48
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	68a5      	ldr	r5, [r4, #8]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	9b00      	ldr	r3, [sp, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	d504      	bpl.n	8003944 <_fwalk_reent+0x24>
 800393a:	6824      	ldr	r4, [r4, #0]
 800393c:	2c00      	cmp	r4, #0
 800393e:	d1f5      	bne.n	800392c <_fwalk_reent+0xc>
 8003940:	0038      	movs	r0, r7
 8003942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003944:	89ab      	ldrh	r3, [r5, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d908      	bls.n	800395c <_fwalk_reent+0x3c>
 800394a:	220e      	movs	r2, #14
 800394c:	5eab      	ldrsh	r3, [r5, r2]
 800394e:	3301      	adds	r3, #1
 8003950:	d004      	beq.n	800395c <_fwalk_reent+0x3c>
 8003952:	0029      	movs	r1, r5
 8003954:	0030      	movs	r0, r6
 8003956:	9b01      	ldr	r3, [sp, #4]
 8003958:	4798      	blx	r3
 800395a:	4307      	orrs	r7, r0
 800395c:	3568      	adds	r5, #104	; 0x68
 800395e:	e7e8      	b.n	8003932 <_fwalk_reent+0x12>

08003960 <__retarget_lock_init_recursive>:
 8003960:	4770      	bx	lr

08003962 <__retarget_lock_acquire_recursive>:
 8003962:	4770      	bx	lr

08003964 <__retarget_lock_release_recursive>:
 8003964:	4770      	bx	lr
	...

08003968 <_malloc_r>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	2303      	movs	r3, #3
 800396c:	1ccd      	adds	r5, r1, #3
 800396e:	439d      	bics	r5, r3
 8003970:	3508      	adds	r5, #8
 8003972:	0006      	movs	r6, r0
 8003974:	2d0c      	cmp	r5, #12
 8003976:	d21f      	bcs.n	80039b8 <_malloc_r+0x50>
 8003978:	250c      	movs	r5, #12
 800397a:	42a9      	cmp	r1, r5
 800397c:	d81e      	bhi.n	80039bc <_malloc_r+0x54>
 800397e:	0030      	movs	r0, r6
 8003980:	f000 fdde 	bl	8004540 <__malloc_lock>
 8003984:	4925      	ldr	r1, [pc, #148]	; (8003a1c <_malloc_r+0xb4>)
 8003986:	680a      	ldr	r2, [r1, #0]
 8003988:	0014      	movs	r4, r2
 800398a:	2c00      	cmp	r4, #0
 800398c:	d11a      	bne.n	80039c4 <_malloc_r+0x5c>
 800398e:	4f24      	ldr	r7, [pc, #144]	; (8003a20 <_malloc_r+0xb8>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <_malloc_r+0x38>
 8003996:	0021      	movs	r1, r4
 8003998:	0030      	movs	r0, r6
 800399a:	f000 fb27 	bl	8003fec <_sbrk_r>
 800399e:	6038      	str	r0, [r7, #0]
 80039a0:	0029      	movs	r1, r5
 80039a2:	0030      	movs	r0, r6
 80039a4:	f000 fb22 	bl	8003fec <_sbrk_r>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d12b      	bne.n	8003a04 <_malloc_r+0x9c>
 80039ac:	230c      	movs	r3, #12
 80039ae:	0030      	movs	r0, r6
 80039b0:	6033      	str	r3, [r6, #0]
 80039b2:	f000 fdcd 	bl	8004550 <__malloc_unlock>
 80039b6:	e003      	b.n	80039c0 <_malloc_r+0x58>
 80039b8:	2d00      	cmp	r5, #0
 80039ba:	dade      	bge.n	800397a <_malloc_r+0x12>
 80039bc:	230c      	movs	r3, #12
 80039be:	6033      	str	r3, [r6, #0]
 80039c0:	2000      	movs	r0, #0
 80039c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	1b5b      	subs	r3, r3, r5
 80039c8:	d419      	bmi.n	80039fe <_malloc_r+0x96>
 80039ca:	2b0b      	cmp	r3, #11
 80039cc:	d903      	bls.n	80039d6 <_malloc_r+0x6e>
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	18e4      	adds	r4, r4, r3
 80039d2:	6025      	str	r5, [r4, #0]
 80039d4:	e003      	b.n	80039de <_malloc_r+0x76>
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	42a2      	cmp	r2, r4
 80039da:	d10e      	bne.n	80039fa <_malloc_r+0x92>
 80039dc:	600b      	str	r3, [r1, #0]
 80039de:	0030      	movs	r0, r6
 80039e0:	f000 fdb6 	bl	8004550 <__malloc_unlock>
 80039e4:	0020      	movs	r0, r4
 80039e6:	2207      	movs	r2, #7
 80039e8:	300b      	adds	r0, #11
 80039ea:	1d23      	adds	r3, r4, #4
 80039ec:	4390      	bics	r0, r2
 80039ee:	1ac2      	subs	r2, r0, r3
 80039f0:	4298      	cmp	r0, r3
 80039f2:	d0e6      	beq.n	80039c2 <_malloc_r+0x5a>
 80039f4:	1a1b      	subs	r3, r3, r0
 80039f6:	50a3      	str	r3, [r4, r2]
 80039f8:	e7e3      	b.n	80039c2 <_malloc_r+0x5a>
 80039fa:	6053      	str	r3, [r2, #4]
 80039fc:	e7ef      	b.n	80039de <_malloc_r+0x76>
 80039fe:	0022      	movs	r2, r4
 8003a00:	6864      	ldr	r4, [r4, #4]
 8003a02:	e7c2      	b.n	800398a <_malloc_r+0x22>
 8003a04:	2303      	movs	r3, #3
 8003a06:	1cc4      	adds	r4, r0, #3
 8003a08:	439c      	bics	r4, r3
 8003a0a:	42a0      	cmp	r0, r4
 8003a0c:	d0e1      	beq.n	80039d2 <_malloc_r+0x6a>
 8003a0e:	1a21      	subs	r1, r4, r0
 8003a10:	0030      	movs	r0, r6
 8003a12:	f000 faeb 	bl	8003fec <_sbrk_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d1db      	bne.n	80039d2 <_malloc_r+0x6a>
 8003a1a:	e7c7      	b.n	80039ac <_malloc_r+0x44>
 8003a1c:	20000214 	.word	0x20000214
 8003a20:	20000218 	.word	0x20000218

08003a24 <__sfputc_r>:
 8003a24:	6893      	ldr	r3, [r2, #8]
 8003a26:	b510      	push	{r4, lr}
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	6093      	str	r3, [r2, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da04      	bge.n	8003a3a <__sfputc_r+0x16>
 8003a30:	6994      	ldr	r4, [r2, #24]
 8003a32:	42a3      	cmp	r3, r4
 8003a34:	db07      	blt.n	8003a46 <__sfputc_r+0x22>
 8003a36:	290a      	cmp	r1, #10
 8003a38:	d005      	beq.n	8003a46 <__sfputc_r+0x22>
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	1c58      	adds	r0, r3, #1
 8003a3e:	6010      	str	r0, [r2, #0]
 8003a40:	7019      	strb	r1, [r3, #0]
 8003a42:	0008      	movs	r0, r1
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	f000 fb2f 	bl	80040a8 <__swbuf_r>
 8003a4a:	0001      	movs	r1, r0
 8003a4c:	e7f9      	b.n	8003a42 <__sfputc_r+0x1e>

08003a4e <__sfputs_r>:
 8003a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a50:	0006      	movs	r6, r0
 8003a52:	000f      	movs	r7, r1
 8003a54:	0014      	movs	r4, r2
 8003a56:	18d5      	adds	r5, r2, r3
 8003a58:	42ac      	cmp	r4, r5
 8003a5a:	d101      	bne.n	8003a60 <__sfputs_r+0x12>
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e007      	b.n	8003a70 <__sfputs_r+0x22>
 8003a60:	7821      	ldrb	r1, [r4, #0]
 8003a62:	003a      	movs	r2, r7
 8003a64:	0030      	movs	r0, r6
 8003a66:	f7ff ffdd 	bl	8003a24 <__sfputc_r>
 8003a6a:	3401      	adds	r4, #1
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d1f3      	bne.n	8003a58 <__sfputs_r+0xa>
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a74 <_vfiprintf_r>:
 8003a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a76:	b0a1      	sub	sp, #132	; 0x84
 8003a78:	0006      	movs	r6, r0
 8003a7a:	000c      	movs	r4, r1
 8003a7c:	001f      	movs	r7, r3
 8003a7e:	9203      	str	r2, [sp, #12]
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d004      	beq.n	8003a8e <_vfiprintf_r+0x1a>
 8003a84:	6983      	ldr	r3, [r0, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <_vfiprintf_r+0x1a>
 8003a8a:	f7ff fec9 	bl	8003820 <__sinit>
 8003a8e:	4b8e      	ldr	r3, [pc, #568]	; (8003cc8 <_vfiprintf_r+0x254>)
 8003a90:	429c      	cmp	r4, r3
 8003a92:	d11c      	bne.n	8003ace <_vfiprintf_r+0x5a>
 8003a94:	6874      	ldr	r4, [r6, #4]
 8003a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a98:	07db      	lsls	r3, r3, #31
 8003a9a:	d405      	bmi.n	8003aa8 <_vfiprintf_r+0x34>
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	059b      	lsls	r3, r3, #22
 8003aa0:	d402      	bmi.n	8003aa8 <_vfiprintf_r+0x34>
 8003aa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aa4:	f7ff ff5d 	bl	8003962 <__retarget_lock_acquire_recursive>
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	071b      	lsls	r3, r3, #28
 8003aac:	d502      	bpl.n	8003ab4 <_vfiprintf_r+0x40>
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d11d      	bne.n	8003af0 <_vfiprintf_r+0x7c>
 8003ab4:	0021      	movs	r1, r4
 8003ab6:	0030      	movs	r0, r6
 8003ab8:	f000 fb60 	bl	800417c <__swsetup_r>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d017      	beq.n	8003af0 <_vfiprintf_r+0x7c>
 8003ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ac2:	07db      	lsls	r3, r3, #31
 8003ac4:	d50d      	bpl.n	8003ae2 <_vfiprintf_r+0x6e>
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	4240      	negs	r0, r0
 8003aca:	b021      	add	sp, #132	; 0x84
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ace:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <_vfiprintf_r+0x258>)
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	d101      	bne.n	8003ad8 <_vfiprintf_r+0x64>
 8003ad4:	68b4      	ldr	r4, [r6, #8]
 8003ad6:	e7de      	b.n	8003a96 <_vfiprintf_r+0x22>
 8003ad8:	4b7d      	ldr	r3, [pc, #500]	; (8003cd0 <_vfiprintf_r+0x25c>)
 8003ada:	429c      	cmp	r4, r3
 8003adc:	d1db      	bne.n	8003a96 <_vfiprintf_r+0x22>
 8003ade:	68f4      	ldr	r4, [r6, #12]
 8003ae0:	e7d9      	b.n	8003a96 <_vfiprintf_r+0x22>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	059b      	lsls	r3, r3, #22
 8003ae6:	d4ee      	bmi.n	8003ac6 <_vfiprintf_r+0x52>
 8003ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aea:	f7ff ff3b 	bl	8003964 <__retarget_lock_release_recursive>
 8003aee:	e7ea      	b.n	8003ac6 <_vfiprintf_r+0x52>
 8003af0:	2300      	movs	r3, #0
 8003af2:	ad08      	add	r5, sp, #32
 8003af4:	616b      	str	r3, [r5, #20]
 8003af6:	3320      	adds	r3, #32
 8003af8:	766b      	strb	r3, [r5, #25]
 8003afa:	3310      	adds	r3, #16
 8003afc:	76ab      	strb	r3, [r5, #26]
 8003afe:	9707      	str	r7, [sp, #28]
 8003b00:	9f03      	ldr	r7, [sp, #12]
 8003b02:	783b      	ldrb	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <_vfiprintf_r+0x98>
 8003b08:	2b25      	cmp	r3, #37	; 0x25
 8003b0a:	d14e      	bne.n	8003baa <_vfiprintf_r+0x136>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	1afb      	subs	r3, r7, r3
 8003b10:	9305      	str	r3, [sp, #20]
 8003b12:	9b03      	ldr	r3, [sp, #12]
 8003b14:	429f      	cmp	r7, r3
 8003b16:	d00d      	beq.n	8003b34 <_vfiprintf_r+0xc0>
 8003b18:	9b05      	ldr	r3, [sp, #20]
 8003b1a:	0021      	movs	r1, r4
 8003b1c:	0030      	movs	r0, r6
 8003b1e:	9a03      	ldr	r2, [sp, #12]
 8003b20:	f7ff ff95 	bl	8003a4e <__sfputs_r>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d100      	bne.n	8003b2a <_vfiprintf_r+0xb6>
 8003b28:	e0b5      	b.n	8003c96 <_vfiprintf_r+0x222>
 8003b2a:	696a      	ldr	r2, [r5, #20]
 8003b2c:	9b05      	ldr	r3, [sp, #20]
 8003b2e:	4694      	mov	ip, r2
 8003b30:	4463      	add	r3, ip
 8003b32:	616b      	str	r3, [r5, #20]
 8003b34:	783b      	ldrb	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d100      	bne.n	8003b3c <_vfiprintf_r+0xc8>
 8003b3a:	e0ac      	b.n	8003c96 <_vfiprintf_r+0x222>
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	1c7b      	adds	r3, r7, #1
 8003b40:	9303      	str	r3, [sp, #12]
 8003b42:	2300      	movs	r3, #0
 8003b44:	4252      	negs	r2, r2
 8003b46:	606a      	str	r2, [r5, #4]
 8003b48:	a904      	add	r1, sp, #16
 8003b4a:	3254      	adds	r2, #84	; 0x54
 8003b4c:	1852      	adds	r2, r2, r1
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	60eb      	str	r3, [r5, #12]
 8003b52:	60ab      	str	r3, [r5, #8]
 8003b54:	7013      	strb	r3, [r2, #0]
 8003b56:	65ab      	str	r3, [r5, #88]	; 0x58
 8003b58:	9b03      	ldr	r3, [sp, #12]
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	7819      	ldrb	r1, [r3, #0]
 8003b5e:	485d      	ldr	r0, [pc, #372]	; (8003cd4 <_vfiprintf_r+0x260>)
 8003b60:	f000 fce2 	bl	8004528 <memchr>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	1c5f      	adds	r7, r3, #1
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d120      	bne.n	8003bae <_vfiprintf_r+0x13a>
 8003b6c:	682a      	ldr	r2, [r5, #0]
 8003b6e:	06d3      	lsls	r3, r2, #27
 8003b70:	d504      	bpl.n	8003b7c <_vfiprintf_r+0x108>
 8003b72:	2353      	movs	r3, #83	; 0x53
 8003b74:	a904      	add	r1, sp, #16
 8003b76:	185b      	adds	r3, r3, r1
 8003b78:	2120      	movs	r1, #32
 8003b7a:	7019      	strb	r1, [r3, #0]
 8003b7c:	0713      	lsls	r3, r2, #28
 8003b7e:	d504      	bpl.n	8003b8a <_vfiprintf_r+0x116>
 8003b80:	2353      	movs	r3, #83	; 0x53
 8003b82:	a904      	add	r1, sp, #16
 8003b84:	185b      	adds	r3, r3, r1
 8003b86:	212b      	movs	r1, #43	; 0x2b
 8003b88:	7019      	strb	r1, [r3, #0]
 8003b8a:	9b03      	ldr	r3, [sp, #12]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b90:	d016      	beq.n	8003bc0 <_vfiprintf_r+0x14c>
 8003b92:	2100      	movs	r1, #0
 8003b94:	68eb      	ldr	r3, [r5, #12]
 8003b96:	9f03      	ldr	r7, [sp, #12]
 8003b98:	783a      	ldrb	r2, [r7, #0]
 8003b9a:	1c78      	adds	r0, r7, #1
 8003b9c:	3a30      	subs	r2, #48	; 0x30
 8003b9e:	4684      	mov	ip, r0
 8003ba0:	2a09      	cmp	r2, #9
 8003ba2:	d94f      	bls.n	8003c44 <_vfiprintf_r+0x1d0>
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	d111      	bne.n	8003bcc <_vfiprintf_r+0x158>
 8003ba8:	e017      	b.n	8003bda <_vfiprintf_r+0x166>
 8003baa:	3701      	adds	r7, #1
 8003bac:	e7a9      	b.n	8003b02 <_vfiprintf_r+0x8e>
 8003bae:	4b49      	ldr	r3, [pc, #292]	; (8003cd4 <_vfiprintf_r+0x260>)
 8003bb0:	682a      	ldr	r2, [r5, #0]
 8003bb2:	1ac0      	subs	r0, r0, r3
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4083      	lsls	r3, r0
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	9703      	str	r7, [sp, #12]
 8003bbe:	e7cb      	b.n	8003b58 <_vfiprintf_r+0xe4>
 8003bc0:	9b07      	ldr	r3, [sp, #28]
 8003bc2:	1d19      	adds	r1, r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	9107      	str	r1, [sp, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db01      	blt.n	8003bd0 <_vfiprintf_r+0x15c>
 8003bcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bce:	e004      	b.n	8003bda <_vfiprintf_r+0x166>
 8003bd0:	425b      	negs	r3, r3
 8003bd2:	60eb      	str	r3, [r5, #12]
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	783b      	ldrb	r3, [r7, #0]
 8003bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003bde:	d10a      	bne.n	8003bf6 <_vfiprintf_r+0x182>
 8003be0:	787b      	ldrb	r3, [r7, #1]
 8003be2:	2b2a      	cmp	r3, #42	; 0x2a
 8003be4:	d137      	bne.n	8003c56 <_vfiprintf_r+0x1e2>
 8003be6:	9b07      	ldr	r3, [sp, #28]
 8003be8:	3702      	adds	r7, #2
 8003bea:	1d1a      	adds	r2, r3, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	9207      	str	r2, [sp, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	db2d      	blt.n	8003c50 <_vfiprintf_r+0x1dc>
 8003bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	7839      	ldrb	r1, [r7, #0]
 8003bfa:	4837      	ldr	r0, [pc, #220]	; (8003cd8 <_vfiprintf_r+0x264>)
 8003bfc:	f000 fc94 	bl	8004528 <memchr>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d007      	beq.n	8003c14 <_vfiprintf_r+0x1a0>
 8003c04:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <_vfiprintf_r+0x264>)
 8003c06:	682a      	ldr	r2, [r5, #0]
 8003c08:	1ac0      	subs	r0, r0, r3
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	4083      	lsls	r3, r0
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	3701      	adds	r7, #1
 8003c12:	602b      	str	r3, [r5, #0]
 8003c14:	7839      	ldrb	r1, [r7, #0]
 8003c16:	1c7b      	adds	r3, r7, #1
 8003c18:	2206      	movs	r2, #6
 8003c1a:	4830      	ldr	r0, [pc, #192]	; (8003cdc <_vfiprintf_r+0x268>)
 8003c1c:	9303      	str	r3, [sp, #12]
 8003c1e:	7629      	strb	r1, [r5, #24]
 8003c20:	f000 fc82 	bl	8004528 <memchr>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d045      	beq.n	8003cb4 <_vfiprintf_r+0x240>
 8003c28:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <_vfiprintf_r+0x26c>)
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d127      	bne.n	8003c7e <_vfiprintf_r+0x20a>
 8003c2e:	2207      	movs	r2, #7
 8003c30:	9b07      	ldr	r3, [sp, #28]
 8003c32:	3307      	adds	r3, #7
 8003c34:	4393      	bics	r3, r2
 8003c36:	3308      	adds	r3, #8
 8003c38:	9307      	str	r3, [sp, #28]
 8003c3a:	696b      	ldr	r3, [r5, #20]
 8003c3c:	9a04      	ldr	r2, [sp, #16]
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	616b      	str	r3, [r5, #20]
 8003c42:	e75d      	b.n	8003b00 <_vfiprintf_r+0x8c>
 8003c44:	210a      	movs	r1, #10
 8003c46:	434b      	muls	r3, r1
 8003c48:	4667      	mov	r7, ip
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	3909      	subs	r1, #9
 8003c4e:	e7a3      	b.n	8003b98 <_vfiprintf_r+0x124>
 8003c50:	2301      	movs	r3, #1
 8003c52:	425b      	negs	r3, r3
 8003c54:	e7ce      	b.n	8003bf4 <_vfiprintf_r+0x180>
 8003c56:	2300      	movs	r3, #0
 8003c58:	001a      	movs	r2, r3
 8003c5a:	3701      	adds	r7, #1
 8003c5c:	606b      	str	r3, [r5, #4]
 8003c5e:	7839      	ldrb	r1, [r7, #0]
 8003c60:	1c78      	adds	r0, r7, #1
 8003c62:	3930      	subs	r1, #48	; 0x30
 8003c64:	4684      	mov	ip, r0
 8003c66:	2909      	cmp	r1, #9
 8003c68:	d903      	bls.n	8003c72 <_vfiprintf_r+0x1fe>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0c3      	beq.n	8003bf6 <_vfiprintf_r+0x182>
 8003c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8003c70:	e7c1      	b.n	8003bf6 <_vfiprintf_r+0x182>
 8003c72:	230a      	movs	r3, #10
 8003c74:	435a      	muls	r2, r3
 8003c76:	4667      	mov	r7, ip
 8003c78:	1852      	adds	r2, r2, r1
 8003c7a:	3b09      	subs	r3, #9
 8003c7c:	e7ef      	b.n	8003c5e <_vfiprintf_r+0x1ea>
 8003c7e:	ab07      	add	r3, sp, #28
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	0022      	movs	r2, r4
 8003c84:	0029      	movs	r1, r5
 8003c86:	0030      	movs	r0, r6
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <_vfiprintf_r+0x270>)
 8003c8a:	e000      	b.n	8003c8e <_vfiprintf_r+0x21a>
 8003c8c:	bf00      	nop
 8003c8e:	9004      	str	r0, [sp, #16]
 8003c90:	9b04      	ldr	r3, [sp, #16]
 8003c92:	3301      	adds	r3, #1
 8003c94:	d1d1      	bne.n	8003c3a <_vfiprintf_r+0x1c6>
 8003c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c98:	07db      	lsls	r3, r3, #31
 8003c9a:	d405      	bmi.n	8003ca8 <_vfiprintf_r+0x234>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	059b      	lsls	r3, r3, #22
 8003ca0:	d402      	bmi.n	8003ca8 <_vfiprintf_r+0x234>
 8003ca2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ca4:	f7ff fe5e 	bl	8003964 <__retarget_lock_release_recursive>
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	065b      	lsls	r3, r3, #25
 8003cac:	d500      	bpl.n	8003cb0 <_vfiprintf_r+0x23c>
 8003cae:	e70a      	b.n	8003ac6 <_vfiprintf_r+0x52>
 8003cb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003cb2:	e70a      	b.n	8003aca <_vfiprintf_r+0x56>
 8003cb4:	ab07      	add	r3, sp, #28
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	0022      	movs	r2, r4
 8003cba:	0029      	movs	r1, r5
 8003cbc:	0030      	movs	r0, r6
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <_vfiprintf_r+0x270>)
 8003cc0:	f000 f882 	bl	8003dc8 <_printf_i>
 8003cc4:	e7e3      	b.n	8003c8e <_vfiprintf_r+0x21a>
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	0800482c 	.word	0x0800482c
 8003ccc:	0800484c 	.word	0x0800484c
 8003cd0:	0800480c 	.word	0x0800480c
 8003cd4:	0800486c 	.word	0x0800486c
 8003cd8:	08004872 	.word	0x08004872
 8003cdc:	08004876 	.word	0x08004876
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	08003a4f 	.word	0x08003a4f

08003ce8 <_printf_common>:
 8003ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cea:	0015      	movs	r5, r2
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	688a      	ldr	r2, [r1, #8]
 8003cf0:	690b      	ldr	r3, [r1, #16]
 8003cf2:	000c      	movs	r4, r1
 8003cf4:	9000      	str	r0, [sp, #0]
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	da00      	bge.n	8003cfc <_printf_common+0x14>
 8003cfa:	0013      	movs	r3, r2
 8003cfc:	0022      	movs	r2, r4
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	3243      	adds	r2, #67	; 0x43
 8003d02:	7812      	ldrb	r2, [r2, #0]
 8003d04:	2a00      	cmp	r2, #0
 8003d06:	d001      	beq.n	8003d0c <_printf_common+0x24>
 8003d08:	3301      	adds	r3, #1
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	069b      	lsls	r3, r3, #26
 8003d10:	d502      	bpl.n	8003d18 <_printf_common+0x30>
 8003d12:	682b      	ldr	r3, [r5, #0]
 8003d14:	3302      	adds	r3, #2
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	2306      	movs	r3, #6
 8003d1c:	0017      	movs	r7, r2
 8003d1e:	401f      	ands	r7, r3
 8003d20:	421a      	tst	r2, r3
 8003d22:	d027      	beq.n	8003d74 <_printf_common+0x8c>
 8003d24:	0023      	movs	r3, r4
 8003d26:	3343      	adds	r3, #67	; 0x43
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	4193      	sbcs	r3, r2
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	0692      	lsls	r2, r2, #26
 8003d32:	d430      	bmi.n	8003d96 <_printf_common+0xae>
 8003d34:	0022      	movs	r2, r4
 8003d36:	9901      	ldr	r1, [sp, #4]
 8003d38:	9800      	ldr	r0, [sp, #0]
 8003d3a:	9e08      	ldr	r6, [sp, #32]
 8003d3c:	3243      	adds	r2, #67	; 0x43
 8003d3e:	47b0      	blx	r6
 8003d40:	1c43      	adds	r3, r0, #1
 8003d42:	d025      	beq.n	8003d90 <_printf_common+0xa8>
 8003d44:	2306      	movs	r3, #6
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	682a      	ldr	r2, [r5, #0]
 8003d4a:	68e1      	ldr	r1, [r4, #12]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	4003      	ands	r3, r0
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d103      	bne.n	8003d5c <_printf_common+0x74>
 8003d54:	1a8d      	subs	r5, r1, r2
 8003d56:	43eb      	mvns	r3, r5
 8003d58:	17db      	asrs	r3, r3, #31
 8003d5a:	401d      	ands	r5, r3
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	6922      	ldr	r2, [r4, #16]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	dd01      	ble.n	8003d68 <_printf_common+0x80>
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	18ed      	adds	r5, r5, r3
 8003d68:	2700      	movs	r7, #0
 8003d6a:	42bd      	cmp	r5, r7
 8003d6c:	d120      	bne.n	8003db0 <_printf_common+0xc8>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e010      	b.n	8003d94 <_printf_common+0xac>
 8003d72:	3701      	adds	r7, #1
 8003d74:	68e3      	ldr	r3, [r4, #12]
 8003d76:	682a      	ldr	r2, [r5, #0]
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	42bb      	cmp	r3, r7
 8003d7c:	ddd2      	ble.n	8003d24 <_printf_common+0x3c>
 8003d7e:	0022      	movs	r2, r4
 8003d80:	2301      	movs	r3, #1
 8003d82:	9901      	ldr	r1, [sp, #4]
 8003d84:	9800      	ldr	r0, [sp, #0]
 8003d86:	9e08      	ldr	r6, [sp, #32]
 8003d88:	3219      	adds	r2, #25
 8003d8a:	47b0      	blx	r6
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	d1f0      	bne.n	8003d72 <_printf_common+0x8a>
 8003d90:	2001      	movs	r0, #1
 8003d92:	4240      	negs	r0, r0
 8003d94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d96:	2030      	movs	r0, #48	; 0x30
 8003d98:	18e1      	adds	r1, r4, r3
 8003d9a:	3143      	adds	r1, #67	; 0x43
 8003d9c:	7008      	strb	r0, [r1, #0]
 8003d9e:	0021      	movs	r1, r4
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	3145      	adds	r1, #69	; 0x45
 8003da4:	7809      	ldrb	r1, [r1, #0]
 8003da6:	18a2      	adds	r2, r4, r2
 8003da8:	3243      	adds	r2, #67	; 0x43
 8003daa:	3302      	adds	r3, #2
 8003dac:	7011      	strb	r1, [r2, #0]
 8003dae:	e7c1      	b.n	8003d34 <_printf_common+0x4c>
 8003db0:	0022      	movs	r2, r4
 8003db2:	2301      	movs	r3, #1
 8003db4:	9901      	ldr	r1, [sp, #4]
 8003db6:	9800      	ldr	r0, [sp, #0]
 8003db8:	9e08      	ldr	r6, [sp, #32]
 8003dba:	321a      	adds	r2, #26
 8003dbc:	47b0      	blx	r6
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d0e6      	beq.n	8003d90 <_printf_common+0xa8>
 8003dc2:	3701      	adds	r7, #1
 8003dc4:	e7d1      	b.n	8003d6a <_printf_common+0x82>
	...

08003dc8 <_printf_i>:
 8003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dca:	b08b      	sub	sp, #44	; 0x2c
 8003dcc:	9206      	str	r2, [sp, #24]
 8003dce:	000a      	movs	r2, r1
 8003dd0:	3243      	adds	r2, #67	; 0x43
 8003dd2:	9307      	str	r3, [sp, #28]
 8003dd4:	9005      	str	r0, [sp, #20]
 8003dd6:	9204      	str	r2, [sp, #16]
 8003dd8:	7e0a      	ldrb	r2, [r1, #24]
 8003dda:	000c      	movs	r4, r1
 8003ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003dde:	2a78      	cmp	r2, #120	; 0x78
 8003de0:	d806      	bhi.n	8003df0 <_printf_i+0x28>
 8003de2:	2a62      	cmp	r2, #98	; 0x62
 8003de4:	d808      	bhi.n	8003df8 <_printf_i+0x30>
 8003de6:	2a00      	cmp	r2, #0
 8003de8:	d100      	bne.n	8003dec <_printf_i+0x24>
 8003dea:	e0c0      	b.n	8003f6e <_printf_i+0x1a6>
 8003dec:	2a58      	cmp	r2, #88	; 0x58
 8003dee:	d052      	beq.n	8003e96 <_printf_i+0xce>
 8003df0:	0026      	movs	r6, r4
 8003df2:	3642      	adds	r6, #66	; 0x42
 8003df4:	7032      	strb	r2, [r6, #0]
 8003df6:	e022      	b.n	8003e3e <_printf_i+0x76>
 8003df8:	0010      	movs	r0, r2
 8003dfa:	3863      	subs	r0, #99	; 0x63
 8003dfc:	2815      	cmp	r0, #21
 8003dfe:	d8f7      	bhi.n	8003df0 <_printf_i+0x28>
 8003e00:	f7fc f982 	bl	8000108 <__gnu_thumb1_case_shi>
 8003e04:	001f0016 	.word	0x001f0016
 8003e08:	fff6fff6 	.word	0xfff6fff6
 8003e0c:	fff6fff6 	.word	0xfff6fff6
 8003e10:	fff6001f 	.word	0xfff6001f
 8003e14:	fff6fff6 	.word	0xfff6fff6
 8003e18:	00a8fff6 	.word	0x00a8fff6
 8003e1c:	009a0036 	.word	0x009a0036
 8003e20:	fff6fff6 	.word	0xfff6fff6
 8003e24:	fff600b9 	.word	0xfff600b9
 8003e28:	fff60036 	.word	0xfff60036
 8003e2c:	009efff6 	.word	0x009efff6
 8003e30:	0026      	movs	r6, r4
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	3642      	adds	r6, #66	; 0x42
 8003e36:	1d11      	adds	r1, r2, #4
 8003e38:	6019      	str	r1, [r3, #0]
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	7033      	strb	r3, [r6, #0]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0a7      	b.n	8003f92 <_printf_i+0x1ca>
 8003e42:	6808      	ldr	r0, [r1, #0]
 8003e44:	6819      	ldr	r1, [r3, #0]
 8003e46:	1d0a      	adds	r2, r1, #4
 8003e48:	0605      	lsls	r5, r0, #24
 8003e4a:	d50b      	bpl.n	8003e64 <_printf_i+0x9c>
 8003e4c:	680d      	ldr	r5, [r1, #0]
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	2d00      	cmp	r5, #0
 8003e52:	da03      	bge.n	8003e5c <_printf_i+0x94>
 8003e54:	232d      	movs	r3, #45	; 0x2d
 8003e56:	9a04      	ldr	r2, [sp, #16]
 8003e58:	426d      	negs	r5, r5
 8003e5a:	7013      	strb	r3, [r2, #0]
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <_printf_i+0x21c>)
 8003e5e:	270a      	movs	r7, #10
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	e032      	b.n	8003eca <_printf_i+0x102>
 8003e64:	680d      	ldr	r5, [r1, #0]
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	0641      	lsls	r1, r0, #25
 8003e6a:	d5f1      	bpl.n	8003e50 <_printf_i+0x88>
 8003e6c:	b22d      	sxth	r5, r5
 8003e6e:	e7ef      	b.n	8003e50 <_printf_i+0x88>
 8003e70:	680d      	ldr	r5, [r1, #0]
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	1d08      	adds	r0, r1, #4
 8003e76:	6018      	str	r0, [r3, #0]
 8003e78:	062e      	lsls	r6, r5, #24
 8003e7a:	d501      	bpl.n	8003e80 <_printf_i+0xb8>
 8003e7c:	680d      	ldr	r5, [r1, #0]
 8003e7e:	e003      	b.n	8003e88 <_printf_i+0xc0>
 8003e80:	066d      	lsls	r5, r5, #25
 8003e82:	d5fb      	bpl.n	8003e7c <_printf_i+0xb4>
 8003e84:	680d      	ldr	r5, [r1, #0]
 8003e86:	b2ad      	uxth	r5, r5
 8003e88:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <_printf_i+0x21c>)
 8003e8a:	270a      	movs	r7, #10
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	2a6f      	cmp	r2, #111	; 0x6f
 8003e90:	d117      	bne.n	8003ec2 <_printf_i+0xfa>
 8003e92:	2708      	movs	r7, #8
 8003e94:	e015      	b.n	8003ec2 <_printf_i+0xfa>
 8003e96:	3145      	adds	r1, #69	; 0x45
 8003e98:	700a      	strb	r2, [r1, #0]
 8003e9a:	4a52      	ldr	r2, [pc, #328]	; (8003fe4 <_printf_i+0x21c>)
 8003e9c:	9203      	str	r2, [sp, #12]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	ca20      	ldmia	r2!, {r5}
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	0608      	lsls	r0, r1, #24
 8003ea8:	d550      	bpl.n	8003f4c <_printf_i+0x184>
 8003eaa:	07cb      	lsls	r3, r1, #31
 8003eac:	d502      	bpl.n	8003eb4 <_printf_i+0xec>
 8003eae:	2320      	movs	r3, #32
 8003eb0:	4319      	orrs	r1, r3
 8003eb2:	6021      	str	r1, [r4, #0]
 8003eb4:	2710      	movs	r7, #16
 8003eb6:	2d00      	cmp	r5, #0
 8003eb8:	d103      	bne.n	8003ec2 <_printf_i+0xfa>
 8003eba:	2320      	movs	r3, #32
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	439a      	bics	r2, r3
 8003ec0:	6022      	str	r2, [r4, #0]
 8003ec2:	0023      	movs	r3, r4
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	3343      	adds	r3, #67	; 0x43
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	6863      	ldr	r3, [r4, #4]
 8003ecc:	60a3      	str	r3, [r4, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db03      	blt.n	8003eda <_printf_i+0x112>
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	6821      	ldr	r1, [r4, #0]
 8003ed6:	4391      	bics	r1, r2
 8003ed8:	6021      	str	r1, [r4, #0]
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	d102      	bne.n	8003ee4 <_printf_i+0x11c>
 8003ede:	9e04      	ldr	r6, [sp, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <_printf_i+0x136>
 8003ee4:	9e04      	ldr	r6, [sp, #16]
 8003ee6:	0028      	movs	r0, r5
 8003ee8:	0039      	movs	r1, r7
 8003eea:	f7fc f99d 	bl	8000228 <__aeabi_uidivmod>
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	3e01      	subs	r6, #1
 8003ef2:	5c5b      	ldrb	r3, [r3, r1]
 8003ef4:	7033      	strb	r3, [r6, #0]
 8003ef6:	002b      	movs	r3, r5
 8003ef8:	0005      	movs	r5, r0
 8003efa:	429f      	cmp	r7, r3
 8003efc:	d9f3      	bls.n	8003ee6 <_printf_i+0x11e>
 8003efe:	2f08      	cmp	r7, #8
 8003f00:	d109      	bne.n	8003f16 <_printf_i+0x14e>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	07db      	lsls	r3, r3, #31
 8003f06:	d506      	bpl.n	8003f16 <_printf_i+0x14e>
 8003f08:	6863      	ldr	r3, [r4, #4]
 8003f0a:	6922      	ldr	r2, [r4, #16]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	dc02      	bgt.n	8003f16 <_printf_i+0x14e>
 8003f10:	2330      	movs	r3, #48	; 0x30
 8003f12:	3e01      	subs	r6, #1
 8003f14:	7033      	strb	r3, [r6, #0]
 8003f16:	9b04      	ldr	r3, [sp, #16]
 8003f18:	1b9b      	subs	r3, r3, r6
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	9b07      	ldr	r3, [sp, #28]
 8003f1e:	0021      	movs	r1, r4
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	9805      	ldr	r0, [sp, #20]
 8003f24:	9b06      	ldr	r3, [sp, #24]
 8003f26:	aa09      	add	r2, sp, #36	; 0x24
 8003f28:	f7ff fede 	bl	8003ce8 <_printf_common>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d135      	bne.n	8003f9c <_printf_i+0x1d4>
 8003f30:	2001      	movs	r0, #1
 8003f32:	4240      	negs	r0, r0
 8003f34:	b00b      	add	sp, #44	; 0x2c
 8003f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f38:	2220      	movs	r2, #32
 8003f3a:	6809      	ldr	r1, [r1, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	6022      	str	r2, [r4, #0]
 8003f40:	0022      	movs	r2, r4
 8003f42:	2178      	movs	r1, #120	; 0x78
 8003f44:	3245      	adds	r2, #69	; 0x45
 8003f46:	7011      	strb	r1, [r2, #0]
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <_printf_i+0x220>)
 8003f4a:	e7a7      	b.n	8003e9c <_printf_i+0xd4>
 8003f4c:	0648      	lsls	r0, r1, #25
 8003f4e:	d5ac      	bpl.n	8003eaa <_printf_i+0xe2>
 8003f50:	b2ad      	uxth	r5, r5
 8003f52:	e7aa      	b.n	8003eaa <_printf_i+0xe2>
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	680d      	ldr	r5, [r1, #0]
 8003f58:	1d10      	adds	r0, r2, #4
 8003f5a:	6949      	ldr	r1, [r1, #20]
 8003f5c:	6018      	str	r0, [r3, #0]
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	062e      	lsls	r6, r5, #24
 8003f62:	d501      	bpl.n	8003f68 <_printf_i+0x1a0>
 8003f64:	6019      	str	r1, [r3, #0]
 8003f66:	e002      	b.n	8003f6e <_printf_i+0x1a6>
 8003f68:	066d      	lsls	r5, r5, #25
 8003f6a:	d5fb      	bpl.n	8003f64 <_printf_i+0x19c>
 8003f6c:	8019      	strh	r1, [r3, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9e04      	ldr	r6, [sp, #16]
 8003f72:	6123      	str	r3, [r4, #16]
 8003f74:	e7d2      	b.n	8003f1c <_printf_i+0x154>
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	1d11      	adds	r1, r2, #4
 8003f7a:	6019      	str	r1, [r3, #0]
 8003f7c:	6816      	ldr	r6, [r2, #0]
 8003f7e:	2100      	movs	r1, #0
 8003f80:	0030      	movs	r0, r6
 8003f82:	6862      	ldr	r2, [r4, #4]
 8003f84:	f000 fad0 	bl	8004528 <memchr>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d001      	beq.n	8003f90 <_printf_i+0x1c8>
 8003f8c:	1b80      	subs	r0, r0, r6
 8003f8e:	6060      	str	r0, [r4, #4]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9a04      	ldr	r2, [sp, #16]
 8003f98:	7013      	strb	r3, [r2, #0]
 8003f9a:	e7bf      	b.n	8003f1c <_printf_i+0x154>
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	0032      	movs	r2, r6
 8003fa0:	9906      	ldr	r1, [sp, #24]
 8003fa2:	9805      	ldr	r0, [sp, #20]
 8003fa4:	9d07      	ldr	r5, [sp, #28]
 8003fa6:	47a8      	blx	r5
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d0c1      	beq.n	8003f30 <_printf_i+0x168>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	079b      	lsls	r3, r3, #30
 8003fb0:	d415      	bmi.n	8003fde <_printf_i+0x216>
 8003fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb4:	68e0      	ldr	r0, [r4, #12]
 8003fb6:	4298      	cmp	r0, r3
 8003fb8:	dabc      	bge.n	8003f34 <_printf_i+0x16c>
 8003fba:	0018      	movs	r0, r3
 8003fbc:	e7ba      	b.n	8003f34 <_printf_i+0x16c>
 8003fbe:	0022      	movs	r2, r4
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9906      	ldr	r1, [sp, #24]
 8003fc4:	9805      	ldr	r0, [sp, #20]
 8003fc6:	9e07      	ldr	r6, [sp, #28]
 8003fc8:	3219      	adds	r2, #25
 8003fca:	47b0      	blx	r6
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d0af      	beq.n	8003f30 <_printf_i+0x168>
 8003fd0:	3501      	adds	r5, #1
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	42ab      	cmp	r3, r5
 8003fda:	dcf0      	bgt.n	8003fbe <_printf_i+0x1f6>
 8003fdc:	e7e9      	b.n	8003fb2 <_printf_i+0x1ea>
 8003fde:	2500      	movs	r5, #0
 8003fe0:	e7f7      	b.n	8003fd2 <_printf_i+0x20a>
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	0800487d 	.word	0x0800487d
 8003fe8:	0800488e 	.word	0x0800488e

08003fec <_sbrk_r>:
 8003fec:	2300      	movs	r3, #0
 8003fee:	b570      	push	{r4, r5, r6, lr}
 8003ff0:	4d06      	ldr	r5, [pc, #24]	; (800400c <_sbrk_r+0x20>)
 8003ff2:	0004      	movs	r4, r0
 8003ff4:	0008      	movs	r0, r1
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	f7fd fbf8 	bl	80017ec <_sbrk>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d103      	bne.n	8004008 <_sbrk_r+0x1c>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d000      	beq.n	8004008 <_sbrk_r+0x1c>
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	bd70      	pop	{r4, r5, r6, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	200002c0 	.word	0x200002c0

08004010 <__sread>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	000c      	movs	r4, r1
 8004014:	250e      	movs	r5, #14
 8004016:	5f49      	ldrsh	r1, [r1, r5]
 8004018:	f000 faec 	bl	80045f4 <_read_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	db03      	blt.n	8004028 <__sread+0x18>
 8004020:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004022:	181b      	adds	r3, r3, r0
 8004024:	6563      	str	r3, [r4, #84]	; 0x54
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	4a02      	ldr	r2, [pc, #8]	; (8004034 <__sread+0x24>)
 800402c:	4013      	ands	r3, r2
 800402e:	81a3      	strh	r3, [r4, #12]
 8004030:	e7f9      	b.n	8004026 <__sread+0x16>
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	ffffefff 	.word	0xffffefff

08004038 <__swrite>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	001f      	movs	r7, r3
 800403c:	898b      	ldrh	r3, [r1, #12]
 800403e:	0005      	movs	r5, r0
 8004040:	000c      	movs	r4, r1
 8004042:	0016      	movs	r6, r2
 8004044:	05db      	lsls	r3, r3, #23
 8004046:	d505      	bpl.n	8004054 <__swrite+0x1c>
 8004048:	230e      	movs	r3, #14
 800404a:	5ec9      	ldrsh	r1, [r1, r3]
 800404c:	2200      	movs	r2, #0
 800404e:	2302      	movs	r3, #2
 8004050:	f000 f9ea 	bl	8004428 <_lseek_r>
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	4a05      	ldr	r2, [pc, #20]	; (800406c <__swrite+0x34>)
 8004058:	0028      	movs	r0, r5
 800405a:	4013      	ands	r3, r2
 800405c:	81a3      	strh	r3, [r4, #12]
 800405e:	0032      	movs	r2, r6
 8004060:	230e      	movs	r3, #14
 8004062:	5ee1      	ldrsh	r1, [r4, r3]
 8004064:	003b      	movs	r3, r7
 8004066:	f000 f875 	bl	8004154 <_write_r>
 800406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406c:	ffffefff 	.word	0xffffefff

08004070 <__sseek>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	000c      	movs	r4, r1
 8004074:	250e      	movs	r5, #14
 8004076:	5f49      	ldrsh	r1, [r1, r5]
 8004078:	f000 f9d6 	bl	8004428 <_lseek_r>
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	1c42      	adds	r2, r0, #1
 8004080:	d103      	bne.n	800408a <__sseek+0x1a>
 8004082:	4a05      	ldr	r2, [pc, #20]	; (8004098 <__sseek+0x28>)
 8004084:	4013      	ands	r3, r2
 8004086:	81a3      	strh	r3, [r4, #12]
 8004088:	bd70      	pop	{r4, r5, r6, pc}
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	0152      	lsls	r2, r2, #5
 800408e:	4313      	orrs	r3, r2
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	6560      	str	r0, [r4, #84]	; 0x54
 8004094:	e7f8      	b.n	8004088 <__sseek+0x18>
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	ffffefff 	.word	0xffffefff

0800409c <__sclose>:
 800409c:	b510      	push	{r4, lr}
 800409e:	230e      	movs	r3, #14
 80040a0:	5ec9      	ldrsh	r1, [r1, r3]
 80040a2:	f000 f8e3 	bl	800426c <_close_r>
 80040a6:	bd10      	pop	{r4, pc}

080040a8 <__swbuf_r>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	0005      	movs	r5, r0
 80040ac:	000e      	movs	r6, r1
 80040ae:	0014      	movs	r4, r2
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d004      	beq.n	80040be <__swbuf_r+0x16>
 80040b4:	6983      	ldr	r3, [r0, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <__swbuf_r+0x16>
 80040ba:	f7ff fbb1 	bl	8003820 <__sinit>
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <__swbuf_r+0xa0>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	d12e      	bne.n	8004122 <__swbuf_r+0x7a>
 80040c4:	686c      	ldr	r4, [r5, #4]
 80040c6:	69a3      	ldr	r3, [r4, #24]
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	071b      	lsls	r3, r3, #28
 80040ce:	d532      	bpl.n	8004136 <__swbuf_r+0x8e>
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02f      	beq.n	8004136 <__swbuf_r+0x8e>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	6922      	ldr	r2, [r4, #16]
 80040da:	b2f7      	uxtb	r7, r6
 80040dc:	1a98      	subs	r0, r3, r2
 80040de:	6963      	ldr	r3, [r4, #20]
 80040e0:	b2f6      	uxtb	r6, r6
 80040e2:	4283      	cmp	r3, r0
 80040e4:	dc05      	bgt.n	80040f2 <__swbuf_r+0x4a>
 80040e6:	0021      	movs	r1, r4
 80040e8:	0028      	movs	r0, r5
 80040ea:	f000 f95d 	bl	80043a8 <_fflush_r>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d127      	bne.n	8004142 <__swbuf_r+0x9a>
 80040f2:	68a3      	ldr	r3, [r4, #8]
 80040f4:	3001      	adds	r0, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	6022      	str	r2, [r4, #0]
 8004100:	701f      	strb	r7, [r3, #0]
 8004102:	6963      	ldr	r3, [r4, #20]
 8004104:	4283      	cmp	r3, r0
 8004106:	d004      	beq.n	8004112 <__swbuf_r+0x6a>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	07db      	lsls	r3, r3, #31
 800410c:	d507      	bpl.n	800411e <__swbuf_r+0x76>
 800410e:	2e0a      	cmp	r6, #10
 8004110:	d105      	bne.n	800411e <__swbuf_r+0x76>
 8004112:	0021      	movs	r1, r4
 8004114:	0028      	movs	r0, r5
 8004116:	f000 f947 	bl	80043a8 <_fflush_r>
 800411a:	2800      	cmp	r0, #0
 800411c:	d111      	bne.n	8004142 <__swbuf_r+0x9a>
 800411e:	0030      	movs	r0, r6
 8004120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <__swbuf_r+0xa4>)
 8004124:	429c      	cmp	r4, r3
 8004126:	d101      	bne.n	800412c <__swbuf_r+0x84>
 8004128:	68ac      	ldr	r4, [r5, #8]
 800412a:	e7cc      	b.n	80040c6 <__swbuf_r+0x1e>
 800412c:	4b08      	ldr	r3, [pc, #32]	; (8004150 <__swbuf_r+0xa8>)
 800412e:	429c      	cmp	r4, r3
 8004130:	d1c9      	bne.n	80040c6 <__swbuf_r+0x1e>
 8004132:	68ec      	ldr	r4, [r5, #12]
 8004134:	e7c7      	b.n	80040c6 <__swbuf_r+0x1e>
 8004136:	0021      	movs	r1, r4
 8004138:	0028      	movs	r0, r5
 800413a:	f000 f81f 	bl	800417c <__swsetup_r>
 800413e:	2800      	cmp	r0, #0
 8004140:	d0c9      	beq.n	80040d6 <__swbuf_r+0x2e>
 8004142:	2601      	movs	r6, #1
 8004144:	4276      	negs	r6, r6
 8004146:	e7ea      	b.n	800411e <__swbuf_r+0x76>
 8004148:	0800482c 	.word	0x0800482c
 800414c:	0800484c 	.word	0x0800484c
 8004150:	0800480c 	.word	0x0800480c

08004154 <_write_r>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	0004      	movs	r4, r0
 8004158:	0008      	movs	r0, r1
 800415a:	0011      	movs	r1, r2
 800415c:	001a      	movs	r2, r3
 800415e:	2300      	movs	r3, #0
 8004160:	4d05      	ldr	r5, [pc, #20]	; (8004178 <_write_r+0x24>)
 8004162:	602b      	str	r3, [r5, #0]
 8004164:	f7fd fafa 	bl	800175c <_write>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d103      	bne.n	8004174 <_write_r+0x20>
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d000      	beq.n	8004174 <_write_r+0x20>
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	200002c0 	.word	0x200002c0

0800417c <__swsetup_r>:
 800417c:	4b37      	ldr	r3, [pc, #220]	; (800425c <__swsetup_r+0xe0>)
 800417e:	b570      	push	{r4, r5, r6, lr}
 8004180:	681d      	ldr	r5, [r3, #0]
 8004182:	0006      	movs	r6, r0
 8004184:	000c      	movs	r4, r1
 8004186:	2d00      	cmp	r5, #0
 8004188:	d005      	beq.n	8004196 <__swsetup_r+0x1a>
 800418a:	69ab      	ldr	r3, [r5, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <__swsetup_r+0x1a>
 8004190:	0028      	movs	r0, r5
 8004192:	f7ff fb45 	bl	8003820 <__sinit>
 8004196:	4b32      	ldr	r3, [pc, #200]	; (8004260 <__swsetup_r+0xe4>)
 8004198:	429c      	cmp	r4, r3
 800419a:	d10f      	bne.n	80041bc <__swsetup_r+0x40>
 800419c:	686c      	ldr	r4, [r5, #4]
 800419e:	230c      	movs	r3, #12
 80041a0:	5ee2      	ldrsh	r2, [r4, r3]
 80041a2:	b293      	uxth	r3, r2
 80041a4:	0711      	lsls	r1, r2, #28
 80041a6:	d42d      	bmi.n	8004204 <__swsetup_r+0x88>
 80041a8:	06d9      	lsls	r1, r3, #27
 80041aa:	d411      	bmi.n	80041d0 <__swsetup_r+0x54>
 80041ac:	2309      	movs	r3, #9
 80041ae:	2001      	movs	r0, #1
 80041b0:	6033      	str	r3, [r6, #0]
 80041b2:	3337      	adds	r3, #55	; 0x37
 80041b4:	4313      	orrs	r3, r2
 80041b6:	81a3      	strh	r3, [r4, #12]
 80041b8:	4240      	negs	r0, r0
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <__swsetup_r+0xe8>)
 80041be:	429c      	cmp	r4, r3
 80041c0:	d101      	bne.n	80041c6 <__swsetup_r+0x4a>
 80041c2:	68ac      	ldr	r4, [r5, #8]
 80041c4:	e7eb      	b.n	800419e <__swsetup_r+0x22>
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <__swsetup_r+0xec>)
 80041c8:	429c      	cmp	r4, r3
 80041ca:	d1e8      	bne.n	800419e <__swsetup_r+0x22>
 80041cc:	68ec      	ldr	r4, [r5, #12]
 80041ce:	e7e6      	b.n	800419e <__swsetup_r+0x22>
 80041d0:	075b      	lsls	r3, r3, #29
 80041d2:	d513      	bpl.n	80041fc <__swsetup_r+0x80>
 80041d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041d6:	2900      	cmp	r1, #0
 80041d8:	d008      	beq.n	80041ec <__swsetup_r+0x70>
 80041da:	0023      	movs	r3, r4
 80041dc:	3344      	adds	r3, #68	; 0x44
 80041de:	4299      	cmp	r1, r3
 80041e0:	d002      	beq.n	80041e8 <__swsetup_r+0x6c>
 80041e2:	0030      	movs	r0, r6
 80041e4:	f000 f9bc 	bl	8004560 <_free_r>
 80041e8:	2300      	movs	r3, #0
 80041ea:	6363      	str	r3, [r4, #52]	; 0x34
 80041ec:	2224      	movs	r2, #36	; 0x24
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	4393      	bics	r3, r2
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	2300      	movs	r3, #0
 80041f6:	6063      	str	r3, [r4, #4]
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	2308      	movs	r3, #8
 80041fe:	89a2      	ldrh	r2, [r4, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	81a3      	strh	r3, [r4, #12]
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <__swsetup_r+0xa6>
 800420a:	21a0      	movs	r1, #160	; 0xa0
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	89a3      	ldrh	r3, [r4, #12]
 8004210:	0089      	lsls	r1, r1, #2
 8004212:	0092      	lsls	r2, r2, #2
 8004214:	400b      	ands	r3, r1
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <__swsetup_r+0xa6>
 800421a:	0021      	movs	r1, r4
 800421c:	0030      	movs	r0, r6
 800421e:	f000 f93f 	bl	80044a0 <__smakebuf_r>
 8004222:	220c      	movs	r2, #12
 8004224:	5ea3      	ldrsh	r3, [r4, r2]
 8004226:	2001      	movs	r0, #1
 8004228:	001a      	movs	r2, r3
 800422a:	b299      	uxth	r1, r3
 800422c:	4002      	ands	r2, r0
 800422e:	4203      	tst	r3, r0
 8004230:	d00f      	beq.n	8004252 <__swsetup_r+0xd6>
 8004232:	2200      	movs	r2, #0
 8004234:	60a2      	str	r2, [r4, #8]
 8004236:	6962      	ldr	r2, [r4, #20]
 8004238:	4252      	negs	r2, r2
 800423a:	61a2      	str	r2, [r4, #24]
 800423c:	2000      	movs	r0, #0
 800423e:	6922      	ldr	r2, [r4, #16]
 8004240:	4282      	cmp	r2, r0
 8004242:	d1ba      	bne.n	80041ba <__swsetup_r+0x3e>
 8004244:	060a      	lsls	r2, r1, #24
 8004246:	d5b8      	bpl.n	80041ba <__swsetup_r+0x3e>
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	4313      	orrs	r3, r2
 800424c:	81a3      	strh	r3, [r4, #12]
 800424e:	3801      	subs	r0, #1
 8004250:	e7b3      	b.n	80041ba <__swsetup_r+0x3e>
 8004252:	0788      	lsls	r0, r1, #30
 8004254:	d400      	bmi.n	8004258 <__swsetup_r+0xdc>
 8004256:	6962      	ldr	r2, [r4, #20]
 8004258:	60a2      	str	r2, [r4, #8]
 800425a:	e7ef      	b.n	800423c <__swsetup_r+0xc0>
 800425c:	20000190 	.word	0x20000190
 8004260:	0800482c 	.word	0x0800482c
 8004264:	0800484c 	.word	0x0800484c
 8004268:	0800480c 	.word	0x0800480c

0800426c <_close_r>:
 800426c:	2300      	movs	r3, #0
 800426e:	b570      	push	{r4, r5, r6, lr}
 8004270:	4d06      	ldr	r5, [pc, #24]	; (800428c <_close_r+0x20>)
 8004272:	0004      	movs	r4, r0
 8004274:	0008      	movs	r0, r1
 8004276:	602b      	str	r3, [r5, #0]
 8004278:	f7fd fa8c 	bl	8001794 <_close>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d103      	bne.n	8004288 <_close_r+0x1c>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d000      	beq.n	8004288 <_close_r+0x1c>
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	bd70      	pop	{r4, r5, r6, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	200002c0 	.word	0x200002c0

08004290 <__sflush_r>:
 8004290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004292:	898b      	ldrh	r3, [r1, #12]
 8004294:	0005      	movs	r5, r0
 8004296:	000c      	movs	r4, r1
 8004298:	071a      	lsls	r2, r3, #28
 800429a:	d45f      	bmi.n	800435c <__sflush_r+0xcc>
 800429c:	684a      	ldr	r2, [r1, #4]
 800429e:	2a00      	cmp	r2, #0
 80042a0:	dc04      	bgt.n	80042ac <__sflush_r+0x1c>
 80042a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	dc01      	bgt.n	80042ac <__sflush_r+0x1c>
 80042a8:	2000      	movs	r0, #0
 80042aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80042ae:	2f00      	cmp	r7, #0
 80042b0:	d0fa      	beq.n	80042a8 <__sflush_r+0x18>
 80042b2:	2200      	movs	r2, #0
 80042b4:	2180      	movs	r1, #128	; 0x80
 80042b6:	682e      	ldr	r6, [r5, #0]
 80042b8:	602a      	str	r2, [r5, #0]
 80042ba:	001a      	movs	r2, r3
 80042bc:	0149      	lsls	r1, r1, #5
 80042be:	400a      	ands	r2, r1
 80042c0:	420b      	tst	r3, r1
 80042c2:	d034      	beq.n	800432e <__sflush_r+0x9e>
 80042c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	075b      	lsls	r3, r3, #29
 80042ca:	d506      	bpl.n	80042da <__sflush_r+0x4a>
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	1ac0      	subs	r0, r0, r3
 80042d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <__sflush_r+0x4a>
 80042d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d8:	1ac0      	subs	r0, r0, r3
 80042da:	0002      	movs	r2, r0
 80042dc:	6a21      	ldr	r1, [r4, #32]
 80042de:	2300      	movs	r3, #0
 80042e0:	0028      	movs	r0, r5
 80042e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80042e4:	47b8      	blx	r7
 80042e6:	89a1      	ldrh	r1, [r4, #12]
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d106      	bne.n	80042fa <__sflush_r+0x6a>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	2b1d      	cmp	r3, #29
 80042f0:	d831      	bhi.n	8004356 <__sflush_r+0xc6>
 80042f2:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <__sflush_r+0x114>)
 80042f4:	40da      	lsrs	r2, r3
 80042f6:	07d3      	lsls	r3, r2, #31
 80042f8:	d52d      	bpl.n	8004356 <__sflush_r+0xc6>
 80042fa:	2300      	movs	r3, #0
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	04cb      	lsls	r3, r1, #19
 8004304:	d505      	bpl.n	8004312 <__sflush_r+0x82>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d102      	bne.n	8004310 <__sflush_r+0x80>
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d100      	bne.n	8004312 <__sflush_r+0x82>
 8004310:	6560      	str	r0, [r4, #84]	; 0x54
 8004312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004314:	602e      	str	r6, [r5, #0]
 8004316:	2900      	cmp	r1, #0
 8004318:	d0c6      	beq.n	80042a8 <__sflush_r+0x18>
 800431a:	0023      	movs	r3, r4
 800431c:	3344      	adds	r3, #68	; 0x44
 800431e:	4299      	cmp	r1, r3
 8004320:	d002      	beq.n	8004328 <__sflush_r+0x98>
 8004322:	0028      	movs	r0, r5
 8004324:	f000 f91c 	bl	8004560 <_free_r>
 8004328:	2000      	movs	r0, #0
 800432a:	6360      	str	r0, [r4, #52]	; 0x34
 800432c:	e7bd      	b.n	80042aa <__sflush_r+0x1a>
 800432e:	2301      	movs	r3, #1
 8004330:	0028      	movs	r0, r5
 8004332:	6a21      	ldr	r1, [r4, #32]
 8004334:	47b8      	blx	r7
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	d1c5      	bne.n	80042c6 <__sflush_r+0x36>
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0c2      	beq.n	80042c6 <__sflush_r+0x36>
 8004340:	2b1d      	cmp	r3, #29
 8004342:	d001      	beq.n	8004348 <__sflush_r+0xb8>
 8004344:	2b16      	cmp	r3, #22
 8004346:	d101      	bne.n	800434c <__sflush_r+0xbc>
 8004348:	602e      	str	r6, [r5, #0]
 800434a:	e7ad      	b.n	80042a8 <__sflush_r+0x18>
 800434c:	2340      	movs	r3, #64	; 0x40
 800434e:	89a2      	ldrh	r2, [r4, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	e7a9      	b.n	80042aa <__sflush_r+0x1a>
 8004356:	2340      	movs	r3, #64	; 0x40
 8004358:	430b      	orrs	r3, r1
 800435a:	e7fa      	b.n	8004352 <__sflush_r+0xc2>
 800435c:	690f      	ldr	r7, [r1, #16]
 800435e:	2f00      	cmp	r7, #0
 8004360:	d0a2      	beq.n	80042a8 <__sflush_r+0x18>
 8004362:	680a      	ldr	r2, [r1, #0]
 8004364:	600f      	str	r7, [r1, #0]
 8004366:	1bd2      	subs	r2, r2, r7
 8004368:	9201      	str	r2, [sp, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	d100      	bne.n	8004372 <__sflush_r+0xe2>
 8004370:	694a      	ldr	r2, [r1, #20]
 8004372:	60a2      	str	r2, [r4, #8]
 8004374:	9b01      	ldr	r3, [sp, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	dc00      	bgt.n	800437c <__sflush_r+0xec>
 800437a:	e795      	b.n	80042a8 <__sflush_r+0x18>
 800437c:	003a      	movs	r2, r7
 800437e:	0028      	movs	r0, r5
 8004380:	9b01      	ldr	r3, [sp, #4]
 8004382:	6a21      	ldr	r1, [r4, #32]
 8004384:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004386:	47b0      	blx	r6
 8004388:	2800      	cmp	r0, #0
 800438a:	dc06      	bgt.n	800439a <__sflush_r+0x10a>
 800438c:	2340      	movs	r3, #64	; 0x40
 800438e:	2001      	movs	r0, #1
 8004390:	89a2      	ldrh	r2, [r4, #12]
 8004392:	4240      	negs	r0, r0
 8004394:	4313      	orrs	r3, r2
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	e787      	b.n	80042aa <__sflush_r+0x1a>
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	183f      	adds	r7, r7, r0
 800439e:	1a1b      	subs	r3, r3, r0
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	e7e7      	b.n	8004374 <__sflush_r+0xe4>
 80043a4:	20400001 	.word	0x20400001

080043a8 <_fflush_r>:
 80043a8:	690b      	ldr	r3, [r1, #16]
 80043aa:	b570      	push	{r4, r5, r6, lr}
 80043ac:	0005      	movs	r5, r0
 80043ae:	000c      	movs	r4, r1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <_fflush_r+0x12>
 80043b4:	2500      	movs	r5, #0
 80043b6:	0028      	movs	r0, r5
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d004      	beq.n	80043c8 <_fflush_r+0x20>
 80043be:	6983      	ldr	r3, [r0, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <_fflush_r+0x20>
 80043c4:	f7ff fa2c 	bl	8003820 <__sinit>
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <_fflush_r+0x74>)
 80043ca:	429c      	cmp	r4, r3
 80043cc:	d11b      	bne.n	8004406 <_fflush_r+0x5e>
 80043ce:	686c      	ldr	r4, [r5, #4]
 80043d0:	220c      	movs	r2, #12
 80043d2:	5ea3      	ldrsh	r3, [r4, r2]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ed      	beq.n	80043b4 <_fflush_r+0xc>
 80043d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043da:	07d2      	lsls	r2, r2, #31
 80043dc:	d404      	bmi.n	80043e8 <_fflush_r+0x40>
 80043de:	059b      	lsls	r3, r3, #22
 80043e0:	d402      	bmi.n	80043e8 <_fflush_r+0x40>
 80043e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e4:	f7ff fabd 	bl	8003962 <__retarget_lock_acquire_recursive>
 80043e8:	0028      	movs	r0, r5
 80043ea:	0021      	movs	r1, r4
 80043ec:	f7ff ff50 	bl	8004290 <__sflush_r>
 80043f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f2:	0005      	movs	r5, r0
 80043f4:	07db      	lsls	r3, r3, #31
 80043f6:	d4de      	bmi.n	80043b6 <_fflush_r+0xe>
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	059b      	lsls	r3, r3, #22
 80043fc:	d4db      	bmi.n	80043b6 <_fflush_r+0xe>
 80043fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004400:	f7ff fab0 	bl	8003964 <__retarget_lock_release_recursive>
 8004404:	e7d7      	b.n	80043b6 <_fflush_r+0xe>
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <_fflush_r+0x78>)
 8004408:	429c      	cmp	r4, r3
 800440a:	d101      	bne.n	8004410 <_fflush_r+0x68>
 800440c:	68ac      	ldr	r4, [r5, #8]
 800440e:	e7df      	b.n	80043d0 <_fflush_r+0x28>
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <_fflush_r+0x7c>)
 8004412:	429c      	cmp	r4, r3
 8004414:	d1dc      	bne.n	80043d0 <_fflush_r+0x28>
 8004416:	68ec      	ldr	r4, [r5, #12]
 8004418:	e7da      	b.n	80043d0 <_fflush_r+0x28>
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	0800482c 	.word	0x0800482c
 8004420:	0800484c 	.word	0x0800484c
 8004424:	0800480c 	.word	0x0800480c

08004428 <_lseek_r>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	0004      	movs	r4, r0
 800442c:	0008      	movs	r0, r1
 800442e:	0011      	movs	r1, r2
 8004430:	001a      	movs	r2, r3
 8004432:	2300      	movs	r3, #0
 8004434:	4d05      	ldr	r5, [pc, #20]	; (800444c <_lseek_r+0x24>)
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	f7fd f9cd 	bl	80017d6 <_lseek>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d103      	bne.n	8004448 <_lseek_r+0x20>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d000      	beq.n	8004448 <_lseek_r+0x20>
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	bd70      	pop	{r4, r5, r6, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	200002c0 	.word	0x200002c0

08004450 <__swhatbuf_r>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	000e      	movs	r6, r1
 8004454:	001d      	movs	r5, r3
 8004456:	230e      	movs	r3, #14
 8004458:	5ec9      	ldrsh	r1, [r1, r3]
 800445a:	0014      	movs	r4, r2
 800445c:	b096      	sub	sp, #88	; 0x58
 800445e:	2900      	cmp	r1, #0
 8004460:	da07      	bge.n	8004472 <__swhatbuf_r+0x22>
 8004462:	2300      	movs	r3, #0
 8004464:	602b      	str	r3, [r5, #0]
 8004466:	89b3      	ldrh	r3, [r6, #12]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	d411      	bmi.n	8004490 <__swhatbuf_r+0x40>
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	e00f      	b.n	8004492 <__swhatbuf_r+0x42>
 8004472:	466a      	mov	r2, sp
 8004474:	f000 f8d2 	bl	800461c <_fstat_r>
 8004478:	2800      	cmp	r0, #0
 800447a:	dbf2      	blt.n	8004462 <__swhatbuf_r+0x12>
 800447c:	23f0      	movs	r3, #240	; 0xf0
 800447e:	9901      	ldr	r1, [sp, #4]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4019      	ands	r1, r3
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <__swhatbuf_r+0x4c>)
 8004486:	18c9      	adds	r1, r1, r3
 8004488:	424b      	negs	r3, r1
 800448a:	4159      	adcs	r1, r3
 800448c:	6029      	str	r1, [r5, #0]
 800448e:	e7ed      	b.n	800446c <__swhatbuf_r+0x1c>
 8004490:	2340      	movs	r3, #64	; 0x40
 8004492:	2000      	movs	r0, #0
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	b016      	add	sp, #88	; 0x58
 8004498:	bd70      	pop	{r4, r5, r6, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	ffffe000 	.word	0xffffe000

080044a0 <__smakebuf_r>:
 80044a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044a2:	2602      	movs	r6, #2
 80044a4:	898b      	ldrh	r3, [r1, #12]
 80044a6:	0005      	movs	r5, r0
 80044a8:	000c      	movs	r4, r1
 80044aa:	4233      	tst	r3, r6
 80044ac:	d006      	beq.n	80044bc <__smakebuf_r+0x1c>
 80044ae:	0023      	movs	r3, r4
 80044b0:	3347      	adds	r3, #71	; 0x47
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	6123      	str	r3, [r4, #16]
 80044b6:	2301      	movs	r3, #1
 80044b8:	6163      	str	r3, [r4, #20]
 80044ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80044bc:	466a      	mov	r2, sp
 80044be:	ab01      	add	r3, sp, #4
 80044c0:	f7ff ffc6 	bl	8004450 <__swhatbuf_r>
 80044c4:	9900      	ldr	r1, [sp, #0]
 80044c6:	0007      	movs	r7, r0
 80044c8:	0028      	movs	r0, r5
 80044ca:	f7ff fa4d 	bl	8003968 <_malloc_r>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d108      	bne.n	80044e4 <__smakebuf_r+0x44>
 80044d2:	220c      	movs	r2, #12
 80044d4:	5ea3      	ldrsh	r3, [r4, r2]
 80044d6:	059a      	lsls	r2, r3, #22
 80044d8:	d4ef      	bmi.n	80044ba <__smakebuf_r+0x1a>
 80044da:	2203      	movs	r2, #3
 80044dc:	4393      	bics	r3, r2
 80044de:	431e      	orrs	r6, r3
 80044e0:	81a6      	strh	r6, [r4, #12]
 80044e2:	e7e4      	b.n	80044ae <__smakebuf_r+0xe>
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <__smakebuf_r+0x84>)
 80044e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	89a2      	ldrh	r2, [r4, #12]
 80044ec:	6020      	str	r0, [r4, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	81a3      	strh	r3, [r4, #12]
 80044f2:	9b00      	ldr	r3, [sp, #0]
 80044f4:	6120      	str	r0, [r4, #16]
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	9b01      	ldr	r3, [sp, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <__smakebuf_r+0x7a>
 80044fe:	0028      	movs	r0, r5
 8004500:	230e      	movs	r3, #14
 8004502:	5ee1      	ldrsh	r1, [r4, r3]
 8004504:	f000 f89c 	bl	8004640 <_isatty_r>
 8004508:	2800      	cmp	r0, #0
 800450a:	d006      	beq.n	800451a <__smakebuf_r+0x7a>
 800450c:	2203      	movs	r2, #3
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	4393      	bics	r3, r2
 8004512:	001a      	movs	r2, r3
 8004514:	2301      	movs	r3, #1
 8004516:	4313      	orrs	r3, r2
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	89a0      	ldrh	r0, [r4, #12]
 800451c:	4307      	orrs	r7, r0
 800451e:	81a7      	strh	r7, [r4, #12]
 8004520:	e7cb      	b.n	80044ba <__smakebuf_r+0x1a>
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	080037a5 	.word	0x080037a5

08004528 <memchr>:
 8004528:	b2c9      	uxtb	r1, r1
 800452a:	1882      	adds	r2, r0, r2
 800452c:	4290      	cmp	r0, r2
 800452e:	d101      	bne.n	8004534 <memchr+0xc>
 8004530:	2000      	movs	r0, #0
 8004532:	4770      	bx	lr
 8004534:	7803      	ldrb	r3, [r0, #0]
 8004536:	428b      	cmp	r3, r1
 8004538:	d0fb      	beq.n	8004532 <memchr+0xa>
 800453a:	3001      	adds	r0, #1
 800453c:	e7f6      	b.n	800452c <memchr+0x4>
	...

08004540 <__malloc_lock>:
 8004540:	b510      	push	{r4, lr}
 8004542:	4802      	ldr	r0, [pc, #8]	; (800454c <__malloc_lock+0xc>)
 8004544:	f7ff fa0d 	bl	8003962 <__retarget_lock_acquire_recursive>
 8004548:	bd10      	pop	{r4, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	200002b8 	.word	0x200002b8

08004550 <__malloc_unlock>:
 8004550:	b510      	push	{r4, lr}
 8004552:	4802      	ldr	r0, [pc, #8]	; (800455c <__malloc_unlock+0xc>)
 8004554:	f7ff fa06 	bl	8003964 <__retarget_lock_release_recursive>
 8004558:	bd10      	pop	{r4, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	200002b8 	.word	0x200002b8

08004560 <_free_r>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	0005      	movs	r5, r0
 8004564:	2900      	cmp	r1, #0
 8004566:	d010      	beq.n	800458a <_free_r+0x2a>
 8004568:	1f0c      	subs	r4, r1, #4
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	da00      	bge.n	8004572 <_free_r+0x12>
 8004570:	18e4      	adds	r4, r4, r3
 8004572:	0028      	movs	r0, r5
 8004574:	f7ff ffe4 	bl	8004540 <__malloc_lock>
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <_free_r+0x90>)
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <_free_r+0x2c>
 8004580:	6063      	str	r3, [r4, #4]
 8004582:	6014      	str	r4, [r2, #0]
 8004584:	0028      	movs	r0, r5
 8004586:	f7ff ffe3 	bl	8004550 <__malloc_unlock>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	42a3      	cmp	r3, r4
 800458e:	d908      	bls.n	80045a2 <_free_r+0x42>
 8004590:	6821      	ldr	r1, [r4, #0]
 8004592:	1860      	adds	r0, r4, r1
 8004594:	4283      	cmp	r3, r0
 8004596:	d1f3      	bne.n	8004580 <_free_r+0x20>
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	1841      	adds	r1, r0, r1
 800459e:	6021      	str	r1, [r4, #0]
 80045a0:	e7ee      	b.n	8004580 <_free_r+0x20>
 80045a2:	001a      	movs	r2, r3
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <_free_r+0x4e>
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	d9f9      	bls.n	80045a2 <_free_r+0x42>
 80045ae:	6811      	ldr	r1, [r2, #0]
 80045b0:	1850      	adds	r0, r2, r1
 80045b2:	42a0      	cmp	r0, r4
 80045b4:	d10b      	bne.n	80045ce <_free_r+0x6e>
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	1809      	adds	r1, r1, r0
 80045ba:	1850      	adds	r0, r2, r1
 80045bc:	6011      	str	r1, [r2, #0]
 80045be:	4283      	cmp	r3, r0
 80045c0:	d1e0      	bne.n	8004584 <_free_r+0x24>
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	1841      	adds	r1, r0, r1
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	6053      	str	r3, [r2, #4]
 80045cc:	e7da      	b.n	8004584 <_free_r+0x24>
 80045ce:	42a0      	cmp	r0, r4
 80045d0:	d902      	bls.n	80045d8 <_free_r+0x78>
 80045d2:	230c      	movs	r3, #12
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	e7d5      	b.n	8004584 <_free_r+0x24>
 80045d8:	6821      	ldr	r1, [r4, #0]
 80045da:	1860      	adds	r0, r4, r1
 80045dc:	4283      	cmp	r3, r0
 80045de:	d103      	bne.n	80045e8 <_free_r+0x88>
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	1841      	adds	r1, r0, r1
 80045e6:	6021      	str	r1, [r4, #0]
 80045e8:	6063      	str	r3, [r4, #4]
 80045ea:	6054      	str	r4, [r2, #4]
 80045ec:	e7ca      	b.n	8004584 <_free_r+0x24>
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	20000214 	.word	0x20000214

080045f4 <_read_r>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	0004      	movs	r4, r0
 80045f8:	0008      	movs	r0, r1
 80045fa:	0011      	movs	r1, r2
 80045fc:	001a      	movs	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	4d05      	ldr	r5, [pc, #20]	; (8004618 <_read_r+0x24>)
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fd f88d 	bl	8001722 <_read>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d103      	bne.n	8004614 <_read_r+0x20>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d000      	beq.n	8004614 <_read_r+0x20>
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200002c0 	.word	0x200002c0

0800461c <_fstat_r>:
 800461c:	2300      	movs	r3, #0
 800461e:	b570      	push	{r4, r5, r6, lr}
 8004620:	4d06      	ldr	r5, [pc, #24]	; (800463c <_fstat_r+0x20>)
 8004622:	0004      	movs	r4, r0
 8004624:	0008      	movs	r0, r1
 8004626:	0011      	movs	r1, r2
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	f7fd f8bd 	bl	80017a8 <_fstat>
 800462e:	1c43      	adds	r3, r0, #1
 8004630:	d103      	bne.n	800463a <_fstat_r+0x1e>
 8004632:	682b      	ldr	r3, [r5, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d000      	beq.n	800463a <_fstat_r+0x1e>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	200002c0 	.word	0x200002c0

08004640 <_isatty_r>:
 8004640:	2300      	movs	r3, #0
 8004642:	b570      	push	{r4, r5, r6, lr}
 8004644:	4d06      	ldr	r5, [pc, #24]	; (8004660 <_isatty_r+0x20>)
 8004646:	0004      	movs	r4, r0
 8004648:	0008      	movs	r0, r1
 800464a:	602b      	str	r3, [r5, #0]
 800464c:	f7fd f8ba 	bl	80017c4 <_isatty>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d103      	bne.n	800465c <_isatty_r+0x1c>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d000      	beq.n	800465c <_isatty_r+0x1c>
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	bd70      	pop	{r4, r5, r6, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	200002c0 	.word	0x200002c0

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
