
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003580  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037bc  080037bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c4  080037c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c8  080037c8  000137c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  0800383c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  0800383c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095cf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190f  00000000  00000000  00029667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0002af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fca7  00000000  00000000  0002bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a0e  00000000  00000000  0003b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f765  00000000  00000000  000453f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a4b5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001970  00000000  00000000  000a4bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003628 	.word	0x08003628

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003628 	.word	0x08003628

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t Rxdata[5] = {0};
char sayac[5];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	  //HAL_UART_Receive_IT(&hlpuart1, Rxdata, 5);
	  //AL_UART_Receive_IT(&hlpuart1, Rxdata, 5);
	  HAL_UART_Transmit_IT(&hlpuart1, Rxdata, 5);
 80004b0:	490a      	ldr	r1, [pc, #40]	; (80004dc <HAL_UART_RxCpltCallback+0x34>)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <HAL_UART_RxCpltCallback+0x38>)
 80004b4:	2205      	movs	r2, #5
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fc80 	bl	8001dbc <HAL_UART_Transmit_IT>
	  HAL_UART_Transmit_IT(&hlpuart1, "\r\n", 2);
 80004bc:	4909      	ldr	r1, [pc, #36]	; (80004e4 <HAL_UART_RxCpltCallback+0x3c>)
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <HAL_UART_RxCpltCallback+0x38>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fc7a 	bl	8001dbc <HAL_UART_Transmit_IT>
	  HAL_UART_Receive_IT(&hlpuart1, Rxdata, 5);
 80004c8:	4904      	ldr	r1, [pc, #16]	; (80004dc <HAL_UART_RxCpltCallback+0x34>)
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <HAL_UART_RxCpltCallback+0x38>)
 80004cc:	2205      	movs	r2, #5
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fcf4 	bl	8001ebc <HAL_UART_Receive_IT>



}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000110 	.word	0x20000110
 80004e0:	2000008c 	.word	0x2000008c
 80004e4:	08003640 	.word	0x08003640

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 f9e3 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f829 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8c7 	bl	8000688 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fa:	f000 f897 	bl	800062c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&hlpuart1, Rxdata, 5);
 80004fe:	490e      	ldr	r1, [pc, #56]	; (8000538 <main+0x50>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <main+0x54>)
 8000502:	2205      	movs	r2, #5
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fcd9 	bl	8001ebc <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
// 	  HAL_UART_Receive_IT (&hlpuart1, Rxdata, 5);
	    int x = atoi(Rxdata);
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <main+0x50>)
 800050c:	0018      	movs	r0, r3
 800050e:	f002 ffb9 	bl	8003484 <atoi>
 8000512:	0003      	movs	r3, r0
 8000514:	607b      	str	r3, [r7, #4]
		if (x == 9000){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a09      	ldr	r2, [pc, #36]	; (8000540 <main+0x58>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d105      	bne.n	800052a <main+0x42>

		HAL_UART_Transmit_IT(&hlpuart1, "test", 5);
 800051e:	4909      	ldr	r1, [pc, #36]	; (8000544 <main+0x5c>)
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <main+0x54>)
 8000522:	2205      	movs	r2, #5
 8000524:	0018      	movs	r0, r3
 8000526:	f001 fc49 	bl	8001dbc <HAL_UART_Transmit_IT>
		}
	  HAL_Delay(300);
 800052a:	2396      	movs	r3, #150	; 0x96
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fa32 	bl	8000998 <HAL_Delay>
  {
 8000534:	e7e9      	b.n	800050a <main+0x22>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	20000110 	.word	0x20000110
 800053c:	2000008c 	.word	0x2000008c
 8000540:	00002328 	.word	0x00002328
 8000544:	08003644 	.word	0x08003644

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b099      	sub	sp, #100	; 0x64
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	242c      	movs	r4, #44	; 0x2c
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2334      	movs	r3, #52	; 0x34
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f002 ffc3 	bl	80034e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	2318      	movs	r3, #24
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2314      	movs	r3, #20
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f002 ffbb 	bl	80034e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2318      	movs	r3, #24
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f002 ffb4 	bl	80034e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xdc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <SystemClock_Config+0xe0>)
 8000582:	401a      	ands	r2, r3
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xdc>)
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	0109      	lsls	r1, r1, #4
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2202      	movs	r2, #2
 8000594:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2210      	movs	r2, #16
 80005a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2202      	movs	r2, #2
 80005a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	02d2      	lsls	r2, r2, #11
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	03d2      	lsls	r2, r2, #15
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fce1 	bl	8000f88 <HAL_RCC_OscConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005ca:	f000 f87f 	bl	80006cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	2118      	movs	r1, #24
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	220f      	movs	r2, #15
 80005d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 f844 	bl	8001680 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005fc:	f000 f866 	bl	80006cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000600:	003b      	movs	r3, r7
 8000602:	2204      	movs	r2, #4
 8000604:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000606:	003b      	movs	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060c:	003b      	movs	r3, r7
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fa5a 	bl	8001ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000618:	f000 f858 	bl	80006cc <Error_Handler>
  }
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b019      	add	sp, #100	; 0x64
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40007000 	.word	0x40007000
 8000628:	ffffe7ff 	.word	0xffffe7ff

0800062c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <MX_LPUART1_UART_Init+0x58>)
 8000634:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000638:	22e1      	movs	r2, #225	; 0xe1
 800063a:	0252      	lsls	r2, r2, #9
 800063c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 800066a:	0018      	movs	r0, r3
 800066c:	f001 fb52 	bl	8001d14 <HAL_UART_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f82a 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	2000008c 	.word	0x2000008c
 8000684:	40004800 	.word	0x40004800

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_GPIO_Init+0x40>)
 8000690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_GPIO_Init+0x40>)
 8000694:	2104      	movs	r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_GPIO_Init+0x40>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	2204      	movs	r2, #4
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_GPIO_Init+0x40>)
 80006a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_GPIO_Init+0x40>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_GPIO_Init+0x40>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_MspInit+0x24>)
 80006de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_MspInit+0x24>)
 80006e2:	2101      	movs	r1, #1
 80006e4:	430a      	orrs	r2, r1
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_MspInit+0x24>)
 80006ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <HAL_MspInit+0x24>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	0549      	lsls	r1, r1, #21
 80006f2:	430a      	orrs	r2, r1
 80006f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	2414      	movs	r4, #20
 800070a:	193b      	adds	r3, r7, r4
 800070c:	0018      	movs	r0, r3
 800070e:	2314      	movs	r3, #20
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f002 fee6 	bl	80034e4 <memset>
  if(huart->Instance==LPUART1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <HAL_UART_MspInit+0xd0>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d152      	bne.n	80007c8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 8000724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	02c9      	lsls	r1, r1, #11
 800072c:	430a      	orrs	r2, r1
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 8000732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 8000736:	2104      	movs	r1, #4
 8000738:	430a      	orrs	r2, r1
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 800073e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000740:	2204      	movs	r2, #4
 8000742:	4013      	ands	r3, r2
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 800074a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 800074e:	2102      	movs	r1, #2
 8000750:	430a      	orrs	r2, r1
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <HAL_UART_MspInit+0xd4>)
 8000756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000758:	2202      	movs	r2, #2
 800075a:	4013      	ands	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2202      	movs	r2, #2
 800076a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2203      	movs	r2, #3
 8000776:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2206      	movs	r2, #6
 800077c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	193b      	adds	r3, r7, r4
 8000780:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <HAL_UART_MspInit+0xd8>)
 8000782:	0019      	movs	r1, r3
 8000784:	0010      	movs	r0, r2
 8000786:	f000 fa91 	bl	8000cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078a:	0021      	movs	r1, r4
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	00d2      	lsls	r2, r2, #3
 8000792:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2202      	movs	r2, #2
 8000798:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2203      	movs	r2, #3
 80007a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2206      	movs	r2, #6
 80007aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <HAL_UART_MspInit+0xdc>)
 80007b0:	0019      	movs	r1, r3
 80007b2:	0010      	movs	r0, r2
 80007b4:	f000 fa7a 	bl	8000cac <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	201d      	movs	r0, #29
 80007be:	f000 f9bb 	bl	8000b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80007c2:	201d      	movs	r0, #29
 80007c4:	f000 f9cd 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b00b      	add	sp, #44	; 0x2c
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	40004800 	.word	0x40004800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	50000800 	.word	0x50000800
 80007dc:	50000400 	.word	0x50000400

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f8ac 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <LPUART1_IRQHandler+0x14>)
 8000816:	0018      	movs	r0, r3
 8000818:	f001 fbb8 	bl	8001f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	2000008c 	.word	0x2000008c

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000834:	4813      	ldr	r0, [pc, #76]	; (8000884 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000836:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <LoopForever+0x6>)
    LDR R1, [R0]
 800083a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800083c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <LoopForever+0xa>)
    CMP R1, R2
 8000840:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000842:	d105      	bne.n	8000850 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000844:	4812      	ldr	r0, [pc, #72]	; (8000890 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000846:	4913      	ldr	r1, [pc, #76]	; (8000894 <LoopForever+0x12>)
    STR R1, [R0]
 8000848:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800084a:	4813      	ldr	r0, [pc, #76]	; (8000898 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <LoopForever+0x1a>)
    STR R1, [R0]
 800084e:	6001      	str	r1, [r0, #0]

08000850 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000852:	4914      	ldr	r1, [pc, #80]	; (80008a4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <LoopForever+0x26>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000868:	4c11      	ldr	r4, [pc, #68]	; (80008b0 <LoopForever+0x2e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000876:	f7ff ffd7 	bl	8000828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087a:	f002 fe0f 	bl	800349c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087e:	f7ff fe33 	bl	80004e8 <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
   ldr   r0, =_estack
 8000884:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000888:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800088c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000890:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000894:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000898:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800089c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008a8:	080037cc 	.word	0x080037cc
  ldr r2, =_sbss
 80008ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008b0:	2000011c 	.word	0x2000011c

080008b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_IRQHandler>
	...

080008b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_Init+0x3c>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Init+0x3c>)
 80008ca:	2140      	movs	r1, #64	; 0x40
 80008cc:	430a      	orrs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f811 	bl	80008f8 <HAL_InitTick>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d003      	beq.n	80008e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e001      	b.n	80008e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008e2:	f7ff fef9 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x5c>)
 8000902:	681c      	ldr	r4, [r3, #0]
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0019      	movs	r1, r3
 800090a:	23fa      	movs	r3, #250	; 0xfa
 800090c:	0098      	lsls	r0, r3, #2
 800090e:	f7ff fbfb 	bl	8000108 <__udivsi3>
 8000912:	0003      	movs	r3, r0
 8000914:	0019      	movs	r1, r3
 8000916:	0020      	movs	r0, r4
 8000918:	f7ff fbf6 	bl	8000108 <__udivsi3>
 800091c:	0003      	movs	r3, r0
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f92f 	bl	8000b82 <HAL_SYSTICK_Config>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	e00f      	b.n	800094c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d80b      	bhi.n	800094a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f8fc 	bl	8000b38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_InitTick+0x64>)
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b003      	add	sp, #12
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	001a      	movs	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	18d2      	adds	r2, r2, r3
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000008 	.word	0x20000008
 8000980:	20000118 	.word	0x20000118

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000118 	.word	0x20000118

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff fff0 	bl	8000984 <HAL_GetTick>
 80009a4:	0003      	movs	r3, r0
 80009a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	001a      	movs	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	f7ff ffe0 	bl	8000984 <HAL_GetTick>
 80009c4:	0002      	movs	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	20000008 	.word	0x20000008

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	0002      	movs	r2, r0
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b7f      	cmp	r3, #127	; 0x7f
 80009f2:	d809      	bhi.n	8000a08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	001a      	movs	r2, r3
 80009fa:	231f      	movs	r3, #31
 80009fc:	401a      	ands	r2, r3
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_EnableIRQ+0x30>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	4091      	lsls	r1, r2
 8000a04:	000a      	movs	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]
  }
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b7f      	cmp	r3, #127	; 0x7f
 8000a28:	d828      	bhi.n	8000a7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <__NVIC_SetPriority+0xd4>)
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	33c0      	adds	r3, #192	; 0xc0
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	589b      	ldr	r3, [r3, r2]
 8000a3a:	1dfa      	adds	r2, r7, #7
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	0011      	movs	r1, r2
 8000a40:	2203      	movs	r2, #3
 8000a42:	400a      	ands	r2, r1
 8000a44:	00d2      	lsls	r2, r2, #3
 8000a46:	21ff      	movs	r1, #255	; 0xff
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	401a      	ands	r2, r3
 8000a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	019b      	lsls	r3, r3, #6
 8000a56:	22ff      	movs	r2, #255	; 0xff
 8000a58:	401a      	ands	r2, r3
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2303      	movs	r3, #3
 8000a62:	4003      	ands	r3, r0
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <__NVIC_SetPriority+0xd4>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	33c0      	adds	r3, #192	; 0xc0
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a7a:	e031      	b.n	8000ae0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <__NVIC_SetPriority+0xd8>)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0019      	movs	r1, r3
 8000a84:	230f      	movs	r3, #15
 8000a86:	400b      	ands	r3, r1
 8000a88:	3b08      	subs	r3, #8
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3306      	adds	r3, #6
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	3304      	adds	r3, #4
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	1dfa      	adds	r2, r7, #7
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	21ff      	movs	r1, #255	; 0xff
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	401a      	ands	r2, r3
 8000aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0018      	movs	r0, r3
 8000abc:	2303      	movs	r3, #3
 8000abe:	4003      	ands	r3, r0
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <__NVIC_SetPriority+0xd8>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	001c      	movs	r4, r3
 8000acc:	230f      	movs	r3, #15
 8000ace:	4023      	ands	r3, r4
 8000ad0:	3b08      	subs	r3, #8
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	3306      	adds	r3, #6
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	18c3      	adds	r3, r0, r3
 8000adc:	3304      	adds	r3, #4
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b003      	add	sp, #12
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	045b      	lsls	r3, r3, #17
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d301      	bcc.n	8000b08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b04:	2301      	movs	r3, #1
 8000b06:	e010      	b.n	8000b2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <SysTick_Config+0x44>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b10:	2301      	movs	r3, #1
 8000b12:	425b      	negs	r3, r3
 8000b14:	2103      	movs	r1, #3
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff ff7c 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x44>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x44>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	210f      	movs	r1, #15
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	1c02      	adds	r2, r0, #0
 8000b48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff ff5d 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	0002      	movs	r2, r0
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff33 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff ffaf 	bl	8000af0 <SysTick_Config>
 8000b92:	0003      	movs	r3, r0
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2225      	movs	r2, #37	; 0x25
 8000bb0:	5c9b      	ldrb	r3, [r3, r2]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d008      	beq.n	8000bca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2224      	movs	r2, #36	; 0x24
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e024      	b.n	8000c14 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	438a      	bics	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	221c      	movs	r2, #28
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2225      	movs	r2, #37	; 0x25
 8000c02:	2101      	movs	r1, #1
 8000c04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2224      	movs	r2, #36	; 0x24
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	5499      	strb	r1, [r3, r2]

    return status;
 8000c0e:	230f      	movs	r3, #15
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b004      	add	sp, #16
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c24:	210f      	movs	r1, #15
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2225      	movs	r2, #37	; 0x25
 8000c30:	5c9b      	ldrb	r3, [r3, r2]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d006      	beq.n	8000c46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e02a      	b.n	8000c9c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	210e      	movs	r1, #14
 8000c52:	438a      	bics	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	438a      	bics	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	221c      	movs	r2, #28
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	2101      	movs	r1, #1
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2225      	movs	r2, #37	; 0x25
 8000c7e:	2101      	movs	r1, #1
 8000c80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2224      	movs	r2, #36	; 0x24
 8000c86:	2100      	movs	r1, #0
 8000c88:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d004      	beq.n	8000c9c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	0010      	movs	r0, r2
 8000c9a:	4798      	blx	r3
    }
  }
  return status;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	781b      	ldrb	r3, [r3, #0]
}
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cc2:	e149      	b.n	8000f58 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	000a      	movs	r2, r1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d100      	bne.n	8000cdc <HAL_GPIO_Init+0x30>
 8000cda:	e13a      	b.n	8000f52 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d005      	beq.n	8000cf4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d130      	bne.n	8000d56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	43da      	mvns	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	409a      	lsls	r2, r3
 8000d16:	0013      	movs	r3, r2
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	2201      	movs	r2, #1
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d017      	beq.n	8000d92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2203      	movs	r2, #3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d123      	bne.n	8000de6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	58d3      	ldr	r3, [r2, r3]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2207      	movs	r2, #7
 8000db0:	4013      	ands	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2107      	movs	r1, #7
 8000dca:	400b      	ands	r3, r1
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3208      	adds	r2, #8
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	6939      	ldr	r1, [r7, #16]
 8000de4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2203      	movs	r2, #3
 8000e04:	401a      	ands	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	029b      	lsls	r3, r3, #10
 8000e22:	4013      	ands	r3, r2
 8000e24:	d100      	bne.n	8000e28 <HAL_GPIO_Init+0x17c>
 8000e26:	e094      	b.n	8000f52 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e28:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <HAL_GPIO_Init+0x2c4>)
 8000e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e2c:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <HAL_GPIO_Init+0x2c4>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e34:	4a4f      	ldr	r2, [pc, #316]	; (8000f74 <HAL_GPIO_Init+0x2c8>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	589b      	ldr	r3, [r3, r2]
 8000e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x1de>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <HAL_GPIO_Init+0x2cc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x1da>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <HAL_GPIO_Init+0x2d0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x1d6>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a42      	ldr	r2, [pc, #264]	; (8000f80 <HAL_GPIO_Init+0x2d4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x1d2>
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x1e0>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x1e0>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x1e0>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x1e0>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	2103      	movs	r1, #3
 8000e90:	400a      	ands	r2, r1
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9c:	4935      	ldr	r1, [pc, #212]	; (8000f74 <HAL_GPIO_Init+0x2c8>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4013      	ands	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	035b      	lsls	r3, r3, #13
 8000f16:	4013      	ands	r3, r2
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	039b      	lsls	r3, r3, #14
 8000f40:	4013      	ands	r3, r2
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	40da      	lsrs	r2, r3
 8000f60:	1e13      	subs	r3, r2, #0
 8000f62:	d000      	beq.n	8000f66 <HAL_GPIO_Init+0x2ba>
 8000f64:	e6ae      	b.n	8000cc4 <HAL_GPIO_Init+0x18>
  }
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b006      	add	sp, #24
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	50000400 	.word	0x50000400
 8000f7c:	50000800 	.word	0x50000800
 8000f80:	50001c00 	.word	0x50001c00
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f000 fb6c 	bl	8001674 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f9c:	4bc8      	ldr	r3, [pc, #800]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa6:	4bc6      	ldr	r3, [pc, #792]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_OscConfig+0x36>
 8000fbc:	e07d      	b.n	80010ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d007      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b0c      	cmp	r3, #12
 8000fc8:	d112      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x68>
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	025b      	lsls	r3, r3, #9
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d10d      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	4bba      	ldr	r3, [pc, #744]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	029b      	lsls	r3, r3, #10
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x5a>
 8000fe0:	e06a      	b.n	80010b8 <HAL_RCC_OscConfig+0x130>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d166      	bne.n	80010b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	f000 fb42 	bl	8001674 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	025b      	lsls	r3, r3, #9
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d107      	bne.n	800100c <HAL_RCC_OscConfig+0x84>
 8000ffc:	4bb0      	ldr	r3, [pc, #704]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4baf      	ldr	r3, [pc, #700]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0249      	lsls	r1, r1, #9
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e027      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	02db      	lsls	r3, r3, #11
 8001014:	429a      	cmp	r2, r3
 8001016:	d10e      	bne.n	8001036 <HAL_RCC_OscConfig+0xae>
 8001018:	4ba9      	ldr	r3, [pc, #676]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4ba8      	ldr	r3, [pc, #672]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	02c9      	lsls	r1, r1, #11
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	4ba6      	ldr	r3, [pc, #664]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4ba5      	ldr	r3, [pc, #660]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	0249      	lsls	r1, r1, #9
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e012      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 8001036:	4ba2      	ldr	r3, [pc, #648]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4ba1      	ldr	r3, [pc, #644]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800103c:	49a1      	ldr	r1, [pc, #644]	; (80012c4 <HAL_RCC_OscConfig+0x33c>)
 800103e:	400a      	ands	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	4b9f      	ldr	r3, [pc, #636]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4b9b      	ldr	r3, [pc, #620]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001056:	499c      	ldr	r1, [pc, #624]	; (80012c8 <HAL_RCC_OscConfig+0x340>)
 8001058:	400a      	ands	r2, r1
 800105a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d014      	beq.n	800108e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fc8e 	bl	8000984 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106e:	f7ff fc89 	bl	8000984 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b64      	cmp	r3, #100	; 0x64
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e2f9      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001080:	4b8f      	ldr	r3, [pc, #572]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	029b      	lsls	r3, r3, #10
 8001088:	4013      	ands	r3, r2
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0xe6>
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fc79 	bl	8000984 <HAL_GetTick>
 8001092:	0003      	movs	r3, r0
 8001094:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fc74 	bl	8000984 <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e2e4      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010aa:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	029b      	lsls	r3, r3, #10
 80010b2:	4013      	ands	r3, r2
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x110>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2202      	movs	r2, #2
 80010c0:	4013      	ands	r3, r2
 80010c2:	d100      	bne.n	80010c6 <HAL_RCC_OscConfig+0x13e>
 80010c4:	e099      	b.n	80011fa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	2220      	movs	r2, #32
 80010d0:	4013      	ands	r3, r2
 80010d2:	d009      	beq.n	80010e8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80010d4:	4b7a      	ldr	r3, [pc, #488]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80010da:	2120      	movs	r1, #32
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	2220      	movs	r2, #32
 80010e4:	4393      	bics	r3, r2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d005      	beq.n	80010fa <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d13e      	bne.n	8001172 <HAL_RCC_OscConfig+0x1ea>
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d13b      	bne.n	8001172 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010fa:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2204      	movs	r2, #4
 8001100:	4013      	ands	r3, r2
 8001102:	d004      	beq.n	800110e <HAL_RCC_OscConfig+0x186>
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e2b2      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b6c      	ldr	r3, [pc, #432]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4a6e      	ldr	r2, [pc, #440]	; (80012cc <HAL_RCC_OscConfig+0x344>)
 8001114:	4013      	ands	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	021a      	lsls	r2, r3, #8
 800111e:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001120:	430a      	orrs	r2, r1
 8001122:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2209      	movs	r2, #9
 800112a:	4393      	bics	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001136:	f000 fbeb 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 800113a:	0001      	movs	r1, r0
 800113c:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	220f      	movs	r2, #15
 8001144:	4013      	ands	r3, r2
 8001146:	4a62      	ldr	r2, [pc, #392]	; (80012d0 <HAL_RCC_OscConfig+0x348>)
 8001148:	5cd3      	ldrb	r3, [r2, r3]
 800114a:	000a      	movs	r2, r1
 800114c:	40da      	lsrs	r2, r3
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <HAL_RCC_OscConfig+0x34c>)
 8001150:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001152:	4b61      	ldr	r3, [pc, #388]	; (80012d8 <HAL_RCC_OscConfig+0x350>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2513      	movs	r5, #19
 8001158:	197c      	adds	r4, r7, r5
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff fbcc 	bl	80008f8 <HAL_InitTick>
 8001160:	0003      	movs	r3, r0
 8001162:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001164:	197b      	adds	r3, r7, r5
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d046      	beq.n	80011fa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800116c:	197b      	adds	r3, r7, r5
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	e280      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	2b00      	cmp	r3, #0
 8001176:	d027      	beq.n	80011c8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001178:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2209      	movs	r2, #9
 800117e:	4393      	bics	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fbfb 	bl	8000984 <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fbf6 	bl	8000984 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e266      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2204      	movs	r2, #4
 80011ac:	4013      	ands	r3, r2
 80011ae:	d0f1      	beq.n	8001194 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a45      	ldr	r2, [pc, #276]	; (80012cc <HAL_RCC_OscConfig+0x344>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	0019      	movs	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	021a      	lsls	r2, r3, #8
 80011c0:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80011c2:	430a      	orrs	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	e018      	b.n	80011fa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c8:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	438a      	bics	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fbd6 	bl	8000984 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fbd1 	bl	8000984 <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e241      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2204      	movs	r2, #4
 80011f6:	4013      	ands	r3, r2
 80011f8:	d1f1      	bne.n	80011de <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2210      	movs	r2, #16
 8001200:	4013      	ands	r3, r2
 8001202:	d100      	bne.n	8001206 <HAL_RCC_OscConfig+0x27e>
 8001204:	e0a1      	b.n	800134a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d140      	bne.n	800128e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d005      	beq.n	8001224 <HAL_RCC_OscConfig+0x29c>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e227      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a2c      	ldr	r2, [pc, #176]	; (80012dc <HAL_RCC_OscConfig+0x354>)
 800122a:	4013      	ands	r3, r2
 800122c:	0019      	movs	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1a      	ldr	r2, [r3, #32]
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	0a19      	lsrs	r1, r3, #8
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	061a      	lsls	r2, r3, #24
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001248:	430a      	orrs	r2, r1
 800124a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	0b5b      	lsrs	r3, r3, #13
 8001252:	3301      	adds	r3, #1
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	0212      	lsls	r2, r2, #8
 8001258:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	210f      	movs	r1, #15
 8001262:	400b      	ands	r3, r1
 8001264:	491a      	ldr	r1, [pc, #104]	; (80012d0 <HAL_RCC_OscConfig+0x348>)
 8001266:	5ccb      	ldrb	r3, [r1, r3]
 8001268:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_RCC_OscConfig+0x34c>)
 800126c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_RCC_OscConfig+0x350>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2513      	movs	r5, #19
 8001274:	197c      	adds	r4, r7, r5
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff fb3e 	bl	80008f8 <HAL_InitTick>
 800127c:	0003      	movs	r3, r0
 800127e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001280:	197b      	adds	r3, r7, r5
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d060      	beq.n	800134a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001288:	197b      	adds	r3, r7, r5
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	e1f2      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03f      	beq.n	8001316 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_RCC_OscConfig+0x338>)
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	0049      	lsls	r1, r1, #1
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fb6e 	bl	8000984 <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012ac:	e018      	b.n	80012e0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb69 	bl	8000984 <HAL_GetTick>
 80012b2:	0002      	movs	r2, r0
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d911      	bls.n	80012e0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1d9      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
 80012c0:	40021000 	.word	0x40021000
 80012c4:	fffeffff 	.word	0xfffeffff
 80012c8:	fffbffff 	.word	0xfffbffff
 80012cc:	ffffe0ff 	.word	0xffffe0ff
 80012d0:	0800364c 	.word	0x0800364c
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000004 	.word	0x20000004
 80012dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012e0:	4bc9      	ldr	r3, [pc, #804]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	d0e0      	beq.n	80012ae <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ec:	4bc6      	ldr	r3, [pc, #792]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4ac6      	ldr	r2, [pc, #792]	; (800160c <HAL_RCC_OscConfig+0x684>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1a      	ldr	r2, [r3, #32]
 80012fa:	4bc3      	ldr	r3, [pc, #780]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001300:	4bc1      	ldr	r3, [pc, #772]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	0a19      	lsrs	r1, r3, #8
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	061a      	lsls	r2, r3, #24
 800130e:	4bbe      	ldr	r3, [pc, #760]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001310:	430a      	orrs	r2, r1
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	e019      	b.n	800134a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001316:	4bbc      	ldr	r3, [pc, #752]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4bbb      	ldr	r3, [pc, #748]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800131c:	49bc      	ldr	r1, [pc, #752]	; (8001610 <HAL_RCC_OscConfig+0x688>)
 800131e:	400a      	ands	r2, r1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fb2f 	bl	8000984 <HAL_GetTick>
 8001326:	0003      	movs	r3, r0
 8001328:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800132c:	f7ff fb2a 	bl	8000984 <HAL_GetTick>
 8001330:	0002      	movs	r2, r0
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e19a      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800133e:	4bb2      	ldr	r3, [pc, #712]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2208      	movs	r2, #8
 8001350:	4013      	ands	r3, r2
 8001352:	d036      	beq.n	80013c2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d019      	beq.n	8001390 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135c:	4baa      	ldr	r3, [pc, #680]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800135e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001360:	4ba9      	ldr	r3, [pc, #676]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001368:	f7ff fb0c 	bl	8000984 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fb07 	bl	8000984 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e177      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001384:	4ba0      	ldr	r3, [pc, #640]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d0f1      	beq.n	8001372 <HAL_RCC_OscConfig+0x3ea>
 800138e:	e018      	b.n	80013c2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b9d      	ldr	r3, [pc, #628]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001394:	4b9c      	ldr	r3, [pc, #624]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001396:	2101      	movs	r1, #1
 8001398:	438a      	bics	r2, r1
 800139a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff faf2 	bl	8000984 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff faed 	bl	8000984 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e15d      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013b8:	4b93      	ldr	r3, [pc, #588]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80013ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f1      	bne.n	80013a6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x446>
 80013cc:	e0ae      	b.n	800152c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2023      	movs	r0, #35	; 0x23
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b8c      	ldr	r3, [pc, #560]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80013d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	055b      	lsls	r3, r3, #21
 80013de:	4013      	ands	r3, r2
 80013e0:	d109      	bne.n	80013f6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b89      	ldr	r3, [pc, #548]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80013e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0549      	lsls	r1, r1, #21
 80013ec:	430a      	orrs	r2, r1
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b87      	ldr	r3, [pc, #540]	; (8001614 <HAL_RCC_OscConfig+0x68c>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	d11a      	bne.n	8001438 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4b84      	ldr	r3, [pc, #528]	; (8001614 <HAL_RCC_OscConfig+0x68c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b83      	ldr	r3, [pc, #524]	; (8001614 <HAL_RCC_OscConfig+0x68c>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0049      	lsls	r1, r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001410:	f7ff fab8 	bl	8000984 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff fab3 	bl	8000984 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b64      	cmp	r3, #100	; 0x64
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e123      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	4b79      	ldr	r3, [pc, #484]	; (8001614 <HAL_RCC_OscConfig+0x68c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4013      	ands	r3, r2
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	429a      	cmp	r2, r3
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x4cc>
 8001444:	4b70      	ldr	r3, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001448:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0049      	lsls	r1, r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	651a      	str	r2, [r3, #80]	; 0x50
 8001452:	e031      	b.n	80014b8 <HAL_RCC_OscConfig+0x530>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10c      	bne.n	8001476 <HAL_RCC_OscConfig+0x4ee>
 800145c:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800145e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001460:	4b69      	ldr	r3, [pc, #420]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001462:	496b      	ldr	r1, [pc, #428]	; (8001610 <HAL_RCC_OscConfig+0x688>)
 8001464:	400a      	ands	r2, r1
 8001466:	651a      	str	r2, [r3, #80]	; 0x50
 8001468:	4b67      	ldr	r3, [pc, #412]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800146a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800146e:	496a      	ldr	r1, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x690>)
 8001470:	400a      	ands	r2, r1
 8001472:	651a      	str	r2, [r3, #80]	; 0x50
 8001474:	e020      	b.n	80014b8 <HAL_RCC_OscConfig+0x530>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	429a      	cmp	r2, r3
 8001480:	d10e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x518>
 8001482:	4b61      	ldr	r3, [pc, #388]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001486:	4b60      	ldr	r3, [pc, #384]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	00c9      	lsls	r1, r1, #3
 800148c:	430a      	orrs	r2, r1
 800148e:	651a      	str	r2, [r3, #80]	; 0x50
 8001490:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001494:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	0049      	lsls	r1, r1, #1
 800149a:	430a      	orrs	r2, r1
 800149c:	651a      	str	r2, [r3, #80]	; 0x50
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x530>
 80014a0:	4b59      	ldr	r3, [pc, #356]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80014a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a4:	4b58      	ldr	r3, [pc, #352]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80014a6:	495a      	ldr	r1, [pc, #360]	; (8001610 <HAL_RCC_OscConfig+0x688>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	651a      	str	r2, [r3, #80]	; 0x50
 80014ac:	4b56      	ldr	r3, [pc, #344]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80014ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b0:	4b55      	ldr	r3, [pc, #340]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80014b2:	4959      	ldr	r1, [pc, #356]	; (8001618 <HAL_RCC_OscConfig+0x690>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d015      	beq.n	80014ec <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa60 	bl	8000984 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c8:	e009      	b.n	80014de <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff fa5b 	bl	8000984 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	4a51      	ldr	r2, [pc, #324]	; (800161c <HAL_RCC_OscConfig+0x694>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0ca      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80014e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	d0ef      	beq.n	80014ca <HAL_RCC_OscConfig+0x542>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fa4a 	bl	8000984 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014f4:	e009      	b.n	800150a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fa45 	bl	8000984 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_RCC_OscConfig+0x694>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0b4      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800150c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1ef      	bne.n	80014f6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001516:	2323      	movs	r3, #35	; 0x23
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001526:	493e      	ldr	r1, [pc, #248]	; (8001620 <HAL_RCC_OscConfig+0x698>)
 8001528:	400a      	ands	r2, r1
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	2b00      	cmp	r3, #0
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x5ae>
 8001534:	e09d      	b.n	8001672 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d100      	bne.n	800153e <HAL_RCC_OscConfig+0x5b6>
 800153c:	e076      	b.n	800162c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	2b02      	cmp	r3, #2
 8001544:	d145      	bne.n	80015d2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <HAL_RCC_OscConfig+0x69c>)
 800154e:	400a      	ands	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fa17 	bl	8000984 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fa12 	bl	8000984 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e082      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	049b      	lsls	r3, r3, #18
 8001576:	4013      	ands	r3, r2
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	4a2a      	ldr	r2, [pc, #168]	; (8001628 <HAL_RCC_OscConfig+0x6a0>)
 8001580:	4013      	ands	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	431a      	orrs	r2, r3
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	0449      	lsls	r1, r1, #17
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f9ec 	bl	8000984 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff f9e7 	bl	8000984 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e057      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	049b      	lsls	r3, r3, #18
 80015cc:	4013      	ands	r3, r2
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x62a>
 80015d0:	e04f      	b.n	8001672 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80015d8:	4912      	ldr	r1, [pc, #72]	; (8001624 <HAL_RCC_OscConfig+0x69c>)
 80015da:	400a      	ands	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff f9d1 	bl	8000984 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff f9cc 	bl	8000984 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e03c      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015fa:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_RCC_OscConfig+0x680>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	049b      	lsls	r3, r3, #18
 8001602:	4013      	ands	r3, r2
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x660>
 8001606:	e034      	b.n	8001672 <HAL_RCC_OscConfig+0x6ea>
 8001608:	40021000 	.word	0x40021000
 800160c:	ffff1fff 	.word	0xffff1fff
 8001610:	fffffeff 	.word	0xfffffeff
 8001614:	40007000 	.word	0x40007000
 8001618:	fffffbff 	.word	0xfffffbff
 800161c:	00001388 	.word	0x00001388
 8001620:	efffffff 	.word	0xefffffff
 8001624:	feffffff 	.word	0xfeffffff
 8001628:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_RCC_OscConfig+0x6f4>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	429a      	cmp	r2, r3
 800164c:	d10f      	bne.n	800166e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	23f0      	movs	r3, #240	; 0xf0
 8001652:	039b      	lsls	r3, r3, #14
 8001654:	401a      	ands	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d107      	bne.n	800166e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	401a      	ands	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b00a      	add	sp, #40	; 0x28
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	40021000 	.word	0x40021000

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e128      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	4013      	ands	r3, r2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d91e      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	4393      	bics	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016b4:	f7ff f966 	bl	8000984 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016be:	f7ff f961 	bl	8000984 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	4a8a      	ldr	r2, [pc, #552]	; (80018f4 <HAL_RCC_ClockConfig+0x274>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e109      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b87      	ldr	r3, [pc, #540]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1ee      	bne.n	80016be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	22f0      	movs	r2, #240	; 0xf0
 80016f0:	4393      	bics	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 80016fa:	430a      	orrs	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	4013      	ands	r3, r2
 8001706:	d100      	bne.n	800170a <HAL_RCC_ClockConfig+0x8a>
 8001708:	e089      	b.n	800181e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001712:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	029b      	lsls	r3, r3, #10
 800171a:	4013      	ands	r3, r2
 800171c:	d120      	bne.n	8001760 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0e1      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800172a:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d114      	bne.n	8001760 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0d5      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001742:	4b6d      	ldr	r3, [pc, #436]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d109      	bne.n	8001760 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0ca      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001750:	4b69      	ldr	r3, [pc, #420]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4013      	ands	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0c2      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2203      	movs	r2, #3
 8001766:	4393      	bics	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff f906 	bl	8000984 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d111      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	e009      	b.n	800179a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7ff f8fd 	bl	8000984 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_RCC_ClockConfig+0x274>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0a5      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	220c      	movs	r2, #12
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d1ef      	bne.n	8001786 <HAL_RCC_ClockConfig+0x106>
 80017a6:	e03a      	b.n	800181e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d111      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	e009      	b.n	80017c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b2:	f7ff f8e7 	bl	8000984 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_RCC_ClockConfig+0x274>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e08f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	220c      	movs	r2, #12
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d1ef      	bne.n	80017b2 <HAL_RCC_ClockConfig+0x132>
 80017d2:	e024      	b.n	800181e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d11b      	bne.n	8001814 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7ff f8d1 	bl	8000984 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <HAL_RCC_ClockConfig+0x274>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e079      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	220c      	movs	r2, #12
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d1ef      	bne.n	80017de <HAL_RCC_ClockConfig+0x15e>
 80017fe:	e00e      	b.n	800181e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff f8c0 	bl	8000984 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	4a3a      	ldr	r2, [pc, #232]	; (80018f4 <HAL_RCC_ClockConfig+0x274>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e068      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	220c      	movs	r2, #12
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d21e      	bcs.n	800186a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182c:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	4393      	bics	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800183e:	f7ff f8a1 	bl	8000984 <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	e009      	b.n	800185c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff f89c 	bl	8000984 <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <HAL_RCC_ClockConfig+0x274>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e044      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_ClockConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d1ee      	bne.n	8001848 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2204      	movs	r2, #4
 8001870:	4013      	ands	r3, r2
 8001872:	d009      	beq.n	8001888 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x27c>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001884:	430a      	orrs	r2, r1
 8001886:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2208      	movs	r2, #8
 800188e:	4013      	ands	r3, r2
 8001890:	d00a      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <HAL_RCC_ClockConfig+0x280>)
 8001898:	4013      	ands	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	00da      	lsls	r2, r3, #3
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a8:	f000 f832 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ac:	0001      	movs	r1, r0
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x278>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	220f      	movs	r2, #15
 80018b6:	4013      	ands	r3, r2
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_RCC_ClockConfig+0x284>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	000a      	movs	r2, r1
 80018be:	40da      	lsrs	r2, r3
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_RCC_ClockConfig+0x288>)
 80018c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_RCC_ClockConfig+0x28c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	250b      	movs	r5, #11
 80018ca:	197c      	adds	r4, r7, r5
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff f813 	bl	80008f8 <HAL_InitTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80018d6:	197b      	adds	r3, r7, r5
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80018de:	197b      	adds	r3, r7, r5
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bdb0      	pop	{r4, r5, r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40022000 	.word	0x40022000
 80018f4:	00001388 	.word	0x00001388
 80018f8:	40021000 	.word	0x40021000
 80018fc:	fffff8ff 	.word	0xfffff8ff
 8001900:	ffffc7ff 	.word	0xffffc7ff
 8001904:	0800364c 	.word	0x0800364c
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	230c      	movs	r3, #12
 8001920:	4013      	ands	r3, r2
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d014      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001926:	d900      	bls.n	800192a <HAL_RCC_GetSysClockFreq+0x1a>
 8001928:	e07b      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x112>
 800192a:	2b04      	cmp	r3, #4
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x24>
 800192e:	2b08      	cmp	r3, #8
 8001930:	d00b      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e076      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2210      	movs	r2, #16
 800193a:	4013      	ands	r3, r2
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800193e:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001942:	e07c      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001944:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x140>)
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001948:	e079      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x144>)
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800194e:	e076      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	0c9a      	lsrs	r2, r3, #18
 8001954:	230f      	movs	r3, #15
 8001956:	401a      	ands	r2, r3
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x148>)
 800195a:	5c9b      	ldrb	r3, [r3, r2]
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	0d9a      	lsrs	r2, r3, #22
 8001962:	2303      	movs	r3, #3
 8001964:	4013      	ands	r3, r2
 8001966:	3301      	adds	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	4013      	ands	r3, r2
 8001974:	d01a      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	4a35      	ldr	r2, [pc, #212]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x144>)
 8001980:	2300      	movs	r3, #0
 8001982:	69b8      	ldr	r0, [r7, #24]
 8001984:	69f9      	ldr	r1, [r7, #28]
 8001986:	f7fe fc6b 	bl	8000260 <__aeabi_lmul>
 800198a:	0002      	movs	r2, r0
 800198c:	000b      	movs	r3, r1
 800198e:	0010      	movs	r0, r2
 8001990:	0019      	movs	r1, r3
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f7fe fc3f 	bl	8000220 <__aeabi_uldivmod>
 80019a2:	0002      	movs	r2, r0
 80019a4:	000b      	movs	r3, r1
 80019a6:	0013      	movs	r3, r2
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
 80019aa:	e037      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2210      	movs	r2, #16
 80019b2:	4013      	ands	r3, r2
 80019b4:	d01a      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x13c>)
 80019c0:	2300      	movs	r3, #0
 80019c2:	68b8      	ldr	r0, [r7, #8]
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	f7fe fc4b 	bl	8000260 <__aeabi_lmul>
 80019ca:	0002      	movs	r2, r0
 80019cc:	000b      	movs	r3, r1
 80019ce:	0010      	movs	r0, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f7fe fc1f 	bl	8000220 <__aeabi_uldivmod>
 80019e2:	0002      	movs	r2, r0
 80019e4:	000b      	movs	r3, r1
 80019e6:	0013      	movs	r3, r2
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ea:	e017      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	0018      	movs	r0, r3
 80019f0:	2300      	movs	r3, #0
 80019f2:	0019      	movs	r1, r3
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x140>)
 80019f6:	2300      	movs	r3, #0
 80019f8:	f7fe fc32 	bl	8000260 <__aeabi_lmul>
 80019fc:	0002      	movs	r2, r0
 80019fe:	000b      	movs	r3, r1
 8001a00:	0010      	movs	r0, r2
 8001a02:	0019      	movs	r1, r3
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	001c      	movs	r4, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	001d      	movs	r5, r3
 8001a0c:	0022      	movs	r2, r4
 8001a0e:	002b      	movs	r3, r5
 8001a10:	f7fe fc06 	bl	8000220 <__aeabi_uldivmod>
 8001a14:	0002      	movs	r2, r0
 8001a16:	000b      	movs	r3, r1
 8001a18:	0013      	movs	r3, r2
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a20:	e00d      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0b5b      	lsrs	r3, r3, #13
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	3301      	adds	r3, #1
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	0212      	lsls	r2, r2, #8
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a3c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b00e      	add	sp, #56	; 0x38
 8001a46:	bdb0      	pop	{r4, r5, r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	003d0900 	.word	0x003d0900
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	08003664 	.word	0x08003664

08001a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff2 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001a78:	0001      	movs	r1, r0
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	2207      	movs	r2, #7
 8001a82:	4013      	ands	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	40d9      	lsrs	r1, r3
 8001a8a:	000b      	movs	r3, r1
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000
 8001a98:	0800365c 	.word	0x0800365c

08001a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa0:	f7ff ffdc 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	0adb      	lsrs	r3, r3, #11
 8001aac:	2207      	movs	r2, #7
 8001aae:	4013      	ands	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	000b      	movs	r3, r1
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	0800365c 	.word	0x0800365c

08001ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ad0:	2017      	movs	r0, #23
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001ae2:	e0c2      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae4:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	055b      	lsls	r3, r3, #21
 8001aec:	4013      	ands	r3, r2
 8001aee:	d109      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	4b7e      	ldr	r3, [pc, #504]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af4:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0549      	lsls	r1, r1, #21
 8001afa:	430a      	orrs	r2, r1
 8001afc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d11a      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b10:	4b77      	ldr	r3, [pc, #476]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001b16:	2180      	movs	r1, #128	; 0x80
 8001b18:	0049      	lsls	r1, r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1e:	f7fe ff31 	bl	8000984 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	e008      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b28:	f7fe ff2c 	bl	8000984 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0d4      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b46:	4b69      	ldr	r3, [pc, #420]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	23c0      	movs	r3, #192	; 0xc0
 8001b4c:	039b      	lsls	r3, r3, #14
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	23c0      	movs	r3, #192	; 0xc0
 8001b58:	039b      	lsls	r3, r3, #14
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d013      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	23c0      	movs	r3, #192	; 0xc0
 8001b68:	029b      	lsls	r3, r3, #10
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	23c0      	movs	r3, #192	; 0xc0
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d10a      	bne.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b74:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d101      	bne.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0ac      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b8a:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03b      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d033      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d02e      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001bb6:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bc0:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bc4:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0309      	lsls	r1, r1, #12
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bd4:	4948      	ldr	r1, [pc, #288]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d014      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe fecb 	bl	8000984 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bf2:	e009      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7fe fec6 	bl	8000984 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	4a3f      	ldr	r2, [pc, #252]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e06d      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d0ef      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	23c0      	movs	r3, #192	; 0xc0
 8001c1a:	029b      	lsls	r3, r3, #10
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a35      	ldr	r2, [pc, #212]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	23c0      	movs	r3, #192	; 0xc0
 8001c36:	039b      	lsls	r3, r3, #14
 8001c38:	401a      	ands	r2, r3
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c42:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	23c0      	movs	r3, #192	; 0xc0
 8001c4a:	029b      	lsls	r3, r3, #10
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c54:	2317      	movs	r3, #23
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c64:	4927      	ldr	r1, [pc, #156]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	220c      	movs	r2, #12
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d009      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2208      	movs	r2, #8
 8001cac:	4013      	ands	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b006      	add	sp, #24
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	fffcffff 	.word	0xfffcffff
 8001cf8:	fff7ffff 	.word	0xfff7ffff
 8001cfc:	00001388 	.word	0x00001388
 8001d00:	ffcfffff 	.word	0xffcfffff
 8001d04:	efffffff 	.word	0xefffffff
 8001d08:	fffff3ff 	.word	0xfffff3ff
 8001d0c:	ffffcfff 	.word	0xffffcfff
 8001d10:	fff3ffff 	.word	0xfff3ffff

08001d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e044      	b.n	8001db0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2274      	movs	r2, #116	; 0x74
 8001d32:	2100      	movs	r1, #0
 8001d34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7fe fce1 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2224      	movs	r2, #36	; 0x24
 8001d42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	438a      	bics	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 fc0e 	bl	8002578 <UART_SetConfig>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e024      	b.n	8001db0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fe4b 	bl	8002a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	490d      	ldr	r1, [pc, #52]	; (8001db8 <HAL_UART_Init+0xa4>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	212a      	movs	r1, #42	; 0x2a
 8001d92:	438a      	bics	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 fee3 	bl	8002b74 <UART_CheckIdleState>
 8001dae:	0003      	movs	r3, r0
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	ffffb7ff 	.word	0xffffb7ff

08001dbc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	1dbb      	adds	r3, r7, #6
 8001dc8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d000      	beq.n	8001dd4 <HAL_UART_Transmit_IT+0x18>
 8001dd2:	e06a      	b.n	8001eaa <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_UART_Transmit_IT+0x26>
 8001dda:	1dbb      	adds	r3, r7, #6
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e062      	b.n	8001eac <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	015b      	lsls	r3, r3, #5
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d109      	bne.n	8001e06 <HAL_UART_Transmit_IT+0x4a>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d001      	beq.n	8001e06 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e052      	b.n	8001eac <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2274      	movs	r2, #116	; 0x74
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_UART_Transmit_IT+0x58>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e04b      	b.n	8001eac <HAL_UART_Transmit_IT+0xf0>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2274      	movs	r2, #116	; 0x74
 8001e18:	2101      	movs	r1, #1
 8001e1a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1dba      	adds	r2, r7, #6
 8001e26:	2150      	movs	r1, #80	; 0x50
 8001e28:	8812      	ldrh	r2, [r2, #0]
 8001e2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1dba      	adds	r2, r7, #6
 8001e30:	2152      	movs	r1, #82	; 0x52
 8001e32:	8812      	ldrh	r2, [r2, #0]
 8001e34:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	2100      	movs	r1, #0
 8001e42:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2221      	movs	r2, #33	; 0x21
 8001e48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	015b      	lsls	r3, r3, #5
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d107      	bne.n	8001e66 <HAL_UART_Transmit_IT+0xaa>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_UART_Transmit_IT+0xf8>)
 8001e62:	669a      	str	r2, [r3, #104]	; 0x68
 8001e64:	e002      	b.n	8001e6c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <HAL_UART_Transmit_IT+0xfc>)
 8001e6a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2274      	movs	r2, #116	; 0x74
 8001e70:	2100      	movs	r1, #0
 8001e72:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e74:	f3ef 8310 	mrs	r3, PRIMASK
 8001e78:	613b      	str	r3, [r7, #16]
  return(result);
 8001e7a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f383 8810 	msr	PRIMASK, r3
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f383 8810 	msr	PRIMASK, r3
}
 8001ea4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
  }
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b008      	add	sp, #32
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	08003091 	.word	0x08003091
 8001eb8:	08002fdf 	.word	0x08002fdf

08001ebc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	1dbb      	adds	r3, r7, #6
 8001ec8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d155      	bne.n	8001f7e <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_UART_Receive_IT+0x24>
 8001ed8:	1dbb      	adds	r3, r7, #6
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e04d      	b.n	8001f80 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	015b      	lsls	r3, r3, #5
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d109      	bne.n	8001f04 <HAL_UART_Receive_IT+0x48>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d001      	beq.n	8001f04 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e03d      	b.n	8001f80 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2274      	movs	r2, #116	; 0x74
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Receive_IT+0x56>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e036      	b.n	8001f80 <HAL_UART_Receive_IT+0xc4>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2274      	movs	r2, #116	; 0x74
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <HAL_UART_Receive_IT+0xcc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d020      	beq.n	8001f6c <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	4013      	ands	r3, r2
 8001f36:	d019      	beq.n	8001f6c <HAL_UART_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f38:	f3ef 8310 	mrs	r3, PRIMASK
 8001f3c:	613b      	str	r3, [r7, #16]
  return(result);
 8001f3e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	2301      	movs	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f383 8810 	msr	PRIMASK, r3
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	04c9      	lsls	r1, r1, #19
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	f383 8810 	msr	PRIMASK, r3
}
 8001f6a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f6c:	1dbb      	adds	r3, r7, #6
 8001f6e:	881a      	ldrh	r2, [r3, #0]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 ff09 	bl	8002d8c <UART_Start_Receive_IT>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	e000      	b.n	8001f80 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b008      	add	sp, #32
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40004800 	.word	0x40004800

08001f8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b0ab      	sub	sp, #172	; 0xac
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	22a4      	movs	r2, #164	; 0xa4
 8001f9c:	18b9      	adds	r1, r7, r2
 8001f9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	20a0      	movs	r0, #160	; 0xa0
 8001fa8:	1839      	adds	r1, r7, r0
 8001faa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	219c      	movs	r1, #156	; 0x9c
 8001fb4:	1879      	adds	r1, r7, r1
 8001fb6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001fb8:	0011      	movs	r1, r2
 8001fba:	18bb      	adds	r3, r7, r2
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a99      	ldr	r2, [pc, #612]	; (8002224 <HAL_UART_IRQHandler+0x298>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2298      	movs	r2, #152	; 0x98
 8001fc4:	18bc      	adds	r4, r7, r2
 8001fc6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001fc8:	18bb      	adds	r3, r7, r2
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d114      	bne.n	8001ffa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d00f      	beq.n	8001ffa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fda:	183b      	adds	r3, r7, r0
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d00a      	beq.n	8001ffa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d100      	bne.n	8001fee <HAL_UART_IRQHandler+0x62>
 8001fec:	e298      	b.n	8002520 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	4798      	blx	r3
      }
      return;
 8001ff8:	e292      	b.n	8002520 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ffa:	2398      	movs	r3, #152	; 0x98
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d100      	bne.n	8002006 <HAL_UART_IRQHandler+0x7a>
 8002004:	e114      	b.n	8002230 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002006:	239c      	movs	r3, #156	; 0x9c
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d106      	bne.n	8002020 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002012:	23a0      	movs	r3, #160	; 0xa0
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a83      	ldr	r2, [pc, #524]	; (8002228 <HAL_UART_IRQHandler+0x29c>)
 800201a:	4013      	ands	r3, r2
 800201c:	d100      	bne.n	8002020 <HAL_UART_IRQHandler+0x94>
 800201e:	e107      	b.n	8002230 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002020:	23a4      	movs	r3, #164	; 0xa4
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d012      	beq.n	8002052 <HAL_UART_IRQHandler+0xc6>
 800202c:	23a0      	movs	r3, #160	; 0xa0
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4013      	ands	r3, r2
 8002038:	d00b      	beq.n	8002052 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	589b      	ldr	r3, [r3, r2]
 8002048:	2201      	movs	r2, #1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002052:	23a4      	movs	r3, #164	; 0xa4
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d011      	beq.n	8002082 <HAL_UART_IRQHandler+0xf6>
 800205e:	239c      	movs	r3, #156	; 0x9c
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	4013      	ands	r3, r2
 8002068:	d00b      	beq.n	8002082 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	589b      	ldr	r3, [r3, r2]
 8002078:	2204      	movs	r2, #4
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002082:	23a4      	movs	r3, #164	; 0xa4
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2204      	movs	r2, #4
 800208a:	4013      	ands	r3, r2
 800208c:	d011      	beq.n	80020b2 <HAL_UART_IRQHandler+0x126>
 800208e:	239c      	movs	r3, #156	; 0x9c
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d00b      	beq.n	80020b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2204      	movs	r2, #4
 80020a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	589b      	ldr	r3, [r3, r2]
 80020a8:	2202      	movs	r2, #2
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020b2:	23a4      	movs	r3, #164	; 0xa4
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	d017      	beq.n	80020ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020be:	23a0      	movs	r3, #160	; 0xa0
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2220      	movs	r2, #32
 80020c6:	4013      	ands	r3, r2
 80020c8:	d105      	bne.n	80020d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80020ca:	239c      	movs	r3, #156	; 0x9c
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020d4:	d00b      	beq.n	80020ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2208      	movs	r2, #8
 80020dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	589b      	ldr	r3, [r3, r2]
 80020e4:	2208      	movs	r2, #8
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80020ee:	23a4      	movs	r3, #164	; 0xa4
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4013      	ands	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_UART_IRQHandler+0x198>
 80020fc:	23a0      	movs	r3, #160	; 0xa0
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	04db      	lsls	r3, r3, #19
 8002106:	4013      	ands	r3, r2
 8002108:	d00c      	beq.n	8002124 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	589b      	ldr	r3, [r3, r2]
 800211a:	2220      	movs	r2, #32
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	589b      	ldr	r3, [r3, r2]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d100      	bne.n	8002130 <HAL_UART_IRQHandler+0x1a4>
 800212e:	e1f9      	b.n	8002524 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002130:	23a4      	movs	r3, #164	; 0xa4
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2220      	movs	r2, #32
 8002138:	4013      	ands	r3, r2
 800213a:	d00e      	beq.n	800215a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800213c:	23a0      	movs	r3, #160	; 0xa0
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2220      	movs	r2, #32
 8002144:	4013      	ands	r3, r2
 8002146:	d008      	beq.n	800215a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	0010      	movs	r0, r2
 8002158:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	589b      	ldr	r3, [r3, r2]
 8002160:	2194      	movs	r1, #148	; 0x94
 8002162:	187a      	adds	r2, r7, r1
 8002164:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	4013      	ands	r3, r2
 8002170:	2b40      	cmp	r3, #64	; 0x40
 8002172:	d004      	beq.n	800217e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002174:	187b      	adds	r3, r7, r1
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2228      	movs	r2, #40	; 0x28
 800217a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800217c:	d047      	beq.n	800220e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f000 feb3 	bl	8002eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	4013      	ands	r3, r2
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d137      	bne.n	8002204 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002194:	f3ef 8310 	mrs	r3, PRIMASK
 8002198:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800219a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800219c:	2090      	movs	r0, #144	; 0x90
 800219e:	183a      	adds	r2, r7, r0
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021a8:	f383 8810 	msr	PRIMASK, r3
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2140      	movs	r1, #64	; 0x40
 80021ba:	438a      	bics	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	183b      	adds	r3, r7, r0
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c6:	f383 8810 	msr	PRIMASK, r3
}
 80021ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d012      	beq.n	80021fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <HAL_UART_IRQHandler+0x2a0>)
 80021da:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7fe fd1b 	bl	8000c1c <HAL_DMA_Abort_IT>
 80021e6:	1e03      	subs	r3, r0, #0
 80021e8:	d01a      	beq.n	8002220 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	0018      	movs	r0, r3
 80021f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	e012      	b.n	8002220 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f9a7 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002202:	e00d      	b.n	8002220 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f9a2 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	e008      	b.n	8002220 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f99d 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	2100      	movs	r1, #0
 800221c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800221e:	e181      	b.n	8002524 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002220:	46c0      	nop			; (mov r8, r8)
    return;
 8002222:	e17f      	b.n	8002524 <HAL_UART_IRQHandler+0x598>
 8002224:	0000080f 	.word	0x0000080f
 8002228:	04000120 	.word	0x04000120
 800222c:	08002fb1 	.word	0x08002fb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002234:	2b01      	cmp	r3, #1
 8002236:	d000      	beq.n	800223a <HAL_UART_IRQHandler+0x2ae>
 8002238:	e133      	b.n	80024a2 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800223a:	23a4      	movs	r3, #164	; 0xa4
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2210      	movs	r2, #16
 8002242:	4013      	ands	r3, r2
 8002244:	d100      	bne.n	8002248 <HAL_UART_IRQHandler+0x2bc>
 8002246:	e12c      	b.n	80024a2 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002248:	23a0      	movs	r3, #160	; 0xa0
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2210      	movs	r2, #16
 8002250:	4013      	ands	r3, r2
 8002252:	d100      	bne.n	8002256 <HAL_UART_IRQHandler+0x2ca>
 8002254:	e125      	b.n	80024a2 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2210      	movs	r2, #16
 800225c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	4013      	ands	r3, r2
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d000      	beq.n	800226e <HAL_UART_IRQHandler+0x2e2>
 800226c:	e09d      	b.n	80023aa <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	217e      	movs	r1, #126	; 0x7e
 8002278:	187b      	adds	r3, r7, r1
 800227a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800227c:	187b      	adds	r3, r7, r1
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d100      	bne.n	8002286 <HAL_UART_IRQHandler+0x2fa>
 8002284:	e150      	b.n	8002528 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2258      	movs	r2, #88	; 0x58
 800228a:	5a9b      	ldrh	r3, [r3, r2]
 800228c:	187a      	adds	r2, r7, r1
 800228e:	8812      	ldrh	r2, [r2, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d300      	bcc.n	8002296 <HAL_UART_IRQHandler+0x30a>
 8002294:	e148      	b.n	8002528 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	187a      	adds	r2, r7, r1
 800229a:	215a      	movs	r1, #90	; 0x5a
 800229c:	8812      	ldrh	r2, [r2, #0]
 800229e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2220      	movs	r2, #32
 80022aa:	4013      	ands	r3, r2
 80022ac:	d16e      	bne.n	800238c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ae:	f3ef 8310 	mrs	r3, PRIMASK
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80022b8:	2301      	movs	r3, #1
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	f383 8810 	msr	PRIMASK, r3
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	499a      	ldr	r1, [pc, #616]	; (8002538 <HAL_UART_IRQHandler+0x5ac>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e0:	f3ef 8310 	mrs	r3, PRIMASK
 80022e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e8:	677b      	str	r3, [r7, #116]	; 0x74
 80022ea:	2301      	movs	r3, #1
 80022ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f0:	f383 8810 	msr	PRIMASK, r3
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	438a      	bics	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230c:	f383 8810 	msr	PRIMASK, r3
}
 8002310:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002312:	f3ef 8310 	mrs	r3, PRIMASK
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002318:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800231a:	673b      	str	r3, [r7, #112]	; 0x70
 800231c:	2301      	movs	r3, #1
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002322:	f383 8810 	msr	PRIMASK, r3
}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2140      	movs	r1, #64	; 0x40
 8002334:	438a      	bics	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800233a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233e:	f383 8810 	msr	PRIMASK, r3
}
 8002342:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002350:	f3ef 8310 	mrs	r3, PRIMASK
 8002354:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002356:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800235a:	2301      	movs	r3, #1
 800235c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002360:	f383 8810 	msr	PRIMASK, r3
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2110      	movs	r1, #16
 8002372:	438a      	bics	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002378:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237c:	f383 8810 	msr	PRIMASK, r3
}
 8002380:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	0018      	movs	r0, r3
 8002388:	f7fe fc08 	bl	8000b9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2258      	movs	r2, #88	; 0x58
 8002390:	5a9a      	ldrh	r2, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	215a      	movs	r1, #90	; 0x5a
 8002396:	5a5b      	ldrh	r3, [r3, r1]
 8002398:	b29b      	uxth	r3, r3
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0011      	movs	r1, r2
 80023a2:	0018      	movs	r0, r3
 80023a4:	f000 f8dc 	bl	8002560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023a8:	e0be      	b.n	8002528 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2258      	movs	r2, #88	; 0x58
 80023ae:	5a99      	ldrh	r1, [r3, r2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	225a      	movs	r2, #90	; 0x5a
 80023b4:	5a9b      	ldrh	r3, [r3, r2]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	208e      	movs	r0, #142	; 0x8e
 80023ba:	183b      	adds	r3, r7, r0
 80023bc:	1a8a      	subs	r2, r1, r2
 80023be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	225a      	movs	r2, #90	; 0x5a
 80023c4:	5a9b      	ldrh	r3, [r3, r2]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d100      	bne.n	80023ce <HAL_UART_IRQHandler+0x442>
 80023cc:	e0ae      	b.n	800252c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80023ce:	183b      	adds	r3, r7, r0
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <HAL_UART_IRQHandler+0x44c>
 80023d6:	e0a9      	b.n	800252c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d8:	f3ef 8310 	mrs	r3, PRIMASK
 80023dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80023de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e0:	2488      	movs	r4, #136	; 0x88
 80023e2:	193a      	adds	r2, r7, r4
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f383 8810 	msr	PRIMASK, r3
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	494f      	ldr	r1, [pc, #316]	; (800253c <HAL_UART_IRQHandler+0x5b0>)
 80023fe:	400a      	ands	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	193b      	adds	r3, r7, r4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f383 8810 	msr	PRIMASK, r3
}
 800240e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002410:	f3ef 8310 	mrs	r3, PRIMASK
 8002414:	61bb      	str	r3, [r7, #24]
  return(result);
 8002416:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002418:	2484      	movs	r4, #132	; 0x84
 800241a:	193a      	adds	r2, r7, r4
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f383 8810 	msr	PRIMASK, r3
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	438a      	bics	r2, r1
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	193b      	adds	r3, r7, r4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f383 8810 	msr	PRIMASK, r3
}
 8002446:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245a:	f3ef 8310 	mrs	r3, PRIMASK
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002462:	2480      	movs	r4, #128	; 0x80
 8002464:	193a      	adds	r2, r7, r4
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f383 8810 	msr	PRIMASK, r3
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2110      	movs	r1, #16
 8002480:	438a      	bics	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	193b      	adds	r3, r7, r4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	f383 8810 	msr	PRIMASK, r3
}
 8002490:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002492:	183b      	adds	r3, r7, r0
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0011      	movs	r1, r2
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f860 	bl	8002560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80024a0:	e044      	b.n	800252c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80024a2:	23a4      	movs	r3, #164	; 0xa4
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	035b      	lsls	r3, r3, #13
 80024ac:	4013      	ands	r3, r2
 80024ae:	d010      	beq.n	80024d2 <HAL_UART_IRQHandler+0x546>
 80024b0:	239c      	movs	r3, #156	; 0x9c
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	03db      	lsls	r3, r3, #15
 80024ba:	4013      	ands	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0352      	lsls	r2, r2, #13
 80024c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 ffd2 	bl	8003474 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024d0:	e02f      	b.n	8002532 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80024d2:	23a4      	movs	r3, #164	; 0xa4
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	4013      	ands	r3, r2
 80024dc:	d00f      	beq.n	80024fe <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024de:	23a0      	movs	r3, #160	; 0xa0
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	4013      	ands	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01e      	beq.n	8002530 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	0010      	movs	r0, r2
 80024fa:	4798      	blx	r3
    }
    return;
 80024fc:	e018      	b.n	8002530 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024fe:	23a4      	movs	r3, #164	; 0xa4
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2240      	movs	r2, #64	; 0x40
 8002506:	4013      	ands	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_UART_IRQHandler+0x5a6>
 800250a:	23a0      	movs	r3, #160	; 0xa0
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	4013      	ands	r3, r2
 8002514:	d00d      	beq.n	8002532 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fe17 	bl	800314c <UART_EndTransmit_IT>
    return;
 800251e:	e008      	b.n	8002532 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	e006      	b.n	8002532 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	e004      	b.n	8002532 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	e002      	b.n	8002532 <HAL_UART_IRQHandler+0x5a6>
      return;
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	e000      	b.n	8002532 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002530:	46c0      	nop			; (mov r8, r8)
  }

}
 8002532:	46bd      	mov	sp, r7
 8002534:	b02b      	add	sp, #172	; 0xac
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	fffffeff 	.word	0xfffffeff
 800253c:	fffffedf 	.word	0xfffffedf

08002540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	000a      	movs	r2, r1
 800256a:	1cbb      	adds	r3, r7, #2
 800256c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b08e      	sub	sp, #56	; 0x38
 800257c:	af00      	add	r7, sp, #0
 800257e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002580:	231a      	movs	r3, #26
 8002582:	2218      	movs	r2, #24
 8002584:	189b      	adds	r3, r3, r2
 8002586:	19db      	adds	r3, r3, r7
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	431a      	orrs	r2, r3
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4ab4      	ldr	r2, [pc, #720]	; (800287c <UART_SetConfig+0x304>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4aaf      	ldr	r2, [pc, #700]	; (8002880 <UART_SetConfig+0x308>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4aa9      	ldr	r2, [pc, #676]	; (8002884 <UART_SetConfig+0x30c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d004      	beq.n	80025ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e8:	4313      	orrs	r3, r2
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4aa5      	ldr	r2, [pc, #660]	; (8002888 <UART_SetConfig+0x310>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4aa1      	ldr	r2, [pc, #644]	; (800288c <UART_SetConfig+0x314>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d131      	bne.n	8002670 <UART_SetConfig+0xf8>
 800260c:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <UART_SetConfig+0x318>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	220c      	movs	r2, #12
 8002612:	4013      	ands	r3, r2
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d01d      	beq.n	8002654 <UART_SetConfig+0xdc>
 8002618:	d823      	bhi.n	8002662 <UART_SetConfig+0xea>
 800261a:	2b08      	cmp	r3, #8
 800261c:	d00c      	beq.n	8002638 <UART_SetConfig+0xc0>
 800261e:	d820      	bhi.n	8002662 <UART_SetConfig+0xea>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <UART_SetConfig+0xb2>
 8002624:	2b04      	cmp	r3, #4
 8002626:	d00e      	beq.n	8002646 <UART_SetConfig+0xce>
 8002628:	e01b      	b.n	8002662 <UART_SetConfig+0xea>
 800262a:	231b      	movs	r3, #27
 800262c:	2218      	movs	r2, #24
 800262e:	189b      	adds	r3, r3, r2
 8002630:	19db      	adds	r3, r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e065      	b.n	8002704 <UART_SetConfig+0x18c>
 8002638:	231b      	movs	r3, #27
 800263a:	2218      	movs	r2, #24
 800263c:	189b      	adds	r3, r3, r2
 800263e:	19db      	adds	r3, r3, r7
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e05e      	b.n	8002704 <UART_SetConfig+0x18c>
 8002646:	231b      	movs	r3, #27
 8002648:	2218      	movs	r2, #24
 800264a:	189b      	adds	r3, r3, r2
 800264c:	19db      	adds	r3, r3, r7
 800264e:	2204      	movs	r2, #4
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e057      	b.n	8002704 <UART_SetConfig+0x18c>
 8002654:	231b      	movs	r3, #27
 8002656:	2218      	movs	r2, #24
 8002658:	189b      	adds	r3, r3, r2
 800265a:	19db      	adds	r3, r3, r7
 800265c:	2208      	movs	r2, #8
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e050      	b.n	8002704 <UART_SetConfig+0x18c>
 8002662:	231b      	movs	r3, #27
 8002664:	2218      	movs	r2, #24
 8002666:	189b      	adds	r3, r3, r2
 8002668:	19db      	adds	r3, r3, r7
 800266a:	2210      	movs	r2, #16
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e049      	b.n	8002704 <UART_SetConfig+0x18c>
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a83      	ldr	r2, [pc, #524]	; (8002884 <UART_SetConfig+0x30c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d13e      	bne.n	80026f8 <UART_SetConfig+0x180>
 800267a:	4b85      	ldr	r3, [pc, #532]	; (8002890 <UART_SetConfig+0x318>)
 800267c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800267e:	23c0      	movs	r3, #192	; 0xc0
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4013      	ands	r3, r2
 8002684:	22c0      	movs	r2, #192	; 0xc0
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	4293      	cmp	r3, r2
 800268a:	d027      	beq.n	80026dc <UART_SetConfig+0x164>
 800268c:	22c0      	movs	r2, #192	; 0xc0
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	4293      	cmp	r3, r2
 8002692:	d82a      	bhi.n	80026ea <UART_SetConfig+0x172>
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	4293      	cmp	r3, r2
 800269a:	d011      	beq.n	80026c0 <UART_SetConfig+0x148>
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d822      	bhi.n	80026ea <UART_SetConfig+0x172>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <UART_SetConfig+0x13a>
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	00d2      	lsls	r2, r2, #3
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00e      	beq.n	80026ce <UART_SetConfig+0x156>
 80026b0:	e01b      	b.n	80026ea <UART_SetConfig+0x172>
 80026b2:	231b      	movs	r3, #27
 80026b4:	2218      	movs	r2, #24
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	19db      	adds	r3, r3, r7
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e021      	b.n	8002704 <UART_SetConfig+0x18c>
 80026c0:	231b      	movs	r3, #27
 80026c2:	2218      	movs	r2, #24
 80026c4:	189b      	adds	r3, r3, r2
 80026c6:	19db      	adds	r3, r3, r7
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e01a      	b.n	8002704 <UART_SetConfig+0x18c>
 80026ce:	231b      	movs	r3, #27
 80026d0:	2218      	movs	r2, #24
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	19db      	adds	r3, r3, r7
 80026d6:	2204      	movs	r2, #4
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e013      	b.n	8002704 <UART_SetConfig+0x18c>
 80026dc:	231b      	movs	r3, #27
 80026de:	2218      	movs	r2, #24
 80026e0:	189b      	adds	r3, r3, r2
 80026e2:	19db      	adds	r3, r3, r7
 80026e4:	2208      	movs	r2, #8
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e00c      	b.n	8002704 <UART_SetConfig+0x18c>
 80026ea:	231b      	movs	r3, #27
 80026ec:	2218      	movs	r2, #24
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	19db      	adds	r3, r3, r7
 80026f2:	2210      	movs	r2, #16
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e005      	b.n	8002704 <UART_SetConfig+0x18c>
 80026f8:	231b      	movs	r3, #27
 80026fa:	2218      	movs	r2, #24
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	19db      	adds	r3, r3, r7
 8002700:	2210      	movs	r2, #16
 8002702:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5e      	ldr	r2, [pc, #376]	; (8002884 <UART_SetConfig+0x30c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d000      	beq.n	8002710 <UART_SetConfig+0x198>
 800270e:	e084      	b.n	800281a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002710:	231b      	movs	r3, #27
 8002712:	2218      	movs	r2, #24
 8002714:	189b      	adds	r3, r3, r2
 8002716:	19db      	adds	r3, r3, r7
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b08      	cmp	r3, #8
 800271c:	d01d      	beq.n	800275a <UART_SetConfig+0x1e2>
 800271e:	dc20      	bgt.n	8002762 <UART_SetConfig+0x1ea>
 8002720:	2b04      	cmp	r3, #4
 8002722:	d015      	beq.n	8002750 <UART_SetConfig+0x1d8>
 8002724:	dc1d      	bgt.n	8002762 <UART_SetConfig+0x1ea>
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <UART_SetConfig+0x1b8>
 800272a:	2b02      	cmp	r3, #2
 800272c:	d005      	beq.n	800273a <UART_SetConfig+0x1c2>
 800272e:	e018      	b.n	8002762 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002730:	f7ff f99e 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002734:	0003      	movs	r3, r0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002738:	e01c      	b.n	8002774 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800273a:	4b55      	ldr	r3, [pc, #340]	; (8002890 <UART_SetConfig+0x318>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	4013      	ands	r3, r2
 8002742:	d002      	beq.n	800274a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <UART_SetConfig+0x31c>)
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002748:	e014      	b.n	8002774 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <UART_SetConfig+0x320>)
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800274e:	e011      	b.n	8002774 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002750:	f7ff f8de 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 8002754:	0003      	movs	r3, r0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002758:	e00c      	b.n	8002774 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002760:	e008      	b.n	8002774 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002766:	231a      	movs	r3, #26
 8002768:	2218      	movs	r2, #24
 800276a:	189b      	adds	r3, r3, r2
 800276c:	19db      	adds	r3, r3, r7
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
        break;
 8002772:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d100      	bne.n	800277c <UART_SetConfig+0x204>
 800277a:	e130      	b.n	80029de <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	0013      	movs	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	189b      	adds	r3, r3, r2
 8002786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d305      	bcc.n	8002798 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002794:	429a      	cmp	r2, r3
 8002796:	d906      	bls.n	80027a6 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002798:	231a      	movs	r3, #26
 800279a:	2218      	movs	r2, #24
 800279c:	189b      	adds	r3, r3, r2
 800279e:	19db      	adds	r3, r3, r7
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e11b      	b.n	80029de <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	6939      	ldr	r1, [r7, #16]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	000b      	movs	r3, r1
 80027b4:	0e1b      	lsrs	r3, r3, #24
 80027b6:	0010      	movs	r0, r2
 80027b8:	0205      	lsls	r5, r0, #8
 80027ba:	431d      	orrs	r5, r3
 80027bc:	000b      	movs	r3, r1
 80027be:	021c      	lsls	r4, r3, #8
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	1900      	adds	r0, r0, r4
 80027d2:	4169      	adcs	r1, r5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f7fd fd1d 	bl	8000220 <__aeabi_uldivmod>
 80027e6:	0002      	movs	r2, r0
 80027e8:	000b      	movs	r3, r1
 80027ea:	0013      	movs	r3, r2
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f0:	23c0      	movs	r3, #192	; 0xc0
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d309      	bcc.n	800280c <UART_SetConfig+0x294>
 80027f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	035b      	lsls	r3, r3, #13
 80027fe:	429a      	cmp	r2, r3
 8002800:	d204      	bcs.n	800280c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	e0e8      	b.n	80029de <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 800280c:	231a      	movs	r3, #26
 800280e:	2218      	movs	r2, #24
 8002810:	189b      	adds	r3, r3, r2
 8002812:	19db      	adds	r3, r3, r7
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e0e1      	b.n	80029de <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	429a      	cmp	r2, r3
 8002824:	d000      	beq.n	8002828 <UART_SetConfig+0x2b0>
 8002826:	e083      	b.n	8002930 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002828:	231b      	movs	r3, #27
 800282a:	2218      	movs	r2, #24
 800282c:	189b      	adds	r3, r3, r2
 800282e:	19db      	adds	r3, r3, r7
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b08      	cmp	r3, #8
 8002834:	d834      	bhi.n	80028a0 <UART_SetConfig+0x328>
 8002836:	009a      	lsls	r2, r3, #2
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <UART_SetConfig+0x324>)
 800283a:	18d3      	adds	r3, r2, r3
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002840:	f7ff f916 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002844:	0003      	movs	r3, r0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002848:	e033      	b.n	80028b2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800284a:	f7ff f927 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 800284e:	0003      	movs	r3, r0
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002852:	e02e      	b.n	80028b2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <UART_SetConfig+0x318>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	4013      	ands	r3, r2
 800285c:	d002      	beq.n	8002864 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <UART_SetConfig+0x31c>)
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002862:	e026      	b.n	80028b2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <UART_SetConfig+0x320>)
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002868:	e023      	b.n	80028b2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800286a:	f7ff f851 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 800286e:	0003      	movs	r3, r0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002872:	e01e      	b.n	80028b2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800287a:	e01a      	b.n	80028b2 <UART_SetConfig+0x33a>
 800287c:	efff69f3 	.word	0xefff69f3
 8002880:	ffffcfff 	.word	0xffffcfff
 8002884:	40004800 	.word	0x40004800
 8002888:	fffff4ff 	.word	0xfffff4ff
 800288c:	40004400 	.word	0x40004400
 8002890:	40021000 	.word	0x40021000
 8002894:	003d0900 	.word	0x003d0900
 8002898:	00f42400 	.word	0x00f42400
 800289c:	08003670 	.word	0x08003670
      default:
        pclk = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028a4:	231a      	movs	r3, #26
 80028a6:	2218      	movs	r2, #24
 80028a8:	189b      	adds	r3, r3, r2
 80028aa:	19db      	adds	r3, r3, r7
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
        break;
 80028b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d100      	bne.n	80028ba <UART_SetConfig+0x342>
 80028b8:	e091      	b.n	80029de <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	005a      	lsls	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	18d2      	adds	r2, r2, r3
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0019      	movs	r1, r3
 80028cc:	0010      	movs	r0, r2
 80028ce:	f7fd fc1b 	bl	8000108 <__udivsi3>
 80028d2:	0003      	movs	r3, r0
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	d921      	bls.n	8002922 <UART_SetConfig+0x3aa>
 80028de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	025b      	lsls	r3, r3, #9
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d21c      	bcs.n	8002922 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	200e      	movs	r0, #14
 80028ee:	2418      	movs	r4, #24
 80028f0:	1903      	adds	r3, r0, r4
 80028f2:	19db      	adds	r3, r3, r7
 80028f4:	210f      	movs	r1, #15
 80028f6:	438a      	bics	r2, r1
 80028f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2207      	movs	r2, #7
 8002902:	4013      	ands	r3, r2
 8002904:	b299      	uxth	r1, r3
 8002906:	1903      	adds	r3, r0, r4
 8002908:	19db      	adds	r3, r3, r7
 800290a:	1902      	adds	r2, r0, r4
 800290c:	19d2      	adds	r2, r2, r7
 800290e:	8812      	ldrh	r2, [r2, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	1902      	adds	r2, r0, r4
 800291a:	19d2      	adds	r2, r2, r7
 800291c:	8812      	ldrh	r2, [r2, #0]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	e05d      	b.n	80029de <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002922:	231a      	movs	r3, #26
 8002924:	2218      	movs	r2, #24
 8002926:	189b      	adds	r3, r3, r2
 8002928:	19db      	adds	r3, r3, r7
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e056      	b.n	80029de <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002930:	231b      	movs	r3, #27
 8002932:	2218      	movs	r2, #24
 8002934:	189b      	adds	r3, r3, r2
 8002936:	19db      	adds	r3, r3, r7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d822      	bhi.n	8002984 <UART_SetConfig+0x40c>
 800293e:	009a      	lsls	r2, r3, #2
 8002940:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <UART_SetConfig+0x484>)
 8002942:	18d3      	adds	r3, r2, r3
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002948:	f7ff f892 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 800294c:	0003      	movs	r3, r0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002950:	e021      	b.n	8002996 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002952:	f7ff f8a3 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 8002956:	0003      	movs	r3, r0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800295a:	e01c      	b.n	8002996 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <UART_SetConfig+0x488>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2210      	movs	r2, #16
 8002962:	4013      	ands	r3, r2
 8002964:	d002      	beq.n	800296c <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <UART_SetConfig+0x48c>)
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800296a:	e014      	b.n	8002996 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <UART_SetConfig+0x490>)
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002970:	e011      	b.n	8002996 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002972:	f7fe ffcd 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 8002976:	0003      	movs	r3, r0
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800297a:	e00c      	b.n	8002996 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002982:	e008      	b.n	8002996 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002988:	231a      	movs	r3, #26
 800298a:	2218      	movs	r2, #24
 800298c:	189b      	adds	r3, r3, r2
 800298e:	19db      	adds	r3, r3, r7
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
        break;
 8002994:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	085a      	lsrs	r2, r3, #1
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	18d2      	adds	r2, r2, r3
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f7fd fbab 	bl	8000108 <__udivsi3>
 80029b2:	0003      	movs	r3, r0
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	2b0f      	cmp	r3, #15
 80029bc:	d909      	bls.n	80029d2 <UART_SetConfig+0x45a>
 80029be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d204      	bcs.n	80029d2 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	e005      	b.n	80029de <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 80029d2:	231a      	movs	r3, #26
 80029d4:	2218      	movs	r2, #24
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	19db      	adds	r3, r3, r7
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2200      	movs	r2, #0
 80029e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2200      	movs	r2, #0
 80029e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80029ea:	231a      	movs	r3, #26
 80029ec:	2218      	movs	r2, #24
 80029ee:	189b      	adds	r3, r3, r2
 80029f0:	19db      	adds	r3, r3, r7
 80029f2:	781b      	ldrb	r3, [r3, #0]
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b00e      	add	sp, #56	; 0x38
 80029fa:	bdb0      	pop	{r4, r5, r7, pc}
 80029fc:	08003694 	.word	0x08003694
 8002a00:	40021000 	.word	0x40021000
 8002a04:	003d0900 	.word	0x003d0900
 8002a08:	00f42400 	.word	0x00f42400

08002a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a4a      	ldr	r2, [pc, #296]	; (8002b50 <UART_AdvFeatureConfig+0x144>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d00b      	beq.n	8002a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <UART_AdvFeatureConfig+0x148>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a3b      	ldr	r2, [pc, #236]	; (8002b58 <UART_AdvFeatureConfig+0x14c>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4013      	ands	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <UART_AdvFeatureConfig+0x150>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d00b      	beq.n	8002abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <UART_AdvFeatureConfig+0x154>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <UART_AdvFeatureConfig+0x158>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d01d      	beq.n	8002b26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <UART_AdvFeatureConfig+0x15c>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	035b      	lsls	r3, r3, #13
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d10b      	bne.n	8002b26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <UART_AdvFeatureConfig+0x160>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <UART_AdvFeatureConfig+0x164>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	fffdffff 	.word	0xfffdffff
 8002b54:	fffeffff 	.word	0xfffeffff
 8002b58:	fffbffff 	.word	0xfffbffff
 8002b5c:	ffff7fff 	.word	0xffff7fff
 8002b60:	ffffefff 	.word	0xffffefff
 8002b64:	ffffdfff 	.word	0xffffdfff
 8002b68:	ffefffff 	.word	0xffefffff
 8002b6c:	ff9fffff 	.word	0xff9fffff
 8002b70:	fff7ffff 	.word	0xfff7ffff

08002b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	2100      	movs	r1, #0
 8002b82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b84:	f7fd fefe 	bl	8000984 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2208      	movs	r2, #8
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d10c      	bne.n	8002bb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	0391      	lsls	r1, r2, #14
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <UART_CheckIdleState+0x8c>)
 8002ba4:	9200      	str	r2, [sp, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f000 f82c 	bl	8002c04 <UART_WaitOnFlagUntilTimeout>
 8002bac:	1e03      	subs	r3, r0, #0
 8002bae:	d001      	beq.n	8002bb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e021      	b.n	8002bf8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d10c      	bne.n	8002bdc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	03d1      	lsls	r1, r2, #15
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <UART_CheckIdleState+0x8c>)
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f000 f818 	bl	8002c04 <UART_WaitOnFlagUntilTimeout>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e00d      	b.n	8002bf8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2274      	movs	r2, #116	; 0x74
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b004      	add	sp, #16
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	01ffffff 	.word	0x01ffffff

08002c04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b094      	sub	sp, #80	; 0x50
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c14:	e0a3      	b.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d100      	bne.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002c1c:	e09f      	b.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7fd feb1 	bl	8000984 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13d      	bne.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c34:	f3ef 8310 	mrs	r3, PRIMASK
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3e:	2301      	movs	r3, #1
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	f383 8810 	msr	PRIMASK, r3
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	494c      	ldr	r1, [pc, #304]	; (8002d88 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c66:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c70:	2301      	movs	r3, #1
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	f383 8810 	msr	PRIMASK, r3
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2101      	movs	r1, #1
 8002c88:	438a      	bics	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2274      	movs	r2, #116	; 0x74
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e067      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d050      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d146      	bne.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cda:	f3ef 8310 	mrs	r3, PRIMASK
 8002cde:	613b      	str	r3, [r7, #16]
  return(result);
 8002ce0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f383 8810 	msr	PRIMASK, r3
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4923      	ldr	r1, [pc, #140]	; (8002d88 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f383 8810 	msr	PRIMASK, r3
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d10:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d12:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d16:	2301      	movs	r3, #1
 8002d18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	438a      	bics	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	f383 8810 	msr	PRIMASK, r3
}
 8002d3c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	2120      	movs	r1, #32
 8002d50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2274      	movs	r2, #116	; 0x74
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e010      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	425a      	negs	r2, r3
 8002d6e:	4153      	adcs	r3, r2
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	001a      	movs	r2, r3
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d100      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002d7c:	e74b      	b.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b014      	add	sp, #80	; 0x50
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	fffffe5f 	.word	0xfffffe5f

08002d8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	1dbb      	adds	r3, r7, #6
 8002d98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1dba      	adds	r2, r7, #6
 8002da4:	2158      	movs	r1, #88	; 0x58
 8002da6:	8812      	ldrh	r2, [r2, #0]
 8002da8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1dba      	adds	r2, r7, #6
 8002dae:	215a      	movs	r1, #90	; 0x5a
 8002db0:	8812      	ldrh	r2, [r2, #0]
 8002db2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	015b      	lsls	r3, r3, #5
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d10d      	bne.n	8002de2 <UART_Start_Receive_IT+0x56>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <UART_Start_Receive_IT+0x4c>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	225c      	movs	r2, #92	; 0x5c
 8002dd2:	4943      	ldr	r1, [pc, #268]	; (8002ee0 <UART_Start_Receive_IT+0x154>)
 8002dd4:	5299      	strh	r1, [r3, r2]
 8002dd6:	e02e      	b.n	8002e36 <UART_Start_Receive_IT+0xaa>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	225c      	movs	r2, #92	; 0x5c
 8002ddc:	21ff      	movs	r1, #255	; 0xff
 8002dde:	5299      	strh	r1, [r3, r2]
 8002de0:	e029      	b.n	8002e36 <UART_Start_Receive_IT+0xaa>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <UART_Start_Receive_IT+0x7a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <UART_Start_Receive_IT+0x70>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	225c      	movs	r2, #92	; 0x5c
 8002df6:	21ff      	movs	r1, #255	; 0xff
 8002df8:	5299      	strh	r1, [r3, r2]
 8002dfa:	e01c      	b.n	8002e36 <UART_Start_Receive_IT+0xaa>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	225c      	movs	r2, #92	; 0x5c
 8002e00:	217f      	movs	r1, #127	; 0x7f
 8002e02:	5299      	strh	r1, [r3, r2]
 8002e04:	e017      	b.n	8002e36 <UART_Start_Receive_IT+0xaa>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	055b      	lsls	r3, r3, #21
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10d      	bne.n	8002e2e <UART_Start_Receive_IT+0xa2>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <UART_Start_Receive_IT+0x98>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	225c      	movs	r2, #92	; 0x5c
 8002e1e:	217f      	movs	r1, #127	; 0x7f
 8002e20:	5299      	strh	r1, [r3, r2]
 8002e22:	e008      	b.n	8002e36 <UART_Start_Receive_IT+0xaa>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	225c      	movs	r2, #92	; 0x5c
 8002e28:	213f      	movs	r1, #63	; 0x3f
 8002e2a:	5299      	strh	r1, [r3, r2]
 8002e2c:	e003      	b.n	8002e36 <UART_Start_Receive_IT+0xaa>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	225c      	movs	r2, #92	; 0x5c
 8002e32:	2100      	movs	r1, #0
 8002e34:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2222      	movs	r2, #34	; 0x22
 8002e42:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e44:	f3ef 8310 	mrs	r3, PRIMASK
 8002e48:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e4a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	2301      	movs	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f383 8810 	msr	PRIMASK, r3
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f383 8810 	msr	PRIMASK, r3
}
 8002e74:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	015b      	lsls	r3, r3, #5
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d107      	bne.n	8002e92 <UART_Start_Receive_IT+0x106>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <UART_Start_Receive_IT+0x158>)
 8002e8e:	665a      	str	r2, [r3, #100]	; 0x64
 8002e90:	e002      	b.n	8002e98 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <UART_Start_Receive_IT+0x15c>)
 8002e96:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2274      	movs	r2, #116	; 0x74
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea4:	613b      	str	r3, [r7, #16]
  return(result);
 8002ea6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2190      	movs	r1, #144	; 0x90
 8002ec2:	0049      	lsls	r1, r1, #1
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b00c      	add	sp, #48	; 0x30
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	000001ff 	.word	0x000001ff
 8002ee4:	0800330d 	.word	0x0800330d
 8002ee8:	080031a5 	.word	0x080031a5

08002eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8002efa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4925      	ldr	r1, [pc, #148]	; (8002fac <UART_EndRxTransfer+0xc0>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f26:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f30:	2301      	movs	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d118      	bne.n	8002f92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f60:	f3ef 8310 	mrs	r3, PRIMASK
 8002f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2110      	movs	r1, #16
 8002f82:	438a      	bics	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f383 8810 	msr	PRIMASK, r3
}
 8002f90:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b00e      	add	sp, #56	; 0x38
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	fffffedf 	.word	0xfffffedf

08002fb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	225a      	movs	r2, #90	; 0x5a
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2252      	movs	r2, #82	; 0x52
 8002fca:	2100      	movs	r1, #0
 8002fcc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff fabd 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b08a      	sub	sp, #40	; 0x28
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fea:	2b21      	cmp	r3, #33	; 0x21
 8002fec:	d14c      	bne.n	8003088 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2252      	movs	r2, #82	; 0x52
 8002ff2:	5a9b      	ldrh	r3, [r3, r2]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d132      	bne.n	8003060 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003000:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	2301      	movs	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	438a      	bics	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f383 8810 	msr	PRIMASK, r3
}
 800302a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302c:	f3ef 8310 	mrs	r3, PRIMASK
 8003030:	617b      	str	r3, [r7, #20]
  return(result);
 8003032:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003034:	623b      	str	r3, [r7, #32]
 8003036:	2301      	movs	r3, #1
 8003038:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f383 8810 	msr	PRIMASK, r3
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2140      	movs	r1, #64	; 0x40
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f383 8810 	msr	PRIMASK, r3
}
 800305c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800305e:	e013      	b.n	8003088 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2252      	movs	r2, #82	; 0x52
 800307a:	5a9b      	ldrh	r3, [r3, r2]
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b299      	uxth	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2252      	movs	r2, #82	; 0x52
 8003086:	5299      	strh	r1, [r3, r2]
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b00a      	add	sp, #40	; 0x28
 800308e:	bd80      	pop	{r7, pc}

08003090 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309c:	2b21      	cmp	r3, #33	; 0x21
 800309e:	d151      	bne.n	8003144 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2252      	movs	r2, #82	; 0x52
 80030a4:	5a9b      	ldrh	r3, [r3, r2]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d132      	bne.n	8003112 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8310 	mrs	r3, PRIMASK
 80030b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80030b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b6:	2301      	movs	r3, #1
 80030b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2180      	movs	r1, #128	; 0x80
 80030ce:	438a      	bics	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030de:	f3ef 8310 	mrs	r3, PRIMASK
 80030e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80030e4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	2301      	movs	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2140      	movs	r1, #64	; 0x40
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003110:	e018      	b.n	8003144 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	001a      	movs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	05d2      	lsls	r2, r2, #23
 8003124:	0dd2      	lsrs	r2, r2, #23
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2252      	movs	r2, #82	; 0x52
 8003136:	5a9b      	ldrh	r3, [r3, r2]
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b299      	uxth	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2252      	movs	r2, #82	; 0x52
 8003142:	5299      	strh	r1, [r3, r2]
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b00c      	add	sp, #48	; 0x30
 800314a:	bd80      	pop	{r7, pc}

0800314c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003154:	f3ef 8310 	mrs	r3, PRIMASK
 8003158:	60bb      	str	r3, [r7, #8]
  return(result);
 800315a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	2301      	movs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f383 8810 	msr	PRIMASK, r3
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	438a      	bics	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f383 8810 	msr	PRIMASK, r3
}
 8003184:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff f9d3 	bl	8002540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b006      	add	sp, #24
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b090      	sub	sp, #64	; 0x40
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80031ac:	203e      	movs	r0, #62	; 0x3e
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	215c      	movs	r1, #92	; 0x5c
 80031b4:	5a52      	ldrh	r2, [r2, r1]
 80031b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031bc:	2b22      	cmp	r3, #34	; 0x22
 80031be:	d000      	beq.n	80031c2 <UART_RxISR_8BIT+0x1e>
 80031c0:	e095      	b.n	80032ee <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c8:	213c      	movs	r1, #60	; 0x3c
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	183b      	adds	r3, r7, r0
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b2d9      	uxtb	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	400a      	ands	r2, r1
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	225a      	movs	r2, #90	; 0x5a
 80031f2:	5a9b      	ldrh	r3, [r3, r2]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b299      	uxth	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	225a      	movs	r2, #90	; 0x5a
 80031fe:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	225a      	movs	r2, #90	; 0x5a
 8003204:	5a9b      	ldrh	r3, [r3, r2]
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d178      	bne.n	80032fe <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320c:	f3ef 8310 	mrs	r3, PRIMASK
 8003210:	61bb      	str	r3, [r7, #24]
  return(result);
 8003212:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003214:	63bb      	str	r3, [r7, #56]	; 0x38
 8003216:	2301      	movs	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4936      	ldr	r1, [pc, #216]	; (8003308 <UART_RxISR_8BIT+0x164>)
 800322e:	400a      	ands	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323e:	f3ef 8310 	mrs	r3, PRIMASK
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
 8003248:	2301      	movs	r3, #1
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003280:	2b01      	cmp	r3, #1
 8003282:	d12f      	bne.n	80032e4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8310 	mrs	r3, PRIMASK
 800328e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003290:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2110      	movs	r1, #16
 80032ac:	438a      	bics	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	2210      	movs	r2, #16
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d103      	bne.n	80032d2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2210      	movs	r2, #16
 80032d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2258      	movs	r2, #88	; 0x58
 80032d6:	5a9a      	ldrh	r2, [r3, r2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0011      	movs	r1, r2
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff f93f 	bl	8002560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032e2:	e00c      	b.n	80032fe <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fd f8de 	bl	80004a8 <HAL_UART_RxCpltCallback>
}
 80032ec:	e007      	b.n	80032fe <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2108      	movs	r1, #8
 80032fa:	430a      	orrs	r2, r1
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b010      	add	sp, #64	; 0x40
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	fffffedf 	.word	0xfffffedf

0800330c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b090      	sub	sp, #64	; 0x40
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003314:	203e      	movs	r0, #62	; 0x3e
 8003316:	183b      	adds	r3, r7, r0
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	215c      	movs	r1, #92	; 0x5c
 800331c:	5a52      	ldrh	r2, [r2, r1]
 800331e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003324:	2b22      	cmp	r3, #34	; 0x22
 8003326:	d000      	beq.n	800332a <UART_RxISR_16BIT+0x1e>
 8003328:	e095      	b.n	8003456 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003330:	213c      	movs	r1, #60	; 0x3c
 8003332:	187b      	adds	r3, r7, r1
 8003334:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800333c:	187b      	adds	r3, r7, r1
 800333e:	183a      	adds	r2, r7, r0
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	4013      	ands	r3, r2
 8003346:	b29a      	uxth	r2, r3
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	225a      	movs	r2, #90	; 0x5a
 800335a:	5a9b      	ldrh	r3, [r3, r2]
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b299      	uxth	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	225a      	movs	r2, #90	; 0x5a
 8003366:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	225a      	movs	r2, #90	; 0x5a
 800336c:	5a9b      	ldrh	r3, [r3, r2]
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d178      	bne.n	8003466 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	617b      	str	r3, [r7, #20]
  return(result);
 800337a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
 800337e:	2301      	movs	r3, #1
 8003380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4936      	ldr	r1, [pc, #216]	; (8003470 <UART_RxISR_16BIT+0x164>)
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a6:	f3ef 8310 	mrs	r3, PRIMASK
 80033aa:	623b      	str	r3, [r7, #32]
  return(result);
 80033ac:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
 80033b0:	2301      	movs	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2101      	movs	r1, #1
 80033c8:	438a      	bics	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d12f      	bne.n	800344c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f2:	f3ef 8310 	mrs	r3, PRIMASK
 80033f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fc:	2301      	movs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f383 8810 	msr	PRIMASK, r3
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2110      	movs	r1, #16
 8003414:	438a      	bics	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2210      	movs	r2, #16
 800342c:	4013      	ands	r3, r2
 800342e:	2b10      	cmp	r3, #16
 8003430:	d103      	bne.n	800343a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2210      	movs	r2, #16
 8003438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2258      	movs	r2, #88	; 0x58
 800343e:	5a9a      	ldrh	r2, [r3, r2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff f88b 	bl	8002560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800344a:	e00c      	b.n	8003466 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f7fd f82a 	bl	80004a8 <HAL_UART_RxCpltCallback>
}
 8003454:	e007      	b.n	8003466 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2108      	movs	r1, #8
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b010      	add	sp, #64	; 0x40
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	fffffedf 	.word	0xfffffedf

08003474 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <atoi>:
 8003484:	b510      	push	{r4, lr}
 8003486:	220a      	movs	r2, #10
 8003488:	2100      	movs	r1, #0
 800348a:	f000 f8c1 	bl	8003610 <strtol>
 800348e:	bd10      	pop	{r4, pc}

08003490 <__errno>:
 8003490:	4b01      	ldr	r3, [pc, #4]	; (8003498 <__errno+0x8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	4770      	bx	lr
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	2000000c 	.word	0x2000000c

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	2600      	movs	r6, #0
 80034a0:	4d0c      	ldr	r5, [pc, #48]	; (80034d4 <__libc_init_array+0x38>)
 80034a2:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <__libc_init_array+0x3c>)
 80034a4:	1b64      	subs	r4, r4, r5
 80034a6:	10a4      	asrs	r4, r4, #2
 80034a8:	42a6      	cmp	r6, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	2600      	movs	r6, #0
 80034ae:	f000 f8bb 	bl	8003628 <_init>
 80034b2:	4d0a      	ldr	r5, [pc, #40]	; (80034dc <__libc_init_array+0x40>)
 80034b4:	4c0a      	ldr	r4, [pc, #40]	; (80034e0 <__libc_init_array+0x44>)
 80034b6:	1b64      	subs	r4, r4, r5
 80034b8:	10a4      	asrs	r4, r4, #2
 80034ba:	42a6      	cmp	r6, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	00b3      	lsls	r3, r6, #2
 80034c2:	58eb      	ldr	r3, [r5, r3]
 80034c4:	4798      	blx	r3
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	00b3      	lsls	r3, r6, #2
 80034cc:	58eb      	ldr	r3, [r5, r3]
 80034ce:	4798      	blx	r3
 80034d0:	3601      	adds	r6, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	080037c4 	.word	0x080037c4
 80034d8:	080037c4 	.word	0x080037c4
 80034dc:	080037c4 	.word	0x080037c4
 80034e0:	080037c8 	.word	0x080037c8

080034e4 <memset>:
 80034e4:	0003      	movs	r3, r0
 80034e6:	1882      	adds	r2, r0, r2
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <memset+0xa>
 80034ec:	4770      	bx	lr
 80034ee:	7019      	strb	r1, [r3, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	e7f9      	b.n	80034e8 <memset+0x4>

080034f4 <_strtol_l.constprop.0>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	b087      	sub	sp, #28
 80034f8:	001e      	movs	r6, r3
 80034fa:	9005      	str	r0, [sp, #20]
 80034fc:	9101      	str	r1, [sp, #4]
 80034fe:	9202      	str	r2, [sp, #8]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d045      	beq.n	8003590 <_strtol_l.constprop.0+0x9c>
 8003504:	000b      	movs	r3, r1
 8003506:	2e24      	cmp	r6, #36	; 0x24
 8003508:	d842      	bhi.n	8003590 <_strtol_l.constprop.0+0x9c>
 800350a:	4a3f      	ldr	r2, [pc, #252]	; (8003608 <_strtol_l.constprop.0+0x114>)
 800350c:	2108      	movs	r1, #8
 800350e:	4694      	mov	ip, r2
 8003510:	001a      	movs	r2, r3
 8003512:	4660      	mov	r0, ip
 8003514:	7814      	ldrb	r4, [r2, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	5d00      	ldrb	r0, [r0, r4]
 800351a:	001d      	movs	r5, r3
 800351c:	0007      	movs	r7, r0
 800351e:	400f      	ands	r7, r1
 8003520:	4208      	tst	r0, r1
 8003522:	d1f5      	bne.n	8003510 <_strtol_l.constprop.0+0x1c>
 8003524:	2c2d      	cmp	r4, #45	; 0x2d
 8003526:	d13a      	bne.n	800359e <_strtol_l.constprop.0+0xaa>
 8003528:	2701      	movs	r7, #1
 800352a:	781c      	ldrb	r4, [r3, #0]
 800352c:	1c95      	adds	r5, r2, #2
 800352e:	2e00      	cmp	r6, #0
 8003530:	d065      	beq.n	80035fe <_strtol_l.constprop.0+0x10a>
 8003532:	2e10      	cmp	r6, #16
 8003534:	d109      	bne.n	800354a <_strtol_l.constprop.0+0x56>
 8003536:	2c30      	cmp	r4, #48	; 0x30
 8003538:	d107      	bne.n	800354a <_strtol_l.constprop.0+0x56>
 800353a:	2220      	movs	r2, #32
 800353c:	782b      	ldrb	r3, [r5, #0]
 800353e:	4393      	bics	r3, r2
 8003540:	2b58      	cmp	r3, #88	; 0x58
 8003542:	d157      	bne.n	80035f4 <_strtol_l.constprop.0+0x100>
 8003544:	2610      	movs	r6, #16
 8003546:	786c      	ldrb	r4, [r5, #1]
 8003548:	3502      	adds	r5, #2
 800354a:	4b30      	ldr	r3, [pc, #192]	; (800360c <_strtol_l.constprop.0+0x118>)
 800354c:	0031      	movs	r1, r6
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	0018      	movs	r0, r3
 8003552:	9303      	str	r3, [sp, #12]
 8003554:	f7fc fe5e 	bl	8000214 <__aeabi_uidivmod>
 8003558:	2300      	movs	r3, #0
 800355a:	2201      	movs	r2, #1
 800355c:	4684      	mov	ip, r0
 800355e:	0018      	movs	r0, r3
 8003560:	9104      	str	r1, [sp, #16]
 8003562:	4252      	negs	r2, r2
 8003564:	0021      	movs	r1, r4
 8003566:	3930      	subs	r1, #48	; 0x30
 8003568:	2909      	cmp	r1, #9
 800356a:	d81d      	bhi.n	80035a8 <_strtol_l.constprop.0+0xb4>
 800356c:	000c      	movs	r4, r1
 800356e:	42a6      	cmp	r6, r4
 8003570:	dd28      	ble.n	80035c4 <_strtol_l.constprop.0+0xd0>
 8003572:	2b00      	cmp	r3, #0
 8003574:	db24      	blt.n	80035c0 <_strtol_l.constprop.0+0xcc>
 8003576:	0013      	movs	r3, r2
 8003578:	4584      	cmp	ip, r0
 800357a:	d306      	bcc.n	800358a <_strtol_l.constprop.0+0x96>
 800357c:	d102      	bne.n	8003584 <_strtol_l.constprop.0+0x90>
 800357e:	9904      	ldr	r1, [sp, #16]
 8003580:	42a1      	cmp	r1, r4
 8003582:	db02      	blt.n	800358a <_strtol_l.constprop.0+0x96>
 8003584:	2301      	movs	r3, #1
 8003586:	4370      	muls	r0, r6
 8003588:	1820      	adds	r0, r4, r0
 800358a:	782c      	ldrb	r4, [r5, #0]
 800358c:	3501      	adds	r5, #1
 800358e:	e7e9      	b.n	8003564 <_strtol_l.constprop.0+0x70>
 8003590:	f7ff ff7e 	bl	8003490 <__errno>
 8003594:	2316      	movs	r3, #22
 8003596:	6003      	str	r3, [r0, #0]
 8003598:	2000      	movs	r0, #0
 800359a:	b007      	add	sp, #28
 800359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800359e:	2c2b      	cmp	r4, #43	; 0x2b
 80035a0:	d1c5      	bne.n	800352e <_strtol_l.constprop.0+0x3a>
 80035a2:	781c      	ldrb	r4, [r3, #0]
 80035a4:	1c95      	adds	r5, r2, #2
 80035a6:	e7c2      	b.n	800352e <_strtol_l.constprop.0+0x3a>
 80035a8:	0021      	movs	r1, r4
 80035aa:	3941      	subs	r1, #65	; 0x41
 80035ac:	2919      	cmp	r1, #25
 80035ae:	d801      	bhi.n	80035b4 <_strtol_l.constprop.0+0xc0>
 80035b0:	3c37      	subs	r4, #55	; 0x37
 80035b2:	e7dc      	b.n	800356e <_strtol_l.constprop.0+0x7a>
 80035b4:	0021      	movs	r1, r4
 80035b6:	3961      	subs	r1, #97	; 0x61
 80035b8:	2919      	cmp	r1, #25
 80035ba:	d803      	bhi.n	80035c4 <_strtol_l.constprop.0+0xd0>
 80035bc:	3c57      	subs	r4, #87	; 0x57
 80035be:	e7d6      	b.n	800356e <_strtol_l.constprop.0+0x7a>
 80035c0:	0013      	movs	r3, r2
 80035c2:	e7e2      	b.n	800358a <_strtol_l.constprop.0+0x96>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da09      	bge.n	80035dc <_strtol_l.constprop.0+0xe8>
 80035c8:	2322      	movs	r3, #34	; 0x22
 80035ca:	9a05      	ldr	r2, [sp, #20]
 80035cc:	9803      	ldr	r0, [sp, #12]
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	9b02      	ldr	r3, [sp, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0e1      	beq.n	800359a <_strtol_l.constprop.0+0xa6>
 80035d6:	1e6b      	subs	r3, r5, #1
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	e007      	b.n	80035ec <_strtol_l.constprop.0+0xf8>
 80035dc:	2f00      	cmp	r7, #0
 80035de:	d000      	beq.n	80035e2 <_strtol_l.constprop.0+0xee>
 80035e0:	4240      	negs	r0, r0
 80035e2:	9a02      	ldr	r2, [sp, #8]
 80035e4:	2a00      	cmp	r2, #0
 80035e6:	d0d8      	beq.n	800359a <_strtol_l.constprop.0+0xa6>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f4      	bne.n	80035d6 <_strtol_l.constprop.0+0xe2>
 80035ec:	9b02      	ldr	r3, [sp, #8]
 80035ee:	9a01      	ldr	r2, [sp, #4]
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e7d2      	b.n	800359a <_strtol_l.constprop.0+0xa6>
 80035f4:	2430      	movs	r4, #48	; 0x30
 80035f6:	2e00      	cmp	r6, #0
 80035f8:	d1a7      	bne.n	800354a <_strtol_l.constprop.0+0x56>
 80035fa:	3608      	adds	r6, #8
 80035fc:	e7a5      	b.n	800354a <_strtol_l.constprop.0+0x56>
 80035fe:	2c30      	cmp	r4, #48	; 0x30
 8003600:	d09b      	beq.n	800353a <_strtol_l.constprop.0+0x46>
 8003602:	260a      	movs	r6, #10
 8003604:	e7a1      	b.n	800354a <_strtol_l.constprop.0+0x56>
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	080036b9 	.word	0x080036b9
 800360c:	7fffffff 	.word	0x7fffffff

08003610 <strtol>:
 8003610:	b510      	push	{r4, lr}
 8003612:	0013      	movs	r3, r2
 8003614:	000a      	movs	r2, r1
 8003616:	0001      	movs	r1, r0
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <strtol+0x14>)
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	f7ff ff6a 	bl	80034f4 <_strtol_l.constprop.0>
 8003620:	bd10      	pop	{r4, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	2000000c 	.word	0x2000000c

08003628 <_init>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr

08003634 <_fini>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr
