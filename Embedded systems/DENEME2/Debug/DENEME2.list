
DENEME2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800246c  0800246c  0001246c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024d8  080024d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024e0  080024e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080024f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080024f4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f1a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c6  00000000  00000000  00027f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00029318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00029940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f99e  00000000  00000000  00029ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000820d  00000000  00000000  0003988e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f42e  00000000  00000000  00041a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a0ec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001510  00000000  00000000  000a0f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002454 	.word	0x08002454

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002454 	.word	0x08002454

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 f9de 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f806 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f8a6 	bl	80005f8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004ac:	f000 f874 	bl	8000598 <MX_LPUART1_UART_Init>
  	}*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <main+0x14>
	...

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b099      	sub	sp, #100	; 0x64
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	242c      	movs	r4, #44	; 0x2c
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	2334      	movs	r3, #52	; 0x34
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f001 ffbd 	bl	8002444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ca:	2318      	movs	r3, #24
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	2314      	movs	r3, #20
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f001 ffb5 	bl	8002444 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004da:	003b      	movs	r3, r7
 80004dc:	0018      	movs	r0, r3
 80004de:	2318      	movs	r3, #24
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f001 ffae 	bl	8002444 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <SystemClock_Config+0xdc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a29      	ldr	r2, [pc, #164]	; (8000594 <SystemClock_Config+0xe0>)
 80004ee:	401a      	ands	r2, r3
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <SystemClock_Config+0xdc>)
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	0109      	lsls	r1, r1, #4
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fa:	0021      	movs	r1, r4
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	0252      	lsls	r2, r2, #9
 8000508:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2202      	movs	r2, #2
 800050e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	0252      	lsls	r2, r2, #9
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	22c0      	movs	r2, #192	; 0xc0
 800051c:	0312      	lsls	r2, r2, #12
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	03d2      	lsls	r2, r2, #15
 8000526:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	187b      	adds	r3, r7, r1
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fc2a 	bl	8000d84 <HAL_RCC_OscConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000534:	f000 f8b4 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	2118      	movs	r1, #24
 800053a:	187b      	adds	r3, r7, r1
 800053c:	220f      	movs	r2, #15
 800053e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2203      	movs	r2, #3
 8000544:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2101      	movs	r1, #1
 800055c:	0018      	movs	r0, r3
 800055e:	f000 ff8d 	bl	800147c <HAL_RCC_ClockConfig>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000566:	f000 f89b 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800056a:	003b      	movs	r3, r7
 800056c:	2204      	movs	r2, #4
 800056e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f9a3 	bl	80018c4 <HAL_RCCEx_PeriphCLKConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000582:	f000 f88d 	bl	80006a0 <Error_Handler>
  }
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b019      	add	sp, #100	; 0x64
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40007000 	.word	0x40007000
 8000594:	ffffe7ff 	.word	0xffffe7ff

08000598 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <MX_LPUART1_UART_Init+0x58>)
 80005a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <MX_LPUART1_UART_Init+0x5c>)
 80005a6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	0552      	lsls	r2, r2, #21
 80005ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <MX_LPUART1_UART_Init+0x54>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f001 fa9a 	bl	8001b10 <HAL_UART_Init>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80005e0:	f000 f85e 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20000028 	.word	0x20000028
 80005f0:	40004800 	.word	0x40004800
 80005f4:	00033324 	.word	0x00033324

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b08b      	sub	sp, #44	; 0x2c
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	2414      	movs	r4, #20
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2314      	movs	r3, #20
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f001 ff1b 	bl	8002444 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000614:	2104      	movs	r1, #4
 8000616:	430a      	orrs	r2, r1
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_GPIO_Init+0xa0>)
 800061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061e:	2204      	movs	r2, #4
 8000620:	4013      	ands	r3, r2
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_GPIO_Init+0xa0>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	430a      	orrs	r2, r1
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000644:	2102      	movs	r1, #2
 8000646:	430a      	orrs	r2, r1
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_GPIO_Init+0xa0>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	2202      	movs	r2, #2
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_GPIO_Init+0xa0>)
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	2201      	movs	r2, #1
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IIC_SDA_Pin */
  GPIO_InitStruct.Pin = IIC_SDA_Pin;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	0192      	lsls	r2, r2, #6
 8000674:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IIC_SDA_GPIO_Port, &GPIO_InitStruct);
 8000682:	193b      	adds	r3, r7, r4
 8000684:	4a05      	ldr	r2, [pc, #20]	; (800069c <MX_GPIO_Init+0xa4>)
 8000686:	0019      	movs	r1, r3
 8000688:	0010      	movs	r0, r2
 800068a:	f000 fa0d 	bl	8000aa8 <HAL_GPIO_Init>

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b00b      	add	sp, #44	; 0x2c
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40021000 	.word	0x40021000
 800069c:	50000400 	.word	0x50000400

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <HAL_MspInit+0x24>)
 80006b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x24>)
 80006b6:	2101      	movs	r1, #1
 80006b8:	430a      	orrs	r2, r1
 80006ba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <HAL_MspInit+0x24>)
 80006be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_MspInit+0x24>)
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0549      	lsls	r1, r1, #21
 80006c6:	430a      	orrs	r2, r1
 80006c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b08b      	sub	sp, #44	; 0x2c
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	2414      	movs	r4, #20
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	2314      	movs	r3, #20
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f001 feac 	bl	8002444 <memset>
  if(huart->Instance==LPUART1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a28      	ldr	r2, [pc, #160]	; (8000794 <HAL_UART_MspInit+0xc0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d14a      	bne.n	800078c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <HAL_UART_MspInit+0xc4>)
 80006f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <HAL_UART_MspInit+0xc4>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	02c9      	lsls	r1, r1, #11
 8000700:	430a      	orrs	r2, r1
 8000702:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <HAL_UART_MspInit+0xc4>)
 8000706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <HAL_UART_MspInit+0xc4>)
 800070a:	2104      	movs	r1, #4
 800070c:	430a      	orrs	r2, r1
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <HAL_UART_MspInit+0xc4>)
 8000712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000714:	2204      	movs	r2, #4
 8000716:	4013      	ands	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <HAL_UART_MspInit+0xc4>)
 800071e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <HAL_UART_MspInit+0xc4>)
 8000722:	2102      	movs	r1, #2
 8000724:	430a      	orrs	r2, r1
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <HAL_UART_MspInit+0xc4>)
 800072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072c:	2202      	movs	r2, #2
 800072e:	4013      	ands	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2202      	movs	r2, #2
 800073e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2203      	movs	r2, #3
 800074a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2206      	movs	r2, #6
 8000750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	193b      	adds	r3, r7, r4
 8000754:	4a11      	ldr	r2, [pc, #68]	; (800079c <HAL_UART_MspInit+0xc8>)
 8000756:	0019      	movs	r1, r3
 8000758:	0010      	movs	r0, r2
 800075a:	f000 f9a5 	bl	8000aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800075e:	0021      	movs	r1, r4
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	00d2      	lsls	r2, r2, #3
 8000766:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2202      	movs	r2, #2
 800076c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2203      	movs	r2, #3
 8000778:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2206      	movs	r2, #6
 800077e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	187b      	adds	r3, r7, r1
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_UART_MspInit+0xcc>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f000 f98e 	bl	8000aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b00b      	add	sp, #44	; 0x2c
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	40004800 	.word	0x40004800
 8000798:	40021000 	.word	0x40021000
 800079c:	50000800 	.word	0x50000800
 80007a0:	50000400 	.word	0x50000400

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f89e 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007de:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <LoopForever+0x6>)
    LDR R1, [R0]
 80007e2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80007e4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <LoopForever+0xa>)
    CMP R1, R2
 80007e8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80007ea:	d105      	bne.n	80007f8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80007ee:	4913      	ldr	r1, [pc, #76]	; (800083c <LoopForever+0x12>)
    STR R1, [R0]
 80007f0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80007f2:	4813      	ldr	r0, [pc, #76]	; (8000840 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80007f4:	4913      	ldr	r1, [pc, #76]	; (8000844 <LoopForever+0x1a>)
    STR R1, [R0]
 80007f6:	6001      	str	r1, [r0, #0]

080007f8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <LoopForever+0x1e>)
  ldr r1, =_edata
 80007fa:	4914      	ldr	r1, [pc, #80]	; (800084c <LoopForever+0x22>)
  ldr r2, =_sidata
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <LoopForever+0x26>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000810:	4c11      	ldr	r4, [pc, #68]	; (8000858 <LoopForever+0x2e>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800081e:	f7ff ffd8 	bl	80007d2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f001 fdeb 	bl	80023fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000826:	f7ff fe39 	bl	800049c <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
   ldr   r0, =_estack
 800082c:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000830:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000834:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000838:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800083c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000840:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000844:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000850:	080024e8 	.word	0x080024e8
  ldr r2, =_sbss
 8000854:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000858:	200000b0 	.word	0x200000b0

0800085c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_IRQHandler>
	...

08000860 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_Init+0x3c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_Init+0x3c>)
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	430a      	orrs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f811 	bl	80008a0 <HAL_InitTick>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d003      	beq.n	800088a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e001      	b.n	800088e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800088a:	f7ff ff0f 	bl	80006ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
}
 8000892:	0018      	movs	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_InitTick+0x5c>)
 80008aa:	681c      	ldr	r4, [r3, #0]
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_InitTick+0x60>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	0019      	movs	r1, r3
 80008b2:	23fa      	movs	r3, #250	; 0xfa
 80008b4:	0098      	lsls	r0, r3, #2
 80008b6:	f7ff fc27 	bl	8000108 <__udivsi3>
 80008ba:	0003      	movs	r3, r0
 80008bc:	0019      	movs	r1, r3
 80008be:	0020      	movs	r0, r4
 80008c0:	f7ff fc22 	bl	8000108 <__udivsi3>
 80008c4:	0003      	movs	r3, r0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f8e1 	bl	8000a8e <HAL_SYSTICK_Config>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e00f      	b.n	80008f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d80b      	bhi.n	80008f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	2301      	movs	r3, #1
 80008de:	425b      	negs	r3, r3
 80008e0:	2200      	movs	r2, #0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f8be 	bl	8000a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_InitTick+0x64>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b003      	add	sp, #12
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	001a      	movs	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	18d2      	adds	r2, r2, r3
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_IncTick+0x20>)
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000008 	.word	0x20000008
 8000928:	200000ac 	.word	0x200000ac

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	200000ac 	.word	0x200000ac

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b7f      	cmp	r3, #127	; 0x7f
 8000954:	d828      	bhi.n	80009a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000956:	4a2f      	ldr	r2, [pc, #188]	; (8000a14 <__NVIC_SetPriority+0xd4>)
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	33c0      	adds	r3, #192	; 0xc0
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	589b      	ldr	r3, [r3, r2]
 8000966:	1dfa      	adds	r2, r7, #7
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	0011      	movs	r1, r2
 800096c:	2203      	movs	r2, #3
 800096e:	400a      	ands	r2, r1
 8000970:	00d2      	lsls	r2, r2, #3
 8000972:	21ff      	movs	r1, #255	; 0xff
 8000974:	4091      	lsls	r1, r2
 8000976:	000a      	movs	r2, r1
 8000978:	43d2      	mvns	r2, r2
 800097a:	401a      	ands	r2, r3
 800097c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	22ff      	movs	r2, #255	; 0xff
 8000984:	401a      	ands	r2, r3
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0018      	movs	r0, r3
 800098c:	2303      	movs	r3, #3
 800098e:	4003      	ands	r3, r0
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <__NVIC_SetPriority+0xd4>)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	430a      	orrs	r2, r1
 80009a0:	33c0      	adds	r3, #192	; 0xc0
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a6:	e031      	b.n	8000a0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <__NVIC_SetPriority+0xd8>)
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	0019      	movs	r1, r3
 80009b0:	230f      	movs	r3, #15
 80009b2:	400b      	ands	r3, r1
 80009b4:	3b08      	subs	r3, #8
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3306      	adds	r3, #6
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	3304      	adds	r3, #4
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	1dfa      	adds	r2, r7, #7
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	0011      	movs	r1, r2
 80009c8:	2203      	movs	r2, #3
 80009ca:	400a      	ands	r2, r1
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	21ff      	movs	r1, #255	; 0xff
 80009d0:	4091      	lsls	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	43d2      	mvns	r2, r2
 80009d6:	401a      	ands	r2, r3
 80009d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	019b      	lsls	r3, r3, #6
 80009de:	22ff      	movs	r2, #255	; 0xff
 80009e0:	401a      	ands	r2, r3
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0018      	movs	r0, r3
 80009e8:	2303      	movs	r3, #3
 80009ea:	4003      	ands	r3, r0
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <__NVIC_SetPriority+0xd8>)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	001c      	movs	r4, r3
 80009f8:	230f      	movs	r3, #15
 80009fa:	4023      	ands	r3, r4
 80009fc:	3b08      	subs	r3, #8
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	430a      	orrs	r2, r1
 8000a02:	3306      	adds	r3, #6
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	18c3      	adds	r3, r0, r3
 8000a08:	3304      	adds	r3, #4
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b003      	add	sp, #12
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	1e5a      	subs	r2, r3, #1
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	045b      	lsls	r3, r3, #17
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d301      	bcc.n	8000a34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a30:	2301      	movs	r3, #1
 8000a32:	e010      	b.n	8000a56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <SysTick_Config+0x44>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	425b      	negs	r3, r3
 8000a40:	2103      	movs	r1, #3
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff ff7c 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SysTick_Config+0x44>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SysTick_Config+0x44>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	210f      	movs	r1, #15
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	1c02      	adds	r2, r0, #0
 8000a74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ffbf 	bl	8000a1c <SysTick_Config>
 8000a9e:	0003      	movs	r3, r0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000abe:	e149      	b.n	8000d54 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d100      	bne.n	8000ad8 <HAL_GPIO_Init+0x30>
 8000ad6:	e13a      	b.n	8000d4e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2203      	movs	r2, #3
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d005      	beq.n	8000af0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d130      	bne.n	8000b52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	409a      	lsls	r2, r3
 8000afe:	0013      	movs	r3, r2
 8000b00:	43da      	mvns	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2203      	movs	r2, #3
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d017      	beq.n	8000b8e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2203      	movs	r2, #3
 8000b94:	4013      	ands	r3, r2
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d123      	bne.n	8000be2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	08da      	lsrs	r2, r3, #3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	58d3      	ldr	r3, [r2, r3]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2207      	movs	r2, #7
 8000bac:	4013      	ands	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2107      	movs	r1, #7
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	08da      	lsrs	r2, r3, #3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	6939      	ldr	r1, [r7, #16]
 8000be0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2203      	movs	r2, #3
 8000c00:	401a      	ands	r2, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	23c0      	movs	r3, #192	; 0xc0
 8000c1c:	029b      	lsls	r3, r3, #10
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d100      	bne.n	8000c24 <HAL_GPIO_Init+0x17c>
 8000c22:	e094      	b.n	8000d4e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <HAL_GPIO_Init+0x2c4>)
 8000c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_GPIO_Init+0x2c4>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <HAL_GPIO_Init+0x2c8>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	589b      	ldr	r3, [r3, r2]
 8000c3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0x1de>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00d      	beq.n	8000c82 <HAL_GPIO_Init+0x1da>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a43      	ldr	r2, [pc, #268]	; (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <HAL_GPIO_Init+0x1d6>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a42      	ldr	r2, [pc, #264]	; (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_GPIO_Init+0x1d2>
 8000c76:	2305      	movs	r3, #5
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	e004      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c86:	2300      	movs	r3, #0
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	4093      	lsls	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c98:	4935      	ldr	r1, [pc, #212]	; (8000d70 <HAL_GPIO_Init+0x2c8>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	025b      	lsls	r3, r3, #9
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	035b      	lsls	r3, r3, #13
 8000d12:	4013      	ands	r3, r2
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	039b      	lsls	r3, r3, #14
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	40da      	lsrs	r2, r3
 8000d5c:	1e13      	subs	r3, r2, #0
 8000d5e:	d000      	beq.n	8000d62 <HAL_GPIO_Init+0x2ba>
 8000d60:	e6ae      	b.n	8000ac0 <HAL_GPIO_Init+0x18>
  }
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b006      	add	sp, #24
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	50000400 	.word	0x50000400
 8000d78:	50000800 	.word	0x50000800
 8000d7c:	50001c00 	.word	0x50001c00
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f000 fb6c 	bl	8001470 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d98:	4bc8      	ldr	r3, [pc, #800]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000da2:	4bc6      	ldr	r3, [pc, #792]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	d100      	bne.n	8000dba <HAL_RCC_OscConfig+0x36>
 8000db8:	e07d      	b.n	8000eb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d007      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	2b0c      	cmp	r3, #12
 8000dc4:	d112      	bne.n	8000dec <HAL_RCC_OscConfig+0x68>
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	025b      	lsls	r3, r3, #9
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d10d      	bne.n	8000dec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd0:	4bba      	ldr	r3, [pc, #744]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d100      	bne.n	8000dde <HAL_RCC_OscConfig+0x5a>
 8000ddc:	e06a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x130>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d166      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	f000 fb42 	bl	8001470 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d107      	bne.n	8000e08 <HAL_RCC_OscConfig+0x84>
 8000df8:	4bb0      	ldr	r3, [pc, #704]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4baf      	ldr	r3, [pc, #700]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e027      	b.n	8000e58 <HAL_RCC_OscConfig+0xd4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	23a0      	movs	r3, #160	; 0xa0
 8000e0e:	02db      	lsls	r3, r3, #11
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d10e      	bne.n	8000e32 <HAL_RCC_OscConfig+0xae>
 8000e14:	4ba9      	ldr	r3, [pc, #676]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4ba8      	ldr	r3, [pc, #672]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	02c9      	lsls	r1, r1, #11
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	4ba6      	ldr	r3, [pc, #664]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4ba5      	ldr	r3, [pc, #660]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0249      	lsls	r1, r1, #9
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e012      	b.n	8000e58 <HAL_RCC_OscConfig+0xd4>
 8000e32:	4ba2      	ldr	r3, [pc, #648]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4ba1      	ldr	r3, [pc, #644]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e38:	49a1      	ldr	r1, [pc, #644]	; (80010c0 <HAL_RCC_OscConfig+0x33c>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	025b      	lsls	r3, r3, #9
 8000e46:	4013      	ands	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4b9b      	ldr	r3, [pc, #620]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b9a      	ldr	r3, [pc, #616]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e52:	499c      	ldr	r1, [pc, #624]	; (80010c4 <HAL_RCC_OscConfig+0x340>)
 8000e54:	400a      	ands	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d014      	beq.n	8000e8a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fd64 	bl	800092c <HAL_GetTick>
 8000e64:	0003      	movs	r3, r0
 8000e66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fd5f 	bl	800092c <HAL_GetTick>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e2f9      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e7c:	4b8f      	ldr	r3, [pc, #572]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	4013      	ands	r3, r2
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0xe6>
 8000e88:	e015      	b.n	8000eb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fd4f 	bl	800092c <HAL_GetTick>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fd4a 	bl	800092c <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e2e4      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ea6:	4b85      	ldr	r3, [pc, #532]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d1f0      	bne.n	8000e94 <HAL_RCC_OscConfig+0x110>
 8000eb2:	e000      	b.n	8000eb6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x13e>
 8000ec0:	e099      	b.n	8000ff6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	2220      	movs	r2, #32
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d009      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ed0:	4b7a      	ldr	r3, [pc, #488]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b79      	ldr	r3, [pc, #484]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	2220      	movs	r2, #32
 8000ee0:	4393      	bics	r3, r2
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d005      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b0c      	cmp	r3, #12
 8000eee:	d13e      	bne.n	8000f6e <HAL_RCC_OscConfig+0x1ea>
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d13b      	bne.n	8000f6e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ef6:	4b71      	ldr	r3, [pc, #452]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2204      	movs	r2, #4
 8000efc:	4013      	ands	r3, r2
 8000efe:	d004      	beq.n	8000f0a <HAL_RCC_OscConfig+0x186>
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e2b2      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	4b6c      	ldr	r3, [pc, #432]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a6e      	ldr	r2, [pc, #440]	; (80010c8 <HAL_RCC_OscConfig+0x344>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	0019      	movs	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	021a      	lsls	r2, r3, #8
 8000f1a:	4b68      	ldr	r3, [pc, #416]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f20:	4b66      	ldr	r3, [pc, #408]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2209      	movs	r2, #9
 8000f26:	4393      	bics	r3, r2
 8000f28:	0019      	movs	r1, r3
 8000f2a:	4b64      	ldr	r3, [pc, #400]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f32:	f000 fbeb 	bl	800170c <HAL_RCC_GetSysClockFreq>
 8000f36:	0001      	movs	r1, r0
 8000f38:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	220f      	movs	r2, #15
 8000f40:	4013      	ands	r3, r2
 8000f42:	4a62      	ldr	r2, [pc, #392]	; (80010cc <HAL_RCC_OscConfig+0x348>)
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
 8000f46:	000a      	movs	r2, r1
 8000f48:	40da      	lsrs	r2, r3
 8000f4a:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <HAL_RCC_OscConfig+0x34c>)
 8000f4c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f4e:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <HAL_RCC_OscConfig+0x350>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2513      	movs	r5, #19
 8000f54:	197c      	adds	r4, r7, r5
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff fca2 	bl	80008a0 <HAL_InitTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000f60:	197b      	adds	r3, r7, r5
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d046      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000f68:	197b      	adds	r3, r7, r5
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	e280      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d027      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f74:	4b51      	ldr	r3, [pc, #324]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2209      	movs	r2, #9
 8000f7a:	4393      	bics	r3, r2
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fcd1 	bl	800092c <HAL_GetTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fccc 	bl	800092c <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e266      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fa2:	4b46      	ldr	r3, [pc, #280]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d0f1      	beq.n	8000f90 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4b43      	ldr	r3, [pc, #268]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <HAL_RCC_OscConfig+0x344>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	021a      	lsls	r2, r3, #8
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	e018      	b.n	8000ff6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	438a      	bics	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fcac 	bl	800092c <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fca7 	bl	800092c <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e241      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d1f1      	bne.n	8000fda <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d100      	bne.n	8001002 <HAL_RCC_OscConfig+0x27e>
 8001000:	e0a1      	b.n	8001146 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d140      	bne.n	800108a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d005      	beq.n	8001020 <HAL_RCC_OscConfig+0x29c>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e227      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <HAL_RCC_OscConfig+0x354>)
 8001026:	4013      	ands	r3, r2
 8001028:	0019      	movs	r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8001030:	430a      	orrs	r2, r1
 8001032:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	0a19      	lsrs	r1, r3, #8
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	061a      	lsls	r2, r3, #24
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8001044:	430a      	orrs	r2, r1
 8001046:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	0b5b      	lsrs	r3, r3, #13
 800104e:	3301      	adds	r3, #1
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	0212      	lsls	r2, r2, #8
 8001054:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	210f      	movs	r1, #15
 800105e:	400b      	ands	r3, r1
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <HAL_RCC_OscConfig+0x348>)
 8001062:	5ccb      	ldrb	r3, [r1, r3]
 8001064:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_RCC_OscConfig+0x34c>)
 8001068:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_RCC_OscConfig+0x350>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2513      	movs	r5, #19
 8001070:	197c      	adds	r4, r7, r5
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff fc14 	bl	80008a0 <HAL_InitTick>
 8001078:	0003      	movs	r3, r0
 800107a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800107c:	197b      	adds	r3, r7, r5
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d060      	beq.n	8001146 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001084:	197b      	adds	r3, r7, r5
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	e1f2      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d03f      	beq.n	8001112 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_RCC_OscConfig+0x338>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0049      	lsls	r1, r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc44 	bl	800092c <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010a8:	e018      	b.n	80010dc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010aa:	f7ff fc3f 	bl	800092c <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d911      	bls.n	80010dc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1d9      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	fffeffff 	.word	0xfffeffff
 80010c4:	fffbffff 	.word	0xfffbffff
 80010c8:	ffffe0ff 	.word	0xffffe0ff
 80010cc:	0800246c 	.word	0x0800246c
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004
 80010d8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010dc:	4bc9      	ldr	r3, [pc, #804]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4013      	ands	r3, r2
 80010e6:	d0e0      	beq.n	80010aa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e8:	4bc6      	ldr	r3, [pc, #792]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4ac6      	ldr	r2, [pc, #792]	; (8001408 <HAL_RCC_OscConfig+0x684>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	0019      	movs	r1, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1a      	ldr	r2, [r3, #32]
 80010f6:	4bc3      	ldr	r3, [pc, #780]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80010f8:	430a      	orrs	r2, r1
 80010fa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fc:	4bc1      	ldr	r3, [pc, #772]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	0a19      	lsrs	r1, r3, #8
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	061a      	lsls	r2, r3, #24
 800110a:	4bbe      	ldr	r3, [pc, #760]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800110c:	430a      	orrs	r2, r1
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	e019      	b.n	8001146 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001112:	4bbc      	ldr	r3, [pc, #752]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4bbb      	ldr	r3, [pc, #748]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001118:	49bc      	ldr	r1, [pc, #752]	; (800140c <HAL_RCC_OscConfig+0x688>)
 800111a:	400a      	ands	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fc05 	bl	800092c <HAL_GetTick>
 8001122:	0003      	movs	r3, r0
 8001124:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001128:	f7ff fc00 	bl	800092c <HAL_GetTick>
 800112c:	0002      	movs	r2, r0
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e19a      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800113a:	4bb2      	ldr	r3, [pc, #712]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2208      	movs	r2, #8
 800114c:	4013      	ands	r3, r2
 800114e:	d036      	beq.n	80011be <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d019      	beq.n	800118c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001158:	4baa      	ldr	r3, [pc, #680]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800115a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800115c:	4ba9      	ldr	r3, [pc, #676]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800115e:	2101      	movs	r1, #1
 8001160:	430a      	orrs	r2, r1
 8001162:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fbe2 	bl	800092c <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff fbdd 	bl	800092c <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e177      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001180:	4ba0      	ldr	r3, [pc, #640]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d0f1      	beq.n	800116e <HAL_RCC_OscConfig+0x3ea>
 800118a:	e018      	b.n	80011be <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118c:	4b9d      	ldr	r3, [pc, #628]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800118e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001190:	4b9c      	ldr	r3, [pc, #624]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001192:	2101      	movs	r1, #1
 8001194:	438a      	bics	r2, r1
 8001196:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fbc8 	bl	800092c <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff fbc3 	bl	800092c <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e15d      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011b4:	4b93      	ldr	r3, [pc, #588]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80011b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d1f1      	bne.n	80011a2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2204      	movs	r2, #4
 80011c4:	4013      	ands	r3, r2
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x446>
 80011c8:	e0ae      	b.n	8001328 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	2023      	movs	r0, #35	; 0x23
 80011cc:	183b      	adds	r3, r7, r0
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80011d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	055b      	lsls	r3, r3, #21
 80011da:	4013      	ands	r3, r2
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80011e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011e2:	4b88      	ldr	r3, [pc, #544]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	0549      	lsls	r1, r1, #21
 80011e8:	430a      	orrs	r2, r1
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80011ec:	183b      	adds	r3, r7, r0
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b87      	ldr	r3, [pc, #540]	; (8001410 <HAL_RCC_OscConfig+0x68c>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	d11a      	bne.n	8001234 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fe:	4b84      	ldr	r3, [pc, #528]	; (8001410 <HAL_RCC_OscConfig+0x68c>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b83      	ldr	r3, [pc, #524]	; (8001410 <HAL_RCC_OscConfig+0x68c>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0049      	lsls	r1, r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120c:	f7ff fb8e 	bl	800092c <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001216:	f7ff fb89 	bl	800092c <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e123      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_RCC_OscConfig+0x68c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	429a      	cmp	r2, r3
 800123e:	d107      	bne.n	8001250 <HAL_RCC_OscConfig+0x4cc>
 8001240:	4b70      	ldr	r3, [pc, #448]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001244:	4b6f      	ldr	r3, [pc, #444]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	0049      	lsls	r1, r1, #1
 800124a:	430a      	orrs	r2, r1
 800124c:	651a      	str	r2, [r3, #80]	; 0x50
 800124e:	e031      	b.n	80012b4 <HAL_RCC_OscConfig+0x530>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10c      	bne.n	8001272 <HAL_RCC_OscConfig+0x4ee>
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800125a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800125c:	4b69      	ldr	r3, [pc, #420]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800125e:	496b      	ldr	r1, [pc, #428]	; (800140c <HAL_RCC_OscConfig+0x688>)
 8001260:	400a      	ands	r2, r1
 8001262:	651a      	str	r2, [r3, #80]	; 0x50
 8001264:	4b67      	ldr	r3, [pc, #412]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001266:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800126a:	496a      	ldr	r1, [pc, #424]	; (8001414 <HAL_RCC_OscConfig+0x690>)
 800126c:	400a      	ands	r2, r1
 800126e:	651a      	str	r2, [r3, #80]	; 0x50
 8001270:	e020      	b.n	80012b4 <HAL_RCC_OscConfig+0x530>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	23a0      	movs	r3, #160	; 0xa0
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	429a      	cmp	r2, r3
 800127c:	d10e      	bne.n	800129c <HAL_RCC_OscConfig+0x518>
 800127e:	4b61      	ldr	r3, [pc, #388]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	00c9      	lsls	r1, r1, #3
 8001288:	430a      	orrs	r2, r1
 800128a:	651a      	str	r2, [r3, #80]	; 0x50
 800128c:	4b5d      	ldr	r3, [pc, #372]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800128e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001290:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	0049      	lsls	r1, r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	651a      	str	r2, [r3, #80]	; 0x50
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0x530>
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800129e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012a0:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80012a2:	495a      	ldr	r1, [pc, #360]	; (800140c <HAL_RCC_OscConfig+0x688>)
 80012a4:	400a      	ands	r2, r1
 80012a6:	651a      	str	r2, [r3, #80]	; 0x50
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80012aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ac:	4b55      	ldr	r3, [pc, #340]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80012ae:	4959      	ldr	r1, [pc, #356]	; (8001414 <HAL_RCC_OscConfig+0x690>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d015      	beq.n	80012e8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fb36 	bl	800092c <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012c4:	e009      	b.n	80012da <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff fb31 	bl	800092c <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_RCC_OscConfig+0x694>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e0ca      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80012dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4013      	ands	r3, r2
 80012e4:	d0ef      	beq.n	80012c6 <HAL_RCC_OscConfig+0x542>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fb20 	bl	800092c <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012f0:	e009      	b.n	8001306 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb1b 	bl	800092c <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_RCC_OscConfig+0x694>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0b4      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d1ef      	bne.n	80012f2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001312:	2323      	movs	r3, #35	; 0x23
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800131e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001322:	493e      	ldr	r1, [pc, #248]	; (800141c <HAL_RCC_OscConfig+0x698>)
 8001324:	400a      	ands	r2, r1
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <HAL_RCC_OscConfig+0x5ae>
 8001330:	e09d      	b.n	800146e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d100      	bne.n	800133a <HAL_RCC_OscConfig+0x5b6>
 8001338:	e076      	b.n	8001428 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	2b02      	cmp	r3, #2
 8001340:	d145      	bne.n	80013ce <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001348:	4935      	ldr	r1, [pc, #212]	; (8001420 <HAL_RCC_OscConfig+0x69c>)
 800134a:	400a      	ands	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff faed 	bl	800092c <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fae8 	bl	800092c <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e082      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	049b      	lsls	r3, r3, #18
 8001372:	4013      	ands	r3, r2
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <HAL_RCC_OscConfig+0x6a0>)
 800137c:	4013      	ands	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	431a      	orrs	r2, r3
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001392:	430a      	orrs	r2, r1
 8001394:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0449      	lsls	r1, r1, #17
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fac2 	bl	800092c <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fabd 	bl	800092c <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e057      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	049b      	lsls	r3, r3, #18
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x62a>
 80013cc:	e04f      	b.n	800146e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80013d4:	4912      	ldr	r1, [pc, #72]	; (8001420 <HAL_RCC_OscConfig+0x69c>)
 80013d6:	400a      	ands	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff faa7 	bl	800092c <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff faa2 	bl	800092c <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e03c      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_RCC_OscConfig+0x680>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	049b      	lsls	r3, r3, #18
 80013fe:	4013      	ands	r3, r2
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x660>
 8001402:	e034      	b.n	800146e <HAL_RCC_OscConfig+0x6ea>
 8001404:	40021000 	.word	0x40021000
 8001408:	ffff1fff 	.word	0xffff1fff
 800140c:	fffffeff 	.word	0xfffffeff
 8001410:	40007000 	.word	0x40007000
 8001414:	fffffbff 	.word	0xfffffbff
 8001418:	00001388 	.word	0x00001388
 800141c:	efffffff 	.word	0xefffffff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x6f4>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	401a      	ands	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	429a      	cmp	r2, r3
 8001448:	d10f      	bne.n	800146a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	23f0      	movs	r3, #240	; 0xf0
 800144e:	039b      	lsls	r3, r3, #14
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d107      	bne.n	800146a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	401a      	ands	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b00a      	add	sp, #40	; 0x28
 8001476:	bdb0      	pop	{r4, r5, r7, pc}
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e128      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b96      	ldr	r3, [pc, #600]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2201      	movs	r2, #1
 8001496:	4013      	ands	r3, r2
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d91e      	bls.n	80014dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b93      	ldr	r3, [pc, #588]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4393      	bics	r3, r2
 80014a6:	0019      	movs	r1, r3
 80014a8:	4b90      	ldr	r3, [pc, #576]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014b0:	f7ff fa3c 	bl	800092c <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b8:	e009      	b.n	80014ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ba:	f7ff fa37 	bl	800092c <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a8a      	ldr	r2, [pc, #552]	; (80016f0 <HAL_RCC_ClockConfig+0x274>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e109      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b87      	ldr	r3, [pc, #540]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d1ee      	bne.n	80014ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d009      	beq.n	80014fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e6:	4b83      	ldr	r3, [pc, #524]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	22f0      	movs	r2, #240	; 0xf0
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	4b7f      	ldr	r3, [pc, #508]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80014f6:	430a      	orrs	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	d100      	bne.n	8001506 <HAL_RCC_ClockConfig+0x8a>
 8001504:	e089      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800150e:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d120      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e1      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001526:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	049b      	lsls	r3, r3, #18
 800152e:	4013      	ands	r3, r2
 8001530:	d114      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0d5      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d106      	bne.n	800154c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800153e:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2204      	movs	r2, #4
 8001544:	4013      	ands	r3, r2
 8001546:	d109      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0ca      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0c2      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2203      	movs	r2, #3
 8001562:	4393      	bics	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff f9dc 	bl	800092c <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d111      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	e009      	b.n	8001596 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001582:	f7ff f9d3 	bl	800092c <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x274>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0a5      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001596:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	220c      	movs	r2, #12
 800159c:	4013      	ands	r3, r2
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d1ef      	bne.n	8001582 <HAL_RCC_ClockConfig+0x106>
 80015a2:	e03a      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d111      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ae:	f7ff f9bd 	bl	800092c <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a4d      	ldr	r2, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e08f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c2:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	220c      	movs	r2, #12
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d1ef      	bne.n	80015ae <HAL_RCC_ClockConfig+0x132>
 80015ce:	e024      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d11b      	bne.n	8001610 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015da:	f7ff f9a7 	bl	800092c <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a42      	ldr	r2, [pc, #264]	; (80016f0 <HAL_RCC_ClockConfig+0x274>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e079      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	220c      	movs	r2, #12
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d1ef      	bne.n	80015da <HAL_RCC_ClockConfig+0x15e>
 80015fa:	e00e      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff f996 	bl	800092c <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <HAL_RCC_ClockConfig+0x274>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e068      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	220c      	movs	r2, #12
 8001616:	4013      	ands	r3, r2
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2201      	movs	r2, #1
 8001620:	4013      	ands	r3, r2
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d21e      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800163a:	f7ff f977 	bl	800092c <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	e009      	b.n	8001658 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff f972 	bl	800092c <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <HAL_RCC_ClockConfig+0x274>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e044      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_ClockConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2201      	movs	r2, #1
 800165e:	4013      	ands	r3, r2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d1ee      	bne.n	8001644 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <HAL_RCC_ClockConfig+0x27c>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	4013      	ands	r3, r2
 800168c:	d00a      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_RCC_ClockConfig+0x280>)
 8001694:	4013      	ands	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	00da      	lsls	r2, r3, #3
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a4:	f000 f832 	bl	800170c <HAL_RCC_GetSysClockFreq>
 80016a8:	0001      	movs	r1, r0
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	220f      	movs	r2, #15
 80016b2:	4013      	ands	r3, r2
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_RCC_ClockConfig+0x284>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	000a      	movs	r2, r1
 80016ba:	40da      	lsrs	r2, r3
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_RCC_ClockConfig+0x288>)
 80016be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_RCC_ClockConfig+0x28c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	250b      	movs	r5, #11
 80016c6:	197c      	adds	r4, r7, r5
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff f8e9 	bl	80008a0 <HAL_InitTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80016d2:	197b      	adds	r3, r7, r5
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	e000      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b004      	add	sp, #16
 80016e8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40022000 	.word	0x40022000
 80016f0:	00001388 	.word	0x00001388
 80016f4:	40021000 	.word	0x40021000
 80016f8:	fffff8ff 	.word	0xfffff8ff
 80016fc:	ffffc7ff 	.word	0xffffc7ff
 8001700:	0800246c 	.word	0x0800246c
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001712:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <HAL_RCC_GetSysClockFreq+0x138>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800171a:	230c      	movs	r3, #12
 800171c:	4013      	ands	r3, r2
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d014      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x40>
 8001722:	d900      	bls.n	8001726 <HAL_RCC_GetSysClockFreq+0x1a>
 8001724:	e07b      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x112>
 8001726:	2b04      	cmp	r3, #4
 8001728:	d002      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x24>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d00b      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x3a>
 800172e:	e076      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001730:	4b44      	ldr	r3, [pc, #272]	; (8001844 <HAL_RCC_GetSysClockFreq+0x138>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2210      	movs	r2, #16
 8001736:	4013      	ands	r3, r2
 8001738:	d002      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_RCC_GetSysClockFreq+0x13c>)
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800173e:	e07c      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_GetSysClockFreq+0x140>)
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001744:	e079      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_RCC_GetSysClockFreq+0x144>)
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800174a:	e076      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	0c9a      	lsrs	r2, r3, #18
 8001750:	230f      	movs	r3, #15
 8001752:	401a      	ands	r2, r3
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_GetSysClockFreq+0x148>)
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	0d9a      	lsrs	r2, r3, #22
 800175e:	2303      	movs	r3, #3
 8001760:	4013      	ands	r3, r2
 8001762:	3301      	adds	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_RCC_GetSysClockFreq+0x138>)
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	4013      	ands	r3, r2
 8001770:	d01a      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	4a35      	ldr	r2, [pc, #212]	; (8001850 <HAL_RCC_GetSysClockFreq+0x144>)
 800177c:	2300      	movs	r3, #0
 800177e:	69b8      	ldr	r0, [r7, #24]
 8001780:	69f9      	ldr	r1, [r7, #28]
 8001782:	f7fe fd6d 	bl	8000260 <__aeabi_lmul>
 8001786:	0002      	movs	r2, r0
 8001788:	000b      	movs	r3, r1
 800178a:	0010      	movs	r0, r2
 800178c:	0019      	movs	r1, r3
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f7fe fd41 	bl	8000220 <__aeabi_uldivmod>
 800179e:	0002      	movs	r2, r0
 80017a0:	000b      	movs	r3, r1
 80017a2:	0013      	movs	r3, r2
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
 80017a6:	e037      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_RCC_GetSysClockFreq+0x138>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2210      	movs	r2, #16
 80017ae:	4013      	ands	r3, r2
 80017b0:	d01a      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4a23      	ldr	r2, [pc, #140]	; (8001848 <HAL_RCC_GetSysClockFreq+0x13c>)
 80017bc:	2300      	movs	r3, #0
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	f7fe fd4d 	bl	8000260 <__aeabi_lmul>
 80017c6:	0002      	movs	r2, r0
 80017c8:	000b      	movs	r3, r1
 80017ca:	0010      	movs	r0, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f7fe fd21 	bl	8000220 <__aeabi_uldivmod>
 80017de:	0002      	movs	r2, r0
 80017e0:	000b      	movs	r3, r1
 80017e2:	0013      	movs	r3, r2
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
 80017e6:	e017      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	0018      	movs	r0, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	0019      	movs	r1, r3
 80017f0:	4a16      	ldr	r2, [pc, #88]	; (800184c <HAL_RCC_GetSysClockFreq+0x140>)
 80017f2:	2300      	movs	r3, #0
 80017f4:	f7fe fd34 	bl	8000260 <__aeabi_lmul>
 80017f8:	0002      	movs	r2, r0
 80017fa:	000b      	movs	r3, r1
 80017fc:	0010      	movs	r0, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	001c      	movs	r4, r3
 8001804:	2300      	movs	r3, #0
 8001806:	001d      	movs	r5, r3
 8001808:	0022      	movs	r2, r4
 800180a:	002b      	movs	r3, r5
 800180c:	f7fe fd08 	bl	8000220 <__aeabi_uldivmod>
 8001810:	0002      	movs	r2, r0
 8001812:	000b      	movs	r3, r1
 8001814:	0013      	movs	r3, r2
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800181c:	e00d      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_GetSysClockFreq+0x138>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	0b5b      	lsrs	r3, r3, #13
 8001824:	2207      	movs	r2, #7
 8001826:	4013      	ands	r3, r2
 8001828:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	3301      	adds	r3, #1
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0212      	lsls	r2, r2, #8
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001838:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b00e      	add	sp, #56	; 0x38
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	003d0900 	.word	0x003d0900
 800184c:	00f42400 	.word	0x00f42400
 8001850:	007a1200 	.word	0x007a1200
 8001854:	08002484 	.word	0x08002484

08001858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <HAL_RCC_GetHCLKFreq+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	20000000 	.word	0x20000000

0800186c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001870:	f7ff fff2 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 8001874:	0001      	movs	r1, r0
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	2207      	movs	r2, #7
 800187e:	4013      	ands	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	40d9      	lsrs	r1, r3
 8001886:	000b      	movs	r3, r1
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40021000 	.word	0x40021000
 8001894:	0800247c 	.word	0x0800247c

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800189c:	f7ff ffdc 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 80018a0:	0001      	movs	r1, r0
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	0adb      	lsrs	r3, r3, #11
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	40d9      	lsrs	r1, r3
 80018b2:	000b      	movs	r3, r1
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000
 80018c0:	0800247c 	.word	0x0800247c

080018c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80018cc:	2017      	movs	r0, #23
 80018ce:	183b      	adds	r3, r7, r0
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2220      	movs	r2, #32
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80018de:	e0c2      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e0:	4b81      	ldr	r3, [pc, #516]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80018e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	4013      	ands	r3, r2
 80018ea:	d109      	bne.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	4b7e      	ldr	r3, [pc, #504]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80018ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f0:	4b7d      	ldr	r3, [pc, #500]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0549      	lsls	r1, r1, #21
 80018f6:	430a      	orrs	r2, r1
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	4b7a      	ldr	r3, [pc, #488]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4013      	ands	r3, r2
 800190a:	d11a      	bne.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190c:	4b77      	ldr	r3, [pc, #476]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b76      	ldr	r3, [pc, #472]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	0049      	lsls	r1, r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff f807 	bl	800092c <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	e008      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001924:	f7ff f802 	bl	800092c <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0d4      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d0f0      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001942:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	039b      	lsls	r3, r3, #14
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	039b      	lsls	r3, r3, #14
 8001956:	4013      	ands	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	429a      	cmp	r2, r3
 800195c:	d013      	beq.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	401a      	ands	r2, r3
 8001968:	23c0      	movs	r3, #192	; 0xc0
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	429a      	cmp	r2, r3
 800196e:	d10a      	bne.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001970:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	401a      	ands	r2, r3
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	029b      	lsls	r3, r3, #10
 800197e:	429a      	cmp	r2, r3
 8001980:	d101      	bne.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0ac      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800198a:	23c0      	movs	r3, #192	; 0xc0
 800198c:	029b      	lsls	r3, r3, #10
 800198e:	4013      	ands	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d03b      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	029b      	lsls	r3, r3, #10
 80019a0:	4013      	ands	r3, r2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d033      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2220      	movs	r2, #32
 80019ae:	4013      	ands	r3, r2
 80019b0:	d02e      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80019b2:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b6:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019bc:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c0:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	0309      	lsls	r1, r1, #12
 80019c6:	430a      	orrs	r2, r1
 80019c8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ce:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019d0:	4948      	ldr	r1, [pc, #288]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80019d6:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	d014      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7fe ffa1 	bl	800092c <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019ee:	e009      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7fe ff9c 	bl	800092c <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e06d      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d0ef      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	029b      	lsls	r3, r3, #10
 8001a18:	401a      	ands	r2, r3
 8001a1a:	23c0      	movs	r3, #192	; 0xc0
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a35      	ldr	r2, [pc, #212]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	23c0      	movs	r3, #192	; 0xc0
 8001a32:	039b      	lsls	r3, r3, #14
 8001a34:	401a      	ands	r2, r3
 8001a36:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a3e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	23c0      	movs	r3, #192	; 0xc0
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	401a      	ands	r2, r3
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a50:	2317      	movs	r3, #23
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a60:	4927      	ldr	r1, [pc, #156]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	220c      	movs	r2, #12
 8001a76:	4393      	bics	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d009      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001abc:	430a      	orrs	r2, r1
 8001abe:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d009      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b006      	add	sp, #24
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
 8001af0:	fffcffff 	.word	0xfffcffff
 8001af4:	fff7ffff 	.word	0xfff7ffff
 8001af8:	00001388 	.word	0x00001388
 8001afc:	ffcfffff 	.word	0xffcfffff
 8001b00:	efffffff 	.word	0xefffffff
 8001b04:	fffff3ff 	.word	0xfffff3ff
 8001b08:	ffffcfff 	.word	0xffffcfff
 8001b0c:	fff3ffff 	.word	0xfff3ffff

08001b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e044      	b.n	8001bac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2274      	movs	r2, #116	; 0x74
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe fdcd 	bl	80006d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2224      	movs	r2, #36	; 0x24
 8001b3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 f830 	bl	8001bb8 <UART_SetConfig>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e024      	b.n	8001bac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fa85 	bl	800207c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <HAL_UART_Init+0xa4>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	212a      	movs	r1, #42	; 0x2a
 8001b8e:	438a      	bics	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 fb1d 	bl	80021e4 <UART_CheckIdleState>
 8001baa:	0003      	movs	r3, r0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	ffffb7ff 	.word	0xffffb7ff

08001bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bc0:	231a      	movs	r3, #26
 8001bc2:	2218      	movs	r2, #24
 8001bc4:	4694      	mov	ip, r2
 8001bc6:	44bc      	add	ip, r7
 8001bc8:	4463      	add	r3, ip
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4abc      	ldr	r2, [pc, #752]	; (8001ee0 <UART_SetConfig+0x328>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4ab8      	ldr	r2, [pc, #736]	; (8001ee4 <UART_SetConfig+0x32c>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4ab2      	ldr	r2, [pc, #712]	; (8001ee8 <UART_SetConfig+0x330>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4aad      	ldr	r2, [pc, #692]	; (8001eec <UART_SetConfig+0x334>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c40:	430a      	orrs	r2, r1
 8001c42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4aa9      	ldr	r2, [pc, #676]	; (8001ef0 <UART_SetConfig+0x338>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d136      	bne.n	8001cbc <UART_SetConfig+0x104>
 8001c4e:	4ba9      	ldr	r3, [pc, #676]	; (8001ef4 <UART_SetConfig+0x33c>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	220c      	movs	r2, #12
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d020      	beq.n	8001c9c <UART_SetConfig+0xe4>
 8001c5a:	d827      	bhi.n	8001cac <UART_SetConfig+0xf4>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d00d      	beq.n	8001c7c <UART_SetConfig+0xc4>
 8001c60:	d824      	bhi.n	8001cac <UART_SetConfig+0xf4>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <UART_SetConfig+0xb4>
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d010      	beq.n	8001c8c <UART_SetConfig+0xd4>
 8001c6a:	e01f      	b.n	8001cac <UART_SetConfig+0xf4>
 8001c6c:	231b      	movs	r3, #27
 8001c6e:	2218      	movs	r2, #24
 8001c70:	4694      	mov	ip, r2
 8001c72:	44bc      	add	ip, r7
 8001c74:	4463      	add	r3, ip
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e06f      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001c7c:	231b      	movs	r3, #27
 8001c7e:	2218      	movs	r2, #24
 8001c80:	4694      	mov	ip, r2
 8001c82:	44bc      	add	ip, r7
 8001c84:	4463      	add	r3, ip
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e067      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001c8c:	231b      	movs	r3, #27
 8001c8e:	2218      	movs	r2, #24
 8001c90:	4694      	mov	ip, r2
 8001c92:	44bc      	add	ip, r7
 8001c94:	4463      	add	r3, ip
 8001c96:	2204      	movs	r2, #4
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e05f      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001c9c:	231b      	movs	r3, #27
 8001c9e:	2218      	movs	r2, #24
 8001ca0:	4694      	mov	ip, r2
 8001ca2:	44bc      	add	ip, r7
 8001ca4:	4463      	add	r3, ip
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e057      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001cac:	231b      	movs	r3, #27
 8001cae:	2218      	movs	r2, #24
 8001cb0:	4694      	mov	ip, r2
 8001cb2:	44bc      	add	ip, r7
 8001cb4:	4463      	add	r3, ip
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e04f      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a89      	ldr	r2, [pc, #548]	; (8001ee8 <UART_SetConfig+0x330>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d143      	bne.n	8001d4e <UART_SetConfig+0x196>
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <UART_SetConfig+0x33c>)
 8001cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cca:	23c0      	movs	r3, #192	; 0xc0
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4013      	ands	r3, r2
 8001cd0:	22c0      	movs	r2, #192	; 0xc0
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d02a      	beq.n	8001d2e <UART_SetConfig+0x176>
 8001cd8:	22c0      	movs	r2, #192	; 0xc0
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d82e      	bhi.n	8001d3e <UART_SetConfig+0x186>
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d012      	beq.n	8001d0e <UART_SetConfig+0x156>
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d826      	bhi.n	8001d3e <UART_SetConfig+0x186>
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <UART_SetConfig+0x146>
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	00d2      	lsls	r2, r2, #3
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d010      	beq.n	8001d1e <UART_SetConfig+0x166>
 8001cfc:	e01f      	b.n	8001d3e <UART_SetConfig+0x186>
 8001cfe:	231b      	movs	r3, #27
 8001d00:	2218      	movs	r2, #24
 8001d02:	4694      	mov	ip, r2
 8001d04:	44bc      	add	ip, r7
 8001d06:	4463      	add	r3, ip
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e026      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001d0e:	231b      	movs	r3, #27
 8001d10:	2218      	movs	r2, #24
 8001d12:	4694      	mov	ip, r2
 8001d14:	44bc      	add	ip, r7
 8001d16:	4463      	add	r3, ip
 8001d18:	2202      	movs	r2, #2
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e01e      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001d1e:	231b      	movs	r3, #27
 8001d20:	2218      	movs	r2, #24
 8001d22:	4694      	mov	ip, r2
 8001d24:	44bc      	add	ip, r7
 8001d26:	4463      	add	r3, ip
 8001d28:	2204      	movs	r2, #4
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e016      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001d2e:	231b      	movs	r3, #27
 8001d30:	2218      	movs	r2, #24
 8001d32:	4694      	mov	ip, r2
 8001d34:	44bc      	add	ip, r7
 8001d36:	4463      	add	r3, ip
 8001d38:	2208      	movs	r2, #8
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	e00e      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001d3e:	231b      	movs	r3, #27
 8001d40:	2218      	movs	r2, #24
 8001d42:	4694      	mov	ip, r2
 8001d44:	44bc      	add	ip, r7
 8001d46:	4463      	add	r3, ip
 8001d48:	2210      	movs	r2, #16
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e006      	b.n	8001d5c <UART_SetConfig+0x1a4>
 8001d4e:	231b      	movs	r3, #27
 8001d50:	2218      	movs	r2, #24
 8001d52:	4694      	mov	ip, r2
 8001d54:	44bc      	add	ip, r7
 8001d56:	4463      	add	r3, ip
 8001d58:	2210      	movs	r2, #16
 8001d5a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a61      	ldr	r2, [pc, #388]	; (8001ee8 <UART_SetConfig+0x330>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d000      	beq.n	8001d68 <UART_SetConfig+0x1b0>
 8001d66:	e088      	b.n	8001e7a <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001d68:	231b      	movs	r3, #27
 8001d6a:	2218      	movs	r2, #24
 8001d6c:	4694      	mov	ip, r2
 8001d6e:	44bc      	add	ip, r7
 8001d70:	4463      	add	r3, ip
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d01d      	beq.n	8001db4 <UART_SetConfig+0x1fc>
 8001d78:	dc20      	bgt.n	8001dbc <UART_SetConfig+0x204>
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d015      	beq.n	8001daa <UART_SetConfig+0x1f2>
 8001d7e:	dc1d      	bgt.n	8001dbc <UART_SetConfig+0x204>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <UART_SetConfig+0x1d2>
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d005      	beq.n	8001d94 <UART_SetConfig+0x1dc>
 8001d88:	e018      	b.n	8001dbc <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d8a:	f7ff fd6f 	bl	800186c <HAL_RCC_GetPCLK1Freq>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001d92:	e01d      	b.n	8001dd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d94:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <UART_SetConfig+0x33c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d002      	beq.n	8001da4 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001d9e:	4b56      	ldr	r3, [pc, #344]	; (8001ef8 <UART_SetConfig+0x340>)
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001da2:	e015      	b.n	8001dd0 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8001da4:	4b55      	ldr	r3, [pc, #340]	; (8001efc <UART_SetConfig+0x344>)
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001da8:	e012      	b.n	8001dd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001daa:	f7ff fcaf 	bl	800170c <HAL_RCC_GetSysClockFreq>
 8001dae:	0003      	movs	r3, r0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001db2:	e00d      	b.n	8001dd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001dba:	e009      	b.n	8001dd0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001dc0:	231a      	movs	r3, #26
 8001dc2:	2218      	movs	r2, #24
 8001dc4:	4694      	mov	ip, r2
 8001dc6:	44bc      	add	ip, r7
 8001dc8:	4463      	add	r3, ip
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
        break;
 8001dce:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d100      	bne.n	8001dd8 <UART_SetConfig+0x220>
 8001dd6:	e139      	b.n	800204c <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	0013      	movs	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	189b      	adds	r3, r3, r2
 8001de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d305      	bcc.n	8001df4 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d907      	bls.n	8001e04 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8001df4:	231a      	movs	r3, #26
 8001df6:	2218      	movs	r2, #24
 8001df8:	4694      	mov	ip, r2
 8001dfa:	44bc      	add	ip, r7
 8001dfc:	4463      	add	r3, ip
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e123      	b.n	800204c <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	6939      	ldr	r1, [r7, #16]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	000b      	movs	r3, r1
 8001e12:	0e1b      	lsrs	r3, r3, #24
 8001e14:	0010      	movs	r0, r2
 8001e16:	0205      	lsls	r5, r0, #8
 8001e18:	431d      	orrs	r5, r3
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	021c      	lsls	r4, r3, #8
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68b8      	ldr	r0, [r7, #8]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	1900      	adds	r0, r0, r4
 8001e30:	4169      	adcs	r1, r5
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f7fe f9ee 	bl	8000220 <__aeabi_uldivmod>
 8001e44:	0002      	movs	r2, r0
 8001e46:	000b      	movs	r3, r1
 8001e48:	0013      	movs	r3, r2
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e4e:	23c0      	movs	r3, #192	; 0xc0
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d309      	bcc.n	8001e6a <UART_SetConfig+0x2b2>
 8001e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	035b      	lsls	r3, r3, #13
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d204      	bcs.n	8001e6a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	e0f0      	b.n	800204c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8001e6a:	231a      	movs	r3, #26
 8001e6c:	2218      	movs	r2, #24
 8001e6e:	4694      	mov	ip, r2
 8001e70:	44bc      	add	ip, r7
 8001e72:	4463      	add	r3, ip
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e0e8      	b.n	800204c <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d000      	beq.n	8001e88 <UART_SetConfig+0x2d0>
 8001e86:	e087      	b.n	8001f98 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8001e88:	231b      	movs	r3, #27
 8001e8a:	2218      	movs	r2, #24
 8001e8c:	4694      	mov	ip, r2
 8001e8e:	44bc      	add	ip, r7
 8001e90:	4463      	add	r3, ip
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d835      	bhi.n	8001f04 <UART_SetConfig+0x34c>
 8001e98:	009a      	lsls	r2, r3, #2
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <UART_SetConfig+0x348>)
 8001e9c:	18d3      	adds	r3, r2, r3
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ea2:	f7ff fce3 	bl	800186c <HAL_RCC_GetPCLK1Freq>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001eaa:	e035      	b.n	8001f18 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001eac:	f7ff fcf4 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001eb4:	e030      	b.n	8001f18 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <UART_SetConfig+0x33c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2210      	movs	r2, #16
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d002      	beq.n	8001ec6 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <UART_SetConfig+0x340>)
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001ec4:	e028      	b.n	8001f18 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <UART_SetConfig+0x344>)
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001eca:	e025      	b.n	8001f18 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ecc:	f7ff fc1e 	bl	800170c <HAL_RCC_GetSysClockFreq>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ed4:	e020      	b.n	8001f18 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001edc:	e01c      	b.n	8001f18 <UART_SetConfig+0x360>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	efff69f3 	.word	0xefff69f3
 8001ee4:	ffffcfff 	.word	0xffffcfff
 8001ee8:	40004800 	.word	0x40004800
 8001eec:	fffff4ff 	.word	0xfffff4ff
 8001ef0:	40004400 	.word	0x40004400
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	003d0900 	.word	0x003d0900
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	08002490 	.word	0x08002490
      default:
        pclk = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001f08:	231a      	movs	r3, #26
 8001f0a:	2218      	movs	r2, #24
 8001f0c:	4694      	mov	ip, r2
 8001f0e:	44bc      	add	ip, r7
 8001f10:	4463      	add	r3, ip
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
        break;
 8001f16:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d100      	bne.n	8001f20 <UART_SetConfig+0x368>
 8001f1e:	e095      	b.n	800204c <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	005a      	lsls	r2, r3, #1
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	18d2      	adds	r2, r2, r3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	0019      	movs	r1, r3
 8001f32:	0010      	movs	r0, r2
 8001f34:	f7fe f8e8 	bl	8000108 <__udivsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d921      	bls.n	8001f88 <UART_SetConfig+0x3d0>
 8001f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d21c      	bcs.n	8001f88 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	200e      	movs	r0, #14
 8001f54:	2418      	movs	r4, #24
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	181b      	adds	r3, r3, r0
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2207      	movs	r2, #7
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b299      	uxth	r1, r3
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	181b      	adds	r3, r3, r0
 8001f70:	193a      	adds	r2, r7, r4
 8001f72:	1812      	adds	r2, r2, r0
 8001f74:	8812      	ldrh	r2, [r2, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	193a      	adds	r2, r7, r4
 8001f80:	1812      	adds	r2, r2, r0
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	e061      	b.n	800204c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8001f88:	231a      	movs	r3, #26
 8001f8a:	2218      	movs	r2, #24
 8001f8c:	4694      	mov	ip, r2
 8001f8e:	44bc      	add	ip, r7
 8001f90:	4463      	add	r3, ip
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e059      	b.n	800204c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f98:	231b      	movs	r3, #27
 8001f9a:	2218      	movs	r2, #24
 8001f9c:	4694      	mov	ip, r2
 8001f9e:	44bc      	add	ip, r7
 8001fa0:	4463      	add	r3, ip
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d822      	bhi.n	8001fee <UART_SetConfig+0x436>
 8001fa8:	009a      	lsls	r2, r3, #2
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <UART_SetConfig+0x4b4>)
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fb2:	f7ff fc5b 	bl	800186c <HAL_RCC_GetPCLK1Freq>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fba:	e022      	b.n	8002002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001fbc:	f7ff fc6c 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fc4:	e01d      	b.n	8002002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <UART_SetConfig+0x4b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2210      	movs	r2, #16
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d002      	beq.n	8001fd6 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <UART_SetConfig+0x4bc>)
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001fd4:	e015      	b.n	8002002 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <UART_SetConfig+0x4c0>)
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fda:	e012      	b.n	8002002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fdc:	f7ff fb96 	bl	800170c <HAL_RCC_GetSysClockFreq>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fe4:	e00d      	b.n	8002002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fec:	e009      	b.n	8002002 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001ff2:	231a      	movs	r3, #26
 8001ff4:	2218      	movs	r2, #24
 8001ff6:	4694      	mov	ip, r2
 8001ff8:	44bc      	add	ip, r7
 8001ffa:	4463      	add	r3, ip
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
        break;
 8002000:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d021      	beq.n	800204c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	085a      	lsrs	r2, r3, #1
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	18d2      	adds	r2, r2, r3
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0019      	movs	r1, r3
 8002018:	0010      	movs	r0, r2
 800201a:	f7fe f875 	bl	8000108 <__udivsi3>
 800201e:	0003      	movs	r3, r0
 8002020:	b29b      	uxth	r3, r3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	2b0f      	cmp	r3, #15
 8002028:	d909      	bls.n	800203e <UART_SetConfig+0x486>
 800202a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	429a      	cmp	r2, r3
 8002032:	d204      	bcs.n	800203e <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	e006      	b.n	800204c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800203e:	231a      	movs	r3, #26
 8002040:	2218      	movs	r2, #24
 8002042:	4694      	mov	ip, r2
 8002044:	44bc      	add	ip, r7
 8002046:	4463      	add	r3, ip
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2200      	movs	r2, #0
 8002050:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	2200      	movs	r2, #0
 8002056:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002058:	231a      	movs	r3, #26
 800205a:	2218      	movs	r2, #24
 800205c:	4694      	mov	ip, r2
 800205e:	44bc      	add	ip, r7
 8002060:	4463      	add	r3, ip
 8002062:	781b      	ldrb	r3, [r3, #0]
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b00e      	add	sp, #56	; 0x38
 800206a:	bdb0      	pop	{r4, r5, r7, pc}
 800206c:	080024b4 	.word	0x080024b4
 8002070:	40021000 	.word	0x40021000
 8002074:	003d0900 	.word	0x003d0900
 8002078:	00f42400 	.word	0x00f42400

0800207c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d00b      	beq.n	80020a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a4a      	ldr	r2, [pc, #296]	; (80021c0 <UART_AdvFeatureConfig+0x144>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d00b      	beq.n	80020c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <UART_AdvFeatureConfig+0x148>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2204      	movs	r2, #4
 80020ce:	4013      	ands	r3, r2
 80020d0:	d00b      	beq.n	80020ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <UART_AdvFeatureConfig+0x14c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	2208      	movs	r2, #8
 80020f0:	4013      	ands	r3, r2
 80020f2:	d00b      	beq.n	800210c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a34      	ldr	r2, [pc, #208]	; (80021cc <UART_AdvFeatureConfig+0x150>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2210      	movs	r2, #16
 8002112:	4013      	ands	r3, r2
 8002114:	d00b      	beq.n	800212e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <UART_AdvFeatureConfig+0x154>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2220      	movs	r2, #32
 8002134:	4013      	ands	r3, r2
 8002136:	d00b      	beq.n	8002150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <UART_AdvFeatureConfig+0x158>)
 8002140:	4013      	ands	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	4013      	ands	r3, r2
 8002158:	d01d      	beq.n	8002196 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <UART_AdvFeatureConfig+0x15c>)
 8002162:	4013      	ands	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	035b      	lsls	r3, r3, #13
 800217a:	429a      	cmp	r2, r3
 800217c:	d10b      	bne.n	8002196 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a15      	ldr	r2, [pc, #84]	; (80021dc <UART_AdvFeatureConfig+0x160>)
 8002186:	4013      	ands	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	4013      	ands	r3, r2
 800219e:	d00b      	beq.n	80021b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <UART_AdvFeatureConfig+0x164>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
  }
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	fffdffff 	.word	0xfffdffff
 80021c4:	fffeffff 	.word	0xfffeffff
 80021c8:	fffbffff 	.word	0xfffbffff
 80021cc:	ffff7fff 	.word	0xffff7fff
 80021d0:	ffffefff 	.word	0xffffefff
 80021d4:	ffffdfff 	.word	0xffffdfff
 80021d8:	ffefffff 	.word	0xffefffff
 80021dc:	ff9fffff 	.word	0xff9fffff
 80021e0:	fff7ffff 	.word	0xfff7ffff

080021e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	2100      	movs	r1, #0
 80021f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021f4:	f7fe fb9a 	bl	800092c <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2208      	movs	r2, #8
 8002204:	4013      	ands	r3, r2
 8002206:	2b08      	cmp	r3, #8
 8002208:	d10c      	bne.n	8002224 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	0391      	lsls	r1, r2, #14
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <UART_CheckIdleState+0x8c>)
 8002214:	9200      	str	r2, [sp, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	f000 f82c 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d001      	beq.n	8002224 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e021      	b.n	8002268 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2204      	movs	r2, #4
 800222c:	4013      	ands	r3, r2
 800222e:	2b04      	cmp	r3, #4
 8002230:	d10c      	bne.n	800224c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	03d1      	lsls	r1, r2, #15
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <UART_CheckIdleState+0x8c>)
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	f000 f818 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d001      	beq.n	800224c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e00d      	b.n	8002268 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2274      	movs	r2, #116	; 0x74
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b004      	add	sp, #16
 800226e:	bd80      	pop	{r7, pc}
 8002270:	01ffffff 	.word	0x01ffffff

08002274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b094      	sub	sp, #80	; 0x50
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002284:	e0a3      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002288:	3301      	adds	r3, #1
 800228a:	d100      	bne.n	800228e <UART_WaitOnFlagUntilTimeout+0x1a>
 800228c:	e09f      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228e:	f7fe fb4d 	bl	800092c <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800229e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d13d      	bne.n	8002320 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a4:	f3ef 8310 	mrs	r3, PRIMASK
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022ac:	647b      	str	r3, [r7, #68]	; 0x44
 80022ae:	2301      	movs	r3, #1
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	f383 8810 	msr	PRIMASK, r3
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	494c      	ldr	r1, [pc, #304]	; (80023f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	f383 8810 	msr	PRIMASK, r3
}
 80022d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d6:	f3ef 8310 	mrs	r3, PRIMASK
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
 80022e0:	2301      	movs	r3, #1
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	f383 8810 	msr	PRIMASK, r3
}
 8002306:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2274      	movs	r2, #116	; 0x74
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e067      	b.n	80023f0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2204      	movs	r2, #4
 8002328:	4013      	ands	r3, r2
 800232a:	d050      	beq.n	80023ce <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	401a      	ands	r2, r3
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	429a      	cmp	r2, r3
 800233e:	d146      	bne.n	80023ce <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800234a:	f3ef 8310 	mrs	r3, PRIMASK
 800234e:	613b      	str	r3, [r7, #16]
  return(result);
 8002350:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002354:	2301      	movs	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f383 8810 	msr	PRIMASK, r3
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4923      	ldr	r1, [pc, #140]	; (80023f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800236c:	400a      	ands	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002372:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f383 8810 	msr	PRIMASK, r3
}
 800237a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800237c:	f3ef 8310 	mrs	r3, PRIMASK
 8002380:	61fb      	str	r3, [r7, #28]
  return(result);
 8002382:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002384:	64bb      	str	r3, [r7, #72]	; 0x48
 8002386:	2301      	movs	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f383 8810 	msr	PRIMASK, r3
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	438a      	bics	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	f383 8810 	msr	PRIMASK, r3
}
 80023ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	2120      	movs	r1, #32
 80023c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2274      	movs	r2, #116	; 0x74
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e010      	b.n	80023f0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	4013      	ands	r3, r2
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	425a      	negs	r2, r3
 80023de:	4153      	adcs	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	001a      	movs	r2, r3
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d100      	bne.n	80023ee <UART_WaitOnFlagUntilTimeout+0x17a>
 80023ec:	e74b      	b.n	8002286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b014      	add	sp, #80	; 0x50
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	fffffe5f 	.word	0xfffffe5f

080023fc <__libc_init_array>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	2600      	movs	r6, #0
 8002400:	4d0c      	ldr	r5, [pc, #48]	; (8002434 <__libc_init_array+0x38>)
 8002402:	4c0d      	ldr	r4, [pc, #52]	; (8002438 <__libc_init_array+0x3c>)
 8002404:	1b64      	subs	r4, r4, r5
 8002406:	10a4      	asrs	r4, r4, #2
 8002408:	42a6      	cmp	r6, r4
 800240a:	d109      	bne.n	8002420 <__libc_init_array+0x24>
 800240c:	2600      	movs	r6, #0
 800240e:	f000 f821 	bl	8002454 <_init>
 8002412:	4d0a      	ldr	r5, [pc, #40]	; (800243c <__libc_init_array+0x40>)
 8002414:	4c0a      	ldr	r4, [pc, #40]	; (8002440 <__libc_init_array+0x44>)
 8002416:	1b64      	subs	r4, r4, r5
 8002418:	10a4      	asrs	r4, r4, #2
 800241a:	42a6      	cmp	r6, r4
 800241c:	d105      	bne.n	800242a <__libc_init_array+0x2e>
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	00b3      	lsls	r3, r6, #2
 8002422:	58eb      	ldr	r3, [r5, r3]
 8002424:	4798      	blx	r3
 8002426:	3601      	adds	r6, #1
 8002428:	e7ee      	b.n	8002408 <__libc_init_array+0xc>
 800242a:	00b3      	lsls	r3, r6, #2
 800242c:	58eb      	ldr	r3, [r5, r3]
 800242e:	4798      	blx	r3
 8002430:	3601      	adds	r6, #1
 8002432:	e7f2      	b.n	800241a <__libc_init_array+0x1e>
 8002434:	080024e0 	.word	0x080024e0
 8002438:	080024e0 	.word	0x080024e0
 800243c:	080024e0 	.word	0x080024e0
 8002440:	080024e4 	.word	0x080024e4

08002444 <memset>:
 8002444:	0003      	movs	r3, r0
 8002446:	1882      	adds	r2, r0, r2
 8002448:	4293      	cmp	r3, r2
 800244a:	d100      	bne.n	800244e <memset+0xa>
 800244c:	4770      	bx	lr
 800244e:	7019      	strb	r1, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	e7f9      	b.n	8002448 <memset+0x4>

08002454 <_init>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245a:	bc08      	pop	{r3}
 800245c:	469e      	mov	lr, r3
 800245e:	4770      	bx	lr

08002460 <_fini>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr
