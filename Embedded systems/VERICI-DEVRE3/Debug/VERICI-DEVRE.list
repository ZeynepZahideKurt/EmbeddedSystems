
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007244  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d8  080075d8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e0  080075e0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080075e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001f4  080077dc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080077dc  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001589a  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e4  00000000  00000000  00035ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00038ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00039bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ec9  00000000  00000000  0003aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146b1  00000000  00000000  0004e961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007193c  00000000  00000000  00063012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d494e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  000d49a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080072ec 	.word	0x080072ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	080072ec 	.word	0x080072ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 fba0 	bl	8000c0c <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 fb9b 	bl	8000c0c <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__aeabi_fdiv>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	0245      	lsls	r5, r0, #9
 800064a:	b5c0      	push	{r6, r7, lr}
 800064c:	0047      	lsls	r7, r0, #1
 800064e:	1c0c      	adds	r4, r1, #0
 8000650:	0a6d      	lsrs	r5, r5, #9
 8000652:	0e3f      	lsrs	r7, r7, #24
 8000654:	0fc6      	lsrs	r6, r0, #31
 8000656:	2f00      	cmp	r7, #0
 8000658:	d066      	beq.n	8000728 <__aeabi_fdiv+0xe8>
 800065a:	2fff      	cmp	r7, #255	; 0xff
 800065c:	d06c      	beq.n	8000738 <__aeabi_fdiv+0xf8>
 800065e:	2300      	movs	r3, #0
 8000660:	00ea      	lsls	r2, r5, #3
 8000662:	2580      	movs	r5, #128	; 0x80
 8000664:	4699      	mov	r9, r3
 8000666:	469a      	mov	sl, r3
 8000668:	04ed      	lsls	r5, r5, #19
 800066a:	4315      	orrs	r5, r2
 800066c:	3f7f      	subs	r7, #127	; 0x7f
 800066e:	0260      	lsls	r0, r4, #9
 8000670:	0061      	lsls	r1, r4, #1
 8000672:	0a43      	lsrs	r3, r0, #9
 8000674:	4698      	mov	r8, r3
 8000676:	0e09      	lsrs	r1, r1, #24
 8000678:	0fe4      	lsrs	r4, r4, #31
 800067a:	2900      	cmp	r1, #0
 800067c:	d048      	beq.n	8000710 <__aeabi_fdiv+0xd0>
 800067e:	29ff      	cmp	r1, #255	; 0xff
 8000680:	d010      	beq.n	80006a4 <__aeabi_fdiv+0x64>
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	00d8      	lsls	r0, r3, #3
 8000686:	04d2      	lsls	r2, r2, #19
 8000688:	4302      	orrs	r2, r0
 800068a:	4690      	mov	r8, r2
 800068c:	2000      	movs	r0, #0
 800068e:	397f      	subs	r1, #127	; 0x7f
 8000690:	464a      	mov	r2, r9
 8000692:	0033      	movs	r3, r6
 8000694:	1a7f      	subs	r7, r7, r1
 8000696:	4302      	orrs	r2, r0
 8000698:	496c      	ldr	r1, [pc, #432]	; (800084c <__aeabi_fdiv+0x20c>)
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	588a      	ldr	r2, [r1, r2]
 800069e:	4063      	eors	r3, r4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4697      	mov	pc, r2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d16d      	bne.n	8000784 <__aeabi_fdiv+0x144>
 80006a8:	2002      	movs	r0, #2
 80006aa:	3fff      	subs	r7, #255	; 0xff
 80006ac:	e033      	b.n	8000716 <__aeabi_fdiv+0xd6>
 80006ae:	2300      	movs	r3, #0
 80006b0:	4698      	mov	r8, r3
 80006b2:	0026      	movs	r6, r4
 80006b4:	4645      	mov	r5, r8
 80006b6:	4682      	mov	sl, r0
 80006b8:	4653      	mov	r3, sl
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fdiv+0x80>
 80006be:	e07f      	b.n	80007c0 <__aeabi_fdiv+0x180>
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fdiv+0x86>
 80006c4:	e094      	b.n	80007f0 <__aeabi_fdiv+0x1b0>
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d017      	beq.n	80006fa <__aeabi_fdiv+0xba>
 80006ca:	0038      	movs	r0, r7
 80006cc:	307f      	adds	r0, #127	; 0x7f
 80006ce:	2800      	cmp	r0, #0
 80006d0:	dd5f      	ble.n	8000792 <__aeabi_fdiv+0x152>
 80006d2:	076b      	lsls	r3, r5, #29
 80006d4:	d004      	beq.n	80006e0 <__aeabi_fdiv+0xa0>
 80006d6:	230f      	movs	r3, #15
 80006d8:	402b      	ands	r3, r5
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d000      	beq.n	80006e0 <__aeabi_fdiv+0xa0>
 80006de:	3504      	adds	r5, #4
 80006e0:	012b      	lsls	r3, r5, #4
 80006e2:	d503      	bpl.n	80006ec <__aeabi_fdiv+0xac>
 80006e4:	0038      	movs	r0, r7
 80006e6:	4b5a      	ldr	r3, [pc, #360]	; (8000850 <__aeabi_fdiv+0x210>)
 80006e8:	3080      	adds	r0, #128	; 0x80
 80006ea:	401d      	ands	r5, r3
 80006ec:	28fe      	cmp	r0, #254	; 0xfe
 80006ee:	dc67      	bgt.n	80007c0 <__aeabi_fdiv+0x180>
 80006f0:	01ad      	lsls	r5, r5, #6
 80006f2:	0a6d      	lsrs	r5, r5, #9
 80006f4:	b2c0      	uxtb	r0, r0
 80006f6:	e002      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80006f8:	001e      	movs	r6, r3
 80006fa:	2000      	movs	r0, #0
 80006fc:	2500      	movs	r5, #0
 80006fe:	05c0      	lsls	r0, r0, #23
 8000700:	4328      	orrs	r0, r5
 8000702:	07f6      	lsls	r6, r6, #31
 8000704:	4330      	orrs	r0, r6
 8000706:	bce0      	pop	{r5, r6, r7}
 8000708:	46ba      	mov	sl, r7
 800070a:	46b1      	mov	r9, r6
 800070c:	46a8      	mov	r8, r5
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000710:	2b00      	cmp	r3, #0
 8000712:	d12b      	bne.n	800076c <__aeabi_fdiv+0x12c>
 8000714:	2001      	movs	r0, #1
 8000716:	464a      	mov	r2, r9
 8000718:	0033      	movs	r3, r6
 800071a:	494e      	ldr	r1, [pc, #312]	; (8000854 <__aeabi_fdiv+0x214>)
 800071c:	4302      	orrs	r2, r0
 800071e:	0092      	lsls	r2, r2, #2
 8000720:	588a      	ldr	r2, [r1, r2]
 8000722:	4063      	eors	r3, r4
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4697      	mov	pc, r2
 8000728:	2d00      	cmp	r5, #0
 800072a:	d113      	bne.n	8000754 <__aeabi_fdiv+0x114>
 800072c:	2304      	movs	r3, #4
 800072e:	4699      	mov	r9, r3
 8000730:	3b03      	subs	r3, #3
 8000732:	2700      	movs	r7, #0
 8000734:	469a      	mov	sl, r3
 8000736:	e79a      	b.n	800066e <__aeabi_fdiv+0x2e>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d105      	bne.n	8000748 <__aeabi_fdiv+0x108>
 800073c:	2308      	movs	r3, #8
 800073e:	4699      	mov	r9, r3
 8000740:	3b06      	subs	r3, #6
 8000742:	27ff      	movs	r7, #255	; 0xff
 8000744:	469a      	mov	sl, r3
 8000746:	e792      	b.n	800066e <__aeabi_fdiv+0x2e>
 8000748:	230c      	movs	r3, #12
 800074a:	4699      	mov	r9, r3
 800074c:	3b09      	subs	r3, #9
 800074e:	27ff      	movs	r7, #255	; 0xff
 8000750:	469a      	mov	sl, r3
 8000752:	e78c      	b.n	800066e <__aeabi_fdiv+0x2e>
 8000754:	0028      	movs	r0, r5
 8000756:	f000 fa3b 	bl	8000bd0 <__clzsi2>
 800075a:	2776      	movs	r7, #118	; 0x76
 800075c:	1f43      	subs	r3, r0, #5
 800075e:	409d      	lsls	r5, r3
 8000760:	2300      	movs	r3, #0
 8000762:	427f      	negs	r7, r7
 8000764:	4699      	mov	r9, r3
 8000766:	469a      	mov	sl, r3
 8000768:	1a3f      	subs	r7, r7, r0
 800076a:	e780      	b.n	800066e <__aeabi_fdiv+0x2e>
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fa2f 	bl	8000bd0 <__clzsi2>
 8000772:	4642      	mov	r2, r8
 8000774:	1f43      	subs	r3, r0, #5
 8000776:	2176      	movs	r1, #118	; 0x76
 8000778:	409a      	lsls	r2, r3
 800077a:	4249      	negs	r1, r1
 800077c:	1a09      	subs	r1, r1, r0
 800077e:	4690      	mov	r8, r2
 8000780:	2000      	movs	r0, #0
 8000782:	e785      	b.n	8000690 <__aeabi_fdiv+0x50>
 8000784:	21ff      	movs	r1, #255	; 0xff
 8000786:	2003      	movs	r0, #3
 8000788:	e782      	b.n	8000690 <__aeabi_fdiv+0x50>
 800078a:	001e      	movs	r6, r3
 800078c:	20ff      	movs	r0, #255	; 0xff
 800078e:	2500      	movs	r5, #0
 8000790:	e7b5      	b.n	80006fe <__aeabi_fdiv+0xbe>
 8000792:	2301      	movs	r3, #1
 8000794:	1a1b      	subs	r3, r3, r0
 8000796:	2b1b      	cmp	r3, #27
 8000798:	dcaf      	bgt.n	80006fa <__aeabi_fdiv+0xba>
 800079a:	379e      	adds	r7, #158	; 0x9e
 800079c:	0029      	movs	r1, r5
 800079e:	40bd      	lsls	r5, r7
 80007a0:	40d9      	lsrs	r1, r3
 80007a2:	1e6a      	subs	r2, r5, #1
 80007a4:	4195      	sbcs	r5, r2
 80007a6:	430d      	orrs	r5, r1
 80007a8:	076b      	lsls	r3, r5, #29
 80007aa:	d004      	beq.n	80007b6 <__aeabi_fdiv+0x176>
 80007ac:	230f      	movs	r3, #15
 80007ae:	402b      	ands	r3, r5
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0x176>
 80007b4:	3504      	adds	r5, #4
 80007b6:	016b      	lsls	r3, r5, #5
 80007b8:	d544      	bpl.n	8000844 <__aeabi_fdiv+0x204>
 80007ba:	2001      	movs	r0, #1
 80007bc:	2500      	movs	r5, #0
 80007be:	e79e      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	2500      	movs	r5, #0
 80007c4:	e79b      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007c6:	2580      	movs	r5, #128	; 0x80
 80007c8:	2600      	movs	r6, #0
 80007ca:	20ff      	movs	r0, #255	; 0xff
 80007cc:	03ed      	lsls	r5, r5, #15
 80007ce:	e796      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007d0:	2300      	movs	r3, #0
 80007d2:	4698      	mov	r8, r3
 80007d4:	2080      	movs	r0, #128	; 0x80
 80007d6:	03c0      	lsls	r0, r0, #15
 80007d8:	4205      	tst	r5, r0
 80007da:	d009      	beq.n	80007f0 <__aeabi_fdiv+0x1b0>
 80007dc:	4643      	mov	r3, r8
 80007de:	4203      	tst	r3, r0
 80007e0:	d106      	bne.n	80007f0 <__aeabi_fdiv+0x1b0>
 80007e2:	4645      	mov	r5, r8
 80007e4:	4305      	orrs	r5, r0
 80007e6:	026d      	lsls	r5, r5, #9
 80007e8:	0026      	movs	r6, r4
 80007ea:	20ff      	movs	r0, #255	; 0xff
 80007ec:	0a6d      	lsrs	r5, r5, #9
 80007ee:	e786      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007f0:	2080      	movs	r0, #128	; 0x80
 80007f2:	03c0      	lsls	r0, r0, #15
 80007f4:	4305      	orrs	r5, r0
 80007f6:	026d      	lsls	r5, r5, #9
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	0a6d      	lsrs	r5, r5, #9
 80007fc:	e77f      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007fe:	4641      	mov	r1, r8
 8000800:	016a      	lsls	r2, r5, #5
 8000802:	0148      	lsls	r0, r1, #5
 8000804:	4282      	cmp	r2, r0
 8000806:	d219      	bcs.n	800083c <__aeabi_fdiv+0x1fc>
 8000808:	211b      	movs	r1, #27
 800080a:	2500      	movs	r5, #0
 800080c:	3f01      	subs	r7, #1
 800080e:	2601      	movs	r6, #1
 8000810:	0014      	movs	r4, r2
 8000812:	006d      	lsls	r5, r5, #1
 8000814:	0052      	lsls	r2, r2, #1
 8000816:	2c00      	cmp	r4, #0
 8000818:	db01      	blt.n	800081e <__aeabi_fdiv+0x1de>
 800081a:	4290      	cmp	r0, r2
 800081c:	d801      	bhi.n	8000822 <__aeabi_fdiv+0x1e2>
 800081e:	1a12      	subs	r2, r2, r0
 8000820:	4335      	orrs	r5, r6
 8000822:	3901      	subs	r1, #1
 8000824:	2900      	cmp	r1, #0
 8000826:	d1f3      	bne.n	8000810 <__aeabi_fdiv+0x1d0>
 8000828:	1e50      	subs	r0, r2, #1
 800082a:	4182      	sbcs	r2, r0
 800082c:	0038      	movs	r0, r7
 800082e:	307f      	adds	r0, #127	; 0x7f
 8000830:	001e      	movs	r6, r3
 8000832:	4315      	orrs	r5, r2
 8000834:	2800      	cmp	r0, #0
 8000836:	dd00      	ble.n	800083a <__aeabi_fdiv+0x1fa>
 8000838:	e74b      	b.n	80006d2 <__aeabi_fdiv+0x92>
 800083a:	e7aa      	b.n	8000792 <__aeabi_fdiv+0x152>
 800083c:	211a      	movs	r1, #26
 800083e:	2501      	movs	r5, #1
 8000840:	1a12      	subs	r2, r2, r0
 8000842:	e7e4      	b.n	800080e <__aeabi_fdiv+0x1ce>
 8000844:	01ad      	lsls	r5, r5, #6
 8000846:	2000      	movs	r0, #0
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	e758      	b.n	80006fe <__aeabi_fdiv+0xbe>
 800084c:	08007478 	.word	0x08007478
 8000850:	f7ffffff 	.word	0xf7ffffff
 8000854:	080074b8 	.word	0x080074b8

08000858 <__aeabi_fmul>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	4657      	mov	r7, sl
 800085c:	464e      	mov	r6, r9
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	0244      	lsls	r4, r0, #9
 8000864:	b5e0      	push	{r5, r6, r7, lr}
 8000866:	0045      	lsls	r5, r0, #1
 8000868:	1c0f      	adds	r7, r1, #0
 800086a:	0a64      	lsrs	r4, r4, #9
 800086c:	0e2d      	lsrs	r5, r5, #24
 800086e:	0fc6      	lsrs	r6, r0, #31
 8000870:	2d00      	cmp	r5, #0
 8000872:	d047      	beq.n	8000904 <__aeabi_fmul+0xac>
 8000874:	2dff      	cmp	r5, #255	; 0xff
 8000876:	d04d      	beq.n	8000914 <__aeabi_fmul+0xbc>
 8000878:	2300      	movs	r3, #0
 800087a:	2080      	movs	r0, #128	; 0x80
 800087c:	469a      	mov	sl, r3
 800087e:	469b      	mov	fp, r3
 8000880:	00e4      	lsls	r4, r4, #3
 8000882:	04c0      	lsls	r0, r0, #19
 8000884:	4304      	orrs	r4, r0
 8000886:	3d7f      	subs	r5, #127	; 0x7f
 8000888:	0278      	lsls	r0, r7, #9
 800088a:	0a43      	lsrs	r3, r0, #9
 800088c:	4699      	mov	r9, r3
 800088e:	007a      	lsls	r2, r7, #1
 8000890:	0ffb      	lsrs	r3, r7, #31
 8000892:	4698      	mov	r8, r3
 8000894:	0e12      	lsrs	r2, r2, #24
 8000896:	464b      	mov	r3, r9
 8000898:	d044      	beq.n	8000924 <__aeabi_fmul+0xcc>
 800089a:	2aff      	cmp	r2, #255	; 0xff
 800089c:	d011      	beq.n	80008c2 <__aeabi_fmul+0x6a>
 800089e:	00d8      	lsls	r0, r3, #3
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	04db      	lsls	r3, r3, #19
 80008a4:	4303      	orrs	r3, r0
 80008a6:	4699      	mov	r9, r3
 80008a8:	2000      	movs	r0, #0
 80008aa:	3a7f      	subs	r2, #127	; 0x7f
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	4647      	mov	r7, r8
 80008b0:	4653      	mov	r3, sl
 80008b2:	4077      	eors	r7, r6
 80008b4:	1c69      	adds	r1, r5, #1
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d83f      	bhi.n	800093a <__aeabi_fmul+0xe2>
 80008ba:	4a72      	ldr	r2, [pc, #456]	; (8000a84 <__aeabi_fmul+0x22c>)
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	58d3      	ldr	r3, [r2, r3]
 80008c0:	469f      	mov	pc, r3
 80008c2:	35ff      	adds	r5, #255	; 0xff
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x72>
 80008c8:	e079      	b.n	80009be <__aeabi_fmul+0x166>
 80008ca:	4652      	mov	r2, sl
 80008cc:	2302      	movs	r3, #2
 80008ce:	431a      	orrs	r2, r3
 80008d0:	4692      	mov	sl, r2
 80008d2:	2002      	movs	r0, #2
 80008d4:	e7eb      	b.n	80008ae <__aeabi_fmul+0x56>
 80008d6:	4647      	mov	r7, r8
 80008d8:	464c      	mov	r4, r9
 80008da:	4683      	mov	fp, r0
 80008dc:	465b      	mov	r3, fp
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d028      	beq.n	8000934 <__aeabi_fmul+0xdc>
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fmul+0x90>
 80008e6:	e0c6      	b.n	8000a76 <__aeabi_fmul+0x21e>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d14f      	bne.n	800098c <__aeabi_fmul+0x134>
 80008ec:	2000      	movs	r0, #0
 80008ee:	2400      	movs	r4, #0
 80008f0:	05c0      	lsls	r0, r0, #23
 80008f2:	07ff      	lsls	r7, r7, #31
 80008f4:	4320      	orrs	r0, r4
 80008f6:	4338      	orrs	r0, r7
 80008f8:	bcf0      	pop	{r4, r5, r6, r7}
 80008fa:	46bb      	mov	fp, r7
 80008fc:	46b2      	mov	sl, r6
 80008fe:	46a9      	mov	r9, r5
 8000900:	46a0      	mov	r8, r4
 8000902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000904:	2c00      	cmp	r4, #0
 8000906:	d171      	bne.n	80009ec <__aeabi_fmul+0x194>
 8000908:	2304      	movs	r3, #4
 800090a:	469a      	mov	sl, r3
 800090c:	3b03      	subs	r3, #3
 800090e:	2500      	movs	r5, #0
 8000910:	469b      	mov	fp, r3
 8000912:	e7b9      	b.n	8000888 <__aeabi_fmul+0x30>
 8000914:	2c00      	cmp	r4, #0
 8000916:	d163      	bne.n	80009e0 <__aeabi_fmul+0x188>
 8000918:	2308      	movs	r3, #8
 800091a:	469a      	mov	sl, r3
 800091c:	3b06      	subs	r3, #6
 800091e:	25ff      	movs	r5, #255	; 0xff
 8000920:	469b      	mov	fp, r3
 8000922:	e7b1      	b.n	8000888 <__aeabi_fmul+0x30>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d150      	bne.n	80009ca <__aeabi_fmul+0x172>
 8000928:	4652      	mov	r2, sl
 800092a:	3301      	adds	r3, #1
 800092c:	431a      	orrs	r2, r3
 800092e:	4692      	mov	sl, r2
 8000930:	2001      	movs	r0, #1
 8000932:	e7bc      	b.n	80008ae <__aeabi_fmul+0x56>
 8000934:	20ff      	movs	r0, #255	; 0xff
 8000936:	2400      	movs	r4, #0
 8000938:	e7da      	b.n	80008f0 <__aeabi_fmul+0x98>
 800093a:	4648      	mov	r0, r9
 800093c:	0c26      	lsrs	r6, r4, #16
 800093e:	0424      	lsls	r4, r4, #16
 8000940:	0c22      	lsrs	r2, r4, #16
 8000942:	0404      	lsls	r4, r0, #16
 8000944:	0c24      	lsrs	r4, r4, #16
 8000946:	464b      	mov	r3, r9
 8000948:	0020      	movs	r0, r4
 800094a:	0c1b      	lsrs	r3, r3, #16
 800094c:	4350      	muls	r0, r2
 800094e:	4374      	muls	r4, r6
 8000950:	435a      	muls	r2, r3
 8000952:	435e      	muls	r6, r3
 8000954:	1912      	adds	r2, r2, r4
 8000956:	0c03      	lsrs	r3, r0, #16
 8000958:	189b      	adds	r3, r3, r2
 800095a:	429c      	cmp	r4, r3
 800095c:	d903      	bls.n	8000966 <__aeabi_fmul+0x10e>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0252      	lsls	r2, r2, #9
 8000962:	4694      	mov	ip, r2
 8000964:	4466      	add	r6, ip
 8000966:	0400      	lsls	r0, r0, #16
 8000968:	041a      	lsls	r2, r3, #16
 800096a:	0c00      	lsrs	r0, r0, #16
 800096c:	1812      	adds	r2, r2, r0
 800096e:	0194      	lsls	r4, r2, #6
 8000970:	1e60      	subs	r0, r4, #1
 8000972:	4184      	sbcs	r4, r0
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	0e92      	lsrs	r2, r2, #26
 8000978:	199b      	adds	r3, r3, r6
 800097a:	4314      	orrs	r4, r2
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	431c      	orrs	r4, r3
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	d572      	bpl.n	8000a6a <__aeabi_fmul+0x212>
 8000984:	2001      	movs	r0, #1
 8000986:	0863      	lsrs	r3, r4, #1
 8000988:	4004      	ands	r4, r0
 800098a:	431c      	orrs	r4, r3
 800098c:	0008      	movs	r0, r1
 800098e:	307f      	adds	r0, #127	; 0x7f
 8000990:	2800      	cmp	r0, #0
 8000992:	dd3c      	ble.n	8000a0e <__aeabi_fmul+0x1b6>
 8000994:	0763      	lsls	r3, r4, #29
 8000996:	d004      	beq.n	80009a2 <__aeabi_fmul+0x14a>
 8000998:	230f      	movs	r3, #15
 800099a:	4023      	ands	r3, r4
 800099c:	2b04      	cmp	r3, #4
 800099e:	d000      	beq.n	80009a2 <__aeabi_fmul+0x14a>
 80009a0:	3404      	adds	r4, #4
 80009a2:	0123      	lsls	r3, r4, #4
 80009a4:	d503      	bpl.n	80009ae <__aeabi_fmul+0x156>
 80009a6:	3180      	adds	r1, #128	; 0x80
 80009a8:	0008      	movs	r0, r1
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <__aeabi_fmul+0x230>)
 80009ac:	401c      	ands	r4, r3
 80009ae:	28fe      	cmp	r0, #254	; 0xfe
 80009b0:	dcc0      	bgt.n	8000934 <__aeabi_fmul+0xdc>
 80009b2:	01a4      	lsls	r4, r4, #6
 80009b4:	0a64      	lsrs	r4, r4, #9
 80009b6:	b2c0      	uxtb	r0, r0
 80009b8:	e79a      	b.n	80008f0 <__aeabi_fmul+0x98>
 80009ba:	0037      	movs	r7, r6
 80009bc:	e78e      	b.n	80008dc <__aeabi_fmul+0x84>
 80009be:	4652      	mov	r2, sl
 80009c0:	2303      	movs	r3, #3
 80009c2:	431a      	orrs	r2, r3
 80009c4:	4692      	mov	sl, r2
 80009c6:	2003      	movs	r0, #3
 80009c8:	e771      	b.n	80008ae <__aeabi_fmul+0x56>
 80009ca:	4648      	mov	r0, r9
 80009cc:	f000 f900 	bl	8000bd0 <__clzsi2>
 80009d0:	464a      	mov	r2, r9
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	409a      	lsls	r2, r3
 80009d6:	1a2d      	subs	r5, r5, r0
 80009d8:	4691      	mov	r9, r2
 80009da:	2000      	movs	r0, #0
 80009dc:	3d76      	subs	r5, #118	; 0x76
 80009de:	e766      	b.n	80008ae <__aeabi_fmul+0x56>
 80009e0:	230c      	movs	r3, #12
 80009e2:	469a      	mov	sl, r3
 80009e4:	3b09      	subs	r3, #9
 80009e6:	25ff      	movs	r5, #255	; 0xff
 80009e8:	469b      	mov	fp, r3
 80009ea:	e74d      	b.n	8000888 <__aeabi_fmul+0x30>
 80009ec:	0020      	movs	r0, r4
 80009ee:	f000 f8ef 	bl	8000bd0 <__clzsi2>
 80009f2:	2576      	movs	r5, #118	; 0x76
 80009f4:	1f43      	subs	r3, r0, #5
 80009f6:	409c      	lsls	r4, r3
 80009f8:	2300      	movs	r3, #0
 80009fa:	426d      	negs	r5, r5
 80009fc:	469a      	mov	sl, r3
 80009fe:	469b      	mov	fp, r3
 8000a00:	1a2d      	subs	r5, r5, r0
 8000a02:	e741      	b.n	8000888 <__aeabi_fmul+0x30>
 8000a04:	2480      	movs	r4, #128	; 0x80
 8000a06:	2700      	movs	r7, #0
 8000a08:	20ff      	movs	r0, #255	; 0xff
 8000a0a:	03e4      	lsls	r4, r4, #15
 8000a0c:	e770      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	1a1b      	subs	r3, r3, r0
 8000a12:	2b1b      	cmp	r3, #27
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_fmul+0x1c0>
 8000a16:	e769      	b.n	80008ec <__aeabi_fmul+0x94>
 8000a18:	319e      	adds	r1, #158	; 0x9e
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	408c      	lsls	r4, r1
 8000a1e:	40d8      	lsrs	r0, r3
 8000a20:	1e63      	subs	r3, r4, #1
 8000a22:	419c      	sbcs	r4, r3
 8000a24:	4304      	orrs	r4, r0
 8000a26:	0763      	lsls	r3, r4, #29
 8000a28:	d004      	beq.n	8000a34 <__aeabi_fmul+0x1dc>
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	4023      	ands	r3, r4
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fmul+0x1dc>
 8000a32:	3404      	adds	r4, #4
 8000a34:	0163      	lsls	r3, r4, #5
 8000a36:	d51a      	bpl.n	8000a6e <__aeabi_fmul+0x216>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	e758      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a3e:	2080      	movs	r0, #128	; 0x80
 8000a40:	03c0      	lsls	r0, r0, #15
 8000a42:	4204      	tst	r4, r0
 8000a44:	d009      	beq.n	8000a5a <__aeabi_fmul+0x202>
 8000a46:	464b      	mov	r3, r9
 8000a48:	4203      	tst	r3, r0
 8000a4a:	d106      	bne.n	8000a5a <__aeabi_fmul+0x202>
 8000a4c:	464c      	mov	r4, r9
 8000a4e:	4304      	orrs	r4, r0
 8000a50:	0264      	lsls	r4, r4, #9
 8000a52:	4647      	mov	r7, r8
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	e74a      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	03c0      	lsls	r0, r0, #15
 8000a5e:	4304      	orrs	r4, r0
 8000a60:	0264      	lsls	r4, r4, #9
 8000a62:	0037      	movs	r7, r6
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	0a64      	lsrs	r4, r4, #9
 8000a68:	e742      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a6a:	0029      	movs	r1, r5
 8000a6c:	e78e      	b.n	800098c <__aeabi_fmul+0x134>
 8000a6e:	01a4      	lsls	r4, r4, #6
 8000a70:	2000      	movs	r0, #0
 8000a72:	0a64      	lsrs	r4, r4, #9
 8000a74:	e73c      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a76:	2080      	movs	r0, #128	; 0x80
 8000a78:	03c0      	lsls	r0, r0, #15
 8000a7a:	4304      	orrs	r4, r0
 8000a7c:	0264      	lsls	r4, r4, #9
 8000a7e:	20ff      	movs	r0, #255	; 0xff
 8000a80:	0a64      	lsrs	r4, r4, #9
 8000a82:	e735      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a84:	080074f8 	.word	0x080074f8
 8000a88:	f7ffffff 	.word	0xf7ffffff

08000a8c <__aeabi_f2iz>:
 8000a8c:	0241      	lsls	r1, r0, #9
 8000a8e:	0042      	lsls	r2, r0, #1
 8000a90:	0fc3      	lsrs	r3, r0, #31
 8000a92:	0a49      	lsrs	r1, r1, #9
 8000a94:	2000      	movs	r0, #0
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	2a7e      	cmp	r2, #126	; 0x7e
 8000a9a:	d903      	bls.n	8000aa4 <__aeabi_f2iz+0x18>
 8000a9c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a9e:	d902      	bls.n	8000aa6 <__aeabi_f2iz+0x1a>
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <__aeabi_f2iz+0x3c>)
 8000aa2:	1898      	adds	r0, r3, r2
 8000aa4:	4770      	bx	lr
 8000aa6:	2080      	movs	r0, #128	; 0x80
 8000aa8:	0400      	lsls	r0, r0, #16
 8000aaa:	4301      	orrs	r1, r0
 8000aac:	2a95      	cmp	r2, #149	; 0x95
 8000aae:	dc07      	bgt.n	8000ac0 <__aeabi_f2iz+0x34>
 8000ab0:	2096      	movs	r0, #150	; 0x96
 8000ab2:	1a82      	subs	r2, r0, r2
 8000ab4:	40d1      	lsrs	r1, r2
 8000ab6:	4248      	negs	r0, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f3      	bne.n	8000aa4 <__aeabi_f2iz+0x18>
 8000abc:	0008      	movs	r0, r1
 8000abe:	e7f1      	b.n	8000aa4 <__aeabi_f2iz+0x18>
 8000ac0:	3a96      	subs	r2, #150	; 0x96
 8000ac2:	4091      	lsls	r1, r2
 8000ac4:	e7f7      	b.n	8000ab6 <__aeabi_f2iz+0x2a>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	7fffffff 	.word	0x7fffffff

08000acc <__aeabi_i2f>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d013      	beq.n	8000afa <__aeabi_i2f+0x2e>
 8000ad2:	17c3      	asrs	r3, r0, #31
 8000ad4:	18c5      	adds	r5, r0, r3
 8000ad6:	405d      	eors	r5, r3
 8000ad8:	0fc4      	lsrs	r4, r0, #31
 8000ada:	0028      	movs	r0, r5
 8000adc:	f000 f878 	bl	8000bd0 <__clzsi2>
 8000ae0:	239e      	movs	r3, #158	; 0x9e
 8000ae2:	0001      	movs	r1, r0
 8000ae4:	1a1b      	subs	r3, r3, r0
 8000ae6:	2b96      	cmp	r3, #150	; 0x96
 8000ae8:	dc0f      	bgt.n	8000b0a <__aeabi_i2f+0x3e>
 8000aea:	2808      	cmp	r0, #8
 8000aec:	dd01      	ble.n	8000af2 <__aeabi_i2f+0x26>
 8000aee:	3908      	subs	r1, #8
 8000af0:	408d      	lsls	r5, r1
 8000af2:	026d      	lsls	r5, r5, #9
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	e002      	b.n	8000b00 <__aeabi_i2f+0x34>
 8000afa:	2400      	movs	r4, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	2500      	movs	r5, #0
 8000b00:	05c0      	lsls	r0, r0, #23
 8000b02:	4328      	orrs	r0, r5
 8000b04:	07e4      	lsls	r4, r4, #31
 8000b06:	4320      	orrs	r0, r4
 8000b08:	bd70      	pop	{r4, r5, r6, pc}
 8000b0a:	2b99      	cmp	r3, #153	; 0x99
 8000b0c:	dd0b      	ble.n	8000b26 <__aeabi_i2f+0x5a>
 8000b0e:	2205      	movs	r2, #5
 8000b10:	002e      	movs	r6, r5
 8000b12:	1a12      	subs	r2, r2, r0
 8000b14:	40d6      	lsrs	r6, r2
 8000b16:	0002      	movs	r2, r0
 8000b18:	321b      	adds	r2, #27
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	0028      	movs	r0, r5
 8000b1e:	1e45      	subs	r5, r0, #1
 8000b20:	41a8      	sbcs	r0, r5
 8000b22:	0035      	movs	r5, r6
 8000b24:	4305      	orrs	r5, r0
 8000b26:	2905      	cmp	r1, #5
 8000b28:	dd01      	ble.n	8000b2e <__aeabi_i2f+0x62>
 8000b2a:	1f4a      	subs	r2, r1, #5
 8000b2c:	4095      	lsls	r5, r2
 8000b2e:	002a      	movs	r2, r5
 8000b30:	4e08      	ldr	r6, [pc, #32]	; (8000b54 <__aeabi_i2f+0x88>)
 8000b32:	4032      	ands	r2, r6
 8000b34:	0768      	lsls	r0, r5, #29
 8000b36:	d009      	beq.n	8000b4c <__aeabi_i2f+0x80>
 8000b38:	200f      	movs	r0, #15
 8000b3a:	4028      	ands	r0, r5
 8000b3c:	2804      	cmp	r0, #4
 8000b3e:	d005      	beq.n	8000b4c <__aeabi_i2f+0x80>
 8000b40:	3204      	adds	r2, #4
 8000b42:	0150      	lsls	r0, r2, #5
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_i2f+0x80>
 8000b46:	239f      	movs	r3, #159	; 0x9f
 8000b48:	4032      	ands	r2, r6
 8000b4a:	1a5b      	subs	r3, r3, r1
 8000b4c:	0192      	lsls	r2, r2, #6
 8000b4e:	0a55      	lsrs	r5, r2, #9
 8000b50:	b2d8      	uxtb	r0, r3
 8000b52:	e7d5      	b.n	8000b00 <__aeabi_i2f+0x34>
 8000b54:	fbffffff 	.word	0xfbffffff

08000b58 <__aeabi_ui2f>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	1e05      	subs	r5, r0, #0
 8000b5c:	d00e      	beq.n	8000b7c <__aeabi_ui2f+0x24>
 8000b5e:	f000 f837 	bl	8000bd0 <__clzsi2>
 8000b62:	239e      	movs	r3, #158	; 0x9e
 8000b64:	0004      	movs	r4, r0
 8000b66:	1a1b      	subs	r3, r3, r0
 8000b68:	2b96      	cmp	r3, #150	; 0x96
 8000b6a:	dc0c      	bgt.n	8000b86 <__aeabi_ui2f+0x2e>
 8000b6c:	2808      	cmp	r0, #8
 8000b6e:	dd01      	ble.n	8000b74 <__aeabi_ui2f+0x1c>
 8000b70:	3c08      	subs	r4, #8
 8000b72:	40a5      	lsls	r5, r4
 8000b74:	026d      	lsls	r5, r5, #9
 8000b76:	0a6d      	lsrs	r5, r5, #9
 8000b78:	b2d8      	uxtb	r0, r3
 8000b7a:	e001      	b.n	8000b80 <__aeabi_ui2f+0x28>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2500      	movs	r5, #0
 8000b80:	05c0      	lsls	r0, r0, #23
 8000b82:	4328      	orrs	r0, r5
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
 8000b86:	2b99      	cmp	r3, #153	; 0x99
 8000b88:	dd09      	ble.n	8000b9e <__aeabi_ui2f+0x46>
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	0029      	movs	r1, r5
 8000b8e:	321b      	adds	r2, #27
 8000b90:	4091      	lsls	r1, r2
 8000b92:	1e4a      	subs	r2, r1, #1
 8000b94:	4191      	sbcs	r1, r2
 8000b96:	2205      	movs	r2, #5
 8000b98:	1a12      	subs	r2, r2, r0
 8000b9a:	40d5      	lsrs	r5, r2
 8000b9c:	430d      	orrs	r5, r1
 8000b9e:	2c05      	cmp	r4, #5
 8000ba0:	dd01      	ble.n	8000ba6 <__aeabi_ui2f+0x4e>
 8000ba2:	1f62      	subs	r2, r4, #5
 8000ba4:	4095      	lsls	r5, r2
 8000ba6:	0029      	movs	r1, r5
 8000ba8:	4e08      	ldr	r6, [pc, #32]	; (8000bcc <__aeabi_ui2f+0x74>)
 8000baa:	4031      	ands	r1, r6
 8000bac:	076a      	lsls	r2, r5, #29
 8000bae:	d009      	beq.n	8000bc4 <__aeabi_ui2f+0x6c>
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	4028      	ands	r0, r5
 8000bb4:	2804      	cmp	r0, #4
 8000bb6:	d005      	beq.n	8000bc4 <__aeabi_ui2f+0x6c>
 8000bb8:	3104      	adds	r1, #4
 8000bba:	014a      	lsls	r2, r1, #5
 8000bbc:	d502      	bpl.n	8000bc4 <__aeabi_ui2f+0x6c>
 8000bbe:	239f      	movs	r3, #159	; 0x9f
 8000bc0:	4031      	ands	r1, r6
 8000bc2:	1b1b      	subs	r3, r3, r4
 8000bc4:	0189      	lsls	r1, r1, #6
 8000bc6:	0a4d      	lsrs	r5, r1, #9
 8000bc8:	b2d8      	uxtb	r0, r3
 8000bca:	e7d9      	b.n	8000b80 <__aeabi_ui2f+0x28>
 8000bcc:	fbffffff 	.word	0xfbffffff

08000bd0 <__clzsi2>:
 8000bd0:	211c      	movs	r1, #28
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d301      	bcc.n	8000bde <__clzsi2+0xe>
 8000bda:	0c00      	lsrs	r0, r0, #16
 8000bdc:	3910      	subs	r1, #16
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	4298      	cmp	r0, r3
 8000be2:	d301      	bcc.n	8000be8 <__clzsi2+0x18>
 8000be4:	0a00      	lsrs	r0, r0, #8
 8000be6:	3908      	subs	r1, #8
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d301      	bcc.n	8000bf2 <__clzsi2+0x22>
 8000bee:	0900      	lsrs	r0, r0, #4
 8000bf0:	3904      	subs	r1, #4
 8000bf2:	a202      	add	r2, pc, #8	; (adr r2, 8000bfc <__clzsi2+0x2c>)
 8000bf4:	5c10      	ldrb	r0, [r2, r0]
 8000bf6:	1840      	adds	r0, r0, r1
 8000bf8:	4770      	bx	lr
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	02020304 	.word	0x02020304
 8000c00:	01010101 	.word	0x01010101
	...

08000c0c <__clzdi2>:
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	2900      	cmp	r1, #0
 8000c10:	d103      	bne.n	8000c1a <__clzdi2+0xe>
 8000c12:	f7ff ffdd 	bl	8000bd0 <__clzsi2>
 8000c16:	3020      	adds	r0, #32
 8000c18:	e002      	b.n	8000c20 <__clzdi2+0x14>
 8000c1a:	1c08      	adds	r0, r1, #0
 8000c1c:	f7ff ffd8 	bl	8000bd0 <__clzsi2>
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)

08000c24 <InputSDIO>:
**Name: 	vSpi3Init
**Func: 	Init Spi-3 Config
**Note:
**********************************************************/
void InputSDIO(void)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	240c      	movs	r4, #12
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2314      	movs	r3, #20
 8000c32:	001a      	movs	r2, r3
 8000c34:	2100      	movs	r1, #0
 8000c36:	f005 ff1e 	bl	8006a76 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <InputSDIO+0x70>)
 8000c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <InputSDIO+0x70>)
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	430a      	orrs	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <InputSDIO+0x70>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <InputSDIO+0x70>)
 8000c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <InputSDIO+0x70>)
 8000c58:	2101      	movs	r1, #1
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <InputSDIO+0x70>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	2201      	movs	r2, #1
 8000c64:	4013      	ands	r3, r2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	00d2      	lsls	r2, r2, #3
 8000c70:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(SDIO_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	193a      	adds	r2, r7, r4
 8000c80:	23a0      	movs	r3, #160	; 0xa0
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	0011      	movs	r1, r2
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 f842 	bl	8003d10 <HAL_GPIO_Init>
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b009      	add	sp, #36	; 0x24
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	40021000 	.word	0x40021000

08000c98 <OutputSDIO>:
void OutputSDIO(){
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	240c      	movs	r4, #12
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2314      	movs	r3, #20
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f005 fee4 	bl	8006a76 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <OutputSDIO+0x88>)
 8000cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <OutputSDIO+0x88>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <OutputSDIO+0x88>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <OutputSDIO+0x88>)
 8000cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <OutputSDIO+0x88>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <OutputSDIO+0x88>)
 8000cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	00d9      	lsls	r1, r3, #3
 8000ce2:	23a0      	movs	r3, #160	; 0xa0
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f003 fa6e 	bl	80041ca <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	00d2      	lsls	r2, r2, #3
 8000cf4:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	193a      	adds	r2, r7, r4
 8000d0a:	23a0      	movs	r3, #160	; 0xa0
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f002 fffd 	bl	8003d10 <HAL_GPIO_Init>


}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b009      	add	sp, #36	; 0x24
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000

08000d24 <OutputSDCK>:

void OutputSDCK(void){
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	240c      	movs	r4, #12
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2314      	movs	r3, #20
 8000d32:	001a      	movs	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f005 fe9e 	bl	8006a76 <memset>

	  	  /* GPIO Ports Clock Enable */
	  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <OutputSDCK+0x88>)
 8000d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <OutputSDCK+0x88>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	430a      	orrs	r2, r1
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <OutputSDCK+0x88>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
	  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <OutputSDCK+0x88>)
 8000d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <OutputSDCK+0x88>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <OutputSDCK+0x88>)
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

	  	  /*Configure GPIO pin Output Level */
	  	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	0099      	lsls	r1, r3, #2
 8000d6e:	23a0      	movs	r3, #160	; 0xa0
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	2200      	movs	r2, #0
 8000d74:	0018      	movs	r0, r3
 8000d76:	f003 fa28 	bl	80041ca <HAL_GPIO_WritePin>

	  	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  	  GPIO_InitStruct.Pin = SCLK_Pin;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	601a      	str	r2, [r3, #0]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2201      	movs	r2, #1
 8000d86:	605a      	str	r2, [r3, #4]
	  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
	  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	193a      	adds	r2, r7, r4
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f002 ffb7 	bl	8003d10 <HAL_GPIO_Init>

}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b009      	add	sp, #36	; 0x24
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000

08000db0 <OutputFCSB>:

void OutputFCSB(void){
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	240c      	movs	r4, #12
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2314      	movs	r3, #20
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f005 fe58 	bl	8006a76 <memset>

		  	  /* GPIO Ports Clock Enable */
		  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <OutputFCSB+0x84>)
 8000dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <OutputFCSB+0x84>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <OutputFCSB+0x84>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
		  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <OutputFCSB+0x84>)
 8000de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <OutputFCSB+0x84>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <OutputFCSB+0x84>)
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f003 f9e3 	bl	80041ca <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2204      	movs	r2, #4
 8000e0a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2201      	movs	r2, #1
 8000e10:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	187a      	adds	r2, r7, r1
 8000e20:	23a0      	movs	r3, #160	; 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f002 ff72 	bl	8003d10 <HAL_GPIO_Init>


}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b009      	add	sp, #36	; 0x24
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	40021000 	.word	0x40021000

08000e38 <OutputCSB>:

void OutputCSB(void){
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	240c      	movs	r4, #12
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	2314      	movs	r3, #20
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f005 fe14 	bl	8006a76 <memset>

	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <OutputCSB+0x84>)
 8000e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <OutputCSB+0x84>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	430a      	orrs	r2, r1
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <OutputCSB+0x84>)
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <OutputCSB+0x84>)
 8000e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <OutputCSB+0x84>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <OutputCSB+0x84>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	0018      	movs	r0, r3
 8000e88:	f003 f99f 	bl	80041ca <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = CSB_Pin;
 8000e8c:	0021      	movs	r1, r4
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2202      	movs	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2201      	movs	r2, #1
 8000e98:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	187a      	adds	r2, r7, r1
 8000ea8:	23a0      	movs	r3, #160	; 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f002 ff2e 	bl	8003d10 <HAL_GPIO_Init>
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b009      	add	sp, #36	; 0x24
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <_delay_us>:
void _delay_us(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
 	// HAL_UART_Transmit( &hlpuart1, (uint8_t *)"giriyor\r\n",9, 100);

	//
	  	//  }
	 //HAL_Delay(1);
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <vSpi3Init>:
void vSpi3Init(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
	OutputCSB();
 8000ece:	f7ff ffb3 	bl	8000e38 <OutputCSB>
	OutputFCSB();
 8000ed2:	f7ff ff6d 	bl	8000db0 <OutputFCSB>
	OutputSDCK();
 8000ed6:	f7ff ff25 	bl	8000d24 <OutputSDCK>
	OutputSDIO();
 8000eda:	f7ff fedd 	bl	8000c98 <OutputSDIO>

	SetCSB();
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f003 f96f 	bl	80041ca <HAL_GPIO_WritePin>
	SetFCSB();
 8000eec:	23a0      	movs	r3, #160	; 0xa0
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f003 f968 	bl	80041ca <HAL_GPIO_WritePin>
	SetSDIO();
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	00d9      	lsls	r1, r3, #3
 8000efe:	23a0      	movs	r3, #160	; 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2201      	movs	r2, #1
 8000f04:	0018      	movs	r0, r3
 8000f06:	f003 f960 	bl	80041ca <HAL_GPIO_WritePin>
	ClrSDCK();
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	0099      	lsls	r1, r3, #2
 8000f0e:	23a0      	movs	r3, #160	; 0xa0
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	2200      	movs	r2, #0
 8000f14:	0018      	movs	r0, r3
 8000f16:	f003 f958 	bl	80041ca <HAL_GPIO_WritePin>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <vSpi3WriteByte>:
**Func: 	SPI-3 send one byte
**Input:
**Output:  
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	701a      	strb	r2, [r3, #0]

 	byte bitcnt;
 
	SetFCSB();				//FCSB = 1;
 8000f2c:	23a0      	movs	r3, #160	; 0xa0
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	2201      	movs	r2, #1
 8000f32:	2104      	movs	r1, #4
 8000f34:	0018      	movs	r0, r3
 8000f36:	f003 f948 	bl	80041ca <HAL_GPIO_WritePin>
 
 	OutputSDIO();			//SDA output mode
 8000f3a:	f7ff fead 	bl	8000c98 <OutputSDIO>
 	SetSDIO();				//    output 1
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	00d9      	lsls	r1, r3, #3
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	2201      	movs	r2, #1
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f003 f93e 	bl	80041ca <HAL_GPIO_WritePin>
 
 	ClrSDCK();
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	0099      	lsls	r1, r3, #2
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	2200      	movs	r2, #0
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f003 f936 	bl	80041ca <HAL_GPIO_WritePin>
 	ClrCSB();
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f003 f92f 	bl	80041ca <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2208      	movs	r2, #8
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e034      	b.n	8000fe0 <vSpi3WriteByte+0xc0>
 		{
		ClrSDCK();
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	0099      	lsls	r1, r3, #2
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	2200      	movs	r2, #0
 8000f80:	0018      	movs	r0, r3
 8000f82:	f003 f922 	bl	80041ca <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000f86:	f7ff ff9b 	bl	8000ec0 <_delay_us>
 		if(dat&0x80)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	da08      	bge.n	8000fa6 <vSpi3WriteByte+0x86>
 			SetSDIO();
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	00d9      	lsls	r1, r3, #3
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 f913 	bl	80041ca <HAL_GPIO_WritePin>
 8000fa4:	e007      	b.n	8000fb6 <vSpi3WriteByte+0x96>
 		else
 			ClrSDIO();
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	00d9      	lsls	r1, r3, #3
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	2200      	movs	r2, #0
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f003 f90a 	bl	80041ca <HAL_GPIO_WritePin>
		SetSDCK();
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	0099      	lsls	r1, r3, #2
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f003 f902 	bl	80041ca <HAL_GPIO_WritePin>
 		dat <<= 1;
 8000fc6:	1dfa      	adds	r2, r7, #7
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	18db      	adds	r3, r3, r3
 8000fce:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000fd0:	f7ff ff76 	bl	8000ec0 <_delay_us>
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1c5      	bne.n	8000f76 <vSpi3WriteByte+0x56>
 		}
 	ClrSDCK();
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	0099      	lsls	r1, r3, #2
 8000fee:	23a0      	movs	r3, #160	; 0xa0
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f003 f8e8 	bl	80041ca <HAL_GPIO_WritePin>
 	SetSDIO();
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	00d9      	lsls	r1, r3, #3
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	2201      	movs	r2, #1
 8001004:	0018      	movs	r0, r3
 8001006:	f003 f8e0 	bl	80041ca <HAL_GPIO_WritePin>
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}

08001012 <bSpi3ReadByte>:
**Func: 	SPI-3 read one byte
**Input:
**Output:  
**********************************************************/
byte bSpi3ReadByte(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
	byte RdPara = 0;
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
  
 	ClrCSB();
 800101e:	23a0      	movs	r3, #160	; 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	2200      	movs	r2, #0
 8001024:	2102      	movs	r1, #2
 8001026:	0018      	movs	r0, r3
 8001028:	f003 f8cf 	bl	80041ca <HAL_GPIO_WritePin>
 	InputSDIO();
 800102c:	f7ff fdfa 	bl	8000c24 <InputSDIO>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	2208      	movs	r2, #8
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e033      	b.n	80010a0 <bSpi3ReadByte+0x8e>
 		{
 		ClrSDCK();
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	0099      	lsls	r1, r3, #2
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2200      	movs	r2, #0
 8001042:	0018      	movs	r0, r3
 8001044:	f003 f8c1 	bl	80041ca <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 8001048:	1dfa      	adds	r2, r7, #7
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	18db      	adds	r3, r3, r3
 8001050:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8001052:	f7ff ff35 	bl	8000ec0 <_delay_us>
 		SetSDCK();
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	0099      	lsls	r1, r3, #2
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2201      	movs	r2, #1
 8001060:	0018      	movs	r0, r3
 8001062:	f003 f8b2 	bl	80041ca <HAL_GPIO_WritePin>
 		_delay_us(); //_delay_us(1);
 8001066:	f7ff ff2b 	bl	8000ec0 <_delay_us>

 		if(SDIO_H())
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	00da      	lsls	r2, r3, #3
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f003 f88b 	bl	8004190 <HAL_GPIO_ReadPin>
 800107a:	0003      	movs	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d106      	bne.n	800108e <bSpi3ReadByte+0x7c>
 			RdPara |= 0x01;
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	1dfa      	adds	r2, r7, #7
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	2101      	movs	r1, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e003      	b.n	8001096 <bSpi3ReadByte+0x84>
 		else
 			RdPara |= 0x00;
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	1dfa      	adds	r2, r7, #7
 8001092:	7812      	ldrb	r2, [r2, #0]
 8001094:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	1dbb      	adds	r3, r7, #6
 800109c:	3a01      	subs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	1dbb      	adds	r3, r7, #6
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1c7      	bne.n	8001038 <bSpi3ReadByte+0x26>
 		}
 	ClrSDCK();
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	0099      	lsls	r1, r3, #2
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	2200      	movs	r2, #0
 80010b2:	0018      	movs	r0, r3
 80010b4:	f003 f889 	bl	80041ca <HAL_GPIO_WritePin>
 	OutputSDIO();
 80010b8:	f7ff fdee 	bl	8000c98 <OutputSDIO>
 	SetSDIO();
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	00d9      	lsls	r1, r3, #3
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	2201      	movs	r2, #1
 80010c6:	0018      	movs	r0, r3
 80010c8:	f003 f87f 	bl	80041ca <HAL_GPIO_WritePin>
 	SetCSB();
 80010cc:	23a0      	movs	r3, #160	; 0xa0
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f003 f878 	bl	80041ca <HAL_GPIO_WritePin>
 	return(RdPara);
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <vSpi3Write>:
**Func: 	SPI Write One word
**Input: 	Write word
**Output:	none
**********************************************************/
void vSpi3Write(word dat)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 	vSpi3WriteByte((byte)(dat>>8)&0x7F);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	227f      	movs	r2, #127	; 0x7f
 80010f6:	4013      	ands	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff ff10 	bl	8000f20 <vSpi3WriteByte>
 	vSpi3WriteByte((byte)dat);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff ff0b 	bl	8000f20 <vSpi3WriteByte>
 	SetCSB();
 800110a:	23a0      	movs	r3, #160	; 0xa0
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	2201      	movs	r2, #1
 8001110:	2102      	movs	r1, #2
 8001112:	0018      	movs	r0, r3
 8001114:	f003 f859 	bl	80041ca <HAL_GPIO_WritePin>
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <bSpi3Read>:
**Func: 	SPI-3 Read One byte
**Input: 	readout addresss
**Output:	readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	0002      	movs	r2, r0
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	701a      	strb	r2, [r3, #0]
  	vSpi3WriteByte(addr|0x80);
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	4252      	negs	r2, r2
 8001134:	4313      	orrs	r3, r2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff fef1 	bl	8000f20 <vSpi3WriteByte>
 	return(bSpi3ReadByte());
 800113e:	f7ff ff68 	bl	8001012 <bSpi3ReadByte>
 8001142:	0003      	movs	r3, r0
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <vSpi3WriteFIFO>:
**Func: 	SPI-3 send one byte to FIFO
**Input: 	one byte buffer
**Output:	none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
 
 	SetCSB();
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	2201      	movs	r2, #1
 800115e:	2102      	movs	r1, #2
 8001160:	0018      	movs	r0, r3
 8001162:	f003 f832 	bl	80041ca <HAL_GPIO_WritePin>
	OutputSDIO();
 8001166:	f7ff fd97 	bl	8000c98 <OutputSDIO>
	ClrSDCK();
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	0099      	lsls	r1, r3, #2
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2200      	movs	r2, #0
 8001174:	0018      	movs	r0, r3
 8001176:	f003 f828 	bl	80041ca <HAL_GPIO_WritePin>
 	ClrFCSB();			//FCSB = 0
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2200      	movs	r2, #0
 8001180:	2104      	movs	r1, #4
 8001182:	0018      	movs	r0, r3
 8001184:	f003 f821 	bl	80041ca <HAL_GPIO_WritePin>
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2208      	movs	r2, #8
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e034      	b.n	80011fc <vSpi3WriteFIFO+0xb0>
 		{
 		ClrSDCK();
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	0099      	lsls	r1, r3, #2
 8001196:	23a0      	movs	r3, #160	; 0xa0
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	2200      	movs	r2, #0
 800119c:	0018      	movs	r0, r3
 800119e:	f003 f814 	bl	80041ca <HAL_GPIO_WritePin>

 		if(dat&0x80)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da08      	bge.n	80011be <vSpi3WriteFIFO+0x72>
			SetSDIO();
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	00d9      	lsls	r1, r3, #3
 80011b0:	23a0      	movs	r3, #160	; 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	2201      	movs	r2, #1
 80011b6:	0018      	movs	r0, r3
 80011b8:	f003 f807 	bl	80041ca <HAL_GPIO_WritePin>
 80011bc:	e007      	b.n	80011ce <vSpi3WriteFIFO+0x82>
		else
			ClrSDIO();
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	00d9      	lsls	r1, r3, #3
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2200      	movs	r2, #0
 80011c8:	0018      	movs	r0, r3
 80011ca:	f002 fffe 	bl	80041ca <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 80011ce:	f7ff fe77 	bl	8000ec0 <_delay_us>
		SetSDCK();
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	0099      	lsls	r1, r3, #2
 80011d6:	23a0      	movs	r3, #160	; 0xa0
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	2201      	movs	r2, #1
 80011dc:	0018      	movs	r0, r3
 80011de:	f002 fff4 	bl	80041ca <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 80011e2:	f7ff fe6d 	bl	8000ec0 <_delay_us>
 		dat <<= 1;
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	18db      	adds	r3, r3, r3
 80011ee:	7013      	strb	r3, [r2, #0]
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80011f0:	210f      	movs	r1, #15
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	3a01      	subs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1c5      	bne.n	8001192 <vSpi3WriteFIFO+0x46>
 		}
 	ClrSDCK();
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	0099      	lsls	r1, r3, #2
 800120a:	23a0      	movs	r3, #160	; 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2200      	movs	r2, #0
 8001210:	0018      	movs	r0, r3
 8001212:	f002 ffda 	bl	80041ca <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8001216:	f7ff fe53 	bl	8000ec0 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 800121a:	f7ff fe51 	bl	8000ec0 <_delay_us>
 	SetFCSB();
 800121e:	23a0      	movs	r3, #160	; 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	2201      	movs	r2, #1
 8001224:	2104      	movs	r1, #4
 8001226:	0018      	movs	r0, r3
 8001228:	f002 ffcf 	bl	80041ca <HAL_GPIO_WritePin>
	SetSDIO();
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	00d9      	lsls	r1, r3, #3
 8001230:	23a0      	movs	r3, #160	; 0xa0
 8001232:	05db      	lsls	r3, r3, #23
 8001234:	2201      	movs	r2, #1
 8001236:	0018      	movs	r0, r3
 8001238:	f002 ffc7 	bl	80041ca <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 800123c:	f7ff fe40 	bl	8000ec0 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8001240:	f7ff fe3e 	bl	8000ec0 <_delay_us>
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}

0800124c <vSpi3BurstWriteFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length & head pointer
**Output:	none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	000a      	movs	r2, r1
 8001256:	1cfb      	adds	r3, r7, #3
 8001258:	701a      	strb	r2, [r3, #0]
 	byte i;
 	if(length!=0x00)
 800125a:	1cfb      	adds	r3, r7, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01a      	beq.n	8001298 <vSpi3BurstWriteFIFO+0x4c>
	 	{
 		for(i=0;i<length;i++)
 8001262:	230f      	movs	r3, #15
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e00d      	b.n	8001288 <vSpi3BurstWriteFIFO+0x3c>
 			vSpi3WriteFIFO(ptr[i]);
 800126c:	240f      	movs	r4, #15
 800126e:	193b      	adds	r3, r7, r4
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	18d3      	adds	r3, r2, r3
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff ff67 	bl	800114c <vSpi3WriteFIFO>
 		for(i=0;i<length;i++)
 800127e:	193b      	adds	r3, r7, r4
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	193b      	adds	r3, r7, r4
 8001284:	3201      	adds	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	230f      	movs	r3, #15
 800128a:	18fa      	adds	r2, r7, r3
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3ea      	bcc.n	800126c <vSpi3BurstWriteFIFO+0x20>
 		}
 	return;
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46c0      	nop			; (mov r8, r8)
}
 800129a:	46bd      	mov	sp, r7
 800129c:	b005      	add	sp, #20
 800129e:	bd90      	pop	{r4, r7, pc}

080012a0 <GPO3In>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
void GPO3In(void)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	240c      	movs	r4, #12
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	0018      	movs	r0, r3
 80012ac:	2314      	movs	r3, #20
 80012ae:	001a      	movs	r2, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	f005 fbe0 	bl	8006a76 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <GPO3In+0x70>)
 80012b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <GPO3In+0x70>)
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	430a      	orrs	r2, r1
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <GPO3In+0x70>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <GPO3In+0x70>)
 80012d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <GPO3In+0x70>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <GPO3In+0x70>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = GPO3_Pin;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	0152      	lsls	r2, r2, #5
 80012ec:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 80012fa:	193a      	adds	r2, r7, r4
 80012fc:	23a0      	movs	r3, #160	; 0xa0
 80012fe:	05db      	lsls	r3, r3, #23
 8001300:	0011      	movs	r1, r2
 8001302:	0018      	movs	r0, r3
 8001304:	f002 fd04 	bl	8003d10 <HAL_GPIO_Init>
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b009      	add	sp, #36	; 0x24
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <bGoTx>:

byte bGoTx(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	}
	if(i>=100)
		return(false);
	#endif

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <bGoTx+0x7c>)
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff fee2 	bl	80010e6 <vSpi3Write>
	for(i=0; i<100; i++){
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e020      	b.n	800136c <bGoTx+0x58>
		for(i=0; i<100; i++){
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e006      	b.n	8001340 <bGoTx+0x2c>
					_delay_us(); //_delay_us(100);
 8001332:	f7ff fdc5 	bl	8000ec0 <_delay_us>
		for(i=0; i<100; i++){
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	3201      	adds	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b63      	cmp	r3, #99	; 0x63
 8001346:	d9f4      	bls.n	8001332 <bGoTx+0x1e>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8001348:	2061      	movs	r0, #97	; 0x61
 800134a:	f7ff fee9 	bl	8001120 <bSpi3Read>
 800134e:	0003      	movs	r3, r0
 8001350:	0019      	movs	r1, r3
 8001352:	1dbb      	adds	r3, r7, #6
 8001354:	220f      	movs	r2, #15
 8001356:	400a      	ands	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_TX)
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b06      	cmp	r3, #6
 8001360:	d009      	beq.n	8001376 <bGoTx+0x62>
	for(i=0; i<100; i++){
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	3201      	adds	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b63      	cmp	r3, #99	; 0x63
 8001372:	d9da      	bls.n	800132a <bGoTx+0x16>
 8001374:	e000      	b.n	8001378 <bGoTx+0x64>
			break;
 8001376:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b63      	cmp	r3, #99	; 0x63
 800137e:	d901      	bls.n	8001384 <bGoTx+0x70>
		return(false);
 8001380:	2300      	movs	r3, #0
 8001382:	e000      	b.n	8001386 <bGoTx+0x72>
	else
		return(true);
 8001384:	2301      	movs	r3, #1
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	00006040 	.word	0x00006040

08001394 <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	byte tmp;

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <bGoSleep+0x4c>)
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fea2 	bl	80010e6 <vSpi3Write>
	for(int i=0; i<100; i++){
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e004      	b.n	80013b2 <bGoSleep+0x1e>
				_delay_us(); //_delay_us(100);
 80013a8:	f7ff fd8a 	bl	8000ec0 <_delay_us>
	for(int i=0; i<100; i++){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b63      	cmp	r3, #99	; 0x63
 80013b6:	ddf7      	ble.n	80013a8 <bGoSleep+0x14>
			}	//enough?
	tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 80013b8:	2061      	movs	r0, #97	; 0x61
 80013ba:	f7ff feb1 	bl	8001120 <bSpi3Read>
 80013be:	0003      	movs	r3, r0
 80013c0:	0019      	movs	r1, r3
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	220f      	movs	r2, #15
 80013c6:	400a      	ands	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_GO_SLEEP)
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d101      	bne.n	80013d6 <bGoSleep+0x42>
		return(true);
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <bGoSleep+0x44>
	else
		return(false);
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	00006010 	.word	0x00006010

080013e4 <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	byte tmp, i;

	RssiTrig = false;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <bGoStandby+0x80>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <bGoStandby+0x84>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff fe77 	bl	80010e6 <vSpi3Write>
	for(i=0; i<100; i++){
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	e020      	b.n	8001442 <bGoStandby+0x5e>
		for(i=0; i<100; i++){
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e006      	b.n	8001416 <bGoStandby+0x32>
					_delay_us(); //_delay_us(100);
 8001408:	f7ff fd5a 	bl	8000ec0 <_delay_us>
		for(i=0; i<100; i++){
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	3201      	adds	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b63      	cmp	r3, #99	; 0x63
 800141c:	d9f4      	bls.n	8001408 <bGoStandby+0x24>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 800141e:	2061      	movs	r0, #97	; 0x61
 8001420:	f7ff fe7e 	bl	8001120 <bSpi3Read>
 8001424:	0003      	movs	r3, r0
 8001426:	0019      	movs	r1, r3
 8001428:	1dbb      	adds	r3, r7, #6
 800142a:	220f      	movs	r2, #15
 800142c:	400a      	ands	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_STBY)
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d009      	beq.n	800144c <bGoStandby+0x68>
	for(i=0; i<100; i++){
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	3201      	adds	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b63      	cmp	r3, #99	; 0x63
 8001448:	d9da      	bls.n	8001400 <bGoStandby+0x1c>
 800144a:	e000      	b.n	800144e <bGoStandby+0x6a>
			break;
 800144c:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b63      	cmp	r3, #99	; 0x63
 8001454:	d901      	bls.n	800145a <bGoStandby+0x76>
		return(false);
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <bGoStandby+0x78>
	else
		return(true);
 800145a:	2301      	movs	r3, #1
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002f1 	.word	0x200002f1
 8001468:	00006002 	.word	0x00006002

0800146c <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <vSoftReset+0x18>)
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff fe37 	bl	80010e6 <vSpi3Write>
	HAL_Delay(1);				//enough?
 8001478:	2001      	movs	r0, #1
 800147a:	f001 fdb1 	bl	8002fe0 <HAL_Delay>
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	00007fff 	.word	0x00007fff

08001488 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	0002      	movs	r2, r0
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	22ca      	movs	r2, #202	; 0xca
 800149a:	01d2      	lsls	r2, r2, #7
 800149c:	4694      	mov	ip, r2
 800149e:	4463      	add	r3, ip
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fe20 	bl	80010e6 <vSpi3Write>
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}

080014ae <vIntSrcCfg>:
**Function: config interrupt source  
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	0002      	movs	r2, r0
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	1dbb      	adds	r3, r7, #6
 80014bc:	1c0a      	adds	r2, r1, #0
 80014be:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 80014c0:	2066      	movs	r0, #102	; 0x66
 80014c2:	f7ff fe2d 	bl	8001120 <bSpi3Read>
 80014c6:	0003      	movs	r3, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	240f      	movs	r4, #15
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	221f      	movs	r2, #31
 80014d0:	4391      	bics	r1, r2
 80014d2:	000a      	movs	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 80014d6:	193a      	adds	r2, r7, r4
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4313      	orrs	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	22cc      	movs	r2, #204	; 0xcc
 80014e4:	01d2      	lsls	r2, r2, #7
 80014e6:	4694      	mov	ip, r2
 80014e8:	4463      	add	r3, ip
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff fdfb 	bl	80010e6 <vSpi3Write>

	tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 80014f0:	2067      	movs	r0, #103	; 0x67
 80014f2:	f7ff fe15 	bl	8001120 <bSpi3Read>
 80014f6:	0003      	movs	r3, r0
 80014f8:	0019      	movs	r1, r3
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	221f      	movs	r2, #31
 80014fe:	4391      	bics	r1, r2
 8001500:	000a      	movs	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8001504:	193a      	adds	r2, r7, r4
 8001506:	1dbb      	adds	r3, r7, #6
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	22ce      	movs	r2, #206	; 0xce
 8001512:	01d2      	lsls	r2, r2, #7
 8001514:	4694      	mov	ip, r2
 8001516:	4463      	add	r3, ip
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fde4 	bl	80010e6 <vSpi3Write>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b005      	add	sp, #20
 8001524:	bd90      	pop	{r4, r7, pc}

08001526 <vEnableAntSwitch>:
**Function:  
**Input:    
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 8001526:	b5b0      	push	{r4, r5, r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	0002      	movs	r2, r0
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = bSpi3Read(CMT23_INT1_CTL);
 8001532:	250f      	movs	r5, #15
 8001534:	197c      	adds	r4, r7, r5
 8001536:	2066      	movs	r0, #102	; 0x66
 8001538:	f7ff fdf2 	bl	8001120 <bSpi3Read>
 800153c:	0003      	movs	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]
	tmp&= 0x3F;
 8001540:	197b      	adds	r3, r7, r5
 8001542:	197a      	adds	r2, r7, r5
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	213f      	movs	r1, #63	; 0x3f
 8001548:	400a      	ands	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
	switch(mode)
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d002      	beq.n	800155a <vEnableAntSwitch+0x34>
 8001554:	2b02      	cmp	r3, #2
 8001556:	d009      	beq.n	800156c <vEnableAntSwitch+0x46>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
		case 2:
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
		case 0:
		default:
			break;							//Disable
 8001558:	e010      	b.n	800157c <vEnableAntSwitch+0x56>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 800155a:	220f      	movs	r2, #15
 800155c:	18bb      	adds	r3, r7, r2
 800155e:	18ba      	adds	r2, r7, r2
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	4249      	negs	r1, r1
 8001566:	430a      	orrs	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e007      	b.n	800157c <vEnableAntSwitch+0x56>
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 800156c:	220f      	movs	r2, #15
 800156e:	18bb      	adds	r3, r7, r2
 8001570:	18ba      	adds	r2, r7, r2
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	430a      	orrs	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	46c0      	nop			; (mov r8, r8)
	}
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 800157c:	230f      	movs	r3, #15
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	22cc      	movs	r2, #204	; 0xcc
 8001584:	01d2      	lsls	r2, r2, #7
 8001586:	4694      	mov	ip, r2
 8001588:	4463      	add	r3, ip
 800158a:	0018      	movs	r0, r3
 800158c:	f7ff fdab 	bl	80010e6 <vSpi3Write>
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bdb0      	pop	{r4, r5, r7, pc}

08001598 <vIntSrcEnable>:
**Function: enable interrupt source 
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	0002      	movs	r2, r0
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	22d0      	movs	r2, #208	; 0xd0
 80015aa:	01d2      	lsls	r2, r2, #7
 80015ac:	4694      	mov	ip, r2
 80015ae:	4463      	add	r3, ip
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fd98 	bl	80010e6 <vSpi3Write>
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	//byte tmp;
	//byte int_clr2 = 0;
	//byte int_clr1 = 0;
	byte flg = 0;
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		int_clr1 |= RX_TIMEOUT_CLR;
		flg |= RX_TMO_EN;
	}
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1);	//Clear flag
#endif
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <bIntSrcFlagClr+0x28>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fd89 	bl	80010e6 <vSpi3Write>
	vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF);	//Clear flag
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <bIntSrcFlagClr+0x2c>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f7ff fd85 	bl	80010e6 <vSpi3Write>

	return(flg);
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	00006a07 	.word	0x00006a07
 80015ec:	00006bff 	.word	0x00006bff

080015f0 <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_FLG);
 80015f6:	1dfc      	adds	r4, r7, #7
 80015f8:	206e      	movs	r0, #110	; 0x6e
 80015fa:	f7ff fd91 	bl	8001120 <bSpi3Read>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
	vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <vClearFIFO+0x28>)
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff fd6e 	bl	80010e6 <vSpi3Write>
	return(tmp);
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b003      	add	sp, #12
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	00006c03 	.word	0x00006c03

0800161c <vEnableWrFifo>:

#if 1		//splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_CTL);
 8001622:	1dfc      	adds	r4, r7, #7
 8001624:	2069      	movs	r0, #105	; 0x69
 8001626:	f7ff fd7b 	bl	8001120 <bSpi3Read>
 800162a:	0003      	movs	r3, r0
 800162c:	7023      	strb	r3, [r4, #0]
	tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	1dfa      	adds	r2, r7, #7
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	2105      	movs	r1, #5
 8001636:	430a      	orrs	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	22d2      	movs	r2, #210	; 0xd2
 8001640:	01d2      	lsls	r2, r2, #7
 8001642:	4694      	mov	ip, r2
 8001644:	4463      	add	r3, ip
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff fd4d 	bl	80010e6 <vSpi3Write>
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b003      	add	sp, #12
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
	byte tmp;
	vSpi3Init();
 800165a:	f7ff fc36 	bl	8000eca <vSpi3Init>
	//GPO1In();
	//GPO2In();
	GPO3In();
 800165e:	f7ff fe1f 	bl	80012a0 <GPO3In>

	//TX_ANTOut();
	//RX_ANTOut();

	vSoftReset();
 8001662:	f7ff ff03 	bl	800146c <vSoftReset>
	HAL_Delay(20);
 8001666:	2014      	movs	r0, #20
 8001668:	f001 fcba 	bl	8002fe0 <HAL_Delay>
	bGoStandby();
 800166c:	f7ff feba 	bl	80013e4 <bGoStandby>

	//
	tmp = bSpi3Read(CMT23_MODE_STA);
 8001670:	1dfc      	adds	r4, r7, #7
 8001672:	2061      	movs	r0, #97	; 0x61
 8001674:	f7ff fd54 	bl	8001120 <bSpi3Read>
 8001678:	0003      	movs	r3, r0
 800167a:	7023      	strb	r3, [r4, #0]
	tmp|= EEP_CPY_DIS;
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	1dfa      	adds	r2, r7, #7
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	2110      	movs	r1, #16
 8001684:	430a      	orrs	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
	tmp&= (~RSTN_IN_EN);			//Disable RstPin
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	1dfa      	adds	r2, r7, #7
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	2120      	movs	r1, #32
 8001690:	438a      	bics	r2, r1
 8001692:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	22c2      	movs	r2, #194	; 0xc2
 800169a:	01d2      	lsls	r2, r2, #7
 800169c:	4694      	mov	ip, r2
 800169e:	4463      	add	r3, ip
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fd20 	bl	80010e6 <vSpi3Write>

	bIntSrcFlagClr();
 80016a6:	f7ff ff8b 	bl	80015c0 <bIntSrcFlagClr>
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b003      	add	sp, #12
 80016b0:	bd90      	pop	{r4, r7, pc}

080016b2 <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 80016b2:	b590      	push	{r4, r7, lr}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	000a      	movs	r2, r1
 80016bc:	1cfb      	adds	r3, r7, #3
 80016be:	701a      	strb	r2, [r3, #0]
	byte i;

	if(length!=0){
 80016c0:	1cfb      	adds	r3, r7, #3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01a      	beq.n	80016fe <vCfgBank+0x4c>
		for(i=0; i<length; i++)
 80016c8:	230f      	movs	r3, #15
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e00e      	b.n	80016f0 <vCfgBank+0x3e>
			vSpi3Write(cfg[i]);
 80016d2:	240f      	movs	r4, #15
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff fd00 	bl	80010e6 <vSpi3Write>
		for(i=0; i<length; i++)
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	3201      	adds	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	230f      	movs	r3, #15
 80016f2:	18fa      	adds	r2, r7, r3
 80016f4:	1cfb      	adds	r3, r7, #3
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3e9      	bcc.n	80016d2 <vCfgBank+0x20>
	}
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b005      	add	sp, #20
 8001704:	bd90      	pop	{r4, r7, pc}

08001706 <bSendMessage>:
	rev = 0xFF;
	return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	000a      	movs	r2, r1
 8001710:	1cfb      	adds	r3, r7, #3
 8001712:	701a      	strb	r2, [r3, #0]
	bIntSrcFlagClr();
 8001714:	f7ff ff54 	bl	80015c0 <bIntSrcFlagClr>
#if 1
	//mode1
	vSetTxPayloadLength(length);
 8001718:	1cfb      	adds	r3, r7, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f813 	bl	8001748 <vSetTxPayloadLength>
	bGoStandby();
 8001722:	f7ff fe5f 	bl	80013e4 <bGoStandby>
	vEnableWrFifo();
 8001726:	f7ff ff79 	bl	800161c <vEnableWrFifo>
	vSpi3BurstWriteFIFO(msg, length);
 800172a:	1cfb      	adds	r3, r7, #3
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff fd8a 	bl	800124c <vSpi3BurstWriteFIFO>
	bGoTx();
 8001738:	f7ff fdec 	bl	8001314 <bGoTx>
	vSetTxPayloadLength(length);
	bGoTx();
	vEnableWrFifo();
	vSpi3BurstWriteFIFO(msg, length);
#endif
	return(true);
 800173c:	2301      	movs	r3, #1
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	byte tmp;
	byte len;
	bGoStandby();
 8001750:	f7ff fe48 	bl	80013e4 <bGoStandby>
	tmp = bSpi3Read(CMT23_PKT_CTRL1);
 8001754:	250f      	movs	r5, #15
 8001756:	197c      	adds	r4, r7, r5
 8001758:	2045      	movs	r0, #69	; 0x45
 800175a:	f7ff fce1 	bl	8001120 <bSpi3Read>
 800175e:	0003      	movs	r3, r0
 8001760:	7023      	strb	r3, [r4, #0]
	tmp&= 0x8F;
 8001762:	0028      	movs	r0, r5
 8001764:	183b      	adds	r3, r7, r0
 8001766:	183a      	adds	r2, r7, r0
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	2170      	movs	r1, #112	; 0x70
 800176c:	438a      	bics	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]

	if(length!=0){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01c      	beq.n	80017b0 <vSetTxPayloadLength+0x68>
		if(FixedPktLength){
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <vSetTxPayloadLength+0xc0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <vSetTxPayloadLength+0x50>
		  tmp &= ~(1<<0);		//clear bit0
 800177e:	183b      	adds	r3, r7, r0
 8001780:	183a      	adds	r2, r7, r0
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	438a      	bics	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
		  len = length - 1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	230e      	movs	r3, #14
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	3a01      	subs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e00f      	b.n	80017b8 <vSetTxPayloadLength+0x70>
		}
		else{
		  tmp |= (1<<0);	   //set bit0
 8001798:	220f      	movs	r2, #15
 800179a:	18bb      	adds	r3, r7, r2
 800179c:	18ba      	adds	r2, r7, r2
 800179e:	7812      	ldrb	r2, [r2, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
		  len = length;
 80017a6:	230e      	movs	r3, #14
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e003      	b.n	80017b8 <vSetTxPayloadLength+0x70>
		}
	}else
		len = 0;
 80017b0:	230e      	movs	r3, #14
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

	tmp|= (((byte)(len>>8)&0x07)<<4);
 80017b8:	240e      	movs	r4, #14
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	2270      	movs	r2, #112	; 0x70
 80017c8:	4013      	ands	r3, r2
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	210f      	movs	r1, #15
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	228a      	movs	r2, #138	; 0x8a
 80017e2:	01d2      	lsls	r2, r2, #7
 80017e4:	4694      	mov	ip, r2
 80017e6:	4463      	add	r3, ip
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fc7c 	bl	80010e6 <vSpi3Write>
	vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len);	//Payload length
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	228c      	movs	r2, #140	; 0x8c
 80017f4:	01d2      	lsls	r2, r2, #7
 80017f6:	4694      	mov	ip, r2
 80017f8:	4463      	add	r3, ip
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7ff fc73 	bl	80010e6 <vSpi3Write>
	//bGoSleep();
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bdb0      	pop	{r4, r5, r7, pc}
 8001808:	200002f2 	.word	0x200002f2

0800180c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b0c1      	sub	sp, #260	; 0x104
 8001810:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001812:	f001 fb75 	bl	8002f00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001816:	f000 fbe5 	bl	8001fe4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800181a:	f000 fd61 	bl	80022e0 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 800181e:	f000 fcfd 	bl	800221c <MX_LPUART1_UART_Init>
	MX_I2C1_Init();
 8001822:	f000 fcbb 	bl	800219c <MX_I2C1_Init>
	MX_ADC_Init();
 8001826:	f000 fc53 	bl	80020d0 <MX_ADC_Init>
	MX_RTC_Init();
 800182a:	f000 fd25 	bl	8002278 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	//  https://github.com/Sensirion/embedded-sht sht30 kodları kaynak
	sensirion_i2c_init();
 800182e:	f001 f82f 	bl	8002890 <sensirion_i2c_init>
	printf("Basladi\r\n");
 8001832:	4aec      	ldr	r2, [pc, #944]	; (8001be4 <main+0x3d8>)
 8001834:	4bec      	ldr	r3, [pc, #944]	; (8001be8 <main+0x3dc>)
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f005 f925 	bl	8006a88 <siprintf>
 800183e:	0003      	movs	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	4bea      	ldr	r3, [pc, #936]	; (8001bec <main+0x3e0>)
 8001844:	49e8      	ldr	r1, [pc, #928]	; (8001be8 <main+0x3dc>)
 8001846:	48ea      	ldr	r0, [pc, #936]	; (8001bf0 <main+0x3e4>)
 8001848:	f004 fc18 	bl	800607c <HAL_UART_Transmit>
	/*
	 * Orijinal kodda var ama biz sensör hatalıysa hata mesajı gönderiyoruz
	 * while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
	 * printf("SHT sensor probing failed\n"); }
	 */
	printf("SHT sensor probing successful\n");
 800184c:	4ae9      	ldr	r2, [pc, #932]	; (8001bf4 <main+0x3e8>)
 800184e:	4be6      	ldr	r3, [pc, #920]	; (8001be8 <main+0x3dc>)
 8001850:	0011      	movs	r1, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f005 f918 	bl	8006a88 <siprintf>
 8001858:	0003      	movs	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	4be3      	ldr	r3, [pc, #908]	; (8001bec <main+0x3e0>)
 800185e:	49e2      	ldr	r1, [pc, #904]	; (8001be8 <main+0x3dc>)
 8001860:	48e3      	ldr	r0, [pc, #908]	; (8001bf0 <main+0x3e4>)
 8001862:	f004 fc0b 	bl	800607c <HAL_UART_Transmit>
#define VREFINT_CAL_ADDR			0x1FF80078 //STM32L010C6Tx datasheet'inden bakıldı. Bu koda ve aşağıdaki Vrefint için yazıldı
#define VREFINT_CAL 				((uint16_t*) VREFINT_CAL_ADDR)

#define TX_NUM  25
	byte tx_buf[25] = { 'H', 'A', 'T', 'A', '1', '1', '1', '1', '1', '1', 'A',
 8001866:	23d8      	movs	r3, #216	; 0xd8
 8001868:	18f9      	adds	r1, r7, r3
 800186a:	4ae3      	ldr	r2, [pc, #908]	; (8001bf8 <main+0x3ec>)
 800186c:	000b      	movs	r3, r1
 800186e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001870:	c331      	stmia	r3!, {r0, r4, r5}
 8001872:	ca11      	ldmia	r2!, {r0, r4}
 8001874:	c311      	stmia	r3!, {r0, r4}
 8001876:	8810      	ldrh	r0, [r2, #0]
 8001878:	8018      	strh	r0, [r3, #0]
 800187a:	7892      	ldrb	r2, [r2, #2]
 800187c:	709a      	strb	r2, [r3, #2]
 800187e:	2317      	movs	r3, #23
 8001880:	18cb      	adds	r3, r1, r3
 8001882:	2202      	movs	r2, #2
 8001884:	2100      	movs	r1, #0
 8001886:	0018      	movs	r0, r3
 8001888:	f005 f8f5 	bl	8006a76 <memset>
	char buffer[25];
	char buffer2[50];
	char buffer3[100];
	char buffer4[25];

	FixedPktLength = 0;
 800188c:	4bdb      	ldr	r3, [pc, #876]	; (8001bfc <main+0x3f0>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	PayloadLength = 23;
 8001892:	4bdb      	ldr	r3, [pc, #876]	; (8001c00 <main+0x3f4>)
 8001894:	2217      	movs	r2, #23
 8001896:	601a      	str	r2, [r3, #0]
	vInit();
 8001898:	f7ff fedc 	bl	8001654 <vInit>
	vCfgBank(CMTBank, 12);
 800189c:	4bd9      	ldr	r3, [pc, #868]	; (8001c04 <main+0x3f8>)
 800189e:	210c      	movs	r1, #12
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ff06 	bl	80016b2 <vCfgBank>
	vCfgBank(SystemBank, 12);
 80018a6:	4bd8      	ldr	r3, [pc, #864]	; (8001c08 <main+0x3fc>)
 80018a8:	210c      	movs	r1, #12
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff ff01 	bl	80016b2 <vCfgBank>
	vCfgBank(FrequencyBank, 8);
 80018b0:	4bd6      	ldr	r3, [pc, #856]	; (8001c0c <main+0x400>)
 80018b2:	2108      	movs	r1, #8
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fefc 	bl	80016b2 <vCfgBank>
	vCfgBank(DataRateBank, 24);
 80018ba:	4bd5      	ldr	r3, [pc, #852]	; (8001c10 <main+0x404>)
 80018bc:	2118      	movs	r1, #24
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff fef7 	bl	80016b2 <vCfgBank>
	vCfgBank(BasebandBank, 29);
 80018c4:	4bd3      	ldr	r3, [pc, #844]	; (8001c14 <main+0x408>)
 80018c6:	211d      	movs	r1, #29
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fef2 	bl	80016b2 <vCfgBank>
	vCfgBank(TXBank, 11);
 80018ce:	4bd2      	ldr	r3, [pc, #840]	; (8001c18 <main+0x40c>)
 80018d0:	210b      	movs	r1, #11
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff feed 	bl	80016b2 <vCfgBank>
	vEnableAntSwitch(0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fe24 	bl	8001526 <vEnableAntSwitch>
	vGpioFuncCfg(GPIO1_DCLK + GPIO2_DCLK + GPIO3_INT2); //GPIO Maping
 80018de:	202f      	movs	r0, #47	; 0x2f
 80018e0:	f7ff fdd2 	bl	8001488 <vGpioFuncCfg>

	vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 80018e4:	210a      	movs	r1, #10
 80018e6:	2010      	movs	r0, #16
 80018e8:	f7ff fde1 	bl	80014ae <vIntSrcCfg>
	vIntSrcEnable(TX_DONE_EN);
 80018ec:	2020      	movs	r0, #32
 80018ee:	f7ff fe53 	bl	8001598 <vIntSrcEnable>
	vClearFIFO();
 80018f2:	f7ff fe7d 	bl	80015f0 <vClearFIFO>
	bGoSleep();
 80018f6:	f7ff fd4d 	bl	8001394 <bGoSleep>

	//int c = 0; sayaç kullanmak istersen yorumu aç
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED); // vrefint'ten ölçülecek voltajın düzgün ölçülmesi için yapılan kalibrasyon ayarı
 80018fa:	4bc8      	ldr	r3, [pc, #800]	; (8001c1c <main+0x410>)
 80018fc:	2100      	movs	r1, #0
 80018fe:	0018      	movs	r0, r3
 8001900:	f002 f88a 	bl	8003a18 <HAL_ADCEx_Calibration_Start>

	int32_t temperature, humidity;
	int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT, &temperature,
 8001904:	003a      	movs	r2, r7
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	0019      	movs	r1, r3
 800190a:	2044      	movs	r0, #68	; 0x44
 800190c:	f001 f856 	bl	80029bc <sht3x_measure_blocking_read>
 8001910:	0003      	movs	r3, r0
 8001912:	001a      	movs	r2, r3
 8001914:	25ff      	movs	r5, #255	; 0xff
 8001916:	197b      	adds	r3, r7, r5
 8001918:	701a      	strb	r2, [r3, #0]
			&humidity);
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) { //RTC ile saniye sayar o sürede stanby moduna alır. bekleme bittikten sonra bu fonksiyonun içindekileri yapar ve tekrar uyku moduna geçer.
 800191a:	4bc1      	ldr	r3, [pc, #772]	; (8001c20 <main+0x414>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d000      	beq.n	8001928 <main+0x11c>
 8001926:	e2f2      	b.n	8001f0e <main+0x702>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	019b      	lsls	r3, r3, #6
 800192c:	48bd      	ldr	r0, [pc, #756]	; (8001c24 <main+0x418>)
 800192e:	2201      	movs	r2, #1
 8001930:	0019      	movs	r1, r3
 8001932:	f002 fc4a 	bl	80041ca <HAL_GPIO_WritePin>
		HAL_Delay(3000); //yukarıdaki ve hal delay satırı kod yazarken aşamayı görmek için yazılmıştır sonradan silebilirsin
 8001936:	4bbc      	ldr	r3, [pc, #752]	; (8001c28 <main+0x41c>)
 8001938:	0018      	movs	r0, r3
 800193a:	f001 fb51 	bl	8002fe0 <HAL_Delay>

		//ADC'deki vrefint enable ettikten sonra aşağıdaki başlayan ve biten kodlarda cihaza gelen voltu ölçer
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800193e:	4bb8      	ldr	r3, [pc, #736]	; (8001c20 <main+0x414>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4bb7      	ldr	r3, [pc, #732]	; (8001c20 <main+0x414>)
 8001944:	2108      	movs	r1, #8
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc);
 800194a:	4bb4      	ldr	r3, [pc, #720]	; (8001c1c <main+0x410>)
 800194c:	0018      	movs	r0, r3
 800194e:	f001 fd83 	bl	8003458 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8001952:	4bb2      	ldr	r3, [pc, #712]	; (8001c1c <main+0x410>)
 8001954:	2164      	movs	r1, #100	; 0x64
 8001956:	0018      	movs	r0, r3
 8001958:	f001 fe12 	bl	8003580 <HAL_ADC_PollForConversion>
		uint16_t VREFINTADC = HAL_ADC_GetValue(&hadc);
 800195c:	4baf      	ldr	r3, [pc, #700]	; (8001c1c <main+0x410>)
 800195e:	0018      	movs	r0, r3
 8001960:	f001 feaa 	bl	80036b8 <HAL_ADC_GetValue>
 8001964:	0002      	movs	r2, r0
 8001966:	26fc      	movs	r6, #252	; 0xfc
 8001968:	19bb      	adds	r3, r7, r6
 800196a:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc);
 800196c:	4bab      	ldr	r3, [pc, #684]	; (8001c1c <main+0x410>)
 800196e:	0018      	movs	r0, r3
 8001970:	f001 fdc6 	bl	8003500 <HAL_ADC_Stop>
		float VDD = 3000.0 * (*VREFINT_CAL / (float) VREFINTADC);
 8001974:	4bad      	ldr	r3, [pc, #692]	; (8001c2c <main+0x420>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff f8a7 	bl	8000acc <__aeabi_i2f>
 800197e:	1c04      	adds	r4, r0, #0
 8001980:	19bb      	adds	r3, r7, r6
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff f8e7 	bl	8000b58 <__aeabi_ui2f>
 800198a:	1c03      	adds	r3, r0, #0
 800198c:	1c19      	adds	r1, r3, #0
 800198e:	1c20      	adds	r0, r4, #0
 8001990:	f7fe fe56 	bl	8000640 <__aeabi_fdiv>
 8001994:	1c03      	adds	r3, r0, #0
 8001996:	49a6      	ldr	r1, [pc, #664]	; (8001c30 <main+0x424>)
 8001998:	1c18      	adds	r0, r3, #0
 800199a:	f7fe ff5d 	bl	8000858 <__aeabi_fmul>
 800199e:	1c03      	adds	r3, r0, #0
 80019a0:	22f8      	movs	r2, #248	; 0xf8
 80019a2:	18ba      	adds	r2, r7, r2
 80019a4:	6013      	str	r3, [r2, #0]
		//buraya kadar cihaza gelen vrefint'i ölçtü.

		temperature = temperature / 10;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	210a      	movs	r1, #10
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7fe fc48 	bl	8000240 <__divsi3>
 80019b0:	0003      	movs	r3, r0
 80019b2:	607b      	str	r3, [r7, #4]
		humidity = humidity / 10;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	210a      	movs	r1, #10
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7fe fc41 	bl	8000240 <__divsi3>
 80019be:	0003      	movs	r3, r0
 80019c0:	603b      	str	r3, [r7, #0]
		if (ret == STATUS_OK) {
 80019c2:	197b      	adds	r3, r7, r5
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d000      	beq.n	80019ce <main+0x1c2>
 80019cc:	e272      	b.n	8001eb4 <main+0x6a8>
			 * printf("Sayaç: %d\r\n",c);
			 */
			//temperature = 100;

//Sıcaklık verisindne gelen veriler eğer -40 ile 100 derece arasında doğru kabul edilir ve alıcıya gönderilmek üzere aşağıdaki fonksiyona girer.
			if (-4000 <= temperature && temperature <= 9999 && 0 <= humidity&& humidity <= 9999) {
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a98      	ldr	r2, [pc, #608]	; (8001c34 <main+0x428>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	da00      	bge.n	80019d8 <main+0x1cc>
 80019d6:	e248      	b.n	8001e6a <main+0x65e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a97      	ldr	r2, [pc, #604]	; (8001c38 <main+0x42c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	dd00      	ble.n	80019e2 <main+0x1d6>
 80019e0:	e243      	b.n	8001e6a <main+0x65e>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <main+0x1de>
 80019e8:	e23f      	b.n	8001e6a <main+0x65e>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4a92      	ldr	r2, [pc, #584]	; (8001c38 <main+0x42c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	dd00      	ble.n	80019f4 <main+0x1e8>
 80019f2:	e23a      	b.n	8001e6a <main+0x65e>

				//Buffer'a sıcaklığın - mi + mı durumunu ekliyoruz

				if (temperature < -1000) { //mesela -12.85 derce
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a91      	ldr	r2, [pc, #580]	; (8001c3c <main+0x430>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	da0d      	bge.n	8001a18 <main+0x20c>
					// -1 ile çarptım çünkü -'li kısmı olmadan ilk 4 bitini göndermek istiyorum.
					temperature = temperature * -1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	425b      	negs	r3, r3
 8001a00:	607b      	str	r3, [r7, #4]
					sprintf(buffer, "%d", temperature);
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	498e      	ldr	r1, [pc, #568]	; (8001c40 <main+0x434>)
 8001a06:	23bc      	movs	r3, #188	; 0xbc
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f005 f83c 	bl	8006a88 <siprintf>
					//Tekrardan -1 ile çarptım çünkü temperature - mi + mı diye kontrol ederken geçek sıcaklığa ihtiyacım var
					temperature = temperature * -1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	425b      	negs	r3, r3
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	e199      	b.n	8001d4c <main+0x540>
				} else if (temperature < -100) {//mesela -2.85 derece
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3364      	adds	r3, #100	; 0x64
 8001a1c:	da34      	bge.n	8001a88 <main+0x27c>
					sprintf(buffer, "0", 1);
 8001a1e:	4989      	ldr	r1, [pc, #548]	; (8001c44 <main+0x438>)
 8001a20:	24bc      	movs	r4, #188	; 0xbc
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2201      	movs	r2, #1
 8001a26:	0018      	movs	r0, r3
 8001a28:	f005 f82e 	bl	8006a88 <siprintf>

					temperature = temperature * -1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	425b      	negs	r3, r3
 8001a30:	607b      	str	r3, [r7, #4]

					sprintf(buffer4, "%d", temperature);
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4982      	ldr	r1, [pc, #520]	; (8001c40 <main+0x434>)
 8001a36:	2508      	movs	r5, #8
 8001a38:	197b      	adds	r3, r7, r5
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f005 f824 	bl	8006a88 <siprintf>

					printf("0'la -10 arasında\r\n");
 8001a40:	4a81      	ldr	r2, [pc, #516]	; (8001c48 <main+0x43c>)
 8001a42:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <main+0x3dc>)
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f005 f81e 	bl	8006a88 <siprintf>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <main+0x3e0>)
 8001a52:	4965      	ldr	r1, [pc, #404]	; (8001be8 <main+0x3dc>)
 8001a54:	4866      	ldr	r0, [pc, #408]	; (8001bf0 <main+0x3e4>)
 8001a56:	f004 fb11 	bl	800607c <HAL_UART_Transmit>
					strncat(buffer, buffer4, 3);
 8001a5a:	1979      	adds	r1, r7, r5
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	2203      	movs	r2, #3
 8001a60:	0018      	movs	r0, r3
 8001a62:	f005 f831 	bl	8006ac8 <strncat>
					printf("buffer4: %s\r\n", buffer);
 8001a66:	193a      	adds	r2, r7, r4
 8001a68:	4978      	ldr	r1, [pc, #480]	; (8001c4c <main+0x440>)
 8001a6a:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <main+0x3dc>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f005 f80b 	bl	8006a88 <siprintf>
 8001a72:	0003      	movs	r3, r0
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <main+0x3e0>)
 8001a78:	495b      	ldr	r1, [pc, #364]	; (8001be8 <main+0x3dc>)
 8001a7a:	485d      	ldr	r0, [pc, #372]	; (8001bf0 <main+0x3e4>)
 8001a7c:	f004 fafe 	bl	800607c <HAL_UART_Transmit>
					//Tekrardan -1 ile çarptım çünkü temperature - mi + mı diye kontrol ederken geçek sıcaklığa ihtiyacım var
					temperature = temperature * -1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	425b      	negs	r3, r3
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e161      	b.n	8001d4c <main+0x540>

				} else if (temperature < -10) { //mesela -0.85 derece
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	330a      	adds	r3, #10
 8001a8c:	da34      	bge.n	8001af8 <main+0x2ec>
					sprintf(buffer, "00", 2);
 8001a8e:	4970      	ldr	r1, [pc, #448]	; (8001c50 <main+0x444>)
 8001a90:	24bc      	movs	r4, #188	; 0xbc
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	2202      	movs	r2, #2
 8001a96:	0018      	movs	r0, r3
 8001a98:	f004 fff6 	bl	8006a88 <siprintf>
					temperature = temperature * -1;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	425b      	negs	r3, r3
 8001aa0:	607b      	str	r3, [r7, #4]
					sprintf(buffer4, "%d", temperature);
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4966      	ldr	r1, [pc, #408]	; (8001c40 <main+0x434>)
 8001aa6:	2508      	movs	r5, #8
 8001aa8:	197b      	adds	r3, r7, r5
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f004 ffec 	bl	8006a88 <siprintf>
					printf("0'la -1 arasında\r\n");
 8001ab0:	4a68      	ldr	r2, [pc, #416]	; (8001c54 <main+0x448>)
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <main+0x3dc>)
 8001ab4:	0011      	movs	r1, r2
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f004 ffe6 	bl	8006a88 <siprintf>
 8001abc:	0003      	movs	r3, r0
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <main+0x3e0>)
 8001ac2:	4949      	ldr	r1, [pc, #292]	; (8001be8 <main+0x3dc>)
 8001ac4:	484a      	ldr	r0, [pc, #296]	; (8001bf0 <main+0x3e4>)
 8001ac6:	f004 fad9 	bl	800607c <HAL_UART_Transmit>

					strncat(buffer, buffer4, 2);
 8001aca:	1979      	adds	r1, r7, r5
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	2202      	movs	r2, #2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f004 fff9 	bl	8006ac8 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001ad6:	193a      	adds	r2, r7, r4
 8001ad8:	495f      	ldr	r1, [pc, #380]	; (8001c58 <main+0x44c>)
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <main+0x3dc>)
 8001adc:	0018      	movs	r0, r3
 8001ade:	f004 ffd3 	bl	8006a88 <siprintf>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <main+0x3e0>)
 8001ae8:	493f      	ldr	r1, [pc, #252]	; (8001be8 <main+0x3dc>)
 8001aea:	4841      	ldr	r0, [pc, #260]	; (8001bf0 <main+0x3e4>)
 8001aec:	f004 fac6 	bl	800607c <HAL_UART_Transmit>

					//Tekrardan -1 ile çarptım çünkü temperature - mi + mı diye kontrol ederken geçek sıcaklığa ihtiyacım var
					temperature = temperature * -1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	425b      	negs	r3, r3
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	e129      	b.n	8001d4c <main+0x540>

				} else if (temperature < 0) {//mesela -0.05 derece
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da34      	bge.n	8001b68 <main+0x35c>
					sprintf(buffer, "000", 3);
 8001afe:	4957      	ldr	r1, [pc, #348]	; (8001c5c <main+0x450>)
 8001b00:	24bc      	movs	r4, #188	; 0xbc
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2203      	movs	r2, #3
 8001b06:	0018      	movs	r0, r3
 8001b08:	f004 ffbe 	bl	8006a88 <siprintf>

					temperature = temperature * -1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	425b      	negs	r3, r3
 8001b10:	607b      	str	r3, [r7, #4]
					sprintf(buffer4, "%d", temperature);
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	494a      	ldr	r1, [pc, #296]	; (8001c40 <main+0x434>)
 8001b16:	2508      	movs	r5, #8
 8001b18:	197b      	adds	r3, r7, r5
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f004 ffb4 	bl	8006a88 <siprintf>
					printf("0'la -1 arasında\r\n");
 8001b20:	4a4c      	ldr	r2, [pc, #304]	; (8001c54 <main+0x448>)
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <main+0x3dc>)
 8001b24:	0011      	movs	r1, r2
 8001b26:	0018      	movs	r0, r3
 8001b28:	f004 ffae 	bl	8006a88 <siprintf>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <main+0x3e0>)
 8001b32:	492d      	ldr	r1, [pc, #180]	; (8001be8 <main+0x3dc>)
 8001b34:	482e      	ldr	r0, [pc, #184]	; (8001bf0 <main+0x3e4>)
 8001b36:	f004 faa1 	bl	800607c <HAL_UART_Transmit>

					strncat(buffer, buffer4, 2);
 8001b3a:	1979      	adds	r1, r7, r5
 8001b3c:	193b      	adds	r3, r7, r4
 8001b3e:	2202      	movs	r2, #2
 8001b40:	0018      	movs	r0, r3
 8001b42:	f004 ffc1 	bl	8006ac8 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001b46:	193a      	adds	r2, r7, r4
 8001b48:	4943      	ldr	r1, [pc, #268]	; (8001c58 <main+0x44c>)
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <main+0x3dc>)
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f004 ff9b 	bl	8006a88 <siprintf>
 8001b52:	0003      	movs	r3, r0
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <main+0x3e0>)
 8001b58:	4923      	ldr	r1, [pc, #140]	; (8001be8 <main+0x3dc>)
 8001b5a:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <main+0x3e4>)
 8001b5c:	f004 fa8e 	bl	800607c <HAL_UART_Transmit>
					//Tekrardan -1 ile çarptım çünkü temperature - mi + mı diye kontrol ederken geçek sıcaklığa ihtiyacım var
					temperature = temperature * -1;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	425b      	negs	r3, r3
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e0f1      	b.n	8001d4c <main+0x540>

				} else if (temperature == 0) { //0 derece
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <main+0x372>
					sprintf(buffer, "0000", 4);
 8001b6e:	493c      	ldr	r1, [pc, #240]	; (8001c60 <main+0x454>)
 8001b70:	23bc      	movs	r3, #188	; 0xbc
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	2204      	movs	r2, #4
 8001b76:	0018      	movs	r0, r3
 8001b78:	f004 ff86 	bl	8006a88 <siprintf>
 8001b7c:	e0e6      	b.n	8001d4c <main+0x540>

				} else if (temperature < 10) {//mesela 0.05 derece
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	dc71      	bgt.n	8001c68 <main+0x45c>
					sprintf(buffer, "000", 3);
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <main+0x450>)
 8001b86:	24bc      	movs	r4, #188	; 0xbc
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f004 ff7b 	bl	8006a88 <siprintf>
					//sprintf(buffer, "%d", temperature);
					sprintf(buffer4, "%d", temperature);
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	492a      	ldr	r1, [pc, #168]	; (8001c40 <main+0x434>)
 8001b96:	2508      	movs	r5, #8
 8001b98:	197b      	adds	r3, r7, r5
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f004 ff74 	bl	8006a88 <siprintf>
					printf("0'la 0,10 arasında\r\n");
 8001ba0:	4a30      	ldr	r2, [pc, #192]	; (8001c64 <main+0x458>)
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <main+0x3dc>)
 8001ba4:	0011      	movs	r1, r2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f004 ff6e 	bl	8006a88 <siprintf>
 8001bac:	0003      	movs	r3, r0
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <main+0x3e0>)
 8001bb2:	490d      	ldr	r1, [pc, #52]	; (8001be8 <main+0x3dc>)
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <main+0x3e4>)
 8001bb6:	f004 fa61 	bl	800607c <HAL_UART_Transmit>

					strncat(buffer, buffer4, 2);
 8001bba:	1979      	adds	r1, r7, r5
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f004 ff81 	bl	8006ac8 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001bc6:	193a      	adds	r2, r7, r4
 8001bc8:	4923      	ldr	r1, [pc, #140]	; (8001c58 <main+0x44c>)
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <main+0x3dc>)
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f004 ff5b 	bl	8006a88 <siprintf>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <main+0x3e0>)
 8001bd8:	4903      	ldr	r1, [pc, #12]	; (8001be8 <main+0x3dc>)
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <main+0x3e4>)
 8001bdc:	f004 fa4e 	bl	800607c <HAL_UART_Transmit>
 8001be0:	e0b4      	b.n	8001d4c <main+0x540>
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	08007304 	.word	0x08007304
 8001be8:	20000344 	.word	0x20000344
 8001bec:	0000ffff 	.word	0x0000ffff
 8001bf0:	20000268 	.word	0x20000268
 8001bf4:	08007310 	.word	0x08007310
 8001bf8:	0800745c 	.word	0x0800745c
 8001bfc:	200002f2 	.word	0x200002f2
 8001c00:	200002f4 	.word	0x200002f4
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000030 	.word	0x20000030
 8001c0c:	20000060 	.word	0x20000060
 8001c10:	20000080 	.word	0x20000080
 8001c14:	200000e0 	.word	0x200000e0
 8001c18:	20000154 	.word	0x20000154
 8001c1c:	20000468 	.word	0x20000468
 8001c20:	40007000 	.word	0x40007000
 8001c24:	50000800 	.word	0x50000800
 8001c28:	00000bb8 	.word	0x00000bb8
 8001c2c:	1ff80078 	.word	0x1ff80078
 8001c30:	453b8000 	.word	0x453b8000
 8001c34:	fffff060 	.word	0xfffff060
 8001c38:	0000270f 	.word	0x0000270f
 8001c3c:	fffffc18 	.word	0xfffffc18
 8001c40:	08007330 	.word	0x08007330
 8001c44:	08007334 	.word	0x08007334
 8001c48:	08007338 	.word	0x08007338
 8001c4c:	08007350 	.word	0x08007350
 8001c50:	08007360 	.word	0x08007360
 8001c54:	08007364 	.word	0x08007364
 8001c58:	08007378 	.word	0x08007378
 8001c5c:	08007388 	.word	0x08007388
 8001c60:	0800738c 	.word	0x0800738c
 8001c64:	08007394 	.word	0x08007394
				} else if (temperature < 100) { //mesela 0.85 derece
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b63      	cmp	r3, #99	; 0x63
 8001c6c:	dc2e      	bgt.n	8001ccc <main+0x4c0>
					sprintf(buffer, "00", 2);
 8001c6e:	49c7      	ldr	r1, [pc, #796]	; (8001f8c <main+0x780>)
 8001c70:	24bc      	movs	r4, #188	; 0xbc
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	2202      	movs	r2, #2
 8001c76:	0018      	movs	r0, r3
 8001c78:	f004 ff06 	bl	8006a88 <siprintf>

					//sprintf(buffer, "%d", temperature);
					sprintf(buffer4, "%d", temperature);
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	49c4      	ldr	r1, [pc, #784]	; (8001f90 <main+0x784>)
 8001c80:	2508      	movs	r5, #8
 8001c82:	197b      	adds	r3, r7, r5
 8001c84:	0018      	movs	r0, r3
 8001c86:	f004 feff 	bl	8006a88 <siprintf>
					printf("0'la 1 arasında\r\n");
 8001c8a:	4ac2      	ldr	r2, [pc, #776]	; (8001f94 <main+0x788>)
 8001c8c:	4bc2      	ldr	r3, [pc, #776]	; (8001f98 <main+0x78c>)
 8001c8e:	0011      	movs	r1, r2
 8001c90:	0018      	movs	r0, r3
 8001c92:	f004 fef9 	bl	8006a88 <siprintf>
 8001c96:	0003      	movs	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4bc0      	ldr	r3, [pc, #768]	; (8001f9c <main+0x790>)
 8001c9c:	49be      	ldr	r1, [pc, #760]	; (8001f98 <main+0x78c>)
 8001c9e:	48c0      	ldr	r0, [pc, #768]	; (8001fa0 <main+0x794>)
 8001ca0:	f004 f9ec 	bl	800607c <HAL_UART_Transmit>

					strncat(buffer, buffer4, 2);
 8001ca4:	1979      	adds	r1, r7, r5
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	2202      	movs	r2, #2
 8001caa:	0018      	movs	r0, r3
 8001cac:	f004 ff0c 	bl	8006ac8 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001cb0:	193a      	adds	r2, r7, r4
 8001cb2:	49bc      	ldr	r1, [pc, #752]	; (8001fa4 <main+0x798>)
 8001cb4:	4bb8      	ldr	r3, [pc, #736]	; (8001f98 <main+0x78c>)
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f004 fee6 	bl	8006a88 <siprintf>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4bb6      	ldr	r3, [pc, #728]	; (8001f9c <main+0x790>)
 8001cc2:	49b5      	ldr	r1, [pc, #724]	; (8001f98 <main+0x78c>)
 8001cc4:	48b6      	ldr	r0, [pc, #728]	; (8001fa0 <main+0x794>)
 8001cc6:	f004 f9d9 	bl	800607c <HAL_UART_Transmit>
 8001cca:	e03f      	b.n	8001d4c <main+0x540>
				} else if (temperature < 1000) { //mesela 2.85 derece
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	23fa      	movs	r3, #250	; 0xfa
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	da2e      	bge.n	8001d34 <main+0x528>
					sprintf(buffer, "0", 1);
 8001cd6:	49b4      	ldr	r1, [pc, #720]	; (8001fa8 <main+0x79c>)
 8001cd8:	24bc      	movs	r4, #188	; 0xbc
 8001cda:	193b      	adds	r3, r7, r4
 8001cdc:	2201      	movs	r2, #1
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f004 fed2 	bl	8006a88 <siprintf>

					printf("1 ile 10 arasinda\r\n");
 8001ce4:	4ab1      	ldr	r2, [pc, #708]	; (8001fac <main+0x7a0>)
 8001ce6:	4bac      	ldr	r3, [pc, #688]	; (8001f98 <main+0x78c>)
 8001ce8:	0011      	movs	r1, r2
 8001cea:	0018      	movs	r0, r3
 8001cec:	f004 fecc 	bl	8006a88 <siprintf>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4ba9      	ldr	r3, [pc, #676]	; (8001f9c <main+0x790>)
 8001cf6:	49a8      	ldr	r1, [pc, #672]	; (8001f98 <main+0x78c>)
 8001cf8:	48a9      	ldr	r0, [pc, #676]	; (8001fa0 <main+0x794>)
 8001cfa:	f004 f9bf 	bl	800607c <HAL_UART_Transmit>
					sprintf(buffer4, "%d", temperature);
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	49a3      	ldr	r1, [pc, #652]	; (8001f90 <main+0x784>)
 8001d02:	2508      	movs	r5, #8
 8001d04:	197b      	adds	r3, r7, r5
 8001d06:	0018      	movs	r0, r3
 8001d08:	f004 febe 	bl	8006a88 <siprintf>

					strncat(buffer, buffer4, 3);
 8001d0c:	1979      	adds	r1, r7, r5
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	2203      	movs	r2, #3
 8001d12:	0018      	movs	r0, r3
 8001d14:	f004 fed8 	bl	8006ac8 <strncat>
					printf("buffer4: %s\r\n", buffer);
 8001d18:	193a      	adds	r2, r7, r4
 8001d1a:	49a5      	ldr	r1, [pc, #660]	; (8001fb0 <main+0x7a4>)
 8001d1c:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <main+0x78c>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f004 feb2 	bl	8006a88 <siprintf>
 8001d24:	0003      	movs	r3, r0
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b9c      	ldr	r3, [pc, #624]	; (8001f9c <main+0x790>)
 8001d2a:	499b      	ldr	r1, [pc, #620]	; (8001f98 <main+0x78c>)
 8001d2c:	489c      	ldr	r0, [pc, #624]	; (8001fa0 <main+0x794>)
 8001d2e:	f004 f9a5 	bl	800607c <HAL_UART_Transmit>
 8001d32:	e00b      	b.n	8001d4c <main+0x540>

				} else if (temperature >= 1000) {//mesela 22.85 derece
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	23fa      	movs	r3, #250	; 0xfa
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	db06      	blt.n	8001d4c <main+0x540>
					sprintf(buffer, "%d", temperature); //Temperature/100 demedik çünkü ilk 4 bitini de alıcıya göndermek istiyoruz.100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4993      	ldr	r1, [pc, #588]	; (8001f90 <main+0x784>)
 8001d42:	23bc      	movs	r3, #188	; 0xbc
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	0018      	movs	r0, r3
 8001d48:	f004 fe9e 	bl	8006a88 <siprintf>

				}

				//  printf("measured temperature: %0.2f degreeCelsius","measured humidity: %0.2f percentRH\n",temperature / 1000.0f, humidity / 1000.0f);

				sprintf(buffer2, "%d", humidity);
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4990      	ldr	r1, [pc, #576]	; (8001f90 <main+0x784>)
 8001d50:	2488      	movs	r4, #136	; 0x88
 8001d52:	193b      	adds	r3, r7, r4
 8001d54:	0018      	movs	r0, r3
 8001d56:	f004 fe97 	bl	8006a88 <siprintf>

				strncat(buffer, buffer2, 4); //sondaki sayı eklenecek karakter sayısı
 8001d5a:	1939      	adds	r1, r7, r4
 8001d5c:	24bc      	movs	r4, #188	; 0xbc
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	2204      	movs	r2, #4
 8001d62:	0018      	movs	r0, r3
 8001d64:	f004 feb0 	bl	8006ac8 <strncat>
				 HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
				 HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
				 }*/

				//Buffer'a pil durumunu ekliyoruz
				int vddint = (int) VDD;
 8001d68:	23f8      	movs	r3, #248	; 0xf8
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	f7fe fe8d 	bl	8000a8c <__aeabi_f2iz>
 8001d72:	0003      	movs	r3, r0
 8001d74:	22f4      	movs	r2, #244	; 0xf4
 8001d76:	18b9      	adds	r1, r7, r2
 8001d78:	600b      	str	r3, [r1, #0]
				sprintf(buffer3, "%d", vddint);
 8001d7a:	18bb      	adds	r3, r7, r2
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4984      	ldr	r1, [pc, #528]	; (8001f90 <main+0x784>)
 8001d80:	2524      	movs	r5, #36	; 0x24
 8001d82:	197b      	adds	r3, r7, r5
 8001d84:	0018      	movs	r0, r3
 8001d86:	f004 fe7f 	bl	8006a88 <siprintf>
				strncat(buffer, buffer3, 4); //sondaki sayı eklenecek karakter sayısı
 8001d8a:	1979      	adds	r1, r7, r5
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	2204      	movs	r2, #4
 8001d90:	0018      	movs	r0, r3
 8001d92:	f004 fe99 	bl	8006ac8 <strncat>

				//Buffer'a sıcaklığın - mi + mı durumunu ekliyoruz
				if (temperature < 0) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da0f      	bge.n	8001dbc <main+0x5b0>
					strncat(buffer, "-", 1); //+ - durumu
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7fe f9b2 	bl	8000108 <strlen>
 8001da4:	0003      	movs	r3, r0
 8001da6:	001a      	movs	r2, r3
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	189a      	adds	r2, r3, r2
 8001dac:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <main+0x7a8>)
 8001dae:	0010      	movs	r0, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	2302      	movs	r3, #2
 8001db4:	001a      	movs	r2, r3
 8001db6:	f004 fe55 	bl	8006a64 <memcpy>
 8001dba:	e00f      	b.n	8001ddc <main+0x5d0>
					//printf("0 ile -10 arasinda");

				} else {
					strncat(buffer, "+", 1);
 8001dbc:	24bc      	movs	r4, #188	; 0xbc
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7fe f9a1 	bl	8000108 <strlen>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	001a      	movs	r2, r3
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	189a      	adds	r2, r3, r2
 8001dce:	4b7a      	ldr	r3, [pc, #488]	; (8001fb8 <main+0x7ac>)
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	f004 fe44 	bl	8006a64 <memcpy>

				}
				//strncat(buffer, "s", 2);

				//Buffer'a seri numarasını ekliyoruz
				strncat(buffer, "A0000000006B", 12); //seri numarası 10 haneli A ve B arasında
 8001ddc:	24bc      	movs	r4, #188	; 0xbc
 8001dde:	193b      	adds	r3, r7, r4
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7fe f991 	bl	8000108 <strlen>
 8001de6:	0003      	movs	r3, r0
 8001de8:	001a      	movs	r2, r3
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	189a      	adds	r2, r3, r2
 8001dee:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <main+0x7b0>)
 8001df0:	0010      	movs	r0, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	230d      	movs	r3, #13
 8001df6:	001a      	movs	r2, r3
 8001df8:	f004 fe34 	bl	8006a64 <memcpy>
				//   strncat(buffer,"Asil3000000B", 12);
				//  strncat(buffer,"Asil4000000B", 12);
				//  strncat(buffer,"Asil5000000B", 12);
				// strncat(buffer,"Asil6000000B", 12);

				printf("buffer toplam: %s\r\n", buffer);
 8001dfc:	193a      	adds	r2, r7, r4
 8001dfe:	4970      	ldr	r1, [pc, #448]	; (8001fc0 <main+0x7b4>)
 8001e00:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <main+0x78c>)
 8001e02:	0018      	movs	r0, r3
 8001e04:	f004 fe40 	bl	8006a88 <siprintf>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <main+0x790>)
 8001e0e:	4962      	ldr	r1, [pc, #392]	; (8001f98 <main+0x78c>)
 8001e10:	4863      	ldr	r0, [pc, #396]	; (8001fa0 <main+0x794>)
 8001e12:	f004 f933 	bl	800607c <HAL_UART_Transmit>
				 else HAL_UART_Transmit( &hlpuart1, (uint8_t *)"degısmedi\r\n",11, 100);
				 strcpy(bufferkontrol,buffer);
				 */

				//Bufferı gönderiyioruz sonrasında CMT2119 B transmitterı uykuya sokuyoruz
				bSendMessage(buffer, strlen(buffer));
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7fe f975 	bl	8000108 <strlen>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	0011      	movs	r1, r2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7ff fc6d 	bl	8001706 <bSendMessage>
				while (GPO3_L())
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	23a0      	movs	r3, #160	; 0xa0
 8001e34:	05db      	lsls	r3, r3, #23
 8001e36:	0011      	movs	r1, r2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f002 f9a9 	bl	8004190 <HAL_GPIO_ReadPin>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d0f5      	beq.n	8001e2e <main+0x622>
					;
				bIntSrcFlagClr();
 8001e42:	f7ff fbbd 	bl	80015c0 <bIntSrcFlagClr>
				vClearFIFO();
 8001e46:	f7ff fbd3 	bl	80015f0 <vClearFIFO>
				bGoSleep();
 8001e4a:	f7ff faa3 	bl	8001394 <bGoSleep>
				printf("gonderildi\r\n");
 8001e4e:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <main+0x7b8>)
 8001e50:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <main+0x78c>)
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f004 fe17 	bl	8006a88 <siprintf>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <main+0x790>)
 8001e60:	494d      	ldr	r1, [pc, #308]	; (8001f98 <main+0x78c>)
 8001e62:	484f      	ldr	r0, [pc, #316]	; (8001fa0 <main+0x794>)
 8001e64:	f004 f90a 	bl	800607c <HAL_UART_Transmit>
			if (-4000 <= temperature && temperature <= 9999 && 0 <= humidity&& humidity <= 9999) {
 8001e68:	e048      	b.n	8001efc <main+0x6f0>
				// HAL_Delay(4000);

			} else {
				//Eger sensorden yanlis veri gelirse veya sensor bozulursa aliciya hatali mesajini gönderir
				printf("gonderilmedi\r\n");
 8001e6a:	4a57      	ldr	r2, [pc, #348]	; (8001fc8 <main+0x7bc>)
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <main+0x78c>)
 8001e6e:	0011      	movs	r1, r2
 8001e70:	0018      	movs	r0, r3
 8001e72:	f004 fe09 	bl	8006a88 <siprintf>
 8001e76:	0003      	movs	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b48      	ldr	r3, [pc, #288]	; (8001f9c <main+0x790>)
 8001e7c:	4946      	ldr	r1, [pc, #280]	; (8001f98 <main+0x78c>)
 8001e7e:	4848      	ldr	r0, [pc, #288]	; (8001fa0 <main+0x794>)
 8001e80:	f004 f8fc 	bl	800607c <HAL_UART_Transmit>
				bSendMessage(tx_buf, 22);
 8001e84:	23d8      	movs	r3, #216	; 0xd8
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2116      	movs	r1, #22
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff fc3b 	bl	8001706 <bSendMessage>
				while (GPO3_L())
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	23a0      	movs	r3, #160	; 0xa0
 8001e98:	05db      	lsls	r3, r3, #23
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f002 f977 	bl	8004190 <HAL_GPIO_ReadPin>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d0f5      	beq.n	8001e92 <main+0x686>
					;
				bIntSrcFlagClr();
 8001ea6:	f7ff fb8b 	bl	80015c0 <bIntSrcFlagClr>
				vClearFIFO();
 8001eaa:	f7ff fba1 	bl	80015f0 <vClearFIFO>
				bGoSleep();
 8001eae:	f7ff fa71 	bl	8001394 <bGoSleep>
 8001eb2:	e023      	b.n	8001efc <main+0x6f0>

			}

		} else {
			//Eger sensorden yanlis veri gelirse veya sensor bozulursa aliciya hatali mesajini gönderir
			printf("gonderilmedi\r\n");
 8001eb4:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <main+0x7bc>)
 8001eb6:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <main+0x78c>)
 8001eb8:	0011      	movs	r1, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f004 fde4 	bl	8006a88 <siprintf>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <main+0x790>)
 8001ec6:	4934      	ldr	r1, [pc, #208]	; (8001f98 <main+0x78c>)
 8001ec8:	4835      	ldr	r0, [pc, #212]	; (8001fa0 <main+0x794>)
 8001eca:	f004 f8d7 	bl	800607c <HAL_UART_Transmit>
			bSendMessage(tx_buf, 22);
 8001ece:	23d8      	movs	r3, #216	; 0xd8
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2116      	movs	r1, #22
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff fc16 	bl	8001706 <bSendMessage>
			while (GPO3_L())
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	23a0      	movs	r3, #160	; 0xa0
 8001ee2:	05db      	lsls	r3, r3, #23
 8001ee4:	0011      	movs	r1, r2
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f002 f952 	bl	8004190 <HAL_GPIO_ReadPin>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d0f5      	beq.n	8001edc <main+0x6d0>
				;
			bIntSrcFlagClr();
 8001ef0:	f7ff fb66 	bl	80015c0 <bIntSrcFlagClr>
			vClearFIFO();
 8001ef4:	f7ff fb7c 	bl	80015f0 <vClearFIFO>
			bGoSleep();
 8001ef8:	f7ff fa4c 	bl	8001394 <bGoSleep>

		}

		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	0018      	movs	r0, r3
 8001f02:	f002 fef5 	bl	8004cf0 <HAL_PWR_DisableWakeUpPin>
		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <main+0x7c0>)
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f003 ff95 	bl	8005e38 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <main+0x7c4>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <main+0x7c4>)
 8001f14:	2104      	movs	r1, #4
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <main+0x7c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	401a      	ands	r2, r3
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <main+0x7c0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	492a      	ldr	r1, [pc, #168]	; (8001fd4 <main+0x7c8>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]
	printf("About to enter the STANDBY MODE\r\n");
 8001f2e:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <main+0x7cc>)
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <main+0x78c>)
 8001f32:	0011      	movs	r1, r2
 8001f34:	0018      	movs	r0, r3
 8001f36:	f004 fda7 	bl	8006a88 <siprintf>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <main+0x790>)
 8001f40:	4915      	ldr	r1, [pc, #84]	; (8001f98 <main+0x78c>)
 8001f42:	4817      	ldr	r0, [pc, #92]	; (8001fa0 <main+0x794>)
 8001f44:	f004 f89a 	bl	800607c <HAL_UART_Transmit>

	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f002 febf 	bl	8004cd0 <HAL_PWR_EnableWakeUpPin>
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x90A, RTC_WAKEUPCLOCK_RTCCLK_DIV16) //1 saniye
 8001f52:	4922      	ldr	r1, [pc, #136]	; (8001fdc <main+0x7d0>)
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <main+0x7c0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f003 fea7 	bl	8005cac <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d001      	beq.n	8001f66 <main+0x75a>
	//if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A55, RTC_WAKEUPCLOCK_RTCCLK_DIV16) //10 saniye
			!= HAL_OK) {
		Error_Handler();
 8001f62:	f000 faa1 	bl	80024a8 <Error_Handler>
	}
	printf("STANDBY MODE is ON\r\n");
 8001f66:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <main+0x7d4>)
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <main+0x78c>)
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f004 fd8b 	bl	8006a88 <siprintf>
 8001f72:	0003      	movs	r3, r0
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <main+0x790>)
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <main+0x78c>)
 8001f7a:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <main+0x794>)
 8001f7c:	f004 f87e 	bl	800607c <HAL_UART_Transmit>
	GPIO_ALL_DisEnable(); //Güç harcamaması için bütün çevre birimlerini kapatıyoruz
 8001f80:	f000 fa2e 	bl	80023e0 <GPIO_ALL_DisEnable>

	HAL_PWR_EnterSTANDBYMode(); //uyku moduna alıyoruz
 8001f84:	f002 fec6 	bl	8004d14 <HAL_PWR_EnterSTANDBYMode>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001f88:	e7fe      	b.n	8001f88 <main+0x77c>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	08007360 	.word	0x08007360
 8001f90:	08007330 	.word	0x08007330
 8001f94:	080073ac 	.word	0x080073ac
 8001f98:	20000344 	.word	0x20000344
 8001f9c:	0000ffff 	.word	0x0000ffff
 8001fa0:	20000268 	.word	0x20000268
 8001fa4:	08007378 	.word	0x08007378
 8001fa8:	08007334 	.word	0x08007334
 8001fac:	080073c0 	.word	0x080073c0
 8001fb0:	08007350 	.word	0x08007350
 8001fb4:	080073d4 	.word	0x080073d4
 8001fb8:	080073d8 	.word	0x080073d8
 8001fbc:	080073dc 	.word	0x080073dc
 8001fc0:	080073ec 	.word	0x080073ec
 8001fc4:	08007400 	.word	0x08007400
 8001fc8:	08007410 	.word	0x08007410
 8001fcc:	20000444 	.word	0x20000444
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	fffffb7f 	.word	0xfffffb7f
 8001fd8:	08007420 	.word	0x08007420
 8001fdc:	0000090a 	.word	0x0000090a
 8001fe0:	08007444 	.word	0x08007444

08001fe4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b099      	sub	sp, #100	; 0x64
 8001fe8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001fea:	242c      	movs	r4, #44	; 0x2c
 8001fec:	193b      	adds	r3, r7, r4
 8001fee:	0018      	movs	r0, r3
 8001ff0:	2334      	movs	r3, #52	; 0x34
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f004 fd3e 	bl	8006a76 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ffa:	2318      	movs	r3, #24
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	0018      	movs	r0, r3
 8002000:	2314      	movs	r3, #20
 8002002:	001a      	movs	r2, r3
 8002004:	2100      	movs	r1, #0
 8002006:	f004 fd36 	bl	8006a76 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800200a:	003b      	movs	r3, r7
 800200c:	0018      	movs	r0, r3
 800200e:	2318      	movs	r3, #24
 8002010:	001a      	movs	r2, r3
 8002012:	2100      	movs	r1, #0
 8002014:	f004 fd2f 	bl	8006a76 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <SystemClock_Config+0xe4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <SystemClock_Config+0xe8>)
 800201e:	401a      	ands	r2, r3
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <SystemClock_Config+0xe4>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0109      	lsls	r1, r1, #4
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800202a:	0021      	movs	r1, r4
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2218      	movs	r2, #24
 8002030:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2201      	movs	r2, #1
 8002036:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2201      	movs	r2, #1
 800203c:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800203e:	187b      	adds	r3, r7, r1
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	22a0      	movs	r2, #160	; 0xa0
 8002048:	0212      	lsls	r2, r2, #8
 800204a:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002052:	187b      	adds	r3, r7, r1
 8002054:	0018      	movs	r0, r3
 8002056:	f002 fe73 	bl	8004d40 <HAL_RCC_OscConfig>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0x7e>
		Error_Handler();
 800205e:	f000 fa23 	bl	80024a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002062:	2118      	movs	r1, #24
 8002064:	187b      	adds	r3, r7, r1
 8002066:	220f      	movs	r2, #15
 8002068:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002076:	187b      	adds	r3, r7, r1
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800207c:	187b      	adds	r3, r7, r1
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002082:	187b      	adds	r3, r7, r1
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f003 f9d6 	bl	8005438 <HAL_RCC_ClockConfig>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0xb0>
		Error_Handler();
 8002090:	f000 fa0a 	bl	80024a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1
 8002094:	003b      	movs	r3, r7
 8002096:	222c      	movs	r2, #44	; 0x2c
 8002098:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800209a:	003b      	movs	r3, r7
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020a0:	003b      	movs	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020a6:	003b      	movs	r3, r7
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	0292      	lsls	r2, r2, #10
 80020ac:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80020ae:	003b      	movs	r3, r7
 80020b0:	0018      	movs	r0, r3
 80020b2:	f003 fbe5 	bl	8005880 <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	1e03      	subs	r3, r0, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0xda>
		Error_Handler();
 80020ba:	f000 f9f5 	bl	80024a8 <Error_Handler>
	}
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b019      	add	sp, #100	; 0x64
 80020c4:	bd90      	pop	{r4, r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	40007000 	.word	0x40007000
 80020cc:	ffffe7ff 	.word	0xffffe7ff

080020d0 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80020d6:	003b      	movs	r3, r7
 80020d8:	0018      	movs	r0, r3
 80020da:	2308      	movs	r3, #8
 80020dc:	001a      	movs	r2, r3
 80020de:	2100      	movs	r1, #0
 80020e0:	f004 fcc9 	bl	8006a76 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <MX_ADC_Init+0xc0>)
 80020e6:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <MX_ADC_Init+0xc4>)
 80020e8:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <MX_ADC_Init+0xc0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <MX_ADC_Init+0xc0>)
 80020f2:	22c0      	movs	r2, #192	; 0xc0
 80020f4:	0612      	lsls	r2, r2, #24
 80020f6:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <MX_ADC_Init+0xc0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <MX_ADC_Init+0xc0>)
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <MX_ADC_Init+0xc0>)
 8002106:	2201      	movs	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <MX_ADC_Init+0xc0>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <MX_ADC_Init+0xc0>)
 8002112:	2220      	movs	r2, #32
 8002114:	2100      	movs	r1, #0
 8002116:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <MX_ADC_Init+0xc0>)
 800211a:	2221      	movs	r2, #33	; 0x21
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <MX_ADC_Init+0xc0>)
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MX_ADC_Init+0xc0>)
 8002128:	22c2      	movs	r2, #194	; 0xc2
 800212a:	32ff      	adds	r2, #255	; 0xff
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_ADC_Init+0xc0>)
 8002130:	222c      	movs	r2, #44	; 0x2c
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_ADC_Init+0xc0>)
 8002138:	2204      	movs	r2, #4
 800213a:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <MX_ADC_Init+0xc0>)
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_ADC_Init+0xc0>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_ADC_Init+0xc0>)
 800214a:	2201      	movs	r2, #1
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_ADC_Init+0xc0>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_ADC_Init+0xc0>)
 8002156:	0018      	movs	r0, r3
 8002158:	f000 ff6e 	bl	8003038 <HAL_ADC_Init>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d001      	beq.n	8002164 <MX_ADC_Init+0x94>
		Error_Handler();
 8002160:	f000 f9a2 	bl	80024a8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002164:	003b      	movs	r3, r7
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <MX_ADC_Init+0xc8>)
 8002168:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800216a:	003b      	movs	r3, r7
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	0152      	lsls	r2, r2, #5
 8002170:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002172:	003a      	movs	r2, r7
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_ADC_Init+0xc0>)
 8002176:	0011      	movs	r1, r2
 8002178:	0018      	movs	r0, r3
 800217a:	f001 faa9 	bl	80036d0 <HAL_ADC_ConfigChannel>
 800217e:	1e03      	subs	r3, r0, #0
 8002180:	d001      	beq.n	8002186 <MX_ADC_Init+0xb6>
		Error_Handler();
 8002182:	f000 f991 	bl	80024a8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b002      	add	sp, #8
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	20000468 	.word	0x20000468
 8002194:	40012400 	.word	0x40012400
 8002198:	44020000 	.word	0x44020000

0800219c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_I2C1_Init+0x78>)
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <MX_I2C1_Init+0x7c>)
 80021a4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000708;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <MX_I2C1_Init+0x78>)
 80021a8:	22e1      	movs	r2, #225	; 0xe1
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <MX_I2C1_Init+0x78>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MX_I2C1_Init+0x78>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_I2C1_Init+0x78>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <MX_I2C1_Init+0x78>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <MX_I2C1_Init+0x78>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_I2C1_Init+0x78>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_I2C1_Init+0x78>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_I2C1_Init+0x78>)
 80021da:	0018      	movs	r0, r3
 80021dc:	f002 f812 	bl	8004204 <HAL_I2C_Init>
 80021e0:	1e03      	subs	r3, r0, #0
 80021e2:	d001      	beq.n	80021e8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80021e4:	f000 f960 	bl	80024a8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MX_I2C1_Init+0x78>)
 80021ea:	2100      	movs	r1, #0
 80021ec:	0018      	movs	r0, r3
 80021ee:	f002 fcd7 	bl	8004ba0 <HAL_I2CEx_ConfigAnalogFilter>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d001      	beq.n	80021fa <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80021f6:	f000 f957 	bl	80024a8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_I2C1_Init+0x78>)
 80021fc:	2100      	movs	r1, #0
 80021fe:	0018      	movs	r0, r3
 8002200:	f002 fd1a 	bl	8004c38 <HAL_I2CEx_ConfigDigitalFilter>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d001      	beq.n	800220c <MX_I2C1_Init+0x70>
		Error_Handler();
 8002208:	f000 f94e 	bl	80024a8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	200002f8 	.word	0x200002f8
 8002218:	40005400 	.word	0x40005400

0800221c <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 8002222:	4a14      	ldr	r2, [pc, #80]	; (8002274 <MX_LPUART1_UART_Init+0x58>)
 8002224:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 8002228:	22e1      	movs	r2, #225	; 0xe1
 800222a:	0252      	lsls	r2, r2, #9
 800222c:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <MX_LPUART1_UART_Init+0x54>)
 800225a:	0018      	movs	r0, r3
 800225c:	f003 fe80 	bl	8005f60 <HAL_UART_Init>
 8002260:	1e03      	subs	r3, r0, #0
 8002262:	d001      	beq.n	8002268 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 8002264:	f000 f920 	bl	80024a8 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	20000268 	.word	0x20000268
 8002274:	40004800 	.word	0x40004800

08002278 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <MX_RTC_Init+0x60>)
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <MX_RTC_Init+0x64>)
 8002280:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <MX_RTC_Init+0x60>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 124;
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_RTC_Init+0x60>)
 800228a:	227c      	movs	r2, #124	; 0x7c
 800228c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 295;
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_RTC_Init+0x60>)
 8002290:	2228      	movs	r2, #40	; 0x28
 8002292:	32ff      	adds	r2, #255	; 0xff
 8002294:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <MX_RTC_Init+0x60>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_RTC_Init+0x60>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <MX_RTC_Init+0x60>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <MX_RTC_Init+0x60>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <MX_RTC_Init+0x60>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f003 fc0b 	bl	8005acc <HAL_RTC_Init>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <MX_RTC_Init+0x46>
		Error_Handler();
 80022ba:	f000 f8f5 	bl	80024a8 <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_RTC_Init+0x60>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	210a      	movs	r1, #10
 80022c4:	0018      	movs	r0, r3
 80022c6:	f003 fcf1 	bl	8005cac <HAL_RTCEx_SetWakeUpTimer_IT>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80022ce:	f000 f8eb 	bl	80024a8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000444 	.word	0x20000444
 80022dc:	40002800 	.word	0x40002800

080022e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80022e6:	240c      	movs	r4, #12
 80022e8:	193b      	adds	r3, r7, r4
 80022ea:	0018      	movs	r0, r3
 80022ec:	2314      	movs	r3, #20
 80022ee:	001a      	movs	r2, r3
 80022f0:	2100      	movs	r1, #0
 80022f2:	f004 fbc0 	bl	8006a76 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <MX_GPIO_Init+0xf0>)
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <MX_GPIO_Init+0xf0>)
 80022fc:	2104      	movs	r1, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
 8002302:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <MX_GPIO_Init+0xf0>)
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <MX_GPIO_Init+0xf0>)
 8002310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <MX_GPIO_Init+0xf0>)
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <MX_GPIO_Init+0xf0>)
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <MX_GPIO_Init+0xf0>)
 8002328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <MX_GPIO_Init+0xf0>)
 800232c:	2102      	movs	r1, #2
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <MX_GPIO_Init+0xf0>)
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	4824      	ldr	r0, [pc, #144]	; (80023d4 <MX_GPIO_Init+0xf4>)
 8002344:	2200      	movs	r2, #0
 8002346:	0019      	movs	r1, r3
 8002348:	f001 ff3f 	bl	80041ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CSB_Pin | FCSB_Pin | SCLK_Pin | SDIO_Pin,
 800234c:	4922      	ldr	r1, [pc, #136]	; (80023d8 <MX_GPIO_Init+0xf8>)
 800234e:	23a0      	movs	r3, #160	; 0xa0
 8002350:	05db      	lsls	r3, r3, #23
 8002352:	2200      	movs	r2, #0
 8002354:	0018      	movs	r0, r3
 8002356:	f001 ff38 	bl	80041ca <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800235a:	193b      	adds	r3, r7, r4
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	0192      	lsls	r2, r2, #6
 8002360:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	193b      	adds	r3, r7, r4
 8002364:	2201      	movs	r2, #1
 8002366:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	193b      	adds	r3, r7, r4
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	193b      	adds	r3, r7, r4
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002374:	193b      	adds	r3, r7, r4
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <MX_GPIO_Init+0xf4>)
 8002378:	0019      	movs	r1, r3
 800237a:	0010      	movs	r0, r2
 800237c:	f001 fcc8 	bl	8003d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	GPIO_InitStruct.Pin = CSB_Pin | FCSB_Pin | SCLK_Pin | SDIO_Pin;
 8002380:	193b      	adds	r3, r7, r4
 8002382:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <MX_GPIO_Init+0xf8>)
 8002384:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	193b      	adds	r3, r7, r4
 8002388:	2201      	movs	r2, #1
 800238a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	193b      	adds	r3, r7, r4
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	193b      	adds	r3, r7, r4
 8002394:	2200      	movs	r2, #0
 8002396:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	193a      	adds	r2, r7, r4
 800239a:	23a0      	movs	r3, #160	; 0xa0
 800239c:	05db      	lsls	r3, r3, #23
 800239e:	0011      	movs	r1, r2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f001 fcb5 	bl	8003d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUZZER_Pin GPO3_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin | GPO3_Pin;
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <MX_GPIO_Init+0xfc>)
 80023aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	193b      	adds	r3, r7, r4
 80023ae:	2200      	movs	r2, #0
 80023b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	193a      	adds	r2, r7, r4
 80023ba:	23a0      	movs	r3, #160	; 0xa0
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	0011      	movs	r1, r2
 80023c0:	0018      	movs	r0, r3
 80023c2:	f001 fca5 	bl	8003d10 <HAL_GPIO_Init>

}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b009      	add	sp, #36	; 0x24
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40021000 	.word	0x40021000
 80023d4:	50000800 	.word	0x50000800
 80023d8:	00000606 	.word	0x00000606
 80023dc:	00001010 	.word	0x00001010

080023e0 <GPIO_ALL_DisEnable>:

/* USER CODE BEGIN 4 */
void GPIO_ALL_DisEnable(void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	 HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
	 */
	__HAL_RCC_GPIOA_CLK_DISABLE();
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	438a      	bics	r2, r1
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 80023f6:	2102      	movs	r1, #2
 80023f8:	438a      	bics	r2, r1
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 8002402:	2104      	movs	r1, #4
 8002404:	438a      	bics	r2, r1
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 800240a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <GPIO_ALL_DisEnable+0xb4>)
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	438a      	bics	r2, r1
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	019b      	lsls	r3, r3, #6
 8002418:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <GPIO_ALL_DisEnable+0xb8>)
 800241a:	0019      	movs	r1, r3
 800241c:	0010      	movs	r0, r2
 800241e:	f001 fde5 	bl	8003fec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, SDIO_Pin);
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	00da      	lsls	r2, r3, #3
 8002426:	23a0      	movs	r3, #160	; 0xa0
 8002428:	05db      	lsls	r3, r3, #23
 800242a:	0011      	movs	r1, r2
 800242c:	0018      	movs	r0, r3
 800242e:	f001 fddd 	bl	8003fec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPO3_Pin);
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	23a0      	movs	r3, #160	; 0xa0
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	0011      	movs	r1, r2
 800243c:	0018      	movs	r0, r3
 800243e:	f001 fdd5 	bl	8003fec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, BUZZER_Pin);
 8002442:	23a0      	movs	r3, #160	; 0xa0
 8002444:	05db      	lsls	r3, r3, #23
 8002446:	2110      	movs	r1, #16
 8002448:	0018      	movs	r0, r3
 800244a:	f001 fdcf 	bl	8003fec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, CSB_Pin);
 800244e:	23a0      	movs	r3, #160	; 0xa0
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	2102      	movs	r1, #2
 8002454:	0018      	movs	r0, r3
 8002456:	f001 fdc9 	bl	8003fec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, FCSB_Pin);
 800245a:	23a0      	movs	r3, #160	; 0xa0
 800245c:	05db      	lsls	r3, r3, #23
 800245e:	2104      	movs	r1, #4
 8002460:	0018      	movs	r0, r3
 8002462:	f001 fdc3 	bl	8003fec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, SCLK_Pin);
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	23a0      	movs	r3, #160	; 0xa0
 800246c:	05db      	lsls	r3, r3, #23
 800246e:	0011      	movs	r1, r2
 8002470:	0018      	movs	r0, r3
 8002472:	f001 fdbb 	bl	8003fec <HAL_GPIO_DeInit>
	//HAL_RTC_DeInit(&hrtc);
	HAL_UART_DeInit(&hlpuart1);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <GPIO_ALL_DisEnable+0xbc>)
 8002478:	0018      	movs	r0, r3
 800247a:	f003 fdc5 	bl	8006008 <HAL_UART_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <GPIO_ALL_DisEnable+0xc0>)
 8002480:	0018      	movs	r0, r3
 8002482:	f001 ff55 	bl	8004330 <HAL_I2C_DeInit>
	HAL_ADC_DeInit(&hadc);
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <GPIO_ALL_DisEnable+0xc4>)
 8002488:	0018      	movs	r0, r3
 800248a:	f000 ff49 	bl	8003320 <HAL_ADC_DeInit>
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	50000800 	.word	0x50000800
 800249c:	20000268 	.word	0x20000268
 80024a0:	200002f8 	.word	0x200002f8
 80024a4:	20000468 	.word	0x20000468

080024a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ac:	b672      	cpsid	i
}
 80024ae:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024b0:	e7fe      	b.n	80024b0 <Error_Handler+0x8>

080024b2 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	000a      	movs	r2, r1
 80024bc:	1cbb      	adds	r3, r7, #2
 80024be:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80024c0:	230d      	movs	r3, #13
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	22ff      	movs	r2, #255	; 0xff
 80024c6:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80024c8:	230e      	movs	r3, #14
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2200      	movs	r2, #0
 80024ce:	801a      	strh	r2, [r3, #0]
 80024d0:	e037      	b.n	8002542 <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 80024d2:	230e      	movs	r3, #14
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	18d3      	adds	r3, r2, r3
 80024dc:	7819      	ldrb	r1, [r3, #0]
 80024de:	220d      	movs	r2, #13
 80024e0:	18bb      	adds	r3, r7, r2
 80024e2:	18ba      	adds	r2, r7, r2
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	404a      	eors	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80024ea:	230c      	movs	r3, #12
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2208      	movs	r2, #8
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e01b      	b.n	800252c <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 80024f4:	210d      	movs	r1, #13
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da09      	bge.n	8002514 <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8002500:	187b      	adds	r3, r7, r1
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	b25b      	sxtb	r3, r3
 8002508:	2231      	movs	r2, #49	; 0x31
 800250a:	4053      	eors	r3, r2
 800250c:	b25a      	sxtb	r2, r3
 800250e:	187b      	adds	r3, r7, r1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e005      	b.n	8002520 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8002514:	230d      	movs	r3, #13
 8002516:	18fa      	adds	r2, r7, r3
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	18db      	adds	r3, r3, r3
 800251e:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002520:	220c      	movs	r2, #12
 8002522:	18bb      	adds	r3, r7, r2
 8002524:	18ba      	adds	r2, r7, r2
 8002526:	7812      	ldrb	r2, [r2, #0]
 8002528:	3a01      	subs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	230c      	movs	r3, #12
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1de      	bne.n	80024f4 <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8002536:	220e      	movs	r2, #14
 8002538:	18bb      	adds	r3, r7, r2
 800253a:	18ba      	adds	r2, r7, r2
 800253c:	8812      	ldrh	r2, [r2, #0]
 800253e:	3201      	adds	r2, #1
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	230e      	movs	r3, #14
 8002544:	18fa      	adds	r2, r7, r3
 8002546:	1cbb      	adds	r3, r7, #2
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d3c0      	bcc.n	80024d2 <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8002550:	230d      	movs	r3, #13
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	781b      	ldrb	r3, [r3, #0]
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b004      	add	sp, #16
 800255c:	bd80      	pop	{r7, pc}

0800255e <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	0008      	movs	r0, r1
 8002568:	0011      	movs	r1, r2
 800256a:	1cbb      	adds	r3, r7, #2
 800256c:	1c02      	adds	r2, r0, #0
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	1c7b      	adds	r3, r7, #1
 8002572:	1c0a      	adds	r2, r1, #0
 8002574:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8002576:	1cbb      	adds	r3, r7, #2
 8002578:	881a      	ldrh	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0011      	movs	r1, r2
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff ff97 	bl	80024b2 <sensirion_common_generate_crc>
 8002584:	0003      	movs	r3, r0
 8002586:	001a      	movs	r2, r3
 8002588:	1c7b      	adds	r3, r7, #1
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4293      	cmp	r3, r2
 800258e:	d002      	beq.n	8002596 <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 8002590:	2301      	movs	r3, #1
 8002592:	425b      	negs	r3, r3
 8002594:	e000      	b.n	8002598 <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}

080025a0 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 80025a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	0008      	movs	r0, r1
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	0019      	movs	r1, r3
 80025ae:	250a      	movs	r5, #10
 80025b0:	197b      	adds	r3, r7, r5
 80025b2:	1c02      	adds	r2, r0, #0
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	2309      	movs	r3, #9
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	1c0a      	adds	r2, r1, #0
 80025bc:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 80025be:	2014      	movs	r0, #20
 80025c0:	183b      	adds	r3, r7, r0
 80025c2:	2200      	movs	r2, #0
 80025c4:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 80025c6:	197b      	adds	r3, r7, r5
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	b299      	uxth	r1, r3
 80025ce:	183b      	adds	r3, r7, r0
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	0004      	movs	r4, r0
 80025d4:	183a      	adds	r2, r7, r0
 80025d6:	1c58      	adds	r0, r3, #1
 80025d8:	8010      	strh	r0, [r2, #0]
 80025da:	001a      	movs	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	193a      	adds	r2, r7, r4
 80025ea:	1c59      	adds	r1, r3, #1
 80025ec:	8011      	strh	r1, [r2, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	189b      	adds	r3, r3, r2
 80025f4:	197a      	adds	r2, r7, r5
 80025f6:	8812      	ldrh	r2, [r2, #0]
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 80025fc:	2317      	movs	r3, #23
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e042      	b.n	800268c <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8002606:	2617      	movs	r6, #23
 8002608:	19bb      	adds	r3, r7, r6
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	18d3      	adds	r3, r2, r3
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	b299      	uxth	r1, r3
 8002618:	2414      	movs	r4, #20
 800261a:	193b      	adds	r3, r7, r4
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	193a      	adds	r2, r7, r4
 8002620:	1c58      	adds	r0, r3, #1
 8002622:	8010      	strh	r0, [r2, #0]
 8002624:	001a      	movs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	189b      	adds	r3, r3, r2
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 800262e:	19bb      	adds	r3, r7, r6
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	18d3      	adds	r3, r2, r3
 8002638:	8819      	ldrh	r1, [r3, #0]
 800263a:	0025      	movs	r5, r4
 800263c:	197b      	adds	r3, r7, r5
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	197a      	adds	r2, r7, r5
 8002642:	1c58      	adds	r0, r3, #1
 8002644:	8010      	strh	r0, [r2, #0]
 8002646:	001a      	movs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	189b      	adds	r3, r3, r2
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8002650:	197b      	adds	r3, r7, r5
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	3b02      	subs	r3, #2
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	2213      	movs	r2, #19
 800265c:	18bc      	adds	r4, r7, r2
 800265e:	2102      	movs	r1, #2
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff ff26 	bl	80024b2 <sensirion_common_generate_crc>
 8002666:	0003      	movs	r3, r0
 8002668:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 800266a:	197b      	adds	r3, r7, r5
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	197a      	adds	r2, r7, r5
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	8011      	strh	r1, [r2, #0]
 8002674:	001a      	movs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	189b      	adds	r3, r3, r2
 800267a:	2213      	movs	r2, #19
 800267c:	18ba      	adds	r2, r7, r2
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8002682:	19bb      	adds	r3, r7, r6
 8002684:	19ba      	adds	r2, r7, r6
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	3201      	adds	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	2317      	movs	r3, #23
 800268e:	18fa      	adds	r2, r7, r3
 8002690:	2309      	movs	r3, #9
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3b4      	bcc.n	8002606 <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 800269c:	2314      	movs	r3, #20
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	881b      	ldrh	r3, [r3, #0]
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b007      	add	sp, #28
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026aa <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80026aa:	b5b0      	push	{r4, r5, r7, lr}
 80026ac:	b096      	sub	sp, #88	; 0x58
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	0011      	movs	r1, r2
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	1c02      	adds	r2, r0, #0
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	1c0a      	adds	r2, r1, #0
 80026be:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 80026c0:	2052      	movs	r0, #82	; 0x52
 80026c2:	1839      	adds	r1, r7, r0
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	1c1a      	adds	r2, r3, #0
 80026ca:	1892      	adds	r2, r2, r2
 80026cc:	18d3      	adds	r3, r2, r3
 80026ce:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 80026d0:	2308      	movs	r3, #8
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f901 	bl	80028e8 <sensirion_i2c_read>
 80026e6:	0003      	movs	r3, r0
 80026e8:	001a      	movs	r2, r3
 80026ea:	214a      	movs	r1, #74	; 0x4a
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 80026f0:	000a      	movs	r2, r1
 80026f2:	18bb      	adds	r3, r7, r2
 80026f4:	2100      	movs	r1, #0
 80026f6:	5e5b      	ldrsh	r3, [r3, r1]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 80026fc:	18bb      	adds	r3, r7, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	5e9b      	ldrsh	r3, [r3, r2]
 8002702:	e053      	b.n	80027ac <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002704:	2356      	movs	r3, #86	; 0x56
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2200      	movs	r2, #0
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	2354      	movs	r3, #84	; 0x54
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2200      	movs	r2, #0
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	e041      	b.n	800279a <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8002716:	2156      	movs	r1, #86	; 0x56
 8002718:	187b      	adds	r3, r7, r1
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800271e:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8002720:	187b      	adds	r3, r7, r1
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	3302      	adds	r3, #2
 8002726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002728:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	001a      	movs	r2, r3
 800272e:	2102      	movs	r1, #2
 8002730:	f7ff ff15 	bl	800255e <sensirion_common_check_crc>
 8002734:	0003      	movs	r3, r0
 8002736:	001a      	movs	r2, r3
 8002738:	214a      	movs	r1, #74	; 0x4a
 800273a:	187b      	adds	r3, r7, r1
 800273c:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 800273e:	000a      	movs	r2, r1
 8002740:	18bb      	adds	r3, r7, r2
 8002742:	2100      	movs	r1, #0
 8002744:	5e5b      	ldrsh	r3, [r3, r1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 800274a:	18bb      	adds	r3, r7, r2
 800274c:	2200      	movs	r2, #0
 800274e:	5e9b      	ldrsh	r3, [r3, r2]
 8002750:	e02c      	b.n	80027ac <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8002752:	2456      	movs	r4, #86	; 0x56
 8002754:	193b      	adds	r3, r7, r4
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800275a:	18d2      	adds	r2, r2, r3
 800275c:	2554      	movs	r5, #84	; 0x54
 800275e:	197b      	adds	r3, r7, r5
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	1979      	adds	r1, r7, r5
 8002764:	1c58      	adds	r0, r3, #1
 8002766:	8008      	strh	r0, [r1, #0]
 8002768:	0019      	movs	r1, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	185b      	adds	r3, r3, r1
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8002772:	193b      	adds	r3, r7, r4
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800277a:	18d2      	adds	r2, r2, r3
 800277c:	197b      	adds	r3, r7, r5
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	1979      	adds	r1, r7, r5
 8002782:	1c58      	adds	r0, r3, #1
 8002784:	8008      	strh	r0, [r1, #0]
 8002786:	0019      	movs	r1, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	185b      	adds	r3, r3, r1
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002790:	193b      	adds	r3, r7, r4
 8002792:	193a      	adds	r2, r7, r4
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	3203      	adds	r2, #3
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	2356      	movs	r3, #86	; 0x56
 800279c:	18fa      	adds	r2, r7, r3
 800279e:	2352      	movs	r3, #82	; 0x52
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	8812      	ldrh	r2, [r2, #0]
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d3b5      	bcc.n	8002716 <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b016      	add	sp, #88	; 0x58
 80027b2:	bdb0      	pop	{r4, r5, r7, pc}

080027b4 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6039      	str	r1, [r7, #0]
 80027bc:	0011      	movs	r1, r2
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	1c02      	adds	r2, r0, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	1c0a      	adds	r2, r1, #0
 80027c8:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80027ca:	250c      	movs	r5, #12
 80027cc:	197c      	adds	r4, r7, r5
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff ff66 	bl	80026aa <sensirion_i2c_read_words_as_bytes>
 80027de:	0003      	movs	r3, r0
 80027e0:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 80027e2:	197b      	adds	r3, r7, r5
 80027e4:	2200      	movs	r2, #0
 80027e6:	5e9b      	ldrsh	r3, [r3, r2]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <sensirion_i2c_read_words+0x40>
        return ret;
 80027ec:	197b      	adds	r3, r7, r5
 80027ee:	2200      	movs	r2, #0
 80027f0:	5e9b      	ldrsh	r3, [r3, r2]
 80027f2:	e02a      	b.n	800284a <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 80027f4:	230f      	movs	r3, #15
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e01c      	b.n	8002838 <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 80027fe:	200f      	movs	r0, #15
 8002800:	183b      	adds	r3, r7, r0
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	18d3      	adds	r3, r2, r3
 800280a:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21a      	sxth	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b21b      	sxth	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b219      	sxth	r1, r3
 8002820:	183b      	adds	r3, r7, r0
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	18d3      	adds	r3, r2, r3
 800282a:	b28a      	uxth	r2, r1
 800282c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800282e:	183b      	adds	r3, r7, r0
 8002830:	183a      	adds	r2, r7, r0
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	3201      	adds	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	1d3a      	adds	r2, r7, #4
 8002842:	8812      	ldrh	r2, [r2, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8da      	bhi.n	80027fe <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bdb0      	pop	{r4, r5, r7, pc}

08002852 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	0002      	movs	r2, r0
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	1c0a      	adds	r2, r1, #0
 8002862:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	8819      	ldrh	r1, [r3, #0]
 8002868:	240c      	movs	r4, #12
 800286a:	1938      	adds	r0, r7, r4
 800286c:	2300      	movs	r3, #0
 800286e:	2200      	movs	r2, #0
 8002870:	f7ff fe96 	bl	80025a0 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8002874:	1939      	adds	r1, r7, r4
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	0018      	movs	r0, r3
 800287e:	f000 f853 	bl	8002928 <sensirion_i2c_write>
 8002882:	0003      	movs	r3, r0
 8002884:	b21b      	sxth	r3, r3
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b005      	add	sp, #20
 800288c:	bd90      	pop	{r4, r7, pc}
	...

08002890 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <sensirion_i2c_init+0x4c>)
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <sensirion_i2c_init+0x50>)
 8002898:	601a      	str	r2, [r3, #0]
   // hi2c1.Init.ClockSpeed = 100000;
   // hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <sensirion_i2c_init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <sensirion_i2c_init+0x4c>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <sensirion_i2c_init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <sensirion_i2c_init+0x4c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <sensirion_i2c_init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <sensirion_i2c_init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <sensirion_i2c_init+0x54>)
 80028c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <sensirion_i2c_init+0x54>)
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	0389      	lsls	r1, r1, #14
 80028c8:	430a      	orrs	r2, r1
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <sensirion_i2c_init+0x4c>)
 80028ce:	0018      	movs	r0, r3
 80028d0:	f001 fc98 	bl	8004204 <HAL_I2C_Init>
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20000210 	.word	0x20000210
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40021000 	.word	0x40021000

080028e8 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	6039      	str	r1, [r7, #0]
 80028f0:	0011      	movs	r1, r2
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	1c02      	adds	r2, r0, #0
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	1c0a      	adds	r2, r1, #0
 80028fc:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	18db      	adds	r3, r3, r3
 8002906:	b299      	uxth	r1, r3
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <sensirion_i2c_read+0x3c>)
 8002910:	2464      	movs	r4, #100	; 0x64
 8002912:	9400      	str	r4, [sp, #0]
 8002914:	f001 fe44 	bl	80045a0 <HAL_I2C_Master_Receive>
 8002918:	0003      	movs	r3, r0
 800291a:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b003      	add	sp, #12
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	20000210 	.word	0x20000210

08002928 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b085      	sub	sp, #20
 800292c:	af02      	add	r7, sp, #8
 800292e:	6039      	str	r1, [r7, #0]
 8002930:	0011      	movs	r1, r2
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	1c02      	adds	r2, r0, #0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	1c0a      	adds	r2, r1, #0
 800293c:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	18db      	adds	r3, r3, r3
 8002946:	b299      	uxth	r1, r3
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	4805      	ldr	r0, [pc, #20]	; (8002964 <sensirion_i2c_write+0x3c>)
 8002950:	2464      	movs	r4, #100	; 0x64
 8002952:	9400      	str	r4, [sp, #0]
 8002954:	f001 fd1c 	bl	8004390 <HAL_I2C_Master_Transmit>
 8002958:	0003      	movs	r3, r0
 800295a:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b003      	add	sp, #12
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	20000210 	.word	0x20000210

08002968 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	22fa      	movs	r2, #250	; 0xfa
 8002974:	0091      	lsls	r1, r2, #2
 8002976:	0018      	movs	r0, r3
 8002978:	f7fd fbd8 	bl	800012c <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	22fa      	movs	r2, #250	; 0xfa
 8002984:	0091      	lsls	r1, r2, #2
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd fc56 	bl	8000238 <__aeabi_uidivmod>
 800298c:	1e0b      	subs	r3, r1, #0
 800298e:	d002      	beq.n	8002996 <sensirion_sleep_usec+0x2e>
        msec++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8002996:	f000 fb47 	bl	8003028 <HAL_GetHalVersion>
 800299a:	0003      	movs	r3, r0
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <sensirion_sleep_usec+0x50>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d802      	bhi.n	80029a8 <sensirion_sleep_usec+0x40>
        msec++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 fb18 	bl	8002fe0 <HAL_Delay>
}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b004      	add	sp, #16
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	010100ff 	.word	0x010100ff

080029bc <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 80029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	250f      	movs	r5, #15
 80029c8:	197b      	adds	r3, r7, r5
 80029ca:	1c02      	adds	r2, r0, #0
 80029cc:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 80029ce:	2616      	movs	r6, #22
 80029d0:	19bc      	adds	r4, r7, r6
 80029d2:	197b      	adds	r3, r7, r5
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f820 	bl	8002a1c <sht3x_measure>
 80029dc:	0003      	movs	r3, r0
 80029de:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 80029e0:	19bb      	adds	r3, r7, r6
 80029e2:	2200      	movs	r2, #0
 80029e4:	5e9b      	ldrsh	r3, [r3, r2]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <sht3x_measure_blocking_read+0x5c>)
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7ff ffbb 	bl	8002968 <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 80029f2:	19bc      	adds	r4, r7, r6
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	197b      	adds	r3, r7, r5
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 f823 	bl	8002a48 <sht3x_read>
 8002a02:	0003      	movs	r3, r0
 8002a04:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 8002a06:	2316      	movs	r3, #22
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b007      	add	sp, #28
 8002a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	00003a98 	.word	0x00003a98

08002a1c <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	0002      	movs	r2, r0
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <sht3x_measure+0x28>)
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff ff0d 	bl	8002852 <sensirion_i2c_write_cmd>
 8002a38:	0003      	movs	r3, r0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	20000180 	.word	0x20000180

08002a48 <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 8002a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	260f      	movs	r6, #15
 8002a54:	19bb      	adds	r3, r7, r6
 8002a56:	1c02      	adds	r2, r0, #0
 8002a58:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 8002a5a:	2316      	movs	r3, #22
 8002a5c:	18fc      	adds	r4, r7, r3
 8002a5e:	2510      	movs	r5, #16
 8002a60:	1979      	adds	r1, r7, r5
 8002a62:	19bb      	adds	r3, r7, r6
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2202      	movs	r2, #2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff fea3 	bl	80027b4 <sensirion_i2c_read_words>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8002a72:	197b      	adds	r3, r7, r5
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f810 	bl	8002aa0 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8002a80:	197b      	adds	r3, r7, r5
 8002a82:	885b      	ldrh	r3, [r3, #2]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f821 	bl	8002ad0 <tick_to_humidity>

    return ret;
 8002a8e:	2316      	movs	r3, #22
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2200      	movs	r2, #0
 8002a94:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b007      	add	sp, #28
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002aa0 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8002aae:	1dbb      	adds	r3, r7, #6
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <tick_to_temperature+0x28>)
 8002ab4:	4353      	muls	r3, r2
 8002ab6:	135b      	asrs	r3, r3, #13
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <tick_to_temperature+0x2c>)
 8002aba:	189a      	adds	r2, r3, r2
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	00005573 	.word	0x00005573
 8002acc:	ffff5038 	.word	0xffff5038

08002ad0 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	1dbb      	adds	r3, r7, #6
 8002adc:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8002ade:	1dbb      	adds	r3, r7, #6
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <tick_to_humidity+0x24>)
 8002ae4:	4353      	muls	r3, r2
 8002ae6:	135a      	asrs	r2, r3, #13
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	601a      	str	r2, [r3, #0]
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	000030d4 	.word	0x000030d4

08002af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_MspInit+0x24>)
 8002afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_MspInit+0x24>)
 8002b02:	2101      	movs	r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <HAL_MspInit+0x24>)
 8002b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_MspInit+0x24>)
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	0549      	lsls	r1, r1, #21
 8002b12:	430a      	orrs	r2, r1
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <HAL_ADC_MspInit+0x28>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d106      	bne.n	8002b40 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_ADC_MspInit+0x2c>)
 8002b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_ADC_MspInit+0x2c>)
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	0089      	lsls	r1, r1, #2
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40012400 	.word	0x40012400
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <HAL_ADC_MspDeInit+0x28>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d105      	bne.n	8002b6e <HAL_ADC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_ADC_MspDeInit+0x2c>)
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_ADC_MspDeInit+0x2c>)
 8002b68:	4905      	ldr	r1, [pc, #20]	; (8002b80 <HAL_ADC_MspDeInit+0x30>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	40012400 	.word	0x40012400
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	fffffdff 	.word	0xfffffdff

08002b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	240c      	movs	r4, #12
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	0018      	movs	r0, r3
 8002b92:	2314      	movs	r3, #20
 8002b94:	001a      	movs	r2, r3
 8002b96:	2100      	movs	r1, #0
 8002b98:	f003 ff6d 	bl	8006a76 <memset>
  if(hi2c->Instance==I2C1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_I2C_MspInit+0x7c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d128      	bne.n	8002bf8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bac:	2102      	movs	r1, #2
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bbe:	0021      	movs	r1, r4
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	22c0      	movs	r2, #192	; 0xc0
 8002bc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2212      	movs	r2, #18
 8002bca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2201      	movs	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_I2C_MspInit+0x84>)
 8002be2:	0019      	movs	r1, r3
 8002be4:	0010      	movs	r0, r2
 8002be6:	f001 f893 	bl	8003d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	0389      	lsls	r1, r1, #14
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b009      	add	sp, #36	; 0x24
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	40005400 	.word	0x40005400
 8002c04:	40021000 	.word	0x40021000
 8002c08:	50000400 	.word	0x50000400

08002c0c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <HAL_I2C_MspDeInit+0x3c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10f      	bne.n	8002c3e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_I2C_MspDeInit+0x40>)
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_I2C_MspDeInit+0x40>)
 8002c24:	490a      	ldr	r1, [pc, #40]	; (8002c50 <HAL_I2C_MspDeInit+0x44>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_I2C_MspDeInit+0x48>)
 8002c2c:	2140      	movs	r1, #64	; 0x40
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f001 f9dc 	bl	8003fec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_I2C_MspDeInit+0x48>)
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f001 f9d7 	bl	8003fec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	40005400 	.word	0x40005400
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	ffdfffff 	.word	0xffdfffff
 8002c54:	50000400 	.word	0x50000400

08002c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	2414      	movs	r4, #20
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	0018      	movs	r0, r3
 8002c66:	2314      	movs	r3, #20
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f003 ff03 	bl	8006a76 <memset>
  if(huart->Instance==LPUART1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <HAL_UART_MspInit+0xc0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d14a      	bne.n	8002d10 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	02c9      	lsls	r1, r1, #11
 8002c84:	430a      	orrs	r2, r1
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002c8e:	2104      	movs	r1, #4
 8002c90:	430a      	orrs	r2, r1
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2204      	movs	r2, #4
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_UART_MspInit+0xc4>)
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2203      	movs	r2, #3
 8002cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	2206      	movs	r2, #6
 8002cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_UART_MspInit+0xc8>)
 8002cda:	0019      	movs	r1, r3
 8002cdc:	0010      	movs	r0, r2
 8002cde:	f001 f817 	bl	8003d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ce2:	0021      	movs	r1, r4
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	00d2      	lsls	r2, r2, #3
 8002cea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2202      	movs	r2, #2
 8002cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2206      	movs	r2, #6
 8002d02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_UART_MspInit+0xcc>)
 8002d08:	0019      	movs	r1, r3
 8002d0a:	0010      	movs	r0, r2
 8002d0c:	f001 f800 	bl	8003d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b00b      	add	sp, #44	; 0x2c
 8002d16:	bd90      	pop	{r4, r7, pc}
 8002d18:	40004800 	.word	0x40004800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	50000800 	.word	0x50000800
 8002d24:	50000400 	.word	0x50000400

08002d28 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <HAL_UART_MspDeInit+0x40>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d111      	bne.n	8002d5e <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_UART_MspDeInit+0x44>)
 8002d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_UART_MspDeInit+0x44>)
 8002d40:	490b      	ldr	r1, [pc, #44]	; (8002d70 <HAL_UART_MspDeInit+0x48>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_UART_MspDeInit+0x4c>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f001 f94e 	bl	8003fec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_UART_MspDeInit+0x50>)
 8002d56:	0019      	movs	r1, r3
 8002d58:	0010      	movs	r0, r2
 8002d5a:	f001 f947 	bl	8003fec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	fffbffff 	.word	0xfffbffff
 8002d74:	50000800 	.word	0x50000800
 8002d78:	50000400 	.word	0x50000400

08002d7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <HAL_RTC_MspInit+0x38>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10e      	bne.n	8002dac <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_RTC_MspInit+0x3c>)
 8002d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RTC_MspInit+0x3c>)
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	02c9      	lsls	r1, r1, #11
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	2002      	movs	r0, #2
 8002da2:	f000 ff83 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002da6:	2002      	movs	r0, #2
 8002da8:	f000 ff95 	bl	8003cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40002800 	.word	0x40002800
 8002db8:	40021000 	.word	0x40021000

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <NMI_Handler+0x4>

08002dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <HardFault_Handler+0x4>

08002dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de0:	f000 f8e2 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <RTC_IRQHandler+0x14>)
 8002df2:	0018      	movs	r0, r3
 8002df4:	f003 f882 	bl	8005efc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	20000444 	.word	0x20000444

08002e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <_sbrk+0x5c>)
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <_sbrk+0x60>)
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <_sbrk+0x64>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <_sbrk+0x68>)
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	18d3      	adds	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d207      	bcs.n	8002e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e34:	f003 fdec 	bl	8006a10 <__errno>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	425b      	negs	r3, r3
 8002e42:	e009      	b.n	8002e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <_sbrk+0x64>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	18d2      	adds	r2, r2, r3
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <_sbrk+0x64>)
 8002e54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b006      	add	sp, #24
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20002000 	.word	0x20002000
 8002e64:	00000400 	.word	0x00000400
 8002e68:	2000025c 	.word	0x2000025c
 8002e6c:	200004d8 	.word	0x200004d8

08002e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002e7c:	4813      	ldr	r0, [pc, #76]	; (8002ecc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002e7e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002e80:	4813      	ldr	r0, [pc, #76]	; (8002ed0 <LoopForever+0x6>)
    LDR R1, [R0]
 8002e82:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002e84:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <LoopForever+0xa>)
    CMP R1, R2
 8002e88:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002e8a:	d105      	bne.n	8002e98 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002e8c:	4812      	ldr	r0, [pc, #72]	; (8002ed8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002e8e:	4913      	ldr	r1, [pc, #76]	; (8002edc <LoopForever+0x12>)
    STR R1, [R0]
 8002e90:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002e92:	4813      	ldr	r0, [pc, #76]	; (8002ee0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002e94:	4913      	ldr	r1, [pc, #76]	; (8002ee4 <LoopForever+0x1a>)
    STR R1, [R0]
 8002e96:	6001      	str	r1, [r0, #0]

08002e98 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e98:	4813      	ldr	r0, [pc, #76]	; (8002ee8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002e9a:	4914      	ldr	r1, [pc, #80]	; (8002eec <LoopForever+0x22>)
  ldr r2, =_sidata
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <LoopForever+0x26>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea0:	e002      	b.n	8002ea8 <LoopCopyDataInit>

08002ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea6:	3304      	adds	r3, #4

08002ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eac:	d3f9      	bcc.n	8002ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eae:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002eb0:	4c11      	ldr	r4, [pc, #68]	; (8002ef8 <LoopForever+0x2e>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb4:	e001      	b.n	8002eba <LoopFillZerobss>

08002eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb8:	3204      	adds	r2, #4

08002eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ebc:	d3fb      	bcc.n	8002eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ebe:	f7ff ffd7 	bl	8002e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f003 fdab 	bl	8006a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec6:	f7fe fca1 	bl	800180c <main>

08002eca <LoopForever>:

LoopForever:
    b LoopForever
 8002eca:	e7fe      	b.n	8002eca <LoopForever>
   ldr   r0, =_estack
 8002ecc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002ed0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002ed4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002ed8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002edc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002ee0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002ee4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002ef0:	080075e8 	.word	0x080075e8
  ldr r2, =_sbss
 8002ef4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002ef8:	200004d8 	.word	0x200004d8

08002efc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC1_IRQHandler>
	...

08002f00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_Init+0x3c>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_Init+0x3c>)
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f000 f811 	bl	8002f40 <HAL_InitTick>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e001      	b.n	8002f2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f2a:	f7ff fde5 	bl	8002af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f2e:	1dfb      	adds	r3, r7, #7
 8002f30:	781b      	ldrb	r3, [r3, #0]
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	40022000 	.word	0x40022000

08002f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_InitTick+0x5c>)
 8002f4a:	681c      	ldr	r4, [r3, #0]
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_InitTick+0x60>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	0019      	movs	r1, r3
 8002f52:	23fa      	movs	r3, #250	; 0xfa
 8002f54:	0098      	lsls	r0, r3, #2
 8002f56:	f7fd f8e9 	bl	800012c <__udivsi3>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	0020      	movs	r0, r4
 8002f60:	f7fd f8e4 	bl	800012c <__udivsi3>
 8002f64:	0003      	movs	r3, r0
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fec5 	bl	8003cf6 <HAL_SYSTICK_Config>
 8002f6c:	1e03      	subs	r3, r0, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e00f      	b.n	8002f94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d80b      	bhi.n	8002f92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	425b      	negs	r3, r3
 8002f80:	2200      	movs	r2, #0
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fe92 	bl	8003cac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_InitTick+0x64>)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b003      	add	sp, #12
 8002f9a:	bd90      	pop	{r4, r7, pc}
 8002f9c:	20000184 	.word	0x20000184
 8002fa0:	2000018c 	.word	0x2000018c
 8002fa4:	20000188 	.word	0x20000188

08002fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_IncTick+0x1c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_IncTick+0x20>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	18d2      	adds	r2, r2, r3
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_IncTick+0x20>)
 8002fba:	601a      	str	r2, [r3, #0]
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	2000018c 	.word	0x2000018c
 8002fc8:	200004c4 	.word	0x200004c4

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <HAL_GetTick+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	200004c4 	.word	0x200004c4

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	d005      	beq.n	8003006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_Delay+0x44>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	001a      	movs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	189b      	adds	r3, r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	f7ff ffe0 	bl	8002fcc <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f7      	bhi.n	8003008 <HAL_Delay+0x28>
  {
  }
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	2000018c 	.word	0x2000018c

08003028 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 800302c:	4b01      	ldr	r3, [pc, #4]	; (8003034 <HAL_GetHalVersion+0xc>)
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	010a0500 	.word	0x010a0500

08003038 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e159      	b.n	80032fe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2250      	movs	r2, #80	; 0x50
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fd5c 	bl	8002b20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	2210      	movs	r2, #16
 800306e:	4013      	ands	r3, r2
 8003070:	2b10      	cmp	r3, #16
 8003072:	d005      	beq.n	8003080 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2204      	movs	r2, #4
 800307c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800307e:	d00b      	beq.n	8003098 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	2210      	movs	r2, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2250      	movs	r2, #80	; 0x50
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e132      	b.n	80032fe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	4a9a      	ldr	r2, [pc, #616]	; (8003308 <HAL_ADC_Init+0x2d0>)
 800309e:	4013      	ands	r3, r2
 80030a0:	2202      	movs	r2, #2
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2203      	movs	r2, #3
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d108      	bne.n	80030c8 <HAL_ADC_Init+0x90>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_Init+0x90>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_ADC_Init+0x92>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d149      	bne.n	8003162 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d00b      	beq.n	80030f2 <HAL_ADC_Init+0xba>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	05db      	lsls	r3, r3, #23
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d005      	beq.n	80030f2 <HAL_ADC_Init+0xba>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d111      	bne.n	8003116 <HAL_ADC_Init+0xde>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	0892      	lsrs	r2, r2, #2
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6919      	ldr	r1, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	611a      	str	r2, [r3, #16]
 8003114:	e014      	b.n	8003140 <HAL_ADC_Init+0x108>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0092      	lsls	r2, r2, #2
 8003122:	0892      	lsrs	r2, r2, #2
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_ADC_Init+0x2d4>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b78      	ldr	r3, [pc, #480]	; (800330c <HAL_ADC_Init+0x2d4>)
 800312c:	4978      	ldr	r1, [pc, #480]	; (8003310 <HAL_ADC_Init+0x2d8>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_ADC_Init+0x2d4>)
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	4b74      	ldr	r3, [pc, #464]	; (800330c <HAL_ADC_Init+0x2d4>)
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2118      	movs	r1, #24
 800314c:	438a      	bics	r2, r1
 800314e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_ADC_Init+0x2d4>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b69      	ldr	r3, [pc, #420]	; (800330c <HAL_ADC_Init+0x2d4>)
 8003168:	496a      	ldr	r1, [pc, #424]	; (8003314 <HAL_ADC_Init+0x2dc>)
 800316a:	400a      	ands	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800316e:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_ADC_Init+0x2d4>)
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	065a      	lsls	r2, r3, #25
 8003178:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_ADC_Init+0x2d4>)
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	055b      	lsls	r3, r3, #21
 8003188:	4013      	ands	r3, r2
 800318a:	d108      	bne.n	800319e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	0549      	lsls	r1, r1, #21
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	495b      	ldr	r1, [pc, #364]	; (8003318 <HAL_ADC_Init+0x2e0>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68d9      	ldr	r1, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_Init+0x18c>
 80031c0:	2304      	movs	r3, #4
 80031c2:	e000      	b.n	80031c6 <HAL_ADC_Init+0x18e>
 80031c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2020      	movs	r0, #32
 80031cc:	5c1b      	ldrb	r3, [r3, r0]
 80031ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80031d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	202c      	movs	r0, #44	; 0x2c
 80031d6:	5c1b      	ldrb	r3, [r3, r0]
 80031d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80031e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80031e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80031f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031fe:	23c2      	movs	r3, #194	; 0xc2
 8003200:	33ff      	adds	r3, #255	; 0xff
 8003202:	429a      	cmp	r2, r3
 8003204:	d00b      	beq.n	800321e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68d9      	ldr	r1, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d11a      	bne.n	800325e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	5c9b      	ldrb	r3, [r3, r2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	0249      	lsls	r1, r1, #9
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]
 8003244:	e00b      	b.n	800325e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	2220      	movs	r2, #32
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	2201      	movs	r2, #1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d11f      	bne.n	80032a6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	492a      	ldr	r1, [pc, #168]	; (800331c <HAL_ADC_Init+0x2e4>)
 8003272:	400a      	ands	r2, r1
 8003274:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6919      	ldr	r1, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003284:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800328a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2101      	movs	r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]
 80032a4:	e00e      	b.n	80032c4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2201      	movs	r2, #1
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	438a      	bics	r2, r1
 80032c2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2107      	movs	r1, #7
 80032d0:	438a      	bics	r2, r1
 80032d2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6959      	ldr	r1, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	2203      	movs	r2, #3
 80032f2:	4393      	bics	r3, r2
 80032f4:	2201      	movs	r2, #1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	fffffefd 	.word	0xfffffefd
 800330c:	40012708 	.word	0x40012708
 8003310:	ffc3ffff 	.word	0xffc3ffff
 8003314:	fdffffff 	.word	0xfdffffff
 8003318:	fffe0219 	.word	0xfffe0219
 800331c:	fffffc03 	.word	0xfffffc03

08003320 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003328:	230f      	movs	r3, #15
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07d      	b.n	8003436 <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	2202      	movs	r2, #2
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003346:	250f      	movs	r5, #15
 8003348:	197c      	adds	r4, r7, r5
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 faf6 	bl	800393e <ADC_ConversionStop>
 8003352:	0003      	movs	r3, r0
 8003354:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003356:	197b      	adds	r3, r7, r5
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10d      	bne.n	800337a <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800335e:	197c      	adds	r4, r7, r5
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0018      	movs	r0, r3
 8003364:	f000 fa84 	bl	8003870 <ADC_Disable>
 8003368:	0003      	movs	r3, r0
 800336a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 800336c:	197b      	adds	r3, r7, r5
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d002      	beq.n	800337a <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800337a:	230f      	movs	r3, #15
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d051      	beq.n	8003428 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	492c      	ldr	r1, [pc, #176]	; (8003440 <HAL_ADC_DeInit+0x120>)
 8003390:	400a      	ands	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_ADC_DeInit+0x124>)
 800339a:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4928      	ldr	r1, [pc, #160]	; (8003448 <HAL_ADC_DeInit+0x128>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4925      	ldr	r1, [pc, #148]	; (800344c <HAL_ADC_DeInit+0x12c>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4922      	ldr	r1, [pc, #136]	; (8003450 <HAL_ADC_DeInit+0x130>)
 80033c8:	400a      	ands	r2, r1
 80033ca:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2107      	movs	r1, #7
 80033d8:	438a      	bics	r2, r1
 80033da:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	491b      	ldr	r1, [pc, #108]	; (8003454 <HAL_ADC_DeInit+0x134>)
 80033e8:	400a      	ands	r2, r1
 80033ea:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	22b4      	movs	r2, #180	; 0xb4
 80033f2:	589a      	ldr	r2, [r3, r2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	217f      	movs	r1, #127	; 0x7f
 80033fa:	438a      	bics	r2, r1
 80033fc:	21b4      	movs	r1, #180	; 0xb4
 80033fe:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	22b4      	movs	r2, #180	; 0xb4
 8003406:	589a      	ldr	r2, [r3, r2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	217f      	movs	r1, #127	; 0x7f
 800340e:	438a      	bics	r2, r1
 8003410:	21b4      	movs	r1, #180	; 0xb4
 8003412:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff fb9a 	bl	8002b50 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2250      	movs	r2, #80	; 0x50
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003430:	230f      	movs	r3, #15
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bdb0      	pop	{r4, r5, r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	fffff760 	.word	0xfffff760
 8003444:	0000089f 	.word	0x0000089f
 8003448:	efffffff 	.word	0xefffffff
 800344c:	833e0200 	.word	0x833e0200
 8003450:	3ffffc02 	.word	0x3ffffc02
 8003454:	f000f000 	.word	0xf000f000

08003458 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003460:	230f      	movs	r3, #15
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2204      	movs	r2, #4
 8003470:	4013      	ands	r3, r2
 8003472:	d138      	bne.n	80034e6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2250      	movs	r2, #80	; 0x50
 8003478:	5c9b      	ldrb	r3, [r3, r2]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_ADC_Start+0x2a>
 800347e:	2302      	movs	r3, #2
 8003480:	e038      	b.n	80034f4 <HAL_ADC_Start+0x9c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2250      	movs	r2, #80	; 0x50
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d007      	beq.n	80034a2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003492:	230f      	movs	r3, #15
 8003494:	18fc      	adds	r4, r7, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f000 f981 	bl	80037a0 <ADC_Enable>
 800349e:	0003      	movs	r3, r0
 80034a0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034a2:	230f      	movs	r3, #15
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d120      	bne.n	80034ee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_ADC_Start+0xa4>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	0052      	lsls	r2, r2, #1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2250      	movs	r2, #80	; 0x50
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	221c      	movs	r2, #28
 80034d2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2104      	movs	r1, #4
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	e003      	b.n	80034ee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034e6:	230f      	movs	r3, #15
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034ee:	230f      	movs	r3, #15
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b005      	add	sp, #20
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	fffff0fe 	.word	0xfffff0fe

08003500 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003508:	230f      	movs	r3, #15
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2250      	movs	r2, #80	; 0x50
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_ADC_Stop+0x1e>
 800351a:	2302      	movs	r3, #2
 800351c:	e029      	b.n	8003572 <HAL_ADC_Stop+0x72>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2250      	movs	r2, #80	; 0x50
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003526:	250f      	movs	r5, #15
 8003528:	197c      	adds	r4, r7, r5
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f000 fa06 	bl	800393e <ADC_ConversionStop>
 8003532:	0003      	movs	r3, r0
 8003534:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003536:	197b      	adds	r3, r7, r5
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d112      	bne.n	8003564 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800353e:	197c      	adds	r4, r7, r5
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0018      	movs	r0, r3
 8003544:	f000 f994 	bl	8003870 <ADC_Disable>
 8003548:	0003      	movs	r3, r0
 800354a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800354c:	197b      	adds	r3, r7, r5
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_ADC_Stop+0x7c>)
 800355a:	4013      	ands	r3, r2
 800355c:	2201      	movs	r2, #1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2250      	movs	r2, #80	; 0x50
 8003568:	2100      	movs	r1, #0
 800356a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800356c:	230f      	movs	r3, #15
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	781b      	ldrb	r3, [r3, #0]
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bdb0      	pop	{r4, r5, r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	fffffefe 	.word	0xfffffefe

08003580 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b08      	cmp	r3, #8
 8003598:	d102      	bne.n	80035a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800359a:	2308      	movs	r3, #8
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	e014      	b.n	80035ca <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10b      	bne.n	80035c6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	2220      	movs	r2, #32
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2250      	movs	r2, #80	; 0x50
 80035be:	2100      	movs	r1, #0
 80035c0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e072      	b.n	80036ac <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80035c6:	230c      	movs	r3, #12
 80035c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80035ca:	f7ff fcff 	bl	8002fcc <HAL_GetTick>
 80035ce:	0003      	movs	r3, r0
 80035d0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80035d2:	e01f      	b.n	8003614 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	3301      	adds	r3, #1
 80035d8:	d01c      	beq.n	8003614 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_ADC_PollForConversion+0x70>
 80035e0:	f7ff fcf4 	bl	8002fcc <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d211      	bcs.n	8003614 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4013      	ands	r3, r2
 80035fa:	d10b      	bne.n	8003614 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	2204      	movs	r2, #4
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2250      	movs	r2, #80	; 0x50
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e04b      	b.n	80036ac <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4013      	ands	r3, r2
 800361e:	d0d9      	beq.n	80035d4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	23c0      	movs	r3, #192	; 0xc0
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4013      	ands	r3, r2
 800363a:	d12e      	bne.n	800369a <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003642:	2b00      	cmp	r3, #0
 8003644:	d129      	bne.n	800369a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2208      	movs	r2, #8
 800364e:	4013      	ands	r3, r2
 8003650:	2b08      	cmp	r3, #8
 8003652:	d122      	bne.n	800369a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2204      	movs	r2, #4
 800365c:	4013      	ands	r3, r2
 800365e:	d110      	bne.n	8003682 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	210c      	movs	r1, #12
 800366c:	438a      	bics	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	4a0f      	ldr	r2, [pc, #60]	; (80036b4 <HAL_ADC_PollForConversion+0x134>)
 8003676:	4013      	ands	r3, r2
 8003678:	2201      	movs	r2, #1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
 8003680:	e00b      	b.n	800369a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	2220      	movs	r2, #32
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	2201      	movs	r2, #1
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	220c      	movs	r2, #12
 80036a8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b004      	add	sp, #16
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	fffffefe 	.word	0xfffffefe

080036b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b002      	add	sp, #8
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2250      	movs	r2, #80	; 0x50
 80036de:	5c9b      	ldrb	r3, [r3, r2]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x18>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e050      	b.n	800378a <HAL_ADC_ConfigChannel+0xba>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2250      	movs	r2, #80	; 0x50
 80036ec:	2101      	movs	r1, #1
 80036ee:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2204      	movs	r2, #4
 80036f8:	4013      	ands	r3, r2
 80036fa:	d00b      	beq.n	8003714 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	2220      	movs	r2, #32
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2250      	movs	r2, #80	; 0x50
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e03a      	b.n	800378a <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_ADC_ConfigChannel+0xc4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	035b      	lsls	r3, r3, #13
 800372a:	0b5a      	lsrs	r2, r3, #13
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	4013      	ands	r3, r2
 800373e:	d01f      	beq.n	8003780 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003740:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_ADC_ConfigChannel+0xc8>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_ADC_ConfigChannel+0xc8>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	03c9      	lsls	r1, r1, #15
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e017      	b.n	8003780 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	035b      	lsls	r3, r3, #13
 800375c:	0b5b      	lsrs	r3, r3, #13
 800375e:	43d9      	mvns	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	400a      	ands	r2, r1
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	4013      	ands	r3, r2
 8003772:	d005      	beq.n	8003780 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_ADC_ConfigChannel+0xc8>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_ADC_ConfigChannel+0xc8>)
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <HAL_ADC_ConfigChannel+0xcc>)
 800377c:	400a      	ands	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2250      	movs	r2, #80	; 0x50
 8003784:	2100      	movs	r1, #0
 8003786:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	00001001 	.word	0x00001001
 8003798:	40012708 	.word	0x40012708
 800379c:	ffbfffff 	.word	0xffbfffff

080037a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2203      	movs	r2, #3
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d108      	bne.n	80037cc <ADC_Enable+0x2c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <ADC_Enable+0x2c>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <ADC_Enable+0x2e>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d146      	bne.n	8003860 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a24      	ldr	r2, [pc, #144]	; (800386c <ADC_Enable+0xcc>)
 80037da:	4013      	ands	r3, r2
 80037dc:	d00d      	beq.n	80037fa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	2210      	movs	r2, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	2201      	movs	r2, #1
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e033      	b.n	8003862 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800380a:	2001      	movs	r0, #1
 800380c:	f000 f8e4 	bl	80039d8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003810:	f7ff fbdc 	bl	8002fcc <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003818:	e01b      	b.n	8003852 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800381a:	f7ff fbd7 	bl	8002fcc <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b0a      	cmp	r3, #10
 8003826:	d914      	bls.n	8003852 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	4013      	ands	r3, r2
 8003832:	2b01      	cmp	r3, #1
 8003834:	d00d      	beq.n	8003852 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	2210      	movs	r2, #16
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	2201      	movs	r2, #1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e007      	b.n	8003862 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	2b01      	cmp	r3, #1
 800385e:	d1dc      	bne.n	800381a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b004      	add	sp, #16
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	80000017 	.word	0x80000017

08003870 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2203      	movs	r2, #3
 8003884:	4013      	ands	r3, r2
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <ADC_Disable+0x2c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2201      	movs	r2, #1
 8003892:	4013      	ands	r3, r2
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <ADC_Disable+0x2c>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <ADC_Disable+0x2e>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d048      	beq.n	8003934 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2205      	movs	r2, #5
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d110      	bne.n	80038d2 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2102      	movs	r1, #2
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2203      	movs	r2, #3
 80038c6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038c8:	f7ff fb80 	bl	8002fcc <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038d0:	e029      	b.n	8003926 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	2210      	movs	r2, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	2201      	movs	r2, #1
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e023      	b.n	8003936 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ee:	f7ff fb6d 	bl	8002fcc <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b0a      	cmp	r3, #10
 80038fa:	d914      	bls.n	8003926 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2201      	movs	r2, #1
 8003904:	4013      	ands	r3, r2
 8003906:	2b01      	cmp	r3, #1
 8003908:	d10d      	bne.n	8003926 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	2210      	movs	r2, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	2201      	movs	r2, #1
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e007      	b.n	8003936 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2201      	movs	r2, #1
 800392e:	4013      	ands	r3, r2
 8003930:	2b01      	cmp	r3, #1
 8003932:	d0dc      	beq.n	80038ee <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b004      	add	sp, #16
 800393c:	bd80      	pop	{r7, pc}

0800393e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2204      	movs	r2, #4
 8003952:	4013      	ands	r3, r2
 8003954:	d03a      	beq.n	80039cc <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2204      	movs	r2, #4
 800395e:	4013      	ands	r3, r2
 8003960:	2b04      	cmp	r3, #4
 8003962:	d10d      	bne.n	8003980 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2202      	movs	r2, #2
 800396c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800396e:	d107      	bne.n	8003980 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2110      	movs	r1, #16
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003980:	f7ff fb24 	bl	8002fcc <HAL_GetTick>
 8003984:	0003      	movs	r3, r0
 8003986:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003988:	e01a      	b.n	80039c0 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800398a:	f7ff fb1f 	bl	8002fcc <HAL_GetTick>
 800398e:	0002      	movs	r2, r0
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b0a      	cmp	r3, #10
 8003996:	d913      	bls.n	80039c0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2204      	movs	r2, #4
 80039a0:	4013      	ands	r3, r2
 80039a2:	d00d      	beq.n	80039c0 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	2210      	movs	r2, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	2201      	movs	r2, #1
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e006      	b.n	80039ce <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2204      	movs	r2, #4
 80039c8:	4013      	ands	r3, r2
 80039ca:	d1de      	bne.n	800398a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b004      	add	sp, #16
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <ADC_DelayMicroSecond+0x38>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	490b      	ldr	r1, [pc, #44]	; (8003a14 <ADC_DelayMicroSecond+0x3c>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7fc fba0 	bl	800012c <__udivsi3>
 80039ec:	0003      	movs	r3, r0
 80039ee:	001a      	movs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4353      	muls	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80039f6:	e002      	b.n	80039fe <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	20000184 	.word	0x20000184
 8003a14:	000f4240 	.word	0x000f4240

08003a18 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a22:	2317      	movs	r3, #23
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2250      	movs	r2, #80	; 0x50
 8003a36:	5c9b      	ldrb	r3, [r3, r2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_ADCEx_Calibration_Start+0x28>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e083      	b.n	8003b48 <HAL_ADCEx_Calibration_Start+0x130>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2250      	movs	r2, #80	; 0x50
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d108      	bne.n	8003a68 <HAL_ADCEx_Calibration_Start+0x50>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_ADCEx_Calibration_Start+0x50>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_ADCEx_Calibration_Start+0x52>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d15b      	bne.n	8003b26 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	4a37      	ldr	r2, [pc, #220]	; (8003b50 <HAL_ADCEx_Calibration_Start+0x138>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	2202      	movs	r2, #2
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2203      	movs	r2, #3
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2103      	movs	r1, #3
 8003a96:	438a      	bics	r2, r1
 8003a98:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	0609      	lsls	r1, r1, #24
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003aac:	f7ff fa8e 	bl	8002fcc <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ab4:	e01d      	b.n	8003af2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ab6:	f7ff fa89 	bl	8002fcc <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b0a      	cmp	r3, #10
 8003ac2:	d916      	bls.n	8003af2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0fdb      	lsrs	r3, r3, #31
 8003acc:	07da      	lsls	r2, r3, #31
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d10d      	bne.n	8003af2 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	2212      	movs	r2, #18
 8003adc:	4393      	bics	r3, r2
 8003ade:	2210      	movs	r2, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2250      	movs	r2, #80	; 0x50
 8003aea:	2100      	movs	r1, #0
 8003aec:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02a      	b.n	8003b48 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	0fdb      	lsrs	r3, r3, #31
 8003afa:	07da      	lsls	r2, r3, #31
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d0d8      	beq.n	8003ab6 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68d9      	ldr	r1, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	2203      	movs	r2, #3
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
 8003b24:	e009      	b.n	8003b3a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003b32:	2317      	movs	r3, #23
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2250      	movs	r2, #80	; 0x50
 8003b3e:	2100      	movs	r1, #0
 8003b40:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b42:	2317      	movs	r3, #23
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	fffffefd 	.word	0xfffffefd

08003b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	1dfb      	adds	r3, r7, #7
 8003b5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b7f      	cmp	r3, #127	; 0x7f
 8003b66:	d809      	bhi.n	8003b7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	231f      	movs	r3, #31
 8003b70:	401a      	ands	r2, r3
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <__NVIC_EnableIRQ+0x30>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	4091      	lsls	r1, r2
 8003b78:	000a      	movs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
  }
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	e000e100 	.word	0xe000e100

08003b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	0002      	movs	r2, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b96:	1dfb      	adds	r3, r7, #7
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b9c:	d828      	bhi.n	8003bf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b9e:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <__NVIC_SetPriority+0xd4>)
 8003ba0:	1dfb      	adds	r3, r7, #7
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	b25b      	sxtb	r3, r3
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	33c0      	adds	r3, #192	; 0xc0
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	589b      	ldr	r3, [r3, r2]
 8003bae:	1dfa      	adds	r2, r7, #7
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	00d2      	lsls	r2, r2, #3
 8003bba:	21ff      	movs	r1, #255	; 0xff
 8003bbc:	4091      	lsls	r1, r2
 8003bbe:	000a      	movs	r2, r1
 8003bc0:	43d2      	mvns	r2, r2
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	22ff      	movs	r2, #255	; 0xff
 8003bcc:	401a      	ands	r2, r3
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	4003      	ands	r3, r0
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bdc:	481f      	ldr	r0, [pc, #124]	; (8003c5c <__NVIC_SetPriority+0xd4>)
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	430a      	orrs	r2, r1
 8003be8:	33c0      	adds	r3, #192	; 0xc0
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003bee:	e031      	b.n	8003c54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <__NVIC_SetPriority+0xd8>)
 8003bf2:	1dfb      	adds	r3, r7, #7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	400b      	ands	r3, r1
 8003bfc:	3b08      	subs	r3, #8
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3306      	adds	r3, #6
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	3304      	adds	r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1dfa      	adds	r2, r7, #7
 8003c0c:	7812      	ldrb	r2, [r2, #0]
 8003c0e:	0011      	movs	r1, r2
 8003c10:	2203      	movs	r2, #3
 8003c12:	400a      	ands	r2, r1
 8003c14:	00d2      	lsls	r2, r2, #3
 8003c16:	21ff      	movs	r1, #255	; 0xff
 8003c18:	4091      	lsls	r1, r2
 8003c1a:	000a      	movs	r2, r1
 8003c1c:	43d2      	mvns	r2, r2
 8003c1e:	401a      	ands	r2, r3
 8003c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	22ff      	movs	r2, #255	; 0xff
 8003c28:	401a      	ands	r2, r3
 8003c2a:	1dfb      	adds	r3, r7, #7
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	2303      	movs	r3, #3
 8003c32:	4003      	ands	r3, r0
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c38:	4809      	ldr	r0, [pc, #36]	; (8003c60 <__NVIC_SetPriority+0xd8>)
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	001c      	movs	r4, r3
 8003c40:	230f      	movs	r3, #15
 8003c42:	4023      	ands	r3, r4
 8003c44:	3b08      	subs	r3, #8
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	3306      	adds	r3, #6
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	18c3      	adds	r3, r0, r3
 8003c50:	3304      	adds	r3, #4
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b003      	add	sp, #12
 8003c5a:	bd90      	pop	{r4, r7, pc}
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	045b      	lsls	r3, r3, #17
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d301      	bcc.n	8003c7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e010      	b.n	8003c9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <SysTick_Config+0x44>)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	3a01      	subs	r2, #1
 8003c82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c84:	2301      	movs	r3, #1
 8003c86:	425b      	negs	r3, r3
 8003c88:	2103      	movs	r1, #3
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7ff ff7c 	bl	8003b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <SysTick_Config+0x44>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <SysTick_Config+0x44>)
 8003c98:	2207      	movs	r2, #7
 8003c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	e000e010 	.word	0xe000e010

08003cac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	210f      	movs	r1, #15
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	1c02      	adds	r2, r0, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7ff ff5d 	bl	8003b88 <__NVIC_SetPriority>
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	0002      	movs	r2, r0
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ff33 	bl	8003b54 <__NVIC_EnableIRQ>
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b002      	add	sp, #8
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7ff ffaf 	bl	8003c64 <SysTick_Config>
 8003d06:	0003      	movs	r3, r0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d26:	e149      	b.n	8003fbc <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4091      	lsls	r1, r2
 8003d32:	000a      	movs	r2, r1
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d100      	bne.n	8003d40 <HAL_GPIO_Init+0x30>
 8003d3e:	e13a      	b.n	8003fb6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2203      	movs	r2, #3
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d005      	beq.n	8003d58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d130      	bne.n	8003dba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	409a      	lsls	r2, r3
 8003d66:	0013      	movs	r3, r2
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	0013      	movs	r3, r2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d8e:	2201      	movs	r2, #1
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	409a      	lsls	r2, r3
 8003d94:	0013      	movs	r3, r2
 8003d96:	43da      	mvns	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	2201      	movs	r2, #1
 8003da6:	401a      	ands	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	409a      	lsls	r2, r3
 8003dac:	0013      	movs	r3, r2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d017      	beq.n	8003df6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	0013      	movs	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d123      	bne.n	8003e4a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	58d3      	ldr	r3, [r2, r3]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2207      	movs	r2, #7
 8003e14:	4013      	ands	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2107      	movs	r1, #7
 8003e2e:	400b      	ands	r3, r1
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	409a      	lsls	r2, r3
 8003e34:	0013      	movs	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	409a      	lsls	r2, r3
 8003e58:	0013      	movs	r3, r2
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2203      	movs	r2, #3
 8003e68:	401a      	ands	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	0013      	movs	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	23c0      	movs	r3, #192	; 0xc0
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	4013      	ands	r3, r2
 8003e88:	d100      	bne.n	8003e8c <HAL_GPIO_Init+0x17c>
 8003e8a:	e094      	b.n	8003fb6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8c:	4b51      	ldr	r3, [pc, #324]	; (8003fd4 <HAL_GPIO_Init+0x2c4>)
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e90:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <HAL_GPIO_Init+0x2c4>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e98:	4a4f      	ldr	r2, [pc, #316]	; (8003fd8 <HAL_GPIO_Init+0x2c8>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	589b      	ldr	r3, [r3, r2]
 8003ea4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	4013      	ands	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	220f      	movs	r2, #15
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	0013      	movs	r3, r2
 8003eb4:	43da      	mvns	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	23a0      	movs	r3, #160	; 0xa0
 8003ec0:	05db      	lsls	r3, r3, #23
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d013      	beq.n	8003eee <HAL_GPIO_Init+0x1de>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <HAL_GPIO_Init+0x2cc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00d      	beq.n	8003eea <HAL_GPIO_Init+0x1da>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a43      	ldr	r2, [pc, #268]	; (8003fe0 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <HAL_GPIO_Init+0x1d6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a42      	ldr	r2, [pc, #264]	; (8003fe4 <HAL_GPIO_Init+0x2d4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_GPIO_Init+0x1d2>
 8003ede:	2305      	movs	r3, #5
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x1e0>
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	e004      	b.n	8003ef0 <HAL_GPIO_Init+0x1e0>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e002      	b.n	8003ef0 <HAL_GPIO_Init+0x1e0>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_GPIO_Init+0x1e0>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	2103      	movs	r1, #3
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	4093      	lsls	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f00:	4935      	ldr	r1, [pc, #212]	; (8003fd8 <HAL_GPIO_Init+0x2c8>)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	3302      	adds	r3, #2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f0e:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	43da      	mvns	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	025b      	lsls	r3, r3, #9
 8003f26:	4013      	ands	r3, r2
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f32:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003f38:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	029b      	lsls	r3, r3, #10
 8003f50:	4013      	ands	r3, r2
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f62:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	035b      	lsls	r3, r3, #13
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	039b      	lsls	r3, r3, #14
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	40da      	lsrs	r2, r3
 8003fc4:	1e13      	subs	r3, r2, #0
 8003fc6:	d000      	beq.n	8003fca <HAL_GPIO_Init+0x2ba>
 8003fc8:	e6ae      	b.n	8003d28 <HAL_GPIO_Init+0x18>
  }
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b006      	add	sp, #24
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	50000400 	.word	0x50000400
 8003fe0:	50000800 	.word	0x50000800
 8003fe4:	50001c00 	.word	0x50001c00
 8003fe8:	40010400 	.word	0x40010400

08003fec <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8004002:	e0b0      	b.n	8004166 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8004004:	2201      	movs	r2, #1
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	409a      	lsls	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d100      	bne.n	8004018 <HAL_GPIO_DeInit+0x2c>
 8004016:	e0a3      	b.n	8004160 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004018:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_GPIO_DeInit+0x190>)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	589b      	ldr	r3, [r3, r2]
 8004024:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2203      	movs	r2, #3
 800402a:	4013      	ands	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220f      	movs	r2, #15
 8004030:	409a      	lsls	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	23a0      	movs	r3, #160	; 0xa0
 800403c:	05db      	lsls	r3, r3, #23
 800403e:	429a      	cmp	r2, r3
 8004040:	d013      	beq.n	800406a <HAL_GPIO_DeInit+0x7e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <HAL_GPIO_DeInit+0x194>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_DeInit+0x7a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4d      	ldr	r2, [pc, #308]	; (8004184 <HAL_GPIO_DeInit+0x198>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_DeInit+0x76>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_GPIO_DeInit+0x19c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_DeInit+0x72>
 800405a:	2305      	movs	r3, #5
 800405c:	e006      	b.n	800406c <HAL_GPIO_DeInit+0x80>
 800405e:	2306      	movs	r3, #6
 8004060:	e004      	b.n	800406c <HAL_GPIO_DeInit+0x80>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_DeInit+0x80>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_DeInit+0x80>
 800406a:	2300      	movs	r3, #0
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	2103      	movs	r1, #3
 8004070:	400a      	ands	r2, r1
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	4093      	lsls	r3, r2
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d132      	bne.n	80040e2 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800407c:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43d9      	mvns	r1, r3
 8004084:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 8004086:	400a      	ands	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800408a:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	43d9      	mvns	r1, r3
 8004092:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 8004094:	400a      	ands	r2, r1
 8004096:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004098:	4b3c      	ldr	r3, [pc, #240]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43d9      	mvns	r1, r3
 80040a0:	4b3a      	ldr	r3, [pc, #232]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80040a6:	4b39      	ldr	r3, [pc, #228]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43d9      	mvns	r1, r3
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_GPIO_DeInit+0x1a0>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2203      	movs	r2, #3
 80040b8:	4013      	ands	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	220f      	movs	r2, #15
 80040be:	409a      	lsls	r2, r3
 80040c0:	0013      	movs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80040c4:	4a2d      	ldr	r2, [pc, #180]	; (800417c <HAL_GPIO_DeInit+0x190>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	589a      	ldr	r2, [r3, r2]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43d9      	mvns	r1, r3
 80040d4:	4829      	ldr	r0, [pc, #164]	; (800417c <HAL_GPIO_DeInit+0x190>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	400a      	ands	r2, r1
 80040dc:	3302      	adds	r3, #2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	2103      	movs	r1, #3
 80040ec:	4099      	lsls	r1, r3
 80040ee:	000b      	movs	r3, r1
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	08da      	lsrs	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	0092      	lsls	r2, r2, #2
 8004100:	58d3      	ldr	r3, [r2, r3]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	2107      	movs	r1, #7
 8004106:	400a      	ands	r2, r1
 8004108:	0092      	lsls	r2, r2, #2
 800410a:	210f      	movs	r1, #15
 800410c:	4091      	lsls	r1, r2
 800410e:	000a      	movs	r2, r1
 8004110:	43d1      	mvns	r1, r2
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	08d2      	lsrs	r2, r2, #3
 8004116:	4019      	ands	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3208      	adds	r2, #8
 800411c:	0092      	lsls	r2, r2, #2
 800411e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	0052      	lsls	r2, r2, #1
 8004128:	2103      	movs	r1, #3
 800412a:	4091      	lsls	r1, r2
 800412c:	000a      	movs	r2, r1
 800412e:	43d2      	mvns	r2, r2
 8004130:	401a      	ands	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2101      	movs	r1, #1
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4091      	lsls	r1, r2
 8004140:	000a      	movs	r2, r1
 8004142:	43d2      	mvns	r2, r2
 8004144:	401a      	ands	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	0052      	lsls	r2, r2, #1
 8004152:	2103      	movs	r1, #3
 8004154:	4091      	lsls	r1, r2
 8004156:	000a      	movs	r2, r1
 8004158:	43d2      	mvns	r2, r2
 800415a:	401a      	ands	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3301      	adds	r3, #1
 8004164:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	40da      	lsrs	r2, r3
 800416c:	1e13      	subs	r3, r2, #0
 800416e:	d000      	beq.n	8004172 <HAL_GPIO_DeInit+0x186>
 8004170:	e748      	b.n	8004004 <HAL_GPIO_DeInit+0x18>
  }
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b006      	add	sp, #24
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010000 	.word	0x40010000
 8004180:	50000400 	.word	0x50000400
 8004184:	50000800 	.word	0x50000800
 8004188:	50001c00 	.word	0x50001c00
 800418c:	40010400 	.word	0x40010400

08004190 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	000a      	movs	r2, r1
 800419a:	1cbb      	adds	r3, r7, #2
 800419c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	1cba      	adds	r2, r7, #2
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	4013      	ands	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80041aa:	230f      	movs	r3, #15
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e003      	b.n	80041bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b4:	230f      	movs	r3, #15
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80041bc:	230f      	movs	r3, #15
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	781b      	ldrb	r3, [r3, #0]
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	0008      	movs	r0, r1
 80041d4:	0011      	movs	r1, r2
 80041d6:	1cbb      	adds	r3, r7, #2
 80041d8:	1c02      	adds	r2, r0, #0
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	1c7b      	adds	r3, r7, #1
 80041de:	1c0a      	adds	r2, r1, #0
 80041e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041e2:	1c7b      	adds	r3, r7, #1
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ea:	1cbb      	adds	r3, r7, #2
 80041ec:	881a      	ldrh	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80041f2:	e003      	b.n	80041fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80041f4:	1cbb      	adds	r3, r7, #2
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e082      	b.n	800431c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2241      	movs	r2, #65	; 0x41
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2240      	movs	r2, #64	; 0x40
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fe fca9 	bl	8002b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2241      	movs	r2, #65	; 0x41
 8004236:	2124      	movs	r1, #36	; 0x24
 8004238:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2101      	movs	r1, #1
 8004246:	438a      	bics	r2, r1
 8004248:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4934      	ldr	r1, [pc, #208]	; (8004324 <HAL_I2C_Init+0x120>)
 8004254:	400a      	ands	r2, r1
 8004256:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4931      	ldr	r1, [pc, #196]	; (8004328 <HAL_I2C_Init+0x124>)
 8004264:	400a      	ands	r2, r1
 8004266:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d108      	bne.n	8004282 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	0209      	lsls	r1, r1, #8
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	e007      	b.n	8004292 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2184      	movs	r1, #132	; 0x84
 800428c:	0209      	lsls	r1, r1, #8
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d104      	bne.n	80042a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	491f      	ldr	r1, [pc, #124]	; (800432c <HAL_I2C_Init+0x128>)
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	491a      	ldr	r1, [pc, #104]	; (8004328 <HAL_I2C_Init+0x124>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69d9      	ldr	r1, [r3, #28]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2241      	movs	r2, #65	; 0x41
 8004308:	2120      	movs	r1, #32
 800430a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2242      	movs	r2, #66	; 0x42
 8004316:	2100      	movs	r1, #0
 8004318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}
 8004324:	f0ffffff 	.word	0xf0ffffff
 8004328:	ffff7fff 	.word	0xffff7fff
 800432c:	02008000 	.word	0x02008000

08004330 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e022      	b.n	8004388 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2241      	movs	r2, #65	; 0x41
 8004346:	2124      	movs	r1, #36	; 0x24
 8004348:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2101      	movs	r1, #1
 8004356:	438a      	bics	r2, r1
 8004358:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0018      	movs	r0, r3
 800435e:	f7fe fc55 	bl	8002c0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2241      	movs	r2, #65	; 0x41
 800436c:	2100      	movs	r1, #0
 800436e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2242      	movs	r2, #66	; 0x42
 800437a:	2100      	movs	r1, #0
 800437c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2240      	movs	r2, #64	; 0x40
 8004382:	2100      	movs	r1, #0
 8004384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	0008      	movs	r0, r1
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	0019      	movs	r1, r3
 800439e:	230a      	movs	r3, #10
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	1c02      	adds	r2, r0, #0
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	2308      	movs	r3, #8
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	1c0a      	adds	r2, r1, #0
 80043ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2241      	movs	r2, #65	; 0x41
 80043b2:	5c9b      	ldrb	r3, [r3, r2]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d000      	beq.n	80043bc <HAL_I2C_Master_Transmit+0x2c>
 80043ba:	e0e7      	b.n	800458c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2240      	movs	r2, #64	; 0x40
 80043c0:	5c9b      	ldrb	r3, [r3, r2]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Master_Transmit+0x3a>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0e1      	b.n	800458e <HAL_I2C_Master_Transmit+0x1fe>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2240      	movs	r2, #64	; 0x40
 80043ce:	2101      	movs	r1, #1
 80043d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043d2:	f7fe fdfb 	bl	8002fcc <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	0219      	lsls	r1, r3, #8
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2319      	movs	r3, #25
 80043e6:	2201      	movs	r2, #1
 80043e8:	f000 fa04 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 80043ec:	1e03      	subs	r3, r0, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cc      	b.n	800458e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2241      	movs	r2, #65	; 0x41
 80043f8:	2121      	movs	r1, #33	; 0x21
 80043fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2242      	movs	r2, #66	; 0x42
 8004400:	2110      	movs	r1, #16
 8004402:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2208      	movs	r2, #8
 8004414:	18ba      	adds	r2, r7, r2
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2bff      	cmp	r3, #255	; 0xff
 8004428:	d911      	bls.n	800444e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	b2da      	uxtb	r2, r3
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	045c      	lsls	r4, r3, #17
 800443a:	230a      	movs	r3, #10
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	8819      	ldrh	r1, [r3, #0]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	4b55      	ldr	r3, [pc, #340]	; (8004598 <HAL_I2C_Master_Transmit+0x208>)
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	0023      	movs	r3, r4
 8004448:	f000 fb74 	bl	8004b34 <I2C_TransferConfig>
 800444c:	e075      	b.n	800453a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	b2da      	uxtb	r2, r3
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	049c      	lsls	r4, r3, #18
 8004462:	230a      	movs	r3, #10
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	8819      	ldrh	r1, [r3, #0]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_I2C_Master_Transmit+0x208>)
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	0023      	movs	r3, r4
 8004470:	f000 fb60 	bl	8004b34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004474:	e061      	b.n	800453a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 f9f8 	bl	8004872 <I2C_WaitOnTXISFlagUntilTimeout>
 8004482:	1e03      	subs	r3, r0, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e081      	b.n	800458e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d03a      	beq.n	800453a <HAL_I2C_Master_Transmit+0x1aa>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d136      	bne.n	800453a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	0013      	movs	r3, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	2180      	movs	r1, #128	; 0x80
 80044da:	f000 f98b 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 80044de:	1e03      	subs	r3, r0, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e053      	b.n	800458e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2bff      	cmp	r3, #255	; 0xff
 80044ee:	d911      	bls.n	8004514 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	22ff      	movs	r2, #255	; 0xff
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	045c      	lsls	r4, r3, #17
 8004500:	230a      	movs	r3, #10
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	8819      	ldrh	r1, [r3, #0]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	2300      	movs	r3, #0
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	0023      	movs	r3, r4
 800450e:	f000 fb11 	bl	8004b34 <I2C_TransferConfig>
 8004512:	e012      	b.n	800453a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	b2da      	uxtb	r2, r3
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	049c      	lsls	r4, r3, #18
 8004528:	230a      	movs	r3, #10
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	8819      	ldrh	r1, [r3, #0]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	2300      	movs	r3, #0
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	0023      	movs	r3, r4
 8004536:	f000 fafd 	bl	8004b34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d198      	bne.n	8004476 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 f9d0 	bl	80048f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e01a      	b.n	800458e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2220      	movs	r2, #32
 800455e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	490c      	ldr	r1, [pc, #48]	; (800459c <HAL_I2C_Master_Transmit+0x20c>)
 800456c:	400a      	ands	r2, r1
 800456e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2241      	movs	r2, #65	; 0x41
 8004574:	2120      	movs	r1, #32
 8004576:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2242      	movs	r2, #66	; 0x42
 800457c:	2100      	movs	r1, #0
 800457e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2240      	movs	r2, #64	; 0x40
 8004584:	2100      	movs	r1, #0
 8004586:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b007      	add	sp, #28
 8004594:	bd90      	pop	{r4, r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	80002000 	.word	0x80002000
 800459c:	fe00e800 	.word	0xfe00e800

080045a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	0008      	movs	r0, r1
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	0019      	movs	r1, r3
 80045ae:	230a      	movs	r3, #10
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	1c02      	adds	r2, r0, #0
 80045b4:	801a      	strh	r2, [r3, #0]
 80045b6:	2308      	movs	r3, #8
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	1c0a      	adds	r2, r1, #0
 80045bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2241      	movs	r2, #65	; 0x41
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d000      	beq.n	80045cc <HAL_I2C_Master_Receive+0x2c>
 80045ca:	e0e8      	b.n	800479e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	5c9b      	ldrb	r3, [r3, r2]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_I2C_Master_Receive+0x3a>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e0e2      	b.n	80047a0 <HAL_I2C_Master_Receive+0x200>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2240      	movs	r2, #64	; 0x40
 80045de:	2101      	movs	r1, #1
 80045e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045e2:	f7fe fcf3 	bl	8002fcc <HAL_GetTick>
 80045e6:	0003      	movs	r3, r0
 80045e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	0219      	lsls	r1, r3, #8
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2319      	movs	r3, #25
 80045f6:	2201      	movs	r2, #1
 80045f8:	f000 f8fc 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0cd      	b.n	80047a0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2241      	movs	r2, #65	; 0x41
 8004608:	2122      	movs	r1, #34	; 0x22
 800460a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2242      	movs	r2, #66	; 0x42
 8004610:	2110      	movs	r1, #16
 8004612:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2208      	movs	r2, #8
 8004624:	18ba      	adds	r2, r7, r2
 8004626:	8812      	ldrh	r2, [r2, #0]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2bff      	cmp	r3, #255	; 0xff
 8004638:	d911      	bls.n	800465e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	b2da      	uxtb	r2, r3
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	045c      	lsls	r4, r3, #17
 800464a:	230a      	movs	r3, #10
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	8819      	ldrh	r1, [r3, #0]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	4b55      	ldr	r3, [pc, #340]	; (80047a8 <HAL_I2C_Master_Receive+0x208>)
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	0023      	movs	r3, r4
 8004658:	f000 fa6c 	bl	8004b34 <I2C_TransferConfig>
 800465c:	e076      	b.n	800474c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	b2da      	uxtb	r2, r3
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	049c      	lsls	r4, r3, #18
 8004672:	230a      	movs	r3, #10
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	8819      	ldrh	r1, [r3, #0]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <HAL_I2C_Master_Receive+0x208>)
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	0023      	movs	r3, r4
 8004680:	f000 fa58 	bl	8004b34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004684:	e062      	b.n	800474c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f96b 	bl	8004968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004692:	1e03      	subs	r3, r0, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e082      	b.n	80047a0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d03a      	beq.n	800474c <HAL_I2C_Master_Receive+0x1ac>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d136      	bne.n	800474c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	0013      	movs	r3, r2
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	f000 f882 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e053      	b.n	80047a0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2bff      	cmp	r3, #255	; 0xff
 8004700:	d911      	bls.n	8004726 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	b2da      	uxtb	r2, r3
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	045c      	lsls	r4, r3, #17
 8004712:	230a      	movs	r3, #10
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	8819      	ldrh	r1, [r3, #0]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	0023      	movs	r3, r4
 8004720:	f000 fa08 	bl	8004b34 <I2C_TransferConfig>
 8004724:	e012      	b.n	800474c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004734:	b2da      	uxtb	r2, r3
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	049c      	lsls	r4, r3, #18
 800473a:	230a      	movs	r3, #10
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	8819      	ldrh	r1, [r3, #0]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	2300      	movs	r3, #0
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	0023      	movs	r3, r4
 8004748:	f000 f9f4 	bl	8004b34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d197      	bne.n	8004686 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f8c7 	bl	80048f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004762:	1e03      	subs	r3, r0, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e01a      	b.n	80047a0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2220      	movs	r2, #32
 8004770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	490b      	ldr	r1, [pc, #44]	; (80047ac <HAL_I2C_Master_Receive+0x20c>)
 800477e:	400a      	ands	r2, r1
 8004780:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2241      	movs	r2, #65	; 0x41
 8004786:	2120      	movs	r1, #32
 8004788:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2242      	movs	r2, #66	; 0x42
 800478e:	2100      	movs	r1, #0
 8004790:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2240      	movs	r2, #64	; 0x40
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b007      	add	sp, #28
 80047a6:	bd90      	pop	{r4, r7, pc}
 80047a8:	80002400 	.word	0x80002400
 80047ac:	fe00e800 	.word	0xfe00e800

080047b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2202      	movs	r2, #2
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d103      	bne.n	80047ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2200      	movs	r2, #0
 80047cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d007      	beq.n	80047ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2101      	movs	r1, #1
 80047e8:	430a      	orrs	r2, r1
 80047ea:	619a      	str	r2, [r3, #24]
  }
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004804:	e021      	b.n	800484a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	3301      	adds	r3, #1
 800480a:	d01e      	beq.n	800484a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480c:	f7fe fbde 	bl	8002fcc <HAL_GetTick>
 8004810:	0002      	movs	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d113      	bne.n	800484a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	2220      	movs	r2, #32
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2241      	movs	r2, #65	; 0x41
 8004832:	2120      	movs	r1, #32
 8004834:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2242      	movs	r2, #66	; 0x42
 800483a:	2100      	movs	r1, #0
 800483c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2240      	movs	r2, #64	; 0x40
 8004842:	2100      	movs	r1, #0
 8004844:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e00f      	b.n	800486a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	425a      	negs	r2, r3
 800485a:	4153      	adcs	r3, r2
 800485c:	b2db      	uxtb	r3, r3
 800485e:	001a      	movs	r2, r3
 8004860:	1dfb      	adds	r3, r7, #7
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d0ce      	beq.n	8004806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}

08004872 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800487e:	e02b      	b.n	80048d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	0018      	movs	r0, r3
 8004888:	f000 f8da 	bl	8004a40 <I2C_IsAcknowledgeFailed>
 800488c:	1e03      	subs	r3, r0, #0
 800488e:	d001      	beq.n	8004894 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e029      	b.n	80048e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3301      	adds	r3, #1
 8004898:	d01e      	beq.n	80048d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fe fb97 	bl	8002fcc <HAL_GetTick>
 800489e:	0002      	movs	r2, r0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d113      	bne.n	80048d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	2220      	movs	r2, #32
 80048b6:	431a      	orrs	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2241      	movs	r2, #65	; 0x41
 80048c0:	2120      	movs	r1, #32
 80048c2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2242      	movs	r2, #66	; 0x42
 80048c8:	2100      	movs	r1, #0
 80048ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2240      	movs	r2, #64	; 0x40
 80048d0:	2100      	movs	r1, #0
 80048d2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e007      	b.n	80048e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2202      	movs	r2, #2
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d1cc      	bne.n	8004880 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b004      	add	sp, #16
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fc:	e028      	b.n	8004950 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	0018      	movs	r0, r3
 8004906:	f000 f89b 	bl	8004a40 <I2C_IsAcknowledgeFailed>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e026      	b.n	8004960 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fe fb5b 	bl	8002fcc <HAL_GetTick>
 8004916:	0002      	movs	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d113      	bne.n	8004950 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	2220      	movs	r2, #32
 800492e:	431a      	orrs	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2241      	movs	r2, #65	; 0x41
 8004938:	2120      	movs	r1, #32
 800493a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2242      	movs	r2, #66	; 0x42
 8004940:	2100      	movs	r1, #0
 8004942:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	2100      	movs	r1, #0
 800494a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2220      	movs	r2, #32
 8004958:	4013      	ands	r3, r2
 800495a:	2b20      	cmp	r3, #32
 800495c:	d1cf      	bne.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b004      	add	sp, #16
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004974:	e055      	b.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	0018      	movs	r0, r3
 800497e:	f000 f85f 	bl	8004a40 <I2C_IsAcknowledgeFailed>
 8004982:	1e03      	subs	r3, r0, #0
 8004984:	d001      	beq.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e053      	b.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2220      	movs	r2, #32
 8004992:	4013      	ands	r3, r2
 8004994:	2b20      	cmp	r3, #32
 8004996:	d129      	bne.n	80049ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2204      	movs	r2, #4
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d105      	bne.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e03f      	b.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2220      	movs	r2, #32
 80049b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	491d      	ldr	r1, [pc, #116]	; (8004a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80049c6:	400a      	ands	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2241      	movs	r2, #65	; 0x41
 80049d4:	2120      	movs	r1, #32
 80049d6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2242      	movs	r2, #66	; 0x42
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	2100      	movs	r1, #0
 80049e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e022      	b.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ec:	f7fe faee 	bl	8002fcc <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	2220      	movs	r2, #32
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2241      	movs	r2, #65	; 0x41
 8004a12:	2120      	movs	r1, #32
 8004a14:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e007      	b.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d1a2      	bne.n	8004976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b004      	add	sp, #16
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	fe00e800 	.word	0xfe00e800

08004a40 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2210      	movs	r2, #16
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d164      	bne.n	8004b24 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	049b      	lsls	r3, r3, #18
 8004a64:	401a      	ands	r2, r3
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	049b      	lsls	r3, r3, #18
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d02b      	beq.n	8004ac6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	01c9      	lsls	r1, r1, #7
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a80:	e021      	b.n	8004ac6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3301      	adds	r3, #1
 8004a86:	d01e      	beq.n	8004ac6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a88:	f7fe faa0 	bl	8002fcc <HAL_GetTick>
 8004a8c:	0002      	movs	r2, r0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <I2C_IsAcknowledgeFailed+0x5e>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d113      	bne.n	8004ac6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2241      	movs	r2, #65	; 0x41
 8004aae:	2120      	movs	r1, #32
 8004ab0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2242      	movs	r2, #66	; 0x42
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e02f      	b.n	8004b26 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2220      	movs	r2, #32
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d1d6      	bne.n	8004a82 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f7ff fe62 	bl	80047b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	490e      	ldr	r1, [pc, #56]	; (8004b30 <I2C_IsAcknowledgeFailed+0xf0>)
 8004af8:	400a      	ands	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	2204      	movs	r2, #4
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2241      	movs	r2, #65	; 0x41
 8004b0c:	2120      	movs	r1, #32
 8004b0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2242      	movs	r2, #66	; 0x42
 8004b14:	2100      	movs	r1, #0
 8004b16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2240      	movs	r2, #64	; 0x40
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b004      	add	sp, #16
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	fe00e800 	.word	0xfe00e800

08004b34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	0008      	movs	r0, r1
 8004b3e:	0011      	movs	r1, r2
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	240a      	movs	r4, #10
 8004b44:	193b      	adds	r3, r7, r4
 8004b46:	1c02      	adds	r2, r0, #0
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	2009      	movs	r0, #9
 8004b4c:	183b      	adds	r3, r7, r0
 8004b4e:	1c0a      	adds	r2, r1, #0
 8004b50:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	0d51      	lsrs	r1, r2, #21
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	00d2      	lsls	r2, r2, #3
 8004b60:	400a      	ands	r2, r1
 8004b62:	490e      	ldr	r1, [pc, #56]	; (8004b9c <I2C_TransferConfig+0x68>)
 8004b64:	430a      	orrs	r2, r1
 8004b66:	43d2      	mvns	r2, r2
 8004b68:	401a      	ands	r2, r3
 8004b6a:	0011      	movs	r1, r2
 8004b6c:	193b      	adds	r3, r7, r4
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	059b      	lsls	r3, r3, #22
 8004b72:	0d9a      	lsrs	r2, r3, #22
 8004b74:	183b      	adds	r3, r7, r0
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	0418      	lsls	r0, r3, #16
 8004b7a:	23ff      	movs	r3, #255	; 0xff
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	4003      	ands	r3, r0
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b005      	add	sp, #20
 8004b98:	bd90      	pop	{r4, r7, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	03ff63ff 	.word	0x03ff63ff

08004ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2241      	movs	r2, #65	; 0x41
 8004bae:	5c9b      	ldrb	r3, [r3, r2]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d138      	bne.n	8004c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2240      	movs	r2, #64	; 0x40
 8004bba:	5c9b      	ldrb	r3, [r3, r2]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e032      	b.n	8004c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2240      	movs	r2, #64	; 0x40
 8004bc8:	2101      	movs	r1, #1
 8004bca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2241      	movs	r2, #65	; 0x41
 8004bd0:	2124      	movs	r1, #36	; 0x24
 8004bd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2101      	movs	r1, #1
 8004be0:	438a      	bics	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4911      	ldr	r1, [pc, #68]	; (8004c34 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6819      	ldr	r1, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2101      	movs	r1, #1
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2241      	movs	r2, #65	; 0x41
 8004c18:	2120      	movs	r1, #32
 8004c1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2240      	movs	r2, #64	; 0x40
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	ffffefff 	.word	0xffffefff

08004c38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2241      	movs	r2, #65	; 0x41
 8004c46:	5c9b      	ldrb	r3, [r3, r2]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d139      	bne.n	8004cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2240      	movs	r2, #64	; 0x40
 8004c52:	5c9b      	ldrb	r3, [r3, r2]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e033      	b.n	8004cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	2101      	movs	r1, #1
 8004c62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2241      	movs	r2, #65	; 0x41
 8004c68:	2124      	movs	r1, #36	; 0x24
 8004c6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2101      	movs	r1, #1
 8004c78:	438a      	bics	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2101      	movs	r1, #1
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2241      	movs	r2, #65	; 0x41
 8004cb2:	2120      	movs	r1, #32
 8004cb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2240      	movs	r2, #64	; 0x40
 8004cba:	2100      	movs	r1, #0
 8004cbc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b004      	add	sp, #16
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	fffff0ff 	.word	0xfffff0ff

08004cd0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <HAL_PWR_EnableWakeUpPin+0x1c>)
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_PWR_EnableWakeUpPin+0x1c>)
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b002      	add	sp, #8
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40007000 	.word	0x40007000

08004cf0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_PWR_DisableWakeUpPin+0x20>)
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	43d9      	mvns	r1, r3
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <HAL_PWR_DisableWakeUpPin+0x20>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b002      	add	sp, #8
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	40007000 	.word	0x40007000

08004d14 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8004d1e:	2102      	movs	r1, #2
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004d30:	bf30      	wfi
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b5b0      	push	{r4, r5, r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f000 fb6c 	bl	800542c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d54:	4bc8      	ldr	r3, [pc, #800]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	220c      	movs	r2, #12
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5e:	4bc6      	ldr	r3, [pc, #792]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	025b      	lsls	r3, r3, #9
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4013      	ands	r3, r2
 8004d72:	d100      	bne.n	8004d76 <HAL_RCC_OscConfig+0x36>
 8004d74:	e07d      	b.n	8004e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d007      	beq.n	8004d8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d112      	bne.n	8004da8 <HAL_RCC_OscConfig+0x68>
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	025b      	lsls	r3, r3, #9
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d10d      	bne.n	8004da8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	4bba      	ldr	r3, [pc, #744]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	4013      	ands	r3, r2
 8004d96:	d100      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5a>
 8004d98:	e06a      	b.n	8004e70 <HAL_RCC_OscConfig+0x130>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d166      	bne.n	8004e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f000 fb42 	bl	800542c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	025b      	lsls	r3, r3, #9
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x84>
 8004db4:	4bb0      	ldr	r3, [pc, #704]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4baf      	ldr	r3, [pc, #700]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	0249      	lsls	r1, r1, #9
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e027      	b.n	8004e14 <HAL_RCC_OscConfig+0xd4>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	23a0      	movs	r3, #160	; 0xa0
 8004dca:	02db      	lsls	r3, r3, #11
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d10e      	bne.n	8004dee <HAL_RCC_OscConfig+0xae>
 8004dd0:	4ba9      	ldr	r3, [pc, #676]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4ba8      	ldr	r3, [pc, #672]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	02c9      	lsls	r1, r1, #11
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	4ba6      	ldr	r3, [pc, #664]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4ba5      	ldr	r3, [pc, #660]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	0249      	lsls	r1, r1, #9
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e012      	b.n	8004e14 <HAL_RCC_OscConfig+0xd4>
 8004dee:	4ba2      	ldr	r3, [pc, #648]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4ba1      	ldr	r3, [pc, #644]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004df4:	49a1      	ldr	r1, [pc, #644]	; (800507c <HAL_RCC_OscConfig+0x33c>)
 8004df6:	400a      	ands	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	4b9f      	ldr	r3, [pc, #636]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	025b      	lsls	r3, r3, #9
 8004e02:	4013      	ands	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4b9b      	ldr	r3, [pc, #620]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b9a      	ldr	r3, [pc, #616]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e0e:	499c      	ldr	r1, [pc, #624]	; (8005080 <HAL_RCC_OscConfig+0x340>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d014      	beq.n	8004e46 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fe f8d6 	bl	8002fcc <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e26:	f7fe f8d1 	bl	8002fcc <HAL_GetTick>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b64      	cmp	r3, #100	; 0x64
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e2f9      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e38:	4b8f      	ldr	r3, [pc, #572]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	4013      	ands	r3, r2
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0xe6>
 8004e44:	e015      	b.n	8004e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fe f8c1 	bl	8002fcc <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe f8bc 	bl	8002fcc <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e2e4      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e62:	4b85      	ldr	r3, [pc, #532]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	029b      	lsls	r3, r3, #10
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x110>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2202      	movs	r2, #2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <HAL_RCC_OscConfig+0x13e>
 8004e7c:	e099      	b.n	8004fb2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	2220      	movs	r2, #32
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004e8c:	4b7a      	ldr	r3, [pc, #488]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b79      	ldr	r3, [pc, #484]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004e92:	2120      	movs	r1, #32
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4393      	bics	r3, r2
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d13e      	bne.n	8004f2a <HAL_RCC_OscConfig+0x1ea>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d13b      	bne.n	8004f2a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004eb2:	4b71      	ldr	r3, [pc, #452]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x186>
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e2b2      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b6c      	ldr	r3, [pc, #432]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a6e      	ldr	r2, [pc, #440]	; (8005084 <HAL_RCC_OscConfig+0x344>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	4b68      	ldr	r3, [pc, #416]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004edc:	4b66      	ldr	r3, [pc, #408]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2209      	movs	r2, #9
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	4b64      	ldr	r3, [pc, #400]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eee:	f000 fbeb 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8004ef2:	0001      	movs	r1, r0
 8004ef4:	4b60      	ldr	r3, [pc, #384]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	220f      	movs	r2, #15
 8004efc:	4013      	ands	r3, r2
 8004efe:	4a62      	ldr	r2, [pc, #392]	; (8005088 <HAL_RCC_OscConfig+0x348>)
 8004f00:	5cd3      	ldrb	r3, [r2, r3]
 8004f02:	000a      	movs	r2, r1
 8004f04:	40da      	lsrs	r2, r3
 8004f06:	4b61      	ldr	r3, [pc, #388]	; (800508c <HAL_RCC_OscConfig+0x34c>)
 8004f08:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004f0a:	4b61      	ldr	r3, [pc, #388]	; (8005090 <HAL_RCC_OscConfig+0x350>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2513      	movs	r5, #19
 8004f10:	197c      	adds	r4, r7, r5
 8004f12:	0018      	movs	r0, r3
 8004f14:	f7fe f814 	bl	8002f40 <HAL_InitTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004f1c:	197b      	adds	r3, r7, r5
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d046      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004f24:	197b      	adds	r3, r7, r5
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	e280      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d027      	beq.n	8004f80 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f30:	4b51      	ldr	r3, [pc, #324]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2209      	movs	r2, #9
 8004f36:	4393      	bics	r3, r2
 8004f38:	0019      	movs	r1, r3
 8004f3a:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fe f843 	bl	8002fcc <HAL_GetTick>
 8004f46:	0003      	movs	r3, r0
 8004f48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f4c:	f7fe f83e 	bl	8002fcc <HAL_GetTick>
 8004f50:	0002      	movs	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e266      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f5e:	4b46      	ldr	r3, [pc, #280]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2204      	movs	r2, #4
 8004f64:	4013      	ands	r3, r2
 8004f66:	d0f1      	beq.n	8004f4c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f68:	4b43      	ldr	r3, [pc, #268]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a45      	ldr	r2, [pc, #276]	; (8005084 <HAL_RCC_OscConfig+0x344>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	e018      	b.n	8004fb2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f80:	4b3d      	ldr	r3, [pc, #244]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004f86:	2101      	movs	r1, #1
 8004f88:	438a      	bics	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fe f81e 	bl	8002fcc <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f96:	f7fe f819 	bl	8002fcc <HAL_GetTick>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e241      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fa8:	4b33      	ldr	r3, [pc, #204]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2204      	movs	r2, #4
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d1f1      	bne.n	8004f96 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d100      	bne.n	8004fbe <HAL_RCC_OscConfig+0x27e>
 8004fbc:	e0a1      	b.n	8005102 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d140      	bne.n	8005046 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_OscConfig+0x29c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e227      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fdc:	4b26      	ldr	r3, [pc, #152]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <HAL_RCC_OscConfig+0x354>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	4b23      	ldr	r3, [pc, #140]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	0a19      	lsrs	r1, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	061a      	lsls	r2, r3, #24
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	0b5b      	lsrs	r3, r3, #13
 800500a:	3301      	adds	r3, #1
 800500c:	2280      	movs	r2, #128	; 0x80
 800500e:	0212      	lsls	r2, r2, #8
 8005010:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005012:	4b19      	ldr	r3, [pc, #100]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	210f      	movs	r1, #15
 800501a:	400b      	ands	r3, r1
 800501c:	491a      	ldr	r1, [pc, #104]	; (8005088 <HAL_RCC_OscConfig+0x348>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005022:	4b1a      	ldr	r3, [pc, #104]	; (800508c <HAL_RCC_OscConfig+0x34c>)
 8005024:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCC_OscConfig+0x350>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2513      	movs	r5, #19
 800502c:	197c      	adds	r4, r7, r5
 800502e:	0018      	movs	r0, r3
 8005030:	f7fd ff86 	bl	8002f40 <HAL_InitTick>
 8005034:	0003      	movs	r3, r0
 8005036:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005038:	197b      	adds	r3, r7, r5
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d060      	beq.n	8005102 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8005040:	197b      	adds	r3, r7, r5
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	e1f2      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d03f      	beq.n	80050ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_OscConfig+0x338>)
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	0049      	lsls	r1, r1, #1
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd ffb6 	bl	8002fcc <HAL_GetTick>
 8005060:	0003      	movs	r3, r0
 8005062:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005064:	e018      	b.n	8005098 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005066:	f7fd ffb1 	bl	8002fcc <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d911      	bls.n	8005098 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e1d9      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
 8005078:	40021000 	.word	0x40021000
 800507c:	fffeffff 	.word	0xfffeffff
 8005080:	fffbffff 	.word	0xfffbffff
 8005084:	ffffe0ff 	.word	0xffffe0ff
 8005088:	08007538 	.word	0x08007538
 800508c:	20000184 	.word	0x20000184
 8005090:	20000188 	.word	0x20000188
 8005094:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005098:	4bc9      	ldr	r3, [pc, #804]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4013      	ands	r3, r2
 80050a2:	d0e0      	beq.n	8005066 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a4:	4bc6      	ldr	r3, [pc, #792]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4ac6      	ldr	r2, [pc, #792]	; (80053c4 <HAL_RCC_OscConfig+0x684>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1a      	ldr	r2, [r3, #32]
 80050b2:	4bc3      	ldr	r3, [pc, #780]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050b8:	4bc1      	ldr	r3, [pc, #772]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	0a19      	lsrs	r1, r3, #8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	061a      	lsls	r2, r3, #24
 80050c6:	4bbe      	ldr	r3, [pc, #760]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e019      	b.n	8005102 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050ce:	4bbc      	ldr	r3, [pc, #752]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4bbb      	ldr	r3, [pc, #748]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050d4:	49bc      	ldr	r1, [pc, #752]	; (80053c8 <HAL_RCC_OscConfig+0x688>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050da:	f7fd ff77 	bl	8002fcc <HAL_GetTick>
 80050de:	0003      	movs	r3, r0
 80050e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050e4:	f7fd ff72 	bl	8002fcc <HAL_GetTick>
 80050e8:	0002      	movs	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e19a      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80050f6:	4bb2      	ldr	r3, [pc, #712]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4013      	ands	r3, r2
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2208      	movs	r2, #8
 8005108:	4013      	ands	r3, r2
 800510a:	d036      	beq.n	800517a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005114:	4baa      	ldr	r3, [pc, #680]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005118:	4ba9      	ldr	r3, [pc, #676]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800511a:	2101      	movs	r1, #1
 800511c:	430a      	orrs	r2, r1
 800511e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005120:	f7fd ff54 	bl	8002fcc <HAL_GetTick>
 8005124:	0003      	movs	r3, r0
 8005126:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800512a:	f7fd ff4f 	bl	8002fcc <HAL_GetTick>
 800512e:	0002      	movs	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e177      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800513c:	4ba0      	ldr	r3, [pc, #640]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	2202      	movs	r2, #2
 8005142:	4013      	ands	r3, r2
 8005144:	d0f1      	beq.n	800512a <HAL_RCC_OscConfig+0x3ea>
 8005146:	e018      	b.n	800517a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005148:	4b9d      	ldr	r3, [pc, #628]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800514a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800514c:	4b9c      	ldr	r3, [pc, #624]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800514e:	2101      	movs	r1, #1
 8005150:	438a      	bics	r2, r1
 8005152:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005154:	f7fd ff3a 	bl	8002fcc <HAL_GetTick>
 8005158:	0003      	movs	r3, r0
 800515a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800515e:	f7fd ff35 	bl	8002fcc <HAL_GetTick>
 8005162:	0002      	movs	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e15d      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005170:	4b93      	ldr	r3, [pc, #588]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	d1f1      	bne.n	800515e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2204      	movs	r2, #4
 8005180:	4013      	ands	r3, r2
 8005182:	d100      	bne.n	8005186 <HAL_RCC_OscConfig+0x446>
 8005184:	e0ae      	b.n	80052e4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005186:	2023      	movs	r0, #35	; 0x23
 8005188:	183b      	adds	r3, r7, r0
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800518e:	4b8c      	ldr	r3, [pc, #560]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	055b      	lsls	r3, r3, #21
 8005196:	4013      	ands	r3, r2
 8005198:	d109      	bne.n	80051ae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519a:	4b89      	ldr	r3, [pc, #548]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800519c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80051a0:	2180      	movs	r1, #128	; 0x80
 80051a2:	0549      	lsls	r1, r1, #21
 80051a4:	430a      	orrs	r2, r1
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80051a8:	183b      	adds	r3, r7, r0
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	4b87      	ldr	r3, [pc, #540]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	d11a      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ba:	4b84      	ldr	r3, [pc, #528]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b83      	ldr	r3, [pc, #524]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	0049      	lsls	r1, r1, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c8:	f7fd ff00 	bl	8002fcc <HAL_GetTick>
 80051cc:	0003      	movs	r3, r0
 80051ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fd fefb 	bl	8002fcc <HAL_GetTick>
 80051d6:	0002      	movs	r2, r0
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b64      	cmp	r3, #100	; 0x64
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e123      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b79      	ldr	r3, [pc, #484]	; (80053cc <HAL_RCC_OscConfig+0x68c>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4013      	ands	r3, r2
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x4cc>
 80051fc:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80051fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005200:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	0049      	lsls	r1, r1, #1
 8005206:	430a      	orrs	r2, r1
 8005208:	651a      	str	r2, [r3, #80]	; 0x50
 800520a:	e031      	b.n	8005270 <HAL_RCC_OscConfig+0x530>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10c      	bne.n	800522e <HAL_RCC_OscConfig+0x4ee>
 8005214:	4b6a      	ldr	r3, [pc, #424]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005218:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800521a:	496b      	ldr	r1, [pc, #428]	; (80053c8 <HAL_RCC_OscConfig+0x688>)
 800521c:	400a      	ands	r2, r1
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
 8005220:	4b67      	ldr	r3, [pc, #412]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005224:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005226:	496a      	ldr	r1, [pc, #424]	; (80053d0 <HAL_RCC_OscConfig+0x690>)
 8005228:	400a      	ands	r2, r1
 800522a:	651a      	str	r2, [r3, #80]	; 0x50
 800522c:	e020      	b.n	8005270 <HAL_RCC_OscConfig+0x530>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	23a0      	movs	r3, #160	; 0xa0
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	429a      	cmp	r2, r3
 8005238:	d10e      	bne.n	8005258 <HAL_RCC_OscConfig+0x518>
 800523a:	4b61      	ldr	r3, [pc, #388]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800523c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800523e:	4b60      	ldr	r3, [pc, #384]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	00c9      	lsls	r1, r1, #3
 8005244:	430a      	orrs	r2, r1
 8005246:	651a      	str	r2, [r3, #80]	; 0x50
 8005248:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800524a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800524c:	4b5c      	ldr	r3, [pc, #368]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	0049      	lsls	r1, r1, #1
 8005252:	430a      	orrs	r2, r1
 8005254:	651a      	str	r2, [r3, #80]	; 0x50
 8005256:	e00b      	b.n	8005270 <HAL_RCC_OscConfig+0x530>
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800525a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800525c:	4b58      	ldr	r3, [pc, #352]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800525e:	495a      	ldr	r1, [pc, #360]	; (80053c8 <HAL_RCC_OscConfig+0x688>)
 8005260:	400a      	ands	r2, r1
 8005262:	651a      	str	r2, [r3, #80]	; 0x50
 8005264:	4b56      	ldr	r3, [pc, #344]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005266:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005268:	4b55      	ldr	r3, [pc, #340]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800526a:	4959      	ldr	r1, [pc, #356]	; (80053d0 <HAL_RCC_OscConfig+0x690>)
 800526c:	400a      	ands	r2, r1
 800526e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005278:	f7fd fea8 	bl	8002fcc <HAL_GetTick>
 800527c:	0003      	movs	r3, r0
 800527e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005280:	e009      	b.n	8005296 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fd fea3 	bl	8002fcc <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	4a51      	ldr	r2, [pc, #324]	; (80053d4 <HAL_RCC_OscConfig+0x694>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0ca      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005296:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	d0ef      	beq.n	8005282 <HAL_RCC_OscConfig+0x542>
 80052a2:	e014      	b.n	80052ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a4:	f7fd fe92 	bl	8002fcc <HAL_GetTick>
 80052a8:	0003      	movs	r3, r0
 80052aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052ac:	e009      	b.n	80052c2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fd fe8d 	bl	8002fcc <HAL_GetTick>
 80052b2:	0002      	movs	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	4a46      	ldr	r2, [pc, #280]	; (80053d4 <HAL_RCC_OscConfig+0x694>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e0b4      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052c2:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80052c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4013      	ands	r3, r2
 80052cc:	d1ef      	bne.n	80052ae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052ce:	2323      	movs	r3, #35	; 0x23
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d105      	bne.n	80052e4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d8:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80052da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052dc:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80052de:	493e      	ldr	r1, [pc, #248]	; (80053d8 <HAL_RCC_OscConfig+0x698>)
 80052e0:	400a      	ands	r2, r1
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d100      	bne.n	80052ee <HAL_RCC_OscConfig+0x5ae>
 80052ec:	e09d      	b.n	800542a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d100      	bne.n	80052f6 <HAL_RCC_OscConfig+0x5b6>
 80052f4:	e076      	b.n	80053e4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d145      	bne.n	800538a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fe:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005304:	4935      	ldr	r1, [pc, #212]	; (80053dc <HAL_RCC_OscConfig+0x69c>)
 8005306:	400a      	ands	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530a:	f7fd fe5f 	bl	8002fcc <HAL_GetTick>
 800530e:	0003      	movs	r3, r0
 8005310:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005314:	f7fd fe5a 	bl	8002fcc <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e082      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005326:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	049b      	lsls	r3, r3, #18
 800532e:	4013      	ands	r3, r2
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005332:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <HAL_RCC_OscConfig+0x6a0>)
 8005338:	4013      	ands	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	431a      	orrs	r2, r3
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800534e:	430a      	orrs	r2, r1
 8005350:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	0449      	lsls	r1, r1, #17
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fd fe34 	bl	8002fcc <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536a:	f7fd fe2f 	bl	8002fcc <HAL_GetTick>
 800536e:	0002      	movs	r2, r0
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e057      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	049b      	lsls	r3, r3, #18
 8005384:	4013      	ands	r3, r2
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x62a>
 8005388:	e04f      	b.n	800542a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 8005390:	4912      	ldr	r1, [pc, #72]	; (80053dc <HAL_RCC_OscConfig+0x69c>)
 8005392:	400a      	ands	r2, r1
 8005394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fd fe19 	bl	8002fcc <HAL_GetTick>
 800539a:	0003      	movs	r3, r0
 800539c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fd fe14 	bl	8002fcc <HAL_GetTick>
 80053a4:	0002      	movs	r2, r0
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e03c      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053b2:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_RCC_OscConfig+0x680>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	049b      	lsls	r3, r3, #18
 80053ba:	4013      	ands	r3, r2
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x660>
 80053be:	e034      	b.n	800542a <HAL_RCC_OscConfig+0x6ea>
 80053c0:	40021000 	.word	0x40021000
 80053c4:	ffff1fff 	.word	0xffff1fff
 80053c8:	fffffeff 	.word	0xfffffeff
 80053cc:	40007000 	.word	0x40007000
 80053d0:	fffffbff 	.word	0xfffffbff
 80053d4:	00001388 	.word	0x00001388
 80053d8:	efffffff 	.word	0xefffffff
 80053dc:	feffffff 	.word	0xfeffffff
 80053e0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e01d      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCC_OscConfig+0x6f4>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	025b      	lsls	r3, r3, #9
 80053fc:	401a      	ands	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	429a      	cmp	r2, r3
 8005404:	d10f      	bne.n	8005426 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	23f0      	movs	r3, #240	; 0xf0
 800540a:	039b      	lsls	r3, r3, #14
 800540c:	401a      	ands	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d107      	bne.n	8005426 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	23c0      	movs	r3, #192	; 0xc0
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	401a      	ands	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d001      	beq.n	800542a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b00a      	add	sp, #40	; 0x28
 8005432:	bdb0      	pop	{r4, r5, r7, pc}
 8005434:	40021000 	.word	0x40021000

08005438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005438:	b5b0      	push	{r4, r5, r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e128      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800544c:	4b96      	ldr	r3, [pc, #600]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d91e      	bls.n	8005498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b93      	ldr	r3, [pc, #588]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2201      	movs	r2, #1
 8005460:	4393      	bics	r3, r2
 8005462:	0019      	movs	r1, r3
 8005464:	4b90      	ldr	r3, [pc, #576]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800546c:	f7fd fdae 	bl	8002fcc <HAL_GetTick>
 8005470:	0003      	movs	r3, r0
 8005472:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005474:	e009      	b.n	800548a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005476:	f7fd fda9 	bl	8002fcc <HAL_GetTick>
 800547a:	0002      	movs	r2, r0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	4a8a      	ldr	r2, [pc, #552]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e109      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b87      	ldr	r3, [pc, #540]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2201      	movs	r2, #1
 8005490:	4013      	ands	r3, r2
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d1ee      	bne.n	8005476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2202      	movs	r2, #2
 800549e:	4013      	ands	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a2:	4b83      	ldr	r3, [pc, #524]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	22f0      	movs	r2, #240	; 0xf0
 80054a8:	4393      	bics	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4b7f      	ldr	r3, [pc, #508]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054b2:	430a      	orrs	r2, r1
 80054b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	4013      	ands	r3, r2
 80054be:	d100      	bne.n	80054c2 <HAL_RCC_ClockConfig+0x8a>
 80054c0:	e089      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ca:	4b79      	ldr	r3, [pc, #484]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	4013      	ands	r3, r2
 80054d4:	d120      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0e1      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054e2:	4b73      	ldr	r3, [pc, #460]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	049b      	lsls	r3, r3, #18
 80054ea:	4013      	ands	r3, r2
 80054ec:	d114      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0d5      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d106      	bne.n	8005508 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054fa:	4b6d      	ldr	r3, [pc, #436]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2204      	movs	r2, #4
 8005500:	4013      	ands	r3, r2
 8005502:	d109      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0ca      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005508:	4b69      	ldr	r3, [pc, #420]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4013      	ands	r3, r2
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0c2      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005518:	4b65      	ldr	r3, [pc, #404]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2203      	movs	r2, #3
 800551e:	4393      	bics	r3, r2
 8005520:	0019      	movs	r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005528:	430a      	orrs	r2, r1
 800552a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800552c:	f7fd fd4e 	bl	8002fcc <HAL_GetTick>
 8005530:	0003      	movs	r3, r0
 8005532:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d111      	bne.n	8005560 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800553c:	e009      	b.n	8005552 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553e:	f7fd fd45 	bl	8002fcc <HAL_GetTick>
 8005542:	0002      	movs	r2, r0
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	4a58      	ldr	r2, [pc, #352]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e0a5      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005552:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	220c      	movs	r2, #12
 8005558:	4013      	ands	r3, r2
 800555a:	2b08      	cmp	r3, #8
 800555c:	d1ef      	bne.n	800553e <HAL_RCC_ClockConfig+0x106>
 800555e:	e03a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d111      	bne.n	800558c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005568:	e009      	b.n	800557e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556a:	f7fd fd2f 	bl	8002fcc <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	4a4d      	ldr	r2, [pc, #308]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e08f      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800557e:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	220c      	movs	r2, #12
 8005584:	4013      	ands	r3, r2
 8005586:	2b0c      	cmp	r3, #12
 8005588:	d1ef      	bne.n	800556a <HAL_RCC_ClockConfig+0x132>
 800558a:	e024      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d11b      	bne.n	80055cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005594:	e009      	b.n	80055aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005596:	f7fd fd19 	bl	8002fcc <HAL_GetTick>
 800559a:	0002      	movs	r2, r0
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	4a42      	ldr	r2, [pc, #264]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e079      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055aa:	4b41      	ldr	r3, [pc, #260]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	220c      	movs	r2, #12
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d1ef      	bne.n	8005596 <HAL_RCC_ClockConfig+0x15e>
 80055b6:	e00e      	b.n	80055d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b8:	f7fd fd08 	bl	8002fcc <HAL_GetTick>
 80055bc:	0002      	movs	r2, r0
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e068      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055cc:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	220c      	movs	r2, #12
 80055d2:	4013      	ands	r3, r2
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d6:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d21e      	bcs.n	8005622 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e4:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2201      	movs	r2, #1
 80055ea:	4393      	bics	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	4b2e      	ldr	r3, [pc, #184]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055f6:	f7fd fce9 	bl	8002fcc <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	e009      	b.n	8005614 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fd fce4 	bl	8002fcc <HAL_GetTick>
 8005604:	0002      	movs	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	4a28      	ldr	r2, [pc, #160]	; (80056ac <HAL_RCC_ClockConfig+0x274>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e044      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <HAL_RCC_ClockConfig+0x270>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2201      	movs	r2, #1
 800561a:	4013      	ands	r3, r2
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d1ee      	bne.n	8005600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2204      	movs	r2, #4
 8005628:	4013      	ands	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800562c:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a20      	ldr	r2, [pc, #128]	; (80056b4 <HAL_RCC_ClockConfig+0x27c>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800563c:	430a      	orrs	r2, r1
 800563e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2208      	movs	r2, #8
 8005646:	4013      	ands	r3, r2
 8005648:	d00a      	beq.n	8005660 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800564a:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	4a1a      	ldr	r2, [pc, #104]	; (80056b8 <HAL_RCC_ClockConfig+0x280>)
 8005650:	4013      	ands	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 800565c:	430a      	orrs	r2, r1
 800565e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005660:	f000 f832 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005664:	0001      	movs	r1, r0
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCC_ClockConfig+0x278>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	220f      	movs	r2, #15
 800566e:	4013      	ands	r3, r2
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_RCC_ClockConfig+0x284>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	000a      	movs	r2, r1
 8005676:	40da      	lsrs	r2, r3
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_RCC_ClockConfig+0x288>)
 800567a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_RCC_ClockConfig+0x28c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	250b      	movs	r5, #11
 8005682:	197c      	adds	r4, r7, r5
 8005684:	0018      	movs	r0, r3
 8005686:	f7fd fc5b 	bl	8002f40 <HAL_InitTick>
 800568a:	0003      	movs	r3, r0
 800568c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800568e:	197b      	adds	r3, r7, r5
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005696:	197b      	adds	r3, r7, r5
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	e000      	b.n	800569e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bdb0      	pop	{r4, r5, r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	40022000 	.word	0x40022000
 80056ac:	00001388 	.word	0x00001388
 80056b0:	40021000 	.word	0x40021000
 80056b4:	fffff8ff 	.word	0xfffff8ff
 80056b8:	ffffc7ff 	.word	0xffffc7ff
 80056bc:	08007538 	.word	0x08007538
 80056c0:	20000184 	.word	0x20000184
 80056c4:	20000188 	.word	0x20000188

080056c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80056ce:	4b4c      	ldr	r3, [pc, #304]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d6:	230c      	movs	r3, #12
 80056d8:	4013      	ands	r3, r2
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d014      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x40>
 80056de:	d900      	bls.n	80056e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80056e0:	e07b      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x112>
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d002      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x24>
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d00b      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ea:	e076      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80056ec:	4b44      	ldr	r3, [pc, #272]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2210      	movs	r2, #16
 80056f2:	4013      	ands	r3, r2
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80056f6:	4b43      	ldr	r3, [pc, #268]	; (8005804 <HAL_RCC_GetSysClockFreq+0x13c>)
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80056fa:	e07c      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80056fc:	4b42      	ldr	r3, [pc, #264]	; (8005808 <HAL_RCC_GetSysClockFreq+0x140>)
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005700:	e079      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005702:	4b42      	ldr	r3, [pc, #264]	; (800580c <HAL_RCC_GetSysClockFreq+0x144>)
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005706:	e076      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	0c9a      	lsrs	r2, r3, #18
 800570c:	230f      	movs	r3, #15
 800570e:	401a      	ands	r2, r3
 8005710:	4b3f      	ldr	r3, [pc, #252]	; (8005810 <HAL_RCC_GetSysClockFreq+0x148>)
 8005712:	5c9b      	ldrb	r3, [r3, r2]
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	0d9a      	lsrs	r2, r3, #22
 800571a:	2303      	movs	r3, #3
 800571c:	4013      	ands	r3, r2
 800571e:	3301      	adds	r3, #1
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005722:	4b37      	ldr	r3, [pc, #220]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	025b      	lsls	r3, r3, #9
 800572a:	4013      	ands	r3, r2
 800572c:	d01a      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	4a35      	ldr	r2, [pc, #212]	; (800580c <HAL_RCC_GetSysClockFreq+0x144>)
 8005738:	2300      	movs	r3, #0
 800573a:	69b8      	ldr	r0, [r7, #24]
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	f7fa fe8b 	bl	8000458 <__aeabi_lmul>
 8005742:	0002      	movs	r2, r0
 8005744:	000b      	movs	r3, r1
 8005746:	0010      	movs	r0, r2
 8005748:	0019      	movs	r1, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f7fa fe5f 	bl	8000418 <__aeabi_uldivmod>
 800575a:	0002      	movs	r2, r0
 800575c:	000b      	movs	r3, r1
 800575e:	0013      	movs	r3, r2
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
 8005762:	e037      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005764:	4b26      	ldr	r3, [pc, #152]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2210      	movs	r2, #16
 800576a:	4013      	ands	r3, r2
 800576c:	d01a      	beq.n	80057a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4a23      	ldr	r2, [pc, #140]	; (8005804 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005778:	2300      	movs	r3, #0
 800577a:	68b8      	ldr	r0, [r7, #8]
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	f7fa fe6b 	bl	8000458 <__aeabi_lmul>
 8005782:	0002      	movs	r2, r0
 8005784:	000b      	movs	r3, r1
 8005786:	0010      	movs	r0, r2
 8005788:	0019      	movs	r1, r3
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f7fa fe3f 	bl	8000418 <__aeabi_uldivmod>
 800579a:	0002      	movs	r2, r0
 800579c:	000b      	movs	r3, r1
 800579e:	0013      	movs	r3, r2
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
 80057a2:	e017      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	0018      	movs	r0, r3
 80057a8:	2300      	movs	r3, #0
 80057aa:	0019      	movs	r1, r3
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <HAL_RCC_GetSysClockFreq+0x140>)
 80057ae:	2300      	movs	r3, #0
 80057b0:	f7fa fe52 	bl	8000458 <__aeabi_lmul>
 80057b4:	0002      	movs	r2, r0
 80057b6:	000b      	movs	r3, r1
 80057b8:	0010      	movs	r0, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	001c      	movs	r4, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	001d      	movs	r5, r3
 80057c4:	0022      	movs	r2, r4
 80057c6:	002b      	movs	r3, r5
 80057c8:	f7fa fe26 	bl	8000418 <__aeabi_uldivmod>
 80057cc:	0002      	movs	r2, r0
 80057ce:	000b      	movs	r3, r1
 80057d0:	0013      	movs	r3, r2
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057d8:	e00d      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_GetSysClockFreq+0x138>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0b5b      	lsrs	r3, r3, #13
 80057e0:	2207      	movs	r2, #7
 80057e2:	4013      	ands	r3, r2
 80057e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	3301      	adds	r3, #1
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	0212      	lsls	r2, r2, #8
 80057ee:	409a      	lsls	r2, r3
 80057f0:	0013      	movs	r3, r2
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b00e      	add	sp, #56	; 0x38
 80057fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	003d0900 	.word	0x003d0900
 8005808:	00f42400 	.word	0x00f42400
 800580c:	017d7840 	.word	0x017d7840
 8005810:	08007550 	.word	0x08007550

08005814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <HAL_RCC_GetHCLKFreq+0x10>)
 800581a:	681b      	ldr	r3, [r3, #0]
}
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	20000184 	.word	0x20000184

08005828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800582c:	f7ff fff2 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005830:	0001      	movs	r1, r0
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	2207      	movs	r2, #7
 800583a:	4013      	ands	r3, r2
 800583c:	4a04      	ldr	r2, [pc, #16]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800583e:	5cd3      	ldrb	r3, [r2, r3]
 8005840:	40d9      	lsrs	r1, r3
 8005842:	000b      	movs	r3, r1
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40021000 	.word	0x40021000
 8005850:	08007548 	.word	0x08007548

08005854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005858:	f7ff ffdc 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 800585c:	0001      	movs	r1, r0
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	0adb      	lsrs	r3, r3, #11
 8005864:	2207      	movs	r2, #7
 8005866:	4013      	ands	r3, r2
 8005868:	4a04      	ldr	r2, [pc, #16]	; (800587c <HAL_RCC_GetPCLK2Freq+0x28>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	40d9      	lsrs	r1, r3
 800586e:	000b      	movs	r3, r1
}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	40021000 	.word	0x40021000
 800587c:	08007548 	.word	0x08007548

08005880 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005888:	2017      	movs	r0, #23
 800588a:	183b      	adds	r3, r7, r0
 800588c:	2200      	movs	r2, #0
 800588e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2220      	movs	r2, #32
 8005896:	4013      	ands	r3, r2
 8005898:	d100      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800589a:	e0c2      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589c:	4b81      	ldr	r3, [pc, #516]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800589e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	055b      	lsls	r3, r3, #21
 80058a4:	4013      	ands	r3, r2
 80058a6:	d109      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a8:	4b7e      	ldr	r3, [pc, #504]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ac:	4b7d      	ldr	r3, [pc, #500]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	0549      	lsls	r1, r1, #21
 80058b2:	430a      	orrs	r2, r1
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	4b7a      	ldr	r3, [pc, #488]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4013      	ands	r3, r2
 80058c6:	d11a      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c8:	4b77      	ldr	r3, [pc, #476]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b76      	ldr	r3, [pc, #472]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80058ce:	2180      	movs	r1, #128	; 0x80
 80058d0:	0049      	lsls	r1, r1, #1
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d6:	f7fd fb79 	bl	8002fcc <HAL_GetTick>
 80058da:	0003      	movs	r3, r0
 80058dc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058de:	e008      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e0:	f7fd fb74 	bl	8002fcc <HAL_GetTick>
 80058e4:	0002      	movs	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	; 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e0d4      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f2:	4b6d      	ldr	r3, [pc, #436]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4013      	ands	r3, r2
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80058fe:	4b69      	ldr	r3, [pc, #420]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	23c0      	movs	r3, #192	; 0xc0
 8005904:	039b      	lsls	r3, r3, #14
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	23c0      	movs	r3, #192	; 0xc0
 8005910:	039b      	lsls	r3, r3, #14
 8005912:	4013      	ands	r3, r2
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	429a      	cmp	r2, r3
 8005918:	d013      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	23c0      	movs	r3, #192	; 0xc0
 8005920:	029b      	lsls	r3, r3, #10
 8005922:	401a      	ands	r2, r3
 8005924:	23c0      	movs	r3, #192	; 0xc0
 8005926:	029b      	lsls	r3, r3, #10
 8005928:	429a      	cmp	r2, r3
 800592a:	d10a      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800592c:	4b5d      	ldr	r3, [pc, #372]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	401a      	ands	r2, r3
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	429a      	cmp	r2, r3
 800593c:	d101      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0ac      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005942:	4b58      	ldr	r3, [pc, #352]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005946:	23c0      	movs	r3, #192	; 0xc0
 8005948:	029b      	lsls	r3, r3, #10
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d03b      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	23c0      	movs	r3, #192	; 0xc0
 800595a:	029b      	lsls	r3, r3, #10
 800595c:	4013      	ands	r3, r2
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d033      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2220      	movs	r2, #32
 800596a:	4013      	ands	r3, r2
 800596c:	d02e      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800596e:	4b4d      	ldr	r3, [pc, #308]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	4a4e      	ldr	r2, [pc, #312]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005974:	4013      	ands	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005978:	4b4a      	ldr	r3, [pc, #296]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800597a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	0309      	lsls	r1, r1, #12
 8005982:	430a      	orrs	r2, r1
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005986:	4b47      	ldr	r3, [pc, #284]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598a:	4b46      	ldr	r3, [pc, #280]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800598c:	4948      	ldr	r1, [pc, #288]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800598e:	400a      	ands	r2, r1
 8005990:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005992:	4b44      	ldr	r3, [pc, #272]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4013      	ands	r3, r2
 80059a0:	d014      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a2:	f7fd fb13 	bl	8002fcc <HAL_GetTick>
 80059a6:	0003      	movs	r3, r0
 80059a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059aa:	e009      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fd fb0e 	bl	8002fcc <HAL_GetTick>
 80059b0:	0002      	movs	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	4a3f      	ldr	r2, [pc, #252]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e06d      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c0:	4b38      	ldr	r3, [pc, #224]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c4:	2380      	movs	r3, #128	; 0x80
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4013      	ands	r3, r2
 80059ca:	d0ef      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	23c0      	movs	r3, #192	; 0xc0
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	401a      	ands	r2, r3
 80059d6:	23c0      	movs	r3, #192	; 0xc0
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	429a      	cmp	r2, r3
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80059de:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a35      	ldr	r2, [pc, #212]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	0019      	movs	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	23c0      	movs	r3, #192	; 0xc0
 80059ee:	039b      	lsls	r3, r3, #14
 80059f0:	401a      	ands	r2, r3
 80059f2:	4b2c      	ldr	r3, [pc, #176]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059fa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	23c0      	movs	r3, #192	; 0xc0
 8005a02:	029b      	lsls	r3, r3, #10
 8005a04:	401a      	ands	r2, r3
 8005a06:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a0c:	2317      	movs	r3, #23
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d105      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a16:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a1c:	4927      	ldr	r1, [pc, #156]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005a1e:	400a      	ands	r2, r1
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2202      	movs	r2, #2
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a30:	220c      	movs	r2, #12
 8005a32:	4393      	bics	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2204      	movs	r2, #4
 8005a46:	4013      	ands	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a4a:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	0019      	movs	r1, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2208      	movs	r2, #8
 8005a64:	4013      	ands	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6c:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	4013      	ands	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005a86:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	4a0f      	ldr	r2, [pc, #60]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	0019      	movs	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a96:	430a      	orrs	r2, r1
 8005a98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b006      	add	sp, #24
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	fffcffff 	.word	0xfffcffff
 8005ab0:	fff7ffff 	.word	0xfff7ffff
 8005ab4:	00001388 	.word	0x00001388
 8005ab8:	ffcfffff 	.word	0xffcfffff
 8005abc:	efffffff 	.word	0xefffffff
 8005ac0:	fffff3ff 	.word	0xfffff3ff
 8005ac4:	ffffcfff 	.word	0xffffcfff
 8005ac8:	fff3ffff 	.word	0xfff3ffff

08005acc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e08e      	b.n	8005bfc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2221      	movs	r2, #33	; 0x21
 8005ae2:	5c9b      	ldrb	r3, [r3, r2]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	2100      	movs	r1, #0
 8005af0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7fd f941 	bl	8002d7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	2102      	movs	r1, #2
 8005b00:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	22ca      	movs	r2, #202	; 0xca
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2253      	movs	r2, #83	; 0x53
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 f89e 	bl	8005c56 <RTC_EnterInitMode>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d009      	beq.n	8005b32 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	22ff      	movs	r2, #255	; 0xff
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2221      	movs	r2, #33	; 0x21
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e064      	b.n	8005bfc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4931      	ldr	r1, [pc, #196]	; (8005c04 <HAL_RTC_Init+0x138>)
 8005b3e:	400a      	ands	r2, r1
 8005b40:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6899      	ldr	r1, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	68d2      	ldr	r2, [r2, #12]
 8005b68:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6919      	ldr	r1, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	041a      	lsls	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2180      	movs	r1, #128	; 0x80
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2103      	movs	r1, #3
 8005b9a:	438a      	bics	r2, r1
 8005b9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d113      	bne.n	8005bea <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f000 f81f 	bl	8005c08 <HAL_RTC_WaitForSynchro>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d00d      	beq.n	8005bea <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	22ff      	movs	r2, #255	; 0xff
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2221      	movs	r2, #33	; 0x21
 8005bda:	2104      	movs	r1, #4
 8005bdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	2100      	movs	r1, #0
 8005be4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e008      	b.n	8005bfc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2221      	movs	r2, #33	; 0x21
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
  }
}
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b002      	add	sp, #8
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	ff8fffbf 	.word	0xff8fffbf

08005c08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	21a0      	movs	r1, #160	; 0xa0
 8005c1c:	438a      	bics	r2, r1
 8005c1e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c20:	f7fd f9d4 	bl	8002fcc <HAL_GetTick>
 8005c24:	0003      	movs	r3, r0
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c28:	e00a      	b.n	8005c40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c2a:	f7fd f9cf 	bl	8002fcc <HAL_GetTick>
 8005c2e:	0002      	movs	r2, r0
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1ad2      	subs	r2, r2, r3
 8005c34:	23fa      	movs	r3, #250	; 0xfa
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d901      	bls.n	8005c40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e006      	b.n	8005c4e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d0ee      	beq.n	8005c2a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b004      	add	sp, #16
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2240      	movs	r2, #64	; 0x40
 8005c66:	4013      	ands	r3, r2
 8005c68:	d11a      	bne.n	8005ca0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4252      	negs	r2, r2
 8005c72:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c74:	f7fd f9aa 	bl	8002fcc <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c7c:	e00a      	b.n	8005c94 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c7e:	f7fd f9a5 	bl	8002fcc <HAL_GetTick>
 8005c82:	0002      	movs	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	23fa      	movs	r3, #250	; 0xfa
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d901      	bls.n	8005c94 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e006      	b.n	8005ca2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2240      	movs	r2, #64	; 0x40
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d0ee      	beq.n	8005c7e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b004      	add	sp, #16
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	5c9b      	ldrb	r3, [r3, r2]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0ad      	b.n	8005e22 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	2101      	movs	r1, #1
 8005ccc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2221      	movs	r2, #33	; 0x21
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	22ca      	movs	r2, #202	; 0xca
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2253      	movs	r2, #83	; 0x53
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d021      	beq.n	8005d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8005cf4:	f7fd f96a 	bl	8002fcc <HAL_GetTick>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005cfc:	e016      	b.n	8005d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cfe:	f7fd f965 	bl	8002fcc <HAL_GetTick>
 8005d02:	0002      	movs	r2, r0
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	23fa      	movs	r3, #250	; 0xfa
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d90d      	bls.n	8005d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	22ff      	movs	r2, #255	; 0xff
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2221      	movs	r2, #33	; 0x21
 8005d1c:	2103      	movs	r1, #3
 8005d1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e07a      	b.n	8005e22 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2204      	movs	r2, #4
 8005d34:	4013      	ands	r3, r2
 8005d36:	d1e2      	bne.n	8005cfe <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	493a      	ldr	r1, [pc, #232]	; (8005e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8005d44:	400a      	ands	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	22ff      	movs	r2, #255	; 0xff
 8005d50:	401a      	ands	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4936      	ldr	r1, [pc, #216]	; (8005e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005d5c:	f7fd f936 	bl	8002fcc <HAL_GetTick>
 8005d60:	0003      	movs	r3, r0
 8005d62:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005d64:	e016      	b.n	8005d94 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d66:	f7fd f931 	bl	8002fcc <HAL_GetTick>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	23fa      	movs	r3, #250	; 0xfa
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d90d      	bls.n	8005d94 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2221      	movs	r2, #33	; 0x21
 8005d84:	2103      	movs	r1, #3
 8005d86:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e046      	b.n	8005e22 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d0e2      	beq.n	8005d66 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2107      	movs	r1, #7
 8005db4:	438a      	bics	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005dc8:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	0349      	lsls	r1, r1, #13
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005dd6:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	4b16      	ldr	r3, [pc, #88]	; (8005e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	0349      	lsls	r1, r1, #13
 8005de0:	430a      	orrs	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	01c9      	lsls	r1, r1, #7
 8005df2:	430a      	orrs	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2180      	movs	r1, #128	; 0x80
 8005e02:	00c9      	lsls	r1, r1, #3
 8005e04:	430a      	orrs	r2, r1
 8005e06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2221      	movs	r2, #33	; 0x21
 8005e14:	2101      	movs	r1, #1
 8005e16:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	0018      	movs	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b006      	add	sp, #24
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	fffffbff 	.word	0xfffffbff
 8005e30:	fffffb7f 	.word	0xfffffb7f
 8005e34:	40010400 	.word	0x40010400

08005e38 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	5c9b      	ldrb	r3, [r3, r2]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e04e      	b.n	8005eec <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	2101      	movs	r1, #1
 8005e54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2221      	movs	r2, #33	; 0x21
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	22ca      	movs	r2, #202	; 0xca
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2253      	movs	r2, #83	; 0x53
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	491e      	ldr	r1, [pc, #120]	; (8005ef4 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8005e7a:	400a      	ands	r2, r1
 8005e7c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	491b      	ldr	r1, [pc, #108]	; (8005ef8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8005e8a:	400a      	ands	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005e8e:	f7fd f89d 	bl	8002fcc <HAL_GetTick>
 8005e92:	0003      	movs	r3, r0
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005e96:	e016      	b.n	8005ec6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e98:	f7fd f898 	bl	8002fcc <HAL_GetTick>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad2      	subs	r2, r2, r3
 8005ea2:	23fa      	movs	r3, #250	; 0xfa
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90d      	bls.n	8005ec6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	22ff      	movs	r2, #255	; 0xff
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2221      	movs	r2, #33	; 0x21
 8005eb6:	2103      	movs	r1, #3
 8005eb8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e012      	b.n	8005eec <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d0e2      	beq.n	8005e98 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	22ff      	movs	r2, #255	; 0xff
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2221      	movs	r2, #33	; 0x21
 8005ede:	2101      	movs	r1, #1
 8005ee0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b004      	add	sp, #16
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	fffffbff 	.word	0xfffffbff
 8005ef8:	ffffbfff 	.word	0xffffbfff

08005efc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d00d      	beq.n	8005f2e <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f000 f81b 	bl	8005f50 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	22ff      	movs	r2, #255	; 0xff
 8005f22:	401a      	ands	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4907      	ldr	r1, [pc, #28]	; (8005f48 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8005f30:	2280      	movs	r2, #128	; 0x80
 8005f32:	0352      	lsls	r2, r2, #13
 8005f34:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2221      	movs	r2, #33	; 0x21
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]
}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b002      	add	sp, #8
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	fffffb7f 	.word	0xfffffb7f
 8005f4c:	40010400 	.word	0x40010400

08005f50 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005f58:	46c0      	nop			; (mov r8, r8)
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b002      	add	sp, #8
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e044      	b.n	8005ffc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d107      	bne.n	8005f8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2274      	movs	r2, #116	; 0x74
 8005f7e:	2100      	movs	r1, #0
 8005f80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7fc fe67 	bl	8002c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2224      	movs	r2, #36	; 0x24
 8005f8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	438a      	bics	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 f912 	bl	80061cc <UART_SetConfig>
 8005fa8:	0003      	movs	r3, r0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e024      	b.n	8005ffc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 fb67 	bl	8006690 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	490d      	ldr	r1, [pc, #52]	; (8006004 <HAL_UART_Init+0xa4>)
 8005fce:	400a      	ands	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	212a      	movs	r1, #42	; 0x2a
 8005fde:	438a      	bics	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2101      	movs	r1, #1
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f000 fbff 	bl	80067f8 <UART_CheckIdleState>
 8005ffa:	0003      	movs	r3, r0
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}
 8006004:	ffffb7ff 	.word	0xffffb7ff

08006008 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e02c      	b.n	8006074 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2224      	movs	r2, #36	; 0x24
 800601e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2101      	movs	r1, #1
 800602c:	438a      	bics	r2, r1
 800602e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2200      	movs	r2, #0
 800603e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	0018      	movs	r0, r3
 800604c:	f7fc fe6c 	bl	8002d28 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	2100      	movs	r1, #0
 8006056:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2274      	movs	r2, #116	; 0x74
 800606e:	2100      	movs	r1, #0
 8006070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	1dbb      	adds	r3, r7, #6
 800608a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006090:	2b20      	cmp	r3, #32
 8006092:	d000      	beq.n	8006096 <HAL_UART_Transmit+0x1a>
 8006094:	e095      	b.n	80061c2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_UART_Transmit+0x28>
 800609c:	1dbb      	adds	r3, r7, #6
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e08d      	b.n	80061c4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	015b      	lsls	r3, r3, #5
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d109      	bne.n	80060c8 <HAL_UART_Transmit+0x4c>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2201      	movs	r2, #1
 80060c0:	4013      	ands	r3, r2
 80060c2:	d001      	beq.n	80060c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e07d      	b.n	80061c4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2274      	movs	r2, #116	; 0x74
 80060cc:	5c9b      	ldrb	r3, [r3, r2]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_UART_Transmit+0x5a>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e076      	b.n	80061c4 <HAL_UART_Transmit+0x148>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2274      	movs	r2, #116	; 0x74
 80060da:	2101      	movs	r1, #1
 80060dc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	2100      	movs	r1, #0
 80060e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2221      	movs	r2, #33	; 0x21
 80060ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ec:	f7fc ff6e 	bl	8002fcc <HAL_GetTick>
 80060f0:	0003      	movs	r3, r0
 80060f2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1dba      	adds	r2, r7, #6
 80060f8:	2150      	movs	r1, #80	; 0x50
 80060fa:	8812      	ldrh	r2, [r2, #0]
 80060fc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1dba      	adds	r2, r7, #6
 8006102:	2152      	movs	r1, #82	; 0x52
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	015b      	lsls	r3, r3, #5
 8006110:	429a      	cmp	r2, r3
 8006112:	d108      	bne.n	8006126 <HAL_UART_Transmit+0xaa>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	e003      	b.n	800612e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2274      	movs	r2, #116	; 0x74
 8006132:	2100      	movs	r1, #0
 8006134:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006136:	e02c      	b.n	8006192 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	0013      	movs	r3, r2
 8006142:	2200      	movs	r2, #0
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	f000 fb9f 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 800614a:	1e03      	subs	r3, r0, #0
 800614c:	d001      	beq.n	8006152 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e038      	b.n	80061c4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	001a      	movs	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	05d2      	lsls	r2, r2, #23
 8006164:	0dd2      	lsrs	r2, r2, #23
 8006166:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	3302      	adds	r3, #2
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	e007      	b.n	8006180 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3301      	adds	r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2252      	movs	r2, #82	; 0x52
 8006184:	5a9b      	ldrh	r3, [r3, r2]
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b299      	uxth	r1, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2252      	movs	r2, #82	; 0x52
 8006190:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2252      	movs	r2, #82	; 0x52
 8006196:	5a9b      	ldrh	r3, [r3, r2]
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1cc      	bne.n	8006138 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	0013      	movs	r3, r2
 80061a8:	2200      	movs	r2, #0
 80061aa:	2140      	movs	r1, #64	; 0x40
 80061ac:	f000 fb6c 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 80061b0:	1e03      	subs	r3, r0, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e005      	b.n	80061c4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e000      	b.n	80061c4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	0018      	movs	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b008      	add	sp, #32
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061cc:	b5b0      	push	{r4, r5, r7, lr}
 80061ce:	b08e      	sub	sp, #56	; 0x38
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d4:	231a      	movs	r3, #26
 80061d6:	2218      	movs	r2, #24
 80061d8:	4694      	mov	ip, r2
 80061da:	44bc      	add	ip, r7
 80061dc:	4463      	add	r3, ip
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4abc      	ldr	r2, [pc, #752]	; (80064f4 <UART_SetConfig+0x328>)
 8006202:	4013      	ands	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800620c:	430a      	orrs	r2, r1
 800620e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	4ab8      	ldr	r2, [pc, #736]	; (80064f8 <UART_SetConfig+0x32c>)
 8006218:	4013      	ands	r3, r2
 800621a:	0019      	movs	r1, r3
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4ab2      	ldr	r2, [pc, #712]	; (80064fc <UART_SetConfig+0x330>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800623e:	4313      	orrs	r3, r2
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	4aad      	ldr	r2, [pc, #692]	; (8006500 <UART_SetConfig+0x334>)
 800624a:	4013      	ands	r3, r2
 800624c:	0019      	movs	r1, r3
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4aa9      	ldr	r2, [pc, #676]	; (8006504 <UART_SetConfig+0x338>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d136      	bne.n	80062d0 <UART_SetConfig+0x104>
 8006262:	4ba9      	ldr	r3, [pc, #676]	; (8006508 <UART_SetConfig+0x33c>)
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	220c      	movs	r2, #12
 8006268:	4013      	ands	r3, r2
 800626a:	2b0c      	cmp	r3, #12
 800626c:	d020      	beq.n	80062b0 <UART_SetConfig+0xe4>
 800626e:	d827      	bhi.n	80062c0 <UART_SetConfig+0xf4>
 8006270:	2b08      	cmp	r3, #8
 8006272:	d00d      	beq.n	8006290 <UART_SetConfig+0xc4>
 8006274:	d824      	bhi.n	80062c0 <UART_SetConfig+0xf4>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <UART_SetConfig+0xb4>
 800627a:	2b04      	cmp	r3, #4
 800627c:	d010      	beq.n	80062a0 <UART_SetConfig+0xd4>
 800627e:	e01f      	b.n	80062c0 <UART_SetConfig+0xf4>
 8006280:	231b      	movs	r3, #27
 8006282:	2218      	movs	r2, #24
 8006284:	4694      	mov	ip, r2
 8006286:	44bc      	add	ip, r7
 8006288:	4463      	add	r3, ip
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e06f      	b.n	8006370 <UART_SetConfig+0x1a4>
 8006290:	231b      	movs	r3, #27
 8006292:	2218      	movs	r2, #24
 8006294:	4694      	mov	ip, r2
 8006296:	44bc      	add	ip, r7
 8006298:	4463      	add	r3, ip
 800629a:	2202      	movs	r2, #2
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e067      	b.n	8006370 <UART_SetConfig+0x1a4>
 80062a0:	231b      	movs	r3, #27
 80062a2:	2218      	movs	r2, #24
 80062a4:	4694      	mov	ip, r2
 80062a6:	44bc      	add	ip, r7
 80062a8:	4463      	add	r3, ip
 80062aa:	2204      	movs	r2, #4
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e05f      	b.n	8006370 <UART_SetConfig+0x1a4>
 80062b0:	231b      	movs	r3, #27
 80062b2:	2218      	movs	r2, #24
 80062b4:	4694      	mov	ip, r2
 80062b6:	44bc      	add	ip, r7
 80062b8:	4463      	add	r3, ip
 80062ba:	2208      	movs	r2, #8
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e057      	b.n	8006370 <UART_SetConfig+0x1a4>
 80062c0:	231b      	movs	r3, #27
 80062c2:	2218      	movs	r2, #24
 80062c4:	4694      	mov	ip, r2
 80062c6:	44bc      	add	ip, r7
 80062c8:	4463      	add	r3, ip
 80062ca:	2210      	movs	r2, #16
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e04f      	b.n	8006370 <UART_SetConfig+0x1a4>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a89      	ldr	r2, [pc, #548]	; (80064fc <UART_SetConfig+0x330>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d143      	bne.n	8006362 <UART_SetConfig+0x196>
 80062da:	4b8b      	ldr	r3, [pc, #556]	; (8006508 <UART_SetConfig+0x33c>)
 80062dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062de:	23c0      	movs	r3, #192	; 0xc0
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	4013      	ands	r3, r2
 80062e4:	22c0      	movs	r2, #192	; 0xc0
 80062e6:	0112      	lsls	r2, r2, #4
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d02a      	beq.n	8006342 <UART_SetConfig+0x176>
 80062ec:	22c0      	movs	r2, #192	; 0xc0
 80062ee:	0112      	lsls	r2, r2, #4
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d82e      	bhi.n	8006352 <UART_SetConfig+0x186>
 80062f4:	2280      	movs	r2, #128	; 0x80
 80062f6:	0112      	lsls	r2, r2, #4
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d012      	beq.n	8006322 <UART_SetConfig+0x156>
 80062fc:	2280      	movs	r2, #128	; 0x80
 80062fe:	0112      	lsls	r2, r2, #4
 8006300:	4293      	cmp	r3, r2
 8006302:	d826      	bhi.n	8006352 <UART_SetConfig+0x186>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <UART_SetConfig+0x146>
 8006308:	2280      	movs	r2, #128	; 0x80
 800630a:	00d2      	lsls	r2, r2, #3
 800630c:	4293      	cmp	r3, r2
 800630e:	d010      	beq.n	8006332 <UART_SetConfig+0x166>
 8006310:	e01f      	b.n	8006352 <UART_SetConfig+0x186>
 8006312:	231b      	movs	r3, #27
 8006314:	2218      	movs	r2, #24
 8006316:	4694      	mov	ip, r2
 8006318:	44bc      	add	ip, r7
 800631a:	4463      	add	r3, ip
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	e026      	b.n	8006370 <UART_SetConfig+0x1a4>
 8006322:	231b      	movs	r3, #27
 8006324:	2218      	movs	r2, #24
 8006326:	4694      	mov	ip, r2
 8006328:	44bc      	add	ip, r7
 800632a:	4463      	add	r3, ip
 800632c:	2202      	movs	r2, #2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e01e      	b.n	8006370 <UART_SetConfig+0x1a4>
 8006332:	231b      	movs	r3, #27
 8006334:	2218      	movs	r2, #24
 8006336:	4694      	mov	ip, r2
 8006338:	44bc      	add	ip, r7
 800633a:	4463      	add	r3, ip
 800633c:	2204      	movs	r2, #4
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e016      	b.n	8006370 <UART_SetConfig+0x1a4>
 8006342:	231b      	movs	r3, #27
 8006344:	2218      	movs	r2, #24
 8006346:	4694      	mov	ip, r2
 8006348:	44bc      	add	ip, r7
 800634a:	4463      	add	r3, ip
 800634c:	2208      	movs	r2, #8
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	e00e      	b.n	8006370 <UART_SetConfig+0x1a4>
 8006352:	231b      	movs	r3, #27
 8006354:	2218      	movs	r2, #24
 8006356:	4694      	mov	ip, r2
 8006358:	44bc      	add	ip, r7
 800635a:	4463      	add	r3, ip
 800635c:	2210      	movs	r2, #16
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e006      	b.n	8006370 <UART_SetConfig+0x1a4>
 8006362:	231b      	movs	r3, #27
 8006364:	2218      	movs	r2, #24
 8006366:	4694      	mov	ip, r2
 8006368:	44bc      	add	ip, r7
 800636a:	4463      	add	r3, ip
 800636c:	2210      	movs	r2, #16
 800636e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a61      	ldr	r2, [pc, #388]	; (80064fc <UART_SetConfig+0x330>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d000      	beq.n	800637c <UART_SetConfig+0x1b0>
 800637a:	e088      	b.n	800648e <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800637c:	231b      	movs	r3, #27
 800637e:	2218      	movs	r2, #24
 8006380:	4694      	mov	ip, r2
 8006382:	44bc      	add	ip, r7
 8006384:	4463      	add	r3, ip
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d01d      	beq.n	80063c8 <UART_SetConfig+0x1fc>
 800638c:	dc20      	bgt.n	80063d0 <UART_SetConfig+0x204>
 800638e:	2b04      	cmp	r3, #4
 8006390:	d015      	beq.n	80063be <UART_SetConfig+0x1f2>
 8006392:	dc1d      	bgt.n	80063d0 <UART_SetConfig+0x204>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <UART_SetConfig+0x1d2>
 8006398:	2b02      	cmp	r3, #2
 800639a:	d005      	beq.n	80063a8 <UART_SetConfig+0x1dc>
 800639c:	e018      	b.n	80063d0 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800639e:	f7ff fa43 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80063a2:	0003      	movs	r3, r0
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063a6:	e01d      	b.n	80063e4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a8:	4b57      	ldr	r3, [pc, #348]	; (8006508 <UART_SetConfig+0x33c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2210      	movs	r2, #16
 80063ae:	4013      	ands	r3, r2
 80063b0:	d002      	beq.n	80063b8 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063b2:	4b56      	ldr	r3, [pc, #344]	; (800650c <UART_SetConfig+0x340>)
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063b6:	e015      	b.n	80063e4 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b55      	ldr	r3, [pc, #340]	; (8006510 <UART_SetConfig+0x344>)
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063bc:	e012      	b.n	80063e4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7ff f983 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 80063c2:	0003      	movs	r3, r0
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063c6:	e00d      	b.n	80063e4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ce:	e009      	b.n	80063e4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063d4:	231a      	movs	r3, #26
 80063d6:	2218      	movs	r2, #24
 80063d8:	4694      	mov	ip, r2
 80063da:	44bc      	add	ip, r7
 80063dc:	4463      	add	r3, ip
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
        break;
 80063e2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d100      	bne.n	80063ec <UART_SetConfig+0x220>
 80063ea:	e139      	b.n	8006660 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	0013      	movs	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d305      	bcc.n	8006408 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006404:	429a      	cmp	r2, r3
 8006406:	d907      	bls.n	8006418 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8006408:	231a      	movs	r3, #26
 800640a:	2218      	movs	r2, #24
 800640c:	4694      	mov	ip, r2
 800640e:	44bc      	add	ip, r7
 8006410:	4463      	add	r3, ip
 8006412:	2201      	movs	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e123      	b.n	8006660 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	6939      	ldr	r1, [r7, #16]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	000b      	movs	r3, r1
 8006426:	0e1b      	lsrs	r3, r3, #24
 8006428:	0010      	movs	r0, r2
 800642a:	0205      	lsls	r5, r0, #8
 800642c:	431d      	orrs	r5, r3
 800642e:	000b      	movs	r3, r1
 8006430:	021c      	lsls	r4, r3, #8
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	68b8      	ldr	r0, [r7, #8]
 8006440:	68f9      	ldr	r1, [r7, #12]
 8006442:	1900      	adds	r0, r0, r4
 8006444:	4169      	adcs	r1, r5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	2300      	movs	r3, #0
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f7f9 ffe0 	bl	8000418 <__aeabi_uldivmod>
 8006458:	0002      	movs	r2, r0
 800645a:	000b      	movs	r3, r1
 800645c:	0013      	movs	r3, r2
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006462:	23c0      	movs	r3, #192	; 0xc0
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	429a      	cmp	r2, r3
 8006468:	d309      	bcc.n	800647e <UART_SetConfig+0x2b2>
 800646a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	035b      	lsls	r3, r3, #13
 8006470:	429a      	cmp	r2, r3
 8006472:	d204      	bcs.n	800647e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800647a:	60da      	str	r2, [r3, #12]
 800647c:	e0f0      	b.n	8006660 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800647e:	231a      	movs	r3, #26
 8006480:	2218      	movs	r2, #24
 8006482:	4694      	mov	ip, r2
 8006484:	44bc      	add	ip, r7
 8006486:	4463      	add	r3, ip
 8006488:	2201      	movs	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e0e8      	b.n	8006660 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	429a      	cmp	r2, r3
 8006498:	d000      	beq.n	800649c <UART_SetConfig+0x2d0>
 800649a:	e087      	b.n	80065ac <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 800649c:	231b      	movs	r3, #27
 800649e:	2218      	movs	r2, #24
 80064a0:	4694      	mov	ip, r2
 80064a2:	44bc      	add	ip, r7
 80064a4:	4463      	add	r3, ip
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d835      	bhi.n	8006518 <UART_SetConfig+0x34c>
 80064ac:	009a      	lsls	r2, r3, #2
 80064ae:	4b19      	ldr	r3, [pc, #100]	; (8006514 <UART_SetConfig+0x348>)
 80064b0:	18d3      	adds	r3, r2, r3
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b6:	f7ff f9b7 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80064ba:	0003      	movs	r3, r0
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064be:	e035      	b.n	800652c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c0:	f7ff f9c8 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 80064c4:	0003      	movs	r3, r0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c8:	e030      	b.n	800652c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <UART_SetConfig+0x33c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2210      	movs	r2, #16
 80064d0:	4013      	ands	r3, r2
 80064d2:	d002      	beq.n	80064da <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80064d4:	4b0d      	ldr	r3, [pc, #52]	; (800650c <UART_SetConfig+0x340>)
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064d8:	e028      	b.n	800652c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <UART_SetConfig+0x344>)
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064de:	e025      	b.n	800652c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e0:	f7ff f8f2 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 80064e4:	0003      	movs	r3, r0
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064e8:	e020      	b.n	800652c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064f0:	e01c      	b.n	800652c <UART_SetConfig+0x360>
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	efff69f3 	.word	0xefff69f3
 80064f8:	ffffcfff 	.word	0xffffcfff
 80064fc:	40004800 	.word	0x40004800
 8006500:	fffff4ff 	.word	0xfffff4ff
 8006504:	40004400 	.word	0x40004400
 8006508:	40021000 	.word	0x40021000
 800650c:	003d0900 	.word	0x003d0900
 8006510:	00f42400 	.word	0x00f42400
 8006514:	0800755c 	.word	0x0800755c
      default:
        pclk = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800651c:	231a      	movs	r3, #26
 800651e:	2218      	movs	r2, #24
 8006520:	4694      	mov	ip, r2
 8006522:	44bc      	add	ip, r7
 8006524:	4463      	add	r3, ip
 8006526:	2201      	movs	r2, #1
 8006528:	701a      	strb	r2, [r3, #0]
        break;
 800652a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d100      	bne.n	8006534 <UART_SetConfig+0x368>
 8006532:	e095      	b.n	8006660 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	005a      	lsls	r2, r3, #1
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	18d2      	adds	r2, r2, r3
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	0019      	movs	r1, r3
 8006546:	0010      	movs	r0, r2
 8006548:	f7f9 fdf0 	bl	800012c <__udivsi3>
 800654c:	0003      	movs	r3, r0
 800654e:	b29b      	uxth	r3, r3
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	2b0f      	cmp	r3, #15
 8006556:	d921      	bls.n	800659c <UART_SetConfig+0x3d0>
 8006558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	025b      	lsls	r3, r3, #9
 800655e:	429a      	cmp	r2, r3
 8006560:	d21c      	bcs.n	800659c <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	b29a      	uxth	r2, r3
 8006566:	200e      	movs	r0, #14
 8006568:	2418      	movs	r4, #24
 800656a:	193b      	adds	r3, r7, r4
 800656c:	181b      	adds	r3, r3, r0
 800656e:	210f      	movs	r1, #15
 8006570:	438a      	bics	r2, r1
 8006572:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	b29b      	uxth	r3, r3
 800657a:	2207      	movs	r2, #7
 800657c:	4013      	ands	r3, r2
 800657e:	b299      	uxth	r1, r3
 8006580:	193b      	adds	r3, r7, r4
 8006582:	181b      	adds	r3, r3, r0
 8006584:	193a      	adds	r2, r7, r4
 8006586:	1812      	adds	r2, r2, r0
 8006588:	8812      	ldrh	r2, [r2, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	193a      	adds	r2, r7, r4
 8006594:	1812      	adds	r2, r2, r0
 8006596:	8812      	ldrh	r2, [r2, #0]
 8006598:	60da      	str	r2, [r3, #12]
 800659a:	e061      	b.n	8006660 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800659c:	231a      	movs	r3, #26
 800659e:	2218      	movs	r2, #24
 80065a0:	4694      	mov	ip, r2
 80065a2:	44bc      	add	ip, r7
 80065a4:	4463      	add	r3, ip
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e059      	b.n	8006660 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ac:	231b      	movs	r3, #27
 80065ae:	2218      	movs	r2, #24
 80065b0:	4694      	mov	ip, r2
 80065b2:	44bc      	add	ip, r7
 80065b4:	4463      	add	r3, ip
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d822      	bhi.n	8006602 <UART_SetConfig+0x436>
 80065bc:	009a      	lsls	r2, r3, #2
 80065be:	4b30      	ldr	r3, [pc, #192]	; (8006680 <UART_SetConfig+0x4b4>)
 80065c0:	18d3      	adds	r3, r2, r3
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c6:	f7ff f92f 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80065ca:	0003      	movs	r3, r0
 80065cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065ce:	e022      	b.n	8006616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d0:	f7ff f940 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 80065d4:	0003      	movs	r3, r0
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065d8:	e01d      	b.n	8006616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065da:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <UART_SetConfig+0x4b8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2210      	movs	r2, #16
 80065e0:	4013      	ands	r3, r2
 80065e2:	d002      	beq.n	80065ea <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80065e4:	4b28      	ldr	r3, [pc, #160]	; (8006688 <UART_SetConfig+0x4bc>)
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065e8:	e015      	b.n	8006616 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80065ea:	4b28      	ldr	r3, [pc, #160]	; (800668c <UART_SetConfig+0x4c0>)
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065ee:	e012      	b.n	8006616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f0:	f7ff f86a 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 80065f4:	0003      	movs	r3, r0
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065f8:	e00d      	b.n	8006616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fa:	2380      	movs	r3, #128	; 0x80
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006600:	e009      	b.n	8006616 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006606:	231a      	movs	r3, #26
 8006608:	2218      	movs	r2, #24
 800660a:	4694      	mov	ip, r2
 800660c:	44bc      	add	ip, r7
 800660e:	4463      	add	r3, ip
 8006610:	2201      	movs	r2, #1
 8006612:	701a      	strb	r2, [r3, #0]
        break;
 8006614:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d021      	beq.n	8006660 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	085a      	lsrs	r2, r3, #1
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	18d2      	adds	r2, r2, r3
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	0019      	movs	r1, r3
 800662c:	0010      	movs	r0, r2
 800662e:	f7f9 fd7d 	bl	800012c <__udivsi3>
 8006632:	0003      	movs	r3, r0
 8006634:	b29b      	uxth	r3, r3
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	2b0f      	cmp	r3, #15
 800663c:	d909      	bls.n	8006652 <UART_SetConfig+0x486>
 800663e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	025b      	lsls	r3, r3, #9
 8006644:	429a      	cmp	r2, r3
 8006646:	d204      	bcs.n	8006652 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800664e:	60da      	str	r2, [r3, #12]
 8006650:	e006      	b.n	8006660 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006652:	231a      	movs	r3, #26
 8006654:	2218      	movs	r2, #24
 8006656:	4694      	mov	ip, r2
 8006658:	44bc      	add	ip, r7
 800665a:	4463      	add	r3, ip
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2200      	movs	r2, #0
 8006664:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	2200      	movs	r2, #0
 800666a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800666c:	231a      	movs	r3, #26
 800666e:	2218      	movs	r2, #24
 8006670:	4694      	mov	ip, r2
 8006672:	44bc      	add	ip, r7
 8006674:	4463      	add	r3, ip
 8006676:	781b      	ldrb	r3, [r3, #0]
}
 8006678:	0018      	movs	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	b00e      	add	sp, #56	; 0x38
 800667e:	bdb0      	pop	{r4, r5, r7, pc}
 8006680:	08007580 	.word	0x08007580
 8006684:	40021000 	.word	0x40021000
 8006688:	003d0900 	.word	0x003d0900
 800668c:	00f42400 	.word	0x00f42400

08006690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	2201      	movs	r2, #1
 800669e:	4013      	ands	r3, r2
 80066a0:	d00b      	beq.n	80066ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4a4a      	ldr	r2, [pc, #296]	; (80067d4 <UART_AdvFeatureConfig+0x144>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	0019      	movs	r1, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	2202      	movs	r2, #2
 80066c0:	4013      	ands	r3, r2
 80066c2:	d00b      	beq.n	80066dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	4a43      	ldr	r2, [pc, #268]	; (80067d8 <UART_AdvFeatureConfig+0x148>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	0019      	movs	r1, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	2204      	movs	r2, #4
 80066e2:	4013      	ands	r3, r2
 80066e4:	d00b      	beq.n	80066fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a3b      	ldr	r2, [pc, #236]	; (80067dc <UART_AdvFeatureConfig+0x14c>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	0019      	movs	r1, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	2208      	movs	r2, #8
 8006704:	4013      	ands	r3, r2
 8006706:	d00b      	beq.n	8006720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	4a34      	ldr	r2, [pc, #208]	; (80067e0 <UART_AdvFeatureConfig+0x150>)
 8006710:	4013      	ands	r3, r2
 8006712:	0019      	movs	r1, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	2210      	movs	r2, #16
 8006726:	4013      	ands	r3, r2
 8006728:	d00b      	beq.n	8006742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	4a2c      	ldr	r2, [pc, #176]	; (80067e4 <UART_AdvFeatureConfig+0x154>)
 8006732:	4013      	ands	r3, r2
 8006734:	0019      	movs	r1, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	2220      	movs	r2, #32
 8006748:	4013      	ands	r3, r2
 800674a:	d00b      	beq.n	8006764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4a25      	ldr	r2, [pc, #148]	; (80067e8 <UART_AdvFeatureConfig+0x158>)
 8006754:	4013      	ands	r3, r2
 8006756:	0019      	movs	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	2240      	movs	r2, #64	; 0x40
 800676a:	4013      	ands	r3, r2
 800676c:	d01d      	beq.n	80067aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <UART_AdvFeatureConfig+0x15c>)
 8006776:	4013      	ands	r3, r2
 8006778:	0019      	movs	r1, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	035b      	lsls	r3, r3, #13
 800678e:	429a      	cmp	r2, r3
 8006790:	d10b      	bne.n	80067aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <UART_AdvFeatureConfig+0x160>)
 800679a:	4013      	ands	r3, r2
 800679c:	0019      	movs	r1, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	4013      	ands	r3, r2
 80067b2:	d00b      	beq.n	80067cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4a0e      	ldr	r2, [pc, #56]	; (80067f4 <UART_AdvFeatureConfig+0x164>)
 80067bc:	4013      	ands	r3, r2
 80067be:	0019      	movs	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	fffdffff 	.word	0xfffdffff
 80067d8:	fffeffff 	.word	0xfffeffff
 80067dc:	fffbffff 	.word	0xfffbffff
 80067e0:	ffff7fff 	.word	0xffff7fff
 80067e4:	ffffefff 	.word	0xffffefff
 80067e8:	ffffdfff 	.word	0xffffdfff
 80067ec:	ffefffff 	.word	0xffefffff
 80067f0:	ff9fffff 	.word	0xff9fffff
 80067f4:	fff7ffff 	.word	0xfff7ffff

080067f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2280      	movs	r2, #128	; 0x80
 8006804:	2100      	movs	r1, #0
 8006806:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006808:	f7fc fbe0 	bl	8002fcc <HAL_GetTick>
 800680c:	0003      	movs	r3, r0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2208      	movs	r2, #8
 8006818:	4013      	ands	r3, r2
 800681a:	2b08      	cmp	r3, #8
 800681c:	d10c      	bne.n	8006838 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	0391      	lsls	r1, r2, #14
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4a17      	ldr	r2, [pc, #92]	; (8006884 <UART_CheckIdleState+0x8c>)
 8006828:	9200      	str	r2, [sp, #0]
 800682a:	2200      	movs	r2, #0
 800682c:	f000 f82c 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 8006830:	1e03      	subs	r3, r0, #0
 8006832:	d001      	beq.n	8006838 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e021      	b.n	800687c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2204      	movs	r2, #4
 8006840:	4013      	ands	r3, r2
 8006842:	2b04      	cmp	r3, #4
 8006844:	d10c      	bne.n	8006860 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2280      	movs	r2, #128	; 0x80
 800684a:	03d1      	lsls	r1, r2, #15
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4a0d      	ldr	r2, [pc, #52]	; (8006884 <UART_CheckIdleState+0x8c>)
 8006850:	9200      	str	r2, [sp, #0]
 8006852:	2200      	movs	r2, #0
 8006854:	f000 f818 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 8006858:	1e03      	subs	r3, r0, #0
 800685a:	d001      	beq.n	8006860 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e00d      	b.n	800687c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2274      	movs	r2, #116	; 0x74
 8006876:	2100      	movs	r1, #0
 8006878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	0018      	movs	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	b004      	add	sp, #16
 8006882:	bd80      	pop	{r7, pc}
 8006884:	01ffffff 	.word	0x01ffffff

08006888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b094      	sub	sp, #80	; 0x50
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	1dfb      	adds	r3, r7, #7
 8006896:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006898:	e0a3      	b.n	80069e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800689c:	3301      	adds	r3, #1
 800689e:	d100      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80068a0:	e09f      	b.n	80069e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a2:	f7fc fb93 	bl	8002fcc <HAL_GetTick>
 80068a6:	0002      	movs	r2, r0
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d13d      	bne.n	8006934 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b8:	f3ef 8310 	mrs	r3, PRIMASK
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c0:	647b      	str	r3, [r7, #68]	; 0x44
 80068c2:	2301      	movs	r3, #1
 80068c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	f383 8810 	msr	PRIMASK, r3
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	494c      	ldr	r1, [pc, #304]	; (8006a0c <UART_WaitOnFlagUntilTimeout+0x184>)
 80068da:	400a      	ands	r2, r1
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f383 8810 	msr	PRIMASK, r3
}
 80068e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ea:	f3ef 8310 	mrs	r3, PRIMASK
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f2:	643b      	str	r3, [r7, #64]	; 0x40
 80068f4:	2301      	movs	r3, #1
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	f383 8810 	msr	PRIMASK, r3
}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2101      	movs	r1, #1
 800690c:	438a      	bics	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
 8006910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2274      	movs	r2, #116	; 0x74
 800692c:	2100      	movs	r1, #0
 800692e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e067      	b.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2204      	movs	r2, #4
 800693c:	4013      	ands	r3, r2
 800693e:	d050      	beq.n	80069e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	401a      	ands	r2, r3
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	429a      	cmp	r2, r3
 8006952:	d146      	bne.n	80069e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2280      	movs	r2, #128	; 0x80
 800695a:	0112      	lsls	r2, r2, #4
 800695c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800695e:	f3ef 8310 	mrs	r3, PRIMASK
 8006962:	613b      	str	r3, [r7, #16]
  return(result);
 8006964:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006968:	2301      	movs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f383 8810 	msr	PRIMASK, r3
}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4923      	ldr	r1, [pc, #140]	; (8006a0c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006980:	400a      	ands	r2, r1
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f383 8810 	msr	PRIMASK, r3
}
 800698e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006990:	f3ef 8310 	mrs	r3, PRIMASK
 8006994:	61fb      	str	r3, [r7, #28]
  return(result);
 8006996:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006998:	64bb      	str	r3, [r7, #72]	; 0x48
 800699a:	2301      	movs	r3, #1
 800699c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f383 8810 	msr	PRIMASK, r3
}
 80069a4:	46c0      	nop			; (mov r8, r8)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2101      	movs	r1, #1
 80069b2:	438a      	bics	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]
 80069b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	f383 8810 	msr	PRIMASK, r3
}
 80069c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2280      	movs	r2, #128	; 0x80
 80069d2:	2120      	movs	r1, #32
 80069d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2274      	movs	r2, #116	; 0x74
 80069da:	2100      	movs	r1, #0
 80069dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e010      	b.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	425a      	negs	r2, r3
 80069f2:	4153      	adcs	r3, r2
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	001a      	movs	r2, r3
 80069f8:	1dfb      	adds	r3, r7, #7
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d100      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006a00:	e74b      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	0018      	movs	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b014      	add	sp, #80	; 0x50
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	fffffe5f 	.word	0xfffffe5f

08006a10 <__errno>:
 8006a10:	4b01      	ldr	r3, [pc, #4]	; (8006a18 <__errno+0x8>)
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	4770      	bx	lr
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	20000190 	.word	0x20000190

08006a1c <__libc_init_array>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	2600      	movs	r6, #0
 8006a20:	4d0c      	ldr	r5, [pc, #48]	; (8006a54 <__libc_init_array+0x38>)
 8006a22:	4c0d      	ldr	r4, [pc, #52]	; (8006a58 <__libc_init_array+0x3c>)
 8006a24:	1b64      	subs	r4, r4, r5
 8006a26:	10a4      	asrs	r4, r4, #2
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	d109      	bne.n	8006a40 <__libc_init_array+0x24>
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	f000 fc5d 	bl	80072ec <_init>
 8006a32:	4d0a      	ldr	r5, [pc, #40]	; (8006a5c <__libc_init_array+0x40>)
 8006a34:	4c0a      	ldr	r4, [pc, #40]	; (8006a60 <__libc_init_array+0x44>)
 8006a36:	1b64      	subs	r4, r4, r5
 8006a38:	10a4      	asrs	r4, r4, #2
 8006a3a:	42a6      	cmp	r6, r4
 8006a3c:	d105      	bne.n	8006a4a <__libc_init_array+0x2e>
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	00b3      	lsls	r3, r6, #2
 8006a42:	58eb      	ldr	r3, [r5, r3]
 8006a44:	4798      	blx	r3
 8006a46:	3601      	adds	r6, #1
 8006a48:	e7ee      	b.n	8006a28 <__libc_init_array+0xc>
 8006a4a:	00b3      	lsls	r3, r6, #2
 8006a4c:	58eb      	ldr	r3, [r5, r3]
 8006a4e:	4798      	blx	r3
 8006a50:	3601      	adds	r6, #1
 8006a52:	e7f2      	b.n	8006a3a <__libc_init_array+0x1e>
 8006a54:	080075e0 	.word	0x080075e0
 8006a58:	080075e0 	.word	0x080075e0
 8006a5c:	080075e0 	.word	0x080075e0
 8006a60:	080075e4 	.word	0x080075e4

08006a64 <memcpy>:
 8006a64:	2300      	movs	r3, #0
 8006a66:	b510      	push	{r4, lr}
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d100      	bne.n	8006a6e <memcpy+0xa>
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	5ccc      	ldrb	r4, [r1, r3]
 8006a70:	54c4      	strb	r4, [r0, r3]
 8006a72:	3301      	adds	r3, #1
 8006a74:	e7f8      	b.n	8006a68 <memcpy+0x4>

08006a76 <memset>:
 8006a76:	0003      	movs	r3, r0
 8006a78:	1882      	adds	r2, r0, r2
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d100      	bne.n	8006a80 <memset+0xa>
 8006a7e:	4770      	bx	lr
 8006a80:	7019      	strb	r1, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	e7f9      	b.n	8006a7a <memset+0x4>
	...

08006a88 <siprintf>:
 8006a88:	b40e      	push	{r1, r2, r3}
 8006a8a:	b500      	push	{lr}
 8006a8c:	490b      	ldr	r1, [pc, #44]	; (8006abc <siprintf+0x34>)
 8006a8e:	b09c      	sub	sp, #112	; 0x70
 8006a90:	ab1d      	add	r3, sp, #116	; 0x74
 8006a92:	9002      	str	r0, [sp, #8]
 8006a94:	9006      	str	r0, [sp, #24]
 8006a96:	9107      	str	r1, [sp, #28]
 8006a98:	9104      	str	r1, [sp, #16]
 8006a9a:	4809      	ldr	r0, [pc, #36]	; (8006ac0 <siprintf+0x38>)
 8006a9c:	4909      	ldr	r1, [pc, #36]	; (8006ac4 <siprintf+0x3c>)
 8006a9e:	cb04      	ldmia	r3!, {r2}
 8006aa0:	9105      	str	r1, [sp, #20]
 8006aa2:	6800      	ldr	r0, [r0, #0]
 8006aa4:	a902      	add	r1, sp, #8
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	f000 f886 	bl	8006bb8 <_svfiprintf_r>
 8006aac:	2300      	movs	r3, #0
 8006aae:	9a02      	ldr	r2, [sp, #8]
 8006ab0:	7013      	strb	r3, [r2, #0]
 8006ab2:	b01c      	add	sp, #112	; 0x70
 8006ab4:	bc08      	pop	{r3}
 8006ab6:	b003      	add	sp, #12
 8006ab8:	4718      	bx	r3
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	7fffffff 	.word	0x7fffffff
 8006ac0:	20000190 	.word	0x20000190
 8006ac4:	ffff0208 	.word	0xffff0208

08006ac8 <strncat>:
 8006ac8:	0003      	movs	r3, r0
 8006aca:	b530      	push	{r4, r5, lr}
 8006acc:	781c      	ldrb	r4, [r3, #0]
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	d108      	bne.n	8006ae4 <strncat+0x1c>
 8006ad2:	1889      	adds	r1, r1, r2
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	d004      	beq.n	8006ae2 <strncat+0x1a>
 8006ad8:	4255      	negs	r5, r2
 8006ada:	5d4d      	ldrb	r5, [r1, r5]
 8006adc:	701d      	strb	r5, [r3, #0]
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d102      	bne.n	8006ae8 <strncat+0x20>
 8006ae2:	bd30      	pop	{r4, r5, pc}
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	e7f1      	b.n	8006acc <strncat+0x4>
 8006ae8:	2a01      	cmp	r2, #1
 8006aea:	d100      	bne.n	8006aee <strncat+0x26>
 8006aec:	705c      	strb	r4, [r3, #1]
 8006aee:	3301      	adds	r3, #1
 8006af0:	3a01      	subs	r2, #1
 8006af2:	e7ef      	b.n	8006ad4 <strncat+0xc>

08006af4 <__ssputs_r>:
 8006af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af6:	688e      	ldr	r6, [r1, #8]
 8006af8:	b085      	sub	sp, #20
 8006afa:	0007      	movs	r7, r0
 8006afc:	000c      	movs	r4, r1
 8006afe:	9203      	str	r2, [sp, #12]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	429e      	cmp	r6, r3
 8006b04:	d83c      	bhi.n	8006b80 <__ssputs_r+0x8c>
 8006b06:	2390      	movs	r3, #144	; 0x90
 8006b08:	898a      	ldrh	r2, [r1, #12]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	421a      	tst	r2, r3
 8006b0e:	d034      	beq.n	8006b7a <__ssputs_r+0x86>
 8006b10:	2503      	movs	r5, #3
 8006b12:	6909      	ldr	r1, [r1, #16]
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	1a5b      	subs	r3, r3, r1
 8006b18:	9302      	str	r3, [sp, #8]
 8006b1a:	6963      	ldr	r3, [r4, #20]
 8006b1c:	9802      	ldr	r0, [sp, #8]
 8006b1e:	435d      	muls	r5, r3
 8006b20:	0feb      	lsrs	r3, r5, #31
 8006b22:	195d      	adds	r5, r3, r5
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	106d      	asrs	r5, r5, #1
 8006b28:	3301      	adds	r3, #1
 8006b2a:	181b      	adds	r3, r3, r0
 8006b2c:	42ab      	cmp	r3, r5
 8006b2e:	d900      	bls.n	8006b32 <__ssputs_r+0x3e>
 8006b30:	001d      	movs	r5, r3
 8006b32:	0553      	lsls	r3, r2, #21
 8006b34:	d532      	bpl.n	8006b9c <__ssputs_r+0xa8>
 8006b36:	0029      	movs	r1, r5
 8006b38:	0038      	movs	r0, r7
 8006b3a:	f000 fb27 	bl	800718c <_malloc_r>
 8006b3e:	1e06      	subs	r6, r0, #0
 8006b40:	d109      	bne.n	8006b56 <__ssputs_r+0x62>
 8006b42:	230c      	movs	r3, #12
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	2340      	movs	r3, #64	; 0x40
 8006b48:	2001      	movs	r0, #1
 8006b4a:	89a2      	ldrh	r2, [r4, #12]
 8006b4c:	4240      	negs	r0, r0
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	b005      	add	sp, #20
 8006b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b56:	9a02      	ldr	r2, [sp, #8]
 8006b58:	6921      	ldr	r1, [r4, #16]
 8006b5a:	f7ff ff83 	bl	8006a64 <memcpy>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <__ssputs_r+0xc0>)
 8006b62:	401a      	ands	r2, r3
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	4313      	orrs	r3, r2
 8006b68:	81a3      	strh	r3, [r4, #12]
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	6126      	str	r6, [r4, #16]
 8006b6e:	18f6      	adds	r6, r6, r3
 8006b70:	6026      	str	r6, [r4, #0]
 8006b72:	6165      	str	r5, [r4, #20]
 8006b74:	9e01      	ldr	r6, [sp, #4]
 8006b76:	1aed      	subs	r5, r5, r3
 8006b78:	60a5      	str	r5, [r4, #8]
 8006b7a:	9b01      	ldr	r3, [sp, #4]
 8006b7c:	429e      	cmp	r6, r3
 8006b7e:	d900      	bls.n	8006b82 <__ssputs_r+0x8e>
 8006b80:	9e01      	ldr	r6, [sp, #4]
 8006b82:	0032      	movs	r2, r6
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	f000 faa3 	bl	80070d2 <memmove>
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	2000      	movs	r0, #0
 8006b90:	1b9b      	subs	r3, r3, r6
 8006b92:	60a3      	str	r3, [r4, #8]
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	199e      	adds	r6, r3, r6
 8006b98:	6026      	str	r6, [r4, #0]
 8006b9a:	e7da      	b.n	8006b52 <__ssputs_r+0x5e>
 8006b9c:	002a      	movs	r2, r5
 8006b9e:	0038      	movs	r0, r7
 8006ba0:	f000 fb52 	bl	8007248 <_realloc_r>
 8006ba4:	1e06      	subs	r6, r0, #0
 8006ba6:	d1e0      	bne.n	8006b6a <__ssputs_r+0x76>
 8006ba8:	0038      	movs	r0, r7
 8006baa:	6921      	ldr	r1, [r4, #16]
 8006bac:	f000 faa4 	bl	80070f8 <_free_r>
 8006bb0:	e7c7      	b.n	8006b42 <__ssputs_r+0x4e>
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	fffffb7f 	.word	0xfffffb7f

08006bb8 <_svfiprintf_r>:
 8006bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bba:	b0a1      	sub	sp, #132	; 0x84
 8006bbc:	9003      	str	r0, [sp, #12]
 8006bbe:	001d      	movs	r5, r3
 8006bc0:	898b      	ldrh	r3, [r1, #12]
 8006bc2:	000f      	movs	r7, r1
 8006bc4:	0016      	movs	r6, r2
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	d511      	bpl.n	8006bee <_svfiprintf_r+0x36>
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10e      	bne.n	8006bee <_svfiprintf_r+0x36>
 8006bd0:	2140      	movs	r1, #64	; 0x40
 8006bd2:	f000 fadb 	bl	800718c <_malloc_r>
 8006bd6:	6038      	str	r0, [r7, #0]
 8006bd8:	6138      	str	r0, [r7, #16]
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d105      	bne.n	8006bea <_svfiprintf_r+0x32>
 8006bde:	230c      	movs	r3, #12
 8006be0:	9a03      	ldr	r2, [sp, #12]
 8006be2:	3801      	subs	r0, #1
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	b021      	add	sp, #132	; 0x84
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	ac08      	add	r4, sp, #32
 8006bf2:	6163      	str	r3, [r4, #20]
 8006bf4:	3320      	adds	r3, #32
 8006bf6:	7663      	strb	r3, [r4, #25]
 8006bf8:	3310      	adds	r3, #16
 8006bfa:	76a3      	strb	r3, [r4, #26]
 8006bfc:	9507      	str	r5, [sp, #28]
 8006bfe:	0035      	movs	r5, r6
 8006c00:	782b      	ldrb	r3, [r5, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <_svfiprintf_r+0x52>
 8006c06:	2b25      	cmp	r3, #37	; 0x25
 8006c08:	d147      	bne.n	8006c9a <_svfiprintf_r+0xe2>
 8006c0a:	1bab      	subs	r3, r5, r6
 8006c0c:	9305      	str	r3, [sp, #20]
 8006c0e:	42b5      	cmp	r5, r6
 8006c10:	d00c      	beq.n	8006c2c <_svfiprintf_r+0x74>
 8006c12:	0032      	movs	r2, r6
 8006c14:	0039      	movs	r1, r7
 8006c16:	9803      	ldr	r0, [sp, #12]
 8006c18:	f7ff ff6c 	bl	8006af4 <__ssputs_r>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d100      	bne.n	8006c22 <_svfiprintf_r+0x6a>
 8006c20:	e0ae      	b.n	8006d80 <_svfiprintf_r+0x1c8>
 8006c22:	6962      	ldr	r2, [r4, #20]
 8006c24:	9b05      	ldr	r3, [sp, #20]
 8006c26:	4694      	mov	ip, r2
 8006c28:	4463      	add	r3, ip
 8006c2a:	6163      	str	r3, [r4, #20]
 8006c2c:	782b      	ldrb	r3, [r5, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d100      	bne.n	8006c34 <_svfiprintf_r+0x7c>
 8006c32:	e0a5      	b.n	8006d80 <_svfiprintf_r+0x1c8>
 8006c34:	2201      	movs	r2, #1
 8006c36:	2300      	movs	r3, #0
 8006c38:	4252      	negs	r2, r2
 8006c3a:	6062      	str	r2, [r4, #4]
 8006c3c:	a904      	add	r1, sp, #16
 8006c3e:	3254      	adds	r2, #84	; 0x54
 8006c40:	1852      	adds	r2, r2, r1
 8006c42:	1c6e      	adds	r6, r5, #1
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	60e3      	str	r3, [r4, #12]
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	7013      	strb	r3, [r2, #0]
 8006c4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c4e:	2205      	movs	r2, #5
 8006c50:	7831      	ldrb	r1, [r6, #0]
 8006c52:	4854      	ldr	r0, [pc, #336]	; (8006da4 <_svfiprintf_r+0x1ec>)
 8006c54:	f000 fa32 	bl	80070bc <memchr>
 8006c58:	1c75      	adds	r5, r6, #1
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d11f      	bne.n	8006c9e <_svfiprintf_r+0xe6>
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	06d3      	lsls	r3, r2, #27
 8006c62:	d504      	bpl.n	8006c6e <_svfiprintf_r+0xb6>
 8006c64:	2353      	movs	r3, #83	; 0x53
 8006c66:	a904      	add	r1, sp, #16
 8006c68:	185b      	adds	r3, r3, r1
 8006c6a:	2120      	movs	r1, #32
 8006c6c:	7019      	strb	r1, [r3, #0]
 8006c6e:	0713      	lsls	r3, r2, #28
 8006c70:	d504      	bpl.n	8006c7c <_svfiprintf_r+0xc4>
 8006c72:	2353      	movs	r3, #83	; 0x53
 8006c74:	a904      	add	r1, sp, #16
 8006c76:	185b      	adds	r3, r3, r1
 8006c78:	212b      	movs	r1, #43	; 0x2b
 8006c7a:	7019      	strb	r1, [r3, #0]
 8006c7c:	7833      	ldrb	r3, [r6, #0]
 8006c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c80:	d016      	beq.n	8006cb0 <_svfiprintf_r+0xf8>
 8006c82:	0035      	movs	r5, r6
 8006c84:	2100      	movs	r1, #0
 8006c86:	200a      	movs	r0, #10
 8006c88:	68e3      	ldr	r3, [r4, #12]
 8006c8a:	782a      	ldrb	r2, [r5, #0]
 8006c8c:	1c6e      	adds	r6, r5, #1
 8006c8e:	3a30      	subs	r2, #48	; 0x30
 8006c90:	2a09      	cmp	r2, #9
 8006c92:	d94e      	bls.n	8006d32 <_svfiprintf_r+0x17a>
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d111      	bne.n	8006cbc <_svfiprintf_r+0x104>
 8006c98:	e017      	b.n	8006cca <_svfiprintf_r+0x112>
 8006c9a:	3501      	adds	r5, #1
 8006c9c:	e7b0      	b.n	8006c00 <_svfiprintf_r+0x48>
 8006c9e:	4b41      	ldr	r3, [pc, #260]	; (8006da4 <_svfiprintf_r+0x1ec>)
 8006ca0:	6822      	ldr	r2, [r4, #0]
 8006ca2:	1ac0      	subs	r0, r0, r3
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4083      	lsls	r3, r0
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	002e      	movs	r6, r5
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	e7ce      	b.n	8006c4e <_svfiprintf_r+0x96>
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	1d19      	adds	r1, r3, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	9107      	str	r1, [sp, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	db01      	blt.n	8006cc0 <_svfiprintf_r+0x108>
 8006cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cbe:	e004      	b.n	8006cca <_svfiprintf_r+0x112>
 8006cc0:	425b      	negs	r3, r3
 8006cc2:	60e3      	str	r3, [r4, #12]
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	782b      	ldrb	r3, [r5, #0]
 8006ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8006cce:	d10a      	bne.n	8006ce6 <_svfiprintf_r+0x12e>
 8006cd0:	786b      	ldrb	r3, [r5, #1]
 8006cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd4:	d135      	bne.n	8006d42 <_svfiprintf_r+0x18a>
 8006cd6:	9b07      	ldr	r3, [sp, #28]
 8006cd8:	3502      	adds	r5, #2
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	9207      	str	r2, [sp, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db2b      	blt.n	8006d3c <_svfiprintf_r+0x184>
 8006ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce6:	4e30      	ldr	r6, [pc, #192]	; (8006da8 <_svfiprintf_r+0x1f0>)
 8006ce8:	2203      	movs	r2, #3
 8006cea:	0030      	movs	r0, r6
 8006cec:	7829      	ldrb	r1, [r5, #0]
 8006cee:	f000 f9e5 	bl	80070bc <memchr>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d006      	beq.n	8006d04 <_svfiprintf_r+0x14c>
 8006cf6:	2340      	movs	r3, #64	; 0x40
 8006cf8:	1b80      	subs	r0, r0, r6
 8006cfa:	4083      	lsls	r3, r0
 8006cfc:	6822      	ldr	r2, [r4, #0]
 8006cfe:	3501      	adds	r5, #1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	7829      	ldrb	r1, [r5, #0]
 8006d06:	2206      	movs	r2, #6
 8006d08:	4828      	ldr	r0, [pc, #160]	; (8006dac <_svfiprintf_r+0x1f4>)
 8006d0a:	1c6e      	adds	r6, r5, #1
 8006d0c:	7621      	strb	r1, [r4, #24]
 8006d0e:	f000 f9d5 	bl	80070bc <memchr>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d03c      	beq.n	8006d90 <_svfiprintf_r+0x1d8>
 8006d16:	4b26      	ldr	r3, [pc, #152]	; (8006db0 <_svfiprintf_r+0x1f8>)
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d125      	bne.n	8006d68 <_svfiprintf_r+0x1b0>
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	9b07      	ldr	r3, [sp, #28]
 8006d20:	3307      	adds	r3, #7
 8006d22:	4393      	bics	r3, r2
 8006d24:	3308      	adds	r3, #8
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	6963      	ldr	r3, [r4, #20]
 8006d2a:	9a04      	ldr	r2, [sp, #16]
 8006d2c:	189b      	adds	r3, r3, r2
 8006d2e:	6163      	str	r3, [r4, #20]
 8006d30:	e765      	b.n	8006bfe <_svfiprintf_r+0x46>
 8006d32:	4343      	muls	r3, r0
 8006d34:	0035      	movs	r5, r6
 8006d36:	2101      	movs	r1, #1
 8006d38:	189b      	adds	r3, r3, r2
 8006d3a:	e7a6      	b.n	8006c8a <_svfiprintf_r+0xd2>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	425b      	negs	r3, r3
 8006d40:	e7d0      	b.n	8006ce4 <_svfiprintf_r+0x12c>
 8006d42:	2300      	movs	r3, #0
 8006d44:	200a      	movs	r0, #10
 8006d46:	001a      	movs	r2, r3
 8006d48:	3501      	adds	r5, #1
 8006d4a:	6063      	str	r3, [r4, #4]
 8006d4c:	7829      	ldrb	r1, [r5, #0]
 8006d4e:	1c6e      	adds	r6, r5, #1
 8006d50:	3930      	subs	r1, #48	; 0x30
 8006d52:	2909      	cmp	r1, #9
 8006d54:	d903      	bls.n	8006d5e <_svfiprintf_r+0x1a6>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c5      	beq.n	8006ce6 <_svfiprintf_r+0x12e>
 8006d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d5c:	e7c3      	b.n	8006ce6 <_svfiprintf_r+0x12e>
 8006d5e:	4342      	muls	r2, r0
 8006d60:	0035      	movs	r5, r6
 8006d62:	2301      	movs	r3, #1
 8006d64:	1852      	adds	r2, r2, r1
 8006d66:	e7f1      	b.n	8006d4c <_svfiprintf_r+0x194>
 8006d68:	ab07      	add	r3, sp, #28
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	003a      	movs	r2, r7
 8006d6e:	0021      	movs	r1, r4
 8006d70:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <_svfiprintf_r+0x1fc>)
 8006d72:	9803      	ldr	r0, [sp, #12]
 8006d74:	e000      	b.n	8006d78 <_svfiprintf_r+0x1c0>
 8006d76:	bf00      	nop
 8006d78:	9004      	str	r0, [sp, #16]
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	d1d3      	bne.n	8006d28 <_svfiprintf_r+0x170>
 8006d80:	89bb      	ldrh	r3, [r7, #12]
 8006d82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d84:	065b      	lsls	r3, r3, #25
 8006d86:	d400      	bmi.n	8006d8a <_svfiprintf_r+0x1d2>
 8006d88:	e72d      	b.n	8006be6 <_svfiprintf_r+0x2e>
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	4240      	negs	r0, r0
 8006d8e:	e72a      	b.n	8006be6 <_svfiprintf_r+0x2e>
 8006d90:	ab07      	add	r3, sp, #28
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	003a      	movs	r2, r7
 8006d96:	0021      	movs	r1, r4
 8006d98:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <_svfiprintf_r+0x1fc>)
 8006d9a:	9803      	ldr	r0, [sp, #12]
 8006d9c:	f000 f87c 	bl	8006e98 <_printf_i>
 8006da0:	e7ea      	b.n	8006d78 <_svfiprintf_r+0x1c0>
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	080075a4 	.word	0x080075a4
 8006da8:	080075aa 	.word	0x080075aa
 8006dac:	080075ae 	.word	0x080075ae
 8006db0:	00000000 	.word	0x00000000
 8006db4:	08006af5 	.word	0x08006af5

08006db8 <_printf_common>:
 8006db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dba:	0015      	movs	r5, r2
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	688a      	ldr	r2, [r1, #8]
 8006dc0:	690b      	ldr	r3, [r1, #16]
 8006dc2:	000c      	movs	r4, r1
 8006dc4:	9000      	str	r0, [sp, #0]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	da00      	bge.n	8006dcc <_printf_common+0x14>
 8006dca:	0013      	movs	r3, r2
 8006dcc:	0022      	movs	r2, r4
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	3243      	adds	r2, #67	; 0x43
 8006dd2:	7812      	ldrb	r2, [r2, #0]
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	d001      	beq.n	8006ddc <_printf_common+0x24>
 8006dd8:	3301      	adds	r3, #1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	069b      	lsls	r3, r3, #26
 8006de0:	d502      	bpl.n	8006de8 <_printf_common+0x30>
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	3302      	adds	r3, #2
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	6822      	ldr	r2, [r4, #0]
 8006dea:	2306      	movs	r3, #6
 8006dec:	0017      	movs	r7, r2
 8006dee:	401f      	ands	r7, r3
 8006df0:	421a      	tst	r2, r3
 8006df2:	d027      	beq.n	8006e44 <_printf_common+0x8c>
 8006df4:	0023      	movs	r3, r4
 8006df6:	3343      	adds	r3, #67	; 0x43
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	1e5a      	subs	r2, r3, #1
 8006dfc:	4193      	sbcs	r3, r2
 8006dfe:	6822      	ldr	r2, [r4, #0]
 8006e00:	0692      	lsls	r2, r2, #26
 8006e02:	d430      	bmi.n	8006e66 <_printf_common+0xae>
 8006e04:	0022      	movs	r2, r4
 8006e06:	9901      	ldr	r1, [sp, #4]
 8006e08:	9800      	ldr	r0, [sp, #0]
 8006e0a:	9e08      	ldr	r6, [sp, #32]
 8006e0c:	3243      	adds	r2, #67	; 0x43
 8006e0e:	47b0      	blx	r6
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d025      	beq.n	8006e60 <_printf_common+0xa8>
 8006e14:	2306      	movs	r3, #6
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	682a      	ldr	r2, [r5, #0]
 8006e1a:	68e1      	ldr	r1, [r4, #12]
 8006e1c:	2500      	movs	r5, #0
 8006e1e:	4003      	ands	r3, r0
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d103      	bne.n	8006e2c <_printf_common+0x74>
 8006e24:	1a8d      	subs	r5, r1, r2
 8006e26:	43eb      	mvns	r3, r5
 8006e28:	17db      	asrs	r3, r3, #31
 8006e2a:	401d      	ands	r5, r3
 8006e2c:	68a3      	ldr	r3, [r4, #8]
 8006e2e:	6922      	ldr	r2, [r4, #16]
 8006e30:	4293      	cmp	r3, r2
 8006e32:	dd01      	ble.n	8006e38 <_printf_common+0x80>
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	18ed      	adds	r5, r5, r3
 8006e38:	2700      	movs	r7, #0
 8006e3a:	42bd      	cmp	r5, r7
 8006e3c:	d120      	bne.n	8006e80 <_printf_common+0xc8>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e010      	b.n	8006e64 <_printf_common+0xac>
 8006e42:	3701      	adds	r7, #1
 8006e44:	68e3      	ldr	r3, [r4, #12]
 8006e46:	682a      	ldr	r2, [r5, #0]
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	42bb      	cmp	r3, r7
 8006e4c:	ddd2      	ble.n	8006df4 <_printf_common+0x3c>
 8006e4e:	0022      	movs	r2, r4
 8006e50:	2301      	movs	r3, #1
 8006e52:	9901      	ldr	r1, [sp, #4]
 8006e54:	9800      	ldr	r0, [sp, #0]
 8006e56:	9e08      	ldr	r6, [sp, #32]
 8006e58:	3219      	adds	r2, #25
 8006e5a:	47b0      	blx	r6
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d1f0      	bne.n	8006e42 <_printf_common+0x8a>
 8006e60:	2001      	movs	r0, #1
 8006e62:	4240      	negs	r0, r0
 8006e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e66:	2030      	movs	r0, #48	; 0x30
 8006e68:	18e1      	adds	r1, r4, r3
 8006e6a:	3143      	adds	r1, #67	; 0x43
 8006e6c:	7008      	strb	r0, [r1, #0]
 8006e6e:	0021      	movs	r1, r4
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	3145      	adds	r1, #69	; 0x45
 8006e74:	7809      	ldrb	r1, [r1, #0]
 8006e76:	18a2      	adds	r2, r4, r2
 8006e78:	3243      	adds	r2, #67	; 0x43
 8006e7a:	3302      	adds	r3, #2
 8006e7c:	7011      	strb	r1, [r2, #0]
 8006e7e:	e7c1      	b.n	8006e04 <_printf_common+0x4c>
 8006e80:	0022      	movs	r2, r4
 8006e82:	2301      	movs	r3, #1
 8006e84:	9901      	ldr	r1, [sp, #4]
 8006e86:	9800      	ldr	r0, [sp, #0]
 8006e88:	9e08      	ldr	r6, [sp, #32]
 8006e8a:	321a      	adds	r2, #26
 8006e8c:	47b0      	blx	r6
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d0e6      	beq.n	8006e60 <_printf_common+0xa8>
 8006e92:	3701      	adds	r7, #1
 8006e94:	e7d1      	b.n	8006e3a <_printf_common+0x82>
	...

08006e98 <_printf_i>:
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	b08b      	sub	sp, #44	; 0x2c
 8006e9c:	9206      	str	r2, [sp, #24]
 8006e9e:	000a      	movs	r2, r1
 8006ea0:	3243      	adds	r2, #67	; 0x43
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	9005      	str	r0, [sp, #20]
 8006ea6:	9204      	str	r2, [sp, #16]
 8006ea8:	7e0a      	ldrb	r2, [r1, #24]
 8006eaa:	000c      	movs	r4, r1
 8006eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eae:	2a78      	cmp	r2, #120	; 0x78
 8006eb0:	d806      	bhi.n	8006ec0 <_printf_i+0x28>
 8006eb2:	2a62      	cmp	r2, #98	; 0x62
 8006eb4:	d808      	bhi.n	8006ec8 <_printf_i+0x30>
 8006eb6:	2a00      	cmp	r2, #0
 8006eb8:	d100      	bne.n	8006ebc <_printf_i+0x24>
 8006eba:	e0c0      	b.n	800703e <_printf_i+0x1a6>
 8006ebc:	2a58      	cmp	r2, #88	; 0x58
 8006ebe:	d052      	beq.n	8006f66 <_printf_i+0xce>
 8006ec0:	0026      	movs	r6, r4
 8006ec2:	3642      	adds	r6, #66	; 0x42
 8006ec4:	7032      	strb	r2, [r6, #0]
 8006ec6:	e022      	b.n	8006f0e <_printf_i+0x76>
 8006ec8:	0010      	movs	r0, r2
 8006eca:	3863      	subs	r0, #99	; 0x63
 8006ecc:	2815      	cmp	r0, #21
 8006ece:	d8f7      	bhi.n	8006ec0 <_printf_i+0x28>
 8006ed0:	f7f9 f922 	bl	8000118 <__gnu_thumb1_case_shi>
 8006ed4:	001f0016 	.word	0x001f0016
 8006ed8:	fff6fff6 	.word	0xfff6fff6
 8006edc:	fff6fff6 	.word	0xfff6fff6
 8006ee0:	fff6001f 	.word	0xfff6001f
 8006ee4:	fff6fff6 	.word	0xfff6fff6
 8006ee8:	00a8fff6 	.word	0x00a8fff6
 8006eec:	009a0036 	.word	0x009a0036
 8006ef0:	fff6fff6 	.word	0xfff6fff6
 8006ef4:	fff600b9 	.word	0xfff600b9
 8006ef8:	fff60036 	.word	0xfff60036
 8006efc:	009efff6 	.word	0x009efff6
 8006f00:	0026      	movs	r6, r4
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	3642      	adds	r6, #66	; 0x42
 8006f06:	1d11      	adds	r1, r2, #4
 8006f08:	6019      	str	r1, [r3, #0]
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	7033      	strb	r3, [r6, #0]
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e0a7      	b.n	8007062 <_printf_i+0x1ca>
 8006f12:	6808      	ldr	r0, [r1, #0]
 8006f14:	6819      	ldr	r1, [r3, #0]
 8006f16:	1d0a      	adds	r2, r1, #4
 8006f18:	0605      	lsls	r5, r0, #24
 8006f1a:	d50b      	bpl.n	8006f34 <_printf_i+0x9c>
 8006f1c:	680d      	ldr	r5, [r1, #0]
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	da03      	bge.n	8006f2c <_printf_i+0x94>
 8006f24:	232d      	movs	r3, #45	; 0x2d
 8006f26:	9a04      	ldr	r2, [sp, #16]
 8006f28:	426d      	negs	r5, r5
 8006f2a:	7013      	strb	r3, [r2, #0]
 8006f2c:	4b61      	ldr	r3, [pc, #388]	; (80070b4 <_printf_i+0x21c>)
 8006f2e:	270a      	movs	r7, #10
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	e032      	b.n	8006f9a <_printf_i+0x102>
 8006f34:	680d      	ldr	r5, [r1, #0]
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	0641      	lsls	r1, r0, #25
 8006f3a:	d5f1      	bpl.n	8006f20 <_printf_i+0x88>
 8006f3c:	b22d      	sxth	r5, r5
 8006f3e:	e7ef      	b.n	8006f20 <_printf_i+0x88>
 8006f40:	680d      	ldr	r5, [r1, #0]
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	1d08      	adds	r0, r1, #4
 8006f46:	6018      	str	r0, [r3, #0]
 8006f48:	062e      	lsls	r6, r5, #24
 8006f4a:	d501      	bpl.n	8006f50 <_printf_i+0xb8>
 8006f4c:	680d      	ldr	r5, [r1, #0]
 8006f4e:	e003      	b.n	8006f58 <_printf_i+0xc0>
 8006f50:	066d      	lsls	r5, r5, #25
 8006f52:	d5fb      	bpl.n	8006f4c <_printf_i+0xb4>
 8006f54:	680d      	ldr	r5, [r1, #0]
 8006f56:	b2ad      	uxth	r5, r5
 8006f58:	4b56      	ldr	r3, [pc, #344]	; (80070b4 <_printf_i+0x21c>)
 8006f5a:	270a      	movs	r7, #10
 8006f5c:	9303      	str	r3, [sp, #12]
 8006f5e:	2a6f      	cmp	r2, #111	; 0x6f
 8006f60:	d117      	bne.n	8006f92 <_printf_i+0xfa>
 8006f62:	2708      	movs	r7, #8
 8006f64:	e015      	b.n	8006f92 <_printf_i+0xfa>
 8006f66:	3145      	adds	r1, #69	; 0x45
 8006f68:	700a      	strb	r2, [r1, #0]
 8006f6a:	4a52      	ldr	r2, [pc, #328]	; (80070b4 <_printf_i+0x21c>)
 8006f6c:	9203      	str	r2, [sp, #12]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6821      	ldr	r1, [r4, #0]
 8006f72:	ca20      	ldmia	r2!, {r5}
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	0608      	lsls	r0, r1, #24
 8006f78:	d550      	bpl.n	800701c <_printf_i+0x184>
 8006f7a:	07cb      	lsls	r3, r1, #31
 8006f7c:	d502      	bpl.n	8006f84 <_printf_i+0xec>
 8006f7e:	2320      	movs	r3, #32
 8006f80:	4319      	orrs	r1, r3
 8006f82:	6021      	str	r1, [r4, #0]
 8006f84:	2710      	movs	r7, #16
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	d103      	bne.n	8006f92 <_printf_i+0xfa>
 8006f8a:	2320      	movs	r3, #32
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	439a      	bics	r2, r3
 8006f90:	6022      	str	r2, [r4, #0]
 8006f92:	0023      	movs	r3, r4
 8006f94:	2200      	movs	r2, #0
 8006f96:	3343      	adds	r3, #67	; 0x43
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	6863      	ldr	r3, [r4, #4]
 8006f9c:	60a3      	str	r3, [r4, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	db03      	blt.n	8006faa <_printf_i+0x112>
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	6821      	ldr	r1, [r4, #0]
 8006fa6:	4391      	bics	r1, r2
 8006fa8:	6021      	str	r1, [r4, #0]
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	d102      	bne.n	8006fb4 <_printf_i+0x11c>
 8006fae:	9e04      	ldr	r6, [sp, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <_printf_i+0x136>
 8006fb4:	9e04      	ldr	r6, [sp, #16]
 8006fb6:	0028      	movs	r0, r5
 8006fb8:	0039      	movs	r1, r7
 8006fba:	f7f9 f93d 	bl	8000238 <__aeabi_uidivmod>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	3e01      	subs	r6, #1
 8006fc2:	5c5b      	ldrb	r3, [r3, r1]
 8006fc4:	7033      	strb	r3, [r6, #0]
 8006fc6:	002b      	movs	r3, r5
 8006fc8:	0005      	movs	r5, r0
 8006fca:	429f      	cmp	r7, r3
 8006fcc:	d9f3      	bls.n	8006fb6 <_printf_i+0x11e>
 8006fce:	2f08      	cmp	r7, #8
 8006fd0:	d109      	bne.n	8006fe6 <_printf_i+0x14e>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	07db      	lsls	r3, r3, #31
 8006fd6:	d506      	bpl.n	8006fe6 <_printf_i+0x14e>
 8006fd8:	6863      	ldr	r3, [r4, #4]
 8006fda:	6922      	ldr	r2, [r4, #16]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	dc02      	bgt.n	8006fe6 <_printf_i+0x14e>
 8006fe0:	2330      	movs	r3, #48	; 0x30
 8006fe2:	3e01      	subs	r6, #1
 8006fe4:	7033      	strb	r3, [r6, #0]
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	1b9b      	subs	r3, r3, r6
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	0021      	movs	r1, r4
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	9805      	ldr	r0, [sp, #20]
 8006ff4:	9b06      	ldr	r3, [sp, #24]
 8006ff6:	aa09      	add	r2, sp, #36	; 0x24
 8006ff8:	f7ff fede 	bl	8006db8 <_printf_common>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d135      	bne.n	800706c <_printf_i+0x1d4>
 8007000:	2001      	movs	r0, #1
 8007002:	4240      	negs	r0, r0
 8007004:	b00b      	add	sp, #44	; 0x2c
 8007006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007008:	2220      	movs	r2, #32
 800700a:	6809      	ldr	r1, [r1, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	6022      	str	r2, [r4, #0]
 8007010:	0022      	movs	r2, r4
 8007012:	2178      	movs	r1, #120	; 0x78
 8007014:	3245      	adds	r2, #69	; 0x45
 8007016:	7011      	strb	r1, [r2, #0]
 8007018:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <_printf_i+0x220>)
 800701a:	e7a7      	b.n	8006f6c <_printf_i+0xd4>
 800701c:	0648      	lsls	r0, r1, #25
 800701e:	d5ac      	bpl.n	8006f7a <_printf_i+0xe2>
 8007020:	b2ad      	uxth	r5, r5
 8007022:	e7aa      	b.n	8006f7a <_printf_i+0xe2>
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	680d      	ldr	r5, [r1, #0]
 8007028:	1d10      	adds	r0, r2, #4
 800702a:	6949      	ldr	r1, [r1, #20]
 800702c:	6018      	str	r0, [r3, #0]
 800702e:	6813      	ldr	r3, [r2, #0]
 8007030:	062e      	lsls	r6, r5, #24
 8007032:	d501      	bpl.n	8007038 <_printf_i+0x1a0>
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	e002      	b.n	800703e <_printf_i+0x1a6>
 8007038:	066d      	lsls	r5, r5, #25
 800703a:	d5fb      	bpl.n	8007034 <_printf_i+0x19c>
 800703c:	8019      	strh	r1, [r3, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	9e04      	ldr	r6, [sp, #16]
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	e7d2      	b.n	8006fec <_printf_i+0x154>
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	1d11      	adds	r1, r2, #4
 800704a:	6019      	str	r1, [r3, #0]
 800704c:	6816      	ldr	r6, [r2, #0]
 800704e:	2100      	movs	r1, #0
 8007050:	0030      	movs	r0, r6
 8007052:	6862      	ldr	r2, [r4, #4]
 8007054:	f000 f832 	bl	80070bc <memchr>
 8007058:	2800      	cmp	r0, #0
 800705a:	d001      	beq.n	8007060 <_printf_i+0x1c8>
 800705c:	1b80      	subs	r0, r0, r6
 800705e:	6060      	str	r0, [r4, #4]
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	2300      	movs	r3, #0
 8007066:	9a04      	ldr	r2, [sp, #16]
 8007068:	7013      	strb	r3, [r2, #0]
 800706a:	e7bf      	b.n	8006fec <_printf_i+0x154>
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	0032      	movs	r2, r6
 8007070:	9906      	ldr	r1, [sp, #24]
 8007072:	9805      	ldr	r0, [sp, #20]
 8007074:	9d07      	ldr	r5, [sp, #28]
 8007076:	47a8      	blx	r5
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d0c1      	beq.n	8007000 <_printf_i+0x168>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	079b      	lsls	r3, r3, #30
 8007080:	d415      	bmi.n	80070ae <_printf_i+0x216>
 8007082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007084:	68e0      	ldr	r0, [r4, #12]
 8007086:	4298      	cmp	r0, r3
 8007088:	dabc      	bge.n	8007004 <_printf_i+0x16c>
 800708a:	0018      	movs	r0, r3
 800708c:	e7ba      	b.n	8007004 <_printf_i+0x16c>
 800708e:	0022      	movs	r2, r4
 8007090:	2301      	movs	r3, #1
 8007092:	9906      	ldr	r1, [sp, #24]
 8007094:	9805      	ldr	r0, [sp, #20]
 8007096:	9e07      	ldr	r6, [sp, #28]
 8007098:	3219      	adds	r2, #25
 800709a:	47b0      	blx	r6
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d0af      	beq.n	8007000 <_printf_i+0x168>
 80070a0:	3501      	adds	r5, #1
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dcf0      	bgt.n	800708e <_printf_i+0x1f6>
 80070ac:	e7e9      	b.n	8007082 <_printf_i+0x1ea>
 80070ae:	2500      	movs	r5, #0
 80070b0:	e7f7      	b.n	80070a2 <_printf_i+0x20a>
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	080075b5 	.word	0x080075b5
 80070b8:	080075c6 	.word	0x080075c6

080070bc <memchr>:
 80070bc:	b2c9      	uxtb	r1, r1
 80070be:	1882      	adds	r2, r0, r2
 80070c0:	4290      	cmp	r0, r2
 80070c2:	d101      	bne.n	80070c8 <memchr+0xc>
 80070c4:	2000      	movs	r0, #0
 80070c6:	4770      	bx	lr
 80070c8:	7803      	ldrb	r3, [r0, #0]
 80070ca:	428b      	cmp	r3, r1
 80070cc:	d0fb      	beq.n	80070c6 <memchr+0xa>
 80070ce:	3001      	adds	r0, #1
 80070d0:	e7f6      	b.n	80070c0 <memchr+0x4>

080070d2 <memmove>:
 80070d2:	b510      	push	{r4, lr}
 80070d4:	4288      	cmp	r0, r1
 80070d6:	d902      	bls.n	80070de <memmove+0xc>
 80070d8:	188b      	adds	r3, r1, r2
 80070da:	4298      	cmp	r0, r3
 80070dc:	d303      	bcc.n	80070e6 <memmove+0x14>
 80070de:	2300      	movs	r3, #0
 80070e0:	e007      	b.n	80070f2 <memmove+0x20>
 80070e2:	5c8b      	ldrb	r3, [r1, r2]
 80070e4:	5483      	strb	r3, [r0, r2]
 80070e6:	3a01      	subs	r2, #1
 80070e8:	d2fb      	bcs.n	80070e2 <memmove+0x10>
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	5ccc      	ldrb	r4, [r1, r3]
 80070ee:	54c4      	strb	r4, [r0, r3]
 80070f0:	3301      	adds	r3, #1
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d1fa      	bne.n	80070ec <memmove+0x1a>
 80070f6:	e7f8      	b.n	80070ea <memmove+0x18>

080070f8 <_free_r>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	0005      	movs	r5, r0
 80070fc:	2900      	cmp	r1, #0
 80070fe:	d010      	beq.n	8007122 <_free_r+0x2a>
 8007100:	1f0c      	subs	r4, r1, #4
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	da00      	bge.n	800710a <_free_r+0x12>
 8007108:	18e4      	adds	r4, r4, r3
 800710a:	0028      	movs	r0, r5
 800710c:	f000 f8d4 	bl	80072b8 <__malloc_lock>
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <_free_r+0x90>)
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <_free_r+0x2c>
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	6014      	str	r4, [r2, #0]
 800711c:	0028      	movs	r0, r5
 800711e:	f000 f8d3 	bl	80072c8 <__malloc_unlock>
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	42a3      	cmp	r3, r4
 8007126:	d908      	bls.n	800713a <_free_r+0x42>
 8007128:	6821      	ldr	r1, [r4, #0]
 800712a:	1860      	adds	r0, r4, r1
 800712c:	4283      	cmp	r3, r0
 800712e:	d1f3      	bne.n	8007118 <_free_r+0x20>
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	1841      	adds	r1, r0, r1
 8007136:	6021      	str	r1, [r4, #0]
 8007138:	e7ee      	b.n	8007118 <_free_r+0x20>
 800713a:	001a      	movs	r2, r3
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <_free_r+0x4e>
 8007142:	42a3      	cmp	r3, r4
 8007144:	d9f9      	bls.n	800713a <_free_r+0x42>
 8007146:	6811      	ldr	r1, [r2, #0]
 8007148:	1850      	adds	r0, r2, r1
 800714a:	42a0      	cmp	r0, r4
 800714c:	d10b      	bne.n	8007166 <_free_r+0x6e>
 800714e:	6820      	ldr	r0, [r4, #0]
 8007150:	1809      	adds	r1, r1, r0
 8007152:	1850      	adds	r0, r2, r1
 8007154:	6011      	str	r1, [r2, #0]
 8007156:	4283      	cmp	r3, r0
 8007158:	d1e0      	bne.n	800711c <_free_r+0x24>
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	1841      	adds	r1, r0, r1
 8007160:	6011      	str	r1, [r2, #0]
 8007162:	6053      	str	r3, [r2, #4]
 8007164:	e7da      	b.n	800711c <_free_r+0x24>
 8007166:	42a0      	cmp	r0, r4
 8007168:	d902      	bls.n	8007170 <_free_r+0x78>
 800716a:	230c      	movs	r3, #12
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	e7d5      	b.n	800711c <_free_r+0x24>
 8007170:	6821      	ldr	r1, [r4, #0]
 8007172:	1860      	adds	r0, r4, r1
 8007174:	4283      	cmp	r3, r0
 8007176:	d103      	bne.n	8007180 <_free_r+0x88>
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	1841      	adds	r1, r0, r1
 800717e:	6021      	str	r1, [r4, #0]
 8007180:	6063      	str	r3, [r4, #4]
 8007182:	6054      	str	r4, [r2, #4]
 8007184:	e7ca      	b.n	800711c <_free_r+0x24>
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	20000260 	.word	0x20000260

0800718c <_malloc_r>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	2303      	movs	r3, #3
 8007190:	1ccd      	adds	r5, r1, #3
 8007192:	439d      	bics	r5, r3
 8007194:	3508      	adds	r5, #8
 8007196:	0006      	movs	r6, r0
 8007198:	2d0c      	cmp	r5, #12
 800719a:	d21f      	bcs.n	80071dc <_malloc_r+0x50>
 800719c:	250c      	movs	r5, #12
 800719e:	42a9      	cmp	r1, r5
 80071a0:	d81e      	bhi.n	80071e0 <_malloc_r+0x54>
 80071a2:	0030      	movs	r0, r6
 80071a4:	f000 f888 	bl	80072b8 <__malloc_lock>
 80071a8:	4925      	ldr	r1, [pc, #148]	; (8007240 <_malloc_r+0xb4>)
 80071aa:	680a      	ldr	r2, [r1, #0]
 80071ac:	0014      	movs	r4, r2
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d11a      	bne.n	80071e8 <_malloc_r+0x5c>
 80071b2:	4f24      	ldr	r7, [pc, #144]	; (8007244 <_malloc_r+0xb8>)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <_malloc_r+0x38>
 80071ba:	0021      	movs	r1, r4
 80071bc:	0030      	movs	r0, r6
 80071be:	f000 f869 	bl	8007294 <_sbrk_r>
 80071c2:	6038      	str	r0, [r7, #0]
 80071c4:	0029      	movs	r1, r5
 80071c6:	0030      	movs	r0, r6
 80071c8:	f000 f864 	bl	8007294 <_sbrk_r>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d12b      	bne.n	8007228 <_malloc_r+0x9c>
 80071d0:	230c      	movs	r3, #12
 80071d2:	0030      	movs	r0, r6
 80071d4:	6033      	str	r3, [r6, #0]
 80071d6:	f000 f877 	bl	80072c8 <__malloc_unlock>
 80071da:	e003      	b.n	80071e4 <_malloc_r+0x58>
 80071dc:	2d00      	cmp	r5, #0
 80071de:	dade      	bge.n	800719e <_malloc_r+0x12>
 80071e0:	230c      	movs	r3, #12
 80071e2:	6033      	str	r3, [r6, #0]
 80071e4:	2000      	movs	r0, #0
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	1b5b      	subs	r3, r3, r5
 80071ec:	d419      	bmi.n	8007222 <_malloc_r+0x96>
 80071ee:	2b0b      	cmp	r3, #11
 80071f0:	d903      	bls.n	80071fa <_malloc_r+0x6e>
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	18e4      	adds	r4, r4, r3
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	e003      	b.n	8007202 <_malloc_r+0x76>
 80071fa:	6863      	ldr	r3, [r4, #4]
 80071fc:	42a2      	cmp	r2, r4
 80071fe:	d10e      	bne.n	800721e <_malloc_r+0x92>
 8007200:	600b      	str	r3, [r1, #0]
 8007202:	0030      	movs	r0, r6
 8007204:	f000 f860 	bl	80072c8 <__malloc_unlock>
 8007208:	0020      	movs	r0, r4
 800720a:	2207      	movs	r2, #7
 800720c:	300b      	adds	r0, #11
 800720e:	1d23      	adds	r3, r4, #4
 8007210:	4390      	bics	r0, r2
 8007212:	1ac2      	subs	r2, r0, r3
 8007214:	4298      	cmp	r0, r3
 8007216:	d0e6      	beq.n	80071e6 <_malloc_r+0x5a>
 8007218:	1a1b      	subs	r3, r3, r0
 800721a:	50a3      	str	r3, [r4, r2]
 800721c:	e7e3      	b.n	80071e6 <_malloc_r+0x5a>
 800721e:	6053      	str	r3, [r2, #4]
 8007220:	e7ef      	b.n	8007202 <_malloc_r+0x76>
 8007222:	0022      	movs	r2, r4
 8007224:	6864      	ldr	r4, [r4, #4]
 8007226:	e7c2      	b.n	80071ae <_malloc_r+0x22>
 8007228:	2303      	movs	r3, #3
 800722a:	1cc4      	adds	r4, r0, #3
 800722c:	439c      	bics	r4, r3
 800722e:	42a0      	cmp	r0, r4
 8007230:	d0e1      	beq.n	80071f6 <_malloc_r+0x6a>
 8007232:	1a21      	subs	r1, r4, r0
 8007234:	0030      	movs	r0, r6
 8007236:	f000 f82d 	bl	8007294 <_sbrk_r>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d1db      	bne.n	80071f6 <_malloc_r+0x6a>
 800723e:	e7c7      	b.n	80071d0 <_malloc_r+0x44>
 8007240:	20000260 	.word	0x20000260
 8007244:	20000264 	.word	0x20000264

08007248 <_realloc_r>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	0007      	movs	r7, r0
 800724c:	000d      	movs	r5, r1
 800724e:	0016      	movs	r6, r2
 8007250:	2900      	cmp	r1, #0
 8007252:	d105      	bne.n	8007260 <_realloc_r+0x18>
 8007254:	0011      	movs	r1, r2
 8007256:	f7ff ff99 	bl	800718c <_malloc_r>
 800725a:	0004      	movs	r4, r0
 800725c:	0020      	movs	r0, r4
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	2a00      	cmp	r2, #0
 8007262:	d103      	bne.n	800726c <_realloc_r+0x24>
 8007264:	f7ff ff48 	bl	80070f8 <_free_r>
 8007268:	0034      	movs	r4, r6
 800726a:	e7f7      	b.n	800725c <_realloc_r+0x14>
 800726c:	f000 f834 	bl	80072d8 <_malloc_usable_size_r>
 8007270:	002c      	movs	r4, r5
 8007272:	42b0      	cmp	r0, r6
 8007274:	d2f2      	bcs.n	800725c <_realloc_r+0x14>
 8007276:	0031      	movs	r1, r6
 8007278:	0038      	movs	r0, r7
 800727a:	f7ff ff87 	bl	800718c <_malloc_r>
 800727e:	1e04      	subs	r4, r0, #0
 8007280:	d0ec      	beq.n	800725c <_realloc_r+0x14>
 8007282:	0029      	movs	r1, r5
 8007284:	0032      	movs	r2, r6
 8007286:	f7ff fbed 	bl	8006a64 <memcpy>
 800728a:	0029      	movs	r1, r5
 800728c:	0038      	movs	r0, r7
 800728e:	f7ff ff33 	bl	80070f8 <_free_r>
 8007292:	e7e3      	b.n	800725c <_realloc_r+0x14>

08007294 <_sbrk_r>:
 8007294:	2300      	movs	r3, #0
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	4d06      	ldr	r5, [pc, #24]	; (80072b4 <_sbrk_r+0x20>)
 800729a:	0004      	movs	r4, r0
 800729c:	0008      	movs	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f7fb fdb0 	bl	8002e04 <_sbrk>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d103      	bne.n	80072b0 <_sbrk_r+0x1c>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d000      	beq.n	80072b0 <_sbrk_r+0x1c>
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	bd70      	pop	{r4, r5, r6, pc}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	200004c8 	.word	0x200004c8

080072b8 <__malloc_lock>:
 80072b8:	b510      	push	{r4, lr}
 80072ba:	4802      	ldr	r0, [pc, #8]	; (80072c4 <__malloc_lock+0xc>)
 80072bc:	f000 f814 	bl	80072e8 <__retarget_lock_acquire_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	200004d0 	.word	0x200004d0

080072c8 <__malloc_unlock>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	4802      	ldr	r0, [pc, #8]	; (80072d4 <__malloc_unlock+0xc>)
 80072cc:	f000 f80d 	bl	80072ea <__retarget_lock_release_recursive>
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	200004d0 	.word	0x200004d0

080072d8 <_malloc_usable_size_r>:
 80072d8:	1f0b      	subs	r3, r1, #4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	1f18      	subs	r0, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da01      	bge.n	80072e6 <_malloc_usable_size_r+0xe>
 80072e2:	580b      	ldr	r3, [r1, r0]
 80072e4:	18c0      	adds	r0, r0, r3
 80072e6:	4770      	bx	lr

080072e8 <__retarget_lock_acquire_recursive>:
 80072e8:	4770      	bx	lr

080072ea <__retarget_lock_release_recursive>:
 80072ea:	4770      	bx	lr

080072ec <_init>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr

080072f8 <_fini>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr
