
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007608  08007608  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007610  08007610  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007610  08007610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001f4  0800780c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800780c  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158aa  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e4  00000000  00000000  00035ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00038bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ec9  00000000  00000000  0003aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014681  00000000  00000000  0004e971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071944  00000000  00000000  00062ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  000d498c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007334 	.word	0x08007334

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08007334 	.word	0x08007334

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 fba0 	bl	8000c0c <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 fb9b 	bl	8000c0c <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__aeabi_fdiv>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	0245      	lsls	r5, r0, #9
 800064a:	b5c0      	push	{r6, r7, lr}
 800064c:	0047      	lsls	r7, r0, #1
 800064e:	1c0c      	adds	r4, r1, #0
 8000650:	0a6d      	lsrs	r5, r5, #9
 8000652:	0e3f      	lsrs	r7, r7, #24
 8000654:	0fc6      	lsrs	r6, r0, #31
 8000656:	2f00      	cmp	r7, #0
 8000658:	d066      	beq.n	8000728 <__aeabi_fdiv+0xe8>
 800065a:	2fff      	cmp	r7, #255	; 0xff
 800065c:	d06c      	beq.n	8000738 <__aeabi_fdiv+0xf8>
 800065e:	2300      	movs	r3, #0
 8000660:	00ea      	lsls	r2, r5, #3
 8000662:	2580      	movs	r5, #128	; 0x80
 8000664:	4699      	mov	r9, r3
 8000666:	469a      	mov	sl, r3
 8000668:	04ed      	lsls	r5, r5, #19
 800066a:	4315      	orrs	r5, r2
 800066c:	3f7f      	subs	r7, #127	; 0x7f
 800066e:	0260      	lsls	r0, r4, #9
 8000670:	0061      	lsls	r1, r4, #1
 8000672:	0a43      	lsrs	r3, r0, #9
 8000674:	4698      	mov	r8, r3
 8000676:	0e09      	lsrs	r1, r1, #24
 8000678:	0fe4      	lsrs	r4, r4, #31
 800067a:	2900      	cmp	r1, #0
 800067c:	d048      	beq.n	8000710 <__aeabi_fdiv+0xd0>
 800067e:	29ff      	cmp	r1, #255	; 0xff
 8000680:	d010      	beq.n	80006a4 <__aeabi_fdiv+0x64>
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	00d8      	lsls	r0, r3, #3
 8000686:	04d2      	lsls	r2, r2, #19
 8000688:	4302      	orrs	r2, r0
 800068a:	4690      	mov	r8, r2
 800068c:	2000      	movs	r0, #0
 800068e:	397f      	subs	r1, #127	; 0x7f
 8000690:	464a      	mov	r2, r9
 8000692:	0033      	movs	r3, r6
 8000694:	1a7f      	subs	r7, r7, r1
 8000696:	4302      	orrs	r2, r0
 8000698:	496c      	ldr	r1, [pc, #432]	; (800084c <__aeabi_fdiv+0x20c>)
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	588a      	ldr	r2, [r1, r2]
 800069e:	4063      	eors	r3, r4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4697      	mov	pc, r2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d16d      	bne.n	8000784 <__aeabi_fdiv+0x144>
 80006a8:	2002      	movs	r0, #2
 80006aa:	3fff      	subs	r7, #255	; 0xff
 80006ac:	e033      	b.n	8000716 <__aeabi_fdiv+0xd6>
 80006ae:	2300      	movs	r3, #0
 80006b0:	4698      	mov	r8, r3
 80006b2:	0026      	movs	r6, r4
 80006b4:	4645      	mov	r5, r8
 80006b6:	4682      	mov	sl, r0
 80006b8:	4653      	mov	r3, sl
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fdiv+0x80>
 80006be:	e07f      	b.n	80007c0 <__aeabi_fdiv+0x180>
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fdiv+0x86>
 80006c4:	e094      	b.n	80007f0 <__aeabi_fdiv+0x1b0>
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d017      	beq.n	80006fa <__aeabi_fdiv+0xba>
 80006ca:	0038      	movs	r0, r7
 80006cc:	307f      	adds	r0, #127	; 0x7f
 80006ce:	2800      	cmp	r0, #0
 80006d0:	dd5f      	ble.n	8000792 <__aeabi_fdiv+0x152>
 80006d2:	076b      	lsls	r3, r5, #29
 80006d4:	d004      	beq.n	80006e0 <__aeabi_fdiv+0xa0>
 80006d6:	230f      	movs	r3, #15
 80006d8:	402b      	ands	r3, r5
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d000      	beq.n	80006e0 <__aeabi_fdiv+0xa0>
 80006de:	3504      	adds	r5, #4
 80006e0:	012b      	lsls	r3, r5, #4
 80006e2:	d503      	bpl.n	80006ec <__aeabi_fdiv+0xac>
 80006e4:	0038      	movs	r0, r7
 80006e6:	4b5a      	ldr	r3, [pc, #360]	; (8000850 <__aeabi_fdiv+0x210>)
 80006e8:	3080      	adds	r0, #128	; 0x80
 80006ea:	401d      	ands	r5, r3
 80006ec:	28fe      	cmp	r0, #254	; 0xfe
 80006ee:	dc67      	bgt.n	80007c0 <__aeabi_fdiv+0x180>
 80006f0:	01ad      	lsls	r5, r5, #6
 80006f2:	0a6d      	lsrs	r5, r5, #9
 80006f4:	b2c0      	uxtb	r0, r0
 80006f6:	e002      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80006f8:	001e      	movs	r6, r3
 80006fa:	2000      	movs	r0, #0
 80006fc:	2500      	movs	r5, #0
 80006fe:	05c0      	lsls	r0, r0, #23
 8000700:	4328      	orrs	r0, r5
 8000702:	07f6      	lsls	r6, r6, #31
 8000704:	4330      	orrs	r0, r6
 8000706:	bce0      	pop	{r5, r6, r7}
 8000708:	46ba      	mov	sl, r7
 800070a:	46b1      	mov	r9, r6
 800070c:	46a8      	mov	r8, r5
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000710:	2b00      	cmp	r3, #0
 8000712:	d12b      	bne.n	800076c <__aeabi_fdiv+0x12c>
 8000714:	2001      	movs	r0, #1
 8000716:	464a      	mov	r2, r9
 8000718:	0033      	movs	r3, r6
 800071a:	494e      	ldr	r1, [pc, #312]	; (8000854 <__aeabi_fdiv+0x214>)
 800071c:	4302      	orrs	r2, r0
 800071e:	0092      	lsls	r2, r2, #2
 8000720:	588a      	ldr	r2, [r1, r2]
 8000722:	4063      	eors	r3, r4
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4697      	mov	pc, r2
 8000728:	2d00      	cmp	r5, #0
 800072a:	d113      	bne.n	8000754 <__aeabi_fdiv+0x114>
 800072c:	2304      	movs	r3, #4
 800072e:	4699      	mov	r9, r3
 8000730:	3b03      	subs	r3, #3
 8000732:	2700      	movs	r7, #0
 8000734:	469a      	mov	sl, r3
 8000736:	e79a      	b.n	800066e <__aeabi_fdiv+0x2e>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d105      	bne.n	8000748 <__aeabi_fdiv+0x108>
 800073c:	2308      	movs	r3, #8
 800073e:	4699      	mov	r9, r3
 8000740:	3b06      	subs	r3, #6
 8000742:	27ff      	movs	r7, #255	; 0xff
 8000744:	469a      	mov	sl, r3
 8000746:	e792      	b.n	800066e <__aeabi_fdiv+0x2e>
 8000748:	230c      	movs	r3, #12
 800074a:	4699      	mov	r9, r3
 800074c:	3b09      	subs	r3, #9
 800074e:	27ff      	movs	r7, #255	; 0xff
 8000750:	469a      	mov	sl, r3
 8000752:	e78c      	b.n	800066e <__aeabi_fdiv+0x2e>
 8000754:	0028      	movs	r0, r5
 8000756:	f000 fa3b 	bl	8000bd0 <__clzsi2>
 800075a:	2776      	movs	r7, #118	; 0x76
 800075c:	1f43      	subs	r3, r0, #5
 800075e:	409d      	lsls	r5, r3
 8000760:	2300      	movs	r3, #0
 8000762:	427f      	negs	r7, r7
 8000764:	4699      	mov	r9, r3
 8000766:	469a      	mov	sl, r3
 8000768:	1a3f      	subs	r7, r7, r0
 800076a:	e780      	b.n	800066e <__aeabi_fdiv+0x2e>
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fa2f 	bl	8000bd0 <__clzsi2>
 8000772:	4642      	mov	r2, r8
 8000774:	1f43      	subs	r3, r0, #5
 8000776:	2176      	movs	r1, #118	; 0x76
 8000778:	409a      	lsls	r2, r3
 800077a:	4249      	negs	r1, r1
 800077c:	1a09      	subs	r1, r1, r0
 800077e:	4690      	mov	r8, r2
 8000780:	2000      	movs	r0, #0
 8000782:	e785      	b.n	8000690 <__aeabi_fdiv+0x50>
 8000784:	21ff      	movs	r1, #255	; 0xff
 8000786:	2003      	movs	r0, #3
 8000788:	e782      	b.n	8000690 <__aeabi_fdiv+0x50>
 800078a:	001e      	movs	r6, r3
 800078c:	20ff      	movs	r0, #255	; 0xff
 800078e:	2500      	movs	r5, #0
 8000790:	e7b5      	b.n	80006fe <__aeabi_fdiv+0xbe>
 8000792:	2301      	movs	r3, #1
 8000794:	1a1b      	subs	r3, r3, r0
 8000796:	2b1b      	cmp	r3, #27
 8000798:	dcaf      	bgt.n	80006fa <__aeabi_fdiv+0xba>
 800079a:	379e      	adds	r7, #158	; 0x9e
 800079c:	0029      	movs	r1, r5
 800079e:	40bd      	lsls	r5, r7
 80007a0:	40d9      	lsrs	r1, r3
 80007a2:	1e6a      	subs	r2, r5, #1
 80007a4:	4195      	sbcs	r5, r2
 80007a6:	430d      	orrs	r5, r1
 80007a8:	076b      	lsls	r3, r5, #29
 80007aa:	d004      	beq.n	80007b6 <__aeabi_fdiv+0x176>
 80007ac:	230f      	movs	r3, #15
 80007ae:	402b      	ands	r3, r5
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0x176>
 80007b4:	3504      	adds	r5, #4
 80007b6:	016b      	lsls	r3, r5, #5
 80007b8:	d544      	bpl.n	8000844 <__aeabi_fdiv+0x204>
 80007ba:	2001      	movs	r0, #1
 80007bc:	2500      	movs	r5, #0
 80007be:	e79e      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	2500      	movs	r5, #0
 80007c4:	e79b      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007c6:	2580      	movs	r5, #128	; 0x80
 80007c8:	2600      	movs	r6, #0
 80007ca:	20ff      	movs	r0, #255	; 0xff
 80007cc:	03ed      	lsls	r5, r5, #15
 80007ce:	e796      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007d0:	2300      	movs	r3, #0
 80007d2:	4698      	mov	r8, r3
 80007d4:	2080      	movs	r0, #128	; 0x80
 80007d6:	03c0      	lsls	r0, r0, #15
 80007d8:	4205      	tst	r5, r0
 80007da:	d009      	beq.n	80007f0 <__aeabi_fdiv+0x1b0>
 80007dc:	4643      	mov	r3, r8
 80007de:	4203      	tst	r3, r0
 80007e0:	d106      	bne.n	80007f0 <__aeabi_fdiv+0x1b0>
 80007e2:	4645      	mov	r5, r8
 80007e4:	4305      	orrs	r5, r0
 80007e6:	026d      	lsls	r5, r5, #9
 80007e8:	0026      	movs	r6, r4
 80007ea:	20ff      	movs	r0, #255	; 0xff
 80007ec:	0a6d      	lsrs	r5, r5, #9
 80007ee:	e786      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007f0:	2080      	movs	r0, #128	; 0x80
 80007f2:	03c0      	lsls	r0, r0, #15
 80007f4:	4305      	orrs	r5, r0
 80007f6:	026d      	lsls	r5, r5, #9
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	0a6d      	lsrs	r5, r5, #9
 80007fc:	e77f      	b.n	80006fe <__aeabi_fdiv+0xbe>
 80007fe:	4641      	mov	r1, r8
 8000800:	016a      	lsls	r2, r5, #5
 8000802:	0148      	lsls	r0, r1, #5
 8000804:	4282      	cmp	r2, r0
 8000806:	d219      	bcs.n	800083c <__aeabi_fdiv+0x1fc>
 8000808:	211b      	movs	r1, #27
 800080a:	2500      	movs	r5, #0
 800080c:	3f01      	subs	r7, #1
 800080e:	2601      	movs	r6, #1
 8000810:	0014      	movs	r4, r2
 8000812:	006d      	lsls	r5, r5, #1
 8000814:	0052      	lsls	r2, r2, #1
 8000816:	2c00      	cmp	r4, #0
 8000818:	db01      	blt.n	800081e <__aeabi_fdiv+0x1de>
 800081a:	4290      	cmp	r0, r2
 800081c:	d801      	bhi.n	8000822 <__aeabi_fdiv+0x1e2>
 800081e:	1a12      	subs	r2, r2, r0
 8000820:	4335      	orrs	r5, r6
 8000822:	3901      	subs	r1, #1
 8000824:	2900      	cmp	r1, #0
 8000826:	d1f3      	bne.n	8000810 <__aeabi_fdiv+0x1d0>
 8000828:	1e50      	subs	r0, r2, #1
 800082a:	4182      	sbcs	r2, r0
 800082c:	0038      	movs	r0, r7
 800082e:	307f      	adds	r0, #127	; 0x7f
 8000830:	001e      	movs	r6, r3
 8000832:	4315      	orrs	r5, r2
 8000834:	2800      	cmp	r0, #0
 8000836:	dd00      	ble.n	800083a <__aeabi_fdiv+0x1fa>
 8000838:	e74b      	b.n	80006d2 <__aeabi_fdiv+0x92>
 800083a:	e7aa      	b.n	8000792 <__aeabi_fdiv+0x152>
 800083c:	211a      	movs	r1, #26
 800083e:	2501      	movs	r5, #1
 8000840:	1a12      	subs	r2, r2, r0
 8000842:	e7e4      	b.n	800080e <__aeabi_fdiv+0x1ce>
 8000844:	01ad      	lsls	r5, r5, #6
 8000846:	2000      	movs	r0, #0
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	e758      	b.n	80006fe <__aeabi_fdiv+0xbe>
 800084c:	080074a8 	.word	0x080074a8
 8000850:	f7ffffff 	.word	0xf7ffffff
 8000854:	080074e8 	.word	0x080074e8

08000858 <__aeabi_fmul>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	4657      	mov	r7, sl
 800085c:	464e      	mov	r6, r9
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	0244      	lsls	r4, r0, #9
 8000864:	b5e0      	push	{r5, r6, r7, lr}
 8000866:	0045      	lsls	r5, r0, #1
 8000868:	1c0f      	adds	r7, r1, #0
 800086a:	0a64      	lsrs	r4, r4, #9
 800086c:	0e2d      	lsrs	r5, r5, #24
 800086e:	0fc6      	lsrs	r6, r0, #31
 8000870:	2d00      	cmp	r5, #0
 8000872:	d047      	beq.n	8000904 <__aeabi_fmul+0xac>
 8000874:	2dff      	cmp	r5, #255	; 0xff
 8000876:	d04d      	beq.n	8000914 <__aeabi_fmul+0xbc>
 8000878:	2300      	movs	r3, #0
 800087a:	2080      	movs	r0, #128	; 0x80
 800087c:	469a      	mov	sl, r3
 800087e:	469b      	mov	fp, r3
 8000880:	00e4      	lsls	r4, r4, #3
 8000882:	04c0      	lsls	r0, r0, #19
 8000884:	4304      	orrs	r4, r0
 8000886:	3d7f      	subs	r5, #127	; 0x7f
 8000888:	0278      	lsls	r0, r7, #9
 800088a:	0a43      	lsrs	r3, r0, #9
 800088c:	4699      	mov	r9, r3
 800088e:	007a      	lsls	r2, r7, #1
 8000890:	0ffb      	lsrs	r3, r7, #31
 8000892:	4698      	mov	r8, r3
 8000894:	0e12      	lsrs	r2, r2, #24
 8000896:	464b      	mov	r3, r9
 8000898:	d044      	beq.n	8000924 <__aeabi_fmul+0xcc>
 800089a:	2aff      	cmp	r2, #255	; 0xff
 800089c:	d011      	beq.n	80008c2 <__aeabi_fmul+0x6a>
 800089e:	00d8      	lsls	r0, r3, #3
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	04db      	lsls	r3, r3, #19
 80008a4:	4303      	orrs	r3, r0
 80008a6:	4699      	mov	r9, r3
 80008a8:	2000      	movs	r0, #0
 80008aa:	3a7f      	subs	r2, #127	; 0x7f
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	4647      	mov	r7, r8
 80008b0:	4653      	mov	r3, sl
 80008b2:	4077      	eors	r7, r6
 80008b4:	1c69      	adds	r1, r5, #1
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d83f      	bhi.n	800093a <__aeabi_fmul+0xe2>
 80008ba:	4a72      	ldr	r2, [pc, #456]	; (8000a84 <__aeabi_fmul+0x22c>)
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	58d3      	ldr	r3, [r2, r3]
 80008c0:	469f      	mov	pc, r3
 80008c2:	35ff      	adds	r5, #255	; 0xff
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x72>
 80008c8:	e079      	b.n	80009be <__aeabi_fmul+0x166>
 80008ca:	4652      	mov	r2, sl
 80008cc:	2302      	movs	r3, #2
 80008ce:	431a      	orrs	r2, r3
 80008d0:	4692      	mov	sl, r2
 80008d2:	2002      	movs	r0, #2
 80008d4:	e7eb      	b.n	80008ae <__aeabi_fmul+0x56>
 80008d6:	4647      	mov	r7, r8
 80008d8:	464c      	mov	r4, r9
 80008da:	4683      	mov	fp, r0
 80008dc:	465b      	mov	r3, fp
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d028      	beq.n	8000934 <__aeabi_fmul+0xdc>
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fmul+0x90>
 80008e6:	e0c6      	b.n	8000a76 <__aeabi_fmul+0x21e>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d14f      	bne.n	800098c <__aeabi_fmul+0x134>
 80008ec:	2000      	movs	r0, #0
 80008ee:	2400      	movs	r4, #0
 80008f0:	05c0      	lsls	r0, r0, #23
 80008f2:	07ff      	lsls	r7, r7, #31
 80008f4:	4320      	orrs	r0, r4
 80008f6:	4338      	orrs	r0, r7
 80008f8:	bcf0      	pop	{r4, r5, r6, r7}
 80008fa:	46bb      	mov	fp, r7
 80008fc:	46b2      	mov	sl, r6
 80008fe:	46a9      	mov	r9, r5
 8000900:	46a0      	mov	r8, r4
 8000902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000904:	2c00      	cmp	r4, #0
 8000906:	d171      	bne.n	80009ec <__aeabi_fmul+0x194>
 8000908:	2304      	movs	r3, #4
 800090a:	469a      	mov	sl, r3
 800090c:	3b03      	subs	r3, #3
 800090e:	2500      	movs	r5, #0
 8000910:	469b      	mov	fp, r3
 8000912:	e7b9      	b.n	8000888 <__aeabi_fmul+0x30>
 8000914:	2c00      	cmp	r4, #0
 8000916:	d163      	bne.n	80009e0 <__aeabi_fmul+0x188>
 8000918:	2308      	movs	r3, #8
 800091a:	469a      	mov	sl, r3
 800091c:	3b06      	subs	r3, #6
 800091e:	25ff      	movs	r5, #255	; 0xff
 8000920:	469b      	mov	fp, r3
 8000922:	e7b1      	b.n	8000888 <__aeabi_fmul+0x30>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d150      	bne.n	80009ca <__aeabi_fmul+0x172>
 8000928:	4652      	mov	r2, sl
 800092a:	3301      	adds	r3, #1
 800092c:	431a      	orrs	r2, r3
 800092e:	4692      	mov	sl, r2
 8000930:	2001      	movs	r0, #1
 8000932:	e7bc      	b.n	80008ae <__aeabi_fmul+0x56>
 8000934:	20ff      	movs	r0, #255	; 0xff
 8000936:	2400      	movs	r4, #0
 8000938:	e7da      	b.n	80008f0 <__aeabi_fmul+0x98>
 800093a:	4648      	mov	r0, r9
 800093c:	0c26      	lsrs	r6, r4, #16
 800093e:	0424      	lsls	r4, r4, #16
 8000940:	0c22      	lsrs	r2, r4, #16
 8000942:	0404      	lsls	r4, r0, #16
 8000944:	0c24      	lsrs	r4, r4, #16
 8000946:	464b      	mov	r3, r9
 8000948:	0020      	movs	r0, r4
 800094a:	0c1b      	lsrs	r3, r3, #16
 800094c:	4350      	muls	r0, r2
 800094e:	4374      	muls	r4, r6
 8000950:	435a      	muls	r2, r3
 8000952:	435e      	muls	r6, r3
 8000954:	1912      	adds	r2, r2, r4
 8000956:	0c03      	lsrs	r3, r0, #16
 8000958:	189b      	adds	r3, r3, r2
 800095a:	429c      	cmp	r4, r3
 800095c:	d903      	bls.n	8000966 <__aeabi_fmul+0x10e>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0252      	lsls	r2, r2, #9
 8000962:	4694      	mov	ip, r2
 8000964:	4466      	add	r6, ip
 8000966:	0400      	lsls	r0, r0, #16
 8000968:	041a      	lsls	r2, r3, #16
 800096a:	0c00      	lsrs	r0, r0, #16
 800096c:	1812      	adds	r2, r2, r0
 800096e:	0194      	lsls	r4, r2, #6
 8000970:	1e60      	subs	r0, r4, #1
 8000972:	4184      	sbcs	r4, r0
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	0e92      	lsrs	r2, r2, #26
 8000978:	199b      	adds	r3, r3, r6
 800097a:	4314      	orrs	r4, r2
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	431c      	orrs	r4, r3
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	d572      	bpl.n	8000a6a <__aeabi_fmul+0x212>
 8000984:	2001      	movs	r0, #1
 8000986:	0863      	lsrs	r3, r4, #1
 8000988:	4004      	ands	r4, r0
 800098a:	431c      	orrs	r4, r3
 800098c:	0008      	movs	r0, r1
 800098e:	307f      	adds	r0, #127	; 0x7f
 8000990:	2800      	cmp	r0, #0
 8000992:	dd3c      	ble.n	8000a0e <__aeabi_fmul+0x1b6>
 8000994:	0763      	lsls	r3, r4, #29
 8000996:	d004      	beq.n	80009a2 <__aeabi_fmul+0x14a>
 8000998:	230f      	movs	r3, #15
 800099a:	4023      	ands	r3, r4
 800099c:	2b04      	cmp	r3, #4
 800099e:	d000      	beq.n	80009a2 <__aeabi_fmul+0x14a>
 80009a0:	3404      	adds	r4, #4
 80009a2:	0123      	lsls	r3, r4, #4
 80009a4:	d503      	bpl.n	80009ae <__aeabi_fmul+0x156>
 80009a6:	3180      	adds	r1, #128	; 0x80
 80009a8:	0008      	movs	r0, r1
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <__aeabi_fmul+0x230>)
 80009ac:	401c      	ands	r4, r3
 80009ae:	28fe      	cmp	r0, #254	; 0xfe
 80009b0:	dcc0      	bgt.n	8000934 <__aeabi_fmul+0xdc>
 80009b2:	01a4      	lsls	r4, r4, #6
 80009b4:	0a64      	lsrs	r4, r4, #9
 80009b6:	b2c0      	uxtb	r0, r0
 80009b8:	e79a      	b.n	80008f0 <__aeabi_fmul+0x98>
 80009ba:	0037      	movs	r7, r6
 80009bc:	e78e      	b.n	80008dc <__aeabi_fmul+0x84>
 80009be:	4652      	mov	r2, sl
 80009c0:	2303      	movs	r3, #3
 80009c2:	431a      	orrs	r2, r3
 80009c4:	4692      	mov	sl, r2
 80009c6:	2003      	movs	r0, #3
 80009c8:	e771      	b.n	80008ae <__aeabi_fmul+0x56>
 80009ca:	4648      	mov	r0, r9
 80009cc:	f000 f900 	bl	8000bd0 <__clzsi2>
 80009d0:	464a      	mov	r2, r9
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	409a      	lsls	r2, r3
 80009d6:	1a2d      	subs	r5, r5, r0
 80009d8:	4691      	mov	r9, r2
 80009da:	2000      	movs	r0, #0
 80009dc:	3d76      	subs	r5, #118	; 0x76
 80009de:	e766      	b.n	80008ae <__aeabi_fmul+0x56>
 80009e0:	230c      	movs	r3, #12
 80009e2:	469a      	mov	sl, r3
 80009e4:	3b09      	subs	r3, #9
 80009e6:	25ff      	movs	r5, #255	; 0xff
 80009e8:	469b      	mov	fp, r3
 80009ea:	e74d      	b.n	8000888 <__aeabi_fmul+0x30>
 80009ec:	0020      	movs	r0, r4
 80009ee:	f000 f8ef 	bl	8000bd0 <__clzsi2>
 80009f2:	2576      	movs	r5, #118	; 0x76
 80009f4:	1f43      	subs	r3, r0, #5
 80009f6:	409c      	lsls	r4, r3
 80009f8:	2300      	movs	r3, #0
 80009fa:	426d      	negs	r5, r5
 80009fc:	469a      	mov	sl, r3
 80009fe:	469b      	mov	fp, r3
 8000a00:	1a2d      	subs	r5, r5, r0
 8000a02:	e741      	b.n	8000888 <__aeabi_fmul+0x30>
 8000a04:	2480      	movs	r4, #128	; 0x80
 8000a06:	2700      	movs	r7, #0
 8000a08:	20ff      	movs	r0, #255	; 0xff
 8000a0a:	03e4      	lsls	r4, r4, #15
 8000a0c:	e770      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	1a1b      	subs	r3, r3, r0
 8000a12:	2b1b      	cmp	r3, #27
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_fmul+0x1c0>
 8000a16:	e769      	b.n	80008ec <__aeabi_fmul+0x94>
 8000a18:	319e      	adds	r1, #158	; 0x9e
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	408c      	lsls	r4, r1
 8000a1e:	40d8      	lsrs	r0, r3
 8000a20:	1e63      	subs	r3, r4, #1
 8000a22:	419c      	sbcs	r4, r3
 8000a24:	4304      	orrs	r4, r0
 8000a26:	0763      	lsls	r3, r4, #29
 8000a28:	d004      	beq.n	8000a34 <__aeabi_fmul+0x1dc>
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	4023      	ands	r3, r4
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fmul+0x1dc>
 8000a32:	3404      	adds	r4, #4
 8000a34:	0163      	lsls	r3, r4, #5
 8000a36:	d51a      	bpl.n	8000a6e <__aeabi_fmul+0x216>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	e758      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a3e:	2080      	movs	r0, #128	; 0x80
 8000a40:	03c0      	lsls	r0, r0, #15
 8000a42:	4204      	tst	r4, r0
 8000a44:	d009      	beq.n	8000a5a <__aeabi_fmul+0x202>
 8000a46:	464b      	mov	r3, r9
 8000a48:	4203      	tst	r3, r0
 8000a4a:	d106      	bne.n	8000a5a <__aeabi_fmul+0x202>
 8000a4c:	464c      	mov	r4, r9
 8000a4e:	4304      	orrs	r4, r0
 8000a50:	0264      	lsls	r4, r4, #9
 8000a52:	4647      	mov	r7, r8
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	e74a      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	03c0      	lsls	r0, r0, #15
 8000a5e:	4304      	orrs	r4, r0
 8000a60:	0264      	lsls	r4, r4, #9
 8000a62:	0037      	movs	r7, r6
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	0a64      	lsrs	r4, r4, #9
 8000a68:	e742      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a6a:	0029      	movs	r1, r5
 8000a6c:	e78e      	b.n	800098c <__aeabi_fmul+0x134>
 8000a6e:	01a4      	lsls	r4, r4, #6
 8000a70:	2000      	movs	r0, #0
 8000a72:	0a64      	lsrs	r4, r4, #9
 8000a74:	e73c      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a76:	2080      	movs	r0, #128	; 0x80
 8000a78:	03c0      	lsls	r0, r0, #15
 8000a7a:	4304      	orrs	r4, r0
 8000a7c:	0264      	lsls	r4, r4, #9
 8000a7e:	20ff      	movs	r0, #255	; 0xff
 8000a80:	0a64      	lsrs	r4, r4, #9
 8000a82:	e735      	b.n	80008f0 <__aeabi_fmul+0x98>
 8000a84:	08007528 	.word	0x08007528
 8000a88:	f7ffffff 	.word	0xf7ffffff

08000a8c <__aeabi_f2iz>:
 8000a8c:	0241      	lsls	r1, r0, #9
 8000a8e:	0042      	lsls	r2, r0, #1
 8000a90:	0fc3      	lsrs	r3, r0, #31
 8000a92:	0a49      	lsrs	r1, r1, #9
 8000a94:	2000      	movs	r0, #0
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	2a7e      	cmp	r2, #126	; 0x7e
 8000a9a:	d903      	bls.n	8000aa4 <__aeabi_f2iz+0x18>
 8000a9c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a9e:	d902      	bls.n	8000aa6 <__aeabi_f2iz+0x1a>
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <__aeabi_f2iz+0x3c>)
 8000aa2:	1898      	adds	r0, r3, r2
 8000aa4:	4770      	bx	lr
 8000aa6:	2080      	movs	r0, #128	; 0x80
 8000aa8:	0400      	lsls	r0, r0, #16
 8000aaa:	4301      	orrs	r1, r0
 8000aac:	2a95      	cmp	r2, #149	; 0x95
 8000aae:	dc07      	bgt.n	8000ac0 <__aeabi_f2iz+0x34>
 8000ab0:	2096      	movs	r0, #150	; 0x96
 8000ab2:	1a82      	subs	r2, r0, r2
 8000ab4:	40d1      	lsrs	r1, r2
 8000ab6:	4248      	negs	r0, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f3      	bne.n	8000aa4 <__aeabi_f2iz+0x18>
 8000abc:	0008      	movs	r0, r1
 8000abe:	e7f1      	b.n	8000aa4 <__aeabi_f2iz+0x18>
 8000ac0:	3a96      	subs	r2, #150	; 0x96
 8000ac2:	4091      	lsls	r1, r2
 8000ac4:	e7f7      	b.n	8000ab6 <__aeabi_f2iz+0x2a>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	7fffffff 	.word	0x7fffffff

08000acc <__aeabi_i2f>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d013      	beq.n	8000afa <__aeabi_i2f+0x2e>
 8000ad2:	17c3      	asrs	r3, r0, #31
 8000ad4:	18c5      	adds	r5, r0, r3
 8000ad6:	405d      	eors	r5, r3
 8000ad8:	0fc4      	lsrs	r4, r0, #31
 8000ada:	0028      	movs	r0, r5
 8000adc:	f000 f878 	bl	8000bd0 <__clzsi2>
 8000ae0:	239e      	movs	r3, #158	; 0x9e
 8000ae2:	0001      	movs	r1, r0
 8000ae4:	1a1b      	subs	r3, r3, r0
 8000ae6:	2b96      	cmp	r3, #150	; 0x96
 8000ae8:	dc0f      	bgt.n	8000b0a <__aeabi_i2f+0x3e>
 8000aea:	2808      	cmp	r0, #8
 8000aec:	dd01      	ble.n	8000af2 <__aeabi_i2f+0x26>
 8000aee:	3908      	subs	r1, #8
 8000af0:	408d      	lsls	r5, r1
 8000af2:	026d      	lsls	r5, r5, #9
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	e002      	b.n	8000b00 <__aeabi_i2f+0x34>
 8000afa:	2400      	movs	r4, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	2500      	movs	r5, #0
 8000b00:	05c0      	lsls	r0, r0, #23
 8000b02:	4328      	orrs	r0, r5
 8000b04:	07e4      	lsls	r4, r4, #31
 8000b06:	4320      	orrs	r0, r4
 8000b08:	bd70      	pop	{r4, r5, r6, pc}
 8000b0a:	2b99      	cmp	r3, #153	; 0x99
 8000b0c:	dd0b      	ble.n	8000b26 <__aeabi_i2f+0x5a>
 8000b0e:	2205      	movs	r2, #5
 8000b10:	002e      	movs	r6, r5
 8000b12:	1a12      	subs	r2, r2, r0
 8000b14:	40d6      	lsrs	r6, r2
 8000b16:	0002      	movs	r2, r0
 8000b18:	321b      	adds	r2, #27
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	0028      	movs	r0, r5
 8000b1e:	1e45      	subs	r5, r0, #1
 8000b20:	41a8      	sbcs	r0, r5
 8000b22:	0035      	movs	r5, r6
 8000b24:	4305      	orrs	r5, r0
 8000b26:	2905      	cmp	r1, #5
 8000b28:	dd01      	ble.n	8000b2e <__aeabi_i2f+0x62>
 8000b2a:	1f4a      	subs	r2, r1, #5
 8000b2c:	4095      	lsls	r5, r2
 8000b2e:	002a      	movs	r2, r5
 8000b30:	4e08      	ldr	r6, [pc, #32]	; (8000b54 <__aeabi_i2f+0x88>)
 8000b32:	4032      	ands	r2, r6
 8000b34:	0768      	lsls	r0, r5, #29
 8000b36:	d009      	beq.n	8000b4c <__aeabi_i2f+0x80>
 8000b38:	200f      	movs	r0, #15
 8000b3a:	4028      	ands	r0, r5
 8000b3c:	2804      	cmp	r0, #4
 8000b3e:	d005      	beq.n	8000b4c <__aeabi_i2f+0x80>
 8000b40:	3204      	adds	r2, #4
 8000b42:	0150      	lsls	r0, r2, #5
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_i2f+0x80>
 8000b46:	239f      	movs	r3, #159	; 0x9f
 8000b48:	4032      	ands	r2, r6
 8000b4a:	1a5b      	subs	r3, r3, r1
 8000b4c:	0192      	lsls	r2, r2, #6
 8000b4e:	0a55      	lsrs	r5, r2, #9
 8000b50:	b2d8      	uxtb	r0, r3
 8000b52:	e7d5      	b.n	8000b00 <__aeabi_i2f+0x34>
 8000b54:	fbffffff 	.word	0xfbffffff

08000b58 <__aeabi_ui2f>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	1e05      	subs	r5, r0, #0
 8000b5c:	d00e      	beq.n	8000b7c <__aeabi_ui2f+0x24>
 8000b5e:	f000 f837 	bl	8000bd0 <__clzsi2>
 8000b62:	239e      	movs	r3, #158	; 0x9e
 8000b64:	0004      	movs	r4, r0
 8000b66:	1a1b      	subs	r3, r3, r0
 8000b68:	2b96      	cmp	r3, #150	; 0x96
 8000b6a:	dc0c      	bgt.n	8000b86 <__aeabi_ui2f+0x2e>
 8000b6c:	2808      	cmp	r0, #8
 8000b6e:	dd01      	ble.n	8000b74 <__aeabi_ui2f+0x1c>
 8000b70:	3c08      	subs	r4, #8
 8000b72:	40a5      	lsls	r5, r4
 8000b74:	026d      	lsls	r5, r5, #9
 8000b76:	0a6d      	lsrs	r5, r5, #9
 8000b78:	b2d8      	uxtb	r0, r3
 8000b7a:	e001      	b.n	8000b80 <__aeabi_ui2f+0x28>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2500      	movs	r5, #0
 8000b80:	05c0      	lsls	r0, r0, #23
 8000b82:	4328      	orrs	r0, r5
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
 8000b86:	2b99      	cmp	r3, #153	; 0x99
 8000b88:	dd09      	ble.n	8000b9e <__aeabi_ui2f+0x46>
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	0029      	movs	r1, r5
 8000b8e:	321b      	adds	r2, #27
 8000b90:	4091      	lsls	r1, r2
 8000b92:	1e4a      	subs	r2, r1, #1
 8000b94:	4191      	sbcs	r1, r2
 8000b96:	2205      	movs	r2, #5
 8000b98:	1a12      	subs	r2, r2, r0
 8000b9a:	40d5      	lsrs	r5, r2
 8000b9c:	430d      	orrs	r5, r1
 8000b9e:	2c05      	cmp	r4, #5
 8000ba0:	dd01      	ble.n	8000ba6 <__aeabi_ui2f+0x4e>
 8000ba2:	1f62      	subs	r2, r4, #5
 8000ba4:	4095      	lsls	r5, r2
 8000ba6:	0029      	movs	r1, r5
 8000ba8:	4e08      	ldr	r6, [pc, #32]	; (8000bcc <__aeabi_ui2f+0x74>)
 8000baa:	4031      	ands	r1, r6
 8000bac:	076a      	lsls	r2, r5, #29
 8000bae:	d009      	beq.n	8000bc4 <__aeabi_ui2f+0x6c>
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	4028      	ands	r0, r5
 8000bb4:	2804      	cmp	r0, #4
 8000bb6:	d005      	beq.n	8000bc4 <__aeabi_ui2f+0x6c>
 8000bb8:	3104      	adds	r1, #4
 8000bba:	014a      	lsls	r2, r1, #5
 8000bbc:	d502      	bpl.n	8000bc4 <__aeabi_ui2f+0x6c>
 8000bbe:	239f      	movs	r3, #159	; 0x9f
 8000bc0:	4031      	ands	r1, r6
 8000bc2:	1b1b      	subs	r3, r3, r4
 8000bc4:	0189      	lsls	r1, r1, #6
 8000bc6:	0a4d      	lsrs	r5, r1, #9
 8000bc8:	b2d8      	uxtb	r0, r3
 8000bca:	e7d9      	b.n	8000b80 <__aeabi_ui2f+0x28>
 8000bcc:	fbffffff 	.word	0xfbffffff

08000bd0 <__clzsi2>:
 8000bd0:	211c      	movs	r1, #28
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d301      	bcc.n	8000bde <__clzsi2+0xe>
 8000bda:	0c00      	lsrs	r0, r0, #16
 8000bdc:	3910      	subs	r1, #16
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	4298      	cmp	r0, r3
 8000be2:	d301      	bcc.n	8000be8 <__clzsi2+0x18>
 8000be4:	0a00      	lsrs	r0, r0, #8
 8000be6:	3908      	subs	r1, #8
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d301      	bcc.n	8000bf2 <__clzsi2+0x22>
 8000bee:	0900      	lsrs	r0, r0, #4
 8000bf0:	3904      	subs	r1, #4
 8000bf2:	a202      	add	r2, pc, #8	; (adr r2, 8000bfc <__clzsi2+0x2c>)
 8000bf4:	5c10      	ldrb	r0, [r2, r0]
 8000bf6:	1840      	adds	r0, r0, r1
 8000bf8:	4770      	bx	lr
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	02020304 	.word	0x02020304
 8000c00:	01010101 	.word	0x01010101
	...

08000c0c <__clzdi2>:
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	2900      	cmp	r1, #0
 8000c10:	d103      	bne.n	8000c1a <__clzdi2+0xe>
 8000c12:	f7ff ffdd 	bl	8000bd0 <__clzsi2>
 8000c16:	3020      	adds	r0, #32
 8000c18:	e002      	b.n	8000c20 <__clzdi2+0x14>
 8000c1a:	1c08      	adds	r0, r1, #0
 8000c1c:	f7ff ffd8 	bl	8000bd0 <__clzsi2>
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)

08000c24 <InputSDIO>:
**Name: 	vSpi3Init
**Func: 	Init Spi-3 Config
**Note:
**********************************************************/
void InputSDIO(void)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	240c      	movs	r4, #12
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2314      	movs	r3, #20
 8000c32:	001a      	movs	r2, r3
 8000c34:	2100      	movs	r1, #0
 8000c36:	f005 ff42 	bl	8006abe <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <InputSDIO+0x70>)
 8000c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <InputSDIO+0x70>)
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	430a      	orrs	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <InputSDIO+0x70>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <InputSDIO+0x70>)
 8000c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <InputSDIO+0x70>)
 8000c58:	2101      	movs	r1, #1
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <InputSDIO+0x70>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	2201      	movs	r2, #1
 8000c64:	4013      	ands	r3, r2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	00d2      	lsls	r2, r2, #3
 8000c70:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(SDIO_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	193a      	adds	r2, r7, r4
 8000c80:	23a0      	movs	r3, #160	; 0xa0
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	0011      	movs	r1, r2
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 f866 	bl	8003d58 <HAL_GPIO_Init>
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b009      	add	sp, #36	; 0x24
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	40021000 	.word	0x40021000

08000c98 <OutputSDIO>:
void OutputSDIO(){
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	240c      	movs	r4, #12
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2314      	movs	r3, #20
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f005 ff08 	bl	8006abe <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <OutputSDIO+0x88>)
 8000cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <OutputSDIO+0x88>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <OutputSDIO+0x88>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <OutputSDIO+0x88>)
 8000cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <OutputSDIO+0x88>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <OutputSDIO+0x88>)
 8000cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	00d9      	lsls	r1, r3, #3
 8000ce2:	23a0      	movs	r3, #160	; 0xa0
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f003 fa92 	bl	8004212 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	00d2      	lsls	r2, r2, #3
 8000cf4:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	193a      	adds	r2, r7, r4
 8000d0a:	23a0      	movs	r3, #160	; 0xa0
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f003 f821 	bl	8003d58 <HAL_GPIO_Init>


}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b009      	add	sp, #36	; 0x24
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000

08000d24 <OutputSDCK>:

void OutputSDCK(void){
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	240c      	movs	r4, #12
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2314      	movs	r3, #20
 8000d32:	001a      	movs	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f005 fec2 	bl	8006abe <memset>

	  	  /* GPIO Ports Clock Enable */
	  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <OutputSDCK+0x88>)
 8000d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <OutputSDCK+0x88>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	430a      	orrs	r2, r1
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <OutputSDCK+0x88>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
	  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <OutputSDCK+0x88>)
 8000d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <OutputSDCK+0x88>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <OutputSDCK+0x88>)
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

	  	  /*Configure GPIO pin Output Level */
	  	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	0099      	lsls	r1, r3, #2
 8000d6e:	23a0      	movs	r3, #160	; 0xa0
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	2200      	movs	r2, #0
 8000d74:	0018      	movs	r0, r3
 8000d76:	f003 fa4c 	bl	8004212 <HAL_GPIO_WritePin>

	  	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  	  GPIO_InitStruct.Pin = SCLK_Pin;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	601a      	str	r2, [r3, #0]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2201      	movs	r2, #1
 8000d86:	605a      	str	r2, [r3, #4]
	  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
	  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	193a      	adds	r2, r7, r4
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f002 ffdb 	bl	8003d58 <HAL_GPIO_Init>

}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b009      	add	sp, #36	; 0x24
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000

08000db0 <OutputFCSB>:

void OutputFCSB(void){
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	240c      	movs	r4, #12
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2314      	movs	r3, #20
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f005 fe7c 	bl	8006abe <memset>

		  	  /* GPIO Ports Clock Enable */
		  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <OutputFCSB+0x84>)
 8000dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <OutputFCSB+0x84>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <OutputFCSB+0x84>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
		  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <OutputFCSB+0x84>)
 8000de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <OutputFCSB+0x84>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <OutputFCSB+0x84>)
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f003 fa07 	bl	8004212 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2204      	movs	r2, #4
 8000e0a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2201      	movs	r2, #1
 8000e10:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	187a      	adds	r2, r7, r1
 8000e20:	23a0      	movs	r3, #160	; 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f002 ff96 	bl	8003d58 <HAL_GPIO_Init>


}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b009      	add	sp, #36	; 0x24
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	40021000 	.word	0x40021000

08000e38 <OutputCSB>:

void OutputCSB(void){
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	240c      	movs	r4, #12
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	2314      	movs	r3, #20
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f005 fe38 	bl	8006abe <memset>

	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <OutputCSB+0x84>)
 8000e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <OutputCSB+0x84>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	430a      	orrs	r2, r1
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <OutputCSB+0x84>)
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <OutputCSB+0x84>)
 8000e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <OutputCSB+0x84>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <OutputCSB+0x84>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	0018      	movs	r0, r3
 8000e88:	f003 f9c3 	bl	8004212 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = CSB_Pin;
 8000e8c:	0021      	movs	r1, r4
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2202      	movs	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2201      	movs	r2, #1
 8000e98:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	187a      	adds	r2, r7, r1
 8000ea8:	23a0      	movs	r3, #160	; 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f002 ff52 	bl	8003d58 <HAL_GPIO_Init>
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b009      	add	sp, #36	; 0x24
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <_delay_us>:
void _delay_us(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
 	// HAL_UART_Transmit( &hlpuart1, (uint8_t *)"giriyor\r\n",9, 100);

	//
	  	//  }
	 //HAL_Delay(1);
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <vSpi3Init>:
void vSpi3Init(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
	OutputCSB();
 8000ece:	f7ff ffb3 	bl	8000e38 <OutputCSB>
	OutputFCSB();
 8000ed2:	f7ff ff6d 	bl	8000db0 <OutputFCSB>
	OutputSDCK();
 8000ed6:	f7ff ff25 	bl	8000d24 <OutputSDCK>
	OutputSDIO();
 8000eda:	f7ff fedd 	bl	8000c98 <OutputSDIO>

	SetCSB();
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f003 f993 	bl	8004212 <HAL_GPIO_WritePin>
	SetFCSB();
 8000eec:	23a0      	movs	r3, #160	; 0xa0
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f003 f98c 	bl	8004212 <HAL_GPIO_WritePin>
	SetSDIO();
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	00d9      	lsls	r1, r3, #3
 8000efe:	23a0      	movs	r3, #160	; 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2201      	movs	r2, #1
 8000f04:	0018      	movs	r0, r3
 8000f06:	f003 f984 	bl	8004212 <HAL_GPIO_WritePin>
	ClrSDCK();
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	0099      	lsls	r1, r3, #2
 8000f0e:	23a0      	movs	r3, #160	; 0xa0
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	2200      	movs	r2, #0
 8000f14:	0018      	movs	r0, r3
 8000f16:	f003 f97c 	bl	8004212 <HAL_GPIO_WritePin>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <vSpi3WriteByte>:
**Func: 	SPI-3 send one byte
**Input:
**Output:  
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	701a      	strb	r2, [r3, #0]

 	byte bitcnt;
 
	SetFCSB();				//FCSB = 1;
 8000f2c:	23a0      	movs	r3, #160	; 0xa0
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	2201      	movs	r2, #1
 8000f32:	2104      	movs	r1, #4
 8000f34:	0018      	movs	r0, r3
 8000f36:	f003 f96c 	bl	8004212 <HAL_GPIO_WritePin>
 
 	OutputSDIO();			//SDA output mode
 8000f3a:	f7ff fead 	bl	8000c98 <OutputSDIO>
 	SetSDIO();				//    output 1
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	00d9      	lsls	r1, r3, #3
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	2201      	movs	r2, #1
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f003 f962 	bl	8004212 <HAL_GPIO_WritePin>
 
 	ClrSDCK();
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	0099      	lsls	r1, r3, #2
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	2200      	movs	r2, #0
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f003 f95a 	bl	8004212 <HAL_GPIO_WritePin>
 	ClrCSB();
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f003 f953 	bl	8004212 <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2208      	movs	r2, #8
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e034      	b.n	8000fe0 <vSpi3WriteByte+0xc0>
 		{
		ClrSDCK();
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	0099      	lsls	r1, r3, #2
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	2200      	movs	r2, #0
 8000f80:	0018      	movs	r0, r3
 8000f82:	f003 f946 	bl	8004212 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000f86:	f7ff ff9b 	bl	8000ec0 <_delay_us>
 		if(dat&0x80)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	da08      	bge.n	8000fa6 <vSpi3WriteByte+0x86>
 			SetSDIO();
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	00d9      	lsls	r1, r3, #3
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 f937 	bl	8004212 <HAL_GPIO_WritePin>
 8000fa4:	e007      	b.n	8000fb6 <vSpi3WriteByte+0x96>
 		else
 			ClrSDIO();
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	00d9      	lsls	r1, r3, #3
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	2200      	movs	r2, #0
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f003 f92e 	bl	8004212 <HAL_GPIO_WritePin>
		SetSDCK();
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	0099      	lsls	r1, r3, #2
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f003 f926 	bl	8004212 <HAL_GPIO_WritePin>
 		dat <<= 1;
 8000fc6:	1dfa      	adds	r2, r7, #7
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	18db      	adds	r3, r3, r3
 8000fce:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000fd0:	f7ff ff76 	bl	8000ec0 <_delay_us>
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1c5      	bne.n	8000f76 <vSpi3WriteByte+0x56>
 		}
 	ClrSDCK();
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	0099      	lsls	r1, r3, #2
 8000fee:	23a0      	movs	r3, #160	; 0xa0
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f003 f90c 	bl	8004212 <HAL_GPIO_WritePin>
 	SetSDIO();
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	00d9      	lsls	r1, r3, #3
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	2201      	movs	r2, #1
 8001004:	0018      	movs	r0, r3
 8001006:	f003 f904 	bl	8004212 <HAL_GPIO_WritePin>
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}

08001012 <bSpi3ReadByte>:
**Func: 	SPI-3 read one byte
**Input:
**Output:  
**********************************************************/
byte bSpi3ReadByte(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
	byte RdPara = 0;
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
  
 	ClrCSB();
 800101e:	23a0      	movs	r3, #160	; 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	2200      	movs	r2, #0
 8001024:	2102      	movs	r1, #2
 8001026:	0018      	movs	r0, r3
 8001028:	f003 f8f3 	bl	8004212 <HAL_GPIO_WritePin>
 	InputSDIO();
 800102c:	f7ff fdfa 	bl	8000c24 <InputSDIO>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	2208      	movs	r2, #8
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e033      	b.n	80010a0 <bSpi3ReadByte+0x8e>
 		{
 		ClrSDCK();
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	0099      	lsls	r1, r3, #2
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2200      	movs	r2, #0
 8001042:	0018      	movs	r0, r3
 8001044:	f003 f8e5 	bl	8004212 <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 8001048:	1dfa      	adds	r2, r7, #7
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	18db      	adds	r3, r3, r3
 8001050:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8001052:	f7ff ff35 	bl	8000ec0 <_delay_us>
 		SetSDCK();
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	0099      	lsls	r1, r3, #2
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2201      	movs	r2, #1
 8001060:	0018      	movs	r0, r3
 8001062:	f003 f8d6 	bl	8004212 <HAL_GPIO_WritePin>
 		_delay_us(); //_delay_us(1);
 8001066:	f7ff ff2b 	bl	8000ec0 <_delay_us>

 		if(SDIO_H())
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	00da      	lsls	r2, r3, #3
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f003 f8af 	bl	80041d8 <HAL_GPIO_ReadPin>
 800107a:	0003      	movs	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d106      	bne.n	800108e <bSpi3ReadByte+0x7c>
 			RdPara |= 0x01;
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	1dfa      	adds	r2, r7, #7
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	2101      	movs	r1, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e003      	b.n	8001096 <bSpi3ReadByte+0x84>
 		else
 			RdPara |= 0x00;
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	1dfa      	adds	r2, r7, #7
 8001092:	7812      	ldrb	r2, [r2, #0]
 8001094:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	1dbb      	adds	r3, r7, #6
 800109c:	3a01      	subs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	1dbb      	adds	r3, r7, #6
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1c7      	bne.n	8001038 <bSpi3ReadByte+0x26>
 		}
 	ClrSDCK();
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	0099      	lsls	r1, r3, #2
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	2200      	movs	r2, #0
 80010b2:	0018      	movs	r0, r3
 80010b4:	f003 f8ad 	bl	8004212 <HAL_GPIO_WritePin>
 	OutputSDIO();
 80010b8:	f7ff fdee 	bl	8000c98 <OutputSDIO>
 	SetSDIO();
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	00d9      	lsls	r1, r3, #3
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	2201      	movs	r2, #1
 80010c6:	0018      	movs	r0, r3
 80010c8:	f003 f8a3 	bl	8004212 <HAL_GPIO_WritePin>
 	SetCSB();
 80010cc:	23a0      	movs	r3, #160	; 0xa0
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f003 f89c 	bl	8004212 <HAL_GPIO_WritePin>
 	return(RdPara);
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <vSpi3Write>:
**Func: 	SPI Write One word
**Input: 	Write word
**Output:	none
**********************************************************/
void vSpi3Write(word dat)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 	vSpi3WriteByte((byte)(dat>>8)&0x7F);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	227f      	movs	r2, #127	; 0x7f
 80010f6:	4013      	ands	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff ff10 	bl	8000f20 <vSpi3WriteByte>
 	vSpi3WriteByte((byte)dat);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff ff0b 	bl	8000f20 <vSpi3WriteByte>
 	SetCSB();
 800110a:	23a0      	movs	r3, #160	; 0xa0
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	2201      	movs	r2, #1
 8001110:	2102      	movs	r1, #2
 8001112:	0018      	movs	r0, r3
 8001114:	f003 f87d 	bl	8004212 <HAL_GPIO_WritePin>
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <bSpi3Read>:
**Func: 	SPI-3 Read One byte
**Input: 	readout addresss
**Output:	readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	0002      	movs	r2, r0
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	701a      	strb	r2, [r3, #0]
  	vSpi3WriteByte(addr|0x80);
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	4252      	negs	r2, r2
 8001134:	4313      	orrs	r3, r2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff fef1 	bl	8000f20 <vSpi3WriteByte>
 	return(bSpi3ReadByte());
 800113e:	f7ff ff68 	bl	8001012 <bSpi3ReadByte>
 8001142:	0003      	movs	r3, r0
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <vSpi3WriteFIFO>:
**Func: 	SPI-3 send one byte to FIFO
**Input: 	one byte buffer
**Output:	none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
 
 	SetCSB();
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	2201      	movs	r2, #1
 800115e:	2102      	movs	r1, #2
 8001160:	0018      	movs	r0, r3
 8001162:	f003 f856 	bl	8004212 <HAL_GPIO_WritePin>
	OutputSDIO();
 8001166:	f7ff fd97 	bl	8000c98 <OutputSDIO>
	ClrSDCK();
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	0099      	lsls	r1, r3, #2
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2200      	movs	r2, #0
 8001174:	0018      	movs	r0, r3
 8001176:	f003 f84c 	bl	8004212 <HAL_GPIO_WritePin>
 	ClrFCSB();			//FCSB = 0
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2200      	movs	r2, #0
 8001180:	2104      	movs	r1, #4
 8001182:	0018      	movs	r0, r3
 8001184:	f003 f845 	bl	8004212 <HAL_GPIO_WritePin>
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2208      	movs	r2, #8
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e034      	b.n	80011fc <vSpi3WriteFIFO+0xb0>
 		{
 		ClrSDCK();
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	0099      	lsls	r1, r3, #2
 8001196:	23a0      	movs	r3, #160	; 0xa0
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	2200      	movs	r2, #0
 800119c:	0018      	movs	r0, r3
 800119e:	f003 f838 	bl	8004212 <HAL_GPIO_WritePin>

 		if(dat&0x80)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da08      	bge.n	80011be <vSpi3WriteFIFO+0x72>
			SetSDIO();
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	00d9      	lsls	r1, r3, #3
 80011b0:	23a0      	movs	r3, #160	; 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	2201      	movs	r2, #1
 80011b6:	0018      	movs	r0, r3
 80011b8:	f003 f82b 	bl	8004212 <HAL_GPIO_WritePin>
 80011bc:	e007      	b.n	80011ce <vSpi3WriteFIFO+0x82>
		else
			ClrSDIO();
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	00d9      	lsls	r1, r3, #3
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2200      	movs	r2, #0
 80011c8:	0018      	movs	r0, r3
 80011ca:	f003 f822 	bl	8004212 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 80011ce:	f7ff fe77 	bl	8000ec0 <_delay_us>
		SetSDCK();
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	0099      	lsls	r1, r3, #2
 80011d6:	23a0      	movs	r3, #160	; 0xa0
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	2201      	movs	r2, #1
 80011dc:	0018      	movs	r0, r3
 80011de:	f003 f818 	bl	8004212 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 80011e2:	f7ff fe6d 	bl	8000ec0 <_delay_us>
 		dat <<= 1;
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	18db      	adds	r3, r3, r3
 80011ee:	7013      	strb	r3, [r2, #0]
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80011f0:	210f      	movs	r1, #15
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	3a01      	subs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1c5      	bne.n	8001192 <vSpi3WriteFIFO+0x46>
 		}
 	ClrSDCK();
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	0099      	lsls	r1, r3, #2
 800120a:	23a0      	movs	r3, #160	; 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2200      	movs	r2, #0
 8001210:	0018      	movs	r0, r3
 8001212:	f002 fffe 	bl	8004212 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8001216:	f7ff fe53 	bl	8000ec0 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 800121a:	f7ff fe51 	bl	8000ec0 <_delay_us>
 	SetFCSB();
 800121e:	23a0      	movs	r3, #160	; 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	2201      	movs	r2, #1
 8001224:	2104      	movs	r1, #4
 8001226:	0018      	movs	r0, r3
 8001228:	f002 fff3 	bl	8004212 <HAL_GPIO_WritePin>
	SetSDIO();
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	00d9      	lsls	r1, r3, #3
 8001230:	23a0      	movs	r3, #160	; 0xa0
 8001232:	05db      	lsls	r3, r3, #23
 8001234:	2201      	movs	r2, #1
 8001236:	0018      	movs	r0, r3
 8001238:	f002 ffeb 	bl	8004212 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 800123c:	f7ff fe40 	bl	8000ec0 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8001240:	f7ff fe3e 	bl	8000ec0 <_delay_us>
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}

0800124c <vSpi3BurstWriteFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length & head pointer
**Output:	none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	000a      	movs	r2, r1
 8001256:	1cfb      	adds	r3, r7, #3
 8001258:	701a      	strb	r2, [r3, #0]
 	byte i;
 	if(length!=0x00)
 800125a:	1cfb      	adds	r3, r7, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01a      	beq.n	8001298 <vSpi3BurstWriteFIFO+0x4c>
	 	{
 		for(i=0;i<length;i++)
 8001262:	230f      	movs	r3, #15
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e00d      	b.n	8001288 <vSpi3BurstWriteFIFO+0x3c>
 			vSpi3WriteFIFO(ptr[i]);
 800126c:	240f      	movs	r4, #15
 800126e:	193b      	adds	r3, r7, r4
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	18d3      	adds	r3, r2, r3
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff ff67 	bl	800114c <vSpi3WriteFIFO>
 		for(i=0;i<length;i++)
 800127e:	193b      	adds	r3, r7, r4
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	193b      	adds	r3, r7, r4
 8001284:	3201      	adds	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	230f      	movs	r3, #15
 800128a:	18fa      	adds	r2, r7, r3
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3ea      	bcc.n	800126c <vSpi3BurstWriteFIFO+0x20>
 		}
 	return;
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46c0      	nop			; (mov r8, r8)
}
 800129a:	46bd      	mov	sp, r7
 800129c:	b005      	add	sp, #20
 800129e:	bd90      	pop	{r4, r7, pc}

080012a0 <GPO3In>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
void GPO3In(void)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	240c      	movs	r4, #12
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	0018      	movs	r0, r3
 80012ac:	2314      	movs	r3, #20
 80012ae:	001a      	movs	r2, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	f005 fc04 	bl	8006abe <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <GPO3In+0x70>)
 80012b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <GPO3In+0x70>)
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	430a      	orrs	r2, r1
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <GPO3In+0x70>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <GPO3In+0x70>)
 80012d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <GPO3In+0x70>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <GPO3In+0x70>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = GPO3_Pin;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	0152      	lsls	r2, r2, #5
 80012ec:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 80012fa:	193a      	adds	r2, r7, r4
 80012fc:	23a0      	movs	r3, #160	; 0xa0
 80012fe:	05db      	lsls	r3, r3, #23
 8001300:	0011      	movs	r1, r2
 8001302:	0018      	movs	r0, r3
 8001304:	f002 fd28 	bl	8003d58 <HAL_GPIO_Init>
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b009      	add	sp, #36	; 0x24
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <bGoTx>:

byte bGoTx(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	}
	if(i>=100)
		return(false);
	#endif

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <bGoTx+0x7c>)
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff fee2 	bl	80010e6 <vSpi3Write>
	for(i=0; i<100; i++){
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e020      	b.n	800136c <bGoTx+0x58>
		for(i=0; i<100; i++){
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e006      	b.n	8001340 <bGoTx+0x2c>
					_delay_us(); //_delay_us(100);
 8001332:	f7ff fdc5 	bl	8000ec0 <_delay_us>
		for(i=0; i<100; i++){
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	3201      	adds	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b63      	cmp	r3, #99	; 0x63
 8001346:	d9f4      	bls.n	8001332 <bGoTx+0x1e>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8001348:	2061      	movs	r0, #97	; 0x61
 800134a:	f7ff fee9 	bl	8001120 <bSpi3Read>
 800134e:	0003      	movs	r3, r0
 8001350:	0019      	movs	r1, r3
 8001352:	1dbb      	adds	r3, r7, #6
 8001354:	220f      	movs	r2, #15
 8001356:	400a      	ands	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_TX)
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b06      	cmp	r3, #6
 8001360:	d009      	beq.n	8001376 <bGoTx+0x62>
	for(i=0; i<100; i++){
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	3201      	adds	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b63      	cmp	r3, #99	; 0x63
 8001372:	d9da      	bls.n	800132a <bGoTx+0x16>
 8001374:	e000      	b.n	8001378 <bGoTx+0x64>
			break;
 8001376:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b63      	cmp	r3, #99	; 0x63
 800137e:	d901      	bls.n	8001384 <bGoTx+0x70>
		return(false);
 8001380:	2300      	movs	r3, #0
 8001382:	e000      	b.n	8001386 <bGoTx+0x72>
	else
		return(true);
 8001384:	2301      	movs	r3, #1
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	00006040 	.word	0x00006040

08001394 <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	byte tmp;

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <bGoSleep+0x4c>)
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fea2 	bl	80010e6 <vSpi3Write>
	for(int i=0; i<100; i++){
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e004      	b.n	80013b2 <bGoSleep+0x1e>
				_delay_us(); //_delay_us(100);
 80013a8:	f7ff fd8a 	bl	8000ec0 <_delay_us>
	for(int i=0; i<100; i++){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b63      	cmp	r3, #99	; 0x63
 80013b6:	ddf7      	ble.n	80013a8 <bGoSleep+0x14>
			}	//enough?
	tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 80013b8:	2061      	movs	r0, #97	; 0x61
 80013ba:	f7ff feb1 	bl	8001120 <bSpi3Read>
 80013be:	0003      	movs	r3, r0
 80013c0:	0019      	movs	r1, r3
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	220f      	movs	r2, #15
 80013c6:	400a      	ands	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_GO_SLEEP)
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d101      	bne.n	80013d6 <bGoSleep+0x42>
		return(true);
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <bGoSleep+0x44>
	else
		return(false);
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	00006010 	.word	0x00006010

080013e4 <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	byte tmp, i;

	RssiTrig = false;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <bGoStandby+0x80>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <bGoStandby+0x84>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff fe77 	bl	80010e6 <vSpi3Write>
	for(i=0; i<100; i++){
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	e020      	b.n	8001442 <bGoStandby+0x5e>
		for(i=0; i<100; i++){
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e006      	b.n	8001416 <bGoStandby+0x32>
					_delay_us(); //_delay_us(100);
 8001408:	f7ff fd5a 	bl	8000ec0 <_delay_us>
		for(i=0; i<100; i++){
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	3201      	adds	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b63      	cmp	r3, #99	; 0x63
 800141c:	d9f4      	bls.n	8001408 <bGoStandby+0x24>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 800141e:	2061      	movs	r0, #97	; 0x61
 8001420:	f7ff fe7e 	bl	8001120 <bSpi3Read>
 8001424:	0003      	movs	r3, r0
 8001426:	0019      	movs	r1, r3
 8001428:	1dbb      	adds	r3, r7, #6
 800142a:	220f      	movs	r2, #15
 800142c:	400a      	ands	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_STBY)
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d009      	beq.n	800144c <bGoStandby+0x68>
	for(i=0; i<100; i++){
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	3201      	adds	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b63      	cmp	r3, #99	; 0x63
 8001448:	d9da      	bls.n	8001400 <bGoStandby+0x1c>
 800144a:	e000      	b.n	800144e <bGoStandby+0x6a>
			break;
 800144c:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b63      	cmp	r3, #99	; 0x63
 8001454:	d901      	bls.n	800145a <bGoStandby+0x76>
		return(false);
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <bGoStandby+0x78>
	else
		return(true);
 800145a:	2301      	movs	r3, #1
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002f1 	.word	0x200002f1
 8001468:	00006002 	.word	0x00006002

0800146c <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <vSoftReset+0x18>)
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff fe37 	bl	80010e6 <vSpi3Write>
	HAL_Delay(1);				//enough?
 8001478:	2001      	movs	r0, #1
 800147a:	f001 fdd5 	bl	8003028 <HAL_Delay>
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	00007fff 	.word	0x00007fff

08001488 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	0002      	movs	r2, r0
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	22ca      	movs	r2, #202	; 0xca
 800149a:	01d2      	lsls	r2, r2, #7
 800149c:	4694      	mov	ip, r2
 800149e:	4463      	add	r3, ip
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fe20 	bl	80010e6 <vSpi3Write>
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}

080014ae <vIntSrcCfg>:
**Function: config interrupt source  
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	0002      	movs	r2, r0
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	1dbb      	adds	r3, r7, #6
 80014bc:	1c0a      	adds	r2, r1, #0
 80014be:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 80014c0:	2066      	movs	r0, #102	; 0x66
 80014c2:	f7ff fe2d 	bl	8001120 <bSpi3Read>
 80014c6:	0003      	movs	r3, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	240f      	movs	r4, #15
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	221f      	movs	r2, #31
 80014d0:	4391      	bics	r1, r2
 80014d2:	000a      	movs	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 80014d6:	193a      	adds	r2, r7, r4
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4313      	orrs	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	22cc      	movs	r2, #204	; 0xcc
 80014e4:	01d2      	lsls	r2, r2, #7
 80014e6:	4694      	mov	ip, r2
 80014e8:	4463      	add	r3, ip
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff fdfb 	bl	80010e6 <vSpi3Write>

	tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 80014f0:	2067      	movs	r0, #103	; 0x67
 80014f2:	f7ff fe15 	bl	8001120 <bSpi3Read>
 80014f6:	0003      	movs	r3, r0
 80014f8:	0019      	movs	r1, r3
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	221f      	movs	r2, #31
 80014fe:	4391      	bics	r1, r2
 8001500:	000a      	movs	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8001504:	193a      	adds	r2, r7, r4
 8001506:	1dbb      	adds	r3, r7, #6
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	22ce      	movs	r2, #206	; 0xce
 8001512:	01d2      	lsls	r2, r2, #7
 8001514:	4694      	mov	ip, r2
 8001516:	4463      	add	r3, ip
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fde4 	bl	80010e6 <vSpi3Write>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b005      	add	sp, #20
 8001524:	bd90      	pop	{r4, r7, pc}

08001526 <vEnableAntSwitch>:
**Function:  
**Input:    
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 8001526:	b5b0      	push	{r4, r5, r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	0002      	movs	r2, r0
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = bSpi3Read(CMT23_INT1_CTL);
 8001532:	250f      	movs	r5, #15
 8001534:	197c      	adds	r4, r7, r5
 8001536:	2066      	movs	r0, #102	; 0x66
 8001538:	f7ff fdf2 	bl	8001120 <bSpi3Read>
 800153c:	0003      	movs	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]
	tmp&= 0x3F;
 8001540:	197b      	adds	r3, r7, r5
 8001542:	197a      	adds	r2, r7, r5
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	213f      	movs	r1, #63	; 0x3f
 8001548:	400a      	ands	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
	switch(mode)
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d002      	beq.n	800155a <vEnableAntSwitch+0x34>
 8001554:	2b02      	cmp	r3, #2
 8001556:	d009      	beq.n	800156c <vEnableAntSwitch+0x46>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
		case 2:
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
		case 0:
		default:
			break;							//Disable
 8001558:	e010      	b.n	800157c <vEnableAntSwitch+0x56>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 800155a:	220f      	movs	r2, #15
 800155c:	18bb      	adds	r3, r7, r2
 800155e:	18ba      	adds	r2, r7, r2
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	4249      	negs	r1, r1
 8001566:	430a      	orrs	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e007      	b.n	800157c <vEnableAntSwitch+0x56>
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 800156c:	220f      	movs	r2, #15
 800156e:	18bb      	adds	r3, r7, r2
 8001570:	18ba      	adds	r2, r7, r2
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	430a      	orrs	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	46c0      	nop			; (mov r8, r8)
	}
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 800157c:	230f      	movs	r3, #15
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	22cc      	movs	r2, #204	; 0xcc
 8001584:	01d2      	lsls	r2, r2, #7
 8001586:	4694      	mov	ip, r2
 8001588:	4463      	add	r3, ip
 800158a:	0018      	movs	r0, r3
 800158c:	f7ff fdab 	bl	80010e6 <vSpi3Write>
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bdb0      	pop	{r4, r5, r7, pc}

08001598 <vIntSrcEnable>:
**Function: enable interrupt source 
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	0002      	movs	r2, r0
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	22d0      	movs	r2, #208	; 0xd0
 80015aa:	01d2      	lsls	r2, r2, #7
 80015ac:	4694      	mov	ip, r2
 80015ae:	4463      	add	r3, ip
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fd98 	bl	80010e6 <vSpi3Write>
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	//byte tmp;
	//byte int_clr2 = 0;
	//byte int_clr1 = 0;
	byte flg = 0;
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		int_clr1 |= RX_TIMEOUT_CLR;
		flg |= RX_TMO_EN;
	}
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1);	//Clear flag
#endif
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <bIntSrcFlagClr+0x28>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fd89 	bl	80010e6 <vSpi3Write>
	vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF);	//Clear flag
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <bIntSrcFlagClr+0x2c>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f7ff fd85 	bl	80010e6 <vSpi3Write>

	return(flg);
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	00006a07 	.word	0x00006a07
 80015ec:	00006bff 	.word	0x00006bff

080015f0 <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_FLG);
 80015f6:	1dfc      	adds	r4, r7, #7
 80015f8:	206e      	movs	r0, #110	; 0x6e
 80015fa:	f7ff fd91 	bl	8001120 <bSpi3Read>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
	vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <vClearFIFO+0x28>)
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff fd6e 	bl	80010e6 <vSpi3Write>
	return(tmp);
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b003      	add	sp, #12
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	00006c03 	.word	0x00006c03

0800161c <vEnableWrFifo>:

#if 1		//splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_CTL);
 8001622:	1dfc      	adds	r4, r7, #7
 8001624:	2069      	movs	r0, #105	; 0x69
 8001626:	f7ff fd7b 	bl	8001120 <bSpi3Read>
 800162a:	0003      	movs	r3, r0
 800162c:	7023      	strb	r3, [r4, #0]
	tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	1dfa      	adds	r2, r7, #7
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	2105      	movs	r1, #5
 8001636:	430a      	orrs	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	22d2      	movs	r2, #210	; 0xd2
 8001640:	01d2      	lsls	r2, r2, #7
 8001642:	4694      	mov	ip, r2
 8001644:	4463      	add	r3, ip
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff fd4d 	bl	80010e6 <vSpi3Write>
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b003      	add	sp, #12
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
	byte tmp;
	vSpi3Init();
 800165a:	f7ff fc36 	bl	8000eca <vSpi3Init>
	//GPO1In();
	//GPO2In();
	GPO3In();
 800165e:	f7ff fe1f 	bl	80012a0 <GPO3In>

	//TX_ANTOut();
	//RX_ANTOut();

	vSoftReset();
 8001662:	f7ff ff03 	bl	800146c <vSoftReset>
	HAL_Delay(20);
 8001666:	2014      	movs	r0, #20
 8001668:	f001 fcde 	bl	8003028 <HAL_Delay>
	bGoStandby();
 800166c:	f7ff feba 	bl	80013e4 <bGoStandby>

	//
	tmp = bSpi3Read(CMT23_MODE_STA);
 8001670:	1dfc      	adds	r4, r7, #7
 8001672:	2061      	movs	r0, #97	; 0x61
 8001674:	f7ff fd54 	bl	8001120 <bSpi3Read>
 8001678:	0003      	movs	r3, r0
 800167a:	7023      	strb	r3, [r4, #0]
	tmp|= EEP_CPY_DIS;
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	1dfa      	adds	r2, r7, #7
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	2110      	movs	r1, #16
 8001684:	430a      	orrs	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
	tmp&= (~RSTN_IN_EN);			//Disable RstPin
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	1dfa      	adds	r2, r7, #7
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	2120      	movs	r1, #32
 8001690:	438a      	bics	r2, r1
 8001692:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	22c2      	movs	r2, #194	; 0xc2
 800169a:	01d2      	lsls	r2, r2, #7
 800169c:	4694      	mov	ip, r2
 800169e:	4463      	add	r3, ip
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fd20 	bl	80010e6 <vSpi3Write>

	bIntSrcFlagClr();
 80016a6:	f7ff ff8b 	bl	80015c0 <bIntSrcFlagClr>
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b003      	add	sp, #12
 80016b0:	bd90      	pop	{r4, r7, pc}

080016b2 <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 80016b2:	b590      	push	{r4, r7, lr}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	000a      	movs	r2, r1
 80016bc:	1cfb      	adds	r3, r7, #3
 80016be:	701a      	strb	r2, [r3, #0]
	byte i;

	if(length!=0){
 80016c0:	1cfb      	adds	r3, r7, #3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01a      	beq.n	80016fe <vCfgBank+0x4c>
		for(i=0; i<length; i++)
 80016c8:	230f      	movs	r3, #15
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e00e      	b.n	80016f0 <vCfgBank+0x3e>
			vSpi3Write(cfg[i]);
 80016d2:	240f      	movs	r4, #15
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff fd00 	bl	80010e6 <vSpi3Write>
		for(i=0; i<length; i++)
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	3201      	adds	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	230f      	movs	r3, #15
 80016f2:	18fa      	adds	r2, r7, r3
 80016f4:	1cfb      	adds	r3, r7, #3
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3e9      	bcc.n	80016d2 <vCfgBank+0x20>
	}
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b005      	add	sp, #20
 8001704:	bd90      	pop	{r4, r7, pc}

08001706 <bSendMessage>:
	rev = 0xFF;
	return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	000a      	movs	r2, r1
 8001710:	1cfb      	adds	r3, r7, #3
 8001712:	701a      	strb	r2, [r3, #0]
	bIntSrcFlagClr();
 8001714:	f7ff ff54 	bl	80015c0 <bIntSrcFlagClr>
#if 1
	//mode1
	vSetTxPayloadLength(length);
 8001718:	1cfb      	adds	r3, r7, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f813 	bl	8001748 <vSetTxPayloadLength>
	bGoStandby();
 8001722:	f7ff fe5f 	bl	80013e4 <bGoStandby>
	vEnableWrFifo();
 8001726:	f7ff ff79 	bl	800161c <vEnableWrFifo>
	vSpi3BurstWriteFIFO(msg, length);
 800172a:	1cfb      	adds	r3, r7, #3
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff fd8a 	bl	800124c <vSpi3BurstWriteFIFO>
	bGoTx();
 8001738:	f7ff fdec 	bl	8001314 <bGoTx>
	vSetTxPayloadLength(length);
	bGoTx();
	vEnableWrFifo();
	vSpi3BurstWriteFIFO(msg, length);
#endif
	return(true);
 800173c:	2301      	movs	r3, #1
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	byte tmp;
	byte len;
	bGoStandby();
 8001750:	f7ff fe48 	bl	80013e4 <bGoStandby>
	tmp = bSpi3Read(CMT23_PKT_CTRL1);
 8001754:	250f      	movs	r5, #15
 8001756:	197c      	adds	r4, r7, r5
 8001758:	2045      	movs	r0, #69	; 0x45
 800175a:	f7ff fce1 	bl	8001120 <bSpi3Read>
 800175e:	0003      	movs	r3, r0
 8001760:	7023      	strb	r3, [r4, #0]
	tmp&= 0x8F;
 8001762:	0028      	movs	r0, r5
 8001764:	183b      	adds	r3, r7, r0
 8001766:	183a      	adds	r2, r7, r0
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	2170      	movs	r1, #112	; 0x70
 800176c:	438a      	bics	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]

	if(length!=0){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01c      	beq.n	80017b0 <vSetTxPayloadLength+0x68>
		if(FixedPktLength){
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <vSetTxPayloadLength+0xc0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <vSetTxPayloadLength+0x50>
		  tmp &= ~(1<<0);		//clear bit0
 800177e:	183b      	adds	r3, r7, r0
 8001780:	183a      	adds	r2, r7, r0
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	438a      	bics	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
		  len = length - 1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	230e      	movs	r3, #14
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	3a01      	subs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e00f      	b.n	80017b8 <vSetTxPayloadLength+0x70>
		}
		else{
		  tmp |= (1<<0);	   //set bit0
 8001798:	220f      	movs	r2, #15
 800179a:	18bb      	adds	r3, r7, r2
 800179c:	18ba      	adds	r2, r7, r2
 800179e:	7812      	ldrb	r2, [r2, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
		  len = length;
 80017a6:	230e      	movs	r3, #14
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e003      	b.n	80017b8 <vSetTxPayloadLength+0x70>
		}
	}else
		len = 0;
 80017b0:	230e      	movs	r3, #14
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

	tmp|= (((byte)(len>>8)&0x07)<<4);
 80017b8:	240e      	movs	r4, #14
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	2270      	movs	r2, #112	; 0x70
 80017c8:	4013      	ands	r3, r2
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	210f      	movs	r1, #15
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	228a      	movs	r2, #138	; 0x8a
 80017e2:	01d2      	lsls	r2, r2, #7
 80017e4:	4694      	mov	ip, r2
 80017e6:	4463      	add	r3, ip
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fc7c 	bl	80010e6 <vSpi3Write>
	vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len);	//Payload length
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	228c      	movs	r2, #140	; 0x8c
 80017f4:	01d2      	lsls	r2, r2, #7
 80017f6:	4694      	mov	ip, r2
 80017f8:	4463      	add	r3, ip
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7ff fc73 	bl	80010e6 <vSpi3Write>
	//bGoSleep();
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bdb0      	pop	{r4, r5, r7, pc}
 8001808:	200002f2 	.word	0x200002f2

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b0c9      	sub	sp, #292	; 0x124
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001812:	f001 fb99 	bl	8002f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001816:	f000 fc09 	bl	800202c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181a:	f000 fd85 	bl	8002328 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800181e:	f000 fd21 	bl	8002264 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001822:	f000 fcdf 	bl	80021e4 <MX_I2C1_Init>
  MX_ADC_Init();
 8001826:	f000 fc77 	bl	8002118 <MX_ADC_Init>
  MX_RTC_Init();
 800182a:	f000 fd49 	bl	80022c0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	//  https://github.com/Sensirion/embedded-sht sht30 kodları kaynak
	sensirion_i2c_init();
 800182e:	f001 f853 	bl	80028d8 <sensirion_i2c_init>
	printf("Basladi\r\n");
 8001832:	4ada      	ldr	r2, [pc, #872]	; (8001b9c <main+0x390>)
 8001834:	4bda      	ldr	r3, [pc, #872]	; (8001ba0 <main+0x394>)
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f005 f949 	bl	8006ad0 <siprintf>
 800183e:	0003      	movs	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	4bd8      	ldr	r3, [pc, #864]	; (8001ba4 <main+0x398>)
 8001844:	49d6      	ldr	r1, [pc, #856]	; (8001ba0 <main+0x394>)
 8001846:	48d8      	ldr	r0, [pc, #864]	; (8001ba8 <main+0x39c>)
 8001848:	f004 fc3c 	bl	80060c4 <HAL_UART_Transmit>
HAL_Delay(1000);
 800184c:	23fa      	movs	r3, #250	; 0xfa
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	0018      	movs	r0, r3
 8001852:	f001 fbe9 	bl	8003028 <HAL_Delay>
	 /* while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
	  printf("SHT sensor probing failed\n"); }*/

	printf("SHT sensor probing successful\n");
 8001856:	4ad5      	ldr	r2, [pc, #852]	; (8001bac <main+0x3a0>)
 8001858:	4bd1      	ldr	r3, [pc, #836]	; (8001ba0 <main+0x394>)
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f005 f937 	bl	8006ad0 <siprintf>
 8001862:	0003      	movs	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	4bcf      	ldr	r3, [pc, #828]	; (8001ba4 <main+0x398>)
 8001868:	49cd      	ldr	r1, [pc, #820]	; (8001ba0 <main+0x394>)
 800186a:	48cf      	ldr	r0, [pc, #828]	; (8001ba8 <main+0x39c>)
 800186c:	f004 fc2a 	bl	80060c4 <HAL_UART_Transmit>
#define VREFINT_CAL_ADDR			0x1FF80078 //STM32L010C6Tx datasheet'inden bakıldı. Bu koda ve aşağıdaki Vrefint için yazıldı
#define VREFINT_CAL 				((uint16_t*) VREFINT_CAL_ADDR)

#define TX_NUM  25
	byte tx_buf[25] = { 'H', 'A', 'T', 'A', '1', '1', '1', '1', '1', '1', 'A',
 8001870:	23f8      	movs	r3, #248	; 0xf8
 8001872:	18f9      	adds	r1, r7, r3
 8001874:	4ace      	ldr	r2, [pc, #824]	; (8001bb0 <main+0x3a4>)
 8001876:	000b      	movs	r3, r1
 8001878:	ca31      	ldmia	r2!, {r0, r4, r5}
 800187a:	c331      	stmia	r3!, {r0, r4, r5}
 800187c:	ca11      	ldmia	r2!, {r0, r4}
 800187e:	c311      	stmia	r3!, {r0, r4}
 8001880:	8810      	ldrh	r0, [r2, #0]
 8001882:	8018      	strh	r0, [r3, #0]
 8001884:	7892      	ldrb	r2, [r2, #2]
 8001886:	709a      	strb	r2, [r3, #2]
 8001888:	2317      	movs	r3, #23
 800188a:	18cb      	adds	r3, r1, r3
 800188c:	2202      	movs	r2, #2
 800188e:	2100      	movs	r1, #0
 8001890:	0018      	movs	r0, r3
 8001892:	f005 f914 	bl	8006abe <memset>
	char buffer2[50];
	char buffer3[100];
	char buffer4[25];
	char buffer5[25];

	FixedPktLength = 0;
 8001896:	4bc7      	ldr	r3, [pc, #796]	; (8001bb4 <main+0x3a8>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
	PayloadLength = 23;
 800189c:	4bc6      	ldr	r3, [pc, #792]	; (8001bb8 <main+0x3ac>)
 800189e:	2217      	movs	r2, #23
 80018a0:	601a      	str	r2, [r3, #0]
	vInit();
 80018a2:	f7ff fed7 	bl	8001654 <vInit>
	vCfgBank(CMTBank, 12);
 80018a6:	4bc5      	ldr	r3, [pc, #788]	; (8001bbc <main+0x3b0>)
 80018a8:	210c      	movs	r1, #12
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff ff01 	bl	80016b2 <vCfgBank>
	vCfgBank(SystemBank, 12);
 80018b0:	4bc3      	ldr	r3, [pc, #780]	; (8001bc0 <main+0x3b4>)
 80018b2:	210c      	movs	r1, #12
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fefc 	bl	80016b2 <vCfgBank>
	vCfgBank(FrequencyBank, 8);
 80018ba:	4bc2      	ldr	r3, [pc, #776]	; (8001bc4 <main+0x3b8>)
 80018bc:	2108      	movs	r1, #8
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff fef7 	bl	80016b2 <vCfgBank>
	vCfgBank(DataRateBank, 24);
 80018c4:	4bc0      	ldr	r3, [pc, #768]	; (8001bc8 <main+0x3bc>)
 80018c6:	2118      	movs	r1, #24
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fef2 	bl	80016b2 <vCfgBank>
	vCfgBank(BasebandBank, 29);
 80018ce:	4bbf      	ldr	r3, [pc, #764]	; (8001bcc <main+0x3c0>)
 80018d0:	211d      	movs	r1, #29
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff feed 	bl	80016b2 <vCfgBank>
	vCfgBank(TXBank, 11);
 80018d8:	4bbd      	ldr	r3, [pc, #756]	; (8001bd0 <main+0x3c4>)
 80018da:	210b      	movs	r1, #11
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff fee8 	bl	80016b2 <vCfgBank>
	vEnableAntSwitch(0);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff fe1f 	bl	8001526 <vEnableAntSwitch>
	vGpioFuncCfg(GPIO1_DCLK + GPIO2_DCLK + GPIO3_INT2); //GPIO Maping
 80018e8:	202f      	movs	r0, #47	; 0x2f
 80018ea:	f7ff fdcd 	bl	8001488 <vGpioFuncCfg>

	vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 80018ee:	210a      	movs	r1, #10
 80018f0:	2010      	movs	r0, #16
 80018f2:	f7ff fddc 	bl	80014ae <vIntSrcCfg>
	vIntSrcEnable(TX_DONE_EN);
 80018f6:	2020      	movs	r0, #32
 80018f8:	f7ff fe4e 	bl	8001598 <vIntSrcEnable>
	vClearFIFO();
 80018fc:	f7ff fe78 	bl	80015f0 <vClearFIFO>
	bGoSleep();
 8001900:	f7ff fd48 	bl	8001394 <bGoSleep>

	//int c = 0; sayaç kullanmak istersen yorumu aç
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED); // vrefint'ten ölçülecek voltajın düzgün ölçülmesi için yapılan kalibrasyon ayarı
 8001904:	4bb3      	ldr	r3, [pc, #716]	; (8001bd4 <main+0x3c8>)
 8001906:	2100      	movs	r1, #0
 8001908:	0018      	movs	r0, r3
 800190a:	f002 f8a9 	bl	8003a60 <HAL_ADCEx_Calibration_Start>

	int32_t temperature, humidity;
	int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT, &temperature,
 800190e:	1d3a      	adds	r2, r7, #4
 8001910:	2308      	movs	r3, #8
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	0019      	movs	r1, r3
 8001916:	2044      	movs	r0, #68	; 0x44
 8001918:	f001 f874 	bl	8002a04 <sht3x_measure_blocking_read>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	2520      	movs	r5, #32
 8001922:	35ff      	adds	r5, #255	; 0xff
 8001924:	197b      	adds	r3, r7, r5
 8001926:	701a      	strb	r2, [r3, #0]
			&humidity);
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) { //RTC ile saniye sayar o sürede stanby moduna alır. bekleme bittikten sonra bu fonksiyonun içindekileri yapar ve tekrar uyku moduna geçer.
 8001928:	4bab      	ldr	r3, [pc, #684]	; (8001bd8 <main+0x3cc>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d000      	beq.n	8001936 <main+0x12a>
 8001934:	e30e      	b.n	8001f54 <main+0x748>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	48a8      	ldr	r0, [pc, #672]	; (8001bdc <main+0x3d0>)
 800193c:	2201      	movs	r2, #1
 800193e:	0019      	movs	r1, r3
 8001940:	f002 fc67 	bl	8004212 <HAL_GPIO_WritePin>
		HAL_Delay(3000); //yukarıdaki ve hal delay satırı kod yazarken aşamayı görmek için yazılmıştır sonradan silebilirsin
 8001944:	4ba6      	ldr	r3, [pc, #664]	; (8001be0 <main+0x3d4>)
 8001946:	0018      	movs	r0, r3
 8001948:	f001 fb6e 	bl	8003028 <HAL_Delay>

		//ADC'deki vrefint enable ettikten sonra aşağıdaki başlayan ve biten kodlarda cihaza gelen voltu ölçer
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800194c:	4ba2      	ldr	r3, [pc, #648]	; (8001bd8 <main+0x3cc>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4ba1      	ldr	r3, [pc, #644]	; (8001bd8 <main+0x3cc>)
 8001952:	2108      	movs	r1, #8
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc);
 8001958:	4b9e      	ldr	r3, [pc, #632]	; (8001bd4 <main+0x3c8>)
 800195a:	0018      	movs	r0, r3
 800195c:	f001 fda0 	bl	80034a0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8001960:	4b9c      	ldr	r3, [pc, #624]	; (8001bd4 <main+0x3c8>)
 8001962:	2164      	movs	r1, #100	; 0x64
 8001964:	0018      	movs	r0, r3
 8001966:	f001 fe2f 	bl	80035c8 <HAL_ADC_PollForConversion>
		uint16_t VREFINTADC = HAL_ADC_GetValue(&hadc);
 800196a:	4b9a      	ldr	r3, [pc, #616]	; (8001bd4 <main+0x3c8>)
 800196c:	0018      	movs	r0, r3
 800196e:	f001 fec7 	bl	8003700 <HAL_ADC_GetValue>
 8001972:	0002      	movs	r2, r0
 8001974:	268e      	movs	r6, #142	; 0x8e
 8001976:	0076      	lsls	r6, r6, #1
 8001978:	19bb      	adds	r3, r7, r6
 800197a:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc);
 800197c:	4b95      	ldr	r3, [pc, #596]	; (8001bd4 <main+0x3c8>)
 800197e:	0018      	movs	r0, r3
 8001980:	f001 fde2 	bl	8003548 <HAL_ADC_Stop>
		float VDD = 3000.0 * (*VREFINT_CAL / (float) VREFINTADC);
 8001984:	4b97      	ldr	r3, [pc, #604]	; (8001be4 <main+0x3d8>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff f89f 	bl	8000acc <__aeabi_i2f>
 800198e:	1c04      	adds	r4, r0, #0
 8001990:	19bb      	adds	r3, r7, r6
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff f8df 	bl	8000b58 <__aeabi_ui2f>
 800199a:	1c03      	adds	r3, r0, #0
 800199c:	1c19      	adds	r1, r3, #0
 800199e:	1c20      	adds	r0, r4, #0
 80019a0:	f7fe fe4e 	bl	8000640 <__aeabi_fdiv>
 80019a4:	1c03      	adds	r3, r0, #0
 80019a6:	4990      	ldr	r1, [pc, #576]	; (8001be8 <main+0x3dc>)
 80019a8:	1c18      	adds	r0, r3, #0
 80019aa:	f7fe ff55 	bl	8000858 <__aeabi_fmul>
 80019ae:	1c03      	adds	r3, r0, #0
 80019b0:	228c      	movs	r2, #140	; 0x8c
 80019b2:	0052      	lsls	r2, r2, #1
 80019b4:	18ba      	adds	r2, r7, r2
 80019b6:	6013      	str	r3, [r2, #0]
		//buraya kadar cihaza gelen vrefint'i ölçtü.

		temperature = temperature / 10;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	210a      	movs	r1, #10
 80019bc:	0018      	movs	r0, r3
 80019be:	f7fe fc3f 	bl	8000240 <__divsi3>
 80019c2:	0003      	movs	r3, r0
 80019c4:	60bb      	str	r3, [r7, #8]
		humidity = humidity / 10;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	210a      	movs	r1, #10
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7fe fc38 	bl	8000240 <__divsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	607b      	str	r3, [r7, #4]
		if (ret == STATUS_OK) {
 80019d4:	197b      	adds	r3, r7, r5
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d000      	beq.n	80019e0 <main+0x1d4>
 80019de:	e2a3      	b.n	8001f28 <main+0x71c>
			//temperature=-900;
			//temperature = 1500;
//Sıcaklık verisinden gelen veriler eğer -40 ile 100 derece arasında doğru kabul edilir ve alıcıya gönderilmek üzere aşağıdaki fonksiyona girer.
			if (-4000 <= temperature && temperature <= 9999 && 0 <= humidity && humidity <= 9999) {
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4a82      	ldr	r2, [pc, #520]	; (8001bec <main+0x3e0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	da00      	bge.n	80019ea <main+0x1de>
 80019e8:	e290      	b.n	8001f0c <main+0x700>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4a80      	ldr	r2, [pc, #512]	; (8001bf0 <main+0x3e4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	dd00      	ble.n	80019f4 <main+0x1e8>
 80019f2:	e28b      	b.n	8001f0c <main+0x700>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da00      	bge.n	80019fc <main+0x1f0>
 80019fa:	e287      	b.n	8001f0c <main+0x700>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a7c      	ldr	r2, [pc, #496]	; (8001bf0 <main+0x3e4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	dd00      	ble.n	8001a06 <main+0x1fa>
 8001a04:	e282      	b.n	8001f0c <main+0x700>
				memset(buffer, 0, sizeof(buffer)); //buffer'lar boşaltıyorum ki aşağıdaki karekterleri eklerken 0. indisten başlasın
 8001a06:	24dc      	movs	r4, #220	; 0xdc
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	2219      	movs	r2, #25
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f005 f855 	bl	8006abe <memset>
				memset(buffer4, 0, sizeof(buffer4));
 8001a14:	2328      	movs	r3, #40	; 0x28
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	2219      	movs	r2, #25
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f005 f84e 	bl	8006abe <memset>
				memset(buffer5, 0, sizeof(buffer5));
 8001a22:	230c      	movs	r3, #12
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	2219      	movs	r2, #25
 8001a28:	2100      	movs	r1, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f005 f847 	bl	8006abe <memset>

				if (temperature < 0)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da0f      	bge.n	8001a56 <main+0x24a>
					strncat(buffer, "-", 1); //sıcaklık + ise datanın başına +, - ise datanın başına - ekleniyor.
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7fe fb65 	bl	8000108 <strlen>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	001a      	movs	r2, r3
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	189a      	adds	r2, r3, r2
 8001a46:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <main+0x3e8>)
 8001a48:	0010      	movs	r0, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	001a      	movs	r2, r3
 8001a50:	f005 f82c 	bl	8006aac <memcpy>
 8001a54:	e00f      	b.n	8001a76 <main+0x26a>
				 else
					strncat(buffer, "+", 2);
 8001a56:	24dc      	movs	r4, #220	; 0xdc
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7fe fb54 	bl	8000108 <strlen>
 8001a60:	0003      	movs	r3, r0
 8001a62:	001a      	movs	r2, r3
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	189a      	adds	r2, r3, r2
 8001a68:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <main+0x3ec>)
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	2302      	movs	r3, #2
 8001a70:	001a      	movs	r2, r3
 8001a72:	f005 f81b 	bl	8006aac <memcpy>


				if (temperature < -1000) { //mesela -12.85 derce
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4a60      	ldr	r2, [pc, #384]	; (8001bfc <main+0x3f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	da11      	bge.n	8001aa2 <main+0x296>
					// -1 ile çarptım çünkü -'li kısmı olmadan ilk 4 bitini göndermek istiyorum.
					temperature = temperature * -1;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	425b      	negs	r3, r3
 8001a82:	60bb      	str	r3, [r7, #8]
					sprintf(buffer4, "%d", temperature); //Temperature/100 demedik çünkü ilk 4 bitini de alıcıya göndermek istiyoruz.100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	495e      	ldr	r1, [pc, #376]	; (8001c00 <main+0x3f4>)
 8001a88:	2428      	movs	r4, #40	; 0x28
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f005 f81f 	bl	8006ad0 <siprintf>
				    strncat(buffer, buffer4, 4);
 8001a92:	1939      	adds	r1, r7, r4
 8001a94:	23dc      	movs	r3, #220	; 0xdc
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2204      	movs	r2, #4
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f005 f838 	bl	8006b10 <strncat>
 8001aa0:	e1c7      	b.n	8001e32 <main+0x626>

				} else if (temperature < -100) {		//mesela -2.85 derece
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3364      	adds	r3, #100	; 0x64
 8001aa6:	da3a      	bge.n	8001b1e <main+0x312>
					strncat(buffer, "0", 1);
 8001aa8:	24dc      	movs	r4, #220	; 0xdc
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7fe fb2b 	bl	8000108 <strlen>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	189a      	adds	r2, r3, r2
 8001aba:	4b52      	ldr	r3, [pc, #328]	; (8001c04 <main+0x3f8>)
 8001abc:	0010      	movs	r0, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	f004 fff2 	bl	8006aac <memcpy>
					temperature = temperature * -1;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	425b      	negs	r3, r3
 8001acc:	60bb      	str	r3, [r7, #8]
					sprintf(buffer4, "%d", temperature);
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	494b      	ldr	r1, [pc, #300]	; (8001c00 <main+0x3f4>)
 8001ad2:	2528      	movs	r5, #40	; 0x28
 8001ad4:	197b      	adds	r3, r7, r5
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f004 fffa 	bl	8006ad0 <siprintf>

					printf("0'la -10 arasında\r\n");
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <main+0x3fc>)
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <main+0x394>)
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f004 fff4 	bl	8006ad0 <siprintf>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <main+0x398>)
 8001aee:	492c      	ldr	r1, [pc, #176]	; (8001ba0 <main+0x394>)
 8001af0:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <main+0x39c>)
 8001af2:	f004 fae7 	bl	80060c4 <HAL_UART_Transmit>
					strncat(buffer, buffer4, 3);
 8001af6:	1979      	adds	r1, r7, r5
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	2203      	movs	r2, #3
 8001afc:	0018      	movs	r0, r3
 8001afe:	f005 f807 	bl	8006b10 <strncat>
					printf("buffer4: %s\r\n", buffer);
 8001b02:	193a      	adds	r2, r7, r4
 8001b04:	4941      	ldr	r1, [pc, #260]	; (8001c0c <main+0x400>)
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <main+0x394>)
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f004 ffe1 	bl	8006ad0 <siprintf>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <main+0x398>)
 8001b14:	4922      	ldr	r1, [pc, #136]	; (8001ba0 <main+0x394>)
 8001b16:	4824      	ldr	r0, [pc, #144]	; (8001ba8 <main+0x39c>)
 8001b18:	f004 fad4 	bl	80060c4 <HAL_UART_Transmit>
 8001b1c:	e189      	b.n	8001e32 <main+0x626>

				} else if (temperature < -10) { //mesela -0.85 derece
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	330a      	adds	r3, #10
 8001b22:	da7b      	bge.n	8001c1c <main+0x410>
					strncat(buffer, "00", 2);
 8001b24:	24dc      	movs	r4, #220	; 0xdc
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7fe faed 	bl	8000108 <strlen>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	001a      	movs	r2, r3
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	189a      	adds	r2, r3, r2
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <main+0x404>)
 8001b38:	0010      	movs	r0, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	001a      	movs	r2, r3
 8001b40:	f004 ffb4 	bl	8006aac <memcpy>
					temperature = temperature * -1;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	425b      	negs	r3, r3
 8001b48:	60bb      	str	r3, [r7, #8]
					sprintf(buffer4, "%d", temperature);
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	492c      	ldr	r1, [pc, #176]	; (8001c00 <main+0x3f4>)
 8001b4e:	2528      	movs	r5, #40	; 0x28
 8001b50:	197b      	adds	r3, r7, r5
 8001b52:	0018      	movs	r0, r3
 8001b54:	f004 ffbc 	bl	8006ad0 <siprintf>
					printf("0'la -1 arasında\r\n");
 8001b58:	4a2e      	ldr	r2, [pc, #184]	; (8001c14 <main+0x408>)
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <main+0x394>)
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f004 ffb6 	bl	8006ad0 <siprintf>
 8001b64:	0003      	movs	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <main+0x398>)
 8001b6a:	490d      	ldr	r1, [pc, #52]	; (8001ba0 <main+0x394>)
 8001b6c:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <main+0x39c>)
 8001b6e:	f004 faa9 	bl	80060c4 <HAL_UART_Transmit>

					strncat(buffer, buffer4, 2);
 8001b72:	1979      	adds	r1, r7, r5
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	2202      	movs	r2, #2
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f004 ffc9 	bl	8006b10 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001b7e:	193a      	adds	r2, r7, r4
 8001b80:	4925      	ldr	r1, [pc, #148]	; (8001c18 <main+0x40c>)
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <main+0x394>)
 8001b84:	0018      	movs	r0, r3
 8001b86:	f004 ffa3 	bl	8006ad0 <siprintf>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <main+0x398>)
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <main+0x394>)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <main+0x39c>)
 8001b94:	f004 fa96 	bl	80060c4 <HAL_UART_Transmit>
 8001b98:	e14b      	b.n	8001e32 <main+0x626>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	0800734c 	.word	0x0800734c
 8001ba0:	20000344 	.word	0x20000344
 8001ba4:	0000ffff 	.word	0x0000ffff
 8001ba8:	20000268 	.word	0x20000268
 8001bac:	08007358 	.word	0x08007358
 8001bb0:	0800748c 	.word	0x0800748c
 8001bb4:	200002f2 	.word	0x200002f2
 8001bb8:	200002f4 	.word	0x200002f4
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000030 	.word	0x20000030
 8001bc4:	20000060 	.word	0x20000060
 8001bc8:	20000080 	.word	0x20000080
 8001bcc:	200000e0 	.word	0x200000e0
 8001bd0:	20000154 	.word	0x20000154
 8001bd4:	20000468 	.word	0x20000468
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	50000800 	.word	0x50000800
 8001be0:	00000bb8 	.word	0x00000bb8
 8001be4:	1ff80078 	.word	0x1ff80078
 8001be8:	453b8000 	.word	0x453b8000
 8001bec:	fffff060 	.word	0xfffff060
 8001bf0:	0000270f 	.word	0x0000270f
 8001bf4:	08007378 	.word	0x08007378
 8001bf8:	0800737c 	.word	0x0800737c
 8001bfc:	fffffc18 	.word	0xfffffc18
 8001c00:	08007380 	.word	0x08007380
 8001c04:	08007384 	.word	0x08007384
 8001c08:	08007388 	.word	0x08007388
 8001c0c:	080073a0 	.word	0x080073a0
 8001c10:	080073b0 	.word	0x080073b0
 8001c14:	080073b4 	.word	0x080073b4
 8001c18:	080073c8 	.word	0x080073c8


				} else if (temperature < 0) { //mesela -0.05 derece
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	da3a      	bge.n	8001c98 <main+0x48c>
					strncat(buffer, "000", 3);
 8001c22:	24dc      	movs	r4, #220	; 0xdc
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7fe fa6e 	bl	8000108 <strlen>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	001a      	movs	r2, r3
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	189a      	adds	r2, r3, r2
 8001c34:	4be6      	ldr	r3, [pc, #920]	; (8001fd0 <main+0x7c4>)
 8001c36:	0010      	movs	r0, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	f004 ff35 	bl	8006aac <memcpy>

					temperature = temperature * -1;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	425b      	negs	r3, r3
 8001c46:	60bb      	str	r3, [r7, #8]
					sprintf(buffer4, "%d", temperature);
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	49e2      	ldr	r1, [pc, #904]	; (8001fd4 <main+0x7c8>)
 8001c4c:	2528      	movs	r5, #40	; 0x28
 8001c4e:	197b      	adds	r3, r7, r5
 8001c50:	0018      	movs	r0, r3
 8001c52:	f004 ff3d 	bl	8006ad0 <siprintf>
					printf("0'la -1 arasında\r\n");
 8001c56:	4ae0      	ldr	r2, [pc, #896]	; (8001fd8 <main+0x7cc>)
 8001c58:	4be0      	ldr	r3, [pc, #896]	; (8001fdc <main+0x7d0>)
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f004 ff37 	bl	8006ad0 <siprintf>
 8001c62:	0003      	movs	r3, r0
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4bde      	ldr	r3, [pc, #888]	; (8001fe0 <main+0x7d4>)
 8001c68:	49dc      	ldr	r1, [pc, #880]	; (8001fdc <main+0x7d0>)
 8001c6a:	48de      	ldr	r0, [pc, #888]	; (8001fe4 <main+0x7d8>)
 8001c6c:	f004 fa2a 	bl	80060c4 <HAL_UART_Transmit>

					strncat(buffer, buffer4, 2);
 8001c70:	1979      	adds	r1, r7, r5
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	2202      	movs	r2, #2
 8001c76:	0018      	movs	r0, r3
 8001c78:	f004 ff4a 	bl	8006b10 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001c7c:	193a      	adds	r2, r7, r4
 8001c7e:	49da      	ldr	r1, [pc, #872]	; (8001fe8 <main+0x7dc>)
 8001c80:	4bd6      	ldr	r3, [pc, #856]	; (8001fdc <main+0x7d0>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f004 ff24 	bl	8006ad0 <siprintf>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4bd4      	ldr	r3, [pc, #848]	; (8001fe0 <main+0x7d4>)
 8001c8e:	49d3      	ldr	r1, [pc, #844]	; (8001fdc <main+0x7d0>)
 8001c90:	48d4      	ldr	r0, [pc, #848]	; (8001fe4 <main+0x7d8>)
 8001c92:	f004 fa17 	bl	80060c4 <HAL_UART_Transmit>
 8001c96:	e0cc      	b.n	8001e32 <main+0x626>

				} else if (temperature == 0) { //0 derece
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d110      	bne.n	8001cc0 <main+0x4b4>
					strncat(buffer, "0000", 4);
 8001c9e:	24dc      	movs	r4, #220	; 0xdc
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7fe fa30 	bl	8000108 <strlen>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	001a      	movs	r2, r3
 8001cac:	193b      	adds	r3, r7, r4
 8001cae:	189a      	adds	r2, r3, r2
 8001cb0:	4bce      	ldr	r3, [pc, #824]	; (8001fec <main+0x7e0>)
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	001a      	movs	r2, r3
 8001cba:	f004 fef7 	bl	8006aac <memcpy>
 8001cbe:	e0b8      	b.n	8001e32 <main+0x626>

				} else if (temperature < 10) { //mesela 0.05 derece
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b09      	cmp	r3, #9
 8001cc4:	dc2a      	bgt.n	8001d1c <main+0x510>
					strncat(buffer, "000", 3);
 8001cc6:	24dc      	movs	r4, #220	; 0xdc
 8001cc8:	193b      	adds	r3, r7, r4
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7fe fa1c 	bl	8000108 <strlen>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	189a      	adds	r2, r3, r2
 8001cd8:	4bbd      	ldr	r3, [pc, #756]	; (8001fd0 <main+0x7c4>)
 8001cda:	0010      	movs	r0, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	2304      	movs	r3, #4
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	f004 fee3 	bl	8006aac <memcpy>
					sprintf(buffer4, "%d", temperature);
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	49ba      	ldr	r1, [pc, #744]	; (8001fd4 <main+0x7c8>)
 8001cea:	2528      	movs	r5, #40	; 0x28
 8001cec:	197b      	adds	r3, r7, r5
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f004 feee 	bl	8006ad0 <siprintf>
					strncat(buffer, buffer4, 2);
 8001cf4:	1979      	adds	r1, r7, r5
 8001cf6:	193b      	adds	r3, r7, r4
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f004 ff08 	bl	8006b10 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001d00:	193a      	adds	r2, r7, r4
 8001d02:	49b9      	ldr	r1, [pc, #740]	; (8001fe8 <main+0x7dc>)
 8001d04:	4bb5      	ldr	r3, [pc, #724]	; (8001fdc <main+0x7d0>)
 8001d06:	0018      	movs	r0, r3
 8001d08:	f004 fee2 	bl	8006ad0 <siprintf>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4bb3      	ldr	r3, [pc, #716]	; (8001fe0 <main+0x7d4>)
 8001d12:	49b2      	ldr	r1, [pc, #712]	; (8001fdc <main+0x7d0>)
 8001d14:	48b3      	ldr	r0, [pc, #716]	; (8001fe4 <main+0x7d8>)
 8001d16:	f004 f9d5 	bl	80060c4 <HAL_UART_Transmit>
 8001d1a:	e08a      	b.n	8001e32 <main+0x626>
				} else if (temperature < 100) { //mesela 0.85 derece lcd hata
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b63      	cmp	r3, #99	; 0x63
 8001d20:	dc37      	bgt.n	8001d92 <main+0x586>
					strncat(buffer, "00", 2);
 8001d22:	24dc      	movs	r4, #220	; 0xdc
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7fe f9ee 	bl	8000108 <strlen>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	001a      	movs	r2, r3
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	189a      	adds	r2, r3, r2
 8001d34:	4bae      	ldr	r3, [pc, #696]	; (8001ff0 <main+0x7e4>)
 8001d36:	0010      	movs	r0, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	f004 feb5 	bl	8006aac <memcpy>
					sprintf(buffer4, "%d", temperature);
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	49a3      	ldr	r1, [pc, #652]	; (8001fd4 <main+0x7c8>)
 8001d46:	2528      	movs	r5, #40	; 0x28
 8001d48:	197b      	adds	r3, r7, r5
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f004 fec0 	bl	8006ad0 <siprintf>
					printf("0'la 1 arasında\r\n");
 8001d50:	4aa8      	ldr	r2, [pc, #672]	; (8001ff4 <main+0x7e8>)
 8001d52:	4ba2      	ldr	r3, [pc, #648]	; (8001fdc <main+0x7d0>)
 8001d54:	0011      	movs	r1, r2
 8001d56:	0018      	movs	r0, r3
 8001d58:	f004 feba 	bl	8006ad0 <siprintf>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b9f      	ldr	r3, [pc, #636]	; (8001fe0 <main+0x7d4>)
 8001d62:	499e      	ldr	r1, [pc, #632]	; (8001fdc <main+0x7d0>)
 8001d64:	489f      	ldr	r0, [pc, #636]	; (8001fe4 <main+0x7d8>)
 8001d66:	f004 f9ad 	bl	80060c4 <HAL_UART_Transmit>

					strncat(buffer, buffer4, 2);
 8001d6a:	1979      	adds	r1, r7, r5
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	2202      	movs	r2, #2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f004 fecd 	bl	8006b10 <strncat>
					printf("buffer: %s\r\n", buffer);
 8001d76:	193a      	adds	r2, r7, r4
 8001d78:	499b      	ldr	r1, [pc, #620]	; (8001fe8 <main+0x7dc>)
 8001d7a:	4b98      	ldr	r3, [pc, #608]	; (8001fdc <main+0x7d0>)
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f004 fea7 	bl	8006ad0 <siprintf>
 8001d82:	0003      	movs	r3, r0
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <main+0x7d4>)
 8001d88:	4994      	ldr	r1, [pc, #592]	; (8001fdc <main+0x7d0>)
 8001d8a:	4896      	ldr	r0, [pc, #600]	; (8001fe4 <main+0x7d8>)
 8001d8c:	f004 f99a 	bl	80060c4 <HAL_UART_Transmit>
 8001d90:	e04f      	b.n	8001e32 <main+0x626>
				} else if (temperature < 1000) { //mesela 2.85 derece
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	23fa      	movs	r3, #250	; 0xfa
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	da37      	bge.n	8001e0c <main+0x600>
					strncat(buffer, "0", 1);
 8001d9c:	24dc      	movs	r4, #220	; 0xdc
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7fe f9b1 	bl	8000108 <strlen>
 8001da6:	0003      	movs	r3, r0
 8001da8:	001a      	movs	r2, r3
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	189a      	adds	r2, r3, r2
 8001dae:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <main+0x7ec>)
 8001db0:	0010      	movs	r0, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	2302      	movs	r3, #2
 8001db6:	001a      	movs	r2, r3
 8001db8:	f004 fe78 	bl	8006aac <memcpy>

					printf("1 ile 10 arasinda\r\n");
 8001dbc:	4a8f      	ldr	r2, [pc, #572]	; (8001ffc <main+0x7f0>)
 8001dbe:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <main+0x7d0>)
 8001dc0:	0011      	movs	r1, r2
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f004 fe84 	bl	8006ad0 <siprintf>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <main+0x7d4>)
 8001dce:	4983      	ldr	r1, [pc, #524]	; (8001fdc <main+0x7d0>)
 8001dd0:	4884      	ldr	r0, [pc, #528]	; (8001fe4 <main+0x7d8>)
 8001dd2:	f004 f977 	bl	80060c4 <HAL_UART_Transmit>
					sprintf(buffer4, "%d", temperature);
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	497e      	ldr	r1, [pc, #504]	; (8001fd4 <main+0x7c8>)
 8001dda:	2528      	movs	r5, #40	; 0x28
 8001ddc:	197b      	adds	r3, r7, r5
 8001dde:	0018      	movs	r0, r3
 8001de0:	f004 fe76 	bl	8006ad0 <siprintf>
					strncat(buffer, buffer4, 3);
 8001de4:	1979      	adds	r1, r7, r5
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	2203      	movs	r2, #3
 8001dea:	0018      	movs	r0, r3
 8001dec:	f004 fe90 	bl	8006b10 <strncat>
					printf("buffer4: %s\r\n", buffer);
 8001df0:	193a      	adds	r2, r7, r4
 8001df2:	4983      	ldr	r1, [pc, #524]	; (8002000 <main+0x7f4>)
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <main+0x7d0>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f004 fe6a 	bl	8006ad0 <siprintf>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b77      	ldr	r3, [pc, #476]	; (8001fe0 <main+0x7d4>)
 8001e02:	4976      	ldr	r1, [pc, #472]	; (8001fdc <main+0x7d0>)
 8001e04:	4877      	ldr	r0, [pc, #476]	; (8001fe4 <main+0x7d8>)
 8001e06:	f004 f95d 	bl	80060c4 <HAL_UART_Transmit>
 8001e0a:	e012      	b.n	8001e32 <main+0x626>

				} else if (temperature >= 1000) { //mesela 22.85 derece
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	23fa      	movs	r3, #250	; 0xfa
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	429a      	cmp	r2, r3
 8001e14:	db0d      	blt.n	8001e32 <main+0x626>
					sprintf(buffer4, "%d", temperature); //Temperature/100 demedik çünkü ilk 4 bitini de alıcıya göndermek istiyoruz.100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	496e      	ldr	r1, [pc, #440]	; (8001fd4 <main+0x7c8>)
 8001e1a:	2428      	movs	r4, #40	; 0x28
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f004 fe56 	bl	8006ad0 <siprintf>
					strncat(buffer, buffer4, 4);
 8001e24:	1939      	adds	r1, r7, r4
 8001e26:	23dc      	movs	r3, #220	; 0xdc
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f004 fe6f 	bl	8006b10 <strncat>
				}

				//  printf("measured temperature: %0.2f degreeCelsius","measured humidity: %0.2f percentRH\n",temperature / 1000.0f, humidity / 1000.0f);

				sprintf(buffer2, "%d", humidity);
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4967      	ldr	r1, [pc, #412]	; (8001fd4 <main+0x7c8>)
 8001e36:	24a8      	movs	r4, #168	; 0xa8
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f004 fe48 	bl	8006ad0 <siprintf>

				strncat(buffer, buffer2, 4); //sondaki sayı eklenecek karakter sayısı
 8001e40:	1939      	adds	r1, r7, r4
 8001e42:	24dc      	movs	r4, #220	; 0xdc
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	2204      	movs	r2, #4
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f004 fe61 	bl	8006b10 <strncat>
				 HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
				 HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
				 }*/

				//Buffer'a pil durumunu ekliyoruz
				int vddint = (int) VDD;
 8001e4e:	238c      	movs	r3, #140	; 0x8c
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	f7fe fe19 	bl	8000a8c <__aeabi_f2iz>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	228a      	movs	r2, #138	; 0x8a
 8001e5e:	0052      	lsls	r2, r2, #1
 8001e60:	18b9      	adds	r1, r7, r2
 8001e62:	600b      	str	r3, [r1, #0]
				sprintf(buffer3, "%d", vddint);
 8001e64:	18bb      	adds	r3, r7, r2
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	495a      	ldr	r1, [pc, #360]	; (8001fd4 <main+0x7c8>)
 8001e6a:	2544      	movs	r5, #68	; 0x44
 8001e6c:	197b      	adds	r3, r7, r5
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f004 fe2e 	bl	8006ad0 <siprintf>
					strncat(buffer, buffer3, 4); //sondaki sayı eklenecek karakter sayısı
 8001e74:	1979      	adds	r1, r7, r5
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	2204      	movs	r2, #4
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f004 fe48 	bl	8006b10 <strncat>
				//Buffer'a sıcaklığın - mi + mı durumunu ekliyoruz

				//strncat(buffer, "s", 1);

				//Buffer'a seri numarasını ekliyoruz
				strncat(buffer, "A0000000006B", 12); //seri numarası 10 haneli A ve B arasında
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7fe f940 	bl	8000108 <strlen>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	189a      	adds	r2, r3, r2
 8001e90:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <main+0x7f8>)
 8001e92:	0010      	movs	r0, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	230d      	movs	r3, #13
 8001e98:	001a      	movs	r2, r3
 8001e9a:	f004 fe07 	bl	8006aac <memcpy>
				//   strncat(buffer,"Asil3000000B", 12);
				//  strncat(buffer,"Asil4000000B", 12);
				//  strncat(buffer,"Asil5000000B", 12);
				// strncat(buffer,"Asil6000000B", 12);

				printf("buffer toplam: %s\r\n", buffer);
 8001e9e:	193a      	adds	r2, r7, r4
 8001ea0:	4959      	ldr	r1, [pc, #356]	; (8002008 <main+0x7fc>)
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <main+0x7d0>)
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f004 fe13 	bl	8006ad0 <siprintf>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <main+0x7d4>)
 8001eb0:	494a      	ldr	r1, [pc, #296]	; (8001fdc <main+0x7d0>)
 8001eb2:	484c      	ldr	r0, [pc, #304]	; (8001fe4 <main+0x7d8>)
 8001eb4:	f004 f906 	bl	80060c4 <HAL_UART_Transmit>
				 else HAL_UART_Transmit( &hlpuart1, (uint8_t *)"degısmedi\r\n",11, 100);
				 strcpy(bufferkontrol,buffer);
				 */

				//Bufferı gönderiyioruz sonrasında CMT2119 B transmitterı uykuya sokuyoruz
				bSendMessage(buffer, strlen(buffer));
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7fe f924 	bl	8000108 <strlen>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	193b      	adds	r3, r7, r4
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fc1c 	bl	8001706 <bSendMessage>
				while (GPO3_L());
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	23a0      	movs	r3, #160	; 0xa0
 8001ed6:	05db      	lsls	r3, r3, #23
 8001ed8:	0011      	movs	r1, r2
 8001eda:	0018      	movs	r0, r3
 8001edc:	f002 f97c 	bl	80041d8 <HAL_GPIO_ReadPin>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d0f5      	beq.n	8001ed0 <main+0x6c4>
				bIntSrcFlagClr();
 8001ee4:	f7ff fb6c 	bl	80015c0 <bIntSrcFlagClr>
				vClearFIFO();
 8001ee8:	f7ff fb82 	bl	80015f0 <vClearFIFO>
				bGoSleep();
 8001eec:	f7ff fa52 	bl	8001394 <bGoSleep>
				printf("gonderildi\r\n");
 8001ef0:	4a46      	ldr	r2, [pc, #280]	; (800200c <main+0x800>)
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <main+0x7d0>)
 8001ef4:	0011      	movs	r1, r2
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f004 fdea 	bl	8006ad0 <siprintf>
 8001efc:	0003      	movs	r3, r0
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <main+0x7d4>)
 8001f02:	4936      	ldr	r1, [pc, #216]	; (8001fdc <main+0x7d0>)
 8001f04:	4837      	ldr	r0, [pc, #220]	; (8001fe4 <main+0x7d8>)
 8001f06:	f004 f8dd 	bl	80060c4 <HAL_UART_Transmit>
			if (-4000 <= temperature && temperature <= 9999 && 0 <= humidity && humidity <= 9999) {
 8001f0a:	e01a      	b.n	8001f42 <main+0x736>
				// HAL_Delay(4000);

			} else {
				//Eger sensorden yanlis veri gelirse veya sensor bozulursa aliciya hatali mesajini gönderir
				printf("gonderilmedi\r\n");
 8001f0c:	4a40      	ldr	r2, [pc, #256]	; (8002010 <main+0x804>)
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <main+0x7d0>)
 8001f10:	0011      	movs	r1, r2
 8001f12:	0018      	movs	r0, r3
 8001f14:	f004 fddc 	bl	8006ad0 <siprintf>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <main+0x7d4>)
 8001f1e:	492f      	ldr	r1, [pc, #188]	; (8001fdc <main+0x7d0>)
 8001f20:	4830      	ldr	r0, [pc, #192]	; (8001fe4 <main+0x7d8>)
 8001f22:	f004 f8cf 	bl	80060c4 <HAL_UART_Transmit>
 8001f26:	e00c      	b.n	8001f42 <main+0x736>

			}

		} else {
			//Eger sensorden yanlis veri gelirse veya sensor bozulursa aliciya hatali mesajini gönderir
			printf("gonderilmedi\r\n");
 8001f28:	4a39      	ldr	r2, [pc, #228]	; (8002010 <main+0x804>)
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <main+0x7d0>)
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f004 fdce 	bl	8006ad0 <siprintf>
 8001f34:	0003      	movs	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <main+0x7d4>)
 8001f3a:	4928      	ldr	r1, [pc, #160]	; (8001fdc <main+0x7d0>)
 8001f3c:	4829      	ldr	r0, [pc, #164]	; (8001fe4 <main+0x7d8>)
 8001f3e:	f004 f8c1 	bl	80060c4 <HAL_UART_Transmit>
			vClearFIFO();
			bGoSleep();*/

		}

		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	0018      	movs	r0, r3
 8001f48:	f002 fef6 	bl	8004d38 <HAL_PWR_DisableWakeUpPin>
		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001f4c:	4b31      	ldr	r3, [pc, #196]	; (8002014 <main+0x808>)
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f003 ff96 	bl	8005e80 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <main+0x80c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <main+0x80c>)
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <main+0x808>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <main+0x808>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	492b      	ldr	r1, [pc, #172]	; (800201c <main+0x810>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]
	printf("About to enter the STANDBY MODE\r\n");
 8001f74:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <main+0x814>)
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <main+0x7d0>)
 8001f78:	0011      	movs	r1, r2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f004 fda8 	bl	8006ad0 <siprintf>
 8001f80:	0003      	movs	r3, r0
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <main+0x7d4>)
 8001f86:	4915      	ldr	r1, [pc, #84]	; (8001fdc <main+0x7d0>)
 8001f88:	4816      	ldr	r0, [pc, #88]	; (8001fe4 <main+0x7d8>)
 8001f8a:	f004 f89b 	bl	80060c4 <HAL_UART_Transmit>

	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	0018      	movs	r0, r3
 8001f94:	f002 fec0 	bl	8004d18 <HAL_PWR_EnableWakeUpPin>
	//if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x90A, RTC_WAKEUPCLOCK_RTCCLK_DIV16) //1 saniye
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A55, RTC_WAKEUPCLOCK_RTCCLK_DIV16) //10 saniye
 8001f98:	4922      	ldr	r1, [pc, #136]	; (8002024 <main+0x818>)
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <main+0x808>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f003 fea8 	bl	8005cf4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d001      	beq.n	8001fac <main+0x7a0>
			!= HAL_OK) {
		Error_Handler();
 8001fa8:	f000 faa2 	bl	80024f0 <Error_Handler>
	}
	printf("STANDBY MODE is ON\r\n");
 8001fac:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <main+0x81c>)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <main+0x7d0>)
 8001fb0:	0011      	movs	r1, r2
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f004 fd8c 	bl	8006ad0 <siprintf>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <main+0x7d4>)
 8001fbe:	4907      	ldr	r1, [pc, #28]	; (8001fdc <main+0x7d0>)
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <main+0x7d8>)
 8001fc2:	f004 f87f 	bl	80060c4 <HAL_UART_Transmit>
	GPIO_ALL_DisEnable(); //Güç harcamaması için bütün çevre birimlerini kapatıyoruz
 8001fc6:	f000 fa2f 	bl	8002428 <GPIO_ALL_DisEnable>

	HAL_PWR_EnterSTANDBYMode(); //uyku moduna alıyoruz
 8001fca:	f002 fec7 	bl	8004d5c <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001fce:	e7fe      	b.n	8001fce <main+0x7c2>
 8001fd0:	080073d8 	.word	0x080073d8
 8001fd4:	08007380 	.word	0x08007380
 8001fd8:	080073b4 	.word	0x080073b4
 8001fdc:	20000344 	.word	0x20000344
 8001fe0:	0000ffff 	.word	0x0000ffff
 8001fe4:	20000268 	.word	0x20000268
 8001fe8:	080073c8 	.word	0x080073c8
 8001fec:	080073dc 	.word	0x080073dc
 8001ff0:	080073b0 	.word	0x080073b0
 8001ff4:	080073e4 	.word	0x080073e4
 8001ff8:	08007384 	.word	0x08007384
 8001ffc:	080073f8 	.word	0x080073f8
 8002000:	080073a0 	.word	0x080073a0
 8002004:	0800740c 	.word	0x0800740c
 8002008:	0800741c 	.word	0x0800741c
 800200c:	08007430 	.word	0x08007430
 8002010:	08007440 	.word	0x08007440
 8002014:	20000444 	.word	0x20000444
 8002018:	40007000 	.word	0x40007000
 800201c:	fffffb7f 	.word	0xfffffb7f
 8002020:	08007450 	.word	0x08007450
 8002024:	00005a55 	.word	0x00005a55
 8002028:	08007474 	.word	0x08007474

0800202c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b099      	sub	sp, #100	; 0x64
 8002030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002032:	242c      	movs	r4, #44	; 0x2c
 8002034:	193b      	adds	r3, r7, r4
 8002036:	0018      	movs	r0, r3
 8002038:	2334      	movs	r3, #52	; 0x34
 800203a:	001a      	movs	r2, r3
 800203c:	2100      	movs	r1, #0
 800203e:	f004 fd3e 	bl	8006abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002042:	2318      	movs	r3, #24
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	0018      	movs	r0, r3
 8002048:	2314      	movs	r3, #20
 800204a:	001a      	movs	r2, r3
 800204c:	2100      	movs	r1, #0
 800204e:	f004 fd36 	bl	8006abe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002052:	003b      	movs	r3, r7
 8002054:	0018      	movs	r0, r3
 8002056:	2318      	movs	r3, #24
 8002058:	001a      	movs	r2, r3
 800205a:	2100      	movs	r1, #0
 800205c:	f004 fd2f 	bl	8006abe <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <SystemClock_Config+0xe4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2b      	ldr	r2, [pc, #172]	; (8002114 <SystemClock_Config+0xe8>)
 8002066:	401a      	ands	r2, r3
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <SystemClock_Config+0xe4>)
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	0109      	lsls	r1, r1, #4
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002072:	0021      	movs	r1, r4
 8002074:	187b      	adds	r3, r7, r1
 8002076:	2218      	movs	r2, #24
 8002078:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800207a:	187b      	adds	r3, r7, r1
 800207c:	2201      	movs	r2, #1
 800207e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002080:	187b      	adds	r3, r7, r1
 8002082:	2201      	movs	r2, #1
 8002084:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002086:	187b      	adds	r3, r7, r1
 8002088:	2200      	movs	r2, #0
 800208a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800208c:	187b      	adds	r3, r7, r1
 800208e:	22a0      	movs	r2, #160	; 0xa0
 8002090:	0212      	lsls	r2, r2, #8
 8002092:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800209a:	187b      	adds	r3, r7, r1
 800209c:	0018      	movs	r0, r3
 800209e:	f002 fe73 	bl	8004d88 <HAL_RCC_OscConfig>
 80020a2:	1e03      	subs	r3, r0, #0
 80020a4:	d001      	beq.n	80020aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80020a6:	f000 fa23 	bl	80024f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020aa:	2118      	movs	r1, #24
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	220f      	movs	r2, #15
 80020b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	2100      	movs	r1, #0
 80020ce:	0018      	movs	r0, r3
 80020d0:	f003 f9d6 	bl	8005480 <HAL_RCC_ClockConfig>
 80020d4:	1e03      	subs	r3, r0, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80020d8:	f000 fa0a 	bl	80024f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 80020dc:	003b      	movs	r3, r7
 80020de:	222c      	movs	r2, #44	; 0x2c
 80020e0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020e2:	003b      	movs	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020e8:	003b      	movs	r3, r7
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020ee:	003b      	movs	r3, r7
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	0292      	lsls	r2, r2, #10
 80020f4:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f6:	003b      	movs	r3, r7
 80020f8:	0018      	movs	r0, r3
 80020fa:	f003 fbe5 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d001      	beq.n	8002106 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002102:	f000 f9f5 	bl	80024f0 <Error_Handler>
  }
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b019      	add	sp, #100	; 0x64
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	40007000 	.word	0x40007000
 8002114:	ffffe7ff 	.word	0xffffe7ff

08002118 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800211e:	003b      	movs	r3, r7
 8002120:	0018      	movs	r0, r3
 8002122:	2308      	movs	r3, #8
 8002124:	001a      	movs	r2, r3
 8002126:	2100      	movs	r1, #0
 8002128:	f004 fcc9 	bl	8006abe <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <MX_ADC_Init+0xc0>)
 800212e:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <MX_ADC_Init+0xc4>)
 8002130:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002134:	2200      	movs	r2, #0
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <MX_ADC_Init+0xc0>)
 800213a:	22c0      	movs	r2, #192	; 0xc0
 800213c:	0612      	lsls	r2, r2, #24
 800213e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002148:	2200      	movs	r2, #0
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_ADC_Init+0xc0>)
 800214e:	2201      	movs	r2, #1
 8002150:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002154:	2200      	movs	r2, #0
 8002156:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_ADC_Init+0xc0>)
 800215a:	2220      	movs	r2, #32
 800215c:	2100      	movs	r1, #0
 800215e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002162:	2221      	movs	r2, #33	; 0x21
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_ADC_Init+0xc0>)
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002170:	22c2      	movs	r2, #194	; 0xc2
 8002172:	32ff      	adds	r2, #255	; 0xff
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002178:	222c      	movs	r2, #44	; 0x2c
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002180:	2204      	movs	r2, #4
 8002182:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <MX_ADC_Init+0xc0>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002192:	2201      	movs	r2, #1
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_ADC_Init+0xc0>)
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_ADC_Init+0xc0>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 ff6e 	bl	8003080 <HAL_ADC_Init>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d001      	beq.n	80021ac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80021a8:	f000 f9a2 	bl	80024f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80021ac:	003b      	movs	r3, r7
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <MX_ADC_Init+0xc8>)
 80021b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021b2:	003b      	movs	r3, r7
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0152      	lsls	r2, r2, #5
 80021b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021ba:	003a      	movs	r2, r7
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_ADC_Init+0xc0>)
 80021be:	0011      	movs	r1, r2
 80021c0:	0018      	movs	r0, r3
 80021c2:	f001 faa9 	bl	8003718 <HAL_ADC_ConfigChannel>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80021ca:	f000 f991 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b002      	add	sp, #8
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	20000468 	.word	0x20000468
 80021dc:	40012400 	.word	0x40012400
 80021e0:	44020000 	.word	0x44020000

080021e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <MX_I2C1_Init+0x78>)
 80021ea:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <MX_I2C1_Init+0x7c>)
 80021ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <MX_I2C1_Init+0x78>)
 80021f0:	22e1      	movs	r2, #225	; 0xe1
 80021f2:	00d2      	lsls	r2, r2, #3
 80021f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <MX_I2C1_Init+0x78>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <MX_I2C1_Init+0x78>)
 80021fe:	2201      	movs	r2, #1
 8002200:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_I2C1_Init+0x78>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_I2C1_Init+0x78>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <MX_I2C1_Init+0x78>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_I2C1_Init+0x78>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <MX_I2C1_Init+0x78>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_I2C1_Init+0x78>)
 8002222:	0018      	movs	r0, r3
 8002224:	f002 f812 	bl	800424c <HAL_I2C_Init>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d001      	beq.n	8002230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800222c:	f000 f960 	bl	80024f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <MX_I2C1_Init+0x78>)
 8002232:	2100      	movs	r1, #0
 8002234:	0018      	movs	r0, r3
 8002236:	f002 fcd7 	bl	8004be8 <HAL_I2CEx_ConfigAnalogFilter>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800223e:	f000 f957 	bl	80024f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_I2C1_Init+0x78>)
 8002244:	2100      	movs	r1, #0
 8002246:	0018      	movs	r0, r3
 8002248:	f002 fd1a 	bl	8004c80 <HAL_I2CEx_ConfigDigitalFilter>
 800224c:	1e03      	subs	r3, r0, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002250:	f000 f94e 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	200002f8 	.word	0x200002f8
 8002260:	40005400 	.word	0x40005400

08002264 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <MX_LPUART1_UART_Init+0x58>)
 800226c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 8002270:	22e1      	movs	r2, #225	; 0xe1
 8002272:	0252      	lsls	r2, r2, #9
 8002274:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 80022a2:	0018      	movs	r0, r3
 80022a4:	f003 fe80 	bl	8005fa8 <HAL_UART_Init>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d001      	beq.n	80022b0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80022ac:	f000 f920 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	20000268 	.word	0x20000268
 80022bc:	40004800 	.word	0x40004800

080022c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <MX_RTC_Init+0x60>)
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <MX_RTC_Init+0x64>)
 80022c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <MX_RTC_Init+0x60>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <MX_RTC_Init+0x60>)
 80022d2:	227c      	movs	r2, #124	; 0x7c
 80022d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 295;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <MX_RTC_Init+0x60>)
 80022d8:	2228      	movs	r2, #40	; 0x28
 80022da:	32ff      	adds	r2, #255	; 0xff
 80022dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <MX_RTC_Init+0x60>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MX_RTC_Init+0x60>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <MX_RTC_Init+0x60>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <MX_RTC_Init+0x60>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <MX_RTC_Init+0x60>)
 80022f8:	0018      	movs	r0, r3
 80022fa:	f003 fc0b 	bl	8005b14 <HAL_RTC_Init>
 80022fe:	1e03      	subs	r3, r0, #0
 8002300:	d001      	beq.n	8002306 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002302:	f000 f8f5 	bl	80024f0 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_RTC_Init+0x60>)
 8002308:	2200      	movs	r2, #0
 800230a:	210a      	movs	r1, #10
 800230c:	0018      	movs	r0, r3
 800230e:	f003 fcf1 	bl	8005cf4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002316:	f000 f8eb 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000444 	.word	0x20000444
 8002324:	40002800 	.word	0x40002800

08002328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232e:	240c      	movs	r4, #12
 8002330:	193b      	adds	r3, r7, r4
 8002332:	0018      	movs	r0, r3
 8002334:	2314      	movs	r3, #20
 8002336:	001a      	movs	r2, r3
 8002338:	2100      	movs	r1, #0
 800233a:	f004 fbc0 	bl	8006abe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <MX_GPIO_Init+0xf0>)
 8002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <MX_GPIO_Init+0xf0>)
 8002344:	2104      	movs	r1, #4
 8002346:	430a      	orrs	r2, r1
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <MX_GPIO_Init+0xf0>)
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	2204      	movs	r2, #4
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <MX_GPIO_Init+0xf0>)
 8002358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235a:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <MX_GPIO_Init+0xf0>)
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
 8002362:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <MX_GPIO_Init+0xf0>)
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	2201      	movs	r2, #1
 8002368:	4013      	ands	r3, r2
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <MX_GPIO_Init+0xf0>)
 8002370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <MX_GPIO_Init+0xf0>)
 8002374:	2102      	movs	r1, #2
 8002376:	430a      	orrs	r2, r1
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
 800237a:	4b27      	ldr	r3, [pc, #156]	; (8002418 <MX_GPIO_Init+0xf0>)
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	4824      	ldr	r0, [pc, #144]	; (800241c <MX_GPIO_Init+0xf4>)
 800238c:	2200      	movs	r2, #0
 800238e:	0019      	movs	r1, r3
 8002390:	f001 ff3f 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin, GPIO_PIN_RESET);
 8002394:	4922      	ldr	r1, [pc, #136]	; (8002420 <MX_GPIO_Init+0xf8>)
 8002396:	23a0      	movs	r3, #160	; 0xa0
 8002398:	05db      	lsls	r3, r3, #23
 800239a:	2200      	movs	r2, #0
 800239c:	0018      	movs	r0, r3
 800239e:	f001 ff38 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023a2:	193b      	adds	r3, r7, r4
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	0192      	lsls	r2, r2, #6
 80023a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	193b      	adds	r3, r7, r4
 80023ac:	2201      	movs	r2, #1
 80023ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	193b      	adds	r3, r7, r4
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	4a17      	ldr	r2, [pc, #92]	; (800241c <MX_GPIO_Init+0xf4>)
 80023c0:	0019      	movs	r1, r3
 80023c2:	0010      	movs	r0, r2
 80023c4:	f001 fcc8 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin;
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	4a15      	ldr	r2, [pc, #84]	; (8002420 <MX_GPIO_Init+0xf8>)
 80023cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	2201      	movs	r2, #1
 80023d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	193a      	adds	r2, r7, r4
 80023e2:	23a0      	movs	r3, #160	; 0xa0
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f001 fcb5 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin GPO3_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GPO3_Pin;
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <MX_GPIO_Init+0xfc>)
 80023f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	193a      	adds	r2, r7, r4
 8002402:	23a0      	movs	r3, #160	; 0xa0
 8002404:	05db      	lsls	r3, r3, #23
 8002406:	0011      	movs	r1, r2
 8002408:	0018      	movs	r0, r3
 800240a:	f001 fca5 	bl	8003d58 <HAL_GPIO_Init>

}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b009      	add	sp, #36	; 0x24
 8002414:	bd90      	pop	{r4, r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	40021000 	.word	0x40021000
 800241c:	50000800 	.word	0x50000800
 8002420:	00000606 	.word	0x00000606
 8002424:	00001010 	.word	0x00001010

08002428 <GPIO_ALL_DisEnable>:

/* USER CODE BEGIN 4 */
void GPIO_ALL_DisEnable(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	 HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
	 */
	__HAL_RCC_GPIOA_CLK_DISABLE();
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 800242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 800243e:	2102      	movs	r1, #2
 8002440:	438a      	bics	r2, r1
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 800244a:	2104      	movs	r1, #4
 800244c:	438a      	bics	r2, r1
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <GPIO_ALL_DisEnable+0xb4>)
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	438a      	bics	r2, r1
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	019b      	lsls	r3, r3, #6
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <GPIO_ALL_DisEnable+0xb8>)
 8002462:	0019      	movs	r1, r3
 8002464:	0010      	movs	r0, r2
 8002466:	f001 fde5 	bl	8004034 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, SDIO_Pin);
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	00da      	lsls	r2, r3, #3
 800246e:	23a0      	movs	r3, #160	; 0xa0
 8002470:	05db      	lsls	r3, r3, #23
 8002472:	0011      	movs	r1, r2
 8002474:	0018      	movs	r0, r3
 8002476:	f001 fddd 	bl	8004034 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPO3_Pin);
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	23a0      	movs	r3, #160	; 0xa0
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f001 fdd5 	bl	8004034 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, BUZZER_Pin);
 800248a:	23a0      	movs	r3, #160	; 0xa0
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	2110      	movs	r1, #16
 8002490:	0018      	movs	r0, r3
 8002492:	f001 fdcf 	bl	8004034 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, CSB_Pin);
 8002496:	23a0      	movs	r3, #160	; 0xa0
 8002498:	05db      	lsls	r3, r3, #23
 800249a:	2102      	movs	r1, #2
 800249c:	0018      	movs	r0, r3
 800249e:	f001 fdc9 	bl	8004034 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, FCSB_Pin);
 80024a2:	23a0      	movs	r3, #160	; 0xa0
 80024a4:	05db      	lsls	r3, r3, #23
 80024a6:	2104      	movs	r1, #4
 80024a8:	0018      	movs	r0, r3
 80024aa:	f001 fdc3 	bl	8004034 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, SCLK_Pin);
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	009a      	lsls	r2, r3, #2
 80024b2:	23a0      	movs	r3, #160	; 0xa0
 80024b4:	05db      	lsls	r3, r3, #23
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f001 fdbb 	bl	8004034 <HAL_GPIO_DeInit>
	//HAL_RTC_DeInit(&hrtc);
	HAL_UART_DeInit(&hlpuart1);
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <GPIO_ALL_DisEnable+0xbc>)
 80024c0:	0018      	movs	r0, r3
 80024c2:	f003 fdc5 	bl	8006050 <HAL_UART_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <GPIO_ALL_DisEnable+0xc0>)
 80024c8:	0018      	movs	r0, r3
 80024ca:	f001 ff55 	bl	8004378 <HAL_I2C_DeInit>
	HAL_ADC_DeInit(&hadc);
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <GPIO_ALL_DisEnable+0xc4>)
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 ff49 	bl	8003368 <HAL_ADC_DeInit>
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	50000800 	.word	0x50000800
 80024e4:	20000268 	.word	0x20000268
 80024e8:	200002f8 	.word	0x200002f8
 80024ec:	20000468 	.word	0x20000468

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024f8:	e7fe      	b.n	80024f8 <Error_Handler+0x8>

080024fa <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	000a      	movs	r2, r1
 8002504:	1cbb      	adds	r3, r7, #2
 8002506:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8002508:	230d      	movs	r3, #13
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8002510:	230e      	movs	r3, #14
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	e037      	b.n	800258a <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800251a:	230e      	movs	r3, #14
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	18d3      	adds	r3, r2, r3
 8002524:	7819      	ldrb	r1, [r3, #0]
 8002526:	220d      	movs	r2, #13
 8002528:	18bb      	adds	r3, r7, r2
 800252a:	18ba      	adds	r2, r7, r2
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	404a      	eors	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002532:	230c      	movs	r3, #12
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2208      	movs	r2, #8
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e01b      	b.n	8002574 <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 800253c:	210d      	movs	r1, #13
 800253e:	187b      	adds	r3, r7, r1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b25b      	sxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	da09      	bge.n	800255c <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8002548:	187b      	adds	r3, r7, r1
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	b25b      	sxtb	r3, r3
 8002550:	2231      	movs	r2, #49	; 0x31
 8002552:	4053      	eors	r3, r2
 8002554:	b25a      	sxtb	r2, r3
 8002556:	187b      	adds	r3, r7, r1
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e005      	b.n	8002568 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800255c:	230d      	movs	r3, #13
 800255e:	18fa      	adds	r2, r7, r3
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	18db      	adds	r3, r3, r3
 8002566:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002568:	220c      	movs	r2, #12
 800256a:	18bb      	adds	r3, r7, r2
 800256c:	18ba      	adds	r2, r7, r2
 800256e:	7812      	ldrb	r2, [r2, #0]
 8002570:	3a01      	subs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	230c      	movs	r3, #12
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1de      	bne.n	800253c <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800257e:	220e      	movs	r2, #14
 8002580:	18bb      	adds	r3, r7, r2
 8002582:	18ba      	adds	r2, r7, r2
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	3201      	adds	r2, #1
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	230e      	movs	r3, #14
 800258c:	18fa      	adds	r2, r7, r3
 800258e:	1cbb      	adds	r3, r7, #2
 8002590:	8812      	ldrh	r2, [r2, #0]
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3c0      	bcc.n	800251a <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8002598:	230d      	movs	r3, #13
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	0008      	movs	r0, r1
 80025b0:	0011      	movs	r1, r2
 80025b2:	1cbb      	adds	r3, r7, #2
 80025b4:	1c02      	adds	r2, r0, #0
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	1c7b      	adds	r3, r7, #1
 80025ba:	1c0a      	adds	r2, r1, #0
 80025bc:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80025be:	1cbb      	adds	r3, r7, #2
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0011      	movs	r1, r2
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7ff ff97 	bl	80024fa <sensirion_common_generate_crc>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	1c7b      	adds	r3, r7, #1
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d002      	beq.n	80025de <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 80025d8:	2301      	movs	r3, #1
 80025da:	425b      	negs	r3, r3
 80025dc:	e000      	b.n	80025e0 <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	0008      	movs	r0, r1
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	0019      	movs	r1, r3
 80025f6:	250a      	movs	r5, #10
 80025f8:	197b      	adds	r3, r7, r5
 80025fa:	1c02      	adds	r2, r0, #0
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	2309      	movs	r3, #9
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	1c0a      	adds	r2, r1, #0
 8002604:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8002606:	2014      	movs	r0, #20
 8002608:	183b      	adds	r3, r7, r0
 800260a:	2200      	movs	r2, #0
 800260c:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 800260e:	197b      	adds	r3, r7, r5
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b299      	uxth	r1, r3
 8002616:	183b      	adds	r3, r7, r0
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	0004      	movs	r4, r0
 800261c:	183a      	adds	r2, r7, r0
 800261e:	1c58      	adds	r0, r3, #1
 8002620:	8010      	strh	r0, [r2, #0]
 8002622:	001a      	movs	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	189b      	adds	r3, r3, r2
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 800262c:	193b      	adds	r3, r7, r4
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	193a      	adds	r2, r7, r4
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	8011      	strh	r1, [r2, #0]
 8002636:	001a      	movs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	189b      	adds	r3, r3, r2
 800263c:	197a      	adds	r2, r7, r5
 800263e:	8812      	ldrh	r2, [r2, #0]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8002644:	2317      	movs	r3, #23
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e042      	b.n	80026d4 <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 800264e:	2617      	movs	r6, #23
 8002650:	19bb      	adds	r3, r7, r6
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	b299      	uxth	r1, r3
 8002660:	2414      	movs	r4, #20
 8002662:	193b      	adds	r3, r7, r4
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	193a      	adds	r2, r7, r4
 8002668:	1c58      	adds	r0, r3, #1
 800266a:	8010      	strh	r0, [r2, #0]
 800266c:	001a      	movs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	189b      	adds	r3, r3, r2
 8002672:	b2ca      	uxtb	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8002676:	19bb      	adds	r3, r7, r6
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	18d3      	adds	r3, r2, r3
 8002680:	8819      	ldrh	r1, [r3, #0]
 8002682:	0025      	movs	r5, r4
 8002684:	197b      	adds	r3, r7, r5
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	197a      	adds	r2, r7, r5
 800268a:	1c58      	adds	r0, r3, #1
 800268c:	8010      	strh	r0, [r2, #0]
 800268e:	001a      	movs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	189b      	adds	r3, r3, r2
 8002694:	b2ca      	uxtb	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8002698:	197b      	adds	r3, r7, r5
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	3b02      	subs	r3, #2
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	18d3      	adds	r3, r2, r3
 80026a2:	2213      	movs	r2, #19
 80026a4:	18bc      	adds	r4, r7, r2
 80026a6:	2102      	movs	r1, #2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7ff ff26 	bl	80024fa <sensirion_common_generate_crc>
 80026ae:	0003      	movs	r3, r0
 80026b0:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 80026b2:	197b      	adds	r3, r7, r5
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	197a      	adds	r2, r7, r5
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	8011      	strh	r1, [r2, #0]
 80026bc:	001a      	movs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	2213      	movs	r2, #19
 80026c4:	18ba      	adds	r2, r7, r2
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 80026ca:	19bb      	adds	r3, r7, r6
 80026cc:	19ba      	adds	r2, r7, r6
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	3201      	adds	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	2317      	movs	r3, #23
 80026d6:	18fa      	adds	r2, r7, r3
 80026d8:	2309      	movs	r3, #9
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3b4      	bcc.n	800264e <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 80026e4:	2314      	movs	r3, #20
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	881b      	ldrh	r3, [r3, #0]
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b007      	add	sp, #28
 80026f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f2 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80026f2:	b5b0      	push	{r4, r5, r7, lr}
 80026f4:	b096      	sub	sp, #88	; 0x58
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	0011      	movs	r1, r2
 80026fc:	1dfb      	adds	r3, r7, #7
 80026fe:	1c02      	adds	r2, r0, #0
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	1c0a      	adds	r2, r1, #0
 8002706:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8002708:	2052      	movs	r0, #82	; 0x52
 800270a:	1839      	adds	r1, r7, r0
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	1c1a      	adds	r2, r3, #0
 8002712:	1892      	adds	r2, r2, r2
 8002714:	18d3      	adds	r3, r2, r3
 8002716:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8002718:	2308      	movs	r3, #8
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800271e:	183b      	adds	r3, r7, r0
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002724:	1dfb      	adds	r3, r7, #7
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f901 	bl	8002930 <sensirion_i2c_read>
 800272e:	0003      	movs	r3, r0
 8002730:	001a      	movs	r2, r3
 8002732:	214a      	movs	r1, #74	; 0x4a
 8002734:	187b      	adds	r3, r7, r1
 8002736:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8002738:	000a      	movs	r2, r1
 800273a:	18bb      	adds	r3, r7, r2
 800273c:	2100      	movs	r1, #0
 800273e:	5e5b      	ldrsh	r3, [r3, r1]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 8002744:	18bb      	adds	r3, r7, r2
 8002746:	2200      	movs	r2, #0
 8002748:	5e9b      	ldrsh	r3, [r3, r2]
 800274a:	e053      	b.n	80027f4 <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800274c:	2356      	movs	r3, #86	; 0x56
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	2354      	movs	r3, #84	; 0x54
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	801a      	strh	r2, [r3, #0]
 800275c:	e041      	b.n	80027e2 <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800275e:	2156      	movs	r1, #86	; 0x56
 8002760:	187b      	adds	r3, r7, r1
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002766:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8002768:	187b      	adds	r3, r7, r1
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	3302      	adds	r3, #2
 800276e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002770:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	001a      	movs	r2, r3
 8002776:	2102      	movs	r1, #2
 8002778:	f7ff ff15 	bl	80025a6 <sensirion_common_check_crc>
 800277c:	0003      	movs	r3, r0
 800277e:	001a      	movs	r2, r3
 8002780:	214a      	movs	r1, #74	; 0x4a
 8002782:	187b      	adds	r3, r7, r1
 8002784:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 8002786:	000a      	movs	r2, r1
 8002788:	18bb      	adds	r3, r7, r2
 800278a:	2100      	movs	r1, #0
 800278c:	5e5b      	ldrsh	r3, [r3, r1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 8002792:	18bb      	adds	r3, r7, r2
 8002794:	2200      	movs	r2, #0
 8002796:	5e9b      	ldrsh	r3, [r3, r2]
 8002798:	e02c      	b.n	80027f4 <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 800279a:	2456      	movs	r4, #86	; 0x56
 800279c:	193b      	adds	r3, r7, r4
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027a2:	18d2      	adds	r2, r2, r3
 80027a4:	2554      	movs	r5, #84	; 0x54
 80027a6:	197b      	adds	r3, r7, r5
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	1979      	adds	r1, r7, r5
 80027ac:	1c58      	adds	r0, r3, #1
 80027ae:	8008      	strh	r0, [r1, #0]
 80027b0:	0019      	movs	r1, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	185b      	adds	r3, r3, r1
 80027b6:	7812      	ldrb	r2, [r2, #0]
 80027b8:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027c2:	18d2      	adds	r2, r2, r3
 80027c4:	197b      	adds	r3, r7, r5
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	1979      	adds	r1, r7, r5
 80027ca:	1c58      	adds	r0, r3, #1
 80027cc:	8008      	strh	r0, [r1, #0]
 80027ce:	0019      	movs	r1, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	185b      	adds	r3, r3, r1
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	193a      	adds	r2, r7, r4
 80027dc:	8812      	ldrh	r2, [r2, #0]
 80027de:	3203      	adds	r2, #3
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	2356      	movs	r3, #86	; 0x56
 80027e4:	18fa      	adds	r2, r7, r3
 80027e6:	2352      	movs	r3, #82	; 0x52
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d3b5      	bcc.n	800275e <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b016      	add	sp, #88	; 0x58
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}

080027fc <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6039      	str	r1, [r7, #0]
 8002804:	0011      	movs	r1, r2
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	1c02      	adds	r2, r0, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	1c0a      	adds	r2, r1, #0
 8002810:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8002812:	250c      	movs	r5, #12
 8002814:	197c      	adds	r4, r7, r5
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	881a      	ldrh	r2, [r3, #0]
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	1dfb      	adds	r3, r7, #7
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	f7ff ff66 	bl	80026f2 <sensirion_i2c_read_words_as_bytes>
 8002826:	0003      	movs	r3, r0
 8002828:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 800282a:	197b      	adds	r3, r7, r5
 800282c:	2200      	movs	r2, #0
 800282e:	5e9b      	ldrsh	r3, [r3, r2]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <sensirion_i2c_read_words+0x40>
        return ret;
 8002834:	197b      	adds	r3, r7, r5
 8002836:	2200      	movs	r2, #0
 8002838:	5e9b      	ldrsh	r3, [r3, r2]
 800283a:	e02a      	b.n	8002892 <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e01c      	b.n	8002880 <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 8002846:	200f      	movs	r0, #15
 8002848:	183b      	adds	r3, r7, r0
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	b21a      	sxth	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4313      	orrs	r3, r2
 8002866:	b219      	sxth	r1, r3
 8002868:	183b      	adds	r3, r7, r0
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	18d3      	adds	r3, r2, r3
 8002872:	b28a      	uxth	r2, r1
 8002874:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8002876:	183b      	adds	r3, r7, r0
 8002878:	183a      	adds	r2, r7, r0
 800287a:	7812      	ldrb	r2, [r2, #0]
 800287c:	3201      	adds	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	230f      	movs	r3, #15
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	1d3a      	adds	r2, r7, #4
 800288a:	8812      	ldrh	r2, [r2, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d8da      	bhi.n	8002846 <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b004      	add	sp, #16
 8002898:	bdb0      	pop	{r4, r5, r7, pc}

0800289a <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 800289a:	b590      	push	{r4, r7, lr}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	0002      	movs	r2, r0
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	1c0a      	adds	r2, r1, #0
 80028aa:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	8819      	ldrh	r1, [r3, #0]
 80028b0:	240c      	movs	r4, #12
 80028b2:	1938      	adds	r0, r7, r4
 80028b4:	2300      	movs	r3, #0
 80028b6:	2200      	movs	r2, #0
 80028b8:	f7ff fe96 	bl	80025e8 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80028bc:	1939      	adds	r1, r7, r4
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2202      	movs	r2, #2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f853 	bl	8002970 <sensirion_i2c_write>
 80028ca:	0003      	movs	r3, r0
 80028cc:	b21b      	sxth	r3, r3
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b005      	add	sp, #20
 80028d4:	bd90      	pop	{r4, r7, pc}
	...

080028d8 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <sensirion_i2c_init+0x4c>)
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <sensirion_i2c_init+0x50>)
 80028e0:	601a      	str	r2, [r3, #0]
   // hi2c1.Init.ClockSpeed = 100000;
   // hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <sensirion_i2c_init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <sensirion_i2c_init+0x4c>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <sensirion_i2c_init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <sensirion_i2c_init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <sensirion_i2c_init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <sensirion_i2c_init+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <sensirion_i2c_init+0x54>)
 8002908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <sensirion_i2c_init+0x54>)
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	0389      	lsls	r1, r1, #14
 8002910:	430a      	orrs	r2, r1
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <sensirion_i2c_init+0x4c>)
 8002916:	0018      	movs	r0, r3
 8002918:	f001 fc98 	bl	800424c <HAL_I2C_Init>
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000210 	.word	0x20000210
 8002928:	40005400 	.word	0x40005400
 800292c:	40021000 	.word	0x40021000

08002930 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af02      	add	r7, sp, #8
 8002936:	6039      	str	r1, [r7, #0]
 8002938:	0011      	movs	r1, r2
 800293a:	1dfb      	adds	r3, r7, #7
 800293c:	1c02      	adds	r2, r0, #0
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	1c0a      	adds	r2, r1, #0
 8002944:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8002946:	1dfb      	adds	r3, r7, #7
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	18db      	adds	r3, r3, r3
 800294e:	b299      	uxth	r1, r3
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <sensirion_i2c_read+0x3c>)
 8002958:	2464      	movs	r4, #100	; 0x64
 800295a:	9400      	str	r4, [sp, #0]
 800295c:	f001 fe44 	bl	80045e8 <HAL_I2C_Master_Receive>
 8002960:	0003      	movs	r3, r0
 8002962:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b003      	add	sp, #12
 800296a:	bd90      	pop	{r4, r7, pc}
 800296c:	20000210 	.word	0x20000210

08002970 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b085      	sub	sp, #20
 8002974:	af02      	add	r7, sp, #8
 8002976:	6039      	str	r1, [r7, #0]
 8002978:	0011      	movs	r1, r2
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	1c02      	adds	r2, r0, #0
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	1c0a      	adds	r2, r1, #0
 8002984:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	18db      	adds	r3, r3, r3
 800298e:	b299      	uxth	r1, r3
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <sensirion_i2c_write+0x3c>)
 8002998:	2464      	movs	r4, #100	; 0x64
 800299a:	9400      	str	r4, [sp, #0]
 800299c:	f001 fd1c 	bl	80043d8 <HAL_I2C_Master_Transmit>
 80029a0:	0003      	movs	r3, r0
 80029a2:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b003      	add	sp, #12
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	20000210 	.word	0x20000210

080029b0 <sensirion_sleep_usec>:
 *
 * @param useconds the sleep time in microseconds
 */


void sensirion_sleep_usec(uint32_t useconds) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	22fa      	movs	r2, #250	; 0xfa
 80029bc:	0091      	lsls	r1, r2, #2
 80029be:	0018      	movs	r0, r3
 80029c0:	f7fd fbb4 	bl	800012c <__udivsi3>
 80029c4:	0003      	movs	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]

    if (useconds % 1000 > 0) {
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	22fa      	movs	r2, #250	; 0xfa
 80029cc:	0091      	lsls	r1, r2, #2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7fd fc32 	bl	8000238 <__aeabi_uidivmod>
 80029d4:	1e0b      	subs	r3, r1, #0
 80029d6:	d002      	beq.n	80029de <sensirion_sleep_usec+0x2e>
        msec++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3301      	adds	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 80029de:	f000 fb47 	bl	8003070 <HAL_GetHalVersion>
 80029e2:	0003      	movs	r3, r0
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <sensirion_sleep_usec+0x50>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d802      	bhi.n	80029f0 <sensirion_sleep_usec+0x40>
        msec++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3301      	adds	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fb18 	bl	8003028 <HAL_Delay>
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	010100ff 	.word	0x010100ff

08002a04 <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 8002a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	250f      	movs	r5, #15
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	1c02      	adds	r2, r0, #0
 8002a14:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 8002a16:	2616      	movs	r6, #22
 8002a18:	19bc      	adds	r4, r7, r6
 8002a1a:	197b      	adds	r3, r7, r5
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 f820 	bl	8002a64 <sht3x_measure>
 8002a24:	0003      	movs	r3, r0
 8002a26:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 8002a28:	19bb      	adds	r3, r7, r6
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	5e9b      	ldrsh	r3, [r3, r2]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <sht3x_measure_blocking_read+0x5c>)
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ffbb 	bl	80029b0 <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 8002a3a:	19bc      	adds	r4, r7, r6
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	197b      	adds	r3, r7, r5
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f823 	bl	8002a90 <sht3x_read>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 8002a4e:	2316      	movs	r3, #22
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b007      	add	sp, #28
 8002a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	00003a98 	.word	0x00003a98

08002a64 <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	1dfb      	adds	r3, r7, #7
 8002a6e:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <sht3x_measure+0x28>)
 8002a72:	881a      	ldrh	r2, [r3, #0]
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff ff0d 	bl	800289a <sensirion_i2c_write_cmd>
 8002a80:	0003      	movs	r3, r0
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	20000180 	.word	0x20000180

08002a90 <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	260f      	movs	r6, #15
 8002a9c:	19bb      	adds	r3, r7, r6
 8002a9e:	1c02      	adds	r2, r0, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 8002aa2:	2316      	movs	r3, #22
 8002aa4:	18fc      	adds	r4, r7, r3
 8002aa6:	2510      	movs	r5, #16
 8002aa8:	1979      	adds	r1, r7, r5
 8002aaa:	19bb      	adds	r3, r7, r6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff fea3 	bl	80027fc <sensirion_i2c_read_words>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8002aba:	197b      	adds	r3, r7, r5
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	0011      	movs	r1, r2
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 f810 	bl	8002ae8 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8002ac8:	197b      	adds	r3, r7, r5
 8002aca:	885b      	ldrh	r3, [r3, #2]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	0011      	movs	r1, r2
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f821 	bl	8002b18 <tick_to_humidity>

    return ret;
 8002ad6:	2316      	movs	r3, #22
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2200      	movs	r2, #0
 8002adc:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b007      	add	sp, #28
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ae8 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0002      	movs	r2, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	1dbb      	adds	r3, r7, #6
 8002af4:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8002af6:	1dbb      	adds	r3, r7, #6
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <tick_to_temperature+0x28>)
 8002afc:	4353      	muls	r3, r2
 8002afe:	135b      	asrs	r3, r3, #13
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <tick_to_temperature+0x2c>)
 8002b02:	189a      	adds	r2, r3, r2
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	00005573 	.word	0x00005573
 8002b14:	ffff5038 	.word	0xffff5038

08002b18 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	0002      	movs	r2, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	1dbb      	adds	r3, r7, #6
 8002b24:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8002b26:	1dbb      	adds	r3, r7, #6
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <tick_to_humidity+0x24>)
 8002b2c:	4353      	muls	r3, r2
 8002b2e:	135a      	asrs	r2, r3, #13
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	000030d4 	.word	0x000030d4

08002b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_MspInit+0x24>)
 8002b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_MspInit+0x24>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <HAL_MspInit+0x24>)
 8002b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_MspInit+0x24>)
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	0549      	lsls	r1, r1, #21
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_ADC_MspInit+0x28>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d106      	bne.n	8002b88 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_ADC_MspInit+0x2c>)
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_ADC_MspInit+0x2c>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	0089      	lsls	r1, r1, #2
 8002b84:	430a      	orrs	r2, r1
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40012400 	.word	0x40012400
 8002b94:	40021000 	.word	0x40021000

08002b98 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_ADC_MspDeInit+0x28>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d105      	bne.n	8002bb6 <HAL_ADC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_ADC_MspDeInit+0x2c>)
 8002bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_ADC_MspDeInit+0x2c>)
 8002bb0:	4905      	ldr	r1, [pc, #20]	; (8002bc8 <HAL_ADC_MspDeInit+0x30>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b002      	add	sp, #8
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40012400 	.word	0x40012400
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	fffffdff 	.word	0xfffffdff

08002bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	240c      	movs	r4, #12
 8002bd6:	193b      	adds	r3, r7, r4
 8002bd8:	0018      	movs	r0, r3
 8002bda:	2314      	movs	r3, #20
 8002bdc:	001a      	movs	r2, r3
 8002bde:	2100      	movs	r1, #0
 8002be0:	f003 ff6d 	bl	8006abe <memset>
  if(hi2c->Instance==I2C1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_I2C_MspInit+0x7c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d128      	bne.n	8002c40 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_I2C_MspInit+0x80>)
 8002bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_I2C_MspInit+0x80>)
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_I2C_MspInit+0x80>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c06:	0021      	movs	r1, r4
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	22c0      	movs	r2, #192	; 0xc0
 8002c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2212      	movs	r2, #18
 8002c12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2201      	movs	r2, #1
 8002c18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2201      	movs	r2, #1
 8002c24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_I2C_MspInit+0x84>)
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	0010      	movs	r0, r2
 8002c2e:	f001 f893 	bl	8003d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_I2C_MspInit+0x80>)
 8002c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_I2C_MspInit+0x80>)
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	0389      	lsls	r1, r1, #14
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b009      	add	sp, #36	; 0x24
 8002c46:	bd90      	pop	{r4, r7, pc}
 8002c48:	40005400 	.word	0x40005400
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	50000400 	.word	0x50000400

08002c54 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <HAL_I2C_MspDeInit+0x3c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10f      	bne.n	8002c86 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_I2C_MspDeInit+0x40>)
 8002c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_I2C_MspDeInit+0x40>)
 8002c6c:	490a      	ldr	r1, [pc, #40]	; (8002c98 <HAL_I2C_MspDeInit+0x44>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_I2C_MspDeInit+0x48>)
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	0018      	movs	r0, r3
 8002c78:	f001 f9dc 	bl	8004034 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_I2C_MspDeInit+0x48>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0018      	movs	r0, r3
 8002c82:	f001 f9d7 	bl	8004034 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	40005400 	.word	0x40005400
 8002c94:	40021000 	.word	0x40021000
 8002c98:	ffdfffff 	.word	0xffdfffff
 8002c9c:	50000400 	.word	0x50000400

08002ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b08b      	sub	sp, #44	; 0x2c
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	2414      	movs	r4, #20
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	0018      	movs	r0, r3
 8002cae:	2314      	movs	r3, #20
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f003 ff03 	bl	8006abe <memset>
  if(huart->Instance==LPUART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <HAL_UART_MspInit+0xc0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d14a      	bne.n	8002d58 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc6:	4b27      	ldr	r3, [pc, #156]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	02c9      	lsls	r1, r1, #11
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cee:	2102      	movs	r1, #2
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_UART_MspInit+0xc4>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2202      	movs	r2, #2
 8002d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	2203      	movs	r2, #3
 8002d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	2206      	movs	r2, #6
 8002d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <HAL_UART_MspInit+0xc8>)
 8002d22:	0019      	movs	r1, r3
 8002d24:	0010      	movs	r0, r2
 8002d26:	f001 f817 	bl	8003d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d2a:	0021      	movs	r1, r4
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	00d2      	lsls	r2, r2, #3
 8002d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2202      	movs	r2, #2
 8002d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	2203      	movs	r2, #3
 8002d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	2206      	movs	r2, #6
 8002d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_UART_MspInit+0xcc>)
 8002d50:	0019      	movs	r1, r3
 8002d52:	0010      	movs	r0, r2
 8002d54:	f001 f800 	bl	8003d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b00b      	add	sp, #44	; 0x2c
 8002d5e:	bd90      	pop	{r4, r7, pc}
 8002d60:	40004800 	.word	0x40004800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	50000800 	.word	0x50000800
 8002d6c:	50000400 	.word	0x50000400

08002d70 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_UART_MspDeInit+0x40>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d111      	bne.n	8002da6 <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_UART_MspDeInit+0x44>)
 8002d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_UART_MspDeInit+0x44>)
 8002d88:	490b      	ldr	r1, [pc, #44]	; (8002db8 <HAL_UART_MspDeInit+0x48>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38

    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_UART_MspDeInit+0x4c>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	0018      	movs	r0, r3
 8002d94:	f001 f94e 	bl	8004034 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_UART_MspDeInit+0x50>)
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f001 f947 	bl	8004034 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	40004800 	.word	0x40004800
 8002db4:	40021000 	.word	0x40021000
 8002db8:	fffbffff 	.word	0xfffbffff
 8002dbc:	50000800 	.word	0x50000800
 8002dc0:	50000400 	.word	0x50000400

08002dc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_RTC_MspInit+0x38>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10e      	bne.n	8002df4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RTC_MspInit+0x3c>)
 8002dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_RTC_MspInit+0x3c>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	02c9      	lsls	r1, r1, #11
 8002de0:	430a      	orrs	r2, r1
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2002      	movs	r0, #2
 8002dea:	f000 ff83 	bl	8003cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002dee:	2002      	movs	r0, #2
 8002df0:	f000 ff95 	bl	8003d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40002800 	.word	0x40002800
 8002e00:	40021000 	.word	0x40021000

08002e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <NMI_Handler+0x4>

08002e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e0e:	e7fe      	b.n	8002e0e <HardFault_Handler+0x4>

08002e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e28:	f000 f8e2 	bl	8002ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <RTC_IRQHandler+0x14>)
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f003 f882 	bl	8005f44 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	20000444 	.word	0x20000444

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f003 fdec 	bl	8006a58 <__errno>
 8002e80:	0003      	movs	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	425b      	negs	r3, r3
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	18d2      	adds	r2, r2, r3
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20002000 	.word	0x20002000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	2000025c 	.word	0x2000025c
 8002eb4:	200004d8 	.word	0x200004d8

08002eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002ec4:	4813      	ldr	r0, [pc, #76]	; (8002f14 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002ec6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002ec8:	4813      	ldr	r0, [pc, #76]	; (8002f18 <LoopForever+0x6>)
    LDR R1, [R0]
 8002eca:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002ecc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <LoopForever+0xa>)
    CMP R1, R2
 8002ed0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002ed2:	d105      	bne.n	8002ee0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002ed4:	4812      	ldr	r0, [pc, #72]	; (8002f20 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002ed6:	4913      	ldr	r1, [pc, #76]	; (8002f24 <LoopForever+0x12>)
    STR R1, [R0]
 8002ed8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002eda:	4813      	ldr	r0, [pc, #76]	; (8002f28 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002edc:	4913      	ldr	r1, [pc, #76]	; (8002f2c <LoopForever+0x1a>)
    STR R1, [R0]
 8002ede:	6001      	str	r1, [r0, #0]

08002ee0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee0:	4813      	ldr	r0, [pc, #76]	; (8002f30 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002ee2:	4914      	ldr	r1, [pc, #80]	; (8002f34 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <LoopForever+0x26>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee8:	e002      	b.n	8002ef0 <LoopCopyDataInit>

08002eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eee:	3304      	adds	r3, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef4:	d3f9      	bcc.n	8002eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef6:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002ef8:	4c11      	ldr	r4, [pc, #68]	; (8002f40 <LoopForever+0x2e>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002efc:	e001      	b.n	8002f02 <LoopFillZerobss>

08002efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f00:	3204      	adds	r2, #4

08002f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f04:	d3fb      	bcc.n	8002efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f06:	f7ff ffd7 	bl	8002eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f003 fdab 	bl	8006a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7fe fc7d 	bl	800180c <main>

08002f12 <LoopForever>:

LoopForever:
    b LoopForever
 8002f12:	e7fe      	b.n	8002f12 <LoopForever>
   ldr   r0, =_estack
 8002f14:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002f18:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002f1c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002f20:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002f24:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002f28:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002f2c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f34:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002f38:	08007618 	.word	0x08007618
  ldr r2, =_sbss
 8002f3c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002f40:	200004d8 	.word	0x200004d8

08002f44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f44:	e7fe      	b.n	8002f44 <ADC1_IRQHandler>
	...

08002f48 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_Init+0x3c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_Init+0x3c>)
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f60:	2003      	movs	r0, #3
 8002f62:	f000 f811 	bl	8002f88 <HAL_InitTick>
 8002f66:	1e03      	subs	r3, r0, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e001      	b.n	8002f76 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f72:	f7ff fde5 	bl	8002b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	781b      	ldrb	r3, [r3, #0]
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	40022000 	.word	0x40022000

08002f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_InitTick+0x5c>)
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_InitTick+0x60>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	0019      	movs	r1, r3
 8002f9a:	23fa      	movs	r3, #250	; 0xfa
 8002f9c:	0098      	lsls	r0, r3, #2
 8002f9e:	f7fd f8c5 	bl	800012c <__udivsi3>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	f7fd f8c0 	bl	800012c <__udivsi3>
 8002fac:	0003      	movs	r3, r0
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fec5 	bl	8003d3e <HAL_SYSTICK_Config>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e00f      	b.n	8002fdc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d80b      	bhi.n	8002fda <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	425b      	negs	r3, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fe92 	bl	8003cf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_InitTick+0x64>)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b003      	add	sp, #12
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	20000184 	.word	0x20000184
 8002fe8:	2000018c 	.word	0x2000018c
 8002fec:	20000188 	.word	0x20000188

08002ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_IncTick+0x1c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_IncTick+0x20>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	18d2      	adds	r2, r2, r3
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_IncTick+0x20>)
 8003002:	601a      	str	r2, [r3, #0]
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	2000018c 	.word	0x2000018c
 8003010:	200004c4 	.word	0x200004c4

08003014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  return uwTick;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <HAL_GetTick+0x10>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	200004c4 	.word	0x200004c4

08003028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff fff0 	bl	8003014 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	d005      	beq.n	800304e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_Delay+0x44>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	001a      	movs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	189b      	adds	r3, r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	f7ff ffe0 	bl	8003014 <HAL_GetTick>
 8003054:	0002      	movs	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	429a      	cmp	r2, r3
 800305e:	d8f7      	bhi.n	8003050 <HAL_Delay+0x28>
  {
  }
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b004      	add	sp, #16
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	2000018c 	.word	0x2000018c

08003070 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <HAL_GetHalVersion+0xc>)
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	010a0500 	.word	0x010a0500

08003080 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e159      	b.n	8003346 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2250      	movs	r2, #80	; 0x50
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7ff fd5c 	bl	8002b68 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	2210      	movs	r2, #16
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d005      	beq.n	80030c8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80030c6:	d00b      	beq.n	80030e0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	2210      	movs	r2, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2250      	movs	r2, #80	; 0x50
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e132      	b.n	8003346 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	4a9a      	ldr	r2, [pc, #616]	; (8003350 <HAL_ADC_Init+0x2d0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2202      	movs	r2, #2
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2203      	movs	r2, #3
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d108      	bne.n	8003110 <HAL_ADC_Init+0x90>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_Init+0x90>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_ADC_Init+0x92>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d149      	bne.n	80031aa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	429a      	cmp	r2, r3
 8003120:	d00b      	beq.n	800313a <HAL_ADC_Init+0xba>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	05db      	lsls	r3, r3, #23
 800312a:	429a      	cmp	r2, r3
 800312c:	d005      	beq.n	800313a <HAL_ADC_Init+0xba>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	429a      	cmp	r2, r3
 8003138:	d111      	bne.n	800315e <HAL_ADC_Init+0xde>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0092      	lsls	r2, r2, #2
 8003146:	0892      	lsrs	r2, r2, #2
 8003148:	611a      	str	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	611a      	str	r2, [r3, #16]
 800315c:	e014      	b.n	8003188 <HAL_ADC_Init+0x108>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	0892      	lsrs	r2, r2, #2
 800316c:	611a      	str	r2, [r3, #16]
 800316e:	4b79      	ldr	r3, [pc, #484]	; (8003354 <HAL_ADC_Init+0x2d4>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b78      	ldr	r3, [pc, #480]	; (8003354 <HAL_ADC_Init+0x2d4>)
 8003174:	4978      	ldr	r1, [pc, #480]	; (8003358 <HAL_ADC_Init+0x2d8>)
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_ADC_Init+0x2d4>)
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4b74      	ldr	r3, [pc, #464]	; (8003354 <HAL_ADC_Init+0x2d4>)
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2118      	movs	r1, #24
 8003194:	438a      	bics	r2, r1
 8003196:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68d9      	ldr	r1, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80031aa:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_ADC_Init+0x2d4>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b69      	ldr	r3, [pc, #420]	; (8003354 <HAL_ADC_Init+0x2d4>)
 80031b0:	496a      	ldr	r1, [pc, #424]	; (800335c <HAL_ADC_Init+0x2dc>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80031b6:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_ADC_Init+0x2d4>)
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	065a      	lsls	r2, r3, #25
 80031c0:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_ADC_Init+0x2d4>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	055b      	lsls	r3, r3, #21
 80031d0:	4013      	ands	r3, r2
 80031d2:	d108      	bne.n	80031e6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	0549      	lsls	r1, r1, #21
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	495b      	ldr	r1, [pc, #364]	; (8003360 <HAL_ADC_Init+0x2e0>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68d9      	ldr	r1, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d101      	bne.n	800320c <HAL_ADC_Init+0x18c>
 8003208:	2304      	movs	r3, #4
 800320a:	e000      	b.n	800320e <HAL_ADC_Init+0x18e>
 800320c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800320e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2020      	movs	r0, #32
 8003214:	5c1b      	ldrb	r3, [r3, r0]
 8003216:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003218:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	202c      	movs	r0, #44	; 0x2c
 800321e:	5c1b      	ldrb	r3, [r3, r0]
 8003220:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003222:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003228:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003230:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003238:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003246:	23c2      	movs	r3, #194	; 0xc2
 8003248:	33ff      	adds	r3, #255	; 0xff
 800324a:	429a      	cmp	r2, r3
 800324c:	d00b      	beq.n	8003266 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68d9      	ldr	r1, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2221      	movs	r2, #33	; 0x21
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d11a      	bne.n	80032a6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2180      	movs	r1, #128	; 0x80
 8003286:	0249      	lsls	r1, r1, #9
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	e00b      	b.n	80032a6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	2220      	movs	r2, #32
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	2201      	movs	r2, #1
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d11f      	bne.n	80032ee <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	492a      	ldr	r1, [pc, #168]	; (8003364 <HAL_ADC_Init+0x2e4>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6919      	ldr	r1, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80032cc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80032d2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	430a      	orrs	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	e00e      	b.n	800330c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2101      	movs	r1, #1
 8003308:	438a      	bics	r2, r1
 800330a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2107      	movs	r1, #7
 8003318:	438a      	bics	r2, r1
 800331a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6959      	ldr	r1, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	2203      	movs	r2, #3
 800333a:	4393      	bics	r3, r2
 800333c:	2201      	movs	r2, #1
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	fffffefd 	.word	0xfffffefd
 8003354:	40012708 	.word	0x40012708
 8003358:	ffc3ffff 	.word	0xffc3ffff
 800335c:	fdffffff 	.word	0xfdffffff
 8003360:	fffe0219 	.word	0xfffe0219
 8003364:	fffffc03 	.word	0xfffffc03

08003368 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003370:	230f      	movs	r3, #15
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07d      	b.n	800347e <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	2202      	movs	r2, #2
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800338e:	250f      	movs	r5, #15
 8003390:	197c      	adds	r4, r7, r5
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 faf6 	bl	8003986 <ADC_ConversionStop>
 800339a:	0003      	movs	r3, r0
 800339c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800339e:	197b      	adds	r3, r7, r5
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80033a6:	197c      	adds	r4, r7, r5
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 fa84 	bl	80038b8 <ADC_Disable>
 80033b0:	0003      	movs	r3, r0
 80033b2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 80033b4:	197b      	adds	r3, r7, r5
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d002      	beq.n	80033c2 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 80033c2:	230f      	movs	r3, #15
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d051      	beq.n	8003470 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	492c      	ldr	r1, [pc, #176]	; (8003488 <HAL_ADC_DeInit+0x120>)
 80033d8:	400a      	ands	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2a      	ldr	r2, [pc, #168]	; (800348c <HAL_ADC_DeInit+0x124>)
 80033e2:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4928      	ldr	r1, [pc, #160]	; (8003490 <HAL_ADC_DeInit+0x128>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4925      	ldr	r1, [pc, #148]	; (8003494 <HAL_ADC_DeInit+0x12c>)
 8003400:	400a      	ands	r2, r1
 8003402:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4922      	ldr	r1, [pc, #136]	; (8003498 <HAL_ADC_DeInit+0x130>)
 8003410:	400a      	ands	r2, r1
 8003412:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2107      	movs	r1, #7
 8003420:	438a      	bics	r2, r1
 8003422:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	491b      	ldr	r1, [pc, #108]	; (800349c <HAL_ADC_DeInit+0x134>)
 8003430:	400a      	ands	r2, r1
 8003432:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	22b4      	movs	r2, #180	; 0xb4
 800343a:	589a      	ldr	r2, [r3, r2]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	217f      	movs	r1, #127	; 0x7f
 8003442:	438a      	bics	r2, r1
 8003444:	21b4      	movs	r1, #180	; 0xb4
 8003446:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	22b4      	movs	r2, #180	; 0xb4
 800344e:	589a      	ldr	r2, [r3, r2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	217f      	movs	r1, #127	; 0x7f
 8003456:	438a      	bics	r2, r1
 8003458:	21b4      	movs	r1, #180	; 0xb4
 800345a:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff fb9a 	bl	8002b98 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2250      	movs	r2, #80	; 0x50
 8003474:	2100      	movs	r1, #0
 8003476:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003478:	230f      	movs	r3, #15
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	781b      	ldrb	r3, [r3, #0]
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bdb0      	pop	{r4, r5, r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	fffff760 	.word	0xfffff760
 800348c:	0000089f 	.word	0x0000089f
 8003490:	efffffff 	.word	0xefffffff
 8003494:	833e0200 	.word	0x833e0200
 8003498:	3ffffc02 	.word	0x3ffffc02
 800349c:	f000f000 	.word	0xf000f000

080034a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a8:	230f      	movs	r3, #15
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2204      	movs	r2, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	d138      	bne.n	800352e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2250      	movs	r2, #80	; 0x50
 80034c0:	5c9b      	ldrb	r3, [r3, r2]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_Start+0x2a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e038      	b.n	800353c <HAL_ADC_Start+0x9c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2250      	movs	r2, #80	; 0x50
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d007      	beq.n	80034ea <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80034da:	230f      	movs	r3, #15
 80034dc:	18fc      	adds	r4, r7, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f981 	bl	80037e8 <ADC_Enable>
 80034e6:	0003      	movs	r3, r0
 80034e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034ea:	230f      	movs	r3, #15
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d120      	bne.n	8003536 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	4a12      	ldr	r2, [pc, #72]	; (8003544 <HAL_ADC_Start+0xa4>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	0052      	lsls	r2, r2, #1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2250      	movs	r2, #80	; 0x50
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	221c      	movs	r2, #28
 800351a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2104      	movs	r1, #4
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	e003      	b.n	8003536 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800352e:	230f      	movs	r3, #15
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003536:	230f      	movs	r3, #15
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	781b      	ldrb	r3, [r3, #0]
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b005      	add	sp, #20
 8003542:	bd90      	pop	{r4, r7, pc}
 8003544:	fffff0fe 	.word	0xfffff0fe

08003548 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003548:	b5b0      	push	{r4, r5, r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003550:	230f      	movs	r3, #15
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2250      	movs	r2, #80	; 0x50
 800355c:	5c9b      	ldrb	r3, [r3, r2]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Stop+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e029      	b.n	80035ba <HAL_ADC_Stop+0x72>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2250      	movs	r2, #80	; 0x50
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800356e:	250f      	movs	r5, #15
 8003570:	197c      	adds	r4, r7, r5
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 fa06 	bl	8003986 <ADC_ConversionStop>
 800357a:	0003      	movs	r3, r0
 800357c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800357e:	197b      	adds	r3, r7, r5
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d112      	bne.n	80035ac <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003586:	197c      	adds	r4, r7, r5
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f994 	bl	80038b8 <ADC_Disable>
 8003590:	0003      	movs	r3, r0
 8003592:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003594:	197b      	adds	r3, r7, r5
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_ADC_Stop+0x7c>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	2201      	movs	r2, #1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2250      	movs	r2, #80	; 0x50
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80035b4:	230f      	movs	r3, #15
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	781b      	ldrb	r3, [r3, #0]
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bdb0      	pop	{r4, r5, r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	fffffefe 	.word	0xfffffefe

080035c8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d102      	bne.n	80035e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80035e2:	2308      	movs	r3, #8
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e014      	b.n	8003612 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d10b      	bne.n	800360e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	2220      	movs	r2, #32
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2250      	movs	r2, #80	; 0x50
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e072      	b.n	80036f4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800360e:	230c      	movs	r3, #12
 8003610:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003612:	f7ff fcff 	bl	8003014 <HAL_GetTick>
 8003616:	0003      	movs	r3, r0
 8003618:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800361a:	e01f      	b.n	800365c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	d01c      	beq.n	800365c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_ADC_PollForConversion+0x70>
 8003628:	f7ff fcf4 	bl	8003014 <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d211      	bcs.n	800365c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	d10b      	bne.n	800365c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	2204      	movs	r2, #4
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2250      	movs	r2, #80	; 0x50
 8003654:	2100      	movs	r1, #0
 8003656:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e04b      	b.n	80036f4 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4013      	ands	r3, r2
 8003666:	d0d9      	beq.n	800361c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	0092      	lsls	r2, r2, #2
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	23c0      	movs	r3, #192	; 0xc0
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4013      	ands	r3, r2
 8003682:	d12e      	bne.n	80036e2 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800368a:	2b00      	cmp	r3, #0
 800368c:	d129      	bne.n	80036e2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2208      	movs	r2, #8
 8003696:	4013      	ands	r3, r2
 8003698:	2b08      	cmp	r3, #8
 800369a:	d122      	bne.n	80036e2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2204      	movs	r2, #4
 80036a4:	4013      	ands	r3, r2
 80036a6:	d110      	bne.n	80036ca <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	210c      	movs	r1, #12
 80036b4:	438a      	bics	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_ADC_PollForConversion+0x134>)
 80036be:	4013      	ands	r3, r2
 80036c0:	2201      	movs	r2, #1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
 80036c8:	e00b      	b.n	80036e2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	2220      	movs	r2, #32
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	2201      	movs	r2, #1
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	220c      	movs	r2, #12
 80036f0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b004      	add	sp, #16
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	fffffefe 	.word	0xfffffefe

08003700 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b002      	add	sp, #8
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2250      	movs	r2, #80	; 0x50
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e050      	b.n	80037d2 <HAL_ADC_ConfigChannel+0xba>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2250      	movs	r2, #80	; 0x50
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2204      	movs	r2, #4
 8003740:	4013      	ands	r3, r2
 8003742:	d00b      	beq.n	800375c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	2220      	movs	r2, #32
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2250      	movs	r2, #80	; 0x50
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e03a      	b.n	80037d2 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_ADC_ConfigChannel+0xc4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	035b      	lsls	r3, r3, #13
 8003772:	0b5a      	lsrs	r2, r3, #13
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	4013      	ands	r3, r2
 8003786:	d01f      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_ADC_ConfigChannel+0xc8>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_ADC_ConfigChannel+0xc8>)
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	03c9      	lsls	r1, r1, #15
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e017      	b.n	80037c8 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	035b      	lsls	r3, r3, #13
 80037a4:	0b5b      	lsrs	r3, r3, #13
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	400a      	ands	r2, r1
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	4013      	ands	r3, r2
 80037ba:	d005      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_ADC_ConfigChannel+0xc8>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_ADC_ConfigChannel+0xc8>)
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <HAL_ADC_ConfigChannel+0xcc>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2250      	movs	r2, #80	; 0x50
 80037cc:	2100      	movs	r1, #0
 80037ce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b002      	add	sp, #8
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	00001001 	.word	0x00001001
 80037e0:	40012708 	.word	0x40012708
 80037e4:	ffbfffff 	.word	0xffbfffff

080037e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2203      	movs	r2, #3
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <ADC_Enable+0x2c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	4013      	ands	r3, r2
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <ADC_Enable+0x2c>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <ADC_Enable+0x2e>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d146      	bne.n	80038a8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <ADC_Enable+0xcc>)
 8003822:	4013      	ands	r3, r2
 8003824:	d00d      	beq.n	8003842 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	2210      	movs	r2, #16
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	2201      	movs	r2, #1
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e033      	b.n	80038aa <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003852:	2001      	movs	r0, #1
 8003854:	f000 f8e4 	bl	8003a20 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003858:	f7ff fbdc 	bl	8003014 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003860:	e01b      	b.n	800389a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003862:	f7ff fbd7 	bl	8003014 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b0a      	cmp	r3, #10
 800386e:	d914      	bls.n	800389a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	4013      	ands	r3, r2
 800387a:	2b01      	cmp	r3, #1
 800387c:	d00d      	beq.n	800389a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2210      	movs	r2, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	2201      	movs	r2, #1
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e007      	b.n	80038aa <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d1dc      	bne.n	8003862 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	80000017 	.word	0x80000017

080038b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2203      	movs	r2, #3
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d108      	bne.n	80038e4 <ADC_Disable+0x2c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <ADC_Disable+0x2c>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <ADC_Disable+0x2e>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d048      	beq.n	800397c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2205      	movs	r2, #5
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d110      	bne.n	800391a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2102      	movs	r1, #2
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2203      	movs	r2, #3
 800390e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003910:	f7ff fb80 	bl	8003014 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003918:	e029      	b.n	800396e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	2210      	movs	r2, #16
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	2201      	movs	r2, #1
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e023      	b.n	800397e <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003936:	f7ff fb6d 	bl	8003014 <HAL_GetTick>
 800393a:	0002      	movs	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b0a      	cmp	r3, #10
 8003942:	d914      	bls.n	800396e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2201      	movs	r2, #1
 800394c:	4013      	ands	r3, r2
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10d      	bne.n	800396e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	2210      	movs	r2, #16
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	2201      	movs	r2, #1
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	2b01      	cmp	r3, #1
 800397a:	d0dc      	beq.n	8003936 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}

08003986 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2204      	movs	r2, #4
 800399a:	4013      	ands	r3, r2
 800399c:	d03a      	beq.n	8003a14 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2204      	movs	r2, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d10d      	bne.n	80039c8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2202      	movs	r2, #2
 80039b4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80039b6:	d107      	bne.n	80039c8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2110      	movs	r1, #16
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039c8:	f7ff fb24 	bl	8003014 <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80039d0:	e01a      	b.n	8003a08 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039d2:	f7ff fb1f 	bl	8003014 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b0a      	cmp	r3, #10
 80039de:	d913      	bls.n	8003a08 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2204      	movs	r2, #4
 80039e8:	4013      	ands	r3, r2
 80039ea:	d00d      	beq.n	8003a08 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	2210      	movs	r2, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	2201      	movs	r2, #1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e006      	b.n	8003a16 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	4013      	ands	r3, r2
 8003a12:	d1de      	bne.n	80039d2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b004      	add	sp, #16
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <ADC_DelayMicroSecond+0x38>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	490b      	ldr	r1, [pc, #44]	; (8003a5c <ADC_DelayMicroSecond+0x3c>)
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f7fc fb7c 	bl	800012c <__udivsi3>
 8003a34:	0003      	movs	r3, r0
 8003a36:	001a      	movs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4353      	muls	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003a3e:	e002      	b.n	8003a46 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f9      	bne.n	8003a40 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b004      	add	sp, #16
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000184 	.word	0x20000184
 8003a5c:	000f4240 	.word	0x000f4240

08003a60 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a6a:	2317      	movs	r3, #23
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2250      	movs	r2, #80	; 0x50
 8003a7e:	5c9b      	ldrb	r3, [r3, r2]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_ADCEx_Calibration_Start+0x28>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e083      	b.n	8003b90 <HAL_ADCEx_Calibration_Start+0x130>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2250      	movs	r2, #80	; 0x50
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2203      	movs	r2, #3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d108      	bne.n	8003ab0 <HAL_ADCEx_Calibration_Start+0x50>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADCEx_Calibration_Start+0x50>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_ADCEx_Calibration_Start+0x52>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d15b      	bne.n	8003b6e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	4a37      	ldr	r2, [pc, #220]	; (8003b98 <HAL_ADCEx_Calibration_Start+0x138>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	2202      	movs	r2, #2
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2203      	movs	r2, #3
 8003ace:	4013      	ands	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2103      	movs	r1, #3
 8003ade:	438a      	bics	r2, r1
 8003ae0:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2180      	movs	r1, #128	; 0x80
 8003aee:	0609      	lsls	r1, r1, #24
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003af4:	f7ff fa8e 	bl	8003014 <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003afc:	e01d      	b.n	8003b3a <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003afe:	f7ff fa89 	bl	8003014 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b0a      	cmp	r3, #10
 8003b0a:	d916      	bls.n	8003b3a <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0fdb      	lsrs	r3, r3, #31
 8003b14:	07da      	lsls	r2, r3, #31
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d10d      	bne.n	8003b3a <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	2212      	movs	r2, #18
 8003b24:	4393      	bics	r3, r2
 8003b26:	2210      	movs	r2, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2250      	movs	r2, #80	; 0x50
 8003b32:	2100      	movs	r1, #0
 8003b34:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e02a      	b.n	8003b90 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	0fdb      	lsrs	r3, r3, #31
 8003b42:	07da      	lsls	r2, r3, #31
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d0d8      	beq.n	8003afe <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68d9      	ldr	r1, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	2203      	movs	r2, #3
 8003b62:	4393      	bics	r3, r2
 8003b64:	2201      	movs	r2, #1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
 8003b6c:	e009      	b.n	8003b82 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	2220      	movs	r2, #32
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003b7a:	2317      	movs	r3, #23
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2250      	movs	r2, #80	; 0x50
 8003b86:	2100      	movs	r1, #0
 8003b88:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b8a:	2317      	movs	r3, #23
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	781b      	ldrb	r3, [r3, #0]
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b006      	add	sp, #24
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	fffffefd 	.word	0xfffffefd

08003b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	1dfb      	adds	r3, r7, #7
 8003ba6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b7f      	cmp	r3, #127	; 0x7f
 8003bae:	d809      	bhi.n	8003bc4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	231f      	movs	r3, #31
 8003bb8:	401a      	ands	r2, r3
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <__NVIC_EnableIRQ+0x30>)
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4091      	lsls	r1, r2
 8003bc0:	000a      	movs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
  }
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	e000e100 	.word	0xe000e100

08003bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	1dfb      	adds	r3, r7, #7
 8003bdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b7f      	cmp	r3, #127	; 0x7f
 8003be4:	d828      	bhi.n	8003c38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003be6:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <__NVIC_SetPriority+0xd4>)
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b25b      	sxtb	r3, r3
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	33c0      	adds	r3, #192	; 0xc0
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	589b      	ldr	r3, [r3, r2]
 8003bf6:	1dfa      	adds	r2, r7, #7
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	400a      	ands	r2, r1
 8003c00:	00d2      	lsls	r2, r2, #3
 8003c02:	21ff      	movs	r1, #255	; 0xff
 8003c04:	4091      	lsls	r1, r2
 8003c06:	000a      	movs	r2, r1
 8003c08:	43d2      	mvns	r2, r2
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	401a      	ands	r2, r3
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	4003      	ands	r3, r0
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c24:	481f      	ldr	r0, [pc, #124]	; (8003ca4 <__NVIC_SetPriority+0xd4>)
 8003c26:	1dfb      	adds	r3, r7, #7
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	33c0      	adds	r3, #192	; 0xc0
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c36:	e031      	b.n	8003c9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <__NVIC_SetPriority+0xd8>)
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	0019      	movs	r1, r3
 8003c40:	230f      	movs	r3, #15
 8003c42:	400b      	ands	r3, r1
 8003c44:	3b08      	subs	r3, #8
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	3306      	adds	r3, #6
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	18d3      	adds	r3, r2, r3
 8003c4e:	3304      	adds	r3, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1dfa      	adds	r2, r7, #7
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	0011      	movs	r1, r2
 8003c58:	2203      	movs	r2, #3
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	00d2      	lsls	r2, r2, #3
 8003c5e:	21ff      	movs	r1, #255	; 0xff
 8003c60:	4091      	lsls	r1, r2
 8003c62:	000a      	movs	r2, r1
 8003c64:	43d2      	mvns	r2, r2
 8003c66:	401a      	ands	r2, r3
 8003c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	401a      	ands	r2, r3
 8003c72:	1dfb      	adds	r3, r7, #7
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	2303      	movs	r3, #3
 8003c7a:	4003      	ands	r3, r0
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c80:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <__NVIC_SetPriority+0xd8>)
 8003c82:	1dfb      	adds	r3, r7, #7
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	001c      	movs	r4, r3
 8003c88:	230f      	movs	r3, #15
 8003c8a:	4023      	ands	r3, r4
 8003c8c:	3b08      	subs	r3, #8
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	430a      	orrs	r2, r1
 8003c92:	3306      	adds	r3, #6
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	18c3      	adds	r3, r0, r3
 8003c98:	3304      	adds	r3, #4
 8003c9a:	601a      	str	r2, [r3, #0]
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b003      	add	sp, #12
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	1e5a      	subs	r2, r3, #1
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	045b      	lsls	r3, r3, #17
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d301      	bcc.n	8003cc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e010      	b.n	8003ce6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <SysTick_Config+0x44>)
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	3a01      	subs	r2, #1
 8003cca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ccc:	2301      	movs	r3, #1
 8003cce:	425b      	negs	r3, r3
 8003cd0:	2103      	movs	r1, #3
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f7ff ff7c 	bl	8003bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <SysTick_Config+0x44>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cde:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <SysTick_Config+0x44>)
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	e000e010 	.word	0xe000e010

08003cf4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	210f      	movs	r1, #15
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	1c02      	adds	r2, r0, #0
 8003d04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	0011      	movs	r1, r2
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7ff ff5d 	bl	8003bd0 <__NVIC_SetPriority>
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	0002      	movs	r2, r0
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d2a:	1dfb      	adds	r3, r7, #7
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff ff33 	bl	8003b9c <__NVIC_EnableIRQ>
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7ff ffaf 	bl	8003cac <SysTick_Config>
 8003d4e:	0003      	movs	r3, r0
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d6e:	e149      	b.n	8004004 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4091      	lsls	r1, r2
 8003d7a:	000a      	movs	r2, r1
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d100      	bne.n	8003d88 <HAL_GPIO_Init+0x30>
 8003d86:	e13a      	b.n	8003ffe <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d005      	beq.n	8003da0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d130      	bne.n	8003e02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	409a      	lsls	r2, r3
 8003dae:	0013      	movs	r3, r2
 8003db0:	43da      	mvns	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	0013      	movs	r3, r2
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	0013      	movs	r3, r2
 8003dde:	43da      	mvns	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4013      	ands	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	2201      	movs	r2, #1
 8003dee:	401a      	ands	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	409a      	lsls	r2, r3
 8003df4:	0013      	movs	r3, r2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2203      	movs	r2, #3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d017      	beq.n	8003e3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	0013      	movs	r3, r2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2203      	movs	r2, #3
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d123      	bne.n	8003e92 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	08da      	lsrs	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3208      	adds	r2, #8
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	58d3      	ldr	r3, [r2, r3]
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	220f      	movs	r2, #15
 8003e62:	409a      	lsls	r2, r3
 8003e64:	0013      	movs	r3, r2
 8003e66:	43da      	mvns	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2107      	movs	r1, #7
 8003e76:	400b      	ands	r3, r1
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	0013      	movs	r3, r2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	08da      	lsrs	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	0092      	lsls	r2, r2, #2
 8003e8e:	6939      	ldr	r1, [r7, #16]
 8003e90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	0013      	movs	r3, r2
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	0013      	movs	r3, r2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	23c0      	movs	r3, #192	; 0xc0
 8003ecc:	029b      	lsls	r3, r3, #10
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d100      	bne.n	8003ed4 <HAL_GPIO_Init+0x17c>
 8003ed2:	e094      	b.n	8003ffe <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed4:	4b51      	ldr	r3, [pc, #324]	; (800401c <HAL_GPIO_Init+0x2c4>)
 8003ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed8:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_GPIO_Init+0x2c4>)
 8003eda:	2101      	movs	r1, #1
 8003edc:	430a      	orrs	r2, r1
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ee0:	4a4f      	ldr	r2, [pc, #316]	; (8004020 <HAL_GPIO_Init+0x2c8>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	589b      	ldr	r3, [r3, r2]
 8003eec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	0013      	movs	r3, r2
 8003efc:	43da      	mvns	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4013      	ands	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	23a0      	movs	r3, #160	; 0xa0
 8003f08:	05db      	lsls	r3, r3, #23
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d013      	beq.n	8003f36 <HAL_GPIO_Init+0x1de>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a44      	ldr	r2, [pc, #272]	; (8004024 <HAL_GPIO_Init+0x2cc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00d      	beq.n	8003f32 <HAL_GPIO_Init+0x1da>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a43      	ldr	r2, [pc, #268]	; (8004028 <HAL_GPIO_Init+0x2d0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <HAL_GPIO_Init+0x1d6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a42      	ldr	r2, [pc, #264]	; (800402c <HAL_GPIO_Init+0x2d4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_GPIO_Init+0x1d2>
 8003f26:	2305      	movs	r3, #5
 8003f28:	e006      	b.n	8003f38 <HAL_GPIO_Init+0x1e0>
 8003f2a:	2306      	movs	r3, #6
 8003f2c:	e004      	b.n	8003f38 <HAL_GPIO_Init+0x1e0>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x1e0>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x1e0>
 8003f36:	2300      	movs	r3, #0
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	4093      	lsls	r3, r2
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f48:	4935      	ldr	r1, [pc, #212]	; (8004020 <HAL_GPIO_Init+0x2c8>)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	025b      	lsls	r3, r3, #9
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	029b      	lsls	r3, r3, #10
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003faa:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	035b      	lsls	r3, r3, #13
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	039b      	lsls	r3, r3, #14
 8003fec:	4013      	ands	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_GPIO_Init+0x2d8>)
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	40da      	lsrs	r2, r3
 800400c:	1e13      	subs	r3, r2, #0
 800400e:	d000      	beq.n	8004012 <HAL_GPIO_Init+0x2ba>
 8004010:	e6ae      	b.n	8003d70 <HAL_GPIO_Init+0x18>
  }
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b006      	add	sp, #24
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	40010000 	.word	0x40010000
 8004024:	50000400 	.word	0x50000400
 8004028:	50000800 	.word	0x50000800
 800402c:	50001c00 	.word	0x50001c00
 8004030:	40010400 	.word	0x40010400

08004034 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800404a:	e0b0      	b.n	80041ae <HAL_GPIO_DeInit+0x17a>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800404c:	2201      	movs	r2, #1
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	409a      	lsls	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d100      	bne.n	8004060 <HAL_GPIO_DeInit+0x2c>
 800405e:	e0a3      	b.n	80041a8 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004060:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <HAL_GPIO_DeInit+0x190>)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	3302      	adds	r3, #2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	589b      	ldr	r3, [r3, r2]
 800406c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2203      	movs	r2, #3
 8004072:	4013      	ands	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	220f      	movs	r2, #15
 8004078:	409a      	lsls	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	23a0      	movs	r3, #160	; 0xa0
 8004084:	05db      	lsls	r3, r3, #23
 8004086:	429a      	cmp	r2, r3
 8004088:	d013      	beq.n	80040b2 <HAL_GPIO_DeInit+0x7e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4e      	ldr	r2, [pc, #312]	; (80041c8 <HAL_GPIO_DeInit+0x194>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00d      	beq.n	80040ae <HAL_GPIO_DeInit+0x7a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4d      	ldr	r2, [pc, #308]	; (80041cc <HAL_GPIO_DeInit+0x198>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <HAL_GPIO_DeInit+0x76>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4c      	ldr	r2, [pc, #304]	; (80041d0 <HAL_GPIO_DeInit+0x19c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_GPIO_DeInit+0x72>
 80040a2:	2305      	movs	r3, #5
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_DeInit+0x80>
 80040a6:	2306      	movs	r3, #6
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_DeInit+0x80>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_DeInit+0x80>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_DeInit+0x80>
 80040b2:	2300      	movs	r3, #0
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	2103      	movs	r1, #3
 80040b8:	400a      	ands	r2, r1
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d132      	bne.n	800412a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80040c4:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43d9      	mvns	r1, r3
 80040cc:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80040d2:	4b40      	ldr	r3, [pc, #256]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43d9      	mvns	r1, r3
 80040da:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040dc:	400a      	ands	r2, r1
 80040de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80040e0:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43d9      	mvns	r1, r3
 80040e8:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040ea:	400a      	ands	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	43d9      	mvns	r1, r3
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_GPIO_DeInit+0x1a0>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2203      	movs	r2, #3
 8004100:	4013      	ands	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	409a      	lsls	r2, r3
 8004108:	0013      	movs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800410c:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <HAL_GPIO_DeInit+0x190>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	3302      	adds	r3, #2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	589a      	ldr	r2, [r3, r2]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	43d9      	mvns	r1, r3
 800411c:	4829      	ldr	r0, [pc, #164]	; (80041c4 <HAL_GPIO_DeInit+0x190>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	400a      	ands	r2, r1
 8004124:	3302      	adds	r3, #2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2103      	movs	r1, #3
 8004134:	4099      	lsls	r1, r3
 8004136:	000b      	movs	r3, r1
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	08da      	lsrs	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3208      	adds	r2, #8
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	58d3      	ldr	r3, [r2, r3]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	2107      	movs	r1, #7
 800414e:	400a      	ands	r2, r1
 8004150:	0092      	lsls	r2, r2, #2
 8004152:	210f      	movs	r1, #15
 8004154:	4091      	lsls	r1, r2
 8004156:	000a      	movs	r2, r1
 8004158:	43d1      	mvns	r1, r2
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	08d2      	lsrs	r2, r2, #3
 800415e:	4019      	ands	r1, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3208      	adds	r2, #8
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	0052      	lsls	r2, r2, #1
 8004170:	2103      	movs	r1, #3
 8004172:	4091      	lsls	r1, r2
 8004174:	000a      	movs	r2, r1
 8004176:	43d2      	mvns	r2, r2
 8004178:	401a      	ands	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2101      	movs	r1, #1
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4091      	lsls	r1, r2
 8004188:	000a      	movs	r2, r1
 800418a:	43d2      	mvns	r2, r2
 800418c:	401a      	ands	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	0052      	lsls	r2, r2, #1
 800419a:	2103      	movs	r1, #3
 800419c:	4091      	lsls	r1, r2
 800419e:	000a      	movs	r2, r1
 80041a0:	43d2      	mvns	r2, r2
 80041a2:	401a      	ands	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	609a      	str	r2, [r3, #8]
    }
    position++;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	3301      	adds	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	40da      	lsrs	r2, r3
 80041b4:	1e13      	subs	r3, r2, #0
 80041b6:	d000      	beq.n	80041ba <HAL_GPIO_DeInit+0x186>
 80041b8:	e748      	b.n	800404c <HAL_GPIO_DeInit+0x18>
  }
}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b006      	add	sp, #24
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40010000 	.word	0x40010000
 80041c8:	50000400 	.word	0x50000400
 80041cc:	50000800 	.word	0x50000800
 80041d0:	50001c00 	.word	0x50001c00
 80041d4:	40010400 	.word	0x40010400

080041d8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	000a      	movs	r2, r1
 80041e2:	1cbb      	adds	r3, r7, #2
 80041e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	1cba      	adds	r2, r7, #2
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	4013      	ands	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80041f2:	230f      	movs	r3, #15
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e003      	b.n	8004204 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fc:	230f      	movs	r3, #15
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004204:	230f      	movs	r3, #15
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	781b      	ldrb	r3, [r3, #0]
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	0008      	movs	r0, r1
 800421c:	0011      	movs	r1, r2
 800421e:	1cbb      	adds	r3, r7, #2
 8004220:	1c02      	adds	r2, r0, #0
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	1c7b      	adds	r3, r7, #1
 8004226:	1c0a      	adds	r2, r1, #0
 8004228:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800422a:	1c7b      	adds	r3, r7, #1
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004232:	1cbb      	adds	r3, r7, #2
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800423a:	e003      	b.n	8004244 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800423c:	1cbb      	adds	r3, r7, #2
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e082      	b.n	8004364 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2241      	movs	r2, #65	; 0x41
 8004262:	5c9b      	ldrb	r3, [r3, r2]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2240      	movs	r2, #64	; 0x40
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0018      	movs	r0, r3
 8004276:	f7fe fca9 	bl	8002bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2241      	movs	r2, #65	; 0x41
 800427e:	2124      	movs	r1, #36	; 0x24
 8004280:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2101      	movs	r1, #1
 800428e:	438a      	bics	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4934      	ldr	r1, [pc, #208]	; (800436c <HAL_I2C_Init+0x120>)
 800429c:	400a      	ands	r2, r1
 800429e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4931      	ldr	r1, [pc, #196]	; (8004370 <HAL_I2C_Init+0x124>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d108      	bne.n	80042ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	0209      	lsls	r1, r1, #8
 80042c4:	430a      	orrs	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	e007      	b.n	80042da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2184      	movs	r1, #132	; 0x84
 80042d4:	0209      	lsls	r1, r1, #8
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d104      	bne.n	80042ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2280      	movs	r2, #128	; 0x80
 80042e8:	0112      	lsls	r2, r2, #4
 80042ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	491f      	ldr	r1, [pc, #124]	; (8004374 <HAL_I2C_Init+0x128>)
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	491a      	ldr	r1, [pc, #104]	; (8004370 <HAL_I2C_Init+0x124>)
 8004308:	400a      	ands	r2, r1
 800430a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	431a      	orrs	r2, r3
 8004316:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69d9      	ldr	r1, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1a      	ldr	r2, [r3, #32]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2101      	movs	r1, #1
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2241      	movs	r2, #65	; 0x41
 8004350:	2120      	movs	r1, #32
 8004352:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2242      	movs	r2, #66	; 0x42
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}
 800436c:	f0ffffff 	.word	0xf0ffffff
 8004370:	ffff7fff 	.word	0xffff7fff
 8004374:	02008000 	.word	0x02008000

08004378 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e022      	b.n	80043d0 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2241      	movs	r2, #65	; 0x41
 800438e:	2124      	movs	r1, #36	; 0x24
 8004390:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	438a      	bics	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7fe fc55 	bl	8002c54 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2241      	movs	r2, #65	; 0x41
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2242      	movs	r2, #66	; 0x42
 80043c2:	2100      	movs	r1, #0
 80043c4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2240      	movs	r2, #64	; 0x40
 80043ca:	2100      	movs	r1, #0
 80043cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	0008      	movs	r0, r1
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	0019      	movs	r1, r3
 80043e6:	230a      	movs	r3, #10
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	1c02      	adds	r2, r0, #0
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	2308      	movs	r3, #8
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	1c0a      	adds	r2, r1, #0
 80043f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2241      	movs	r2, #65	; 0x41
 80043fa:	5c9b      	ldrb	r3, [r3, r2]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d000      	beq.n	8004404 <HAL_I2C_Master_Transmit+0x2c>
 8004402:	e0e7      	b.n	80045d4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	5c9b      	ldrb	r3, [r3, r2]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2C_Master_Transmit+0x3a>
 800440e:	2302      	movs	r3, #2
 8004410:	e0e1      	b.n	80045d6 <HAL_I2C_Master_Transmit+0x1fe>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2240      	movs	r2, #64	; 0x40
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800441a:	f7fe fdfb 	bl	8003014 <HAL_GetTick>
 800441e:	0003      	movs	r3, r0
 8004420:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	0219      	lsls	r1, r3, #8
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2319      	movs	r3, #25
 800442e:	2201      	movs	r2, #1
 8004430:	f000 fa04 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0cc      	b.n	80045d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2241      	movs	r2, #65	; 0x41
 8004440:	2121      	movs	r1, #33	; 0x21
 8004442:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2242      	movs	r2, #66	; 0x42
 8004448:	2110      	movs	r1, #16
 800444a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2208      	movs	r2, #8
 800445c:	18ba      	adds	r2, r7, r2
 800445e:	8812      	ldrh	r2, [r2, #0]
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	2bff      	cmp	r3, #255	; 0xff
 8004470:	d911      	bls.n	8004496 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	22ff      	movs	r2, #255	; 0xff
 8004476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	b2da      	uxtb	r2, r3
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	045c      	lsls	r4, r3, #17
 8004482:	230a      	movs	r3, #10
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	8819      	ldrh	r1, [r3, #0]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	4b55      	ldr	r3, [pc, #340]	; (80045e0 <HAL_I2C_Master_Transmit+0x208>)
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	0023      	movs	r3, r4
 8004490:	f000 fb74 	bl	8004b7c <I2C_TransferConfig>
 8004494:	e075      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	049c      	lsls	r4, r3, #18
 80044aa:	230a      	movs	r3, #10
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	8819      	ldrh	r1, [r3, #0]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <HAL_I2C_Master_Transmit+0x208>)
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	0023      	movs	r3, r4
 80044b8:	f000 fb60 	bl	8004b7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80044bc:	e061      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f9f8 	bl	80048ba <I2C_WaitOnTXISFlagUntilTimeout>
 80044ca:	1e03      	subs	r3, r0, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e081      	b.n	80045d6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	781a      	ldrb	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d03a      	beq.n	8004582 <HAL_I2C_Master_Transmit+0x1aa>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d136      	bne.n	8004582 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	0013      	movs	r3, r2
 800451e:	2200      	movs	r2, #0
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	f000 f98b 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8004526:	1e03      	subs	r3, r0, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e053      	b.n	80045d6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	2bff      	cmp	r3, #255	; 0xff
 8004536:	d911      	bls.n	800455c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22ff      	movs	r2, #255	; 0xff
 800453c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	b2da      	uxtb	r2, r3
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	045c      	lsls	r4, r3, #17
 8004548:	230a      	movs	r3, #10
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	8819      	ldrh	r1, [r3, #0]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	0023      	movs	r3, r4
 8004556:	f000 fb11 	bl	8004b7c <I2C_TransferConfig>
 800455a:	e012      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	b2da      	uxtb	r2, r3
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	049c      	lsls	r4, r3, #18
 8004570:	230a      	movs	r3, #10
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	8819      	ldrh	r1, [r3, #0]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	0023      	movs	r3, r4
 800457e:	f000 fafd 	bl	8004b7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d198      	bne.n	80044be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 f9d0 	bl	8004938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004598:	1e03      	subs	r3, r0, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e01a      	b.n	80045d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2220      	movs	r2, #32
 80045a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	490c      	ldr	r1, [pc, #48]	; (80045e4 <HAL_I2C_Master_Transmit+0x20c>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2241      	movs	r2, #65	; 0x41
 80045bc:	2120      	movs	r1, #32
 80045be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2242      	movs	r2, #66	; 0x42
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b007      	add	sp, #28
 80045dc:	bd90      	pop	{r4, r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	80002000 	.word	0x80002000
 80045e4:	fe00e800 	.word	0xfe00e800

080045e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	0008      	movs	r0, r1
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	0019      	movs	r1, r3
 80045f6:	230a      	movs	r3, #10
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	1c02      	adds	r2, r0, #0
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	2308      	movs	r3, #8
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	1c0a      	adds	r2, r1, #0
 8004604:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2241      	movs	r2, #65	; 0x41
 800460a:	5c9b      	ldrb	r3, [r3, r2]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b20      	cmp	r3, #32
 8004610:	d000      	beq.n	8004614 <HAL_I2C_Master_Receive+0x2c>
 8004612:	e0e8      	b.n	80047e6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	5c9b      	ldrb	r3, [r3, r2]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Master_Receive+0x3a>
 800461e:	2302      	movs	r3, #2
 8004620:	e0e2      	b.n	80047e8 <HAL_I2C_Master_Receive+0x200>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2240      	movs	r2, #64	; 0x40
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800462a:	f7fe fcf3 	bl	8003014 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	0219      	lsls	r1, r3, #8
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2319      	movs	r3, #25
 800463e:	2201      	movs	r2, #1
 8004640:	f000 f8fc 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8004644:	1e03      	subs	r3, r0, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0cd      	b.n	80047e8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2241      	movs	r2, #65	; 0x41
 8004650:	2122      	movs	r1, #34	; 0x22
 8004652:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2242      	movs	r2, #66	; 0x42
 8004658:	2110      	movs	r1, #16
 800465a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2208      	movs	r2, #8
 800466c:	18ba      	adds	r2, r7, r2
 800466e:	8812      	ldrh	r2, [r2, #0]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2bff      	cmp	r3, #255	; 0xff
 8004680:	d911      	bls.n	80046a6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	b2da      	uxtb	r2, r3
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	045c      	lsls	r4, r3, #17
 8004692:	230a      	movs	r3, #10
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	8819      	ldrh	r1, [r3, #0]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <HAL_I2C_Master_Receive+0x208>)
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	0023      	movs	r3, r4
 80046a0:	f000 fa6c 	bl	8004b7c <I2C_TransferConfig>
 80046a4:	e076      	b.n	8004794 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	049c      	lsls	r4, r3, #18
 80046ba:	230a      	movs	r3, #10
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	8819      	ldrh	r1, [r3, #0]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <HAL_I2C_Master_Receive+0x208>)
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	0023      	movs	r3, r4
 80046c8:	f000 fa58 	bl	8004b7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80046cc:	e062      	b.n	8004794 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 f96b 	bl	80049b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046da:	1e03      	subs	r3, r0, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e082      	b.n	80047e8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d03a      	beq.n	8004794 <HAL_I2C_Master_Receive+0x1ac>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d136      	bne.n	8004794 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	0013      	movs	r3, r2
 8004730:	2200      	movs	r2, #0
 8004732:	2180      	movs	r1, #128	; 0x80
 8004734:	f000 f882 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8004738:	1e03      	subs	r3, r0, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e053      	b.n	80047e8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	2bff      	cmp	r3, #255	; 0xff
 8004748:	d911      	bls.n	800476e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	22ff      	movs	r2, #255	; 0xff
 800474e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	b2da      	uxtb	r2, r3
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	045c      	lsls	r4, r3, #17
 800475a:	230a      	movs	r3, #10
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	8819      	ldrh	r1, [r3, #0]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	2300      	movs	r3, #0
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	0023      	movs	r3, r4
 8004768:	f000 fa08 	bl	8004b7c <I2C_TransferConfig>
 800476c:	e012      	b.n	8004794 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	b2da      	uxtb	r2, r3
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	049c      	lsls	r4, r3, #18
 8004782:	230a      	movs	r3, #10
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	8819      	ldrh	r1, [r3, #0]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	0023      	movs	r3, r4
 8004790:	f000 f9f4 	bl	8004b7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d197      	bne.n	80046ce <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f000 f8c7 	bl	8004938 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047aa:	1e03      	subs	r3, r0, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e01a      	b.n	80047e8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2220      	movs	r2, #32
 80047b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	490b      	ldr	r1, [pc, #44]	; (80047f4 <HAL_I2C_Master_Receive+0x20c>)
 80047c6:	400a      	ands	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2241      	movs	r2, #65	; 0x41
 80047ce:	2120      	movs	r1, #32
 80047d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2242      	movs	r2, #66	; 0x42
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2240      	movs	r2, #64	; 0x40
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
  }
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b007      	add	sp, #28
 80047ee:	bd90      	pop	{r4, r7, pc}
 80047f0:	80002400 	.word	0x80002400
 80047f4:	fe00e800 	.word	0xfe00e800

080047f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2202      	movs	r2, #2
 8004808:	4013      	ands	r3, r2
 800480a:	2b02      	cmp	r3, #2
 800480c:	d103      	bne.n	8004816 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2201      	movs	r2, #1
 800481e:	4013      	ands	r3, r2
 8004820:	2b01      	cmp	r3, #1
 8004822:	d007      	beq.n	8004834 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2101      	movs	r1, #1
 8004830:	430a      	orrs	r2, r1
 8004832:	619a      	str	r2, [r3, #24]
  }
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}

0800483c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	1dfb      	adds	r3, r7, #7
 800484a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484c:	e021      	b.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	d01e      	beq.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004854:	f7fe fbde 	bl	8003014 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d113      	bne.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	2220      	movs	r2, #32
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2241      	movs	r2, #65	; 0x41
 800487a:	2120      	movs	r1, #32
 800487c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2242      	movs	r2, #66	; 0x42
 8004882:	2100      	movs	r1, #0
 8004884:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2240      	movs	r2, #64	; 0x40
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e00f      	b.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	425a      	negs	r2, r3
 80048a2:	4153      	adcs	r3, r2
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	001a      	movs	r2, r3
 80048a8:	1dfb      	adds	r3, r7, #7
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d0ce      	beq.n	800484e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b004      	add	sp, #16
 80048b8:	bd80      	pop	{r7, pc}

080048ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048c6:	e02b      	b.n	8004920 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 f8da 	bl	8004a88 <I2C_IsAcknowledgeFailed>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d001      	beq.n	80048dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e029      	b.n	8004930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3301      	adds	r3, #1
 80048e0:	d01e      	beq.n	8004920 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fe fb97 	bl	8003014 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d113      	bne.n	8004920 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	2220      	movs	r2, #32
 80048fe:	431a      	orrs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2241      	movs	r2, #65	; 0x41
 8004908:	2120      	movs	r1, #32
 800490a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2242      	movs	r2, #66	; 0x42
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2240      	movs	r2, #64	; 0x40
 8004918:	2100      	movs	r1, #0
 800491a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e007      	b.n	8004930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2202      	movs	r2, #2
 8004928:	4013      	ands	r3, r2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d1cc      	bne.n	80048c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b004      	add	sp, #16
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004944:	e028      	b.n	8004998 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	0018      	movs	r0, r3
 800494e:	f000 f89b 	bl	8004a88 <I2C_IsAcknowledgeFailed>
 8004952:	1e03      	subs	r3, r0, #0
 8004954:	d001      	beq.n	800495a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e026      	b.n	80049a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495a:	f7fe fb5b 	bl	8003014 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d113      	bne.n	8004998 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	2220      	movs	r2, #32
 8004976:	431a      	orrs	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2241      	movs	r2, #65	; 0x41
 8004980:	2120      	movs	r1, #32
 8004982:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2242      	movs	r2, #66	; 0x42
 8004988:	2100      	movs	r1, #0
 800498a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2220      	movs	r2, #32
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d1cf      	bne.n	8004946 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049bc:	e055      	b.n	8004a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 f85f 	bl	8004a88 <I2C_IsAcknowledgeFailed>
 80049ca:	1e03      	subs	r3, r0, #0
 80049cc:	d001      	beq.n	80049d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e053      	b.n	8004a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2220      	movs	r2, #32
 80049da:	4013      	ands	r3, r2
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d129      	bne.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2204      	movs	r2, #4
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d105      	bne.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e03f      	b.n	8004a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2220      	movs	r2, #32
 8004a00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	491d      	ldr	r1, [pc, #116]	; (8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004a0e:	400a      	ands	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2241      	movs	r2, #65	; 0x41
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2242      	movs	r2, #66	; 0x42
 8004a24:	2100      	movs	r1, #0
 8004a26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2240      	movs	r2, #64	; 0x40
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e022      	b.n	8004a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a34:	f7fe faee 	bl	8003014 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d302      	bcc.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	2220      	movs	r2, #32
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2241      	movs	r2, #65	; 0x41
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2240      	movs	r2, #64	; 0x40
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e007      	b.n	8004a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2204      	movs	r2, #4
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d1a2      	bne.n	80049be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	fe00e800 	.word	0xfe00e800

08004a88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d164      	bne.n	8004b6c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	049b      	lsls	r3, r3, #18
 8004aac:	401a      	ands	r2, r3
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	049b      	lsls	r3, r3, #18
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d02b      	beq.n	8004b0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	01c9      	lsls	r1, r1, #7
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac8:	e021      	b.n	8004b0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3301      	adds	r3, #1
 8004ace:	d01e      	beq.n	8004b0e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7fe faa0 	bl	8003014 <HAL_GetTick>
 8004ad4:	0002      	movs	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <I2C_IsAcknowledgeFailed+0x5e>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d113      	bne.n	8004b0e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	2220      	movs	r2, #32
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2241      	movs	r2, #65	; 0x41
 8004af6:	2120      	movs	r1, #32
 8004af8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2242      	movs	r2, #66	; 0x42
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2240      	movs	r2, #64	; 0x40
 8004b06:	2100      	movs	r1, #0
 8004b08:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e02f      	b.n	8004b6e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2220      	movs	r2, #32
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d1d6      	bne.n	8004aca <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2210      	movs	r2, #16
 8004b22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7ff fe62 	bl	80047f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	490e      	ldr	r1, [pc, #56]	; (8004b78 <I2C_IsAcknowledgeFailed+0xf0>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	2204      	movs	r2, #4
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2241      	movs	r2, #65	; 0x41
 8004b54:	2120      	movs	r1, #32
 8004b56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2242      	movs	r2, #66	; 0x42
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	2100      	movs	r1, #0
 8004b66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	fe00e800 	.word	0xfe00e800

08004b7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	0008      	movs	r0, r1
 8004b86:	0011      	movs	r1, r2
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	240a      	movs	r4, #10
 8004b8c:	193b      	adds	r3, r7, r4
 8004b8e:	1c02      	adds	r2, r0, #0
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	2009      	movs	r0, #9
 8004b94:	183b      	adds	r3, r7, r0
 8004b96:	1c0a      	adds	r2, r1, #0
 8004b98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	0d51      	lsrs	r1, r2, #21
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	00d2      	lsls	r2, r2, #3
 8004ba8:	400a      	ands	r2, r1
 8004baa:	490e      	ldr	r1, [pc, #56]	; (8004be4 <I2C_TransferConfig+0x68>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	43d2      	mvns	r2, r2
 8004bb0:	401a      	ands	r2, r3
 8004bb2:	0011      	movs	r1, r2
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	059b      	lsls	r3, r3, #22
 8004bba:	0d9a      	lsrs	r2, r3, #22
 8004bbc:	183b      	adds	r3, r7, r0
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	0418      	lsls	r0, r3, #16
 8004bc2:	23ff      	movs	r3, #255	; 0xff
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	4003      	ands	r3, r0
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b005      	add	sp, #20
 8004be0:	bd90      	pop	{r4, r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	03ff63ff 	.word	0x03ff63ff

08004be8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2241      	movs	r2, #65	; 0x41
 8004bf6:	5c9b      	ldrb	r3, [r3, r2]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d138      	bne.n	8004c70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2240      	movs	r2, #64	; 0x40
 8004c02:	5c9b      	ldrb	r3, [r3, r2]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e032      	b.n	8004c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	2101      	movs	r1, #1
 8004c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2241      	movs	r2, #65	; 0x41
 8004c18:	2124      	movs	r1, #36	; 0x24
 8004c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2101      	movs	r1, #1
 8004c28:	438a      	bics	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4911      	ldr	r1, [pc, #68]	; (8004c7c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004c38:	400a      	ands	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2101      	movs	r1, #1
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2241      	movs	r2, #65	; 0x41
 8004c60:	2120      	movs	r1, #32
 8004c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2240      	movs	r2, #64	; 0x40
 8004c68:	2100      	movs	r1, #0
 8004c6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b002      	add	sp, #8
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	ffffefff 	.word	0xffffefff

08004c80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2241      	movs	r2, #65	; 0x41
 8004c8e:	5c9b      	ldrb	r3, [r3, r2]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d139      	bne.n	8004d0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2240      	movs	r2, #64	; 0x40
 8004c9a:	5c9b      	ldrb	r3, [r3, r2]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e033      	b.n	8004d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2240      	movs	r2, #64	; 0x40
 8004ca8:	2101      	movs	r1, #1
 8004caa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2241      	movs	r2, #65	; 0x41
 8004cb0:	2124      	movs	r1, #36	; 0x24
 8004cb2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2241      	movs	r2, #65	; 0x41
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2240      	movs	r2, #64	; 0x40
 8004d02:	2100      	movs	r1, #0
 8004d04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e000      	b.n	8004d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
  }
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b004      	add	sp, #16
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	fffff0ff 	.word	0xfffff0ff

08004d18 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b002      	add	sp, #8
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40007000 	.word	0x40007000

08004d38 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_PWR_DisableWakeUpPin+0x20>)
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	43d9      	mvns	r1, r3
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_PWR_DisableWakeUpPin+0x20>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b002      	add	sp, #8
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	40007000 	.word	0x40007000

08004d5c <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8004d66:	2102      	movs	r1, #2
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004d72:	2104      	movs	r1, #4
 8004d74:	430a      	orrs	r2, r1
 8004d76:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004d78:	bf30      	wfi
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40007000 	.word	0x40007000
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f000 fb6c 	bl	8005474 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9c:	4bc8      	ldr	r3, [pc, #800]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	220c      	movs	r2, #12
 8004da2:	4013      	ands	r3, r2
 8004da4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da6:	4bc6      	ldr	r3, [pc, #792]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	025b      	lsls	r3, r3, #9
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2201      	movs	r2, #1
 8004db8:	4013      	ands	r3, r2
 8004dba:	d100      	bne.n	8004dbe <HAL_RCC_OscConfig+0x36>
 8004dbc:	e07d      	b.n	8004eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d007      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d112      	bne.n	8004df0 <HAL_RCC_OscConfig+0x68>
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	025b      	lsls	r3, r3, #9
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d10d      	bne.n	8004df0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd4:	4bba      	ldr	r3, [pc, #744]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d100      	bne.n	8004de2 <HAL_RCC_OscConfig+0x5a>
 8004de0:	e06a      	b.n	8004eb8 <HAL_RCC_OscConfig+0x130>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d166      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f000 fb42 	bl	8005474 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	025b      	lsls	r3, r3, #9
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_OscConfig+0x84>
 8004dfc:	4bb0      	ldr	r3, [pc, #704]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4baf      	ldr	r3, [pc, #700]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	0249      	lsls	r1, r1, #9
 8004e06:	430a      	orrs	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e027      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	23a0      	movs	r3, #160	; 0xa0
 8004e12:	02db      	lsls	r3, r3, #11
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d10e      	bne.n	8004e36 <HAL_RCC_OscConfig+0xae>
 8004e18:	4ba9      	ldr	r3, [pc, #676]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4ba8      	ldr	r3, [pc, #672]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e1e:	2180      	movs	r1, #128	; 0x80
 8004e20:	02c9      	lsls	r1, r1, #11
 8004e22:	430a      	orrs	r2, r1
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	4ba6      	ldr	r3, [pc, #664]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4ba5      	ldr	r3, [pc, #660]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e2c:	2180      	movs	r1, #128	; 0x80
 8004e2e:	0249      	lsls	r1, r1, #9
 8004e30:	430a      	orrs	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	e012      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004e36:	4ba2      	ldr	r3, [pc, #648]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4ba1      	ldr	r3, [pc, #644]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e3c:	49a1      	ldr	r1, [pc, #644]	; (80050c4 <HAL_RCC_OscConfig+0x33c>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	4b9f      	ldr	r3, [pc, #636]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	025b      	lsls	r3, r3, #9
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4b9b      	ldr	r3, [pc, #620]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b9a      	ldr	r3, [pc, #616]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e56:	499c      	ldr	r1, [pc, #624]	; (80050c8 <HAL_RCC_OscConfig+0x340>)
 8004e58:	400a      	ands	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d014      	beq.n	8004e8e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fe f8d6 	bl	8003014 <HAL_GetTick>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e6e:	f7fe f8d1 	bl	8003014 <HAL_GetTick>
 8004e72:	0002      	movs	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b64      	cmp	r3, #100	; 0x64
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e2f9      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e80:	4b8f      	ldr	r3, [pc, #572]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0xe6>
 8004e8c:	e015      	b.n	8004eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fe f8c1 	bl	8003014 <HAL_GetTick>
 8004e92:	0003      	movs	r3, r0
 8004e94:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e98:	f7fe f8bc 	bl	8003014 <HAL_GetTick>
 8004e9c:	0002      	movs	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e2e4      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004eaa:	4b85      	ldr	r3, [pc, #532]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	029b      	lsls	r3, r3, #10
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0x110>
 8004eb6:	e000      	b.n	8004eba <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d100      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x13e>
 8004ec4:	e099      	b.n	8004ffa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	2220      	movs	r2, #32
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004ed4:	4b7a      	ldr	r3, [pc, #488]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b79      	ldr	r3, [pc, #484]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004eda:	2120      	movs	r1, #32
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	4393      	bics	r3, r2
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d005      	beq.n	8004efa <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	2b0c      	cmp	r3, #12
 8004ef2:	d13e      	bne.n	8004f72 <HAL_RCC_OscConfig+0x1ea>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13b      	bne.n	8004f72 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004efa:	4b71      	ldr	r3, [pc, #452]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2204      	movs	r2, #4
 8004f00:	4013      	ands	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_RCC_OscConfig+0x186>
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e2b2      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0e:	4b6c      	ldr	r3, [pc, #432]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4a6e      	ldr	r2, [pc, #440]	; (80050cc <HAL_RCC_OscConfig+0x344>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	0019      	movs	r1, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	021a      	lsls	r2, r3, #8
 8004f1e:	4b68      	ldr	r3, [pc, #416]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f24:	4b66      	ldr	r3, [pc, #408]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2209      	movs	r2, #9
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	4b64      	ldr	r3, [pc, #400]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f36:	f000 fbeb 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8004f3a:	0001      	movs	r1, r0
 8004f3c:	4b60      	ldr	r3, [pc, #384]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	220f      	movs	r2, #15
 8004f44:	4013      	ands	r3, r2
 8004f46:	4a62      	ldr	r2, [pc, #392]	; (80050d0 <HAL_RCC_OscConfig+0x348>)
 8004f48:	5cd3      	ldrb	r3, [r2, r3]
 8004f4a:	000a      	movs	r2, r1
 8004f4c:	40da      	lsrs	r2, r3
 8004f4e:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_RCC_OscConfig+0x34c>)
 8004f50:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004f52:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <HAL_RCC_OscConfig+0x350>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2513      	movs	r5, #19
 8004f58:	197c      	adds	r4, r7, r5
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7fe f814 	bl	8002f88 <HAL_InitTick>
 8004f60:	0003      	movs	r3, r0
 8004f62:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004f64:	197b      	adds	r3, r7, r5
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d046      	beq.n	8004ffa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004f6c:	197b      	adds	r3, r7, r5
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	e280      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d027      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f78:	4b51      	ldr	r3, [pc, #324]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2209      	movs	r2, #9
 8004f7e:	4393      	bics	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	4b4f      	ldr	r3, [pc, #316]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f86:	430a      	orrs	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fe f843 	bl	8003014 <HAL_GetTick>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f94:	f7fe f83e 	bl	8003014 <HAL_GetTick>
 8004f98:	0002      	movs	r2, r0
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e266      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fa6:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2204      	movs	r2, #4
 8004fac:	4013      	ands	r3, r2
 8004fae:	d0f1      	beq.n	8004f94 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4a45      	ldr	r2, [pc, #276]	; (80050cc <HAL_RCC_OscConfig+0x344>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	e018      	b.n	8004ffa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc8:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4b3c      	ldr	r3, [pc, #240]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004fce:	2101      	movs	r1, #1
 8004fd0:	438a      	bics	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fe f81e 	bl	8003014 <HAL_GetTick>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fde:	f7fe f819 	bl	8003014 <HAL_GetTick>
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e241      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d1f1      	bne.n	8004fde <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2210      	movs	r2, #16
 8005000:	4013      	ands	r3, r2
 8005002:	d100      	bne.n	8005006 <HAL_RCC_OscConfig+0x27e>
 8005004:	e0a1      	b.n	800514a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d140      	bne.n	800508e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800500c:	4b2c      	ldr	r3, [pc, #176]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4013      	ands	r3, r2
 8005016:	d005      	beq.n	8005024 <HAL_RCC_OscConfig+0x29c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e227      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005024:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a2c      	ldr	r2, [pc, #176]	; (80050dc <HAL_RCC_OscConfig+0x354>)
 800502a:	4013      	ands	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	0a19      	lsrs	r1, r3, #8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	061a      	lsls	r2, r3, #24
 8005046:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8005048:	430a      	orrs	r2, r1
 800504a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	0b5b      	lsrs	r3, r3, #13
 8005052:	3301      	adds	r3, #1
 8005054:	2280      	movs	r2, #128	; 0x80
 8005056:	0212      	lsls	r2, r2, #8
 8005058:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	210f      	movs	r1, #15
 8005062:	400b      	ands	r3, r1
 8005064:	491a      	ldr	r1, [pc, #104]	; (80050d0 <HAL_RCC_OscConfig+0x348>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_RCC_OscConfig+0x34c>)
 800506c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800506e:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <HAL_RCC_OscConfig+0x350>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2513      	movs	r5, #19
 8005074:	197c      	adds	r4, r7, r5
 8005076:	0018      	movs	r0, r3
 8005078:	f7fd ff86 	bl	8002f88 <HAL_InitTick>
 800507c:	0003      	movs	r3, r0
 800507e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005080:	197b      	adds	r3, r7, r5
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d060      	beq.n	800514a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8005088:	197b      	adds	r3, r7, r5
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	e1f2      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d03f      	beq.n	8005116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_RCC_OscConfig+0x338>)
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	0049      	lsls	r1, r1, #1
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fd ffb6 	bl	8003014 <HAL_GetTick>
 80050a8:	0003      	movs	r3, r0
 80050aa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050ac:	e018      	b.n	80050e0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050ae:	f7fd ffb1 	bl	8003014 <HAL_GetTick>
 80050b2:	0002      	movs	r2, r0
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d911      	bls.n	80050e0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e1d9      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	fffeffff 	.word	0xfffeffff
 80050c8:	fffbffff 	.word	0xfffbffff
 80050cc:	ffffe0ff 	.word	0xffffe0ff
 80050d0:	08007568 	.word	0x08007568
 80050d4:	20000184 	.word	0x20000184
 80050d8:	20000188 	.word	0x20000188
 80050dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050e0:	4bc9      	ldr	r3, [pc, #804]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4013      	ands	r3, r2
 80050ea:	d0e0      	beq.n	80050ae <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ec:	4bc6      	ldr	r3, [pc, #792]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4ac6      	ldr	r2, [pc, #792]	; (800540c <HAL_RCC_OscConfig+0x684>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1a      	ldr	r2, [r3, #32]
 80050fa:	4bc3      	ldr	r3, [pc, #780]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005100:	4bc1      	ldr	r3, [pc, #772]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	0a19      	lsrs	r1, r3, #8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	061a      	lsls	r2, r3, #24
 800510e:	4bbe      	ldr	r3, [pc, #760]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	e019      	b.n	800514a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005116:	4bbc      	ldr	r3, [pc, #752]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4bbb      	ldr	r3, [pc, #748]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800511c:	49bc      	ldr	r1, [pc, #752]	; (8005410 <HAL_RCC_OscConfig+0x688>)
 800511e:	400a      	ands	r2, r1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005122:	f7fd ff77 	bl	8003014 <HAL_GetTick>
 8005126:	0003      	movs	r3, r0
 8005128:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800512c:	f7fd ff72 	bl	8003014 <HAL_GetTick>
 8005130:	0002      	movs	r2, r0
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e19a      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800513e:	4bb2      	ldr	r3, [pc, #712]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4013      	ands	r3, r2
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2208      	movs	r2, #8
 8005150:	4013      	ands	r3, r2
 8005152:	d036      	beq.n	80051c2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d019      	beq.n	8005190 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515c:	4baa      	ldr	r3, [pc, #680]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800515e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005160:	4ba9      	ldr	r3, [pc, #676]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005162:	2101      	movs	r1, #1
 8005164:	430a      	orrs	r2, r1
 8005166:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005168:	f7fd ff54 	bl	8003014 <HAL_GetTick>
 800516c:	0003      	movs	r3, r0
 800516e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005172:	f7fd ff4f 	bl	8003014 <HAL_GetTick>
 8005176:	0002      	movs	r2, r0
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e177      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005184:	4ba0      	ldr	r3, [pc, #640]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005188:	2202      	movs	r2, #2
 800518a:	4013      	ands	r3, r2
 800518c:	d0f1      	beq.n	8005172 <HAL_RCC_OscConfig+0x3ea>
 800518e:	e018      	b.n	80051c2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005190:	4b9d      	ldr	r3, [pc, #628]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005194:	4b9c      	ldr	r3, [pc, #624]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005196:	2101      	movs	r1, #1
 8005198:	438a      	bics	r2, r1
 800519a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519c:	f7fd ff3a 	bl	8003014 <HAL_GetTick>
 80051a0:	0003      	movs	r3, r0
 80051a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fd ff35 	bl	8003014 <HAL_GetTick>
 80051aa:	0002      	movs	r2, r0
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e15d      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051b8:	4b93      	ldr	r3, [pc, #588]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	2202      	movs	r2, #2
 80051be:	4013      	ands	r3, r2
 80051c0:	d1f1      	bne.n	80051a6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2204      	movs	r2, #4
 80051c8:	4013      	ands	r3, r2
 80051ca:	d100      	bne.n	80051ce <HAL_RCC_OscConfig+0x446>
 80051cc:	e0ae      	b.n	800532c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	2023      	movs	r0, #35	; 0x23
 80051d0:	183b      	adds	r3, r7, r0
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d6:	4b8c      	ldr	r3, [pc, #560]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80051d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	055b      	lsls	r3, r3, #21
 80051de:	4013      	ands	r3, r2
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e2:	4b89      	ldr	r3, [pc, #548]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80051e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e6:	4b88      	ldr	r3, [pc, #544]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	0549      	lsls	r1, r1, #21
 80051ec:	430a      	orrs	r2, r1
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80051f0:	183b      	adds	r3, r7, r0
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	4b87      	ldr	r3, [pc, #540]	; (8005414 <HAL_RCC_OscConfig+0x68c>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	4013      	ands	r3, r2
 8005200:	d11a      	bne.n	8005238 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005202:	4b84      	ldr	r3, [pc, #528]	; (8005414 <HAL_RCC_OscConfig+0x68c>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b83      	ldr	r3, [pc, #524]	; (8005414 <HAL_RCC_OscConfig+0x68c>)
 8005208:	2180      	movs	r1, #128	; 0x80
 800520a:	0049      	lsls	r1, r1, #1
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005210:	f7fd ff00 	bl	8003014 <HAL_GetTick>
 8005214:	0003      	movs	r3, r0
 8005216:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521a:	f7fd fefb 	bl	8003014 <HAL_GetTick>
 800521e:	0002      	movs	r2, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b64      	cmp	r3, #100	; 0x64
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e123      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	4b79      	ldr	r3, [pc, #484]	; (8005414 <HAL_RCC_OscConfig+0x68c>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4013      	ands	r3, r2
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	429a      	cmp	r2, r3
 8005242:	d107      	bne.n	8005254 <HAL_RCC_OscConfig+0x4cc>
 8005244:	4b70      	ldr	r3, [pc, #448]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005248:	4b6f      	ldr	r3, [pc, #444]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800524a:	2180      	movs	r1, #128	; 0x80
 800524c:	0049      	lsls	r1, r1, #1
 800524e:	430a      	orrs	r2, r1
 8005250:	651a      	str	r2, [r3, #80]	; 0x50
 8005252:	e031      	b.n	80052b8 <HAL_RCC_OscConfig+0x530>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10c      	bne.n	8005276 <HAL_RCC_OscConfig+0x4ee>
 800525c:	4b6a      	ldr	r3, [pc, #424]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800525e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005260:	4b69      	ldr	r3, [pc, #420]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005262:	496b      	ldr	r1, [pc, #428]	; (8005410 <HAL_RCC_OscConfig+0x688>)
 8005264:	400a      	ands	r2, r1
 8005266:	651a      	str	r2, [r3, #80]	; 0x50
 8005268:	4b67      	ldr	r3, [pc, #412]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800526a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800526c:	4b66      	ldr	r3, [pc, #408]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800526e:	496a      	ldr	r1, [pc, #424]	; (8005418 <HAL_RCC_OscConfig+0x690>)
 8005270:	400a      	ands	r2, r1
 8005272:	651a      	str	r2, [r3, #80]	; 0x50
 8005274:	e020      	b.n	80052b8 <HAL_RCC_OscConfig+0x530>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	23a0      	movs	r3, #160	; 0xa0
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	429a      	cmp	r2, r3
 8005280:	d10e      	bne.n	80052a0 <HAL_RCC_OscConfig+0x518>
 8005282:	4b61      	ldr	r3, [pc, #388]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005286:	4b60      	ldr	r3, [pc, #384]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	00c9      	lsls	r1, r1, #3
 800528c:	430a      	orrs	r2, r1
 800528e:	651a      	str	r2, [r3, #80]	; 0x50
 8005290:	4b5d      	ldr	r3, [pc, #372]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005294:	4b5c      	ldr	r3, [pc, #368]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	0049      	lsls	r1, r1, #1
 800529a:	430a      	orrs	r2, r1
 800529c:	651a      	str	r2, [r3, #80]	; 0x50
 800529e:	e00b      	b.n	80052b8 <HAL_RCC_OscConfig+0x530>
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80052a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052a4:	4b58      	ldr	r3, [pc, #352]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80052a6:	495a      	ldr	r1, [pc, #360]	; (8005410 <HAL_RCC_OscConfig+0x688>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	651a      	str	r2, [r3, #80]	; 0x50
 80052ac:	4b56      	ldr	r3, [pc, #344]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80052ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052b0:	4b55      	ldr	r3, [pc, #340]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80052b2:	4959      	ldr	r1, [pc, #356]	; (8005418 <HAL_RCC_OscConfig+0x690>)
 80052b4:	400a      	ands	r2, r1
 80052b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c0:	f7fd fea8 	bl	8003014 <HAL_GetTick>
 80052c4:	0003      	movs	r3, r0
 80052c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052c8:	e009      	b.n	80052de <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fd fea3 	bl	8003014 <HAL_GetTick>
 80052ce:	0002      	movs	r2, r0
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	4a51      	ldr	r2, [pc, #324]	; (800541c <HAL_RCC_OscConfig+0x694>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0ca      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052de:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80052e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4013      	ands	r3, r2
 80052e8:	d0ef      	beq.n	80052ca <HAL_RCC_OscConfig+0x542>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ec:	f7fd fe92 	bl	8003014 <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052f4:	e009      	b.n	800530a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fd fe8d 	bl	8003014 <HAL_GetTick>
 80052fa:	0002      	movs	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	4a46      	ldr	r2, [pc, #280]	; (800541c <HAL_RCC_OscConfig+0x694>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0b4      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800530a:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800530c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4013      	ands	r3, r2
 8005314:	d1ef      	bne.n	80052f6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005316:	2323      	movs	r3, #35	; 0x23
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d105      	bne.n	800532c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005320:	4b39      	ldr	r3, [pc, #228]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005324:	4b38      	ldr	r3, [pc, #224]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005326:	493e      	ldr	r1, [pc, #248]	; (8005420 <HAL_RCC_OscConfig+0x698>)
 8005328:	400a      	ands	r2, r1
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	d100      	bne.n	8005336 <HAL_RCC_OscConfig+0x5ae>
 8005334:	e09d      	b.n	8005472 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	d100      	bne.n	800533e <HAL_RCC_OscConfig+0x5b6>
 800533c:	e076      	b.n	800542c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b02      	cmp	r3, #2
 8005344:	d145      	bne.n	80053d2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b30      	ldr	r3, [pc, #192]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800534c:	4935      	ldr	r1, [pc, #212]	; (8005424 <HAL_RCC_OscConfig+0x69c>)
 800534e:	400a      	ands	r2, r1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005352:	f7fd fe5f 	bl	8003014 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535c:	f7fd fe5a 	bl	8003014 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e082      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800536e:	4b26      	ldr	r3, [pc, #152]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	049b      	lsls	r3, r3, #18
 8005376:	4013      	ands	r3, r2
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800537a:	4b23      	ldr	r3, [pc, #140]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_RCC_OscConfig+0x6a0>)
 8005380:	4013      	ands	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	431a      	orrs	r2, r3
 8005394:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 8005396:	430a      	orrs	r2, r1
 8005398:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539a:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	0449      	lsls	r1, r1, #17
 80053a4:	430a      	orrs	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fd fe34 	bl	8003014 <HAL_GetTick>
 80053ac:	0003      	movs	r3, r0
 80053ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fd fe2f 	bl	8003014 <HAL_GetTick>
 80053b6:	0002      	movs	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e057      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	049b      	lsls	r3, r3, #18
 80053cc:	4013      	ands	r3, r2
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0x62a>
 80053d0:	e04f      	b.n	8005472 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80053d8:	4912      	ldr	r1, [pc, #72]	; (8005424 <HAL_RCC_OscConfig+0x69c>)
 80053da:	400a      	ands	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053de:	f7fd fe19 	bl	8003014 <HAL_GetTick>
 80053e2:	0003      	movs	r3, r0
 80053e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fd fe14 	bl	8003014 <HAL_GetTick>
 80053ec:	0002      	movs	r2, r0
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e03c      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053fa:	4b03      	ldr	r3, [pc, #12]	; (8005408 <HAL_RCC_OscConfig+0x680>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	049b      	lsls	r3, r3, #18
 8005402:	4013      	ands	r3, r2
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x660>
 8005406:	e034      	b.n	8005472 <HAL_RCC_OscConfig+0x6ea>
 8005408:	40021000 	.word	0x40021000
 800540c:	ffff1fff 	.word	0xffff1fff
 8005410:	fffffeff 	.word	0xfffffeff
 8005414:	40007000 	.word	0x40007000
 8005418:	fffffbff 	.word	0xfffffbff
 800541c:	00001388 	.word	0x00001388
 8005420:	efffffff 	.word	0xefffffff
 8005424:	feffffff 	.word	0xfeffffff
 8005428:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e01d      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <HAL_RCC_OscConfig+0x6f4>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	025b      	lsls	r3, r3, #9
 8005444:	401a      	ands	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	429a      	cmp	r2, r3
 800544c:	d10f      	bne.n	800546e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	23f0      	movs	r3, #240	; 0xf0
 8005452:	039b      	lsls	r3, r3, #14
 8005454:	401a      	ands	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d107      	bne.n	800546e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	23c0      	movs	r3, #192	; 0xc0
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	401a      	ands	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d001      	beq.n	8005472 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	b00a      	add	sp, #40	; 0x28
 800547a:	bdb0      	pop	{r4, r5, r7, pc}
 800547c:	40021000 	.word	0x40021000

08005480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005480:	b5b0      	push	{r4, r5, r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e128      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005494:	4b96      	ldr	r3, [pc, #600]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2201      	movs	r2, #1
 800549a:	4013      	ands	r3, r2
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d91e      	bls.n	80054e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b93      	ldr	r3, [pc, #588]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2201      	movs	r2, #1
 80054a8:	4393      	bics	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	4b90      	ldr	r3, [pc, #576]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054b4:	f7fd fdae 	bl	8003014 <HAL_GetTick>
 80054b8:	0003      	movs	r3, r0
 80054ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054bc:	e009      	b.n	80054d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054be:	f7fd fda9 	bl	8003014 <HAL_GetTick>
 80054c2:	0002      	movs	r2, r0
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	4a8a      	ldr	r2, [pc, #552]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e109      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d2:	4b87      	ldr	r3, [pc, #540]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	4013      	ands	r3, r2
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d1ee      	bne.n	80054be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2202      	movs	r2, #2
 80054e6:	4013      	ands	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ea:	4b83      	ldr	r3, [pc, #524]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	22f0      	movs	r2, #240	; 0xf0
 80054f0:	4393      	bics	r3, r2
 80054f2:	0019      	movs	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	4b7f      	ldr	r3, [pc, #508]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	4013      	ands	r3, r2
 8005506:	d100      	bne.n	800550a <HAL_RCC_ClockConfig+0x8a>
 8005508:	e089      	b.n	800561e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005512:	4b79      	ldr	r3, [pc, #484]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	029b      	lsls	r3, r3, #10
 800551a:	4013      	ands	r3, r2
 800551c:	d120      	bne.n	8005560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0e1      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800552a:	4b73      	ldr	r3, [pc, #460]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	049b      	lsls	r3, r3, #18
 8005532:	4013      	ands	r3, r2
 8005534:	d114      	bne.n	8005560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0d5      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d106      	bne.n	8005550 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005542:	4b6d      	ldr	r3, [pc, #436]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2204      	movs	r2, #4
 8005548:	4013      	ands	r3, r2
 800554a:	d109      	bne.n	8005560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0ca      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005550:	4b69      	ldr	r3, [pc, #420]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4013      	ands	r3, r2
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0c2      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005560:	4b65      	ldr	r3, [pc, #404]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	2203      	movs	r2, #3
 8005566:	4393      	bics	r3, r2
 8005568:	0019      	movs	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4b62      	ldr	r3, [pc, #392]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005570:	430a      	orrs	r2, r1
 8005572:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005574:	f7fd fd4e 	bl	8003014 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d111      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005584:	e009      	b.n	800559a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005586:	f7fd fd45 	bl	8003014 <HAL_GetTick>
 800558a:	0002      	movs	r2, r0
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	4a58      	ldr	r2, [pc, #352]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e0a5      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800559a:	4b57      	ldr	r3, [pc, #348]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	220c      	movs	r2, #12
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d1ef      	bne.n	8005586 <HAL_RCC_ClockConfig+0x106>
 80055a6:	e03a      	b.n	800561e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d111      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055b0:	e009      	b.n	80055c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b2:	f7fd fd2f 	bl	8003014 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	4a4d      	ldr	r2, [pc, #308]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e08f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c6:	4b4c      	ldr	r3, [pc, #304]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	220c      	movs	r2, #12
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d1ef      	bne.n	80055b2 <HAL_RCC_ClockConfig+0x132>
 80055d2:	e024      	b.n	800561e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d11b      	bne.n	8005614 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055dc:	e009      	b.n	80055f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055de:	f7fd fd19 	bl	8003014 <HAL_GetTick>
 80055e2:	0002      	movs	r2, r0
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	4a42      	ldr	r2, [pc, #264]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e079      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	220c      	movs	r2, #12
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d1ef      	bne.n	80055de <HAL_RCC_ClockConfig+0x15e>
 80055fe:	e00e      	b.n	800561e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fd fd08 	bl	8003014 <HAL_GetTick>
 8005604:	0002      	movs	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	4a3a      	ldr	r2, [pc, #232]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e068      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005614:	4b38      	ldr	r3, [pc, #224]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	220c      	movs	r2, #12
 800561a:	4013      	ands	r3, r2
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800561e:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	4013      	ands	r3, r2
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d21e      	bcs.n	800566a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562c:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2201      	movs	r2, #1
 8005632:	4393      	bics	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800563e:	f7fd fce9 	bl	8003014 <HAL_GetTick>
 8005642:	0003      	movs	r3, r0
 8005644:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	e009      	b.n	800565c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f7fd fce4 	bl	8003014 <HAL_GetTick>
 800564c:	0002      	movs	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	4a28      	ldr	r2, [pc, #160]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d901      	bls.n	800565c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e044      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	4013      	ands	r3, r2
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d1ee      	bne.n	8005648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2204      	movs	r2, #4
 8005670:	4013      	ands	r3, r2
 8005672:	d009      	beq.n	8005688 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005674:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4a20      	ldr	r2, [pc, #128]	; (80056fc <HAL_RCC_ClockConfig+0x27c>)
 800567a:	4013      	ands	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005684:	430a      	orrs	r2, r1
 8005686:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2208      	movs	r2, #8
 800568e:	4013      	ands	r3, r2
 8005690:	d00a      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005692:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	4a1a      	ldr	r2, [pc, #104]	; (8005700 <HAL_RCC_ClockConfig+0x280>)
 8005698:	4013      	ands	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	00da      	lsls	r2, r3, #3
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 80056a4:	430a      	orrs	r2, r1
 80056a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056a8:	f000 f832 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ac:	0001      	movs	r1, r0
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_RCC_ClockConfig+0x278>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	220f      	movs	r2, #15
 80056b6:	4013      	ands	r3, r2
 80056b8:	4a12      	ldr	r2, [pc, #72]	; (8005704 <HAL_RCC_ClockConfig+0x284>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	000a      	movs	r2, r1
 80056be:	40da      	lsrs	r2, r3
 80056c0:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_RCC_ClockConfig+0x288>)
 80056c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_RCC_ClockConfig+0x28c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	250b      	movs	r5, #11
 80056ca:	197c      	adds	r4, r7, r5
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7fd fc5b 	bl	8002f88 <HAL_InitTick>
 80056d2:	0003      	movs	r3, r0
 80056d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80056d6:	197b      	adds	r3, r7, r5
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80056de:	197b      	adds	r3, r7, r5
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bdb0      	pop	{r4, r5, r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	40022000 	.word	0x40022000
 80056f4:	00001388 	.word	0x00001388
 80056f8:	40021000 	.word	0x40021000
 80056fc:	fffff8ff 	.word	0xfffff8ff
 8005700:	ffffc7ff 	.word	0xffffc7ff
 8005704:	08007568 	.word	0x08007568
 8005708:	20000184 	.word	0x20000184
 800570c:	20000188 	.word	0x20000188

08005710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	b5b0      	push	{r4, r5, r7, lr}
 8005712:	b08e      	sub	sp, #56	; 0x38
 8005714:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005716:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <HAL_RCC_GetSysClockFreq+0x138>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800571c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800571e:	230c      	movs	r3, #12
 8005720:	4013      	ands	r3, r2
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d014      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x40>
 8005726:	d900      	bls.n	800572a <HAL_RCC_GetSysClockFreq+0x1a>
 8005728:	e07b      	b.n	8005822 <HAL_RCC_GetSysClockFreq+0x112>
 800572a:	2b04      	cmp	r3, #4
 800572c:	d002      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x24>
 800572e:	2b08      	cmp	r3, #8
 8005730:	d00b      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x3a>
 8005732:	e076      	b.n	8005822 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005734:	4b44      	ldr	r3, [pc, #272]	; (8005848 <HAL_RCC_GetSysClockFreq+0x138>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2210      	movs	r2, #16
 800573a:	4013      	ands	r3, r2
 800573c:	d002      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800573e:	4b43      	ldr	r3, [pc, #268]	; (800584c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005742:	e07c      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005744:	4b42      	ldr	r3, [pc, #264]	; (8005850 <HAL_RCC_GetSysClockFreq+0x140>)
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005748:	e079      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800574a:	4b42      	ldr	r3, [pc, #264]	; (8005854 <HAL_RCC_GetSysClockFreq+0x144>)
 800574c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800574e:	e076      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	0c9a      	lsrs	r2, r3, #18
 8005754:	230f      	movs	r3, #15
 8005756:	401a      	ands	r2, r3
 8005758:	4b3f      	ldr	r3, [pc, #252]	; (8005858 <HAL_RCC_GetSysClockFreq+0x148>)
 800575a:	5c9b      	ldrb	r3, [r3, r2]
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	0d9a      	lsrs	r2, r3, #22
 8005762:	2303      	movs	r3, #3
 8005764:	4013      	ands	r3, r2
 8005766:	3301      	adds	r3, #1
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <HAL_RCC_GetSysClockFreq+0x138>)
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	025b      	lsls	r3, r3, #9
 8005772:	4013      	ands	r3, r2
 8005774:	d01a      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	4a35      	ldr	r2, [pc, #212]	; (8005854 <HAL_RCC_GetSysClockFreq+0x144>)
 8005780:	2300      	movs	r3, #0
 8005782:	69b8      	ldr	r0, [r7, #24]
 8005784:	69f9      	ldr	r1, [r7, #28]
 8005786:	f7fa fe67 	bl	8000458 <__aeabi_lmul>
 800578a:	0002      	movs	r2, r0
 800578c:	000b      	movs	r3, r1
 800578e:	0010      	movs	r0, r2
 8005790:	0019      	movs	r1, r3
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f7fa fe3b 	bl	8000418 <__aeabi_uldivmod>
 80057a2:	0002      	movs	r2, r0
 80057a4:	000b      	movs	r3, r1
 80057a6:	0013      	movs	r3, r2
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
 80057aa:	e037      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80057ac:	4b26      	ldr	r3, [pc, #152]	; (8005848 <HAL_RCC_GetSysClockFreq+0x138>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2210      	movs	r2, #16
 80057b2:	4013      	ands	r3, r2
 80057b4:	d01a      	beq.n	80057ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4a23      	ldr	r2, [pc, #140]	; (800584c <HAL_RCC_GetSysClockFreq+0x13c>)
 80057c0:	2300      	movs	r3, #0
 80057c2:	68b8      	ldr	r0, [r7, #8]
 80057c4:	68f9      	ldr	r1, [r7, #12]
 80057c6:	f7fa fe47 	bl	8000458 <__aeabi_lmul>
 80057ca:	0002      	movs	r2, r0
 80057cc:	000b      	movs	r3, r1
 80057ce:	0010      	movs	r0, r2
 80057d0:	0019      	movs	r1, r3
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	2300      	movs	r3, #0
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f7fa fe1b 	bl	8000418 <__aeabi_uldivmod>
 80057e2:	0002      	movs	r2, r0
 80057e4:	000b      	movs	r3, r1
 80057e6:	0013      	movs	r3, r2
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ea:	e017      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	0018      	movs	r0, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	0019      	movs	r1, r3
 80057f4:	4a16      	ldr	r2, [pc, #88]	; (8005850 <HAL_RCC_GetSysClockFreq+0x140>)
 80057f6:	2300      	movs	r3, #0
 80057f8:	f7fa fe2e 	bl	8000458 <__aeabi_lmul>
 80057fc:	0002      	movs	r2, r0
 80057fe:	000b      	movs	r3, r1
 8005800:	0010      	movs	r0, r2
 8005802:	0019      	movs	r1, r3
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	001c      	movs	r4, r3
 8005808:	2300      	movs	r3, #0
 800580a:	001d      	movs	r5, r3
 800580c:	0022      	movs	r2, r4
 800580e:	002b      	movs	r3, r5
 8005810:	f7fa fe02 	bl	8000418 <__aeabi_uldivmod>
 8005814:	0002      	movs	r2, r0
 8005816:	000b      	movs	r3, r1
 8005818:	0013      	movs	r3, r2
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005820:	e00d      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005822:	4b09      	ldr	r3, [pc, #36]	; (8005848 <HAL_RCC_GetSysClockFreq+0x138>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	0b5b      	lsrs	r3, r3, #13
 8005828:	2207      	movs	r2, #7
 800582a:	4013      	ands	r3, r2
 800582c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	3301      	adds	r3, #1
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	0212      	lsls	r2, r2, #8
 8005836:	409a      	lsls	r2, r3
 8005838:	0013      	movs	r3, r2
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800583c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b00e      	add	sp, #56	; 0x38
 8005846:	bdb0      	pop	{r4, r5, r7, pc}
 8005848:	40021000 	.word	0x40021000
 800584c:	003d0900 	.word	0x003d0900
 8005850:	00f42400 	.word	0x00f42400
 8005854:	017d7840 	.word	0x017d7840
 8005858:	08007580 	.word	0x08007580

0800585c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <HAL_RCC_GetHCLKFreq+0x10>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	0018      	movs	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	20000184 	.word	0x20000184

08005870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005874:	f7ff fff2 	bl	800585c <HAL_RCC_GetHCLKFreq>
 8005878:	0001      	movs	r1, r0
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_RCC_GetPCLK1Freq+0x24>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	2207      	movs	r2, #7
 8005882:	4013      	ands	r3, r2
 8005884:	4a04      	ldr	r2, [pc, #16]	; (8005898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005886:	5cd3      	ldrb	r3, [r2, r3]
 8005888:	40d9      	lsrs	r1, r3
 800588a:	000b      	movs	r3, r1
}
 800588c:	0018      	movs	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	40021000 	.word	0x40021000
 8005898:	08007578 	.word	0x08007578

0800589c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058a0:	f7ff ffdc 	bl	800585c <HAL_RCC_GetHCLKFreq>
 80058a4:	0001      	movs	r1, r0
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	0adb      	lsrs	r3, r3, #11
 80058ac:	2207      	movs	r2, #7
 80058ae:	4013      	ands	r3, r2
 80058b0:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058b2:	5cd3      	ldrb	r3, [r2, r3]
 80058b4:	40d9      	lsrs	r1, r3
 80058b6:	000b      	movs	r3, r1
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	40021000 	.word	0x40021000
 80058c4:	08007578 	.word	0x08007578

080058c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80058d0:	2017      	movs	r0, #23
 80058d2:	183b      	adds	r3, r7, r0
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2220      	movs	r2, #32
 80058de:	4013      	ands	r3, r2
 80058e0:	d100      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80058e2:	e0c2      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e4:	4b81      	ldr	r3, [pc, #516]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	055b      	lsls	r3, r3, #21
 80058ec:	4013      	ands	r3, r2
 80058ee:	d109      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f0:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f4:	4b7d      	ldr	r3, [pc, #500]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	0549      	lsls	r1, r1, #21
 80058fa:	430a      	orrs	r2, r1
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80058fe:	183b      	adds	r3, r7, r0
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005904:	4b7a      	ldr	r3, [pc, #488]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4013      	ands	r3, r2
 800590e:	d11a      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005910:	4b77      	ldr	r3, [pc, #476]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	0049      	lsls	r1, r1, #1
 800591a:	430a      	orrs	r2, r1
 800591c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800591e:	f7fd fb79 	bl	8003014 <HAL_GetTick>
 8005922:	0003      	movs	r3, r0
 8005924:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005926:	e008      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005928:	f7fd fb74 	bl	8003014 <HAL_GetTick>
 800592c:	0002      	movs	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b64      	cmp	r3, #100	; 0x64
 8005934:	d901      	bls.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0d4      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	4b6d      	ldr	r3, [pc, #436]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4013      	ands	r3, r2
 8005944:	d0f0      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005946:	4b69      	ldr	r3, [pc, #420]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	23c0      	movs	r3, #192	; 0xc0
 800594c:	039b      	lsls	r3, r3, #14
 800594e:	4013      	ands	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	23c0      	movs	r3, #192	; 0xc0
 8005958:	039b      	lsls	r3, r3, #14
 800595a:	4013      	ands	r3, r2
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	429a      	cmp	r2, r3
 8005960:	d013      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	23c0      	movs	r3, #192	; 0xc0
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	401a      	ands	r2, r3
 800596c:	23c0      	movs	r3, #192	; 0xc0
 800596e:	029b      	lsls	r3, r3, #10
 8005970:	429a      	cmp	r2, r3
 8005972:	d10a      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005974:	4b5d      	ldr	r3, [pc, #372]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	401a      	ands	r2, r3
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	029b      	lsls	r3, r3, #10
 8005982:	429a      	cmp	r2, r3
 8005984:	d101      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e0ac      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800598a:	4b58      	ldr	r3, [pc, #352]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800598c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598e:	23c0      	movs	r3, #192	; 0xc0
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	4013      	ands	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d03b      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	23c0      	movs	r3, #192	; 0xc0
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	4013      	ands	r3, r2
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d033      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2220      	movs	r2, #32
 80059b2:	4013      	ands	r3, r2
 80059b4:	d02e      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80059b6:	4b4d      	ldr	r3, [pc, #308]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	4a4e      	ldr	r2, [pc, #312]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059c0:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c4:	4b49      	ldr	r3, [pc, #292]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	0309      	lsls	r1, r1, #12
 80059ca:	430a      	orrs	r2, r1
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ce:	4b47      	ldr	r3, [pc, #284]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d2:	4b46      	ldr	r3, [pc, #280]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059d4:	4948      	ldr	r1, [pc, #288]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80059d6:	400a      	ands	r2, r1
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80059da:	4b44      	ldr	r3, [pc, #272]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4013      	ands	r3, r2
 80059e8:	d014      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ea:	f7fd fb13 	bl	8003014 <HAL_GetTick>
 80059ee:	0003      	movs	r3, r0
 80059f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f2:	e009      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fd fb0e 	bl	8003014 <HAL_GetTick>
 80059f8:	0002      	movs	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	4a3f      	ldr	r2, [pc, #252]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e06d      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a08:	4b38      	ldr	r3, [pc, #224]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4013      	ands	r3, r2
 8005a12:	d0ef      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	23c0      	movs	r3, #192	; 0xc0
 8005a1a:	029b      	lsls	r3, r3, #10
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	23c0      	movs	r3, #192	; 0xc0
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	23c0      	movs	r3, #192	; 0xc0
 8005a36:	039b      	lsls	r3, r3, #14
 8005a38:	401a      	ands	r2, r3
 8005a3a:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	4b2a      	ldr	r3, [pc, #168]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a42:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	23c0      	movs	r3, #192	; 0xc0
 8005a4a:	029b      	lsls	r3, r3, #10
 8005a4c:	401a      	ands	r2, r3
 8005a4e:	4b27      	ldr	r3, [pc, #156]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a50:	430a      	orrs	r2, r1
 8005a52:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a54:	2317      	movs	r3, #23
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d105      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5e:	4b23      	ldr	r3, [pc, #140]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a62:	4b22      	ldr	r3, [pc, #136]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a64:	4927      	ldr	r1, [pc, #156]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005a66:	400a      	ands	r2, r1
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	4013      	ands	r3, r2
 8005a72:	d009      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a74:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a78:	220c      	movs	r2, #12
 8005a7a:	4393      	bics	r3, r2
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	4b1a      	ldr	r3, [pc, #104]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a84:	430a      	orrs	r2, r1
 8005a86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a92:	4b16      	ldr	r3, [pc, #88]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a96:	4a1c      	ldr	r2, [pc, #112]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	4b12      	ldr	r3, [pc, #72]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	4013      	ands	r3, r2
 8005aae:	d009      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	0019      	movs	r1, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	4013      	ands	r3, r2
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	4a0f      	ldr	r2, [pc, #60]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	4b03      	ldr	r3, [pc, #12]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b006      	add	sp, #24
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40007000 	.word	0x40007000
 8005af4:	fffcffff 	.word	0xfffcffff
 8005af8:	fff7ffff 	.word	0xfff7ffff
 8005afc:	00001388 	.word	0x00001388
 8005b00:	ffcfffff 	.word	0xffcfffff
 8005b04:	efffffff 	.word	0xefffffff
 8005b08:	fffff3ff 	.word	0xfffff3ff
 8005b0c:	ffffcfff 	.word	0xffffcfff
 8005b10:	fff3ffff 	.word	0xfff3ffff

08005b14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e08e      	b.n	8005c44 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2221      	movs	r2, #33	; 0x21
 8005b2a:	5c9b      	ldrb	r3, [r3, r2]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	2100      	movs	r1, #0
 8005b38:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7fd f941 	bl	8002dc4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2221      	movs	r2, #33	; 0x21
 8005b46:	2102      	movs	r1, #2
 8005b48:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	22ca      	movs	r2, #202	; 0xca
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2253      	movs	r2, #83	; 0x53
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 f89e 	bl	8005c9e <RTC_EnterInitMode>
 8005b62:	1e03      	subs	r3, r0, #0
 8005b64:	d009      	beq.n	8005b7a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	22ff      	movs	r2, #255	; 0xff
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2221      	movs	r2, #33	; 0x21
 8005b72:	2104      	movs	r1, #4
 8005b74:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e064      	b.n	8005c44 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4931      	ldr	r1, [pc, #196]	; (8005c4c <HAL_RTC_Init+0x138>)
 8005b86:	400a      	ands	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68d2      	ldr	r2, [r2, #12]
 8005bb0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6919      	ldr	r1, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	041a      	lsls	r2, r3, #16
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2180      	movs	r1, #128	; 0x80
 8005bd2:	438a      	bics	r2, r1
 8005bd4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2103      	movs	r1, #3
 8005be2:	438a      	bics	r2, r1
 8005be4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2220      	movs	r2, #32
 8005c06:	4013      	ands	r3, r2
 8005c08:	d113      	bne.n	8005c32 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f81f 	bl	8005c50 <HAL_RTC_WaitForSynchro>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	22ff      	movs	r2, #255	; 0xff
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2221      	movs	r2, #33	; 0x21
 8005c22:	2104      	movs	r1, #4
 8005c24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e008      	b.n	8005c44 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	22ff      	movs	r2, #255	; 0xff
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2221      	movs	r2, #33	; 0x21
 8005c3e:	2101      	movs	r1, #1
 8005c40:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
  }
}
 8005c44:	0018      	movs	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	ff8fffbf 	.word	0xff8fffbf

08005c50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	21a0      	movs	r1, #160	; 0xa0
 8005c64:	438a      	bics	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c68:	f7fd f9d4 	bl	8003014 <HAL_GetTick>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c70:	e00a      	b.n	8005c88 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c72:	f7fd f9cf 	bl	8003014 <HAL_GetTick>
 8005c76:	0002      	movs	r2, r0
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	1ad2      	subs	r2, r2, r3
 8005c7c:	23fa      	movs	r3, #250	; 0xfa
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d901      	bls.n	8005c88 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e006      	b.n	8005c96 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	4013      	ands	r3, r2
 8005c92:	d0ee      	beq.n	8005c72 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	0018      	movs	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b004      	add	sp, #16
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	2240      	movs	r2, #64	; 0x40
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d11a      	bne.n	8005ce8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4252      	negs	r2, r2
 8005cba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005cbc:	f7fd f9aa 	bl	8003014 <HAL_GetTick>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cc4:	e00a      	b.n	8005cdc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005cc6:	f7fd f9a5 	bl	8003014 <HAL_GetTick>
 8005cca:	0002      	movs	r2, r0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	23fa      	movs	r3, #250	; 0xfa
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d901      	bls.n	8005cdc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e006      	b.n	8005cea <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2240      	movs	r2, #64	; 0x40
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d0ee      	beq.n	8005cc6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	0018      	movs	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b004      	add	sp, #16
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	5c9b      	ldrb	r3, [r3, r2]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e0ad      	b.n	8005e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2221      	movs	r2, #33	; 0x21
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	22ca      	movs	r2, #202	; 0xca
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2253      	movs	r2, #83	; 0x53
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d021      	beq.n	8005d80 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8005d3c:	f7fd f96a 	bl	8003014 <HAL_GetTick>
 8005d40:	0003      	movs	r3, r0
 8005d42:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005d44:	e016      	b.n	8005d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d46:	f7fd f965 	bl	8003014 <HAL_GetTick>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	23fa      	movs	r3, #250	; 0xfa
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d90d      	bls.n	8005d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2221      	movs	r2, #33	; 0x21
 8005d64:	2103      	movs	r1, #3
 8005d66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e07a      	b.n	8005e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d1e2      	bne.n	8005d46 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	493a      	ldr	r1, [pc, #232]	; (8005e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	22ff      	movs	r2, #255	; 0xff
 8005d98:	401a      	ands	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4936      	ldr	r1, [pc, #216]	; (8005e78 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8005da0:	430a      	orrs	r2, r1
 8005da2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005da4:	f7fd f936 	bl	8003014 <HAL_GetTick>
 8005da8:	0003      	movs	r3, r0
 8005daa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005dac:	e016      	b.n	8005ddc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dae:	f7fd f931 	bl	8003014 <HAL_GetTick>
 8005db2:	0002      	movs	r2, r0
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	23fa      	movs	r3, #250	; 0xfa
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d90d      	bls.n	8005ddc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2221      	movs	r2, #33	; 0x21
 8005dcc:	2103      	movs	r1, #3
 8005dce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e046      	b.n	8005e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2204      	movs	r2, #4
 8005de4:	4013      	ands	r3, r2
 8005de6:	d0e2      	beq.n	8005dae <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2107      	movs	r1, #7
 8005dfc:	438a      	bics	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6899      	ldr	r1, [r3, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005e10:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b19      	ldr	r3, [pc, #100]	; (8005e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	0349      	lsls	r1, r1, #13
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005e1e:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005e24:	2180      	movs	r1, #128	; 0x80
 8005e26:	0349      	lsls	r1, r1, #13
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	01c9      	lsls	r1, r1, #7
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	00c9      	lsls	r1, r1, #3
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2221      	movs	r2, #33	; 0x21
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	2100      	movs	r1, #0
 8005e66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b006      	add	sp, #24
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	fffffbff 	.word	0xfffffbff
 8005e78:	fffffb7f 	.word	0xfffffb7f
 8005e7c:	40010400 	.word	0x40010400

08005e80 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	5c9b      	ldrb	r3, [r3, r2]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e04e      	b.n	8005f34 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2221      	movs	r2, #33	; 0x21
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	22ca      	movs	r2, #202	; 0xca
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2253      	movs	r2, #83	; 0x53
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	491e      	ldr	r1, [pc, #120]	; (8005f3c <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8005ec2:	400a      	ands	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	491b      	ldr	r1, [pc, #108]	; (8005f40 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005ed6:	f7fd f89d 	bl	8003014 <HAL_GetTick>
 8005eda:	0003      	movs	r3, r0
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ede:	e016      	b.n	8005f0e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ee0:	f7fd f898 	bl	8003014 <HAL_GetTick>
 8005ee4:	0002      	movs	r2, r0
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	23fa      	movs	r3, #250	; 0xfa
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d90d      	bls.n	8005f0e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2221      	movs	r2, #33	; 0x21
 8005efe:	2103      	movs	r1, #3
 8005f00:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	2100      	movs	r1, #0
 8005f08:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e012      	b.n	8005f34 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2204      	movs	r2, #4
 8005f16:	4013      	ands	r3, r2
 8005f18:	d0e2      	beq.n	8005ee0 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	22ff      	movs	r2, #255	; 0xff
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	2101      	movs	r1, #1
 8005f28:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	2100      	movs	r1, #0
 8005f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b004      	add	sp, #16
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	fffffbff 	.word	0xfffffbff
 8005f40:	ffffbfff 	.word	0xffffbfff

08005f44 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4013      	ands	r3, r2
 8005f58:	d00d      	beq.n	8005f76 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 f81b 	bl	8005f98 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	22ff      	movs	r2, #255	; 0xff
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4907      	ldr	r1, [pc, #28]	; (8005f90 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8005f72:	430a      	orrs	r2, r1
 8005f74:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005f76:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8005f78:	2280      	movs	r2, #128	; 0x80
 8005f7a:	0352      	lsls	r2, r2, #13
 8005f7c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2221      	movs	r2, #33	; 0x21
 8005f82:	2101      	movs	r1, #1
 8005f84:	5499      	strb	r1, [r3, r2]
}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	b002      	add	sp, #8
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	fffffb7f 	.word	0xfffffb7f
 8005f94:	40010400 	.word	0x40010400

08005f98 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e044      	b.n	8006044 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d107      	bne.n	8005fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2274      	movs	r2, #116	; 0x74
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f7fc fe67 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2224      	movs	r2, #36	; 0x24
 8005fd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	438a      	bics	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	0018      	movs	r0, r3
 8005fec:	f000 f912 	bl	8006214 <UART_SetConfig>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e024      	b.n	8006044 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 fb67 	bl	80066d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	490d      	ldr	r1, [pc, #52]	; (800604c <HAL_UART_Init+0xa4>)
 8006016:	400a      	ands	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	212a      	movs	r1, #42	; 0x2a
 8006026:	438a      	bics	r2, r1
 8006028:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2101      	movs	r1, #1
 8006036:	430a      	orrs	r2, r1
 8006038:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f000 fbff 	bl	8006840 <UART_CheckIdleState>
 8006042:	0003      	movs	r3, r0
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}
 800604c:	ffffb7ff 	.word	0xffffb7ff

08006050 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e02c      	b.n	80060bc <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2224      	movs	r2, #36	; 0x24
 8006066:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2101      	movs	r1, #1
 8006074:	438a      	bics	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2200      	movs	r2, #0
 8006086:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	0018      	movs	r0, r3
 8006094:	f7fc fe6c 	bl	8002d70 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2280      	movs	r2, #128	; 0x80
 800609c:	2100      	movs	r1, #0
 800609e:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2274      	movs	r2, #116	; 0x74
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	0018      	movs	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	b002      	add	sp, #8
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	; 0x28
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	1dbb      	adds	r3, r7, #6
 80060d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d000      	beq.n	80060de <HAL_UART_Transmit+0x1a>
 80060dc:	e095      	b.n	800620a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_UART_Transmit+0x28>
 80060e4:	1dbb      	adds	r3, r7, #6
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e08d      	b.n	800620c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	015b      	lsls	r3, r3, #5
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d109      	bne.n	8006110 <HAL_UART_Transmit+0x4c>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2201      	movs	r2, #1
 8006108:	4013      	ands	r3, r2
 800610a:	d001      	beq.n	8006110 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e07d      	b.n	800620c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2274      	movs	r2, #116	; 0x74
 8006114:	5c9b      	ldrb	r3, [r3, r2]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_UART_Transmit+0x5a>
 800611a:	2302      	movs	r3, #2
 800611c:	e076      	b.n	800620c <HAL_UART_Transmit+0x148>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2274      	movs	r2, #116	; 0x74
 8006122:	2101      	movs	r1, #1
 8006124:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2280      	movs	r2, #128	; 0x80
 800612a:	2100      	movs	r1, #0
 800612c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2221      	movs	r2, #33	; 0x21
 8006132:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006134:	f7fc ff6e 	bl	8003014 <HAL_GetTick>
 8006138:	0003      	movs	r3, r0
 800613a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1dba      	adds	r2, r7, #6
 8006140:	2150      	movs	r1, #80	; 0x50
 8006142:	8812      	ldrh	r2, [r2, #0]
 8006144:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1dba      	adds	r2, r7, #6
 800614a:	2152      	movs	r1, #82	; 0x52
 800614c:	8812      	ldrh	r2, [r2, #0]
 800614e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	015b      	lsls	r3, r3, #5
 8006158:	429a      	cmp	r2, r3
 800615a:	d108      	bne.n	800616e <HAL_UART_Transmit+0xaa>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	e003      	b.n	8006176 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2274      	movs	r2, #116	; 0x74
 800617a:	2100      	movs	r1, #0
 800617c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800617e:	e02c      	b.n	80061da <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	0013      	movs	r3, r2
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	f000 fb9f 	bl	80068d0 <UART_WaitOnFlagUntilTimeout>
 8006192:	1e03      	subs	r3, r0, #0
 8006194:	d001      	beq.n	800619a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e038      	b.n	800620c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	001a      	movs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	05d2      	lsls	r2, r2, #23
 80061ac:	0dd2      	lsrs	r2, r2, #23
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	3302      	adds	r3, #2
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e007      	b.n	80061c8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3301      	adds	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2252      	movs	r2, #82	; 0x52
 80061cc:	5a9b      	ldrh	r3, [r3, r2]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b299      	uxth	r1, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2252      	movs	r2, #82	; 0x52
 80061d8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2252      	movs	r2, #82	; 0x52
 80061de:	5a9b      	ldrh	r3, [r3, r2]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1cc      	bne.n	8006180 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	0013      	movs	r3, r2
 80061f0:	2200      	movs	r2, #0
 80061f2:	2140      	movs	r1, #64	; 0x40
 80061f4:	f000 fb6c 	bl	80068d0 <UART_WaitOnFlagUntilTimeout>
 80061f8:	1e03      	subs	r3, r0, #0
 80061fa:	d001      	beq.n	8006200 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e005      	b.n	800620c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e000      	b.n	800620c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800620a:	2302      	movs	r3, #2
  }
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	b008      	add	sp, #32
 8006212:	bd80      	pop	{r7, pc}

08006214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	b5b0      	push	{r4, r5, r7, lr}
 8006216:	b08e      	sub	sp, #56	; 0x38
 8006218:	af00      	add	r7, sp, #0
 800621a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621c:	231a      	movs	r3, #26
 800621e:	2218      	movs	r2, #24
 8006220:	4694      	mov	ip, r2
 8006222:	44bc      	add	ip, r7
 8006224:	4463      	add	r3, ip
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	431a      	orrs	r2, r3
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	431a      	orrs	r2, r3
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	4313      	orrs	r3, r2
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4abc      	ldr	r2, [pc, #752]	; (800653c <UART_SetConfig+0x328>)
 800624a:	4013      	ands	r3, r2
 800624c:	0019      	movs	r1, r3
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006254:	430a      	orrs	r2, r1
 8006256:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4ab8      	ldr	r2, [pc, #736]	; (8006540 <UART_SetConfig+0x32c>)
 8006260:	4013      	ands	r3, r2
 8006262:	0019      	movs	r1, r3
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4ab2      	ldr	r2, [pc, #712]	; (8006544 <UART_SetConfig+0x330>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006286:	4313      	orrs	r3, r2
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4aad      	ldr	r2, [pc, #692]	; (8006548 <UART_SetConfig+0x334>)
 8006292:	4013      	ands	r3, r2
 8006294:	0019      	movs	r1, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800629c:	430a      	orrs	r2, r1
 800629e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4aa9      	ldr	r2, [pc, #676]	; (800654c <UART_SetConfig+0x338>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d136      	bne.n	8006318 <UART_SetConfig+0x104>
 80062aa:	4ba9      	ldr	r3, [pc, #676]	; (8006550 <UART_SetConfig+0x33c>)
 80062ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ae:	220c      	movs	r2, #12
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	d020      	beq.n	80062f8 <UART_SetConfig+0xe4>
 80062b6:	d827      	bhi.n	8006308 <UART_SetConfig+0xf4>
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d00d      	beq.n	80062d8 <UART_SetConfig+0xc4>
 80062bc:	d824      	bhi.n	8006308 <UART_SetConfig+0xf4>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <UART_SetConfig+0xb4>
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d010      	beq.n	80062e8 <UART_SetConfig+0xd4>
 80062c6:	e01f      	b.n	8006308 <UART_SetConfig+0xf4>
 80062c8:	231b      	movs	r3, #27
 80062ca:	2218      	movs	r2, #24
 80062cc:	4694      	mov	ip, r2
 80062ce:	44bc      	add	ip, r7
 80062d0:	4463      	add	r3, ip
 80062d2:	2200      	movs	r2, #0
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e06f      	b.n	80063b8 <UART_SetConfig+0x1a4>
 80062d8:	231b      	movs	r3, #27
 80062da:	2218      	movs	r2, #24
 80062dc:	4694      	mov	ip, r2
 80062de:	44bc      	add	ip, r7
 80062e0:	4463      	add	r3, ip
 80062e2:	2202      	movs	r2, #2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e067      	b.n	80063b8 <UART_SetConfig+0x1a4>
 80062e8:	231b      	movs	r3, #27
 80062ea:	2218      	movs	r2, #24
 80062ec:	4694      	mov	ip, r2
 80062ee:	44bc      	add	ip, r7
 80062f0:	4463      	add	r3, ip
 80062f2:	2204      	movs	r2, #4
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e05f      	b.n	80063b8 <UART_SetConfig+0x1a4>
 80062f8:	231b      	movs	r3, #27
 80062fa:	2218      	movs	r2, #24
 80062fc:	4694      	mov	ip, r2
 80062fe:	44bc      	add	ip, r7
 8006300:	4463      	add	r3, ip
 8006302:	2208      	movs	r2, #8
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e057      	b.n	80063b8 <UART_SetConfig+0x1a4>
 8006308:	231b      	movs	r3, #27
 800630a:	2218      	movs	r2, #24
 800630c:	4694      	mov	ip, r2
 800630e:	44bc      	add	ip, r7
 8006310:	4463      	add	r3, ip
 8006312:	2210      	movs	r2, #16
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e04f      	b.n	80063b8 <UART_SetConfig+0x1a4>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a89      	ldr	r2, [pc, #548]	; (8006544 <UART_SetConfig+0x330>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d143      	bne.n	80063aa <UART_SetConfig+0x196>
 8006322:	4b8b      	ldr	r3, [pc, #556]	; (8006550 <UART_SetConfig+0x33c>)
 8006324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006326:	23c0      	movs	r3, #192	; 0xc0
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	4013      	ands	r3, r2
 800632c:	22c0      	movs	r2, #192	; 0xc0
 800632e:	0112      	lsls	r2, r2, #4
 8006330:	4293      	cmp	r3, r2
 8006332:	d02a      	beq.n	800638a <UART_SetConfig+0x176>
 8006334:	22c0      	movs	r2, #192	; 0xc0
 8006336:	0112      	lsls	r2, r2, #4
 8006338:	4293      	cmp	r3, r2
 800633a:	d82e      	bhi.n	800639a <UART_SetConfig+0x186>
 800633c:	2280      	movs	r2, #128	; 0x80
 800633e:	0112      	lsls	r2, r2, #4
 8006340:	4293      	cmp	r3, r2
 8006342:	d012      	beq.n	800636a <UART_SetConfig+0x156>
 8006344:	2280      	movs	r2, #128	; 0x80
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	4293      	cmp	r3, r2
 800634a:	d826      	bhi.n	800639a <UART_SetConfig+0x186>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <UART_SetConfig+0x146>
 8006350:	2280      	movs	r2, #128	; 0x80
 8006352:	00d2      	lsls	r2, r2, #3
 8006354:	4293      	cmp	r3, r2
 8006356:	d010      	beq.n	800637a <UART_SetConfig+0x166>
 8006358:	e01f      	b.n	800639a <UART_SetConfig+0x186>
 800635a:	231b      	movs	r3, #27
 800635c:	2218      	movs	r2, #24
 800635e:	4694      	mov	ip, r2
 8006360:	44bc      	add	ip, r7
 8006362:	4463      	add	r3, ip
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	e026      	b.n	80063b8 <UART_SetConfig+0x1a4>
 800636a:	231b      	movs	r3, #27
 800636c:	2218      	movs	r2, #24
 800636e:	4694      	mov	ip, r2
 8006370:	44bc      	add	ip, r7
 8006372:	4463      	add	r3, ip
 8006374:	2202      	movs	r2, #2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e01e      	b.n	80063b8 <UART_SetConfig+0x1a4>
 800637a:	231b      	movs	r3, #27
 800637c:	2218      	movs	r2, #24
 800637e:	4694      	mov	ip, r2
 8006380:	44bc      	add	ip, r7
 8006382:	4463      	add	r3, ip
 8006384:	2204      	movs	r2, #4
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e016      	b.n	80063b8 <UART_SetConfig+0x1a4>
 800638a:	231b      	movs	r3, #27
 800638c:	2218      	movs	r2, #24
 800638e:	4694      	mov	ip, r2
 8006390:	44bc      	add	ip, r7
 8006392:	4463      	add	r3, ip
 8006394:	2208      	movs	r2, #8
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e00e      	b.n	80063b8 <UART_SetConfig+0x1a4>
 800639a:	231b      	movs	r3, #27
 800639c:	2218      	movs	r2, #24
 800639e:	4694      	mov	ip, r2
 80063a0:	44bc      	add	ip, r7
 80063a2:	4463      	add	r3, ip
 80063a4:	2210      	movs	r2, #16
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e006      	b.n	80063b8 <UART_SetConfig+0x1a4>
 80063aa:	231b      	movs	r3, #27
 80063ac:	2218      	movs	r2, #24
 80063ae:	4694      	mov	ip, r2
 80063b0:	44bc      	add	ip, r7
 80063b2:	4463      	add	r3, ip
 80063b4:	2210      	movs	r2, #16
 80063b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a61      	ldr	r2, [pc, #388]	; (8006544 <UART_SetConfig+0x330>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d000      	beq.n	80063c4 <UART_SetConfig+0x1b0>
 80063c2:	e088      	b.n	80064d6 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063c4:	231b      	movs	r3, #27
 80063c6:	2218      	movs	r2, #24
 80063c8:	4694      	mov	ip, r2
 80063ca:	44bc      	add	ip, r7
 80063cc:	4463      	add	r3, ip
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d01d      	beq.n	8006410 <UART_SetConfig+0x1fc>
 80063d4:	dc20      	bgt.n	8006418 <UART_SetConfig+0x204>
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d015      	beq.n	8006406 <UART_SetConfig+0x1f2>
 80063da:	dc1d      	bgt.n	8006418 <UART_SetConfig+0x204>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <UART_SetConfig+0x1d2>
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d005      	beq.n	80063f0 <UART_SetConfig+0x1dc>
 80063e4:	e018      	b.n	8006418 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e6:	f7ff fa43 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 80063ea:	0003      	movs	r3, r0
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ee:	e01d      	b.n	800642c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <UART_SetConfig+0x33c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2210      	movs	r2, #16
 80063f6:	4013      	ands	r3, r2
 80063f8:	d002      	beq.n	8006400 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <UART_SetConfig+0x340>)
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063fe:	e015      	b.n	800642c <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8006400:	4b55      	ldr	r3, [pc, #340]	; (8006558 <UART_SetConfig+0x344>)
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006404:	e012      	b.n	800642c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006406:	f7ff f983 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 800640a:	0003      	movs	r3, r0
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800640e:	e00d      	b.n	800642c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006416:	e009      	b.n	800642c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800641c:	231a      	movs	r3, #26
 800641e:	2218      	movs	r2, #24
 8006420:	4694      	mov	ip, r2
 8006422:	44bc      	add	ip, r7
 8006424:	4463      	add	r3, ip
 8006426:	2201      	movs	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]
        break;
 800642a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d100      	bne.n	8006434 <UART_SetConfig+0x220>
 8006432:	e139      	b.n	80066a8 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	0013      	movs	r3, r2
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	189b      	adds	r3, r3, r2
 800643e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006440:	429a      	cmp	r2, r3
 8006442:	d305      	bcc.n	8006450 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800644a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644c:	429a      	cmp	r2, r3
 800644e:	d907      	bls.n	8006460 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8006450:	231a      	movs	r3, #26
 8006452:	2218      	movs	r2, #24
 8006454:	4694      	mov	ip, r2
 8006456:	44bc      	add	ip, r7
 8006458:	4463      	add	r3, ip
 800645a:	2201      	movs	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	e123      	b.n	80066a8 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	6939      	ldr	r1, [r7, #16]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	000b      	movs	r3, r1
 800646e:	0e1b      	lsrs	r3, r3, #24
 8006470:	0010      	movs	r0, r2
 8006472:	0205      	lsls	r5, r0, #8
 8006474:	431d      	orrs	r5, r3
 8006476:	000b      	movs	r3, r1
 8006478:	021c      	lsls	r4, r3, #8
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68b8      	ldr	r0, [r7, #8]
 8006488:	68f9      	ldr	r1, [r7, #12]
 800648a:	1900      	adds	r0, r0, r4
 800648c:	4169      	adcs	r1, r5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	607b      	str	r3, [r7, #4]
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f7f9 ffbc 	bl	8000418 <__aeabi_uldivmod>
 80064a0:	0002      	movs	r2, r0
 80064a2:	000b      	movs	r3, r1
 80064a4:	0013      	movs	r3, r2
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064aa:	23c0      	movs	r3, #192	; 0xc0
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d309      	bcc.n	80064c6 <UART_SetConfig+0x2b2>
 80064b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	035b      	lsls	r3, r3, #13
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d204      	bcs.n	80064c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	e0f0      	b.n	80066a8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80064c6:	231a      	movs	r3, #26
 80064c8:	2218      	movs	r2, #24
 80064ca:	4694      	mov	ip, r2
 80064cc:	44bc      	add	ip, r7
 80064ce:	4463      	add	r3, ip
 80064d0:	2201      	movs	r2, #1
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e0e8      	b.n	80066a8 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	429a      	cmp	r2, r3
 80064e0:	d000      	beq.n	80064e4 <UART_SetConfig+0x2d0>
 80064e2:	e087      	b.n	80065f4 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80064e4:	231b      	movs	r3, #27
 80064e6:	2218      	movs	r2, #24
 80064e8:	4694      	mov	ip, r2
 80064ea:	44bc      	add	ip, r7
 80064ec:	4463      	add	r3, ip
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d835      	bhi.n	8006560 <UART_SetConfig+0x34c>
 80064f4:	009a      	lsls	r2, r3, #2
 80064f6:	4b19      	ldr	r3, [pc, #100]	; (800655c <UART_SetConfig+0x348>)
 80064f8:	18d3      	adds	r3, r2, r3
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064fe:	f7ff f9b7 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8006502:	0003      	movs	r3, r0
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006506:	e035      	b.n	8006574 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006508:	f7ff f9c8 	bl	800589c <HAL_RCC_GetPCLK2Freq>
 800650c:	0003      	movs	r3, r0
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006510:	e030      	b.n	8006574 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <UART_SetConfig+0x33c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2210      	movs	r2, #16
 8006518:	4013      	ands	r3, r2
 800651a:	d002      	beq.n	8006522 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800651c:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <UART_SetConfig+0x340>)
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006520:	e028      	b.n	8006574 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8006522:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <UART_SetConfig+0x344>)
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006526:	e025      	b.n	8006574 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006528:	f7ff f8f2 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 800652c:	0003      	movs	r3, r0
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006530:	e020      	b.n	8006574 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006538:	e01c      	b.n	8006574 <UART_SetConfig+0x360>
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	efff69f3 	.word	0xefff69f3
 8006540:	ffffcfff 	.word	0xffffcfff
 8006544:	40004800 	.word	0x40004800
 8006548:	fffff4ff 	.word	0xfffff4ff
 800654c:	40004400 	.word	0x40004400
 8006550:	40021000 	.word	0x40021000
 8006554:	003d0900 	.word	0x003d0900
 8006558:	00f42400 	.word	0x00f42400
 800655c:	0800758c 	.word	0x0800758c
      default:
        pclk = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006564:	231a      	movs	r3, #26
 8006566:	2218      	movs	r2, #24
 8006568:	4694      	mov	ip, r2
 800656a:	44bc      	add	ip, r7
 800656c:	4463      	add	r3, ip
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
        break;
 8006572:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d100      	bne.n	800657c <UART_SetConfig+0x368>
 800657a:	e095      	b.n	80066a8 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	005a      	lsls	r2, r3, #1
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	18d2      	adds	r2, r2, r3
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	0019      	movs	r1, r3
 800658e:	0010      	movs	r0, r2
 8006590:	f7f9 fdcc 	bl	800012c <__udivsi3>
 8006594:	0003      	movs	r3, r0
 8006596:	b29b      	uxth	r3, r3
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	2b0f      	cmp	r3, #15
 800659e:	d921      	bls.n	80065e4 <UART_SetConfig+0x3d0>
 80065a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	025b      	lsls	r3, r3, #9
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d21c      	bcs.n	80065e4 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	200e      	movs	r0, #14
 80065b0:	2418      	movs	r4, #24
 80065b2:	193b      	adds	r3, r7, r4
 80065b4:	181b      	adds	r3, r3, r0
 80065b6:	210f      	movs	r1, #15
 80065b8:	438a      	bics	r2, r1
 80065ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2207      	movs	r2, #7
 80065c4:	4013      	ands	r3, r2
 80065c6:	b299      	uxth	r1, r3
 80065c8:	193b      	adds	r3, r7, r4
 80065ca:	181b      	adds	r3, r3, r0
 80065cc:	193a      	adds	r2, r7, r4
 80065ce:	1812      	adds	r2, r2, r0
 80065d0:	8812      	ldrh	r2, [r2, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	193a      	adds	r2, r7, r4
 80065dc:	1812      	adds	r2, r2, r0
 80065de:	8812      	ldrh	r2, [r2, #0]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e061      	b.n	80066a8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80065e4:	231a      	movs	r3, #26
 80065e6:	2218      	movs	r2, #24
 80065e8:	4694      	mov	ip, r2
 80065ea:	44bc      	add	ip, r7
 80065ec:	4463      	add	r3, ip
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	e059      	b.n	80066a8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065f4:	231b      	movs	r3, #27
 80065f6:	2218      	movs	r2, #24
 80065f8:	4694      	mov	ip, r2
 80065fa:	44bc      	add	ip, r7
 80065fc:	4463      	add	r3, ip
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d822      	bhi.n	800664a <UART_SetConfig+0x436>
 8006604:	009a      	lsls	r2, r3, #2
 8006606:	4b30      	ldr	r3, [pc, #192]	; (80066c8 <UART_SetConfig+0x4b4>)
 8006608:	18d3      	adds	r3, r2, r3
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800660e:	f7ff f92f 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8006612:	0003      	movs	r3, r0
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006616:	e022      	b.n	800665e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7ff f940 	bl	800589c <HAL_RCC_GetPCLK2Freq>
 800661c:	0003      	movs	r3, r0
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006620:	e01d      	b.n	800665e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006622:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <UART_SetConfig+0x4b8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2210      	movs	r2, #16
 8006628:	4013      	ands	r3, r2
 800662a:	d002      	beq.n	8006632 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800662c:	4b28      	ldr	r3, [pc, #160]	; (80066d0 <UART_SetConfig+0x4bc>)
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006630:	e015      	b.n	800665e <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8006632:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <UART_SetConfig+0x4c0>)
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006636:	e012      	b.n	800665e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006638:	f7ff f86a 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 800663c:	0003      	movs	r3, r0
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006640:	e00d      	b.n	800665e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006648:	e009      	b.n	800665e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800664e:	231a      	movs	r3, #26
 8006650:	2218      	movs	r2, #24
 8006652:	4694      	mov	ip, r2
 8006654:	44bc      	add	ip, r7
 8006656:	4463      	add	r3, ip
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
        break;
 800665c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d021      	beq.n	80066a8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	085a      	lsrs	r2, r3, #1
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	18d2      	adds	r2, r2, r3
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	0019      	movs	r1, r3
 8006674:	0010      	movs	r0, r2
 8006676:	f7f9 fd59 	bl	800012c <__udivsi3>
 800667a:	0003      	movs	r3, r0
 800667c:	b29b      	uxth	r3, r3
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	2b0f      	cmp	r3, #15
 8006684:	d909      	bls.n	800669a <UART_SetConfig+0x486>
 8006686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	025b      	lsls	r3, r3, #9
 800668c:	429a      	cmp	r2, r3
 800668e:	d204      	bcs.n	800669a <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006696:	60da      	str	r2, [r3, #12]
 8006698:	e006      	b.n	80066a8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800669a:	231a      	movs	r3, #26
 800669c:	2218      	movs	r2, #24
 800669e:	4694      	mov	ip, r2
 80066a0:	44bc      	add	ip, r7
 80066a2:	4463      	add	r3, ip
 80066a4:	2201      	movs	r2, #1
 80066a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2200      	movs	r2, #0
 80066ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2200      	movs	r2, #0
 80066b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066b4:	231a      	movs	r3, #26
 80066b6:	2218      	movs	r2, #24
 80066b8:	4694      	mov	ip, r2
 80066ba:	44bc      	add	ip, r7
 80066bc:	4463      	add	r3, ip
 80066be:	781b      	ldrb	r3, [r3, #0]
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b00e      	add	sp, #56	; 0x38
 80066c6:	bdb0      	pop	{r4, r5, r7, pc}
 80066c8:	080075b0 	.word	0x080075b0
 80066cc:	40021000 	.word	0x40021000
 80066d0:	003d0900 	.word	0x003d0900
 80066d4:	00f42400 	.word	0x00f42400

080066d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2201      	movs	r2, #1
 80066e6:	4013      	ands	r3, r2
 80066e8:	d00b      	beq.n	8006702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a4a      	ldr	r2, [pc, #296]	; (800681c <UART_AdvFeatureConfig+0x144>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	0019      	movs	r1, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2202      	movs	r2, #2
 8006708:	4013      	ands	r3, r2
 800670a:	d00b      	beq.n	8006724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4a43      	ldr	r2, [pc, #268]	; (8006820 <UART_AdvFeatureConfig+0x148>)
 8006714:	4013      	ands	r3, r2
 8006716:	0019      	movs	r1, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	2204      	movs	r2, #4
 800672a:	4013      	ands	r3, r2
 800672c:	d00b      	beq.n	8006746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4a3b      	ldr	r2, [pc, #236]	; (8006824 <UART_AdvFeatureConfig+0x14c>)
 8006736:	4013      	ands	r3, r2
 8006738:	0019      	movs	r1, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	2208      	movs	r2, #8
 800674c:	4013      	ands	r3, r2
 800674e:	d00b      	beq.n	8006768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4a34      	ldr	r2, [pc, #208]	; (8006828 <UART_AdvFeatureConfig+0x150>)
 8006758:	4013      	ands	r3, r2
 800675a:	0019      	movs	r1, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2210      	movs	r2, #16
 800676e:	4013      	ands	r3, r2
 8006770:	d00b      	beq.n	800678a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4a2c      	ldr	r2, [pc, #176]	; (800682c <UART_AdvFeatureConfig+0x154>)
 800677a:	4013      	ands	r3, r2
 800677c:	0019      	movs	r1, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	2220      	movs	r2, #32
 8006790:	4013      	ands	r3, r2
 8006792:	d00b      	beq.n	80067ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	4a25      	ldr	r2, [pc, #148]	; (8006830 <UART_AdvFeatureConfig+0x158>)
 800679c:	4013      	ands	r3, r2
 800679e:	0019      	movs	r1, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2240      	movs	r2, #64	; 0x40
 80067b2:	4013      	ands	r3, r2
 80067b4:	d01d      	beq.n	80067f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <UART_AdvFeatureConfig+0x15c>)
 80067be:	4013      	ands	r3, r2
 80067c0:	0019      	movs	r1, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067d2:	2380      	movs	r3, #128	; 0x80
 80067d4:	035b      	lsls	r3, r3, #13
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d10b      	bne.n	80067f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4a15      	ldr	r2, [pc, #84]	; (8006838 <UART_AdvFeatureConfig+0x160>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	0019      	movs	r1, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	4013      	ands	r3, r2
 80067fa:	d00b      	beq.n	8006814 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4a0e      	ldr	r2, [pc, #56]	; (800683c <UART_AdvFeatureConfig+0x164>)
 8006804:	4013      	ands	r3, r2
 8006806:	0019      	movs	r1, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	605a      	str	r2, [r3, #4]
  }
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}
 800681c:	fffdffff 	.word	0xfffdffff
 8006820:	fffeffff 	.word	0xfffeffff
 8006824:	fffbffff 	.word	0xfffbffff
 8006828:	ffff7fff 	.word	0xffff7fff
 800682c:	ffffefff 	.word	0xffffefff
 8006830:	ffffdfff 	.word	0xffffdfff
 8006834:	ffefffff 	.word	0xffefffff
 8006838:	ff9fffff 	.word	0xff9fffff
 800683c:	fff7ffff 	.word	0xfff7ffff

08006840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af02      	add	r7, sp, #8
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2280      	movs	r2, #128	; 0x80
 800684c:	2100      	movs	r1, #0
 800684e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006850:	f7fc fbe0 	bl	8003014 <HAL_GetTick>
 8006854:	0003      	movs	r3, r0
 8006856:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2208      	movs	r2, #8
 8006860:	4013      	ands	r3, r2
 8006862:	2b08      	cmp	r3, #8
 8006864:	d10c      	bne.n	8006880 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2280      	movs	r2, #128	; 0x80
 800686a:	0391      	lsls	r1, r2, #14
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4a17      	ldr	r2, [pc, #92]	; (80068cc <UART_CheckIdleState+0x8c>)
 8006870:	9200      	str	r2, [sp, #0]
 8006872:	2200      	movs	r2, #0
 8006874:	f000 f82c 	bl	80068d0 <UART_WaitOnFlagUntilTimeout>
 8006878:	1e03      	subs	r3, r0, #0
 800687a:	d001      	beq.n	8006880 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e021      	b.n	80068c4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2204      	movs	r2, #4
 8006888:	4013      	ands	r3, r2
 800688a:	2b04      	cmp	r3, #4
 800688c:	d10c      	bne.n	80068a8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	03d1      	lsls	r1, r2, #15
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4a0d      	ldr	r2, [pc, #52]	; (80068cc <UART_CheckIdleState+0x8c>)
 8006898:	9200      	str	r2, [sp, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	f000 f818 	bl	80068d0 <UART_WaitOnFlagUntilTimeout>
 80068a0:	1e03      	subs	r3, r0, #0
 80068a2:	d001      	beq.n	80068a8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e00d      	b.n	80068c4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2274      	movs	r2, #116	; 0x74
 80068be:	2100      	movs	r1, #0
 80068c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b004      	add	sp, #16
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	01ffffff 	.word	0x01ffffff

080068d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b094      	sub	sp, #80	; 0x50
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	1dfb      	adds	r3, r7, #7
 80068de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e0:	e0a3      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e4:	3301      	adds	r3, #1
 80068e6:	d100      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0x1a>
 80068e8:	e09f      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ea:	f7fc fb93 	bl	8003014 <HAL_GetTick>
 80068ee:	0002      	movs	r2, r0
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d302      	bcc.n	8006900 <UART_WaitOnFlagUntilTimeout+0x30>
 80068fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d13d      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006900:	f3ef 8310 	mrs	r3, PRIMASK
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006908:	647b      	str	r3, [r7, #68]	; 0x44
 800690a:	2301      	movs	r3, #1
 800690c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	494c      	ldr	r1, [pc, #304]	; (8006a54 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006922:	400a      	ands	r2, r1
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006928:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	f383 8810 	msr	PRIMASK, r3
}
 8006930:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006932:	f3ef 8310 	mrs	r3, PRIMASK
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
 800693c:	2301      	movs	r3, #1
 800693e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	f383 8810 	msr	PRIMASK, r3
}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2101      	movs	r1, #1
 8006954:	438a      	bics	r2, r1
 8006956:	609a      	str	r2, [r3, #8]
 8006958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695e:	f383 8810 	msr	PRIMASK, r3
}
 8006962:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2274      	movs	r2, #116	; 0x74
 8006974:	2100      	movs	r1, #0
 8006976:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e067      	b.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2204      	movs	r2, #4
 8006984:	4013      	ands	r3, r2
 8006986:	d050      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	401a      	ands	r2, r3
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	429a      	cmp	r2, r3
 800699a:	d146      	bne.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2280      	movs	r2, #128	; 0x80
 80069a2:	0112      	lsls	r2, r2, #4
 80069a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a6:	f3ef 8310 	mrs	r3, PRIMASK
 80069aa:	613b      	str	r3, [r7, #16]
  return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b0:	2301      	movs	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f383 8810 	msr	PRIMASK, r3
}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4923      	ldr	r1, [pc, #140]	; (8006a54 <UART_WaitOnFlagUntilTimeout+0x184>)
 80069c8:	400a      	ands	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f383 8810 	msr	PRIMASK, r3
}
 80069d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d8:	f3ef 8310 	mrs	r3, PRIMASK
 80069dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80069de:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069e2:	2301      	movs	r3, #1
 80069e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f383 8810 	msr	PRIMASK, r3
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	438a      	bics	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]
 80069fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	f383 8810 	msr	PRIMASK, r3
}
 8006a08:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2280      	movs	r2, #128	; 0x80
 8006a1a:	2120      	movs	r1, #32
 8006a1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2274      	movs	r2, #116	; 0x74
 8006a22:	2100      	movs	r1, #0
 8006a24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e010      	b.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	4013      	ands	r3, r2
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	425a      	negs	r2, r3
 8006a3a:	4153      	adcs	r3, r2
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	001a      	movs	r2, r3
 8006a40:	1dfb      	adds	r3, r7, #7
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d100      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006a48:	e74b      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b014      	add	sp, #80	; 0x50
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	fffffe5f 	.word	0xfffffe5f

08006a58 <__errno>:
 8006a58:	4b01      	ldr	r3, [pc, #4]	; (8006a60 <__errno+0x8>)
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	4770      	bx	lr
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	20000190 	.word	0x20000190

08006a64 <__libc_init_array>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	2600      	movs	r6, #0
 8006a68:	4d0c      	ldr	r5, [pc, #48]	; (8006a9c <__libc_init_array+0x38>)
 8006a6a:	4c0d      	ldr	r4, [pc, #52]	; (8006aa0 <__libc_init_array+0x3c>)
 8006a6c:	1b64      	subs	r4, r4, r5
 8006a6e:	10a4      	asrs	r4, r4, #2
 8006a70:	42a6      	cmp	r6, r4
 8006a72:	d109      	bne.n	8006a88 <__libc_init_array+0x24>
 8006a74:	2600      	movs	r6, #0
 8006a76:	f000 fc5d 	bl	8007334 <_init>
 8006a7a:	4d0a      	ldr	r5, [pc, #40]	; (8006aa4 <__libc_init_array+0x40>)
 8006a7c:	4c0a      	ldr	r4, [pc, #40]	; (8006aa8 <__libc_init_array+0x44>)
 8006a7e:	1b64      	subs	r4, r4, r5
 8006a80:	10a4      	asrs	r4, r4, #2
 8006a82:	42a6      	cmp	r6, r4
 8006a84:	d105      	bne.n	8006a92 <__libc_init_array+0x2e>
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	00b3      	lsls	r3, r6, #2
 8006a8a:	58eb      	ldr	r3, [r5, r3]
 8006a8c:	4798      	blx	r3
 8006a8e:	3601      	adds	r6, #1
 8006a90:	e7ee      	b.n	8006a70 <__libc_init_array+0xc>
 8006a92:	00b3      	lsls	r3, r6, #2
 8006a94:	58eb      	ldr	r3, [r5, r3]
 8006a96:	4798      	blx	r3
 8006a98:	3601      	adds	r6, #1
 8006a9a:	e7f2      	b.n	8006a82 <__libc_init_array+0x1e>
 8006a9c:	08007610 	.word	0x08007610
 8006aa0:	08007610 	.word	0x08007610
 8006aa4:	08007610 	.word	0x08007610
 8006aa8:	08007614 	.word	0x08007614

08006aac <memcpy>:
 8006aac:	2300      	movs	r3, #0
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d100      	bne.n	8006ab6 <memcpy+0xa>
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	5ccc      	ldrb	r4, [r1, r3]
 8006ab8:	54c4      	strb	r4, [r0, r3]
 8006aba:	3301      	adds	r3, #1
 8006abc:	e7f8      	b.n	8006ab0 <memcpy+0x4>

08006abe <memset>:
 8006abe:	0003      	movs	r3, r0
 8006ac0:	1882      	adds	r2, r0, r2
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d100      	bne.n	8006ac8 <memset+0xa>
 8006ac6:	4770      	bx	lr
 8006ac8:	7019      	strb	r1, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	e7f9      	b.n	8006ac2 <memset+0x4>
	...

08006ad0 <siprintf>:
 8006ad0:	b40e      	push	{r1, r2, r3}
 8006ad2:	b500      	push	{lr}
 8006ad4:	490b      	ldr	r1, [pc, #44]	; (8006b04 <siprintf+0x34>)
 8006ad6:	b09c      	sub	sp, #112	; 0x70
 8006ad8:	ab1d      	add	r3, sp, #116	; 0x74
 8006ada:	9002      	str	r0, [sp, #8]
 8006adc:	9006      	str	r0, [sp, #24]
 8006ade:	9107      	str	r1, [sp, #28]
 8006ae0:	9104      	str	r1, [sp, #16]
 8006ae2:	4809      	ldr	r0, [pc, #36]	; (8006b08 <siprintf+0x38>)
 8006ae4:	4909      	ldr	r1, [pc, #36]	; (8006b0c <siprintf+0x3c>)
 8006ae6:	cb04      	ldmia	r3!, {r2}
 8006ae8:	9105      	str	r1, [sp, #20]
 8006aea:	6800      	ldr	r0, [r0, #0]
 8006aec:	a902      	add	r1, sp, #8
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	f000 f886 	bl	8006c00 <_svfiprintf_r>
 8006af4:	2300      	movs	r3, #0
 8006af6:	9a02      	ldr	r2, [sp, #8]
 8006af8:	7013      	strb	r3, [r2, #0]
 8006afa:	b01c      	add	sp, #112	; 0x70
 8006afc:	bc08      	pop	{r3}
 8006afe:	b003      	add	sp, #12
 8006b00:	4718      	bx	r3
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	7fffffff 	.word	0x7fffffff
 8006b08:	20000190 	.word	0x20000190
 8006b0c:	ffff0208 	.word	0xffff0208

08006b10 <strncat>:
 8006b10:	0003      	movs	r3, r0
 8006b12:	b530      	push	{r4, r5, lr}
 8006b14:	781c      	ldrb	r4, [r3, #0]
 8006b16:	2c00      	cmp	r4, #0
 8006b18:	d108      	bne.n	8006b2c <strncat+0x1c>
 8006b1a:	1889      	adds	r1, r1, r2
 8006b1c:	2a00      	cmp	r2, #0
 8006b1e:	d004      	beq.n	8006b2a <strncat+0x1a>
 8006b20:	4255      	negs	r5, r2
 8006b22:	5d4d      	ldrb	r5, [r1, r5]
 8006b24:	701d      	strb	r5, [r3, #0]
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	d102      	bne.n	8006b30 <strncat+0x20>
 8006b2a:	bd30      	pop	{r4, r5, pc}
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	e7f1      	b.n	8006b14 <strncat+0x4>
 8006b30:	2a01      	cmp	r2, #1
 8006b32:	d100      	bne.n	8006b36 <strncat+0x26>
 8006b34:	705c      	strb	r4, [r3, #1]
 8006b36:	3301      	adds	r3, #1
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	e7ef      	b.n	8006b1c <strncat+0xc>

08006b3c <__ssputs_r>:
 8006b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3e:	688e      	ldr	r6, [r1, #8]
 8006b40:	b085      	sub	sp, #20
 8006b42:	0007      	movs	r7, r0
 8006b44:	000c      	movs	r4, r1
 8006b46:	9203      	str	r2, [sp, #12]
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	429e      	cmp	r6, r3
 8006b4c:	d83c      	bhi.n	8006bc8 <__ssputs_r+0x8c>
 8006b4e:	2390      	movs	r3, #144	; 0x90
 8006b50:	898a      	ldrh	r2, [r1, #12]
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	421a      	tst	r2, r3
 8006b56:	d034      	beq.n	8006bc2 <__ssputs_r+0x86>
 8006b58:	2503      	movs	r5, #3
 8006b5a:	6909      	ldr	r1, [r1, #16]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	1a5b      	subs	r3, r3, r1
 8006b60:	9302      	str	r3, [sp, #8]
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	9802      	ldr	r0, [sp, #8]
 8006b66:	435d      	muls	r5, r3
 8006b68:	0feb      	lsrs	r3, r5, #31
 8006b6a:	195d      	adds	r5, r3, r5
 8006b6c:	9b01      	ldr	r3, [sp, #4]
 8006b6e:	106d      	asrs	r5, r5, #1
 8006b70:	3301      	adds	r3, #1
 8006b72:	181b      	adds	r3, r3, r0
 8006b74:	42ab      	cmp	r3, r5
 8006b76:	d900      	bls.n	8006b7a <__ssputs_r+0x3e>
 8006b78:	001d      	movs	r5, r3
 8006b7a:	0553      	lsls	r3, r2, #21
 8006b7c:	d532      	bpl.n	8006be4 <__ssputs_r+0xa8>
 8006b7e:	0029      	movs	r1, r5
 8006b80:	0038      	movs	r0, r7
 8006b82:	f000 fb27 	bl	80071d4 <_malloc_r>
 8006b86:	1e06      	subs	r6, r0, #0
 8006b88:	d109      	bne.n	8006b9e <__ssputs_r+0x62>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	603b      	str	r3, [r7, #0]
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	2001      	movs	r0, #1
 8006b92:	89a2      	ldrh	r2, [r4, #12]
 8006b94:	4240      	negs	r0, r0
 8006b96:	4313      	orrs	r3, r2
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	b005      	add	sp, #20
 8006b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9e:	9a02      	ldr	r2, [sp, #8]
 8006ba0:	6921      	ldr	r1, [r4, #16]
 8006ba2:	f7ff ff83 	bl	8006aac <memcpy>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <__ssputs_r+0xc0>)
 8006baa:	401a      	ands	r2, r3
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	9b02      	ldr	r3, [sp, #8]
 8006bb4:	6126      	str	r6, [r4, #16]
 8006bb6:	18f6      	adds	r6, r6, r3
 8006bb8:	6026      	str	r6, [r4, #0]
 8006bba:	6165      	str	r5, [r4, #20]
 8006bbc:	9e01      	ldr	r6, [sp, #4]
 8006bbe:	1aed      	subs	r5, r5, r3
 8006bc0:	60a5      	str	r5, [r4, #8]
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	429e      	cmp	r6, r3
 8006bc6:	d900      	bls.n	8006bca <__ssputs_r+0x8e>
 8006bc8:	9e01      	ldr	r6, [sp, #4]
 8006bca:	0032      	movs	r2, r6
 8006bcc:	9903      	ldr	r1, [sp, #12]
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	f000 faa3 	bl	800711a <memmove>
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	1b9b      	subs	r3, r3, r6
 8006bda:	60a3      	str	r3, [r4, #8]
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	199e      	adds	r6, r3, r6
 8006be0:	6026      	str	r6, [r4, #0]
 8006be2:	e7da      	b.n	8006b9a <__ssputs_r+0x5e>
 8006be4:	002a      	movs	r2, r5
 8006be6:	0038      	movs	r0, r7
 8006be8:	f000 fb52 	bl	8007290 <_realloc_r>
 8006bec:	1e06      	subs	r6, r0, #0
 8006bee:	d1e0      	bne.n	8006bb2 <__ssputs_r+0x76>
 8006bf0:	0038      	movs	r0, r7
 8006bf2:	6921      	ldr	r1, [r4, #16]
 8006bf4:	f000 faa4 	bl	8007140 <_free_r>
 8006bf8:	e7c7      	b.n	8006b8a <__ssputs_r+0x4e>
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	fffffb7f 	.word	0xfffffb7f

08006c00 <_svfiprintf_r>:
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	b0a1      	sub	sp, #132	; 0x84
 8006c04:	9003      	str	r0, [sp, #12]
 8006c06:	001d      	movs	r5, r3
 8006c08:	898b      	ldrh	r3, [r1, #12]
 8006c0a:	000f      	movs	r7, r1
 8006c0c:	0016      	movs	r6, r2
 8006c0e:	061b      	lsls	r3, r3, #24
 8006c10:	d511      	bpl.n	8006c36 <_svfiprintf_r+0x36>
 8006c12:	690b      	ldr	r3, [r1, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10e      	bne.n	8006c36 <_svfiprintf_r+0x36>
 8006c18:	2140      	movs	r1, #64	; 0x40
 8006c1a:	f000 fadb 	bl	80071d4 <_malloc_r>
 8006c1e:	6038      	str	r0, [r7, #0]
 8006c20:	6138      	str	r0, [r7, #16]
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d105      	bne.n	8006c32 <_svfiprintf_r+0x32>
 8006c26:	230c      	movs	r3, #12
 8006c28:	9a03      	ldr	r2, [sp, #12]
 8006c2a:	3801      	subs	r0, #1
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	b021      	add	sp, #132	; 0x84
 8006c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	2300      	movs	r3, #0
 8006c38:	ac08      	add	r4, sp, #32
 8006c3a:	6163      	str	r3, [r4, #20]
 8006c3c:	3320      	adds	r3, #32
 8006c3e:	7663      	strb	r3, [r4, #25]
 8006c40:	3310      	adds	r3, #16
 8006c42:	76a3      	strb	r3, [r4, #26]
 8006c44:	9507      	str	r5, [sp, #28]
 8006c46:	0035      	movs	r5, r6
 8006c48:	782b      	ldrb	r3, [r5, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <_svfiprintf_r+0x52>
 8006c4e:	2b25      	cmp	r3, #37	; 0x25
 8006c50:	d147      	bne.n	8006ce2 <_svfiprintf_r+0xe2>
 8006c52:	1bab      	subs	r3, r5, r6
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	42b5      	cmp	r5, r6
 8006c58:	d00c      	beq.n	8006c74 <_svfiprintf_r+0x74>
 8006c5a:	0032      	movs	r2, r6
 8006c5c:	0039      	movs	r1, r7
 8006c5e:	9803      	ldr	r0, [sp, #12]
 8006c60:	f7ff ff6c 	bl	8006b3c <__ssputs_r>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d100      	bne.n	8006c6a <_svfiprintf_r+0x6a>
 8006c68:	e0ae      	b.n	8006dc8 <_svfiprintf_r+0x1c8>
 8006c6a:	6962      	ldr	r2, [r4, #20]
 8006c6c:	9b05      	ldr	r3, [sp, #20]
 8006c6e:	4694      	mov	ip, r2
 8006c70:	4463      	add	r3, ip
 8006c72:	6163      	str	r3, [r4, #20]
 8006c74:	782b      	ldrb	r3, [r5, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d100      	bne.n	8006c7c <_svfiprintf_r+0x7c>
 8006c7a:	e0a5      	b.n	8006dc8 <_svfiprintf_r+0x1c8>
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4252      	negs	r2, r2
 8006c82:	6062      	str	r2, [r4, #4]
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	3254      	adds	r2, #84	; 0x54
 8006c88:	1852      	adds	r2, r2, r1
 8006c8a:	1c6e      	adds	r6, r5, #1
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	60e3      	str	r3, [r4, #12]
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	7013      	strb	r3, [r2, #0]
 8006c94:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c96:	2205      	movs	r2, #5
 8006c98:	7831      	ldrb	r1, [r6, #0]
 8006c9a:	4854      	ldr	r0, [pc, #336]	; (8006dec <_svfiprintf_r+0x1ec>)
 8006c9c:	f000 fa32 	bl	8007104 <memchr>
 8006ca0:	1c75      	adds	r5, r6, #1
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d11f      	bne.n	8006ce6 <_svfiprintf_r+0xe6>
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	06d3      	lsls	r3, r2, #27
 8006caa:	d504      	bpl.n	8006cb6 <_svfiprintf_r+0xb6>
 8006cac:	2353      	movs	r3, #83	; 0x53
 8006cae:	a904      	add	r1, sp, #16
 8006cb0:	185b      	adds	r3, r3, r1
 8006cb2:	2120      	movs	r1, #32
 8006cb4:	7019      	strb	r1, [r3, #0]
 8006cb6:	0713      	lsls	r3, r2, #28
 8006cb8:	d504      	bpl.n	8006cc4 <_svfiprintf_r+0xc4>
 8006cba:	2353      	movs	r3, #83	; 0x53
 8006cbc:	a904      	add	r1, sp, #16
 8006cbe:	185b      	adds	r3, r3, r1
 8006cc0:	212b      	movs	r1, #43	; 0x2b
 8006cc2:	7019      	strb	r1, [r3, #0]
 8006cc4:	7833      	ldrb	r3, [r6, #0]
 8006cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc8:	d016      	beq.n	8006cf8 <_svfiprintf_r+0xf8>
 8006cca:	0035      	movs	r5, r6
 8006ccc:	2100      	movs	r1, #0
 8006cce:	200a      	movs	r0, #10
 8006cd0:	68e3      	ldr	r3, [r4, #12]
 8006cd2:	782a      	ldrb	r2, [r5, #0]
 8006cd4:	1c6e      	adds	r6, r5, #1
 8006cd6:	3a30      	subs	r2, #48	; 0x30
 8006cd8:	2a09      	cmp	r2, #9
 8006cda:	d94e      	bls.n	8006d7a <_svfiprintf_r+0x17a>
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d111      	bne.n	8006d04 <_svfiprintf_r+0x104>
 8006ce0:	e017      	b.n	8006d12 <_svfiprintf_r+0x112>
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	e7b0      	b.n	8006c48 <_svfiprintf_r+0x48>
 8006ce6:	4b41      	ldr	r3, [pc, #260]	; (8006dec <_svfiprintf_r+0x1ec>)
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	1ac0      	subs	r0, r0, r3
 8006cec:	2301      	movs	r3, #1
 8006cee:	4083      	lsls	r3, r0
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	002e      	movs	r6, r5
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	e7ce      	b.n	8006c96 <_svfiprintf_r+0x96>
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	1d19      	adds	r1, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	9107      	str	r1, [sp, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	db01      	blt.n	8006d08 <_svfiprintf_r+0x108>
 8006d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d06:	e004      	b.n	8006d12 <_svfiprintf_r+0x112>
 8006d08:	425b      	negs	r3, r3
 8006d0a:	60e3      	str	r3, [r4, #12]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	782b      	ldrb	r3, [r5, #0]
 8006d14:	2b2e      	cmp	r3, #46	; 0x2e
 8006d16:	d10a      	bne.n	8006d2e <_svfiprintf_r+0x12e>
 8006d18:	786b      	ldrb	r3, [r5, #1]
 8006d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1c:	d135      	bne.n	8006d8a <_svfiprintf_r+0x18a>
 8006d1e:	9b07      	ldr	r3, [sp, #28]
 8006d20:	3502      	adds	r5, #2
 8006d22:	1d1a      	adds	r2, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	9207      	str	r2, [sp, #28]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	db2b      	blt.n	8006d84 <_svfiprintf_r+0x184>
 8006d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2e:	4e30      	ldr	r6, [pc, #192]	; (8006df0 <_svfiprintf_r+0x1f0>)
 8006d30:	2203      	movs	r2, #3
 8006d32:	0030      	movs	r0, r6
 8006d34:	7829      	ldrb	r1, [r5, #0]
 8006d36:	f000 f9e5 	bl	8007104 <memchr>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d006      	beq.n	8006d4c <_svfiprintf_r+0x14c>
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	1b80      	subs	r0, r0, r6
 8006d42:	4083      	lsls	r3, r0
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	3501      	adds	r5, #1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	7829      	ldrb	r1, [r5, #0]
 8006d4e:	2206      	movs	r2, #6
 8006d50:	4828      	ldr	r0, [pc, #160]	; (8006df4 <_svfiprintf_r+0x1f4>)
 8006d52:	1c6e      	adds	r6, r5, #1
 8006d54:	7621      	strb	r1, [r4, #24]
 8006d56:	f000 f9d5 	bl	8007104 <memchr>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d03c      	beq.n	8006dd8 <_svfiprintf_r+0x1d8>
 8006d5e:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <_svfiprintf_r+0x1f8>)
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d125      	bne.n	8006db0 <_svfiprintf_r+0x1b0>
 8006d64:	2207      	movs	r2, #7
 8006d66:	9b07      	ldr	r3, [sp, #28]
 8006d68:	3307      	adds	r3, #7
 8006d6a:	4393      	bics	r3, r2
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	9307      	str	r3, [sp, #28]
 8006d70:	6963      	ldr	r3, [r4, #20]
 8006d72:	9a04      	ldr	r2, [sp, #16]
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	6163      	str	r3, [r4, #20]
 8006d78:	e765      	b.n	8006c46 <_svfiprintf_r+0x46>
 8006d7a:	4343      	muls	r3, r0
 8006d7c:	0035      	movs	r5, r6
 8006d7e:	2101      	movs	r1, #1
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	e7a6      	b.n	8006cd2 <_svfiprintf_r+0xd2>
 8006d84:	2301      	movs	r3, #1
 8006d86:	425b      	negs	r3, r3
 8006d88:	e7d0      	b.n	8006d2c <_svfiprintf_r+0x12c>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	200a      	movs	r0, #10
 8006d8e:	001a      	movs	r2, r3
 8006d90:	3501      	adds	r5, #1
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	7829      	ldrb	r1, [r5, #0]
 8006d96:	1c6e      	adds	r6, r5, #1
 8006d98:	3930      	subs	r1, #48	; 0x30
 8006d9a:	2909      	cmp	r1, #9
 8006d9c:	d903      	bls.n	8006da6 <_svfiprintf_r+0x1a6>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0c5      	beq.n	8006d2e <_svfiprintf_r+0x12e>
 8006da2:	9209      	str	r2, [sp, #36]	; 0x24
 8006da4:	e7c3      	b.n	8006d2e <_svfiprintf_r+0x12e>
 8006da6:	4342      	muls	r2, r0
 8006da8:	0035      	movs	r5, r6
 8006daa:	2301      	movs	r3, #1
 8006dac:	1852      	adds	r2, r2, r1
 8006dae:	e7f1      	b.n	8006d94 <_svfiprintf_r+0x194>
 8006db0:	ab07      	add	r3, sp, #28
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	003a      	movs	r2, r7
 8006db6:	0021      	movs	r1, r4
 8006db8:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <_svfiprintf_r+0x1fc>)
 8006dba:	9803      	ldr	r0, [sp, #12]
 8006dbc:	e000      	b.n	8006dc0 <_svfiprintf_r+0x1c0>
 8006dbe:	bf00      	nop
 8006dc0:	9004      	str	r0, [sp, #16]
 8006dc2:	9b04      	ldr	r3, [sp, #16]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	d1d3      	bne.n	8006d70 <_svfiprintf_r+0x170>
 8006dc8:	89bb      	ldrh	r3, [r7, #12]
 8006dca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006dcc:	065b      	lsls	r3, r3, #25
 8006dce:	d400      	bmi.n	8006dd2 <_svfiprintf_r+0x1d2>
 8006dd0:	e72d      	b.n	8006c2e <_svfiprintf_r+0x2e>
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	4240      	negs	r0, r0
 8006dd6:	e72a      	b.n	8006c2e <_svfiprintf_r+0x2e>
 8006dd8:	ab07      	add	r3, sp, #28
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	003a      	movs	r2, r7
 8006dde:	0021      	movs	r1, r4
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <_svfiprintf_r+0x1fc>)
 8006de2:	9803      	ldr	r0, [sp, #12]
 8006de4:	f000 f87c 	bl	8006ee0 <_printf_i>
 8006de8:	e7ea      	b.n	8006dc0 <_svfiprintf_r+0x1c0>
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	080075d4 	.word	0x080075d4
 8006df0:	080075da 	.word	0x080075da
 8006df4:	080075de 	.word	0x080075de
 8006df8:	00000000 	.word	0x00000000
 8006dfc:	08006b3d 	.word	0x08006b3d

08006e00 <_printf_common>:
 8006e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e02:	0015      	movs	r5, r2
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	688a      	ldr	r2, [r1, #8]
 8006e08:	690b      	ldr	r3, [r1, #16]
 8006e0a:	000c      	movs	r4, r1
 8006e0c:	9000      	str	r0, [sp, #0]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	da00      	bge.n	8006e14 <_printf_common+0x14>
 8006e12:	0013      	movs	r3, r2
 8006e14:	0022      	movs	r2, r4
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	3243      	adds	r2, #67	; 0x43
 8006e1a:	7812      	ldrb	r2, [r2, #0]
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	d001      	beq.n	8006e24 <_printf_common+0x24>
 8006e20:	3301      	adds	r3, #1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	069b      	lsls	r3, r3, #26
 8006e28:	d502      	bpl.n	8006e30 <_printf_common+0x30>
 8006e2a:	682b      	ldr	r3, [r5, #0]
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	602b      	str	r3, [r5, #0]
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	2306      	movs	r3, #6
 8006e34:	0017      	movs	r7, r2
 8006e36:	401f      	ands	r7, r3
 8006e38:	421a      	tst	r2, r3
 8006e3a:	d027      	beq.n	8006e8c <_printf_common+0x8c>
 8006e3c:	0023      	movs	r3, r4
 8006e3e:	3343      	adds	r3, #67	; 0x43
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	1e5a      	subs	r2, r3, #1
 8006e44:	4193      	sbcs	r3, r2
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	0692      	lsls	r2, r2, #26
 8006e4a:	d430      	bmi.n	8006eae <_printf_common+0xae>
 8006e4c:	0022      	movs	r2, r4
 8006e4e:	9901      	ldr	r1, [sp, #4]
 8006e50:	9800      	ldr	r0, [sp, #0]
 8006e52:	9e08      	ldr	r6, [sp, #32]
 8006e54:	3243      	adds	r2, #67	; 0x43
 8006e56:	47b0      	blx	r6
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d025      	beq.n	8006ea8 <_printf_common+0xa8>
 8006e5c:	2306      	movs	r3, #6
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	682a      	ldr	r2, [r5, #0]
 8006e62:	68e1      	ldr	r1, [r4, #12]
 8006e64:	2500      	movs	r5, #0
 8006e66:	4003      	ands	r3, r0
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d103      	bne.n	8006e74 <_printf_common+0x74>
 8006e6c:	1a8d      	subs	r5, r1, r2
 8006e6e:	43eb      	mvns	r3, r5
 8006e70:	17db      	asrs	r3, r3, #31
 8006e72:	401d      	ands	r5, r3
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	dd01      	ble.n	8006e80 <_printf_common+0x80>
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	18ed      	adds	r5, r5, r3
 8006e80:	2700      	movs	r7, #0
 8006e82:	42bd      	cmp	r5, r7
 8006e84:	d120      	bne.n	8006ec8 <_printf_common+0xc8>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e010      	b.n	8006eac <_printf_common+0xac>
 8006e8a:	3701      	adds	r7, #1
 8006e8c:	68e3      	ldr	r3, [r4, #12]
 8006e8e:	682a      	ldr	r2, [r5, #0]
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	42bb      	cmp	r3, r7
 8006e94:	ddd2      	ble.n	8006e3c <_printf_common+0x3c>
 8006e96:	0022      	movs	r2, r4
 8006e98:	2301      	movs	r3, #1
 8006e9a:	9901      	ldr	r1, [sp, #4]
 8006e9c:	9800      	ldr	r0, [sp, #0]
 8006e9e:	9e08      	ldr	r6, [sp, #32]
 8006ea0:	3219      	adds	r2, #25
 8006ea2:	47b0      	blx	r6
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d1f0      	bne.n	8006e8a <_printf_common+0x8a>
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	4240      	negs	r0, r0
 8006eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eae:	2030      	movs	r0, #48	; 0x30
 8006eb0:	18e1      	adds	r1, r4, r3
 8006eb2:	3143      	adds	r1, #67	; 0x43
 8006eb4:	7008      	strb	r0, [r1, #0]
 8006eb6:	0021      	movs	r1, r4
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	3145      	adds	r1, #69	; 0x45
 8006ebc:	7809      	ldrb	r1, [r1, #0]
 8006ebe:	18a2      	adds	r2, r4, r2
 8006ec0:	3243      	adds	r2, #67	; 0x43
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	7011      	strb	r1, [r2, #0]
 8006ec6:	e7c1      	b.n	8006e4c <_printf_common+0x4c>
 8006ec8:	0022      	movs	r2, r4
 8006eca:	2301      	movs	r3, #1
 8006ecc:	9901      	ldr	r1, [sp, #4]
 8006ece:	9800      	ldr	r0, [sp, #0]
 8006ed0:	9e08      	ldr	r6, [sp, #32]
 8006ed2:	321a      	adds	r2, #26
 8006ed4:	47b0      	blx	r6
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d0e6      	beq.n	8006ea8 <_printf_common+0xa8>
 8006eda:	3701      	adds	r7, #1
 8006edc:	e7d1      	b.n	8006e82 <_printf_common+0x82>
	...

08006ee0 <_printf_i>:
 8006ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee2:	b08b      	sub	sp, #44	; 0x2c
 8006ee4:	9206      	str	r2, [sp, #24]
 8006ee6:	000a      	movs	r2, r1
 8006ee8:	3243      	adds	r2, #67	; 0x43
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	9005      	str	r0, [sp, #20]
 8006eee:	9204      	str	r2, [sp, #16]
 8006ef0:	7e0a      	ldrb	r2, [r1, #24]
 8006ef2:	000c      	movs	r4, r1
 8006ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ef6:	2a78      	cmp	r2, #120	; 0x78
 8006ef8:	d806      	bhi.n	8006f08 <_printf_i+0x28>
 8006efa:	2a62      	cmp	r2, #98	; 0x62
 8006efc:	d808      	bhi.n	8006f10 <_printf_i+0x30>
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	d100      	bne.n	8006f04 <_printf_i+0x24>
 8006f02:	e0c0      	b.n	8007086 <_printf_i+0x1a6>
 8006f04:	2a58      	cmp	r2, #88	; 0x58
 8006f06:	d052      	beq.n	8006fae <_printf_i+0xce>
 8006f08:	0026      	movs	r6, r4
 8006f0a:	3642      	adds	r6, #66	; 0x42
 8006f0c:	7032      	strb	r2, [r6, #0]
 8006f0e:	e022      	b.n	8006f56 <_printf_i+0x76>
 8006f10:	0010      	movs	r0, r2
 8006f12:	3863      	subs	r0, #99	; 0x63
 8006f14:	2815      	cmp	r0, #21
 8006f16:	d8f7      	bhi.n	8006f08 <_printf_i+0x28>
 8006f18:	f7f9 f8fe 	bl	8000118 <__gnu_thumb1_case_shi>
 8006f1c:	001f0016 	.word	0x001f0016
 8006f20:	fff6fff6 	.word	0xfff6fff6
 8006f24:	fff6fff6 	.word	0xfff6fff6
 8006f28:	fff6001f 	.word	0xfff6001f
 8006f2c:	fff6fff6 	.word	0xfff6fff6
 8006f30:	00a8fff6 	.word	0x00a8fff6
 8006f34:	009a0036 	.word	0x009a0036
 8006f38:	fff6fff6 	.word	0xfff6fff6
 8006f3c:	fff600b9 	.word	0xfff600b9
 8006f40:	fff60036 	.word	0xfff60036
 8006f44:	009efff6 	.word	0x009efff6
 8006f48:	0026      	movs	r6, r4
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	3642      	adds	r6, #66	; 0x42
 8006f4e:	1d11      	adds	r1, r2, #4
 8006f50:	6019      	str	r1, [r3, #0]
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	7033      	strb	r3, [r6, #0]
 8006f56:	2301      	movs	r3, #1
 8006f58:	e0a7      	b.n	80070aa <_printf_i+0x1ca>
 8006f5a:	6808      	ldr	r0, [r1, #0]
 8006f5c:	6819      	ldr	r1, [r3, #0]
 8006f5e:	1d0a      	adds	r2, r1, #4
 8006f60:	0605      	lsls	r5, r0, #24
 8006f62:	d50b      	bpl.n	8006f7c <_printf_i+0x9c>
 8006f64:	680d      	ldr	r5, [r1, #0]
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	2d00      	cmp	r5, #0
 8006f6a:	da03      	bge.n	8006f74 <_printf_i+0x94>
 8006f6c:	232d      	movs	r3, #45	; 0x2d
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	426d      	negs	r5, r5
 8006f72:	7013      	strb	r3, [r2, #0]
 8006f74:	4b61      	ldr	r3, [pc, #388]	; (80070fc <_printf_i+0x21c>)
 8006f76:	270a      	movs	r7, #10
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	e032      	b.n	8006fe2 <_printf_i+0x102>
 8006f7c:	680d      	ldr	r5, [r1, #0]
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	0641      	lsls	r1, r0, #25
 8006f82:	d5f1      	bpl.n	8006f68 <_printf_i+0x88>
 8006f84:	b22d      	sxth	r5, r5
 8006f86:	e7ef      	b.n	8006f68 <_printf_i+0x88>
 8006f88:	680d      	ldr	r5, [r1, #0]
 8006f8a:	6819      	ldr	r1, [r3, #0]
 8006f8c:	1d08      	adds	r0, r1, #4
 8006f8e:	6018      	str	r0, [r3, #0]
 8006f90:	062e      	lsls	r6, r5, #24
 8006f92:	d501      	bpl.n	8006f98 <_printf_i+0xb8>
 8006f94:	680d      	ldr	r5, [r1, #0]
 8006f96:	e003      	b.n	8006fa0 <_printf_i+0xc0>
 8006f98:	066d      	lsls	r5, r5, #25
 8006f9a:	d5fb      	bpl.n	8006f94 <_printf_i+0xb4>
 8006f9c:	680d      	ldr	r5, [r1, #0]
 8006f9e:	b2ad      	uxth	r5, r5
 8006fa0:	4b56      	ldr	r3, [pc, #344]	; (80070fc <_printf_i+0x21c>)
 8006fa2:	270a      	movs	r7, #10
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	2a6f      	cmp	r2, #111	; 0x6f
 8006fa8:	d117      	bne.n	8006fda <_printf_i+0xfa>
 8006faa:	2708      	movs	r7, #8
 8006fac:	e015      	b.n	8006fda <_printf_i+0xfa>
 8006fae:	3145      	adds	r1, #69	; 0x45
 8006fb0:	700a      	strb	r2, [r1, #0]
 8006fb2:	4a52      	ldr	r2, [pc, #328]	; (80070fc <_printf_i+0x21c>)
 8006fb4:	9203      	str	r2, [sp, #12]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	6821      	ldr	r1, [r4, #0]
 8006fba:	ca20      	ldmia	r2!, {r5}
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	0608      	lsls	r0, r1, #24
 8006fc0:	d550      	bpl.n	8007064 <_printf_i+0x184>
 8006fc2:	07cb      	lsls	r3, r1, #31
 8006fc4:	d502      	bpl.n	8006fcc <_printf_i+0xec>
 8006fc6:	2320      	movs	r3, #32
 8006fc8:	4319      	orrs	r1, r3
 8006fca:	6021      	str	r1, [r4, #0]
 8006fcc:	2710      	movs	r7, #16
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	d103      	bne.n	8006fda <_printf_i+0xfa>
 8006fd2:	2320      	movs	r3, #32
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	439a      	bics	r2, r3
 8006fd8:	6022      	str	r2, [r4, #0]
 8006fda:	0023      	movs	r3, r4
 8006fdc:	2200      	movs	r2, #0
 8006fde:	3343      	adds	r3, #67	; 0x43
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	60a3      	str	r3, [r4, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	db03      	blt.n	8006ff2 <_printf_i+0x112>
 8006fea:	2204      	movs	r2, #4
 8006fec:	6821      	ldr	r1, [r4, #0]
 8006fee:	4391      	bics	r1, r2
 8006ff0:	6021      	str	r1, [r4, #0]
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	d102      	bne.n	8006ffc <_printf_i+0x11c>
 8006ff6:	9e04      	ldr	r6, [sp, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00c      	beq.n	8007016 <_printf_i+0x136>
 8006ffc:	9e04      	ldr	r6, [sp, #16]
 8006ffe:	0028      	movs	r0, r5
 8007000:	0039      	movs	r1, r7
 8007002:	f7f9 f919 	bl	8000238 <__aeabi_uidivmod>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	3e01      	subs	r6, #1
 800700a:	5c5b      	ldrb	r3, [r3, r1]
 800700c:	7033      	strb	r3, [r6, #0]
 800700e:	002b      	movs	r3, r5
 8007010:	0005      	movs	r5, r0
 8007012:	429f      	cmp	r7, r3
 8007014:	d9f3      	bls.n	8006ffe <_printf_i+0x11e>
 8007016:	2f08      	cmp	r7, #8
 8007018:	d109      	bne.n	800702e <_printf_i+0x14e>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	07db      	lsls	r3, r3, #31
 800701e:	d506      	bpl.n	800702e <_printf_i+0x14e>
 8007020:	6863      	ldr	r3, [r4, #4]
 8007022:	6922      	ldr	r2, [r4, #16]
 8007024:	4293      	cmp	r3, r2
 8007026:	dc02      	bgt.n	800702e <_printf_i+0x14e>
 8007028:	2330      	movs	r3, #48	; 0x30
 800702a:	3e01      	subs	r6, #1
 800702c:	7033      	strb	r3, [r6, #0]
 800702e:	9b04      	ldr	r3, [sp, #16]
 8007030:	1b9b      	subs	r3, r3, r6
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	9b07      	ldr	r3, [sp, #28]
 8007036:	0021      	movs	r1, r4
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	9805      	ldr	r0, [sp, #20]
 800703c:	9b06      	ldr	r3, [sp, #24]
 800703e:	aa09      	add	r2, sp, #36	; 0x24
 8007040:	f7ff fede 	bl	8006e00 <_printf_common>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d135      	bne.n	80070b4 <_printf_i+0x1d4>
 8007048:	2001      	movs	r0, #1
 800704a:	4240      	negs	r0, r0
 800704c:	b00b      	add	sp, #44	; 0x2c
 800704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007050:	2220      	movs	r2, #32
 8007052:	6809      	ldr	r1, [r1, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	6022      	str	r2, [r4, #0]
 8007058:	0022      	movs	r2, r4
 800705a:	2178      	movs	r1, #120	; 0x78
 800705c:	3245      	adds	r2, #69	; 0x45
 800705e:	7011      	strb	r1, [r2, #0]
 8007060:	4a27      	ldr	r2, [pc, #156]	; (8007100 <_printf_i+0x220>)
 8007062:	e7a7      	b.n	8006fb4 <_printf_i+0xd4>
 8007064:	0648      	lsls	r0, r1, #25
 8007066:	d5ac      	bpl.n	8006fc2 <_printf_i+0xe2>
 8007068:	b2ad      	uxth	r5, r5
 800706a:	e7aa      	b.n	8006fc2 <_printf_i+0xe2>
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	680d      	ldr	r5, [r1, #0]
 8007070:	1d10      	adds	r0, r2, #4
 8007072:	6949      	ldr	r1, [r1, #20]
 8007074:	6018      	str	r0, [r3, #0]
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	062e      	lsls	r6, r5, #24
 800707a:	d501      	bpl.n	8007080 <_printf_i+0x1a0>
 800707c:	6019      	str	r1, [r3, #0]
 800707e:	e002      	b.n	8007086 <_printf_i+0x1a6>
 8007080:	066d      	lsls	r5, r5, #25
 8007082:	d5fb      	bpl.n	800707c <_printf_i+0x19c>
 8007084:	8019      	strh	r1, [r3, #0]
 8007086:	2300      	movs	r3, #0
 8007088:	9e04      	ldr	r6, [sp, #16]
 800708a:	6123      	str	r3, [r4, #16]
 800708c:	e7d2      	b.n	8007034 <_printf_i+0x154>
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	1d11      	adds	r1, r2, #4
 8007092:	6019      	str	r1, [r3, #0]
 8007094:	6816      	ldr	r6, [r2, #0]
 8007096:	2100      	movs	r1, #0
 8007098:	0030      	movs	r0, r6
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	f000 f832 	bl	8007104 <memchr>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d001      	beq.n	80070a8 <_printf_i+0x1c8>
 80070a4:	1b80      	subs	r0, r0, r6
 80070a6:	6060      	str	r0, [r4, #4]
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	6123      	str	r3, [r4, #16]
 80070ac:	2300      	movs	r3, #0
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	7013      	strb	r3, [r2, #0]
 80070b2:	e7bf      	b.n	8007034 <_printf_i+0x154>
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	0032      	movs	r2, r6
 80070b8:	9906      	ldr	r1, [sp, #24]
 80070ba:	9805      	ldr	r0, [sp, #20]
 80070bc:	9d07      	ldr	r5, [sp, #28]
 80070be:	47a8      	blx	r5
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d0c1      	beq.n	8007048 <_printf_i+0x168>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	079b      	lsls	r3, r3, #30
 80070c8:	d415      	bmi.n	80070f6 <_printf_i+0x216>
 80070ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070cc:	68e0      	ldr	r0, [r4, #12]
 80070ce:	4298      	cmp	r0, r3
 80070d0:	dabc      	bge.n	800704c <_printf_i+0x16c>
 80070d2:	0018      	movs	r0, r3
 80070d4:	e7ba      	b.n	800704c <_printf_i+0x16c>
 80070d6:	0022      	movs	r2, r4
 80070d8:	2301      	movs	r3, #1
 80070da:	9906      	ldr	r1, [sp, #24]
 80070dc:	9805      	ldr	r0, [sp, #20]
 80070de:	9e07      	ldr	r6, [sp, #28]
 80070e0:	3219      	adds	r2, #25
 80070e2:	47b0      	blx	r6
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d0af      	beq.n	8007048 <_printf_i+0x168>
 80070e8:	3501      	adds	r5, #1
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dcf0      	bgt.n	80070d6 <_printf_i+0x1f6>
 80070f4:	e7e9      	b.n	80070ca <_printf_i+0x1ea>
 80070f6:	2500      	movs	r5, #0
 80070f8:	e7f7      	b.n	80070ea <_printf_i+0x20a>
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	080075e5 	.word	0x080075e5
 8007100:	080075f6 	.word	0x080075f6

08007104 <memchr>:
 8007104:	b2c9      	uxtb	r1, r1
 8007106:	1882      	adds	r2, r0, r2
 8007108:	4290      	cmp	r0, r2
 800710a:	d101      	bne.n	8007110 <memchr+0xc>
 800710c:	2000      	movs	r0, #0
 800710e:	4770      	bx	lr
 8007110:	7803      	ldrb	r3, [r0, #0]
 8007112:	428b      	cmp	r3, r1
 8007114:	d0fb      	beq.n	800710e <memchr+0xa>
 8007116:	3001      	adds	r0, #1
 8007118:	e7f6      	b.n	8007108 <memchr+0x4>

0800711a <memmove>:
 800711a:	b510      	push	{r4, lr}
 800711c:	4288      	cmp	r0, r1
 800711e:	d902      	bls.n	8007126 <memmove+0xc>
 8007120:	188b      	adds	r3, r1, r2
 8007122:	4298      	cmp	r0, r3
 8007124:	d303      	bcc.n	800712e <memmove+0x14>
 8007126:	2300      	movs	r3, #0
 8007128:	e007      	b.n	800713a <memmove+0x20>
 800712a:	5c8b      	ldrb	r3, [r1, r2]
 800712c:	5483      	strb	r3, [r0, r2]
 800712e:	3a01      	subs	r2, #1
 8007130:	d2fb      	bcs.n	800712a <memmove+0x10>
 8007132:	bd10      	pop	{r4, pc}
 8007134:	5ccc      	ldrb	r4, [r1, r3]
 8007136:	54c4      	strb	r4, [r0, r3]
 8007138:	3301      	adds	r3, #1
 800713a:	429a      	cmp	r2, r3
 800713c:	d1fa      	bne.n	8007134 <memmove+0x1a>
 800713e:	e7f8      	b.n	8007132 <memmove+0x18>

08007140 <_free_r>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	0005      	movs	r5, r0
 8007144:	2900      	cmp	r1, #0
 8007146:	d010      	beq.n	800716a <_free_r+0x2a>
 8007148:	1f0c      	subs	r4, r1, #4
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	da00      	bge.n	8007152 <_free_r+0x12>
 8007150:	18e4      	adds	r4, r4, r3
 8007152:	0028      	movs	r0, r5
 8007154:	f000 f8d4 	bl	8007300 <__malloc_lock>
 8007158:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <_free_r+0x90>)
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <_free_r+0x2c>
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	6014      	str	r4, [r2, #0]
 8007164:	0028      	movs	r0, r5
 8007166:	f000 f8d3 	bl	8007310 <__malloc_unlock>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	42a3      	cmp	r3, r4
 800716e:	d908      	bls.n	8007182 <_free_r+0x42>
 8007170:	6821      	ldr	r1, [r4, #0]
 8007172:	1860      	adds	r0, r4, r1
 8007174:	4283      	cmp	r3, r0
 8007176:	d1f3      	bne.n	8007160 <_free_r+0x20>
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	1841      	adds	r1, r0, r1
 800717e:	6021      	str	r1, [r4, #0]
 8007180:	e7ee      	b.n	8007160 <_free_r+0x20>
 8007182:	001a      	movs	r2, r3
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <_free_r+0x4e>
 800718a:	42a3      	cmp	r3, r4
 800718c:	d9f9      	bls.n	8007182 <_free_r+0x42>
 800718e:	6811      	ldr	r1, [r2, #0]
 8007190:	1850      	adds	r0, r2, r1
 8007192:	42a0      	cmp	r0, r4
 8007194:	d10b      	bne.n	80071ae <_free_r+0x6e>
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1809      	adds	r1, r1, r0
 800719a:	1850      	adds	r0, r2, r1
 800719c:	6011      	str	r1, [r2, #0]
 800719e:	4283      	cmp	r3, r0
 80071a0:	d1e0      	bne.n	8007164 <_free_r+0x24>
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	1841      	adds	r1, r0, r1
 80071a8:	6011      	str	r1, [r2, #0]
 80071aa:	6053      	str	r3, [r2, #4]
 80071ac:	e7da      	b.n	8007164 <_free_r+0x24>
 80071ae:	42a0      	cmp	r0, r4
 80071b0:	d902      	bls.n	80071b8 <_free_r+0x78>
 80071b2:	230c      	movs	r3, #12
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	e7d5      	b.n	8007164 <_free_r+0x24>
 80071b8:	6821      	ldr	r1, [r4, #0]
 80071ba:	1860      	adds	r0, r4, r1
 80071bc:	4283      	cmp	r3, r0
 80071be:	d103      	bne.n	80071c8 <_free_r+0x88>
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	1841      	adds	r1, r0, r1
 80071c6:	6021      	str	r1, [r4, #0]
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	6054      	str	r4, [r2, #4]
 80071cc:	e7ca      	b.n	8007164 <_free_r+0x24>
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	20000260 	.word	0x20000260

080071d4 <_malloc_r>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	2303      	movs	r3, #3
 80071d8:	1ccd      	adds	r5, r1, #3
 80071da:	439d      	bics	r5, r3
 80071dc:	3508      	adds	r5, #8
 80071de:	0006      	movs	r6, r0
 80071e0:	2d0c      	cmp	r5, #12
 80071e2:	d21f      	bcs.n	8007224 <_malloc_r+0x50>
 80071e4:	250c      	movs	r5, #12
 80071e6:	42a9      	cmp	r1, r5
 80071e8:	d81e      	bhi.n	8007228 <_malloc_r+0x54>
 80071ea:	0030      	movs	r0, r6
 80071ec:	f000 f888 	bl	8007300 <__malloc_lock>
 80071f0:	4925      	ldr	r1, [pc, #148]	; (8007288 <_malloc_r+0xb4>)
 80071f2:	680a      	ldr	r2, [r1, #0]
 80071f4:	0014      	movs	r4, r2
 80071f6:	2c00      	cmp	r4, #0
 80071f8:	d11a      	bne.n	8007230 <_malloc_r+0x5c>
 80071fa:	4f24      	ldr	r7, [pc, #144]	; (800728c <_malloc_r+0xb8>)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <_malloc_r+0x38>
 8007202:	0021      	movs	r1, r4
 8007204:	0030      	movs	r0, r6
 8007206:	f000 f869 	bl	80072dc <_sbrk_r>
 800720a:	6038      	str	r0, [r7, #0]
 800720c:	0029      	movs	r1, r5
 800720e:	0030      	movs	r0, r6
 8007210:	f000 f864 	bl	80072dc <_sbrk_r>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d12b      	bne.n	8007270 <_malloc_r+0x9c>
 8007218:	230c      	movs	r3, #12
 800721a:	0030      	movs	r0, r6
 800721c:	6033      	str	r3, [r6, #0]
 800721e:	f000 f877 	bl	8007310 <__malloc_unlock>
 8007222:	e003      	b.n	800722c <_malloc_r+0x58>
 8007224:	2d00      	cmp	r5, #0
 8007226:	dade      	bge.n	80071e6 <_malloc_r+0x12>
 8007228:	230c      	movs	r3, #12
 800722a:	6033      	str	r3, [r6, #0]
 800722c:	2000      	movs	r0, #0
 800722e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	1b5b      	subs	r3, r3, r5
 8007234:	d419      	bmi.n	800726a <_malloc_r+0x96>
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d903      	bls.n	8007242 <_malloc_r+0x6e>
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	18e4      	adds	r4, r4, r3
 800723e:	6025      	str	r5, [r4, #0]
 8007240:	e003      	b.n	800724a <_malloc_r+0x76>
 8007242:	6863      	ldr	r3, [r4, #4]
 8007244:	42a2      	cmp	r2, r4
 8007246:	d10e      	bne.n	8007266 <_malloc_r+0x92>
 8007248:	600b      	str	r3, [r1, #0]
 800724a:	0030      	movs	r0, r6
 800724c:	f000 f860 	bl	8007310 <__malloc_unlock>
 8007250:	0020      	movs	r0, r4
 8007252:	2207      	movs	r2, #7
 8007254:	300b      	adds	r0, #11
 8007256:	1d23      	adds	r3, r4, #4
 8007258:	4390      	bics	r0, r2
 800725a:	1ac2      	subs	r2, r0, r3
 800725c:	4298      	cmp	r0, r3
 800725e:	d0e6      	beq.n	800722e <_malloc_r+0x5a>
 8007260:	1a1b      	subs	r3, r3, r0
 8007262:	50a3      	str	r3, [r4, r2]
 8007264:	e7e3      	b.n	800722e <_malloc_r+0x5a>
 8007266:	6053      	str	r3, [r2, #4]
 8007268:	e7ef      	b.n	800724a <_malloc_r+0x76>
 800726a:	0022      	movs	r2, r4
 800726c:	6864      	ldr	r4, [r4, #4]
 800726e:	e7c2      	b.n	80071f6 <_malloc_r+0x22>
 8007270:	2303      	movs	r3, #3
 8007272:	1cc4      	adds	r4, r0, #3
 8007274:	439c      	bics	r4, r3
 8007276:	42a0      	cmp	r0, r4
 8007278:	d0e1      	beq.n	800723e <_malloc_r+0x6a>
 800727a:	1a21      	subs	r1, r4, r0
 800727c:	0030      	movs	r0, r6
 800727e:	f000 f82d 	bl	80072dc <_sbrk_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d1db      	bne.n	800723e <_malloc_r+0x6a>
 8007286:	e7c7      	b.n	8007218 <_malloc_r+0x44>
 8007288:	20000260 	.word	0x20000260
 800728c:	20000264 	.word	0x20000264

08007290 <_realloc_r>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	0007      	movs	r7, r0
 8007294:	000d      	movs	r5, r1
 8007296:	0016      	movs	r6, r2
 8007298:	2900      	cmp	r1, #0
 800729a:	d105      	bne.n	80072a8 <_realloc_r+0x18>
 800729c:	0011      	movs	r1, r2
 800729e:	f7ff ff99 	bl	80071d4 <_malloc_r>
 80072a2:	0004      	movs	r4, r0
 80072a4:	0020      	movs	r0, r4
 80072a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	d103      	bne.n	80072b4 <_realloc_r+0x24>
 80072ac:	f7ff ff48 	bl	8007140 <_free_r>
 80072b0:	0034      	movs	r4, r6
 80072b2:	e7f7      	b.n	80072a4 <_realloc_r+0x14>
 80072b4:	f000 f834 	bl	8007320 <_malloc_usable_size_r>
 80072b8:	002c      	movs	r4, r5
 80072ba:	42b0      	cmp	r0, r6
 80072bc:	d2f2      	bcs.n	80072a4 <_realloc_r+0x14>
 80072be:	0031      	movs	r1, r6
 80072c0:	0038      	movs	r0, r7
 80072c2:	f7ff ff87 	bl	80071d4 <_malloc_r>
 80072c6:	1e04      	subs	r4, r0, #0
 80072c8:	d0ec      	beq.n	80072a4 <_realloc_r+0x14>
 80072ca:	0029      	movs	r1, r5
 80072cc:	0032      	movs	r2, r6
 80072ce:	f7ff fbed 	bl	8006aac <memcpy>
 80072d2:	0029      	movs	r1, r5
 80072d4:	0038      	movs	r0, r7
 80072d6:	f7ff ff33 	bl	8007140 <_free_r>
 80072da:	e7e3      	b.n	80072a4 <_realloc_r+0x14>

080072dc <_sbrk_r>:
 80072dc:	2300      	movs	r3, #0
 80072de:	b570      	push	{r4, r5, r6, lr}
 80072e0:	4d06      	ldr	r5, [pc, #24]	; (80072fc <_sbrk_r+0x20>)
 80072e2:	0004      	movs	r4, r0
 80072e4:	0008      	movs	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fb fdb0 	bl	8002e4c <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d103      	bne.n	80072f8 <_sbrk_r+0x1c>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d000      	beq.n	80072f8 <_sbrk_r+0x1c>
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	bd70      	pop	{r4, r5, r6, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	200004c8 	.word	0x200004c8

08007300 <__malloc_lock>:
 8007300:	b510      	push	{r4, lr}
 8007302:	4802      	ldr	r0, [pc, #8]	; (800730c <__malloc_lock+0xc>)
 8007304:	f000 f814 	bl	8007330 <__retarget_lock_acquire_recursive>
 8007308:	bd10      	pop	{r4, pc}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	200004d0 	.word	0x200004d0

08007310 <__malloc_unlock>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4802      	ldr	r0, [pc, #8]	; (800731c <__malloc_unlock+0xc>)
 8007314:	f000 f80d 	bl	8007332 <__retarget_lock_release_recursive>
 8007318:	bd10      	pop	{r4, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	200004d0 	.word	0x200004d0

08007320 <_malloc_usable_size_r>:
 8007320:	1f0b      	subs	r3, r1, #4
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	1f18      	subs	r0, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	da01      	bge.n	800732e <_malloc_usable_size_r+0xe>
 800732a:	580b      	ldr	r3, [r1, r0]
 800732c:	18c0      	adds	r0, r0, r3
 800732e:	4770      	bx	lr

08007330 <__retarget_lock_acquire_recursive>:
 8007330:	4770      	bx	lr

08007332 <__retarget_lock_release_recursive>:
 8007332:	4770      	bx	lr

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
