
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006010  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f0  080062f0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f8  080062f8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08006300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001f4  080064f4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080064f4  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012120  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fa  00000000  00000000  0003233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012df6  00000000  00000000  00036490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdc0  00000000  00000000  00049286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068048  00000000  00000000  00059046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c108e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000c10e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080060b8 	.word	0x080060b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	080060b8 	.word	0x080060b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8ba 	bl	8000640 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8b5 	bl	8000640 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzdi2>:
 8000640:	b510      	push	{r4, lr}
 8000642:	2900      	cmp	r1, #0
 8000644:	d103      	bne.n	800064e <__clzdi2+0xe>
 8000646:	f000 f807 	bl	8000658 <__clzsi2>
 800064a:	3020      	adds	r0, #32
 800064c:	e002      	b.n	8000654 <__clzdi2+0x14>
 800064e:	1c08      	adds	r0, r1, #0
 8000650:	f000 f802 	bl	8000658 <__clzsi2>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <InputSDIO>:
**Name: 	vSpi3Init
**Func: 	Init Spi-3 Config
**Note:
**********************************************************/
void InputSDIO(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	240c      	movs	r4, #12
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f004 fc88 	bl	8004fba <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <InputSDIO+0x70>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <InputSDIO+0x70>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <InputSDIO+0x70>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <InputSDIO+0x70>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <InputSDIO+0x70>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <InputSDIO+0x70>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	00d2      	lsls	r2, r2, #3
 80006e0:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(SDIO_GPIO_Port, &GPIO_InitStruct);
 80006ee:	193a      	adds	r2, r7, r4
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 f96a 	bl	80029d0 <HAL_GPIO_Init>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b009      	add	sp, #36	; 0x24
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	40021000 	.word	0x40021000

08000708 <OutputSDIO>:
void OutputSDIO(){
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	240c      	movs	r4, #12
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2314      	movs	r3, #20
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f004 fc4e 	bl	8004fba <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <OutputSDIO+0x88>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <OutputSDIO+0x88>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <OutputSDIO+0x88>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <OutputSDIO+0x88>)
 8000738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <OutputSDIO+0x88>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <OutputSDIO+0x88>)
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	00d9      	lsls	r1, r3, #3
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2200      	movs	r2, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fac4 	bl	8002ce6 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	00d2      	lsls	r2, r2, #3
 8000764:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	193a      	adds	r2, r7, r4
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f925 	bl	80029d0 <HAL_GPIO_Init>


}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b009      	add	sp, #36	; 0x24
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <OutputSDCK>:

void OutputSDCK(void){
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 fc08 	bl	8004fba <memset>

	  	  /* GPIO Ports Clock Enable */
	  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <OutputSDCK+0x88>)
 80007ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <OutputSDCK+0x88>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	430a      	orrs	r2, r1
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <OutputSDCK+0x88>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
	  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <OutputSDCK+0x88>)
 80007c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <OutputSDCK+0x88>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <OutputSDCK+0x88>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

	  	  /*Configure GPIO pin Output Level */
	  	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	0099      	lsls	r1, r3, #2
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2200      	movs	r2, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fa7e 	bl	8002ce6 <HAL_GPIO_WritePin>

	  	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  	  GPIO_InitStruct.Pin = SCLK_Pin;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	601a      	str	r2, [r3, #0]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
	  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
	  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	193a      	adds	r2, r7, r4
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f002 f8df 	bl	80029d0 <HAL_GPIO_Init>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	; 0x24
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <OutputFCSB>:

void OutputFCSB(void){
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	240c      	movs	r4, #12
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2314      	movs	r3, #20
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 fbc2 	bl	8004fba <memset>

		  	  /* GPIO Ports Clock Enable */
		  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <OutputFCSB+0x84>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <OutputFCSB+0x84>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <OutputFCSB+0x84>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
		  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <OutputFCSB+0x84>)
 8000850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <OutputFCSB+0x84>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <OutputFCSB+0x84>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2200      	movs	r2, #0
 800086c:	2104      	movs	r1, #4
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fa39 	bl	8002ce6 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2204      	movs	r2, #4
 800087a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	187a      	adds	r2, r7, r1
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f002 f89a 	bl	80029d0 <HAL_GPIO_Init>


}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b009      	add	sp, #36	; 0x24
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <OutputCSB>:

void OutputCSB(void){
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	240c      	movs	r4, #12
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f004 fb7e 	bl	8004fba <memset>

	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <OutputCSB+0x84>)
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <OutputCSB+0x84>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	430a      	orrs	r2, r1
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <OutputCSB+0x84>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <OutputCSB+0x84>)
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <OutputCSB+0x84>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <OutputCSB+0x84>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 f9f5 	bl	8002ce6 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = CSB_Pin;
 80008fc:	0021      	movs	r1, r4
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2201      	movs	r2, #1
 8000908:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	187a      	adds	r2, r7, r1
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f856 	bl	80029d0 <HAL_GPIO_Init>
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b009      	add	sp, #36	; 0x24
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40021000 	.word	0x40021000

08000930 <_delay_us>:
void _delay_us(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
 	// HAL_UART_Transmit( &hlpuart1, (uint8_t *)"giriyor\r\n",9, 100);

	//
	  	//  }
	 //HAL_Delay(1);
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <vSpi3Init>:
void vSpi3Init(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
	OutputCSB();
 800093e:	f7ff ffb3 	bl	80008a8 <OutputCSB>
	OutputFCSB();
 8000942:	f7ff ff6d 	bl	8000820 <OutputFCSB>
	OutputSDCK();
 8000946:	f7ff ff25 	bl	8000794 <OutputSDCK>
	OutputSDIO();
 800094a:	f7ff fedd 	bl	8000708 <OutputSDIO>

	SetCSB();
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2201      	movs	r2, #1
 8000954:	2102      	movs	r1, #2
 8000956:	0018      	movs	r0, r3
 8000958:	f002 f9c5 	bl	8002ce6 <HAL_GPIO_WritePin>
	SetFCSB();
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2201      	movs	r2, #1
 8000962:	2104      	movs	r1, #4
 8000964:	0018      	movs	r0, r3
 8000966:	f002 f9be 	bl	8002ce6 <HAL_GPIO_WritePin>
	SetSDIO();
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	00d9      	lsls	r1, r3, #3
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2201      	movs	r2, #1
 8000974:	0018      	movs	r0, r3
 8000976:	f002 f9b6 	bl	8002ce6 <HAL_GPIO_WritePin>
	ClrSDCK();
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	0099      	lsls	r1, r3, #2
 800097e:	23a0      	movs	r3, #160	; 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f002 f9ae 	bl	8002ce6 <HAL_GPIO_WritePin>
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <vSpi3WriteByte>:
**Func: 	SPI-3 send one byte
**Input:
**Output:  
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	701a      	strb	r2, [r3, #0]

 	byte bitcnt;
 
	SetFCSB();				//FCSB = 1;
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	2201      	movs	r2, #1
 80009a2:	2104      	movs	r1, #4
 80009a4:	0018      	movs	r0, r3
 80009a6:	f002 f99e 	bl	8002ce6 <HAL_GPIO_WritePin>
 
 	OutputSDIO();			//SDA output mode
 80009aa:	f7ff fead 	bl	8000708 <OutputSDIO>
 	SetSDIO();				//    output 1
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	00d9      	lsls	r1, r3, #3
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2201      	movs	r2, #1
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 f994 	bl	8002ce6 <HAL_GPIO_WritePin>
 
 	ClrSDCK();
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	0099      	lsls	r1, r3, #2
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2200      	movs	r2, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f002 f98c 	bl	8002ce6 <HAL_GPIO_WritePin>
 	ClrCSB();
 80009ce:	23a0      	movs	r3, #160	; 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	2200      	movs	r2, #0
 80009d4:	2102      	movs	r1, #2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f002 f985 	bl	8002ce6 <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2208      	movs	r2, #8
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e034      	b.n	8000a50 <vSpi3WriteByte+0xc0>
 		{
		ClrSDCK();
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	0099      	lsls	r1, r3, #2
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2200      	movs	r2, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 f978 	bl	8002ce6 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 80009f6:	f7ff ff9b 	bl	8000930 <_delay_us>
 		if(dat&0x80)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	da08      	bge.n	8000a16 <vSpi3WriteByte+0x86>
 			SetSDIO();
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	00d9      	lsls	r1, r3, #3
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f002 f969 	bl	8002ce6 <HAL_GPIO_WritePin>
 8000a14:	e007      	b.n	8000a26 <vSpi3WriteByte+0x96>
 		else
 			ClrSDIO();
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	00d9      	lsls	r1, r3, #3
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2200      	movs	r2, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 f960 	bl	8002ce6 <HAL_GPIO_WritePin>
		SetSDCK();
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	0099      	lsls	r1, r3, #2
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	2201      	movs	r2, #1
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 f958 	bl	8002ce6 <HAL_GPIO_WritePin>
 		dat <<= 1;
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	18db      	adds	r3, r3, r3
 8000a3e:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000a40:	f7ff ff76 	bl	8000930 <_delay_us>
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000a44:	210f      	movs	r1, #15
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1c5      	bne.n	80009e6 <vSpi3WriteByte+0x56>
 		}
 	ClrSDCK();
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	0099      	lsls	r1, r3, #2
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 f93e 	bl	8002ce6 <HAL_GPIO_WritePin>
 	SetSDIO();
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	00d9      	lsls	r1, r3, #3
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2201      	movs	r2, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 f936 	bl	8002ce6 <HAL_GPIO_WritePin>
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <bSpi3ReadByte>:
**Func: 	SPI-3 read one byte
**Input:
**Output:  
**********************************************************/
byte bSpi3ReadByte(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
	byte RdPara = 0;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
  
 	ClrCSB();
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 f925 	bl	8002ce6 <HAL_GPIO_WritePin>
 	InputSDIO();
 8000a9c:	f7ff fdfa 	bl	8000694 <InputSDIO>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e033      	b.n	8000b10 <bSpi3ReadByte+0x8e>
 		{
 		ClrSDCK();
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	0099      	lsls	r1, r3, #2
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 f917 	bl	8002ce6 <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 8000ab8:	1dfa      	adds	r2, r7, #7
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	18db      	adds	r3, r3, r3
 8000ac0:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000ac2:	f7ff ff35 	bl	8000930 <_delay_us>
 		SetSDCK();
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	0099      	lsls	r1, r3, #2
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	2201      	movs	r2, #1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 f908 	bl	8002ce6 <HAL_GPIO_WritePin>
 		_delay_us(); //_delay_us(1);
 8000ad6:	f7ff ff2b 	bl	8000930 <_delay_us>

 		if(SDIO_H())
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	00da      	lsls	r2, r3, #3
 8000ade:	23a0      	movs	r3, #160	; 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f8e1 	bl	8002cac <HAL_GPIO_ReadPin>
 8000aea:	0003      	movs	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d106      	bne.n	8000afe <bSpi3ReadByte+0x7c>
 			RdPara |= 0x01;
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	430a      	orrs	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e003      	b.n	8000b06 <bSpi3ReadByte+0x84>
 		else
 			RdPara |= 0x00;
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	1dfa      	adds	r2, r7, #7
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000b06:	1dbb      	adds	r3, r7, #6
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1c7      	bne.n	8000aa8 <bSpi3ReadByte+0x26>
 		}
 	ClrSDCK();
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	0099      	lsls	r1, r3, #2
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 f8df 	bl	8002ce6 <HAL_GPIO_WritePin>
 	OutputSDIO();
 8000b28:	f7ff fdee 	bl	8000708 <OutputSDIO>
 	SetSDIO();
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	00d9      	lsls	r1, r3, #3
 8000b30:	23a0      	movs	r3, #160	; 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2201      	movs	r2, #1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 f8d5 	bl	8002ce6 <HAL_GPIO_WritePin>
 	SetCSB();
 8000b3c:	23a0      	movs	r3, #160	; 0xa0
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f002 f8ce 	bl	8002ce6 <HAL_GPIO_WritePin>
 	return(RdPara);
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <vSpi3Write>:
**Func: 	SPI Write One word
**Input: 	Write word
**Output:	none
**********************************************************/
void vSpi3Write(word dat)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 	vSpi3WriteByte((byte)(dat>>8)&0x7F);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	227f      	movs	r2, #127	; 0x7f
 8000b66:	4013      	ands	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff ff10 	bl	8000990 <vSpi3WriteByte>
 	vSpi3WriteByte((byte)dat);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff0b 	bl	8000990 <vSpi3WriteByte>
 	SetCSB();
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2102      	movs	r1, #2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 f8af 	bl	8002ce6 <HAL_GPIO_WritePin>
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <bSpi3Read>:
**Func: 	SPI-3 Read One byte
**Input: 	readout addresss
**Output:	readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
  	vSpi3WriteByte(addr|0x80);
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	4252      	negs	r2, r2
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fef1 	bl	8000990 <vSpi3WriteByte>
 	return(bSpi3ReadByte());
 8000bae:	f7ff ff68 	bl	8000a82 <bSpi3ReadByte>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <vSpi3WriteFIFO>:
**Func: 	SPI-3 send one byte to FIFO
**Input: 	one byte buffer
**Output:	none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
 
 	SetCSB();
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2102      	movs	r1, #2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 f888 	bl	8002ce6 <HAL_GPIO_WritePin>
	OutputSDIO();
 8000bd6:	f7ff fd97 	bl	8000708 <OutputSDIO>
	ClrSDCK();
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	0099      	lsls	r1, r3, #2
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2200      	movs	r2, #0
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 f87e 	bl	8002ce6 <HAL_GPIO_WritePin>
 	ClrFCSB();			//FCSB = 0
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f002 f877 	bl	8002ce6 <HAL_GPIO_WritePin>
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e034      	b.n	8000c6c <vSpi3WriteFIFO+0xb0>
 		{
 		ClrSDCK();
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	0099      	lsls	r1, r3, #2
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 f86a 	bl	8002ce6 <HAL_GPIO_WritePin>

 		if(dat&0x80)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da08      	bge.n	8000c2e <vSpi3WriteFIFO+0x72>
			SetSDIO();
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	00d9      	lsls	r1, r3, #3
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2201      	movs	r2, #1
 8000c26:	0018      	movs	r0, r3
 8000c28:	f002 f85d 	bl	8002ce6 <HAL_GPIO_WritePin>
 8000c2c:	e007      	b.n	8000c3e <vSpi3WriteFIFO+0x82>
		else
			ClrSDIO();
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	00d9      	lsls	r1, r3, #3
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	2200      	movs	r2, #0
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 f854 	bl	8002ce6 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000c3e:	f7ff fe77 	bl	8000930 <_delay_us>
		SetSDCK();
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	0099      	lsls	r1, r3, #2
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 f84a 	bl	8002ce6 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000c52:	f7ff fe6d 	bl	8000930 <_delay_us>
 		dat <<= 1;
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	18db      	adds	r3, r3, r3
 8000c5e:	7013      	strb	r3, [r2, #0]
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000c60:	210f      	movs	r1, #15
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1c5      	bne.n	8000c02 <vSpi3WriteFIFO+0x46>
 		}
 	ClrSDCK();
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	0099      	lsls	r1, r3, #2
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	2200      	movs	r2, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 f830 	bl	8002ce6 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000c86:	f7ff fe53 	bl	8000930 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000c8a:	f7ff fe51 	bl	8000930 <_delay_us>
 	SetFCSB();
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	2201      	movs	r2, #1
 8000c94:	2104      	movs	r1, #4
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 f825 	bl	8002ce6 <HAL_GPIO_WritePin>
	SetSDIO();
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	00d9      	lsls	r1, r3, #3
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f002 f81d 	bl	8002ce6 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000cac:	f7ff fe40 	bl	8000930 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000cb0:	f7ff fe3e 	bl	8000930 <_delay_us>
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b004      	add	sp, #16
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <vSpi3BurstWriteFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length & head pointer
**Output:	none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	1cfb      	adds	r3, r7, #3
 8000cc8:	701a      	strb	r2, [r3, #0]
 	byte i;
 	if(length!=0x00)
 8000cca:	1cfb      	adds	r3, r7, #3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01a      	beq.n	8000d08 <vSpi3BurstWriteFIFO+0x4c>
	 	{
 		for(i=0;i<length;i++)
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e00d      	b.n	8000cf8 <vSpi3BurstWriteFIFO+0x3c>
 			vSpi3WriteFIFO(ptr[i]);
 8000cdc:	240f      	movs	r4, #15
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ff67 	bl	8000bbc <vSpi3WriteFIFO>
 		for(i=0;i<length;i++)
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	3201      	adds	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fa      	adds	r2, r7, r3
 8000cfc:	1cfb      	adds	r3, r7, #3
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ea      	bcc.n	8000cdc <vSpi3BurstWriteFIFO+0x20>
 		}
 	return;
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46c0      	nop			; (mov r8, r8)
}
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b005      	add	sp, #20
 8000d0e:	bd90      	pop	{r4, r7, pc}

08000d10 <GPO3In>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
void GPO3In(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	240c      	movs	r4, #12
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2314      	movs	r3, #20
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f004 f94a 	bl	8004fba <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <GPO3In+0x70>)
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <GPO3In+0x70>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <GPO3In+0x70>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <GPO3In+0x70>)
 8000d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <GPO3In+0x70>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <GPO3In+0x70>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = GPO3_Pin;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0152      	lsls	r2, r2, #5
 8000d5c:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	193a      	adds	r2, r7, r4
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 fe2c 	bl	80029d0 <HAL_GPIO_Init>
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b009      	add	sp, #36	; 0x24
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <bGoTx>:

byte bGoTx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	}
	if(i>=100)
		return(false);
	#endif

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <bGoTx+0x7c>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fee2 	bl	8000b56 <vSpi3Write>
	for(i=0; i<100; i++){
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e020      	b.n	8000ddc <bGoTx+0x58>
		for(i=0; i<100; i++){
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e006      	b.n	8000db0 <bGoTx+0x2c>
					_delay_us(); //_delay_us(100);
 8000da2:	f7ff fdc5 	bl	8000930 <_delay_us>
		for(i=0; i<100; i++){
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	3201      	adds	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b63      	cmp	r3, #99	; 0x63
 8000db6:	d9f4      	bls.n	8000da2 <bGoTx+0x1e>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000db8:	2061      	movs	r0, #97	; 0x61
 8000dba:	f7ff fee9 	bl	8000b90 <bSpi3Read>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	1dbb      	adds	r3, r7, #6
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_TX)
 8000dca:	1dbb      	adds	r3, r7, #6
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d009      	beq.n	8000de6 <bGoTx+0x62>
	for(i=0; i<100; i++){
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	3201      	adds	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b63      	cmp	r3, #99	; 0x63
 8000de2:	d9da      	bls.n	8000d9a <bGoTx+0x16>
 8000de4:	e000      	b.n	8000de8 <bGoTx+0x64>
			break;
 8000de6:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b63      	cmp	r3, #99	; 0x63
 8000dee:	d901      	bls.n	8000df4 <bGoTx+0x70>
		return(false);
 8000df0:	2300      	movs	r3, #0
 8000df2:	e000      	b.n	8000df6 <bGoTx+0x72>
	else
		return(true);
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	00006040 	.word	0x00006040

08000e04 <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	byte tmp;

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <bGoSleep+0x4c>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fea2 	bl	8000b56 <vSpi3Write>
	for(int i=0; i<100; i++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	e004      	b.n	8000e22 <bGoSleep+0x1e>
				_delay_us(); //_delay_us(100);
 8000e18:	f7ff fd8a 	bl	8000930 <_delay_us>
	for(int i=0; i<100; i++){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b63      	cmp	r3, #99	; 0x63
 8000e26:	ddf7      	ble.n	8000e18 <bGoSleep+0x14>
			}	//enough?
	tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000e28:	2061      	movs	r0, #97	; 0x61
 8000e2a:	f7ff feb1 	bl	8000b90 <bSpi3Read>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	0019      	movs	r1, r3
 8000e32:	1cfb      	adds	r3, r7, #3
 8000e34:	220f      	movs	r2, #15
 8000e36:	400a      	ands	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_GO_SLEEP)
 8000e3a:	1cfb      	adds	r3, r7, #3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	d101      	bne.n	8000e46 <bGoSleep+0x42>
		return(true);
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <bGoSleep+0x44>
	else
		return(false);
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	00006010 	.word	0x00006010

08000e54 <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	byte tmp, i;

	RssiTrig = false;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <bGoStandby+0x80>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <bGoStandby+0x84>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fe77 	bl	8000b56 <vSpi3Write>
	for(i=0; i<100; i++){
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e020      	b.n	8000eb2 <bGoStandby+0x5e>
		for(i=0; i<100; i++){
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e006      	b.n	8000e86 <bGoStandby+0x32>
					_delay_us(); //_delay_us(100);
 8000e78:	f7ff fd5a 	bl	8000930 <_delay_us>
		for(i=0; i<100; i++){
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	3201      	adds	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b63      	cmp	r3, #99	; 0x63
 8000e8c:	d9f4      	bls.n	8000e78 <bGoStandby+0x24>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000e8e:	2061      	movs	r0, #97	; 0x61
 8000e90:	f7ff fe7e 	bl	8000b90 <bSpi3Read>
 8000e94:	0003      	movs	r3, r0
 8000e96:	0019      	movs	r1, r3
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_STBY)
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d009      	beq.n	8000ebc <bGoStandby+0x68>
	for(i=0; i<100; i++){
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	3201      	adds	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b63      	cmp	r3, #99	; 0x63
 8000eb8:	d9da      	bls.n	8000e70 <bGoStandby+0x1c>
 8000eba:	e000      	b.n	8000ebe <bGoStandby+0x6a>
			break;
 8000ebc:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b63      	cmp	r3, #99	; 0x63
 8000ec4:	d901      	bls.n	8000eca <bGoStandby+0x76>
		return(false);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <bGoStandby+0x78>
	else
		return(true);
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200002f1 	.word	0x200002f1
 8000ed8:	00006002 	.word	0x00006002

08000edc <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <vSoftReset+0x18>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fe37 	bl	8000b56 <vSpi3Write>
	HAL_Delay(1);				//enough?
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 fc91 	bl	8002810 <HAL_Delay>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	00007fff 	.word	0x00007fff

08000ef8 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	0002      	movs	r2, r0
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	22ca      	movs	r2, #202	; 0xca
 8000f0a:	01d2      	lsls	r2, r2, #7
 8000f0c:	4694      	mov	ip, r2
 8000f0e:	4463      	add	r3, ip
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fe20 	bl	8000b56 <vSpi3Write>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <vIntSrcCfg>:
**Function: config interrupt source  
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 8000f1e:	b590      	push	{r4, r7, lr}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	0002      	movs	r2, r0
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	1dbb      	adds	r3, r7, #6
 8000f2c:	1c0a      	adds	r2, r1, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 8000f30:	2066      	movs	r0, #102	; 0x66
 8000f32:	f7ff fe2d 	bl	8000b90 <bSpi3Read>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	240f      	movs	r4, #15
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	221f      	movs	r2, #31
 8000f40:	4391      	bics	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8000f46:	193a      	adds	r2, r7, r4
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	7812      	ldrb	r2, [r2, #0]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	22cc      	movs	r2, #204	; 0xcc
 8000f54:	01d2      	lsls	r2, r2, #7
 8000f56:	4694      	mov	ip, r2
 8000f58:	4463      	add	r3, ip
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff fdfb 	bl	8000b56 <vSpi3Write>

	tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 8000f60:	2067      	movs	r0, #103	; 0x67
 8000f62:	f7ff fe15 	bl	8000b90 <bSpi3Read>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0019      	movs	r1, r3
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	221f      	movs	r2, #31
 8000f6e:	4391      	bics	r1, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8000f74:	193a      	adds	r2, r7, r4
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	22ce      	movs	r2, #206	; 0xce
 8000f82:	01d2      	lsls	r2, r2, #7
 8000f84:	4694      	mov	ip, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fde4 	bl	8000b56 <vSpi3Write>
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b005      	add	sp, #20
 8000f94:	bd90      	pop	{r4, r7, pc}

08000f96 <vEnableAntSwitch>:
**Function:  
**Input:    
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 8000f96:	b5b0      	push	{r4, r5, r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = bSpi3Read(CMT23_INT1_CTL);
 8000fa2:	250f      	movs	r5, #15
 8000fa4:	197c      	adds	r4, r7, r5
 8000fa6:	2066      	movs	r0, #102	; 0x66
 8000fa8:	f7ff fdf2 	bl	8000b90 <bSpi3Read>
 8000fac:	0003      	movs	r3, r0
 8000fae:	7023      	strb	r3, [r4, #0]
	tmp&= 0x3F;
 8000fb0:	197b      	adds	r3, r7, r5
 8000fb2:	197a      	adds	r2, r7, r5
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	213f      	movs	r1, #63	; 0x3f
 8000fb8:	400a      	ands	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d002      	beq.n	8000fca <vEnableAntSwitch+0x34>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d009      	beq.n	8000fdc <vEnableAntSwitch+0x46>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
		case 2:
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
		case 0:
		default:
			break;							//Disable
 8000fc8:	e010      	b.n	8000fec <vEnableAntSwitch+0x56>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 8000fca:	220f      	movs	r2, #15
 8000fcc:	18bb      	adds	r3, r7, r2
 8000fce:	18ba      	adds	r2, r7, r2
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4249      	negs	r1, r1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <vEnableAntSwitch+0x56>
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 8000fdc:	220f      	movs	r2, #15
 8000fde:	18bb      	adds	r3, r7, r2
 8000fe0:	18ba      	adds	r2, r7, r2
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	46c0      	nop			; (mov r8, r8)
	}
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	22cc      	movs	r2, #204	; 0xcc
 8000ff4:	01d2      	lsls	r2, r2, #7
 8000ff6:	4694      	mov	ip, r2
 8000ff8:	4463      	add	r3, ip
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fdab 	bl	8000b56 <vSpi3Write>
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bdb0      	pop	{r4, r5, r7, pc}

08001008 <vIntSrcEnable>:
**Function: enable interrupt source 
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	22d0      	movs	r2, #208	; 0xd0
 800101a:	01d2      	lsls	r2, r2, #7
 800101c:	4694      	mov	ip, r2
 800101e:	4463      	add	r3, ip
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fd98 	bl	8000b56 <vSpi3Write>
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	//byte tmp;
	//byte int_clr2 = 0;
	//byte int_clr1 = 0;
	byte flg = 0;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		int_clr1 |= RX_TIMEOUT_CLR;
		flg |= RX_TMO_EN;
	}
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1);	//Clear flag
#endif
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <bIntSrcFlagClr+0x28>)
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff fd89 	bl	8000b56 <vSpi3Write>
	vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF);	//Clear flag
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <bIntSrcFlagClr+0x2c>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fd85 	bl	8000b56 <vSpi3Write>

	return(flg);
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	00006a07 	.word	0x00006a07
 800105c:	00006bff 	.word	0x00006bff

08001060 <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_FLG);
 8001066:	1dfc      	adds	r4, r7, #7
 8001068:	206e      	movs	r0, #110	; 0x6e
 800106a:	f7ff fd91 	bl	8000b90 <bSpi3Read>
 800106e:	0003      	movs	r3, r0
 8001070:	7023      	strb	r3, [r4, #0]
	vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <vClearFIFO+0x28>)
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff fd6e 	bl	8000b56 <vSpi3Write>
	return(tmp);
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
}
 800107e:	0018      	movs	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	b003      	add	sp, #12
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	00006c03 	.word	0x00006c03

0800108c <vEnableWrFifo>:

#if 1		//splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_CTL);
 8001092:	1dfc      	adds	r4, r7, #7
 8001094:	2069      	movs	r0, #105	; 0x69
 8001096:	f7ff fd7b 	bl	8000b90 <bSpi3Read>
 800109a:	0003      	movs	r3, r0
 800109c:	7023      	strb	r3, [r4, #0]
	tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	1dfa      	adds	r2, r7, #7
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	2105      	movs	r1, #5
 80010a6:	430a      	orrs	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	22d2      	movs	r2, #210	; 0xd2
 80010b0:	01d2      	lsls	r2, r2, #7
 80010b2:	4694      	mov	ip, r2
 80010b4:	4463      	add	r3, ip
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff fd4d 	bl	8000b56 <vSpi3Write>
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b003      	add	sp, #12
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
	byte tmp;
	vSpi3Init();
 80010ca:	f7ff fc36 	bl	800093a <vSpi3Init>
	//GPO1In();
	//GPO2In();
	GPO3In();
 80010ce:	f7ff fe1f 	bl	8000d10 <GPO3In>

	//TX_ANTOut();
	//RX_ANTOut();

	vSoftReset();
 80010d2:	f7ff ff03 	bl	8000edc <vSoftReset>
	HAL_Delay(20);
 80010d6:	2014      	movs	r0, #20
 80010d8:	f001 fb9a 	bl	8002810 <HAL_Delay>
	bGoStandby();
 80010dc:	f7ff feba 	bl	8000e54 <bGoStandby>

	//
	tmp = bSpi3Read(CMT23_MODE_STA);
 80010e0:	1dfc      	adds	r4, r7, #7
 80010e2:	2061      	movs	r0, #97	; 0x61
 80010e4:	f7ff fd54 	bl	8000b90 <bSpi3Read>
 80010e8:	0003      	movs	r3, r0
 80010ea:	7023      	strb	r3, [r4, #0]
	tmp|= EEP_CPY_DIS;
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	2110      	movs	r1, #16
 80010f4:	430a      	orrs	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
	tmp&= (~RSTN_IN_EN);			//Disable RstPin
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	2120      	movs	r1, #32
 8001100:	438a      	bics	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	22c2      	movs	r2, #194	; 0xc2
 800110a:	01d2      	lsls	r2, r2, #7
 800110c:	4694      	mov	ip, r2
 800110e:	4463      	add	r3, ip
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fd20 	bl	8000b56 <vSpi3Write>

	bIntSrcFlagClr();
 8001116:	f7ff ff8b 	bl	8001030 <bIntSrcFlagClr>
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b003      	add	sp, #12
 8001120:	bd90      	pop	{r4, r7, pc}

08001122 <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 8001122:	b590      	push	{r4, r7, lr}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	000a      	movs	r2, r1
 800112c:	1cfb      	adds	r3, r7, #3
 800112e:	701a      	strb	r2, [r3, #0]
	byte i;

	if(length!=0){
 8001130:	1cfb      	adds	r3, r7, #3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01a      	beq.n	800116e <vCfgBank+0x4c>
		for(i=0; i<length; i++)
 8001138:	230f      	movs	r3, #15
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e00e      	b.n	8001160 <vCfgBank+0x3e>
			vSpi3Write(cfg[i]);
 8001142:	240f      	movs	r4, #15
 8001144:	193b      	adds	r3, r7, r4
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fd00 	bl	8000b56 <vSpi3Write>
		for(i=0; i<length; i++)
 8001156:	193b      	adds	r3, r7, r4
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	193b      	adds	r3, r7, r4
 800115c:	3201      	adds	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	230f      	movs	r3, #15
 8001162:	18fa      	adds	r2, r7, r3
 8001164:	1cfb      	adds	r3, r7, #3
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3e9      	bcc.n	8001142 <vCfgBank+0x20>
	}
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b005      	add	sp, #20
 8001174:	bd90      	pop	{r4, r7, pc}

08001176 <bSendMessage>:
	rev = 0xFF;
	return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	000a      	movs	r2, r1
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	701a      	strb	r2, [r3, #0]
	bIntSrcFlagClr();
 8001184:	f7ff ff54 	bl	8001030 <bIntSrcFlagClr>
#if 1
	//mode1
	vSetTxPayloadLength(length);
 8001188:	1cfb      	adds	r3, r7, #3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f813 	bl	80011b8 <vSetTxPayloadLength>
	bGoStandby();
 8001192:	f7ff fe5f 	bl	8000e54 <bGoStandby>
	vEnableWrFifo();
 8001196:	f7ff ff79 	bl	800108c <vEnableWrFifo>
	vSpi3BurstWriteFIFO(msg, length);
 800119a:	1cfb      	adds	r3, r7, #3
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	0011      	movs	r1, r2
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fd8a 	bl	8000cbc <vSpi3BurstWriteFIFO>
	bGoTx();
 80011a8:	f7ff fdec 	bl	8000d84 <bGoTx>
	vSetTxPayloadLength(length);
	bGoTx();
	vEnableWrFifo();
	vSpi3BurstWriteFIFO(msg, length);
#endif
	return(true);
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	byte tmp;
	byte len;
	bGoStandby();
 80011c0:	f7ff fe48 	bl	8000e54 <bGoStandby>
	tmp = bSpi3Read(CMT23_PKT_CTRL1);
 80011c4:	250f      	movs	r5, #15
 80011c6:	197c      	adds	r4, r7, r5
 80011c8:	2045      	movs	r0, #69	; 0x45
 80011ca:	f7ff fce1 	bl	8000b90 <bSpi3Read>
 80011ce:	0003      	movs	r3, r0
 80011d0:	7023      	strb	r3, [r4, #0]
	tmp&= 0x8F;
 80011d2:	0028      	movs	r0, r5
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	183a      	adds	r2, r7, r0
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	2170      	movs	r1, #112	; 0x70
 80011dc:	438a      	bics	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]

	if(length!=0){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01c      	beq.n	8001220 <vSetTxPayloadLength+0x68>
		if(FixedPktLength){
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <vSetTxPayloadLength+0xc0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <vSetTxPayloadLength+0x50>
		  tmp &= ~(1<<0);		//clear bit0
 80011ee:	183b      	adds	r3, r7, r0
 80011f0:	183a      	adds	r2, r7, r0
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	438a      	bics	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
		  len = length - 1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	230e      	movs	r3, #14
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	3a01      	subs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e00f      	b.n	8001228 <vSetTxPayloadLength+0x70>
		}
		else{
		  tmp |= (1<<0);	   //set bit0
 8001208:	220f      	movs	r2, #15
 800120a:	18bb      	adds	r3, r7, r2
 800120c:	18ba      	adds	r2, r7, r2
 800120e:	7812      	ldrb	r2, [r2, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
		  len = length;
 8001216:	230e      	movs	r3, #14
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e003      	b.n	8001228 <vSetTxPayloadLength+0x70>
		}
	}else
		len = 0;
 8001220:	230e      	movs	r3, #14
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

	tmp|= (((byte)(len>>8)&0x07)<<4);
 8001228:	240e      	movs	r4, #14
 800122a:	193b      	adds	r3, r7, r4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	b2db      	uxtb	r3, r3
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2270      	movs	r2, #112	; 0x70
 8001238:	4013      	ands	r3, r2
 800123a:	b25a      	sxtb	r2, r3
 800123c:	210f      	movs	r1, #15
 800123e:	187b      	adds	r3, r7, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b25a      	sxtb	r2, r3
 8001248:	187b      	adds	r3, r7, r1
 800124a:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	228a      	movs	r2, #138	; 0x8a
 8001252:	01d2      	lsls	r2, r2, #7
 8001254:	4694      	mov	ip, r2
 8001256:	4463      	add	r3, ip
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fc7c 	bl	8000b56 <vSpi3Write>
	vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len);	//Payload length
 800125e:	193b      	adds	r3, r7, r4
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	228c      	movs	r2, #140	; 0x8c
 8001264:	01d2      	lsls	r2, r2, #7
 8001266:	4694      	mov	ip, r2
 8001268:	4463      	add	r3, ip
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff fc73 	bl	8000b56 <vSpi3Write>
	//bGoSleep();
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	200002f2 	.word	0x200002f2

0800127c <main>:
/**
    @brief  The application entry point.
    @retval int
*/
int main(void)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b0fa      	sub	sp, #488	; 0x1e8
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f001 fa55 	bl	8002730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 fc09 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 fce3 	bl	8001c54 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800128e:	f000 fcb3 	bl	8001bf8 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001292:	f000 fc71 	bl	8001b78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //  https://github.com/Sensirion/embedded-sht
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Basladi\r\n", 9, 100);
 8001296:	49e4      	ldr	r1, [pc, #912]	; (8001628 <main+0x3ac>)
 8001298:	48e4      	ldr	r0, [pc, #912]	; (800162c <main+0x3b0>)
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	2209      	movs	r2, #9
 800129e:	f003 f98f 	bl	80045c0 <HAL_UART_Transmit>
  sensirion_i2c_init();
 80012a2:	f000 ff57 	bl	8002154 <sensirion_i2c_init>

  /*while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
      printf("SHT sensor probing failed\n");
    }*/ // burayı aç
  printf("SHT sensor probing successful\n");
 80012a6:	4be2      	ldr	r3, [pc, #904]	; (8001630 <main+0x3b4>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f003 ff01 	bl	80050b0 <puts>

#define TX_NUM  24
  byte tx_buf[32] = {'H', 'A', 'T', 'A', '1', '1', '1', '1', '1', '1', 'A', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5', 'B'};
 80012ae:	23da      	movs	r3, #218	; 0xda
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	18f9      	adds	r1, r7, r3
 80012b4:	4adf      	ldr	r2, [pc, #892]	; (8001634 <main+0x3b8>)
 80012b6:	000b      	movs	r3, r1
 80012b8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80012ba:	c331      	stmia	r3!, {r0, r4, r5}
 80012bc:	ca11      	ldmia	r2!, {r0, r4}
 80012be:	c311      	stmia	r3!, {r0, r4}
 80012c0:	8810      	ldrh	r0, [r2, #0]
 80012c2:	8018      	strh	r0, [r3, #0]
 80012c4:	7892      	ldrb	r2, [r2, #2]
 80012c6:	709a      	strb	r2, [r3, #2]
 80012c8:	2317      	movs	r3, #23
 80012ca:	18cb      	adds	r3, r1, r3
 80012cc:	2209      	movs	r2, #9
 80012ce:	2100      	movs	r1, #0
 80012d0:	0018      	movs	r0, r3
 80012d2:	f003 fe72 	bl	8004fba <memset>
  char buffer3[100];
  char sayac[100];
  char buffer_temperature[100];


  FixedPktLength    = 0;
 80012d6:	4bd8      	ldr	r3, [pc, #864]	; (8001638 <main+0x3bc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
  PayloadLength     = 23;
 80012dc:	4bd7      	ldr	r3, [pc, #860]	; (800163c <main+0x3c0>)
 80012de:	2217      	movs	r2, #23
 80012e0:	601a      	str	r2, [r3, #0]
  vInit();
 80012e2:	f7ff feef 	bl	80010c4 <vInit>
  vCfgBank(CMTBank, 12);
 80012e6:	4bd6      	ldr	r3, [pc, #856]	; (8001640 <main+0x3c4>)
 80012e8:	210c      	movs	r1, #12
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff ff19 	bl	8001122 <vCfgBank>
  vCfgBank(SystemBank, 12);
 80012f0:	4bd4      	ldr	r3, [pc, #848]	; (8001644 <main+0x3c8>)
 80012f2:	210c      	movs	r1, #12
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff ff14 	bl	8001122 <vCfgBank>
  vCfgBank(FrequencyBank, 8);
 80012fa:	4bd3      	ldr	r3, [pc, #844]	; (8001648 <main+0x3cc>)
 80012fc:	2108      	movs	r1, #8
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff ff0f 	bl	8001122 <vCfgBank>
  vCfgBank(DataRateBank, 24);
 8001304:	4bd1      	ldr	r3, [pc, #836]	; (800164c <main+0x3d0>)
 8001306:	2118      	movs	r1, #24
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ff0a 	bl	8001122 <vCfgBank>
  vCfgBank(BasebandBank, 29);
 800130e:	4bd0      	ldr	r3, [pc, #832]	; (8001650 <main+0x3d4>)
 8001310:	211d      	movs	r1, #29
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff05 	bl	8001122 <vCfgBank>
  vCfgBank(TXBank, 11);
 8001318:	4bce      	ldr	r3, [pc, #824]	; (8001654 <main+0x3d8>)
 800131a:	210b      	movs	r1, #11
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ff00 	bl	8001122 <vCfgBank>
  vEnableAntSwitch(0);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fe37 	bl	8000f96 <vEnableAntSwitch>
  vGpioFuncCfg(GPIO1_DCLK + GPIO2_DCLK + GPIO3_INT2); //GPIO Maping
 8001328:	202f      	movs	r0, #47	; 0x2f
 800132a:	f7ff fde5 	bl	8000ef8 <vGpioFuncCfg>



  vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 800132e:	210a      	movs	r1, #10
 8001330:	2010      	movs	r0, #16
 8001332:	f7ff fdf4 	bl	8000f1e <vIntSrcCfg>
  vIntSrcEnable(TX_DONE_EN);
 8001336:	2020      	movs	r0, #32
 8001338:	f7ff fe66 	bl	8001008 <vIntSrcEnable>
  vClearFIFO();
 800133c:	f7ff fe90 	bl	8001060 <vClearFIFO>
  bGoSleep();
 8001340:	f7ff fd60 	bl	8000e04 <bGoSleep>

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Tx...\r\n", 7, 100);
 8001344:	49c4      	ldr	r1, [pc, #784]	; (8001658 <main+0x3dc>)
 8001346:	48b9      	ldr	r0, [pc, #740]	; (800162c <main+0x3b0>)
 8001348:	2364      	movs	r3, #100	; 0x64
 800134a:	2207      	movs	r2, #7
 800134c:	f003 f938 	bl	80045c0 <HAL_UART_Transmit>
  int kontrol = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	22ee      	movs	r2, #238	; 0xee
 8001354:	0052      	lsls	r2, r2, #1
 8001356:	18ba      	adds	r2, r7, r2
 8001358:	6013      	str	r3, [r2, #0]
  int c = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	22f2      	movs	r2, #242	; 0xf2
 800135e:	0052      	lsls	r2, r2, #1
 8001360:	18ba      	adds	r2, r7, r2
 8001362:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    int32_t temperature, humidity;
    int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT, &temperature, &humidity);
 8001364:	1d3a      	adds	r2, r7, #4
 8001366:	2308      	movs	r3, #8
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	0019      	movs	r1, r3
 800136c:	2044      	movs	r0, #68	; 0x44
 800136e:	f000 ff87 	bl	8002280 <sht3x_measure_blocking_read>
 8001372:	0003      	movs	r3, r0
 8001374:	001a      	movs	r2, r3
 8001376:	21dc      	movs	r1, #220	; 0xdc
 8001378:	31ff      	adds	r1, #255	; 0xff
 800137a:	187b      	adds	r3, r7, r1
 800137c:	701a      	strb	r2, [r3, #0]

    if (ret == STATUS_OK) {
 800137e:	187b      	adds	r3, r7, r1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d000      	beq.n	800138a <main+0x10e>
 8001388:	e0a3      	b.n	80014d2 <main+0x256>
      sprintf(buffer, "%d", temperature / 10); //100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	210a      	movs	r1, #10
 800138e:	0018      	movs	r0, r3
 8001390:	f7fe ff56 	bl	8000240 <__divsi3>
 8001394:	0003      	movs	r3, r0
 8001396:	001a      	movs	r2, r3
 8001398:	49b0      	ldr	r1, [pc, #704]	; (800165c <main+0x3e0>)
 800139a:	24ce      	movs	r4, #206	; 0xce
 800139c:	0064      	lsls	r4, r4, #1
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	0018      	movs	r0, r3
 80013a2:	f003 fe8f 	bl	80050c4 <siprintf>
      HAL_UART_Transmit(&hlpuart1, "t: ", 3, 1000);
 80013a6:	23fa      	movs	r3, #250	; 0xfa
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	49ad      	ldr	r1, [pc, #692]	; (8001660 <main+0x3e4>)
 80013ac:	489f      	ldr	r0, [pc, #636]	; (800162c <main+0x3b0>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	f003 f906 	bl	80045c0 <HAL_UART_Transmit>
      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7fe fea6 	bl	8000108 <strlen>
 80013bc:	0003      	movs	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	23fa      	movs	r3, #250	; 0xfa
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	1939      	adds	r1, r7, r4
 80013c6:	4899      	ldr	r0, [pc, #612]	; (800162c <main+0x3b0>)
 80013c8:	f003 f8fa 	bl	80045c0 <HAL_UART_Transmit>
      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80013cc:	49a5      	ldr	r1, [pc, #660]	; (8001664 <main+0x3e8>)
 80013ce:	4897      	ldr	r0, [pc, #604]	; (800162c <main+0x3b0>)
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	2202      	movs	r2, #2
 80013d4:	f003 f8f4 	bl	80045c0 <HAL_UART_Transmit>





      sprintf(buffer2, "%d", humidity / 10);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	210a      	movs	r1, #10
 80013dc:	0018      	movs	r0, r3
 80013de:	f7fe ff2f 	bl	8000240 <__divsi3>
 80013e2:	0003      	movs	r3, r0
 80013e4:	001a      	movs	r2, r3
 80013e6:	499d      	ldr	r1, [pc, #628]	; (800165c <main+0x3e0>)
 80013e8:	259c      	movs	r5, #156	; 0x9c
 80013ea:	006d      	lsls	r5, r5, #1
 80013ec:	197b      	adds	r3, r7, r5
 80013ee:	0018      	movs	r0, r3
 80013f0:	f003 fe68 	bl	80050c4 <siprintf>
      HAL_UART_Transmit(&hlpuart1, "n: ", 3, 1000);
 80013f4:	23fa      	movs	r3, #250	; 0xfa
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	499b      	ldr	r1, [pc, #620]	; (8001668 <main+0x3ec>)
 80013fa:	488c      	ldr	r0, [pc, #560]	; (800162c <main+0x3b0>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	f003 f8df 	bl	80045c0 <HAL_UART_Transmit>
      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer2, strlen(buffer2), 1000);
 8001402:	197b      	adds	r3, r7, r5
 8001404:	0018      	movs	r0, r3
 8001406:	f7fe fe7f 	bl	8000108 <strlen>
 800140a:	0003      	movs	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	23fa      	movs	r3, #250	; 0xfa
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	1979      	adds	r1, r7, r5
 8001414:	4885      	ldr	r0, [pc, #532]	; (800162c <main+0x3b0>)
 8001416:	f003 f8d3 	bl	80045c0 <HAL_UART_Transmit>
      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800141a:	4992      	ldr	r1, [pc, #584]	; (8001664 <main+0x3e8>)
 800141c:	4883      	ldr	r0, [pc, #524]	; (800162c <main+0x3b0>)
 800141e:	2364      	movs	r3, #100	; 0x64
 8001420:	2202      	movs	r2, #2
 8001422:	f003 f8cd 	bl	80045c0 <HAL_UART_Transmit>


      strncat(buffer, buffer2, 5); //sondaki sayı eklenecek karakter sayısı
 8001426:	1979      	adds	r1, r7, r5
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2205      	movs	r2, #5
 800142c:	0018      	movs	r0, r3
 800142e:	f003 fe69 	bl	8005104 <strncat>
      strncat(buffer, "A0000000002B", 12);
 8001432:	193b      	adds	r3, r7, r4
 8001434:	0018      	movs	r0, r3
 8001436:	f7fe fe67 	bl	8000108 <strlen>
 800143a:	0003      	movs	r3, r0
 800143c:	001a      	movs	r2, r3
 800143e:	193b      	adds	r3, r7, r4
 8001440:	189a      	adds	r2, r3, r2
 8001442:	4b8a      	ldr	r3, [pc, #552]	; (800166c <main+0x3f0>)
 8001444:	0010      	movs	r0, r2
 8001446:	0019      	movs	r1, r3
 8001448:	230d      	movs	r3, #13
 800144a:	001a      	movs	r2, r3
 800144c:	f003 fdac 	bl	8004fa8 <memcpy>
      HAL_UART_Transmit(&hlpuart1, "buffer toplam: ", 15, 1000);
 8001450:	23fa      	movs	r3, #250	; 0xfa
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4986      	ldr	r1, [pc, #536]	; (8001670 <main+0x3f4>)
 8001456:	4875      	ldr	r0, [pc, #468]	; (800162c <main+0x3b0>)
 8001458:	220f      	movs	r2, #15
 800145a:	f003 f8b1 	bl	80045c0 <HAL_UART_Transmit>
      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 800145e:	193b      	adds	r3, r7, r4
 8001460:	0018      	movs	r0, r3
 8001462:	f7fe fe51 	bl	8000108 <strlen>
 8001466:	0003      	movs	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	23fa      	movs	r3, #250	; 0xfa
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	1939      	adds	r1, r7, r4
 8001470:	486e      	ldr	r0, [pc, #440]	; (800162c <main+0x3b0>)
 8001472:	f003 f8a5 	bl	80045c0 <HAL_UART_Transmit>
      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001476:	497b      	ldr	r1, [pc, #492]	; (8001664 <main+0x3e8>)
 8001478:	486c      	ldr	r0, [pc, #432]	; (800162c <main+0x3b0>)
 800147a:	2364      	movs	r3, #100	; 0x64
 800147c:	2202      	movs	r2, #2
 800147e:	f003 f89f 	bl	80045c0 <HAL_UART_Transmit>

      //if((bufferkontrol[0]!=buffer[0])||(bufferkontrol[1]!=buffer[1])||(bufferkontrol[2]!=buffer[2])||(bufferkontrol[3]!=buffer[3])){
      bSendMessage(buffer,  strlen(buffer));
 8001482:	193b      	adds	r3, r7, r4
 8001484:	0018      	movs	r0, r3
 8001486:	f7fe fe3f 	bl	8000108 <strlen>
 800148a:	0003      	movs	r3, r0
 800148c:	b2da      	uxtb	r2, r3
 800148e:	193b      	adds	r3, r7, r4
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff fe6f 	bl	8001176 <bSendMessage>
      while (GPO3_L());
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	015a      	lsls	r2, r3, #5
 800149e:	23a0      	movs	r3, #160	; 0xa0
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f001 fc01 	bl	8002cac <HAL_GPIO_ReadPin>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d0f5      	beq.n	800149a <main+0x21e>
      bIntSrcFlagClr();
 80014ae:	f7ff fdbf 	bl	8001030 <bIntSrcFlagClr>
      vClearFIFO();
 80014b2:	f7ff fdd5 	bl	8001060 <vClearFIFO>
      bGoSleep();
 80014b6:	f7ff fca5 	bl	8000e04 <bGoSleep>
      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderildi\r\n", 12, 100);
 80014ba:	496e      	ldr	r1, [pc, #440]	; (8001674 <main+0x3f8>)
 80014bc:	485b      	ldr	r0, [pc, #364]	; (800162c <main+0x3b0>)
 80014be:	2364      	movs	r3, #100	; 0x64
 80014c0:	220c      	movs	r2, #12
 80014c2:	f003 f87d 	bl	80045c0 <HAL_UART_Transmit>
      HAL_Delay(2000);
 80014c6:	23fa      	movs	r3, #250	; 0xfa
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	0018      	movs	r0, r3
 80014cc:	f001 f9a0 	bl	8002810 <HAL_Delay>
 80014d0:	e748      	b.n	8001364 <main+0xe8>
      //strcpy(bufferkontrol,buffer);


    } else
    {
      c++;
 80014d2:	22f2      	movs	r2, #242	; 0xf2
 80014d4:	0052      	lsls	r2, r2, #1
 80014d6:	18bb      	adds	r3, r7, r2
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	18b9      	adds	r1, r7, r2
 80014de:	600b      	str	r3, [r1, #0]
      sprintf(sayac, "%d", c);
 80014e0:	18bb      	adds	r3, r7, r2
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	495d      	ldr	r1, [pc, #372]	; (800165c <main+0x3e0>)
 80014e6:	2470      	movs	r4, #112	; 0x70
 80014e8:	193b      	adds	r3, r7, r4
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 fdea 	bl	80050c4 <siprintf>
      HAL_UART_Transmit(&hlpuart1, (uint8_t *)sayac, strlen(sayac), 1000);
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7fe fe08 	bl	8000108 <strlen>
 80014f8:	0003      	movs	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	23fa      	movs	r3, #250	; 0xfa
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	1939      	adds	r1, r7, r4
 8001502:	484a      	ldr	r0, [pc, #296]	; (800162c <main+0x3b0>)
 8001504:	f003 f85c 	bl	80045c0 <HAL_UART_Transmit>
      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001508:	4956      	ldr	r1, [pc, #344]	; (8001664 <main+0x3e8>)
 800150a:	4848      	ldr	r0, [pc, #288]	; (800162c <main+0x3b0>)
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2202      	movs	r2, #2
 8001510:	f003 f856 	bl	80045c0 <HAL_UART_Transmit>
      int temperature1 = -2511;
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <main+0x3fc>)
 8001516:	21f0      	movs	r1, #240	; 0xf0
 8001518:	0049      	lsls	r1, r1, #1
 800151a:	187a      	adds	r2, r7, r1
 800151c:	6013      	str	r3, [r2, #0]
      int humidity1 = 11110;
 800151e:	4b57      	ldr	r3, [pc, #348]	; (800167c <main+0x400>)
 8001520:	20ea      	movs	r0, #234	; 0xea
 8001522:	0040      	lsls	r0, r0, #1
 8001524:	183a      	adds	r2, r7, r0
 8001526:	6013      	str	r3, [r2, #0]

      //HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
      //HAL_UART_Transmit(&hlpuart1, "error",  5, 1000);

      if (-4000 <= temperature1 && temperature1 <= 9999 && 0 <= humidity1 && humidity1 <= 9999) {
 8001528:	187b      	adds	r3, r7, r1
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a54      	ldr	r2, [pc, #336]	; (8001680 <main+0x404>)
 800152e:	4293      	cmp	r3, r2
 8001530:	da00      	bge.n	8001534 <main+0x2b8>
 8001532:	e266      	b.n	8001a02 <main+0x786>
 8001534:	187b      	adds	r3, r7, r1
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a52      	ldr	r2, [pc, #328]	; (8001684 <main+0x408>)
 800153a:	4293      	cmp	r3, r2
 800153c:	dd00      	ble.n	8001540 <main+0x2c4>
 800153e:	e260      	b.n	8001a02 <main+0x786>
 8001540:	183b      	adds	r3, r7, r0
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	da00      	bge.n	800154a <main+0x2ce>
 8001548:	e25b      	b.n	8001a02 <main+0x786>
 800154a:	183b      	adds	r3, r7, r0
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a4d      	ldr	r2, [pc, #308]	; (8001684 <main+0x408>)
 8001550:	4293      	cmp	r3, r2
 8001552:	dd00      	ble.n	8001556 <main+0x2da>
 8001554:	e255      	b.n	8001a02 <main+0x786>

        if (temperature1 < -1000) {
 8001556:	187b      	adds	r3, r7, r1
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a4b      	ldr	r2, [pc, #300]	; (8001688 <main+0x40c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	da2e      	bge.n	80015be <main+0x342>


          temperature1 = temperature1 * -1;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	425b      	negs	r3, r3
 8001566:	187a      	adds	r2, r7, r1
 8001568:	6013      	str	r3, [r2, #0]
          sprintf(buffer, "%d", temperature1);
 800156a:	000c      	movs	r4, r1
 800156c:	187b      	adds	r3, r7, r1
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	493a      	ldr	r1, [pc, #232]	; (800165c <main+0x3e0>)
 8001572:	25ce      	movs	r5, #206	; 0xce
 8001574:	006d      	lsls	r5, r5, #1
 8001576:	197b      	adds	r3, r7, r5
 8001578:	0018      	movs	r0, r3
 800157a:	f003 fda3 	bl	80050c4 <siprintf>

          HAL_UART_Transmit(&hlpuart1, "-10dan kucuk", 12, 1000);
 800157e:	23fa      	movs	r3, #250	; 0xfa
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4942      	ldr	r1, [pc, #264]	; (800168c <main+0x410>)
 8001584:	4829      	ldr	r0, [pc, #164]	; (800162c <main+0x3b0>)
 8001586:	220c      	movs	r2, #12
 8001588:	f003 f81a 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800158c:	4935      	ldr	r1, [pc, #212]	; (8001664 <main+0x3e8>)
 800158e:	4827      	ldr	r0, [pc, #156]	; (800162c <main+0x3b0>)
 8001590:	2364      	movs	r3, #100	; 0x64
 8001592:	2202      	movs	r2, #2
 8001594:	f003 f814 	bl	80045c0 <HAL_UART_Transmit>


          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 8001598:	23fa      	movs	r3, #250	; 0xfa
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	1979      	adds	r1, r7, r5
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <main+0x3b0>)
 80015a0:	2205      	movs	r2, #5
 80015a2:	f003 f80d 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80015a6:	492f      	ldr	r1, [pc, #188]	; (8001664 <main+0x3e8>)
 80015a8:	4820      	ldr	r0, [pc, #128]	; (800162c <main+0x3b0>)
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	2202      	movs	r2, #2
 80015ae:	f003 f807 	bl	80045c0 <HAL_UART_Transmit>


          temperature1 = temperature1 * -1;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	425b      	negs	r3, r3
 80015b8:	193a      	adds	r2, r7, r4
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e0ca      	b.n	8001754 <main+0x4d8>
        }
        else if (temperature1 < 0) {
 80015be:	24f0      	movs	r4, #240	; 0xf0
 80015c0:	0064      	lsls	r4, r4, #1
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da64      	bge.n	8001694 <main+0x418>

          temperature1 = temperature1 * -1;
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	425b      	negs	r3, r3
 80015d0:	193a      	adds	r2, r7, r4
 80015d2:	6013      	str	r3, [r2, #0]
          sprintf(buffer, "%d", temperature1);
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4920      	ldr	r1, [pc, #128]	; (800165c <main+0x3e0>)
 80015da:	25ce      	movs	r5, #206	; 0xce
 80015dc:	006d      	lsls	r5, r5, #1
 80015de:	197b      	adds	r3, r7, r5
 80015e0:	0018      	movs	r0, r3
 80015e2:	f003 fd6f 	bl	80050c4 <siprintf>

          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 80015e6:	23fa      	movs	r3, #250	; 0xfa
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	1979      	adds	r1, r7, r5
 80015ec:	480f      	ldr	r0, [pc, #60]	; (800162c <main+0x3b0>)
 80015ee:	2205      	movs	r2, #5
 80015f0:	f002 ffe6 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80015f4:	491b      	ldr	r1, [pc, #108]	; (8001664 <main+0x3e8>)
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <main+0x3b0>)
 80015f8:	2364      	movs	r3, #100	; 0x64
 80015fa:	2202      	movs	r2, #2
 80015fc:	f002 ffe0 	bl	80045c0 <HAL_UART_Transmit>

          HAL_UART_Transmit(&hlpuart1, "0'la -10 arasında", 18, 1000);
 8001600:	23fa      	movs	r3, #250	; 0xfa
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4922      	ldr	r1, [pc, #136]	; (8001690 <main+0x414>)
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <main+0x3b0>)
 8001608:	2212      	movs	r2, #18
 800160a:	f002 ffd9 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800160e:	4915      	ldr	r1, [pc, #84]	; (8001664 <main+0x3e8>)
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <main+0x3b0>)
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	2202      	movs	r2, #2
 8001616:	f002 ffd3 	bl	80045c0 <HAL_UART_Transmit>
          temperature1 = temperature1 * -1;
 800161a:	193b      	adds	r3, r7, r4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	425b      	negs	r3, r3
 8001620:	193a      	adds	r2, r7, r4
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e096      	b.n	8001754 <main+0x4d8>
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	080060d0 	.word	0x080060d0
 800162c:	20000268 	.word	0x20000268
 8001630:	080060dc 	.word	0x080060dc
 8001634:	080061cc 	.word	0x080061cc
 8001638:	200002f2 	.word	0x200002f2
 800163c:	200002f4 	.word	0x200002f4
 8001640:	20000000 	.word	0x20000000
 8001644:	20000030 	.word	0x20000030
 8001648:	20000060 	.word	0x20000060
 800164c:	20000080 	.word	0x20000080
 8001650:	200000e0 	.word	0x200000e0
 8001654:	20000154 	.word	0x20000154
 8001658:	080060fc 	.word	0x080060fc
 800165c:	08006104 	.word	0x08006104
 8001660:	08006108 	.word	0x08006108
 8001664:	0800610c 	.word	0x0800610c
 8001668:	08006110 	.word	0x08006110
 800166c:	08006114 	.word	0x08006114
 8001670:	08006124 	.word	0x08006124
 8001674:	08006134 	.word	0x08006134
 8001678:	fffff631 	.word	0xfffff631
 800167c:	00002b66 	.word	0x00002b66
 8001680:	fffff060 	.word	0xfffff060
 8001684:	0000270f 	.word	0x0000270f
 8001688:	fffffc18 	.word	0xfffffc18
 800168c:	08006144 	.word	0x08006144
 8001690:	08006154 	.word	0x08006154

        }

        else if (0 == temperature1) {
 8001694:	24f0      	movs	r4, #240	; 0xf0
 8001696:	0064      	lsls	r4, r4, #1
 8001698:	193b      	adds	r3, r7, r4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d059      	beq.n	8001754 <main+0x4d8>

        } else if (temperature1 < 1000) {
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	23fa      	movs	r3, #250	; 0xfa
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	da23      	bge.n	80016f4 <main+0x478>

          HAL_UART_Transmit(&hlpuart1, "0 ile 10 arasinda", 17, 1000);
 80016ac:	23fa      	movs	r3, #250	; 0xfa
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	49e9      	ldr	r1, [pc, #932]	; (8001a58 <main+0x7dc>)
 80016b2:	48ea      	ldr	r0, [pc, #936]	; (8001a5c <main+0x7e0>)
 80016b4:	2211      	movs	r2, #17
 80016b6:	f002 ff83 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80016ba:	49e9      	ldr	r1, [pc, #932]	; (8001a60 <main+0x7e4>)
 80016bc:	48e7      	ldr	r0, [pc, #924]	; (8001a5c <main+0x7e0>)
 80016be:	2364      	movs	r3, #100	; 0x64
 80016c0:	2202      	movs	r2, #2
 80016c2:	f002 ff7d 	bl	80045c0 <HAL_UART_Transmit>
          sprintf(buffer, "%d", temperature1);
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	49e6      	ldr	r1, [pc, #920]	; (8001a64 <main+0x7e8>)
 80016cc:	24ce      	movs	r4, #206	; 0xce
 80016ce:	0064      	lsls	r4, r4, #1
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	0018      	movs	r0, r3
 80016d4:	f003 fcf6 	bl	80050c4 <siprintf>

          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 15, 1000);
 80016d8:	23fa      	movs	r3, #250	; 0xfa
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	1939      	adds	r1, r7, r4
 80016de:	48df      	ldr	r0, [pc, #892]	; (8001a5c <main+0x7e0>)
 80016e0:	220f      	movs	r2, #15
 80016e2:	f002 ff6d 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80016e6:	49de      	ldr	r1, [pc, #888]	; (8001a60 <main+0x7e4>)
 80016e8:	48dc      	ldr	r0, [pc, #880]	; (8001a5c <main+0x7e0>)
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	2202      	movs	r2, #2
 80016ee:	f002 ff67 	bl	80045c0 <HAL_UART_Transmit>
 80016f2:	e02f      	b.n	8001754 <main+0x4d8>

        } else if (temperature1 >= 1000) {
 80016f4:	24f0      	movs	r4, #240	; 0xf0
 80016f6:	0064      	lsls	r4, r4, #1
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	23fa      	movs	r3, #250	; 0xfa
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	db27      	blt.n	8001754 <main+0x4d8>

          HAL_UART_Transmit(&hlpuart1, "10'dan buyuk", 12, 1000);
 8001704:	23fa      	movs	r3, #250	; 0xfa
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	49d7      	ldr	r1, [pc, #860]	; (8001a68 <main+0x7ec>)
 800170a:	48d4      	ldr	r0, [pc, #848]	; (8001a5c <main+0x7e0>)
 800170c:	220c      	movs	r2, #12
 800170e:	f002 ff57 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001712:	49d3      	ldr	r1, [pc, #844]	; (8001a60 <main+0x7e4>)
 8001714:	48d1      	ldr	r0, [pc, #836]	; (8001a5c <main+0x7e0>)
 8001716:	2364      	movs	r3, #100	; 0x64
 8001718:	2202      	movs	r2, #2
 800171a:	f002 ff51 	bl	80045c0 <HAL_UART_Transmit>

          sprintf(buffer, "%d", temperature1); //100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 800171e:	193b      	adds	r3, r7, r4
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	49d0      	ldr	r1, [pc, #832]	; (8001a64 <main+0x7e8>)
 8001724:	24ce      	movs	r4, #206	; 0xce
 8001726:	0064      	lsls	r4, r4, #1
 8001728:	193b      	adds	r3, r7, r4
 800172a:	0018      	movs	r0, r3
 800172c:	f003 fcca 	bl	80050c4 <siprintf>
          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8001730:	193b      	adds	r3, r7, r4
 8001732:	0018      	movs	r0, r3
 8001734:	f7fe fce8 	bl	8000108 <strlen>
 8001738:	0003      	movs	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	23fa      	movs	r3, #250	; 0xfa
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	1939      	adds	r1, r7, r4
 8001742:	48c6      	ldr	r0, [pc, #792]	; (8001a5c <main+0x7e0>)
 8001744:	f002 ff3c 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001748:	49c5      	ldr	r1, [pc, #788]	; (8001a60 <main+0x7e4>)
 800174a:	48c4      	ldr	r0, [pc, #784]	; (8001a5c <main+0x7e0>)
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	2202      	movs	r2, #2
 8001750:	f002 ff36 	bl	80045c0 <HAL_UART_Transmit>
        }

        //  printf("measured temperature: %0.2f degreeCelsius","measured humidity: %0.2f percentRH\n",temperature / 1000.0f, humidity / 1000.0f);


        sprintf(buffer2, "%d", humidity1);
 8001754:	23ea      	movs	r3, #234	; 0xea
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	49c1      	ldr	r1, [pc, #772]	; (8001a64 <main+0x7e8>)
 800175e:	249c      	movs	r4, #156	; 0x9c
 8001760:	0064      	lsls	r4, r4, #1
 8001762:	193b      	adds	r3, r7, r4
 8001764:	0018      	movs	r0, r3
 8001766:	f003 fcad 	bl	80050c4 <siprintf>

        strncat(buffer, buffer2, 10); //sondaki sayı eklenecek karakter sayısı
 800176a:	1939      	adds	r1, r7, r4
 800176c:	24ce      	movs	r4, #206	; 0xce
 800176e:	0064      	lsls	r4, r4, #1
 8001770:	193b      	adds	r3, r7, r4
 8001772:	220a      	movs	r2, #10
 8001774:	0018      	movs	r0, r3
 8001776:	f003 fcc5 	bl	8005104 <strncat>
        HAL_UART_Transmit(&hlpuart1, "buffer: ", 9, 1000);
 800177a:	23fa      	movs	r3, #250	; 0xfa
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	49bb      	ldr	r1, [pc, #748]	; (8001a6c <main+0x7f0>)
 8001780:	48b6      	ldr	r0, [pc, #728]	; (8001a5c <main+0x7e0>)
 8001782:	2209      	movs	r2, #9
 8001784:	f002 ff1c 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 4, 1000);
 8001788:	23fa      	movs	r3, #250	; 0xfa
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	1939      	adds	r1, r7, r4
 800178e:	48b3      	ldr	r0, [pc, #716]	; (8001a5c <main+0x7e0>)
 8001790:	2204      	movs	r2, #4
 8001792:	f002 ff15 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001796:	49b2      	ldr	r1, [pc, #712]	; (8001a60 <main+0x7e4>)
 8001798:	48b0      	ldr	r0, [pc, #704]	; (8001a5c <main+0x7e0>)
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	2202      	movs	r2, #2
 800179e:	f002 ff0f 	bl	80045c0 <HAL_UART_Transmit>
        strncat(buffer, "7", 1); //pil durumu 1-6 arası kadameli olacak
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7fe fcaf 	bl	8000108 <strlen>
 80017aa:	0003      	movs	r3, r0
 80017ac:	001a      	movs	r2, r3
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	189a      	adds	r2, r3, r2
 80017b2:	4baf      	ldr	r3, [pc, #700]	; (8001a70 <main+0x7f4>)
 80017b4:	0010      	movs	r0, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	2302      	movs	r3, #2
 80017ba:	001a      	movs	r2, r3
 80017bc:	f003 fbf4 	bl	8004fa8 <memcpy>
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
 80017c0:	23fa      	movs	r3, #250	; 0xfa
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	1939      	adds	r1, r7, r4
 80017c6:	48a5      	ldr	r0, [pc, #660]	; (8001a5c <main+0x7e0>)
 80017c8:	220a      	movs	r2, #10
 80017ca:	f002 fef9 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80017ce:	49a4      	ldr	r1, [pc, #656]	; (8001a60 <main+0x7e4>)
 80017d0:	48a2      	ldr	r0, [pc, #648]	; (8001a5c <main+0x7e0>)
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	2202      	movs	r2, #2
 80017d6:	f002 fef3 	bl	80045c0 <HAL_UART_Transmit>



        if (temperature1 < -1000) {
 80017da:	23f0      	movs	r3, #240	; 0xf0
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4aa4      	ldr	r2, [pc, #656]	; (8001a74 <main+0x7f8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	da29      	bge.n	800183c <main+0x5c0>
          strncat(buffer, "-", 1); //+ - durumu
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7fe fc8c 	bl	8000108 <strlen>
 80017f0:	0003      	movs	r3, r0
 80017f2:	001a      	movs	r2, r3
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	189a      	adds	r2, r3, r2
 80017f8:	4b9f      	ldr	r3, [pc, #636]	; (8001a78 <main+0x7fc>)
 80017fa:	0010      	movs	r0, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	2302      	movs	r3, #2
 8001800:	001a      	movs	r2, r3
 8001802:	f003 fbd1 	bl	8004fa8 <memcpy>
          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 8001806:	23fa      	movs	r3, #250	; 0xfa
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	1939      	adds	r1, r7, r4
 800180c:	4893      	ldr	r0, [pc, #588]	; (8001a5c <main+0x7e0>)
 800180e:	2216      	movs	r2, #22
 8001810:	f002 fed6 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001814:	4992      	ldr	r1, [pc, #584]	; (8001a60 <main+0x7e4>)
 8001816:	4891      	ldr	r0, [pc, #580]	; (8001a5c <main+0x7e0>)
 8001818:	2364      	movs	r3, #100	; 0x64
 800181a:	2202      	movs	r2, #2
 800181c:	f002 fed0 	bl	80045c0 <HAL_UART_Transmit>


          HAL_UART_Transmit(&hlpuart1, "-10dan kucuk", 12, 1000);
 8001820:	23fa      	movs	r3, #250	; 0xfa
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4995      	ldr	r1, [pc, #596]	; (8001a7c <main+0x800>)
 8001826:	488d      	ldr	r0, [pc, #564]	; (8001a5c <main+0x7e0>)
 8001828:	220c      	movs	r2, #12
 800182a:	f002 fec9 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800182e:	498c      	ldr	r1, [pc, #560]	; (8001a60 <main+0x7e4>)
 8001830:	488a      	ldr	r0, [pc, #552]	; (8001a5c <main+0x7e0>)
 8001832:	2364      	movs	r3, #100	; 0x64
 8001834:	2202      	movs	r2, #2
 8001836:	f002 fec3 	bl	80045c0 <HAL_UART_Transmit>
 800183a:	e082      	b.n	8001942 <main+0x6c6>
        } else if (temperature1 < 0) {
 800183c:	23f0      	movs	r3, #240	; 0xf0
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	da1e      	bge.n	8001886 <main+0x60a>
          strncat(buffer, "e-", 2); //+ - durumu
 8001848:	24ce      	movs	r4, #206	; 0xce
 800184a:	0064      	lsls	r4, r4, #1
 800184c:	193b      	adds	r3, r7, r4
 800184e:	0018      	movs	r0, r3
 8001850:	f7fe fc5a 	bl	8000108 <strlen>
 8001854:	0003      	movs	r3, r0
 8001856:	001a      	movs	r2, r3
 8001858:	193b      	adds	r3, r7, r4
 800185a:	189a      	adds	r2, r3, r2
 800185c:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <main+0x804>)
 800185e:	0010      	movs	r0, r2
 8001860:	0019      	movs	r1, r3
 8001862:	2303      	movs	r3, #3
 8001864:	001a      	movs	r2, r3
 8001866:	f003 fb9f 	bl	8004fa8 <memcpy>
          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 800186a:	23fa      	movs	r3, #250	; 0xfa
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	1939      	adds	r1, r7, r4
 8001870:	487a      	ldr	r0, [pc, #488]	; (8001a5c <main+0x7e0>)
 8001872:	2205      	movs	r2, #5
 8001874:	f002 fea4 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001878:	4979      	ldr	r1, [pc, #484]	; (8001a60 <main+0x7e4>)
 800187a:	4878      	ldr	r0, [pc, #480]	; (8001a5c <main+0x7e0>)
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	2202      	movs	r2, #2
 8001880:	f002 fe9e 	bl	80045c0 <HAL_UART_Transmit>
 8001884:	e05d      	b.n	8001942 <main+0x6c6>
        }
        else if (0 == temperature1) {
 8001886:	22f0      	movs	r2, #240	; 0xf0
 8001888:	0052      	lsls	r2, r2, #1
 800188a:	18bb      	adds	r3, r7, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d057      	beq.n	8001942 <main+0x6c6>


        } else if (temperature1 < 1000) {
 8001892:	18bb      	adds	r3, r7, r2
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	23fa      	movs	r3, #250	; 0xfa
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	429a      	cmp	r2, r3
 800189c:	da1e      	bge.n	80018dc <main+0x660>
          strncat(buffer, "e+", 2);
 800189e:	24ce      	movs	r4, #206	; 0xce
 80018a0:	0064      	lsls	r4, r4, #1
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7fe fc2f 	bl	8000108 <strlen>
 80018aa:	0003      	movs	r3, r0
 80018ac:	001a      	movs	r2, r3
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	189a      	adds	r2, r3, r2
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <main+0x808>)
 80018b4:	0010      	movs	r0, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	2303      	movs	r3, #3
 80018ba:	001a      	movs	r2, r3
 80018bc:	f003 fb74 	bl	8004fa8 <memcpy>
          HAL_UART_Transmit(&hlpuart1, "0 ile 10 arasinda", 17, 1000);
 80018c0:	23fa      	movs	r3, #250	; 0xfa
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4964      	ldr	r1, [pc, #400]	; (8001a58 <main+0x7dc>)
 80018c6:	4865      	ldr	r0, [pc, #404]	; (8001a5c <main+0x7e0>)
 80018c8:	2211      	movs	r2, #17
 80018ca:	f002 fe79 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80018ce:	4964      	ldr	r1, [pc, #400]	; (8001a60 <main+0x7e4>)
 80018d0:	4862      	ldr	r0, [pc, #392]	; (8001a5c <main+0x7e0>)
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	2202      	movs	r2, #2
 80018d6:	f002 fe73 	bl	80045c0 <HAL_UART_Transmit>
 80018da:	e032      	b.n	8001942 <main+0x6c6>

        } else if (temperature1 >= 1000) {
 80018dc:	23f0      	movs	r3, #240	; 0xf0
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	23fa      	movs	r3, #250	; 0xfa
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	db2a      	blt.n	8001942 <main+0x6c6>

          HAL_UART_Transmit(&hlpuart1, "10'dan buyuk", 12, 1000);
 80018ec:	23fa      	movs	r3, #250	; 0xfa
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	495d      	ldr	r1, [pc, #372]	; (8001a68 <main+0x7ec>)
 80018f2:	485a      	ldr	r0, [pc, #360]	; (8001a5c <main+0x7e0>)
 80018f4:	220c      	movs	r2, #12
 80018f6:	f002 fe63 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80018fa:	4959      	ldr	r1, [pc, #356]	; (8001a60 <main+0x7e4>)
 80018fc:	4857      	ldr	r0, [pc, #348]	; (8001a5c <main+0x7e0>)
 80018fe:	2364      	movs	r3, #100	; 0x64
 8001900:	2202      	movs	r2, #2
 8001902:	f002 fe5d 	bl	80045c0 <HAL_UART_Transmit>
          strncat(buffer, "+", 1); //+ - durumu
 8001906:	24ce      	movs	r4, #206	; 0xce
 8001908:	0064      	lsls	r4, r4, #1
 800190a:	193b      	adds	r3, r7, r4
 800190c:	0018      	movs	r0, r3
 800190e:	f7fe fbfb 	bl	8000108 <strlen>
 8001912:	0003      	movs	r3, r0
 8001914:	001a      	movs	r2, r3
 8001916:	193b      	adds	r3, r7, r4
 8001918:	189a      	adds	r2, r3, r2
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <main+0x80c>)
 800191c:	0010      	movs	r0, r2
 800191e:	0019      	movs	r1, r3
 8001920:	2302      	movs	r3, #2
 8001922:	001a      	movs	r2, r3
 8001924:	f003 fb40 	bl	8004fa8 <memcpy>
          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 8001928:	23fa      	movs	r3, #250	; 0xfa
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	1939      	adds	r1, r7, r4
 800192e:	484b      	ldr	r0, [pc, #300]	; (8001a5c <main+0x7e0>)
 8001930:	2216      	movs	r2, #22
 8001932:	f002 fe45 	bl	80045c0 <HAL_UART_Transmit>
          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001936:	494a      	ldr	r1, [pc, #296]	; (8001a60 <main+0x7e4>)
 8001938:	4848      	ldr	r0, [pc, #288]	; (8001a5c <main+0x7e0>)
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2202      	movs	r2, #2
 800193e:	f002 fe3f 	bl	80045c0 <HAL_UART_Transmit>
        }




        strncat(buffer, "A0000000003B", 12);
 8001942:	24ce      	movs	r4, #206	; 0xce
 8001944:	0064      	lsls	r4, r4, #1
 8001946:	193b      	adds	r3, r7, r4
 8001948:	0018      	movs	r0, r3
 800194a:	f7fe fbdd 	bl	8000108 <strlen>
 800194e:	0003      	movs	r3, r0
 8001950:	001a      	movs	r2, r3
 8001952:	193b      	adds	r3, r7, r4
 8001954:	189a      	adds	r2, r3, r2
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <main+0x810>)
 8001958:	0010      	movs	r0, r2
 800195a:	0019      	movs	r1, r3
 800195c:	230d      	movs	r3, #13
 800195e:	001a      	movs	r2, r3
 8001960:	f003 fb22 	bl	8004fa8 <memcpy>
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 8001964:	23fa      	movs	r3, #250	; 0xfa
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	1939      	adds	r1, r7, r4
 800196a:	483c      	ldr	r0, [pc, #240]	; (8001a5c <main+0x7e0>)
 800196c:	2216      	movs	r2, #22
 800196e:	f002 fe27 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001972:	493b      	ldr	r1, [pc, #236]	; (8001a60 <main+0x7e4>)
 8001974:	4839      	ldr	r0, [pc, #228]	; (8001a5c <main+0x7e0>)
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	2202      	movs	r2, #2
 800197a:	f002 fe21 	bl	80045c0 <HAL_UART_Transmit>
        //  strncat(buffer,"Asil2000000B", 12);
        //   strncat(buffer,"Asil3000000B", 12);
        //  strncat(buffer,"Asil4000000B", 12);
        //  strncat(buffer,"Asil5000000B", 12);
        // strncat(buffer,"Asil6000000B", 12);
        HAL_UART_Transmit(&hlpuart1, "buffer toplam: ", 15, 1000);
 800197e:	23fa      	movs	r3, #250	; 0xfa
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4943      	ldr	r1, [pc, #268]	; (8001a90 <main+0x814>)
 8001984:	4835      	ldr	r0, [pc, #212]	; (8001a5c <main+0x7e0>)
 8001986:	220f      	movs	r2, #15
 8001988:	f002 fe1a 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 800198c:	23fa      	movs	r3, #250	; 0xfa
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	1939      	adds	r1, r7, r4
 8001992:	4832      	ldr	r0, [pc, #200]	; (8001a5c <main+0x7e0>)
 8001994:	2216      	movs	r2, #22
 8001996:	f002 fe13 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800199a:	4931      	ldr	r1, [pc, #196]	; (8001a60 <main+0x7e4>)
 800199c:	482f      	ldr	r0, [pc, #188]	; (8001a5c <main+0x7e0>)
 800199e:	2364      	movs	r3, #100	; 0x64
 80019a0:	2202      	movs	r2, #2
 80019a2:	f002 fe0d 	bl	80045c0 <HAL_UART_Transmit>

        //if((bufferkontrol[0]!=buffer[0])||(bufferkontrol[1]!=buffer[1])||(bufferkontrol[2]!=buffer[2])||(bufferkontrol[3]!=buffer[3])){
        bSendMessage(buffer,  strlen(buffer));
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7fe fbad 	bl	8000108 <strlen>
 80019ae:	0003      	movs	r3, r0
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	0011      	movs	r1, r2
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff fbdd 	bl	8001176 <bSendMessage>
        while (GPO3_L());
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	23a0      	movs	r3, #160	; 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	0011      	movs	r1, r2
 80019c8:	0018      	movs	r0, r3
 80019ca:	f001 f96f 	bl	8002cac <HAL_GPIO_ReadPin>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d0f5      	beq.n	80019be <main+0x742>
        bIntSrcFlagClr();
 80019d2:	f7ff fb2d 	bl	8001030 <bIntSrcFlagClr>
        vClearFIFO();
 80019d6:	f7ff fb43 	bl	8001060 <vClearFIFO>
        bGoSleep();
 80019da:	f7ff fa13 	bl	8000e04 <bGoSleep>
        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderildi\r\n", 12, 100);
 80019de:	492d      	ldr	r1, [pc, #180]	; (8001a94 <main+0x818>)
 80019e0:	481e      	ldr	r0, [pc, #120]	; (8001a5c <main+0x7e0>)
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	220c      	movs	r2, #12
 80019e6:	f002 fdeb 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80019ea:	491d      	ldr	r1, [pc, #116]	; (8001a60 <main+0x7e4>)
 80019ec:	481b      	ldr	r0, [pc, #108]	; (8001a5c <main+0x7e0>)
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	2202      	movs	r2, #2
 80019f2:	f002 fde5 	bl	80045c0 <HAL_UART_Transmit>
        HAL_Delay(4000);
 80019f6:	23fa      	movs	r3, #250	; 0xfa
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 ff08 	bl	8002810 <HAL_Delay>
 8001a00:	e028      	b.n	8001a54 <main+0x7d8>
        // else HAL_UART_Transmit( &hlpuart1, (uint8_t *)"degısmedi\r\n",11, 100);

        //strcpy(buffer,bufferkontrol);
      } else {

        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderilmedi\r\n", 14, 100);
 8001a02:	4925      	ldr	r1, [pc, #148]	; (8001a98 <main+0x81c>)
 8001a04:	4815      	ldr	r0, [pc, #84]	; (8001a5c <main+0x7e0>)
 8001a06:	2364      	movs	r3, #100	; 0x64
 8001a08:	220e      	movs	r2, #14
 8001a0a:	f002 fdd9 	bl	80045c0 <HAL_UART_Transmit>
        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001a0e:	4914      	ldr	r1, [pc, #80]	; (8001a60 <main+0x7e4>)
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <main+0x7e0>)
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	2202      	movs	r2, #2
 8001a16:	f002 fdd3 	bl	80045c0 <HAL_UART_Transmit>
        bSendMessage(tx_buf, 22);
 8001a1a:	23da      	movs	r3, #218	; 0xda
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2116      	movs	r1, #22
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff fba7 	bl	8001176 <bSendMessage>
        while (GPO3_L());
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	23a0      	movs	r3, #160	; 0xa0
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	0011      	movs	r1, r2
 8001a34:	0018      	movs	r0, r3
 8001a36:	f001 f939 	bl	8002cac <HAL_GPIO_ReadPin>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d0f5      	beq.n	8001a2a <main+0x7ae>
        bIntSrcFlagClr();
 8001a3e:	f7ff faf7 	bl	8001030 <bIntSrcFlagClr>
        vClearFIFO();
 8001a42:	f7ff fb0d 	bl	8001060 <vClearFIFO>
        bGoSleep();
 8001a46:	f7ff f9dd 	bl	8000e04 <bGoSleep>
        HAL_Delay(4000);
 8001a4a:	23fa      	movs	r3, #250	; 0xfa
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 fede 	bl	8002810 <HAL_Delay>
  {
 8001a54:	e486      	b.n	8001364 <main+0xe8>
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	08006168 	.word	0x08006168
 8001a5c:	20000268 	.word	0x20000268
 8001a60:	0800610c 	.word	0x0800610c
 8001a64:	08006104 	.word	0x08006104
 8001a68:	0800617c 	.word	0x0800617c
 8001a6c:	0800618c 	.word	0x0800618c
 8001a70:	08006198 	.word	0x08006198
 8001a74:	fffffc18 	.word	0xfffffc18
 8001a78:	0800619c 	.word	0x0800619c
 8001a7c:	08006144 	.word	0x08006144
 8001a80:	080061a0 	.word	0x080061a0
 8001a84:	080061a4 	.word	0x080061a4
 8001a88:	080061a8 	.word	0x080061a8
 8001a8c:	080061ac 	.word	0x080061ac
 8001a90:	08006124 	.word	0x08006124
 8001a94:	08006134 	.word	0x08006134
 8001a98:	080061bc 	.word	0x080061bc

08001a9c <SystemClock_Config>:
/**
    @brief System Clock Configuration
    @retval None
*/
void SystemClock_Config(void)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b099      	sub	sp, #100	; 0x64
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	242c      	movs	r4, #44	; 0x2c
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	2334      	movs	r3, #52	; 0x34
 8001aaa:	001a      	movs	r2, r3
 8001aac:	2100      	movs	r1, #0
 8001aae:	f003 fa84 	bl	8004fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab2:	2318      	movs	r3, #24
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	2314      	movs	r3, #20
 8001aba:	001a      	movs	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	f003 fa7c 	bl	8004fba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac2:	003b      	movs	r3, r7
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	2318      	movs	r3, #24
 8001ac8:	001a      	movs	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	f003 fa75 	bl	8004fba <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <SystemClock_Config+0xd4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <SystemClock_Config+0xd8>)
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <SystemClock_Config+0xd4>)
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	0109      	lsls	r1, r1, #4
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
    in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ae2:	0021      	movs	r1, r4
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2201      	movs	r2, #1
 8001aee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	22a0      	movs	r2, #160	; 0xa0
 8001afa:	0212      	lsls	r2, r2, #8
 8001afc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	0018      	movs	r0, r3
 8001b08:	f001 fe40 	bl	800378c <HAL_RCC_OscConfig>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b10:	f000 f92c 	bl	8001d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b14:	2118      	movs	r1, #24
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	220f      	movs	r2, #15
 8001b1a:	601a      	str	r2, [r3, #0]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2100      	movs	r1, #0
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f002 f9a3 	bl	8003e84 <HAL_RCC_ClockConfig>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b42:	f000 f913 	bl	8001d6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1;
 8001b46:	003b      	movs	r3, r7
 8001b48:	220c      	movs	r2, #12
 8001b4a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b4c:	003b      	movs	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b52:	003b      	movs	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b58:	003b      	movs	r3, r7
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f002 fbb6 	bl	80042cc <HAL_RCCEx_PeriphCLKConfig>
 8001b60:	1e03      	subs	r3, r0, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001b64:	f000 f902 	bl	8001d6c <Error_Handler>
  }
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b019      	add	sp, #100	; 0x64
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	40007000 	.word	0x40007000
 8001b74:	ffffe7ff 	.word	0xffffe7ff

08001b78 <MX_I2C1_Init>:
    @brief I2C1 Initialization Function
    @param None
    @retval None
*/
static void MX_I2C1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <MX_I2C1_Init+0x7c>)
 8001b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001b84:	22e1      	movs	r2, #225	; 0xe1
 8001b86:	00d2      	lsls	r2, r2, #3
 8001b88:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f001 f8b2 	bl	8002d20 <HAL_I2C_Init>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc0:	f000 f8d4 	bl	8001d6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f001 fd47 	bl	800365c <HAL_I2CEx_ConfigAnalogFilter>
 8001bce:	1e03      	subs	r3, r0, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001bd2:	f000 f8cb 	bl	8001d6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_I2C1_Init+0x78>)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f001 fd8a 	bl	80036f4 <HAL_I2CEx_ConfigDigitalFilter>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001be4:	f000 f8c2 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	200002f8 	.word	0x200002f8
 8001bf4:	40005400 	.word	0x40005400

08001bf8 <MX_LPUART1_UART_Init>:
    @brief LPUART1 Initialization Function
    @param None
    @retval None
*/
static void MX_LPUART1_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <MX_LPUART1_UART_Init+0x58>)
 8001c00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c04:	22e1      	movs	r2, #225	; 0xe1
 8001c06:	0252      	lsls	r2, r2, #9
 8001c08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <MX_LPUART1_UART_Init+0x54>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f002 fc6e 	bl	8004518 <HAL_UART_Init>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001c40:	f000 f894 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	20000268 	.word	0x20000268
 8001c50:	40004800 	.word	0x40004800

08001c54 <MX_GPIO_Init>:
    @brief GPIO Initialization Function
    @param None
    @retval None
*/
static void MX_GPIO_Init(void)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b08b      	sub	sp, #44	; 0x2c
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	2414      	movs	r4, #20
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	0018      	movs	r0, r3
 8001c60:	2314      	movs	r3, #20
 8001c62:	001a      	movs	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	f003 f9a8 	bl	8004fba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001c70:	2104      	movs	r1, #4
 8001c72:	430a      	orrs	r2, r1
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c76:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	2201      	movs	r2, #1
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001cb8:	2102      	movs	r1, #2
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <MX_GPIO_Init+0x108>)
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	4824      	ldr	r0, [pc, #144]	; (8001d60 <MX_GPIO_Init+0x10c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	f001 f807 	bl	8002ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin | FCSB_Pin | SCLK_Pin | SDIO_Pin, GPIO_PIN_RESET);
 8001cd8:	4922      	ldr	r1, [pc, #136]	; (8001d64 <MX_GPIO_Init+0x110>)
 8001cda:	23a0      	movs	r3, #160	; 0xa0
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	2200      	movs	r2, #0
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f001 f800 	bl	8002ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ce6:	193b      	adds	r3, r7, r4
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0192      	lsls	r2, r2, #6
 8001cec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	193b      	adds	r3, r7, r4
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	193b      	adds	r3, r7, r4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <MX_GPIO_Init+0x10c>)
 8001d04:	0019      	movs	r1, r3
 8001d06:	0010      	movs	r0, r2
 8001d08:	f000 fe62 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin | FCSB_Pin | SCLK_Pin | SDIO_Pin;
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <MX_GPIO_Init+0x110>)
 8001d10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	2201      	movs	r2, #1
 8001d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	193a      	adds	r2, r7, r4
 8001d26:	23a0      	movs	r3, #160	; 0xa0
 8001d28:	05db      	lsls	r3, r3, #23
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 fe4f 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin GPO3_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin | GPO3_Pin;
 8001d32:	193b      	adds	r3, r7, r4
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <MX_GPIO_Init+0x114>)
 8001d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	193b      	adds	r3, r7, r4
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	193a      	adds	r2, r7, r4
 8001d46:	23a0      	movs	r3, #160	; 0xa0
 8001d48:	05db      	lsls	r3, r3, #23
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 fe3f 	bl	80029d0 <HAL_GPIO_Init>

}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b00b      	add	sp, #44	; 0x2c
 8001d58:	bd90      	pop	{r4, r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	50000800 	.word	0x50000800
 8001d64:	00000606 	.word	0x00000606
 8001d68:	00001010 	.word	0x00001010

08001d6c <Error_Handler>:
/**
    @brief  This function is executed in case of error occurrence.
    @retval None
*/
void Error_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <Error_Handler+0x8>

08001d76 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	000a      	movs	r2, r1
 8001d80:	1cbb      	adds	r3, r7, #2
 8001d82:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001d84:	230d      	movs	r3, #13
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	22ff      	movs	r2, #255	; 0xff
 8001d8a:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001d8c:	230e      	movs	r3, #14
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	e037      	b.n	8001e06 <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 8001d96:	230e      	movs	r3, #14
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	18d3      	adds	r3, r2, r3
 8001da0:	7819      	ldrb	r1, [r3, #0]
 8001da2:	220d      	movs	r2, #13
 8001da4:	18bb      	adds	r3, r7, r2
 8001da6:	18ba      	adds	r2, r7, r2
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	404a      	eors	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001dae:	230c      	movs	r3, #12
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	2208      	movs	r2, #8
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e01b      	b.n	8001df0 <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 8001db8:	210d      	movs	r1, #13
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da09      	bge.n	8001dd8 <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	2231      	movs	r2, #49	; 0x31
 8001dce:	4053      	eors	r3, r2
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e005      	b.n	8001de4 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8001dd8:	230d      	movs	r3, #13
 8001dda:	18fa      	adds	r2, r7, r3
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	18db      	adds	r3, r3, r3
 8001de2:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001de4:	220c      	movs	r2, #12
 8001de6:	18bb      	adds	r3, r7, r2
 8001de8:	18ba      	adds	r2, r7, r2
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	3a01      	subs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	230c      	movs	r3, #12
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1de      	bne.n	8001db8 <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001dfa:	220e      	movs	r2, #14
 8001dfc:	18bb      	adds	r3, r7, r2
 8001dfe:	18ba      	adds	r2, r7, r2
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	3201      	adds	r2, #1
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	230e      	movs	r3, #14
 8001e08:	18fa      	adds	r2, r7, r3
 8001e0a:	1cbb      	adds	r3, r7, #2
 8001e0c:	8812      	ldrh	r2, [r2, #0]
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3c0      	bcc.n	8001d96 <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8001e14:	230d      	movs	r3, #13
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b004      	add	sp, #16
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	0008      	movs	r0, r1
 8001e2c:	0011      	movs	r1, r2
 8001e2e:	1cbb      	adds	r3, r7, #2
 8001e30:	1c02      	adds	r2, r0, #0
 8001e32:	801a      	strh	r2, [r3, #0]
 8001e34:	1c7b      	adds	r3, r7, #1
 8001e36:	1c0a      	adds	r2, r1, #0
 8001e38:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8001e3a:	1cbb      	adds	r3, r7, #2
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0011      	movs	r1, r2
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff ff97 	bl	8001d76 <sensirion_common_generate_crc>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	1c7b      	adds	r3, r7, #1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d002      	beq.n	8001e5a <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 8001e54:	2301      	movs	r3, #1
 8001e56:	425b      	negs	r3, r3
 8001e58:	e000      	b.n	8001e5c <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	0008      	movs	r0, r1
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	0019      	movs	r1, r3
 8001e72:	250a      	movs	r5, #10
 8001e74:	197b      	adds	r3, r7, r5
 8001e76:	1c02      	adds	r2, r0, #0
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	1c0a      	adds	r2, r1, #0
 8001e80:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8001e82:	2014      	movs	r0, #20
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	2200      	movs	r2, #0
 8001e88:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8001e8a:	197b      	adds	r3, r7, r5
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	b299      	uxth	r1, r3
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	0004      	movs	r4, r0
 8001e98:	183a      	adds	r2, r7, r0
 8001e9a:	1c58      	adds	r0, r3, #1
 8001e9c:	8010      	strh	r0, [r2, #0]
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	189b      	adds	r3, r3, r2
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	193a      	adds	r2, r7, r4
 8001eae:	1c59      	adds	r1, r3, #1
 8001eb0:	8011      	strh	r1, [r2, #0]
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	197a      	adds	r2, r7, r5
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8001ec0:	2317      	movs	r3, #23
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e042      	b.n	8001f50 <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8001eca:	2617      	movs	r6, #23
 8001ecc:	19bb      	adds	r3, r7, r6
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	18d3      	adds	r3, r2, r3
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	b299      	uxth	r1, r3
 8001edc:	2414      	movs	r4, #20
 8001ede:	193b      	adds	r3, r7, r4
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	193a      	adds	r2, r7, r4
 8001ee4:	1c58      	adds	r0, r3, #1
 8001ee6:	8010      	strh	r0, [r2, #0]
 8001ee8:	001a      	movs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	189b      	adds	r3, r3, r2
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8001ef2:	19bb      	adds	r3, r7, r6
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	8819      	ldrh	r1, [r3, #0]
 8001efe:	0025      	movs	r5, r4
 8001f00:	197b      	adds	r3, r7, r5
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	197a      	adds	r2, r7, r5
 8001f06:	1c58      	adds	r0, r3, #1
 8001f08:	8010      	strh	r0, [r2, #0]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	b2ca      	uxtb	r2, r1
 8001f12:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8001f14:	197b      	adds	r3, r7, r5
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	3b02      	subs	r3, #2
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	18d3      	adds	r3, r2, r3
 8001f1e:	2213      	movs	r2, #19
 8001f20:	18bc      	adds	r4, r7, r2
 8001f22:	2102      	movs	r1, #2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff ff26 	bl	8001d76 <sensirion_common_generate_crc>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8001f2e:	197b      	adds	r3, r7, r5
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	197a      	adds	r2, r7, r5
 8001f34:	1c59      	adds	r1, r3, #1
 8001f36:	8011      	strh	r1, [r2, #0]
 8001f38:	001a      	movs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	189b      	adds	r3, r3, r2
 8001f3e:	2213      	movs	r2, #19
 8001f40:	18ba      	adds	r2, r7, r2
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8001f46:	19bb      	adds	r3, r7, r6
 8001f48:	19ba      	adds	r2, r7, r6
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fa      	adds	r2, r7, r3
 8001f54:	2309      	movs	r3, #9
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3b4      	bcc.n	8001eca <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 8001f60:	2314      	movs	r3, #20
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	881b      	ldrh	r3, [r3, #0]
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b007      	add	sp, #28
 8001f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f6e <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8001f6e:	b5b0      	push	{r4, r5, r7, lr}
 8001f70:	b096      	sub	sp, #88	; 0x58
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	0011      	movs	r1, r2
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	1c02      	adds	r2, r0, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	1c0a      	adds	r2, r1, #0
 8001f82:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8001f84:	2052      	movs	r0, #82	; 0x52
 8001f86:	1839      	adds	r1, r7, r0
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	1c1a      	adds	r2, r3, #0
 8001f8e:	1892      	adds	r2, r2, r2
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001f94:	2308      	movs	r3, #8
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 f901 	bl	80021ac <sensirion_i2c_read>
 8001faa:	0003      	movs	r3, r0
 8001fac:	001a      	movs	r2, r3
 8001fae:	214a      	movs	r1, #74	; 0x4a
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8001fb4:	000a      	movs	r2, r1
 8001fb6:	18bb      	adds	r3, r7, r2
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5e5b      	ldrsh	r3, [r3, r1]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 8001fc0:	18bb      	adds	r3, r7, r2
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8001fc6:	e053      	b.n	8002070 <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001fc8:	2356      	movs	r3, #86	; 0x56
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	2200      	movs	r2, #0
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	2354      	movs	r3, #84	; 0x54
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	e041      	b.n	800205e <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001fda:	2156      	movs	r1, #86	; 0x56
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe2:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fec:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	f7ff ff15 	bl	8001e22 <sensirion_common_check_crc>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	214a      	movs	r1, #74	; 0x4a
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 8002002:	000a      	movs	r2, r1
 8002004:	18bb      	adds	r3, r7, r2
 8002006:	2100      	movs	r1, #0
 8002008:	5e5b      	ldrsh	r3, [r3, r1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 800200e:	18bb      	adds	r3, r7, r2
 8002010:	2200      	movs	r2, #0
 8002012:	5e9b      	ldrsh	r3, [r3, r2]
 8002014:	e02c      	b.n	8002070 <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8002016:	2456      	movs	r4, #86	; 0x56
 8002018:	193b      	adds	r3, r7, r4
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800201e:	18d2      	adds	r2, r2, r3
 8002020:	2554      	movs	r5, #84	; 0x54
 8002022:	197b      	adds	r3, r7, r5
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	1979      	adds	r1, r7, r5
 8002028:	1c58      	adds	r0, r3, #1
 800202a:	8008      	strh	r0, [r1, #0]
 800202c:	0019      	movs	r1, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	185b      	adds	r3, r3, r1
 8002032:	7812      	ldrb	r2, [r2, #0]
 8002034:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8002036:	193b      	adds	r3, r7, r4
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800203e:	18d2      	adds	r2, r2, r3
 8002040:	197b      	adds	r3, r7, r5
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	1979      	adds	r1, r7, r5
 8002046:	1c58      	adds	r0, r3, #1
 8002048:	8008      	strh	r0, [r1, #0]
 800204a:	0019      	movs	r1, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	185b      	adds	r3, r3, r1
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002054:	193b      	adds	r3, r7, r4
 8002056:	193a      	adds	r2, r7, r4
 8002058:	8812      	ldrh	r2, [r2, #0]
 800205a:	3203      	adds	r2, #3
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	2356      	movs	r3, #86	; 0x56
 8002060:	18fa      	adds	r2, r7, r3
 8002062:	2352      	movs	r3, #82	; 0x52
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d3b5      	bcc.n	8001fda <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 800206e:	2300      	movs	r3, #0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b016      	add	sp, #88	; 0x58
 8002076:	bdb0      	pop	{r4, r5, r7, pc}

08002078 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6039      	str	r1, [r7, #0]
 8002080:	0011      	movs	r1, r2
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	1c02      	adds	r2, r0, #0
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	1c0a      	adds	r2, r1, #0
 800208c:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 800208e:	250c      	movs	r5, #12
 8002090:	197c      	adds	r4, r7, r5
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	1dfb      	adds	r3, r7, #7
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ff66 	bl	8001f6e <sensirion_i2c_read_words_as_bytes>
 80020a2:	0003      	movs	r3, r0
 80020a4:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 80020a6:	197b      	adds	r3, r7, r5
 80020a8:	2200      	movs	r2, #0
 80020aa:	5e9b      	ldrsh	r3, [r3, r2]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <sensirion_i2c_read_words+0x40>
        return ret;
 80020b0:	197b      	adds	r3, r7, r5
 80020b2:	2200      	movs	r2, #0
 80020b4:	5e9b      	ldrsh	r3, [r3, r2]
 80020b6:	e02a      	b.n	800210e <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e01c      	b.n	80020fc <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 80020c2:	200f      	movs	r0, #15
 80020c4:	183b      	adds	r3, r7, r0
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	18d3      	adds	r3, r2, r3
 80020ce:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	3301      	adds	r3, #1
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b219      	sxth	r1, r3
 80020e4:	183b      	adds	r3, r7, r0
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	b28a      	uxth	r2, r1
 80020f0:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 80020f2:	183b      	adds	r3, r7, r0
 80020f4:	183a      	adds	r2, r7, r0
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	3201      	adds	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	230f      	movs	r3, #15
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	1d3a      	adds	r2, r7, #4
 8002106:	8812      	ldrh	r2, [r2, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8da      	bhi.n	80020c2 <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 800210c:	2300      	movs	r3, #0
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bdb0      	pop	{r4, r5, r7, pc}

08002116 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8002116:	b590      	push	{r4, r7, lr}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	0002      	movs	r2, r0
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	1c0a      	adds	r2, r1, #0
 8002126:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	8819      	ldrh	r1, [r3, #0]
 800212c:	240c      	movs	r4, #12
 800212e:	1938      	adds	r0, r7, r4
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	f7ff fe96 	bl	8001e64 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8002138:	1939      	adds	r1, r7, r4
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2202      	movs	r2, #2
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f853 	bl	80021ec <sensirion_i2c_write>
 8002146:	0003      	movs	r3, r0
 8002148:	b21b      	sxth	r3, r3
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b005      	add	sp, #20
 8002150:	bd90      	pop	{r4, r7, pc}
	...

08002154 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <sensirion_i2c_init+0x4c>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <sensirion_i2c_init+0x50>)
 800215c:	601a      	str	r2, [r3, #0]
   // hi2c1.Init.ClockSpeed = 100000;
   // hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <sensirion_i2c_init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <sensirion_i2c_init+0x4c>)
 8002166:	2201      	movs	r2, #1
 8002168:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <sensirion_i2c_init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <sensirion_i2c_init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <sensirion_i2c_init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <sensirion_i2c_init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <sensirion_i2c_init+0x54>)
 8002184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <sensirion_i2c_init+0x54>)
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	0389      	lsls	r1, r1, #14
 800218c:	430a      	orrs	r2, r1
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <sensirion_i2c_init+0x4c>)
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fdc4 	bl	8002d20 <HAL_I2C_Init>
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	20000210 	.word	0x20000210
 80021a4:	40005400 	.word	0x40005400
 80021a8:	40021000 	.word	0x40021000

080021ac <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	6039      	str	r1, [r7, #0]
 80021b4:	0011      	movs	r1, r2
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	1c02      	adds	r2, r0, #0
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	1c0a      	adds	r2, r1, #0
 80021c0:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	18db      	adds	r3, r3, r3
 80021ca:	b299      	uxth	r1, r3
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <sensirion_i2c_read+0x3c>)
 80021d4:	2464      	movs	r4, #100	; 0x64
 80021d6:	9400      	str	r4, [sp, #0]
 80021d8:	f000 ff40 	bl	800305c <HAL_I2C_Master_Receive>
 80021dc:	0003      	movs	r3, r0
 80021de:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b003      	add	sp, #12
 80021e6:	bd90      	pop	{r4, r7, pc}
 80021e8:	20000210 	.word	0x20000210

080021ec <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	6039      	str	r1, [r7, #0]
 80021f4:	0011      	movs	r1, r2
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	1c02      	adds	r2, r0, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	1c0a      	adds	r2, r1, #0
 8002200:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	18db      	adds	r3, r3, r3
 800220a:	b299      	uxth	r1, r3
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <sensirion_i2c_write+0x3c>)
 8002214:	2464      	movs	r4, #100	; 0x64
 8002216:	9400      	str	r4, [sp, #0]
 8002218:	f000 fe18 	bl	8002e4c <HAL_I2C_Master_Transmit>
 800221c:	0003      	movs	r3, r0
 800221e:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b003      	add	sp, #12
 8002226:	bd90      	pop	{r4, r7, pc}
 8002228:	20000210 	.word	0x20000210

0800222c <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	22fa      	movs	r2, #250	; 0xfa
 8002238:	0091      	lsls	r1, r2, #2
 800223a:	0018      	movs	r0, r3
 800223c:	f7fd ff76 	bl	800012c <__udivsi3>
 8002240:	0003      	movs	r3, r0
 8002242:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	22fa      	movs	r2, #250	; 0xfa
 8002248:	0091      	lsls	r1, r2, #2
 800224a:	0018      	movs	r0, r3
 800224c:	f7fd fff4 	bl	8000238 <__aeabi_uidivmod>
 8002250:	1e0b      	subs	r3, r1, #0
 8002252:	d002      	beq.n	800225a <sensirion_sleep_usec+0x2e>
        msec++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 800225a:	f000 fafd 	bl	8002858 <HAL_GetHalVersion>
 800225e:	0003      	movs	r3, r0
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <sensirion_sleep_usec+0x50>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d802      	bhi.n	800226c <sensirion_sleep_usec+0x40>
        msec++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	0018      	movs	r0, r3
 8002270:	f000 face 	bl	8002810 <HAL_Delay>
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}
 800227c:	010100ff 	.word	0x010100ff

08002280 <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 8002280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	250f      	movs	r5, #15
 800228c:	197b      	adds	r3, r7, r5
 800228e:	1c02      	adds	r2, r0, #0
 8002290:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 8002292:	2616      	movs	r6, #22
 8002294:	19bc      	adds	r4, r7, r6
 8002296:	197b      	adds	r3, r7, r5
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f820 	bl	80022e0 <sht3x_measure>
 80022a0:	0003      	movs	r3, r0
 80022a2:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 80022a4:	19bb      	adds	r3, r7, r6
 80022a6:	2200      	movs	r2, #0
 80022a8:	5e9b      	ldrsh	r3, [r3, r2]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <sht3x_measure_blocking_read+0x5c>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff ffbb 	bl	800222c <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 80022b6:	19bc      	adds	r4, r7, r6
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	197b      	adds	r3, r7, r5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 f823 	bl	800230c <sht3x_read>
 80022c6:	0003      	movs	r3, r0
 80022c8:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 80022ca:	2316      	movs	r3, #22
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2200      	movs	r2, #0
 80022d0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b007      	add	sp, #28
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	00003a98 	.word	0x00003a98

080022e0 <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	0002      	movs	r2, r0
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <sht3x_measure+0x28>)
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	0011      	movs	r1, r2
 80022f6:	0018      	movs	r0, r3
 80022f8:	f7ff ff0d 	bl	8002116 <sensirion_i2c_write_cmd>
 80022fc:	0003      	movs	r3, r0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	20000180 	.word	0x20000180

0800230c <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 800230c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	260f      	movs	r6, #15
 8002318:	19bb      	adds	r3, r7, r6
 800231a:	1c02      	adds	r2, r0, #0
 800231c:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 800231e:	2316      	movs	r3, #22
 8002320:	18fc      	adds	r4, r7, r3
 8002322:	2510      	movs	r5, #16
 8002324:	1979      	adds	r1, r7, r5
 8002326:	19bb      	adds	r3, r7, r6
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2202      	movs	r2, #2
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff fea3 	bl	8002078 <sensirion_i2c_read_words>
 8002332:	0003      	movs	r3, r0
 8002334:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8002336:	197b      	adds	r3, r7, r5
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	0011      	movs	r1, r2
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f810 	bl	8002364 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8002344:	197b      	adds	r3, r7, r5
 8002346:	885b      	ldrh	r3, [r3, #2]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f821 	bl	8002394 <tick_to_humidity>

    return ret;
 8002352:	2316      	movs	r3, #22
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	5e9b      	ldrsh	r3, [r3, r2]
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b007      	add	sp, #28
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002364 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	0002      	movs	r2, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	1dbb      	adds	r3, r7, #6
 8002370:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8002372:	1dbb      	adds	r3, r7, #6
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <tick_to_temperature+0x28>)
 8002378:	4353      	muls	r3, r2
 800237a:	135b      	asrs	r3, r3, #13
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <tick_to_temperature+0x2c>)
 800237e:	189a      	adds	r2, r3, r2
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00005573 	.word	0x00005573
 8002390:	ffff5038 	.word	0xffff5038

08002394 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	0002      	movs	r2, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 80023a2:	1dbb      	adds	r3, r7, #6
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <tick_to_humidity+0x24>)
 80023a8:	4353      	muls	r3, r2
 80023aa:	135a      	asrs	r2, r3, #13
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	000030d4 	.word	0x000030d4

080023bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_MspInit+0x24>)
 80023c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_MspInit+0x24>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_MspInit+0x24>)
 80023ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_MspInit+0x24>)
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	0549      	lsls	r1, r1, #21
 80023d6:	430a      	orrs	r2, r1
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	240c      	movs	r4, #12
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	0018      	movs	r0, r3
 80023f2:	2314      	movs	r3, #20
 80023f4:	001a      	movs	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f002 fddf 	bl	8004fba <memset>
  if(hi2c->Instance==I2C1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a17      	ldr	r2, [pc, #92]	; (8002460 <HAL_I2C_MspInit+0x7c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d128      	bne.n	8002458 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_I2C_MspInit+0x80>)
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_I2C_MspInit+0x80>)
 800240c:	2102      	movs	r1, #2
 800240e:	430a      	orrs	r2, r1
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_I2C_MspInit+0x80>)
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800241e:	0021      	movs	r1, r4
 8002420:	187b      	adds	r3, r7, r1
 8002422:	22c0      	movs	r2, #192	; 0xc0
 8002424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002426:	187b      	adds	r3, r7, r1
 8002428:	2212      	movs	r2, #18
 800242a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2203      	movs	r2, #3
 8002436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2201      	movs	r2, #1
 800243c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243e:	187b      	adds	r3, r7, r1
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_I2C_MspInit+0x84>)
 8002442:	0019      	movs	r1, r3
 8002444:	0010      	movs	r0, r2
 8002446:	f000 fac3 	bl	80029d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_I2C_MspInit+0x80>)
 800244c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_I2C_MspInit+0x80>)
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	0389      	lsls	r1, r1, #14
 8002454:	430a      	orrs	r2, r1
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b009      	add	sp, #36	; 0x24
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	40005400 	.word	0x40005400
 8002464:	40021000 	.word	0x40021000
 8002468:	50000400 	.word	0x50000400

0800246c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b08b      	sub	sp, #44	; 0x2c
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	2414      	movs	r4, #20
 8002476:	193b      	adds	r3, r7, r4
 8002478:	0018      	movs	r0, r3
 800247a:	2314      	movs	r3, #20
 800247c:	001a      	movs	r2, r3
 800247e:	2100      	movs	r1, #0
 8002480:	f002 fd9b 	bl	8004fba <memset>
  if(huart->Instance==LPUART1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_UART_MspInit+0xc0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d14a      	bne.n	8002524 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_UART_MspInit+0xc4>)
 8002490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002492:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_UART_MspInit+0xc4>)
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	02c9      	lsls	r1, r1, #11
 8002498:	430a      	orrs	r2, r1
 800249a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_UART_MspInit+0xc4>)
 800249e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_UART_MspInit+0xc4>)
 80024a2:	2104      	movs	r1, #4
 80024a4:	430a      	orrs	r2, r1
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_UART_MspInit+0xc4>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2204      	movs	r2, #4
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_UART_MspInit+0xc4>)
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_UART_MspInit+0xc4>)
 80024ba:	2102      	movs	r1, #2
 80024bc:	430a      	orrs	r2, r1
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_UART_MspInit+0xc4>)
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	2202      	movs	r2, #2
 80024d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	193b      	adds	r3, r7, r4
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	2203      	movs	r2, #3
 80024e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	2206      	movs	r2, #6
 80024e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ea:	193b      	adds	r3, r7, r4
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_UART_MspInit+0xc8>)
 80024ee:	0019      	movs	r1, r3
 80024f0:	0010      	movs	r0, r2
 80024f2:	f000 fa6d 	bl	80029d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024f6:	0021      	movs	r1, r4
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	00d2      	lsls	r2, r2, #3
 80024fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	187b      	adds	r3, r7, r1
 8002502:	2202      	movs	r2, #2
 8002504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2203      	movs	r2, #3
 8002510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2206      	movs	r2, #6
 8002516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	187b      	adds	r3, r7, r1
 800251a:	4a07      	ldr	r2, [pc, #28]	; (8002538 <HAL_UART_MspInit+0xcc>)
 800251c:	0019      	movs	r1, r3
 800251e:	0010      	movs	r0, r2
 8002520:	f000 fa56 	bl	80029d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b00b      	add	sp, #44	; 0x2c
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	40004800 	.word	0x40004800
 8002530:	40021000 	.word	0x40021000
 8002534:	50000800 	.word	0x50000800
 8002538:	50000400 	.word	0x50000400

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 f93a 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e00a      	b.n	8002592 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800257c:	e000      	b.n	8002580 <_read+0x16>
 800257e:	bf00      	nop
 8002580:	0001      	movs	r1, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	60ba      	str	r2, [r7, #8]
 8002588:	b2ca      	uxtb	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbf0      	blt.n	800257c <_read+0x12>
	}

return len;
 800259a:	687b      	ldr	r3, [r7, #4]
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b006      	add	sp, #24
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e009      	b.n	80025ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	60ba      	str	r2, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	0018      	movs	r0, r3
 80025c0:	e000      	b.n	80025c4 <_write+0x20>
 80025c2:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbf1      	blt.n	80025b6 <_write+0x12>
	}
	return len;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b006      	add	sp, #24
 80025da:	bd80      	pop	{r7, pc}

080025dc <_close>:

int _close(int file)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	return -1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	425b      	negs	r3, r3
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0192      	lsls	r2, r2, #6
 8002600:	605a      	str	r2, [r3, #4]
	return 0;
 8002602:	2300      	movs	r3, #0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <_isatty>:

int _isatty(int file)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	return 1;
 8002614:	2301      	movs	r3, #1
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}

0800261e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
	return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	18d3      	adds	r3, r2, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f002 fc76 	bl	8004f54 <__errno>
 8002668:	0003      	movs	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	2301      	movs	r3, #1
 8002670:	425b      	negs	r3, r3
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	18d2      	adds	r2, r2, r3
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b006      	add	sp, #24
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20002000 	.word	0x20002000
 8002694:	00000400 	.word	0x00000400
 8002698:	2000025c 	.word	0x2000025c
 800269c:	20000358 	.word	0x20000358

080026a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80026ac:	4813      	ldr	r0, [pc, #76]	; (80026fc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80026ae:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80026b0:	4813      	ldr	r0, [pc, #76]	; (8002700 <LoopForever+0x6>)
    LDR R1, [R0]
 80026b2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80026b4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <LoopForever+0xa>)
    CMP R1, R2
 80026b8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80026ba:	d105      	bne.n	80026c8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80026bc:	4812      	ldr	r0, [pc, #72]	; (8002708 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80026be:	4913      	ldr	r1, [pc, #76]	; (800270c <LoopForever+0x12>)
    STR R1, [R0]
 80026c0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80026c2:	4813      	ldr	r0, [pc, #76]	; (8002710 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80026c4:	4913      	ldr	r1, [pc, #76]	; (8002714 <LoopForever+0x1a>)
    STR R1, [R0]
 80026c6:	6001      	str	r1, [r0, #0]

080026c8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <LoopForever+0x1e>)
  ldr r1, =_edata
 80026ca:	4914      	ldr	r1, [pc, #80]	; (800271c <LoopForever+0x22>)
  ldr r2, =_sidata
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <LoopForever+0x26>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a11      	ldr	r2, [pc, #68]	; (8002724 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80026e0:	4c11      	ldr	r4, [pc, #68]	; (8002728 <LoopForever+0x2e>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026ee:	f7ff ffd7 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f002 fc35 	bl	8004f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7fe fdc1 	bl	800127c <main>

080026fa <LoopForever>:

LoopForever:
    b LoopForever
 80026fa:	e7fe      	b.n	80026fa <LoopForever>
   ldr   r0, =_estack
 80026fc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002700:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002704:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002708:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800270c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002710:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002714:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002720:	08006300 	.word	0x08006300
  ldr r2, =_sbss
 8002724:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002728:	20000358 	.word	0x20000358

0800272c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC1_IRQHandler>
	...

08002730 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002736:	1dfb      	adds	r3, r7, #7
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_Init+0x3c>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Init+0x3c>)
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f811 	bl	8002770 <HAL_InitTick>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d003      	beq.n	800275a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e001      	b.n	800275e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800275a:	f7ff fe2f 	bl	80023bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_InitTick+0x5c>)
 800277a:	681c      	ldr	r4, [r3, #0]
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_InitTick+0x60>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	0019      	movs	r1, r3
 8002782:	23fa      	movs	r3, #250	; 0xfa
 8002784:	0098      	lsls	r0, r3, #2
 8002786:	f7fd fcd1 	bl	800012c <__udivsi3>
 800278a:	0003      	movs	r3, r0
 800278c:	0019      	movs	r1, r3
 800278e:	0020      	movs	r0, r4
 8002790:	f7fd fccc 	bl	800012c <__udivsi3>
 8002794:	0003      	movs	r3, r0
 8002796:	0018      	movs	r0, r3
 8002798:	f000 f90d 	bl	80029b6 <HAL_SYSTICK_Config>
 800279c:	1e03      	subs	r3, r0, #0
 800279e:	d001      	beq.n	80027a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e00f      	b.n	80027c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d80b      	bhi.n	80027c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	2301      	movs	r3, #1
 80027ae:	425b      	negs	r3, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f8ea 	bl	800298c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_InitTick+0x64>)
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b003      	add	sp, #12
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	20000184 	.word	0x20000184
 80027d0:	2000018c 	.word	0x2000018c
 80027d4:	20000188 	.word	0x20000188

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_IncTick+0x1c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	001a      	movs	r2, r3
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x20>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	18d2      	adds	r2, r2, r3
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_IncTick+0x20>)
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	2000018c 	.word	0x2000018c
 80027f8:	20000344 	.word	0x20000344

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <HAL_GetTick+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	20000344 	.word	0x20000344

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff fff0 	bl	80027fc <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	001a      	movs	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	189b      	adds	r3, r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	f7ff ffe0 	bl	80027fc <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	2000018c 	.word	0x2000018c

08002858 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 800285c:	4b01      	ldr	r3, [pc, #4]	; (8002864 <HAL_GetHalVersion+0xc>)
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	010a0500 	.word	0x010a0500

08002868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	0002      	movs	r2, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b7f      	cmp	r3, #127	; 0x7f
 800287c:	d828      	bhi.n	80028d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800287e:	4a2f      	ldr	r2, [pc, #188]	; (800293c <__NVIC_SetPriority+0xd4>)
 8002880:	1dfb      	adds	r3, r7, #7
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b25b      	sxtb	r3, r3
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	33c0      	adds	r3, #192	; 0xc0
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	589b      	ldr	r3, [r3, r2]
 800288e:	1dfa      	adds	r2, r7, #7
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	0011      	movs	r1, r2
 8002894:	2203      	movs	r2, #3
 8002896:	400a      	ands	r2, r1
 8002898:	00d2      	lsls	r2, r2, #3
 800289a:	21ff      	movs	r1, #255	; 0xff
 800289c:	4091      	lsls	r1, r2
 800289e:	000a      	movs	r2, r1
 80028a0:	43d2      	mvns	r2, r2
 80028a2:	401a      	ands	r2, r3
 80028a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	22ff      	movs	r2, #255	; 0xff
 80028ac:	401a      	ands	r2, r3
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	0018      	movs	r0, r3
 80028b4:	2303      	movs	r3, #3
 80028b6:	4003      	ands	r3, r0
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028bc:	481f      	ldr	r0, [pc, #124]	; (800293c <__NVIC_SetPriority+0xd4>)
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b25b      	sxtb	r3, r3
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	430a      	orrs	r2, r1
 80028c8:	33c0      	adds	r3, #192	; 0xc0
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028ce:	e031      	b.n	8002934 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <__NVIC_SetPriority+0xd8>)
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	0019      	movs	r1, r3
 80028d8:	230f      	movs	r3, #15
 80028da:	400b      	ands	r3, r1
 80028dc:	3b08      	subs	r3, #8
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3306      	adds	r3, #6
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	3304      	adds	r3, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1dfa      	adds	r2, r7, #7
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	0011      	movs	r1, r2
 80028f0:	2203      	movs	r2, #3
 80028f2:	400a      	ands	r2, r1
 80028f4:	00d2      	lsls	r2, r2, #3
 80028f6:	21ff      	movs	r1, #255	; 0xff
 80028f8:	4091      	lsls	r1, r2
 80028fa:	000a      	movs	r2, r1
 80028fc:	43d2      	mvns	r2, r2
 80028fe:	401a      	ands	r2, r3
 8002900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	019b      	lsls	r3, r3, #6
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	401a      	ands	r2, r3
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	0018      	movs	r0, r3
 8002910:	2303      	movs	r3, #3
 8002912:	4003      	ands	r3, r0
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002918:	4809      	ldr	r0, [pc, #36]	; (8002940 <__NVIC_SetPriority+0xd8>)
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	001c      	movs	r4, r3
 8002920:	230f      	movs	r3, #15
 8002922:	4023      	ands	r3, r4
 8002924:	3b08      	subs	r3, #8
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	430a      	orrs	r2, r1
 800292a:	3306      	adds	r3, #6
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	18c3      	adds	r3, r0, r3
 8002930:	3304      	adds	r3, #4
 8002932:	601a      	str	r2, [r3, #0]
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b003      	add	sp, #12
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	e000e100 	.word	0xe000e100
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	045b      	lsls	r3, r3, #17
 8002954:	429a      	cmp	r2, r3
 8002956:	d301      	bcc.n	800295c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002958:	2301      	movs	r3, #1
 800295a:	e010      	b.n	800297e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <SysTick_Config+0x44>)
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	3a01      	subs	r2, #1
 8002962:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002964:	2301      	movs	r3, #1
 8002966:	425b      	negs	r3, r3
 8002968:	2103      	movs	r1, #3
 800296a:	0018      	movs	r0, r3
 800296c:	f7ff ff7c 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SysTick_Config+0x44>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SysTick_Config+0x44>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	210f      	movs	r1, #15
 8002998:	187b      	adds	r3, r7, r1
 800299a:	1c02      	adds	r2, r0, #0
 800299c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff ff5d 	bl	8002868 <__NVIC_SetPriority>
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ffbf 	bl	8002944 <SysTick_Config>
 80029c6:	0003      	movs	r3, r0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029e6:	e149      	b.n	8002c7c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4091      	lsls	r1, r2
 80029f2:	000a      	movs	r2, r1
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d100      	bne.n	8002a00 <HAL_GPIO_Init+0x30>
 80029fe:	e13a      	b.n	8002c76 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d005      	beq.n	8002a18 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2203      	movs	r2, #3
 8002a12:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d130      	bne.n	8002a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	409a      	lsls	r2, r3
 8002a26:	0013      	movs	r3, r2
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a4e:	2201      	movs	r2, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
 8002a54:	0013      	movs	r3, r2
 8002a56:	43da      	mvns	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	2201      	movs	r2, #1
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2203      	movs	r2, #3
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d017      	beq.n	8002ab6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	409a      	lsls	r2, r3
 8002a94:	0013      	movs	r3, r2
 8002a96:	43da      	mvns	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d123      	bne.n	8002b0a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	08da      	lsrs	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3208      	adds	r2, #8
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	58d3      	ldr	r3, [r2, r3]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	409a      	lsls	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2107      	movs	r1, #7
 8002aee:	400b      	ands	r3, r1
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	409a      	lsls	r2, r3
 8002af4:	0013      	movs	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	6939      	ldr	r1, [r7, #16]
 8002b08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2203      	movs	r2, #3
 8002b28:	401a      	ands	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4013      	ands	r3, r2
 8002b48:	d100      	bne.n	8002b4c <HAL_GPIO_Init+0x17c>
 8002b4a:	e094      	b.n	8002c76 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4c:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_GPIO_Init+0x2c4>)
 8002b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_GPIO_Init+0x2c4>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	430a      	orrs	r2, r1
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b58:	4a4f      	ldr	r2, [pc, #316]	; (8002c98 <HAL_GPIO_Init+0x2c8>)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	589b      	ldr	r3, [r3, r2]
 8002b64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	409a      	lsls	r2, r3
 8002b72:	0013      	movs	r3, r2
 8002b74:	43da      	mvns	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	23a0      	movs	r3, #160	; 0xa0
 8002b80:	05db      	lsls	r3, r3, #23
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x1de>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a44      	ldr	r2, [pc, #272]	; (8002c9c <HAL_GPIO_Init+0x2cc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x1da>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a43      	ldr	r2, [pc, #268]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x1d6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_GPIO_Init+0x2d4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x1d2>
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x1e0>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x1e0>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x1e0>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x1e0>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	; (8002c98 <HAL_GPIO_Init+0x2c8>)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bce:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	025b      	lsls	r3, r3, #9
 8002be6:	4013      	ands	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	43da      	mvns	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	4013      	ands	r3, r2
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c22:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	035b      	lsls	r3, r3, #13
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43da      	mvns	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	039b      	lsls	r3, r3, #14
 8002c64:	4013      	ands	r3, r2
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1e13      	subs	r3, r2, #0
 8002c86:	d000      	beq.n	8002c8a <HAL_GPIO_Init+0x2ba>
 8002c88:	e6ae      	b.n	80029e8 <HAL_GPIO_Init+0x18>
  }
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b006      	add	sp, #24
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	50000400 	.word	0x50000400
 8002ca0:	50000800 	.word	0x50000800
 8002ca4:	50001c00 	.word	0x50001c00
 8002ca8:	40010400 	.word	0x40010400

08002cac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	000a      	movs	r2, r1
 8002cb6:	1cbb      	adds	r3, r7, #2
 8002cb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	1cba      	adds	r2, r7, #2
 8002cc0:	8812      	ldrh	r2, [r2, #0]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002cc6:	230f      	movs	r3, #15
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e003      	b.n	8002cd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cd0:	230f      	movs	r3, #15
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002cd8:	230f      	movs	r3, #15
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	781b      	ldrb	r3, [r3, #0]
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	0008      	movs	r0, r1
 8002cf0:	0011      	movs	r1, r2
 8002cf2:	1cbb      	adds	r3, r7, #2
 8002cf4:	1c02      	adds	r2, r0, #0
 8002cf6:	801a      	strh	r2, [r3, #0]
 8002cf8:	1c7b      	adds	r3, r7, #1
 8002cfa:	1c0a      	adds	r2, r1, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cfe:	1c7b      	adds	r3, r7, #1
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d06:	1cbb      	adds	r3, r7, #2
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d0e:	e003      	b.n	8002d18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d10:	1cbb      	adds	r3, r7, #2
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e082      	b.n	8002e38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2241      	movs	r2, #65	; 0x41
 8002d36:	5c9b      	ldrb	r3, [r3, r2]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2240      	movs	r2, #64	; 0x40
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff fb4b 	bl	80023e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2241      	movs	r2, #65	; 0x41
 8002d52:	2124      	movs	r1, #36	; 0x24
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	438a      	bics	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4934      	ldr	r1, [pc, #208]	; (8002e40 <HAL_I2C_Init+0x120>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4931      	ldr	r1, [pc, #196]	; (8002e44 <HAL_I2C_Init+0x124>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	0209      	lsls	r1, r1, #8
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e007      	b.n	8002dae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2184      	movs	r1, #132	; 0x84
 8002da8:	0209      	lsls	r1, r1, #8
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d104      	bne.n	8002dc0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	491f      	ldr	r1, [pc, #124]	; (8002e48 <HAL_I2C_Init+0x128>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	491a      	ldr	r1, [pc, #104]	; (8002e44 <HAL_I2C_Init+0x124>)
 8002ddc:	400a      	ands	r2, r1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69d9      	ldr	r1, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1a      	ldr	r2, [r3, #32]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2241      	movs	r2, #65	; 0x41
 8002e24:	2120      	movs	r1, #32
 8002e26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2242      	movs	r2, #66	; 0x42
 8002e32:	2100      	movs	r1, #0
 8002e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	f0ffffff 	.word	0xf0ffffff
 8002e44:	ffff7fff 	.word	0xffff7fff
 8002e48:	02008000 	.word	0x02008000

08002e4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	0008      	movs	r0, r1
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	0019      	movs	r1, r3
 8002e5a:	230a      	movs	r3, #10
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	1c02      	adds	r2, r0, #0
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	2308      	movs	r3, #8
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	1c0a      	adds	r2, r1, #0
 8002e68:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2241      	movs	r2, #65	; 0x41
 8002e6e:	5c9b      	ldrb	r3, [r3, r2]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d000      	beq.n	8002e78 <HAL_I2C_Master_Transmit+0x2c>
 8002e76:	e0e7      	b.n	8003048 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	5c9b      	ldrb	r3, [r3, r2]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Master_Transmit+0x3a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0e1      	b.n	800304a <HAL_I2C_Master_Transmit+0x1fe>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e8e:	f7ff fcb5 	bl	80027fc <HAL_GetTick>
 8002e92:	0003      	movs	r3, r0
 8002e94:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	0219      	lsls	r1, r3, #8
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2319      	movs	r3, #25
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f000 fa04 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002ea8:	1e03      	subs	r3, r0, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0cc      	b.n	800304a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2241      	movs	r2, #65	; 0x41
 8002eb4:	2121      	movs	r1, #33	; 0x21
 8002eb6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2242      	movs	r2, #66	; 0x42
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2208      	movs	r2, #8
 8002ed0:	18ba      	adds	r2, r7, r2
 8002ed2:	8812      	ldrh	r2, [r2, #0]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2bff      	cmp	r3, #255	; 0xff
 8002ee4:	d911      	bls.n	8002f0a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	045c      	lsls	r4, r3, #17
 8002ef6:	230a      	movs	r3, #10
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	8819      	ldrh	r1, [r3, #0]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	4b55      	ldr	r3, [pc, #340]	; (8003054 <HAL_I2C_Master_Transmit+0x208>)
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	0023      	movs	r3, r4
 8002f04:	f000 fb74 	bl	80035f0 <I2C_TransferConfig>
 8002f08:	e075      	b.n	8002ff6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	049c      	lsls	r4, r3, #18
 8002f1e:	230a      	movs	r3, #10
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	8819      	ldrh	r1, [r3, #0]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <HAL_I2C_Master_Transmit+0x208>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	0023      	movs	r3, r4
 8002f2c:	f000 fb60 	bl	80035f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f30:	e061      	b.n	8002ff6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 f9f8 	bl	800332e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e081      	b.n	800304a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03a      	beq.n	8002ff6 <HAL_I2C_Master_Transmit+0x1aa>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d136      	bne.n	8002ff6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	0013      	movs	r3, r2
 8002f92:	2200      	movs	r2, #0
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	f000 f98b 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e053      	b.n	800304a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2bff      	cmp	r3, #255	; 0xff
 8002faa:	d911      	bls.n	8002fd0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	22ff      	movs	r2, #255	; 0xff
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	045c      	lsls	r4, r3, #17
 8002fbc:	230a      	movs	r3, #10
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	8819      	ldrh	r1, [r3, #0]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	0023      	movs	r3, r4
 8002fca:	f000 fb11 	bl	80035f0 <I2C_TransferConfig>
 8002fce:	e012      	b.n	8002ff6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	049c      	lsls	r4, r3, #18
 8002fe4:	230a      	movs	r3, #10
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	8819      	ldrh	r1, [r3, #0]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	2300      	movs	r3, #0
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	0023      	movs	r3, r4
 8002ff2:	f000 fafd 	bl	80035f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d198      	bne.n	8002f32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f9d0 	bl	80033ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800300c:	1e03      	subs	r3, r0, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e01a      	b.n	800304a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2220      	movs	r2, #32
 800301a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	490c      	ldr	r1, [pc, #48]	; (8003058 <HAL_I2C_Master_Transmit+0x20c>)
 8003028:	400a      	ands	r2, r1
 800302a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2241      	movs	r2, #65	; 0x41
 8003030:	2120      	movs	r1, #32
 8003032:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2242      	movs	r2, #66	; 0x42
 8003038:	2100      	movs	r1, #0
 800303a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b007      	add	sp, #28
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	80002000 	.word	0x80002000
 8003058:	fe00e800 	.word	0xfe00e800

0800305c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	0008      	movs	r0, r1
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	0019      	movs	r1, r3
 800306a:	230a      	movs	r3, #10
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	1c02      	adds	r2, r0, #0
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	2308      	movs	r3, #8
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	1c0a      	adds	r2, r1, #0
 8003078:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2241      	movs	r2, #65	; 0x41
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	d000      	beq.n	8003088 <HAL_I2C_Master_Receive+0x2c>
 8003086:	e0e8      	b.n	800325a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	5c9b      	ldrb	r3, [r3, r2]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Master_Receive+0x3a>
 8003092:	2302      	movs	r3, #2
 8003094:	e0e2      	b.n	800325c <HAL_I2C_Master_Receive+0x200>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800309e:	f7ff fbad 	bl	80027fc <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	0219      	lsls	r1, r3, #8
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2319      	movs	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	f000 f8fc 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0cd      	b.n	800325c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2241      	movs	r2, #65	; 0x41
 80030c4:	2122      	movs	r1, #34	; 0x22
 80030c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2242      	movs	r2, #66	; 0x42
 80030cc:	2110      	movs	r1, #16
 80030ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2208      	movs	r2, #8
 80030e0:	18ba      	adds	r2, r7, r2
 80030e2:	8812      	ldrh	r2, [r2, #0]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2bff      	cmp	r3, #255	; 0xff
 80030f4:	d911      	bls.n	800311a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	22ff      	movs	r2, #255	; 0xff
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	b2da      	uxtb	r2, r3
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	045c      	lsls	r4, r3, #17
 8003106:	230a      	movs	r3, #10
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	8819      	ldrh	r1, [r3, #0]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	4b55      	ldr	r3, [pc, #340]	; (8003264 <HAL_I2C_Master_Receive+0x208>)
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	0023      	movs	r3, r4
 8003114:	f000 fa6c 	bl	80035f0 <I2C_TransferConfig>
 8003118:	e076      	b.n	8003208 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	049c      	lsls	r4, r3, #18
 800312e:	230a      	movs	r3, #10
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	8819      	ldrh	r1, [r3, #0]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_I2C_Master_Receive+0x208>)
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	0023      	movs	r3, r4
 800313c:	f000 fa58 	bl	80035f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003140:	e062      	b.n	8003208 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 f96b 	bl	8003424 <I2C_WaitOnRXNEFlagUntilTimeout>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e082      	b.n	800325c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d03a      	beq.n	8003208 <HAL_I2C_Master_Receive+0x1ac>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d136      	bne.n	8003208 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800319a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	0013      	movs	r3, r2
 80031a4:	2200      	movs	r2, #0
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	f000 f882 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e053      	b.n	800325c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2bff      	cmp	r3, #255	; 0xff
 80031bc:	d911      	bls.n	80031e2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	22ff      	movs	r2, #255	; 0xff
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	045c      	lsls	r4, r3, #17
 80031ce:	230a      	movs	r3, #10
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	8819      	ldrh	r1, [r3, #0]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	0023      	movs	r3, r4
 80031dc:	f000 fa08 	bl	80035f0 <I2C_TransferConfig>
 80031e0:	e012      	b.n	8003208 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	049c      	lsls	r4, r3, #18
 80031f6:	230a      	movs	r3, #10
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	8819      	ldrh	r1, [r3, #0]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	2300      	movs	r3, #0
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	0023      	movs	r3, r4
 8003204:	f000 f9f4 	bl	80035f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d197      	bne.n	8003142 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f8c7 	bl	80033ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e01a      	b.n	800325c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2220      	movs	r2, #32
 800322c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	490b      	ldr	r1, [pc, #44]	; (8003268 <HAL_I2C_Master_Receive+0x20c>)
 800323a:	400a      	ands	r2, r1
 800323c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2241      	movs	r2, #65	; 0x41
 8003242:	2120      	movs	r1, #32
 8003244:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2242      	movs	r2, #66	; 0x42
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2240      	movs	r2, #64	; 0x40
 8003252:	2100      	movs	r1, #0
 8003254:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
  }
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b007      	add	sp, #28
 8003262:	bd90      	pop	{r4, r7, pc}
 8003264:	80002400 	.word	0x80002400
 8003268:	fe00e800 	.word	0xfe00e800

0800326c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2202      	movs	r2, #2
 800327c:	4013      	ands	r3, r2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d103      	bne.n	800328a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2201      	movs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	2b01      	cmp	r3, #1
 8003296:	d007      	beq.n	80032a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	430a      	orrs	r2, r1
 80032a6:	619a      	str	r2, [r3, #24]
  }
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c0:	e021      	b.n	8003306 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	d01e      	beq.n	8003306 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7ff fa98 	bl	80027fc <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	2220      	movs	r2, #32
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2241      	movs	r2, #65	; 0x41
 80032ee:	2120      	movs	r1, #32
 80032f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2242      	movs	r2, #66	; 0x42
 80032f6:	2100      	movs	r1, #0
 80032f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2240      	movs	r2, #64	; 0x40
 80032fe:	2100      	movs	r1, #0
 8003300:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00f      	b.n	8003326 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	425a      	negs	r2, r3
 8003316:	4153      	adcs	r3, r2
 8003318:	b2db      	uxtb	r3, r3
 800331a:	001a      	movs	r2, r3
 800331c:	1dfb      	adds	r3, r7, #7
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d0ce      	beq.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}

0800332e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800333a:	e02b      	b.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f8da 	bl	80034fc <I2C_IsAcknowledgeFailed>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d001      	beq.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e029      	b.n	80033a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3301      	adds	r3, #1
 8003354:	d01e      	beq.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7ff fa51 	bl	80027fc <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d113      	bne.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	2220      	movs	r2, #32
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2241      	movs	r2, #65	; 0x41
 800337c:	2120      	movs	r1, #32
 800337e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2242      	movs	r2, #66	; 0x42
 8003384:	2100      	movs	r1, #0
 8003386:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2240      	movs	r2, #64	; 0x40
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e007      	b.n	80033a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2202      	movs	r2, #2
 800339c:	4013      	ands	r3, r2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d1cc      	bne.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b004      	add	sp, #16
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b8:	e028      	b.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 f89b 	bl	80034fc <I2C_IsAcknowledgeFailed>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d001      	beq.n	80033ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e026      	b.n	800341c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7ff fa15 	bl	80027fc <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d113      	bne.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	2220      	movs	r2, #32
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2241      	movs	r2, #65	; 0x41
 80033f4:	2120      	movs	r1, #32
 80033f6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2242      	movs	r2, #66	; 0x42
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2240      	movs	r2, #64	; 0x40
 8003404:	2100      	movs	r1, #0
 8003406:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e007      	b.n	800341c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2220      	movs	r2, #32
 8003414:	4013      	ands	r3, r2
 8003416:	2b20      	cmp	r3, #32
 8003418:	d1cf      	bne.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003430:	e055      	b.n	80034de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	0018      	movs	r0, r3
 800343a:	f000 f85f 	bl	80034fc <I2C_IsAcknowledgeFailed>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e053      	b.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2220      	movs	r2, #32
 800344e:	4013      	ands	r3, r2
 8003450:	2b20      	cmp	r3, #32
 8003452:	d129      	bne.n	80034a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2204      	movs	r2, #4
 800345c:	4013      	ands	r3, r2
 800345e:	2b04      	cmp	r3, #4
 8003460:	d105      	bne.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e03f      	b.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2220      	movs	r2, #32
 8003474:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	491d      	ldr	r1, [pc, #116]	; (80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003482:	400a      	ands	r2, r1
 8003484:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2241      	movs	r2, #65	; 0x41
 8003490:	2120      	movs	r1, #32
 8003492:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2242      	movs	r2, #66	; 0x42
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e022      	b.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a8:	f7ff f9a8 	bl	80027fc <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	2220      	movs	r2, #32
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2241      	movs	r2, #65	; 0x41
 80034ce:	2120      	movs	r1, #32
 80034d0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e007      	b.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2204      	movs	r2, #4
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d1a2      	bne.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	fe00e800 	.word	0xfe00e800

080034fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2210      	movs	r2, #16
 8003510:	4013      	ands	r3, r2
 8003512:	2b10      	cmp	r3, #16
 8003514:	d164      	bne.n	80035e0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	049b      	lsls	r3, r3, #18
 8003520:	401a      	ands	r2, r3
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	049b      	lsls	r3, r3, #18
 8003526:	429a      	cmp	r2, r3
 8003528:	d02b      	beq.n	8003582 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	01c9      	lsls	r1, r1, #7
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353c:	e021      	b.n	8003582 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3301      	adds	r3, #1
 8003542:	d01e      	beq.n	8003582 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7ff f95a 	bl	80027fc <HAL_GetTick>
 8003548:	0002      	movs	r2, r0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <I2C_IsAcknowledgeFailed+0x5e>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d113      	bne.n	8003582 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	2220      	movs	r2, #32
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2241      	movs	r2, #65	; 0x41
 800356a:	2120      	movs	r1, #32
 800356c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2242      	movs	r2, #66	; 0x42
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e02f      	b.n	80035e2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2220      	movs	r2, #32
 800358a:	4013      	ands	r3, r2
 800358c:	2b20      	cmp	r3, #32
 800358e:	d1d6      	bne.n	800353e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2210      	movs	r2, #16
 8003596:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2220      	movs	r2, #32
 800359e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7ff fe62 	bl	800326c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	490e      	ldr	r1, [pc, #56]	; (80035ec <I2C_IsAcknowledgeFailed+0xf0>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	2204      	movs	r2, #4
 80035be:	431a      	orrs	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2241      	movs	r2, #65	; 0x41
 80035c8:	2120      	movs	r1, #32
 80035ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2242      	movs	r2, #66	; 0x42
 80035d0:	2100      	movs	r1, #0
 80035d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	2100      	movs	r1, #0
 80035da:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	fe00e800 	.word	0xfe00e800

080035f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	0008      	movs	r0, r1
 80035fa:	0011      	movs	r1, r2
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	240a      	movs	r4, #10
 8003600:	193b      	adds	r3, r7, r4
 8003602:	1c02      	adds	r2, r0, #0
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	2009      	movs	r0, #9
 8003608:	183b      	adds	r3, r7, r0
 800360a:	1c0a      	adds	r2, r1, #0
 800360c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	0d51      	lsrs	r1, r2, #21
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	00d2      	lsls	r2, r2, #3
 800361c:	400a      	ands	r2, r1
 800361e:	490e      	ldr	r1, [pc, #56]	; (8003658 <I2C_TransferConfig+0x68>)
 8003620:	430a      	orrs	r2, r1
 8003622:	43d2      	mvns	r2, r2
 8003624:	401a      	ands	r2, r3
 8003626:	0011      	movs	r1, r2
 8003628:	193b      	adds	r3, r7, r4
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	059b      	lsls	r3, r3, #22
 800362e:	0d9a      	lsrs	r2, r3, #22
 8003630:	183b      	adds	r3, r7, r0
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	0418      	lsls	r0, r3, #16
 8003636:	23ff      	movs	r3, #255	; 0xff
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	4003      	ands	r3, r0
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b005      	add	sp, #20
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	03ff63ff 	.word	0x03ff63ff

0800365c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2241      	movs	r2, #65	; 0x41
 800366a:	5c9b      	ldrb	r3, [r3, r2]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b20      	cmp	r3, #32
 8003670:	d138      	bne.n	80036e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2240      	movs	r2, #64	; 0x40
 8003676:	5c9b      	ldrb	r3, [r3, r2]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800367c:	2302      	movs	r3, #2
 800367e:	e032      	b.n	80036e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2241      	movs	r2, #65	; 0x41
 800368c:	2124      	movs	r1, #36	; 0x24
 800368e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2101      	movs	r1, #1
 800369c:	438a      	bics	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4911      	ldr	r1, [pc, #68]	; (80036f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2241      	movs	r2, #65	; 0x41
 80036d4:	2120      	movs	r1, #32
 80036d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	2100      	movs	r1, #0
 80036de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	ffffefff 	.word	0xffffefff

080036f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2241      	movs	r2, #65	; 0x41
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	d139      	bne.n	800377e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2240      	movs	r2, #64	; 0x40
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003714:	2302      	movs	r3, #2
 8003716:	e033      	b.n	8003780 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	2101      	movs	r1, #1
 800371e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2241      	movs	r2, #65	; 0x41
 8003724:	2124      	movs	r1, #36	; 0x24
 8003726:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a11      	ldr	r2, [pc, #68]	; (8003788 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2241      	movs	r2, #65	; 0x41
 800376e:	2120      	movs	r1, #32
 8003770:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2240      	movs	r2, #64	; 0x40
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
  }
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b004      	add	sp, #16
 8003786:	bd80      	pop	{r7, pc}
 8003788:	fffff0ff 	.word	0xfffff0ff

0800378c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b5b0      	push	{r4, r5, r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f000 fb6c 	bl	8003e78 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a0:	4bc8      	ldr	r3, [pc, #800]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	220c      	movs	r2, #12
 80037a6:	4013      	ands	r3, r2
 80037a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037aa:	4bc6      	ldr	r3, [pc, #792]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	025b      	lsls	r3, r3, #9
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	4013      	ands	r3, r2
 80037be:	d100      	bne.n	80037c2 <HAL_RCC_OscConfig+0x36>
 80037c0:	e07d      	b.n	80038be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d007      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	d112      	bne.n	80037f4 <HAL_RCC_OscConfig+0x68>
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	025b      	lsls	r3, r3, #9
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d10d      	bne.n	80037f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4bba      	ldr	r3, [pc, #744]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	4013      	ands	r3, r2
 80037e2:	d100      	bne.n	80037e6 <HAL_RCC_OscConfig+0x5a>
 80037e4:	e06a      	b.n	80038bc <HAL_RCC_OscConfig+0x130>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d166      	bne.n	80038bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f000 fb42 	bl	8003e78 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	025b      	lsls	r3, r3, #9
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x84>
 8003800:	4bb0      	ldr	r3, [pc, #704]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4baf      	ldr	r3, [pc, #700]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003806:	2180      	movs	r1, #128	; 0x80
 8003808:	0249      	lsls	r1, r1, #9
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e027      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	23a0      	movs	r3, #160	; 0xa0
 8003816:	02db      	lsls	r3, r3, #11
 8003818:	429a      	cmp	r2, r3
 800381a:	d10e      	bne.n	800383a <HAL_RCC_OscConfig+0xae>
 800381c:	4ba9      	ldr	r3, [pc, #676]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4ba8      	ldr	r3, [pc, #672]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	02c9      	lsls	r1, r1, #11
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	4ba6      	ldr	r3, [pc, #664]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4ba5      	ldr	r3, [pc, #660]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	0249      	lsls	r1, r1, #9
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e012      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 800383a:	4ba2      	ldr	r3, [pc, #648]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4ba1      	ldr	r3, [pc, #644]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003840:	49a1      	ldr	r1, [pc, #644]	; (8003ac8 <HAL_RCC_OscConfig+0x33c>)
 8003842:	400a      	ands	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	4b9f      	ldr	r3, [pc, #636]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	025b      	lsls	r3, r3, #9
 800384e:	4013      	ands	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4b9b      	ldr	r3, [pc, #620]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b9a      	ldr	r3, [pc, #616]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 800385a:	499c      	ldr	r1, [pc, #624]	; (8003acc <HAL_RCC_OscConfig+0x340>)
 800385c:	400a      	ands	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d014      	beq.n	8003892 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe ffc8 	bl	80027fc <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003872:	f7fe ffc3 	bl	80027fc <HAL_GetTick>
 8003876:	0002      	movs	r2, r0
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b64      	cmp	r3, #100	; 0x64
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e2f9      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003884:	4b8f      	ldr	r3, [pc, #572]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	029b      	lsls	r3, r3, #10
 800388c:	4013      	ands	r3, r2
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0xe6>
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fe ffb3 	bl	80027fc <HAL_GetTick>
 8003896:	0003      	movs	r3, r0
 8003898:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800389c:	f7fe ffae 	bl	80027fc <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e2e4      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	029b      	lsls	r3, r3, #10
 80038b6:	4013      	ands	r3, r2
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x110>
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2202      	movs	r2, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	d100      	bne.n	80038ca <HAL_RCC_OscConfig+0x13e>
 80038c8:	e099      	b.n	80039fe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	2220      	movs	r2, #32
 80038d4:	4013      	ands	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80038d8:	4b7a      	ldr	r3, [pc, #488]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80038de:	2120      	movs	r1, #32
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	2220      	movs	r2, #32
 80038e8:	4393      	bics	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	d13e      	bne.n	8003976 <HAL_RCC_OscConfig+0x1ea>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13b      	bne.n	8003976 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80038fe:	4b71      	ldr	r3, [pc, #452]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2204      	movs	r2, #4
 8003904:	4013      	ands	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_RCC_OscConfig+0x186>
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e2b2      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a6e      	ldr	r2, [pc, #440]	; (8003ad0 <HAL_RCC_OscConfig+0x344>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	021a      	lsls	r2, r3, #8
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003928:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2209      	movs	r2, #9
 800392e:	4393      	bics	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800393a:	f000 fbeb 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 800393e:	0001      	movs	r1, r0
 8003940:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	220f      	movs	r2, #15
 8003948:	4013      	ands	r3, r2
 800394a:	4a62      	ldr	r2, [pc, #392]	; (8003ad4 <HAL_RCC_OscConfig+0x348>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	000a      	movs	r2, r1
 8003950:	40da      	lsrs	r2, r3
 8003952:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <HAL_RCC_OscConfig+0x34c>)
 8003954:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003956:	4b61      	ldr	r3, [pc, #388]	; (8003adc <HAL_RCC_OscConfig+0x350>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2513      	movs	r5, #19
 800395c:	197c      	adds	r4, r7, r5
 800395e:	0018      	movs	r0, r3
 8003960:	f7fe ff06 	bl	8002770 <HAL_InitTick>
 8003964:	0003      	movs	r3, r0
 8003966:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003968:	197b      	adds	r3, r7, r5
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d046      	beq.n	80039fe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003970:	197b      	adds	r3, r7, r5
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	e280      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d027      	beq.n	80039cc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800397c:	4b51      	ldr	r3, [pc, #324]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2209      	movs	r2, #9
 8003982:	4393      	bics	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe ff35 	bl	80027fc <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7fe ff30 	bl	80027fc <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e266      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039aa:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d0f1      	beq.n	8003998 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a45      	ldr	r2, [pc, #276]	; (8003ad0 <HAL_RCC_OscConfig+0x344>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	021a      	lsls	r2, r3, #8
 80039c4:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	e018      	b.n	80039fe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80039d2:	2101      	movs	r1, #1
 80039d4:	438a      	bics	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe ff10 	bl	80027fc <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe ff0b 	bl	80027fc <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e241      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039f4:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2204      	movs	r2, #4
 80039fa:	4013      	ands	r3, r2
 80039fc:	d1f1      	bne.n	80039e2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2210      	movs	r2, #16
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_OscConfig+0x27e>
 8003a08:	e0a1      	b.n	8003b4e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d140      	bne.n	8003a92 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a10:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_OscConfig+0x29c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e227      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <HAL_RCC_OscConfig+0x354>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	0a19      	lsrs	r1, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	061a      	lsls	r2, r3, #24
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	0b5b      	lsrs	r3, r3, #13
 8003a56:	3301      	adds	r3, #1
 8003a58:	2280      	movs	r2, #128	; 0x80
 8003a5a:	0212      	lsls	r2, r2, #8
 8003a5c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	210f      	movs	r1, #15
 8003a66:	400b      	ands	r3, r1
 8003a68:	491a      	ldr	r1, [pc, #104]	; (8003ad4 <HAL_RCC_OscConfig+0x348>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_RCC_OscConfig+0x34c>)
 8003a70:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003a72:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <HAL_RCC_OscConfig+0x350>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2513      	movs	r5, #19
 8003a78:	197c      	adds	r4, r7, r5
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7fe fe78 	bl	8002770 <HAL_InitTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003a84:	197b      	adds	r3, r7, r5
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d060      	beq.n	8003b4e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003a8c:	197b      	adds	r3, r7, r5
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	e1f2      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d03f      	beq.n	8003b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	0049      	lsls	r1, r1, #1
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fea8 	bl	80027fc <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ab0:	e018      	b.n	8003ae4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab2:	f7fe fea3 	bl	80027fc <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d911      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1d9      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	fffeffff 	.word	0xfffeffff
 8003acc:	fffbffff 	.word	0xfffbffff
 8003ad0:	ffffe0ff 	.word	0xffffe0ff
 8003ad4:	080061ec 	.word	0x080061ec
 8003ad8:	20000184 	.word	0x20000184
 8003adc:	20000188 	.word	0x20000188
 8003ae0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ae4:	4bc9      	ldr	r3, [pc, #804]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4013      	ands	r3, r2
 8003aee:	d0e0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af0:	4bc6      	ldr	r3, [pc, #792]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4ac6      	ldr	r2, [pc, #792]	; (8003e10 <HAL_RCC_OscConfig+0x684>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1a      	ldr	r2, [r3, #32]
 8003afe:	4bc3      	ldr	r3, [pc, #780]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b04:	4bc1      	ldr	r3, [pc, #772]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	0a19      	lsrs	r1, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	061a      	lsls	r2, r3, #24
 8003b12:	4bbe      	ldr	r3, [pc, #760]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	e019      	b.n	8003b4e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b1a:	4bbc      	ldr	r3, [pc, #752]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4bbb      	ldr	r3, [pc, #748]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b20:	49bc      	ldr	r1, [pc, #752]	; (8003e14 <HAL_RCC_OscConfig+0x688>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fe69 	bl	80027fc <HAL_GetTick>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b30:	f7fe fe64 	bl	80027fc <HAL_GetTick>
 8003b34:	0002      	movs	r2, r0
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e19a      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003b42:	4bb2      	ldr	r3, [pc, #712]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2208      	movs	r2, #8
 8003b54:	4013      	ands	r3, r2
 8003b56:	d036      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d019      	beq.n	8003b94 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b60:	4baa      	ldr	r3, [pc, #680]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b64:	4ba9      	ldr	r3, [pc, #676]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b66:	2101      	movs	r1, #1
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fe46 	bl	80027fc <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fe fe41 	bl	80027fc <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e177      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b88:	4ba0      	ldr	r3, [pc, #640]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d0f1      	beq.n	8003b76 <HAL_RCC_OscConfig+0x3ea>
 8003b92:	e018      	b.n	8003bc6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b94:	4b9d      	ldr	r3, [pc, #628]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b98:	4b9c      	ldr	r3, [pc, #624]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fe2c 	bl	80027fc <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fe fe27 	bl	80027fc <HAL_GetTick>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e15d      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bbc:	4b93      	ldr	r3, [pc, #588]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d1f1      	bne.n	8003baa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d100      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x446>
 8003bd0:	e0ae      	b.n	8003d30 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2023      	movs	r0, #35	; 0x23
 8003bd4:	183b      	adds	r3, r7, r0
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	055b      	lsls	r3, r3, #21
 8003be2:	4013      	ands	r3, r2
 8003be4:	d109      	bne.n	8003bfa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003bec:	2180      	movs	r1, #128	; 0x80
 8003bee:	0549      	lsls	r1, r1, #21
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003bf4:	183b      	adds	r3, r7, r0
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfa:	4b87      	ldr	r3, [pc, #540]	; (8003e18 <HAL_RCC_OscConfig+0x68c>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4013      	ands	r3, r2
 8003c04:	d11a      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c06:	4b84      	ldr	r3, [pc, #528]	; (8003e18 <HAL_RCC_OscConfig+0x68c>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b83      	ldr	r3, [pc, #524]	; (8003e18 <HAL_RCC_OscConfig+0x68c>)
 8003c0c:	2180      	movs	r1, #128	; 0x80
 8003c0e:	0049      	lsls	r1, r1, #1
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c14:	f7fe fdf2 	bl	80027fc <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7fe fded 	bl	80027fc <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	; 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e123      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_OscConfig+0x68c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4cc>
 8003c48:	4b70      	ldr	r3, [pc, #448]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c4c:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c4e:	2180      	movs	r1, #128	; 0x80
 8003c50:	0049      	lsls	r1, r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50
 8003c56:	e031      	b.n	8003cbc <HAL_RCC_OscConfig+0x530>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10c      	bne.n	8003c7a <HAL_RCC_OscConfig+0x4ee>
 8003c60:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c64:	4b69      	ldr	r3, [pc, #420]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c66:	496b      	ldr	r1, [pc, #428]	; (8003e14 <HAL_RCC_OscConfig+0x688>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c70:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c72:	496a      	ldr	r1, [pc, #424]	; (8003e1c <HAL_RCC_OscConfig+0x690>)
 8003c74:	400a      	ands	r2, r1
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50
 8003c78:	e020      	b.n	8003cbc <HAL_RCC_OscConfig+0x530>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	23a0      	movs	r3, #160	; 0xa0
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d10e      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x518>
 8003c86:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c8a:	4b60      	ldr	r3, [pc, #384]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	00c9      	lsls	r1, r1, #3
 8003c90:	430a      	orrs	r2, r1
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50
 8003c94:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c98:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	0049      	lsls	r1, r1, #1
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	651a      	str	r2, [r3, #80]	; 0x50
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0x530>
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003caa:	495a      	ldr	r1, [pc, #360]	; (8003e14 <HAL_RCC_OscConfig+0x688>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	651a      	str	r2, [r3, #80]	; 0x50
 8003cb0:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cb4:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003cb6:	4959      	ldr	r1, [pc, #356]	; (8003e1c <HAL_RCC_OscConfig+0x690>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d015      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fe fd9a 	bl	80027fc <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ccc:	e009      	b.n	8003ce2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fe fd95 	bl	80027fc <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	4a51      	ldr	r2, [pc, #324]	; (8003e20 <HAL_RCC_OscConfig+0x694>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0ca      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d0ef      	beq.n	8003cce <HAL_RCC_OscConfig+0x542>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf0:	f7fe fd84 	bl	80027fc <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cf8:	e009      	b.n	8003d0e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe fd7f 	bl	80027fc <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	4a46      	ldr	r2, [pc, #280]	; (8003e20 <HAL_RCC_OscConfig+0x694>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0b4      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4013      	ands	r3, r2
 8003d18:	d1ef      	bne.n	8003cfa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d1a:	2323      	movs	r3, #35	; 0x23
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d28:	4b38      	ldr	r3, [pc, #224]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d2a:	493e      	ldr	r1, [pc, #248]	; (8003e24 <HAL_RCC_OscConfig+0x698>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d100      	bne.n	8003d3a <HAL_RCC_OscConfig+0x5ae>
 8003d38:	e09d      	b.n	8003e76 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	d100      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5b6>
 8003d40:	e076      	b.n	8003e30 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d145      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d50:	4935      	ldr	r1, [pc, #212]	; (8003e28 <HAL_RCC_OscConfig+0x69c>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7fe fd51 	bl	80027fc <HAL_GetTick>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe fd4c 	bl	80027fc <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e082      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	049b      	lsls	r3, r3, #18
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7e:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <HAL_RCC_OscConfig+0x6a0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	431a      	orrs	r2, r3
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0449      	lsls	r1, r1, #17
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe fd26 	bl	80027fc <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fe fd21 	bl	80027fc <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e057      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	049b      	lsls	r3, r3, #18
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x62a>
 8003dd4:	e04f      	b.n	8003e76 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003ddc:	4912      	ldr	r1, [pc, #72]	; (8003e28 <HAL_RCC_OscConfig+0x69c>)
 8003dde:	400a      	ands	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fe fd0b 	bl	80027fc <HAL_GetTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fd06 	bl	80027fc <HAL_GetTick>
 8003df0:	0002      	movs	r2, r0
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e03c      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dfe:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_OscConfig+0x680>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	049b      	lsls	r3, r3, #18
 8003e06:	4013      	ands	r3, r2
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x660>
 8003e0a:	e034      	b.n	8003e76 <HAL_RCC_OscConfig+0x6ea>
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	ffff1fff 	.word	0xffff1fff
 8003e14:	fffffeff 	.word	0xfffffeff
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	fffffbff 	.word	0xfffffbff
 8003e20:	00001388 	.word	0x00001388
 8003e24:	efffffff 	.word	0xefffffff
 8003e28:	feffffff 	.word	0xfeffffff
 8003e2c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x6f4>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	025b      	lsls	r3, r3, #9
 8003e48:	401a      	ands	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	23f0      	movs	r3, #240	; 0xf0
 8003e56:	039b      	lsls	r3, r3, #14
 8003e58:	401a      	ands	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	23c0      	movs	r3, #192	; 0xc0
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	401a      	ands	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b00a      	add	sp, #40	; 0x28
 8003e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e80:	40021000 	.word	0x40021000

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b5b0      	push	{r4, r5, r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e128      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b96      	ldr	r3, [pc, #600]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d91e      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b93      	ldr	r3, [pc, #588]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4393      	bics	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	4b90      	ldr	r3, [pc, #576]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eb8:	f7fe fca0 	bl	80027fc <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec0:	e009      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec2:	f7fe fc9b 	bl	80027fc <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	4a8a      	ldr	r2, [pc, #552]	; (80040f8 <HAL_RCC_ClockConfig+0x274>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e109      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed6:	4b87      	ldr	r3, [pc, #540]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	4013      	ands	r3, r2
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d1ee      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eee:	4b83      	ldr	r3, [pc, #524]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	22f0      	movs	r2, #240	; 0xf0
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	4b7f      	ldr	r3, [pc, #508]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003efe:	430a      	orrs	r2, r1
 8003f00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2201      	movs	r2, #1
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d100      	bne.n	8003f0e <HAL_RCC_ClockConfig+0x8a>
 8003f0c:	e089      	b.n	8004022 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f16:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d120      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0e1      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f2e:	4b73      	ldr	r3, [pc, #460]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	049b      	lsls	r3, r3, #18
 8003f36:	4013      	ands	r3, r2
 8003f38:	d114      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0d5      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f46:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0ca      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f54:	4b69      	ldr	r3, [pc, #420]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0c2      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	4393      	bics	r3, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003f74:	430a      	orrs	r2, r1
 8003f76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f78:	f7fe fc40 	bl	80027fc <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d111      	bne.n	8003fac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f88:	e009      	b.n	8003f9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8a:	f7fe fc37 	bl	80027fc <HAL_GetTick>
 8003f8e:	0002      	movs	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_ClockConfig+0x274>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0a5      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f9e:	4b57      	ldr	r3, [pc, #348]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d1ef      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x106>
 8003faa:	e03a      	b.n	8004022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb4:	e009      	b.n	8003fca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb6:	f7fe fc21 	bl	80027fc <HAL_GetTick>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	4a4d      	ldr	r2, [pc, #308]	; (80040f8 <HAL_RCC_ClockConfig+0x274>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e08f      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fca:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	220c      	movs	r2, #12
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d1ef      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0x132>
 8003fd6:	e024      	b.n	8004022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d11b      	bne.n	8004018 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe0:	e009      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe2:	f7fe fc0b 	bl	80027fc <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	4a42      	ldr	r2, [pc, #264]	; (80040f8 <HAL_RCC_ClockConfig+0x274>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e079      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d1ef      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0x15e>
 8004002:	e00e      	b.n	8004022 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fe fbfa 	bl	80027fc <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	4a3a      	ldr	r2, [pc, #232]	; (80040f8 <HAL_RCC_ClockConfig+0x274>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e068      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004018:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	220c      	movs	r2, #12
 800401e:	4013      	ands	r3, r2
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004022:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	4013      	ands	r3, r2
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d21e      	bcs.n	800406e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004030:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	4393      	bics	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004042:	f7fe fbdb 	bl	80027fc <HAL_GetTick>
 8004046:	0003      	movs	r3, r0
 8004048:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	e009      	b.n	8004060 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fe fbd6 	bl	80027fc <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <HAL_RCC_ClockConfig+0x274>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e044      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCC_ClockConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2201      	movs	r2, #1
 8004066:	4013      	ands	r3, r2
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d1ee      	bne.n	800404c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2204      	movs	r2, #4
 8004074:	4013      	ands	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a20      	ldr	r2, [pc, #128]	; (8004100 <HAL_RCC_ClockConfig+0x27c>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2208      	movs	r2, #8
 8004092:	4013      	ands	r3, r2
 8004094:	d00a      	beq.n	80040ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <HAL_RCC_ClockConfig+0x280>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00da      	lsls	r2, r3, #3
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ac:	f000 f832 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80040b0:	0001      	movs	r1, r0
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_RCC_ClockConfig+0x278>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	220f      	movs	r2, #15
 80040ba:	4013      	ands	r3, r2
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_RCC_ClockConfig+0x284>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	000a      	movs	r2, r1
 80040c2:	40da      	lsrs	r2, r3
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <HAL_RCC_ClockConfig+0x288>)
 80040c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_RCC_ClockConfig+0x28c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	250b      	movs	r5, #11
 80040ce:	197c      	adds	r4, r7, r5
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7fe fb4d 	bl	8002770 <HAL_InitTick>
 80040d6:	0003      	movs	r3, r0
 80040d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80040da:	197b      	adds	r3, r7, r5
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80040e2:	197b      	adds	r3, r7, r5
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	e000      	b.n	80040ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	0018      	movs	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b004      	add	sp, #16
 80040f0:	bdb0      	pop	{r4, r5, r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	40022000 	.word	0x40022000
 80040f8:	00001388 	.word	0x00001388
 80040fc:	40021000 	.word	0x40021000
 8004100:	fffff8ff 	.word	0xfffff8ff
 8004104:	ffffc7ff 	.word	0xffffc7ff
 8004108:	080061ec 	.word	0x080061ec
 800410c:	20000184 	.word	0x20000184
 8004110:	20000188 	.word	0x20000188

08004114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004114:	b5b0      	push	{r4, r5, r7, lr}
 8004116:	b08e      	sub	sp, #56	; 0x38
 8004118:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800411a:	4b4c      	ldr	r3, [pc, #304]	; (800424c <HAL_RCC_GetSysClockFreq+0x138>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004122:	230c      	movs	r3, #12
 8004124:	4013      	ands	r3, r2
 8004126:	2b0c      	cmp	r3, #12
 8004128:	d014      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x40>
 800412a:	d900      	bls.n	800412e <HAL_RCC_GetSysClockFreq+0x1a>
 800412c:	e07b      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x112>
 800412e:	2b04      	cmp	r3, #4
 8004130:	d002      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x24>
 8004132:	2b08      	cmp	r3, #8
 8004134:	d00b      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x3a>
 8004136:	e076      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004138:	4b44      	ldr	r3, [pc, #272]	; (800424c <HAL_RCC_GetSysClockFreq+0x138>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2210      	movs	r2, #16
 800413e:	4013      	ands	r3, r2
 8004140:	d002      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004142:	4b43      	ldr	r3, [pc, #268]	; (8004250 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004146:	e07c      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004148:	4b42      	ldr	r3, [pc, #264]	; (8004254 <HAL_RCC_GetSysClockFreq+0x140>)
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800414c:	e079      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800414e:	4b42      	ldr	r3, [pc, #264]	; (8004258 <HAL_RCC_GetSysClockFreq+0x144>)
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004152:	e076      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	0c9a      	lsrs	r2, r3, #18
 8004158:	230f      	movs	r3, #15
 800415a:	401a      	ands	r2, r3
 800415c:	4b3f      	ldr	r3, [pc, #252]	; (800425c <HAL_RCC_GetSysClockFreq+0x148>)
 800415e:	5c9b      	ldrb	r3, [r3, r2]
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	0d9a      	lsrs	r2, r3, #22
 8004166:	2303      	movs	r3, #3
 8004168:	4013      	ands	r3, r2
 800416a:	3301      	adds	r3, #1
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_GetSysClockFreq+0x138>)
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	025b      	lsls	r3, r3, #9
 8004176:	4013      	ands	r3, r2
 8004178:	d01a      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	4a35      	ldr	r2, [pc, #212]	; (8004258 <HAL_RCC_GetSysClockFreq+0x144>)
 8004184:	2300      	movs	r3, #0
 8004186:	69b8      	ldr	r0, [r7, #24]
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	f7fc f965 	bl	8000458 <__aeabi_lmul>
 800418e:	0002      	movs	r2, r0
 8004190:	000b      	movs	r3, r1
 8004192:	0010      	movs	r0, r2
 8004194:	0019      	movs	r1, r3
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f7fc f939 	bl	8000418 <__aeabi_uldivmod>
 80041a6:	0002      	movs	r2, r0
 80041a8:	000b      	movs	r3, r1
 80041aa:	0013      	movs	r3, r2
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
 80041ae:	e037      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_RCC_GetSysClockFreq+0x138>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2210      	movs	r2, #16
 80041b6:	4013      	ands	r3, r2
 80041b8:	d01a      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	4a23      	ldr	r2, [pc, #140]	; (8004250 <HAL_RCC_GetSysClockFreq+0x13c>)
 80041c4:	2300      	movs	r3, #0
 80041c6:	68b8      	ldr	r0, [r7, #8]
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	f7fc f945 	bl	8000458 <__aeabi_lmul>
 80041ce:	0002      	movs	r2, r0
 80041d0:	000b      	movs	r3, r1
 80041d2:	0010      	movs	r0, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f7fc f919 	bl	8000418 <__aeabi_uldivmod>
 80041e6:	0002      	movs	r2, r0
 80041e8:	000b      	movs	r3, r1
 80041ea:	0013      	movs	r3, r2
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	e017      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	0018      	movs	r0, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	0019      	movs	r1, r3
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_RCC_GetSysClockFreq+0x140>)
 80041fa:	2300      	movs	r3, #0
 80041fc:	f7fc f92c 	bl	8000458 <__aeabi_lmul>
 8004200:	0002      	movs	r2, r0
 8004202:	000b      	movs	r3, r1
 8004204:	0010      	movs	r0, r2
 8004206:	0019      	movs	r1, r3
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	001c      	movs	r4, r3
 800420c:	2300      	movs	r3, #0
 800420e:	001d      	movs	r5, r3
 8004210:	0022      	movs	r2, r4
 8004212:	002b      	movs	r3, r5
 8004214:	f7fc f900 	bl	8000418 <__aeabi_uldivmod>
 8004218:	0002      	movs	r2, r0
 800421a:	000b      	movs	r3, r1
 800421c:	0013      	movs	r3, r2
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004224:	e00d      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_GetSysClockFreq+0x138>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	0b5b      	lsrs	r3, r3, #13
 800422c:	2207      	movs	r2, #7
 800422e:	4013      	ands	r3, r2
 8004230:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	3301      	adds	r3, #1
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	0212      	lsls	r2, r2, #8
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004240:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b00e      	add	sp, #56	; 0x38
 800424a:	bdb0      	pop	{r4, r5, r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	003d0900 	.word	0x003d0900
 8004254:	00f42400 	.word	0x00f42400
 8004258:	017d7840 	.word	0x017d7840
 800425c:	08006204 	.word	0x08006204

08004260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004264:	4b02      	ldr	r3, [pc, #8]	; (8004270 <HAL_RCC_GetHCLKFreq+0x10>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	20000184 	.word	0x20000184

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004278:	f7ff fff2 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 800427c:	0001      	movs	r1, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	2207      	movs	r2, #7
 8004286:	4013      	ands	r3, r2
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_RCC_GetPCLK1Freq+0x28>)
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	40d9      	lsrs	r1, r3
 800428e:	000b      	movs	r3, r1
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	40021000 	.word	0x40021000
 800429c:	080061fc 	.word	0x080061fc

080042a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a4:	f7ff ffdc 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 80042a8:	0001      	movs	r1, r0
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	0adb      	lsrs	r3, r3, #11
 80042b0:	2207      	movs	r2, #7
 80042b2:	4013      	ands	r3, r2
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	40d9      	lsrs	r1, r3
 80042ba:	000b      	movs	r3, r1
}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	40021000 	.word	0x40021000
 80042c8:	080061fc 	.word	0x080061fc

080042cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80042d4:	2017      	movs	r0, #23
 80042d6:	183b      	adds	r3, r7, r0
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2220      	movs	r2, #32
 80042e2:	4013      	ands	r3, r2
 80042e4:	d100      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80042e6:	e0c2      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e8:	4b81      	ldr	r3, [pc, #516]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	055b      	lsls	r3, r3, #21
 80042f0:	4013      	ands	r3, r2
 80042f2:	d109      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	4b7e      	ldr	r3, [pc, #504]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f8:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	0549      	lsls	r1, r1, #21
 80042fe:	430a      	orrs	r2, r1
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004302:	183b      	adds	r3, r7, r0
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b7a      	ldr	r3, [pc, #488]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4013      	ands	r3, r2
 8004312:	d11a      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004314:	4b77      	ldr	r3, [pc, #476]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	0049      	lsls	r1, r1, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fe fa6b 	bl	80027fc <HAL_GetTick>
 8004326:	0003      	movs	r3, r0
 8004328:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	e008      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432c:	f7fe fa66 	bl	80027fc <HAL_GetTick>
 8004330:	0002      	movs	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0d4      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4013      	ands	r3, r2
 8004348:	d0f0      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800434a:	4b69      	ldr	r3, [pc, #420]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	23c0      	movs	r3, #192	; 0xc0
 8004350:	039b      	lsls	r3, r3, #14
 8004352:	4013      	ands	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	23c0      	movs	r3, #192	; 0xc0
 800435c:	039b      	lsls	r3, r3, #14
 800435e:	4013      	ands	r3, r2
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	429a      	cmp	r2, r3
 8004364:	d013      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	23c0      	movs	r3, #192	; 0xc0
 800436c:	029b      	lsls	r3, r3, #10
 800436e:	401a      	ands	r2, r3
 8004370:	23c0      	movs	r3, #192	; 0xc0
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	429a      	cmp	r2, r3
 8004376:	d10a      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004378:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	401a      	ands	r2, r3
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	029b      	lsls	r3, r3, #10
 8004386:	429a      	cmp	r2, r3
 8004388:	d101      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0ac      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800438e:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004392:	23c0      	movs	r3, #192	; 0xc0
 8004394:	029b      	lsls	r3, r3, #10
 8004396:	4013      	ands	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d03b      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	23c0      	movs	r3, #192	; 0xc0
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	4013      	ands	r3, r2
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d033      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2220      	movs	r2, #32
 80043b6:	4013      	ands	r3, r2
 80043b8:	d02e      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80043ba:	4b4d      	ldr	r3, [pc, #308]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043c4:	4b4a      	ldr	r3, [pc, #296]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043c8:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	0309      	lsls	r1, r1, #12
 80043ce:	430a      	orrs	r2, r1
 80043d0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043d2:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043d6:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043d8:	4948      	ldr	r1, [pc, #288]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80043da:	400a      	ands	r2, r1
 80043dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80043de:	4b44      	ldr	r3, [pc, #272]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	d014      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fe fa05 	bl	80027fc <HAL_GetTick>
 80043f2:	0003      	movs	r3, r0
 80043f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f6:	e009      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fe fa00 	bl	80027fc <HAL_GetTick>
 80043fc:	0002      	movs	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e06d      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440c:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800440e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4013      	ands	r3, r2
 8004416:	d0ef      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	23c0      	movs	r3, #192	; 0xc0
 800441e:	029b      	lsls	r3, r3, #10
 8004420:	401a      	ands	r2, r3
 8004422:	23c0      	movs	r3, #192	; 0xc0
 8004424:	029b      	lsls	r3, r3, #10
 8004426:	429a      	cmp	r2, r3
 8004428:	d10c      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800442a:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a35      	ldr	r2, [pc, #212]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004430:	4013      	ands	r3, r2
 8004432:	0019      	movs	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	23c0      	movs	r3, #192	; 0xc0
 800443a:	039b      	lsls	r3, r3, #14
 800443c:	401a      	ands	r2, r3
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004446:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	23c0      	movs	r3, #192	; 0xc0
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	401a      	ands	r2, r3
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004454:	430a      	orrs	r2, r1
 8004456:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004458:	2317      	movs	r3, #23
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004462:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004466:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004468:	4927      	ldr	r1, [pc, #156]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800446a:	400a      	ands	r2, r1
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2202      	movs	r2, #2
 8004474:	4013      	ands	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800447a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447c:	220c      	movs	r2, #12
 800447e:	4393      	bics	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004488:	430a      	orrs	r2, r1
 800448a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2204      	movs	r2, #4
 8004492:	4013      	ands	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004496:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800449c:	4013      	ands	r3, r2
 800449e:	0019      	movs	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80044a6:	430a      	orrs	r2, r1
 80044a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2208      	movs	r2, #8
 80044b0:	4013      	ands	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	4a15      	ldr	r2, [pc, #84]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80044c4:	430a      	orrs	r2, r1
 80044c6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	4013      	ands	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80044e2:	430a      	orrs	r2, r1
 80044e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b006      	add	sp, #24
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40007000 	.word	0x40007000
 80044f8:	fffcffff 	.word	0xfffcffff
 80044fc:	fff7ffff 	.word	0xfff7ffff
 8004500:	00001388 	.word	0x00001388
 8004504:	ffcfffff 	.word	0xffcfffff
 8004508:	efffffff 	.word	0xefffffff
 800450c:	fffff3ff 	.word	0xfffff3ff
 8004510:	ffffcfff 	.word	0xffffcfff
 8004514:	fff3ffff 	.word	0xfff3ffff

08004518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e044      	b.n	80045b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452e:	2b00      	cmp	r3, #0
 8004530:	d107      	bne.n	8004542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2274      	movs	r2, #116	; 0x74
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f7fd ff95 	bl	800246c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2224      	movs	r2, #36	; 0x24
 8004546:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	438a      	bics	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	0018      	movs	r0, r3
 800455c:	f000 f8d8 	bl	8004710 <UART_SetConfig>
 8004560:	0003      	movs	r3, r0
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e024      	b.n	80045b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 fb2d 	bl	8004bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	490d      	ldr	r1, [pc, #52]	; (80045bc <HAL_UART_Init+0xa4>)
 8004586:	400a      	ands	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	212a      	movs	r1, #42	; 0x2a
 8004596:	438a      	bics	r2, r1
 8004598:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2101      	movs	r1, #1
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 fbc5 	bl	8004d3c <UART_CheckIdleState>
 80045b2:	0003      	movs	r3, r0
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b002      	add	sp, #8
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	ffffb7ff 	.word	0xffffb7ff

080045c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	1dbb      	adds	r3, r7, #6
 80045ce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d000      	beq.n	80045da <HAL_UART_Transmit+0x1a>
 80045d8:	e095      	b.n	8004706 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_UART_Transmit+0x28>
 80045e0:	1dbb      	adds	r3, r7, #6
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e08d      	b.n	8004708 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	015b      	lsls	r3, r3, #5
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d109      	bne.n	800460c <HAL_UART_Transmit+0x4c>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2201      	movs	r2, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d001      	beq.n	800460c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e07d      	b.n	8004708 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2274      	movs	r2, #116	; 0x74
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_UART_Transmit+0x5a>
 8004616:	2302      	movs	r3, #2
 8004618:	e076      	b.n	8004708 <HAL_UART_Transmit+0x148>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2274      	movs	r2, #116	; 0x74
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2280      	movs	r2, #128	; 0x80
 8004626:	2100      	movs	r1, #0
 8004628:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2221      	movs	r2, #33	; 0x21
 800462e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004630:	f7fe f8e4 	bl	80027fc <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1dba      	adds	r2, r7, #6
 800463c:	2150      	movs	r1, #80	; 0x50
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1dba      	adds	r2, r7, #6
 8004646:	2152      	movs	r1, #82	; 0x52
 8004648:	8812      	ldrh	r2, [r2, #0]
 800464a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	015b      	lsls	r3, r3, #5
 8004654:	429a      	cmp	r2, r3
 8004656:	d108      	bne.n	800466a <HAL_UART_Transmit+0xaa>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e003      	b.n	8004672 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2274      	movs	r2, #116	; 0x74
 8004676:	2100      	movs	r1, #0
 8004678:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800467a:	e02c      	b.n	80046d6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	0013      	movs	r3, r2
 8004686:	2200      	movs	r2, #0
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	f000 fb9f 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 800468e:	1e03      	subs	r3, r0, #0
 8004690:	d001      	beq.n	8004696 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e038      	b.n	8004708 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	001a      	movs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	05d2      	lsls	r2, r2, #23
 80046a8:	0dd2      	lsrs	r2, r2, #23
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	3302      	adds	r3, #2
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e007      	b.n	80046c4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2252      	movs	r2, #82	; 0x52
 80046c8:	5a9b      	ldrh	r3, [r3, r2]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b299      	uxth	r1, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2252      	movs	r2, #82	; 0x52
 80046d4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2252      	movs	r2, #82	; 0x52
 80046da:	5a9b      	ldrh	r3, [r3, r2]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1cc      	bne.n	800467c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	0013      	movs	r3, r2
 80046ec:	2200      	movs	r2, #0
 80046ee:	2140      	movs	r1, #64	; 0x40
 80046f0:	f000 fb6c 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 80046f4:	1e03      	subs	r3, r0, #0
 80046f6:	d001      	beq.n	80046fc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e005      	b.n	8004708 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b008      	add	sp, #32
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	b5b0      	push	{r4, r5, r7, lr}
 8004712:	b08e      	sub	sp, #56	; 0x38
 8004714:	af00      	add	r7, sp, #0
 8004716:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004718:	231a      	movs	r3, #26
 800471a:	2218      	movs	r2, #24
 800471c:	4694      	mov	ip, r2
 800471e:	44bc      	add	ip, r7
 8004720:	4463      	add	r3, ip
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	431a      	orrs	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4313      	orrs	r3, r2
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4abc      	ldr	r2, [pc, #752]	; (8004a38 <UART_SetConfig+0x328>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4ab8      	ldr	r2, [pc, #736]	; (8004a3c <UART_SetConfig+0x32c>)
 800475c:	4013      	ands	r3, r2
 800475e:	0019      	movs	r1, r3
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4ab2      	ldr	r2, [pc, #712]	; (8004a40 <UART_SetConfig+0x330>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004782:	4313      	orrs	r3, r2
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4aad      	ldr	r2, [pc, #692]	; (8004a44 <UART_SetConfig+0x334>)
 800478e:	4013      	ands	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4aa9      	ldr	r2, [pc, #676]	; (8004a48 <UART_SetConfig+0x338>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d136      	bne.n	8004814 <UART_SetConfig+0x104>
 80047a6:	4ba9      	ldr	r3, [pc, #676]	; (8004a4c <UART_SetConfig+0x33c>)
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	220c      	movs	r2, #12
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d020      	beq.n	80047f4 <UART_SetConfig+0xe4>
 80047b2:	d827      	bhi.n	8004804 <UART_SetConfig+0xf4>
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d00d      	beq.n	80047d4 <UART_SetConfig+0xc4>
 80047b8:	d824      	bhi.n	8004804 <UART_SetConfig+0xf4>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <UART_SetConfig+0xb4>
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d010      	beq.n	80047e4 <UART_SetConfig+0xd4>
 80047c2:	e01f      	b.n	8004804 <UART_SetConfig+0xf4>
 80047c4:	231b      	movs	r3, #27
 80047c6:	2218      	movs	r2, #24
 80047c8:	4694      	mov	ip, r2
 80047ca:	44bc      	add	ip, r7
 80047cc:	4463      	add	r3, ip
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e06f      	b.n	80048b4 <UART_SetConfig+0x1a4>
 80047d4:	231b      	movs	r3, #27
 80047d6:	2218      	movs	r2, #24
 80047d8:	4694      	mov	ip, r2
 80047da:	44bc      	add	ip, r7
 80047dc:	4463      	add	r3, ip
 80047de:	2202      	movs	r2, #2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e067      	b.n	80048b4 <UART_SetConfig+0x1a4>
 80047e4:	231b      	movs	r3, #27
 80047e6:	2218      	movs	r2, #24
 80047e8:	4694      	mov	ip, r2
 80047ea:	44bc      	add	ip, r7
 80047ec:	4463      	add	r3, ip
 80047ee:	2204      	movs	r2, #4
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e05f      	b.n	80048b4 <UART_SetConfig+0x1a4>
 80047f4:	231b      	movs	r3, #27
 80047f6:	2218      	movs	r2, #24
 80047f8:	4694      	mov	ip, r2
 80047fa:	44bc      	add	ip, r7
 80047fc:	4463      	add	r3, ip
 80047fe:	2208      	movs	r2, #8
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e057      	b.n	80048b4 <UART_SetConfig+0x1a4>
 8004804:	231b      	movs	r3, #27
 8004806:	2218      	movs	r2, #24
 8004808:	4694      	mov	ip, r2
 800480a:	44bc      	add	ip, r7
 800480c:	4463      	add	r3, ip
 800480e:	2210      	movs	r2, #16
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e04f      	b.n	80048b4 <UART_SetConfig+0x1a4>
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a89      	ldr	r2, [pc, #548]	; (8004a40 <UART_SetConfig+0x330>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d143      	bne.n	80048a6 <UART_SetConfig+0x196>
 800481e:	4b8b      	ldr	r3, [pc, #556]	; (8004a4c <UART_SetConfig+0x33c>)
 8004820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004822:	23c0      	movs	r3, #192	; 0xc0
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	4013      	ands	r3, r2
 8004828:	22c0      	movs	r2, #192	; 0xc0
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	4293      	cmp	r3, r2
 800482e:	d02a      	beq.n	8004886 <UART_SetConfig+0x176>
 8004830:	22c0      	movs	r2, #192	; 0xc0
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	4293      	cmp	r3, r2
 8004836:	d82e      	bhi.n	8004896 <UART_SetConfig+0x186>
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	0112      	lsls	r2, r2, #4
 800483c:	4293      	cmp	r3, r2
 800483e:	d012      	beq.n	8004866 <UART_SetConfig+0x156>
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	4293      	cmp	r3, r2
 8004846:	d826      	bhi.n	8004896 <UART_SetConfig+0x186>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <UART_SetConfig+0x146>
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	00d2      	lsls	r2, r2, #3
 8004850:	4293      	cmp	r3, r2
 8004852:	d010      	beq.n	8004876 <UART_SetConfig+0x166>
 8004854:	e01f      	b.n	8004896 <UART_SetConfig+0x186>
 8004856:	231b      	movs	r3, #27
 8004858:	2218      	movs	r2, #24
 800485a:	4694      	mov	ip, r2
 800485c:	44bc      	add	ip, r7
 800485e:	4463      	add	r3, ip
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e026      	b.n	80048b4 <UART_SetConfig+0x1a4>
 8004866:	231b      	movs	r3, #27
 8004868:	2218      	movs	r2, #24
 800486a:	4694      	mov	ip, r2
 800486c:	44bc      	add	ip, r7
 800486e:	4463      	add	r3, ip
 8004870:	2202      	movs	r2, #2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e01e      	b.n	80048b4 <UART_SetConfig+0x1a4>
 8004876:	231b      	movs	r3, #27
 8004878:	2218      	movs	r2, #24
 800487a:	4694      	mov	ip, r2
 800487c:	44bc      	add	ip, r7
 800487e:	4463      	add	r3, ip
 8004880:	2204      	movs	r2, #4
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e016      	b.n	80048b4 <UART_SetConfig+0x1a4>
 8004886:	231b      	movs	r3, #27
 8004888:	2218      	movs	r2, #24
 800488a:	4694      	mov	ip, r2
 800488c:	44bc      	add	ip, r7
 800488e:	4463      	add	r3, ip
 8004890:	2208      	movs	r2, #8
 8004892:	701a      	strb	r2, [r3, #0]
 8004894:	e00e      	b.n	80048b4 <UART_SetConfig+0x1a4>
 8004896:	231b      	movs	r3, #27
 8004898:	2218      	movs	r2, #24
 800489a:	4694      	mov	ip, r2
 800489c:	44bc      	add	ip, r7
 800489e:	4463      	add	r3, ip
 80048a0:	2210      	movs	r2, #16
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e006      	b.n	80048b4 <UART_SetConfig+0x1a4>
 80048a6:	231b      	movs	r3, #27
 80048a8:	2218      	movs	r2, #24
 80048aa:	4694      	mov	ip, r2
 80048ac:	44bc      	add	ip, r7
 80048ae:	4463      	add	r3, ip
 80048b0:	2210      	movs	r2, #16
 80048b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a61      	ldr	r2, [pc, #388]	; (8004a40 <UART_SetConfig+0x330>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d000      	beq.n	80048c0 <UART_SetConfig+0x1b0>
 80048be:	e088      	b.n	80049d2 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048c0:	231b      	movs	r3, #27
 80048c2:	2218      	movs	r2, #24
 80048c4:	4694      	mov	ip, r2
 80048c6:	44bc      	add	ip, r7
 80048c8:	4463      	add	r3, ip
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d01d      	beq.n	800490c <UART_SetConfig+0x1fc>
 80048d0:	dc20      	bgt.n	8004914 <UART_SetConfig+0x204>
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d015      	beq.n	8004902 <UART_SetConfig+0x1f2>
 80048d6:	dc1d      	bgt.n	8004914 <UART_SetConfig+0x204>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <UART_SetConfig+0x1d2>
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d005      	beq.n	80048ec <UART_SetConfig+0x1dc>
 80048e0:	e018      	b.n	8004914 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e2:	f7ff fcc7 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 80048e6:	0003      	movs	r3, r0
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ea:	e01d      	b.n	8004928 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ec:	4b57      	ldr	r3, [pc, #348]	; (8004a4c <UART_SetConfig+0x33c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2210      	movs	r2, #16
 80048f2:	4013      	ands	r3, r2
 80048f4:	d002      	beq.n	80048fc <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048f6:	4b56      	ldr	r3, [pc, #344]	; (8004a50 <UART_SetConfig+0x340>)
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048fa:	e015      	b.n	8004928 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b55      	ldr	r3, [pc, #340]	; (8004a54 <UART_SetConfig+0x344>)
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004900:	e012      	b.n	8004928 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7ff fc07 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 8004906:	0003      	movs	r3, r0
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800490a:	e00d      	b.n	8004928 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004912:	e009      	b.n	8004928 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004918:	231a      	movs	r3, #26
 800491a:	2218      	movs	r2, #24
 800491c:	4694      	mov	ip, r2
 800491e:	44bc      	add	ip, r7
 8004920:	4463      	add	r3, ip
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
        break;
 8004926:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d100      	bne.n	8004930 <UART_SetConfig+0x220>
 800492e:	e139      	b.n	8004ba4 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	0013      	movs	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	189b      	adds	r3, r3, r2
 800493a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493c:	429a      	cmp	r2, r3
 800493e:	d305      	bcc.n	800494c <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004948:	429a      	cmp	r2, r3
 800494a:	d907      	bls.n	800495c <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 800494c:	231a      	movs	r3, #26
 800494e:	2218      	movs	r2, #24
 8004950:	4694      	mov	ip, r2
 8004952:	44bc      	add	ip, r7
 8004954:	4463      	add	r3, ip
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e123      	b.n	8004ba4 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	6939      	ldr	r1, [r7, #16]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	000b      	movs	r3, r1
 800496a:	0e1b      	lsrs	r3, r3, #24
 800496c:	0010      	movs	r0, r2
 800496e:	0205      	lsls	r5, r0, #8
 8004970:	431d      	orrs	r5, r3
 8004972:	000b      	movs	r3, r1
 8004974:	021c      	lsls	r4, r3, #8
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68b8      	ldr	r0, [r7, #8]
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	1900      	adds	r0, r0, r4
 8004988:	4169      	adcs	r1, r5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	2300      	movs	r3, #0
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f7fb fd3e 	bl	8000418 <__aeabi_uldivmod>
 800499c:	0002      	movs	r2, r0
 800499e:	000b      	movs	r3, r1
 80049a0:	0013      	movs	r3, r2
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a6:	23c0      	movs	r3, #192	; 0xc0
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d309      	bcc.n	80049c2 <UART_SetConfig+0x2b2>
 80049ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	035b      	lsls	r3, r3, #13
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d204      	bcs.n	80049c2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049be:	60da      	str	r2, [r3, #12]
 80049c0:	e0f0      	b.n	8004ba4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80049c2:	231a      	movs	r3, #26
 80049c4:	2218      	movs	r2, #24
 80049c6:	4694      	mov	ip, r2
 80049c8:	44bc      	add	ip, r7
 80049ca:	4463      	add	r3, ip
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e0e8      	b.n	8004ba4 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	429a      	cmp	r2, r3
 80049dc:	d000      	beq.n	80049e0 <UART_SetConfig+0x2d0>
 80049de:	e087      	b.n	8004af0 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80049e0:	231b      	movs	r3, #27
 80049e2:	2218      	movs	r2, #24
 80049e4:	4694      	mov	ip, r2
 80049e6:	44bc      	add	ip, r7
 80049e8:	4463      	add	r3, ip
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d835      	bhi.n	8004a5c <UART_SetConfig+0x34c>
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <UART_SetConfig+0x348>)
 80049f4:	18d3      	adds	r3, r2, r3
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fa:	f7ff fc3b 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 80049fe:	0003      	movs	r3, r0
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a02:	e035      	b.n	8004a70 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a04:	f7ff fc4c 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a0c:	e030      	b.n	8004a70 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <UART_SetConfig+0x33c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2210      	movs	r2, #16
 8004a14:	4013      	ands	r3, r2
 8004a16:	d002      	beq.n	8004a1e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <UART_SetConfig+0x340>)
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a1c:	e028      	b.n	8004a70 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <UART_SetConfig+0x344>)
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a22:	e025      	b.n	8004a70 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a24:	f7ff fb76 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a2c:	e020      	b.n	8004a70 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a34:	e01c      	b.n	8004a70 <UART_SetConfig+0x360>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	efff69f3 	.word	0xefff69f3
 8004a3c:	ffffcfff 	.word	0xffffcfff
 8004a40:	40004800 	.word	0x40004800
 8004a44:	fffff4ff 	.word	0xfffff4ff
 8004a48:	40004400 	.word	0x40004400
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	003d0900 	.word	0x003d0900
 8004a54:	00f42400 	.word	0x00f42400
 8004a58:	08006210 	.word	0x08006210
      default:
        pclk = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a60:	231a      	movs	r3, #26
 8004a62:	2218      	movs	r2, #24
 8004a64:	4694      	mov	ip, r2
 8004a66:	44bc      	add	ip, r7
 8004a68:	4463      	add	r3, ip
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
        break;
 8004a6e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d100      	bne.n	8004a78 <UART_SetConfig+0x368>
 8004a76:	e095      	b.n	8004ba4 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	005a      	lsls	r2, r3, #1
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	18d2      	adds	r2, r2, r3
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	0019      	movs	r1, r3
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	f7fb fb4e 	bl	800012c <__udivsi3>
 8004a90:	0003      	movs	r3, r0
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2b0f      	cmp	r3, #15
 8004a9a:	d921      	bls.n	8004ae0 <UART_SetConfig+0x3d0>
 8004a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	025b      	lsls	r3, r3, #9
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d21c      	bcs.n	8004ae0 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	200e      	movs	r0, #14
 8004aac:	2418      	movs	r4, #24
 8004aae:	193b      	adds	r3, r7, r4
 8004ab0:	181b      	adds	r3, r3, r0
 8004ab2:	210f      	movs	r1, #15
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2207      	movs	r2, #7
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	b299      	uxth	r1, r3
 8004ac4:	193b      	adds	r3, r7, r4
 8004ac6:	181b      	adds	r3, r3, r0
 8004ac8:	193a      	adds	r2, r7, r4
 8004aca:	1812      	adds	r2, r2, r0
 8004acc:	8812      	ldrh	r2, [r2, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	193a      	adds	r2, r7, r4
 8004ad8:	1812      	adds	r2, r2, r0
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	60da      	str	r2, [r3, #12]
 8004ade:	e061      	b.n	8004ba4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae0:	231a      	movs	r3, #26
 8004ae2:	2218      	movs	r2, #24
 8004ae4:	4694      	mov	ip, r2
 8004ae6:	44bc      	add	ip, r7
 8004ae8:	4463      	add	r3, ip
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e059      	b.n	8004ba4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004af0:	231b      	movs	r3, #27
 8004af2:	2218      	movs	r2, #24
 8004af4:	4694      	mov	ip, r2
 8004af6:	44bc      	add	ip, r7
 8004af8:	4463      	add	r3, ip
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d822      	bhi.n	8004b46 <UART_SetConfig+0x436>
 8004b00:	009a      	lsls	r2, r3, #2
 8004b02:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <UART_SetConfig+0x4b4>)
 8004b04:	18d3      	adds	r3, r2, r3
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7ff fbb3 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b12:	e022      	b.n	8004b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7ff fbc4 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b1c:	e01d      	b.n	8004b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <UART_SetConfig+0x4b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2210      	movs	r2, #16
 8004b24:	4013      	ands	r3, r2
 8004b26:	d002      	beq.n	8004b2e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b28:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <UART_SetConfig+0x4bc>)
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b2c:	e015      	b.n	8004b5a <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8004b2e:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <UART_SetConfig+0x4c0>)
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b32:	e012      	b.n	8004b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b34:	f7ff faee 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b3c:	e00d      	b.n	8004b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b44:	e009      	b.n	8004b5a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b4a:	231a      	movs	r3, #26
 8004b4c:	2218      	movs	r2, #24
 8004b4e:	4694      	mov	ip, r2
 8004b50:	44bc      	add	ip, r7
 8004b52:	4463      	add	r3, ip
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
        break;
 8004b58:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d021      	beq.n	8004ba4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	085a      	lsrs	r2, r3, #1
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	18d2      	adds	r2, r2, r3
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	0019      	movs	r1, r3
 8004b70:	0010      	movs	r0, r2
 8004b72:	f7fb fadb 	bl	800012c <__udivsi3>
 8004b76:	0003      	movs	r3, r0
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d909      	bls.n	8004b96 <UART_SetConfig+0x486>
 8004b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	025b      	lsls	r3, r3, #9
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d204      	bcs.n	8004b96 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e006      	b.n	8004ba4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004b96:	231a      	movs	r3, #26
 8004b98:	2218      	movs	r2, #24
 8004b9a:	4694      	mov	ip, r2
 8004b9c:	44bc      	add	ip, r7
 8004b9e:	4463      	add	r3, ip
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2200      	movs	r2, #0
 8004bae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bb0:	231a      	movs	r3, #26
 8004bb2:	2218      	movs	r2, #24
 8004bb4:	4694      	mov	ip, r2
 8004bb6:	44bc      	add	ip, r7
 8004bb8:	4463      	add	r3, ip
 8004bba:	781b      	ldrb	r3, [r3, #0]
}
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b00e      	add	sp, #56	; 0x38
 8004bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc4:	08006234 	.word	0x08006234
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	003d0900 	.word	0x003d0900
 8004bd0:	00f42400 	.word	0x00f42400

08004bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2201      	movs	r2, #1
 8004be2:	4013      	ands	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4a4a      	ldr	r2, [pc, #296]	; (8004d18 <UART_AdvFeatureConfig+0x144>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2202      	movs	r2, #2
 8004c04:	4013      	ands	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4a43      	ldr	r2, [pc, #268]	; (8004d1c <UART_AdvFeatureConfig+0x148>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	2204      	movs	r2, #4
 8004c26:	4013      	ands	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a3b      	ldr	r2, [pc, #236]	; (8004d20 <UART_AdvFeatureConfig+0x14c>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	0019      	movs	r1, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2208      	movs	r2, #8
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4a34      	ldr	r2, [pc, #208]	; (8004d24 <UART_AdvFeatureConfig+0x150>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2210      	movs	r2, #16
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <UART_AdvFeatureConfig+0x154>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	0019      	movs	r1, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4a25      	ldr	r2, [pc, #148]	; (8004d2c <UART_AdvFeatureConfig+0x158>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d01d      	beq.n	8004cee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	; (8004d30 <UART_AdvFeatureConfig+0x15c>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	035b      	lsls	r3, r3, #13
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10b      	bne.n	8004cee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <UART_AdvFeatureConfig+0x160>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2280      	movs	r2, #128	; 0x80
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <UART_AdvFeatureConfig+0x164>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	0019      	movs	r1, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	fffdffff 	.word	0xfffdffff
 8004d1c:	fffeffff 	.word	0xfffeffff
 8004d20:	fffbffff 	.word	0xfffbffff
 8004d24:	ffff7fff 	.word	0xffff7fff
 8004d28:	ffffefff 	.word	0xffffefff
 8004d2c:	ffffdfff 	.word	0xffffdfff
 8004d30:	ffefffff 	.word	0xffefffff
 8004d34:	ff9fffff 	.word	0xff9fffff
 8004d38:	fff7ffff 	.word	0xfff7ffff

08004d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2280      	movs	r2, #128	; 0x80
 8004d48:	2100      	movs	r1, #0
 8004d4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d4c:	f7fd fd56 	bl	80027fc <HAL_GetTick>
 8004d50:	0003      	movs	r3, r0
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d10c      	bne.n	8004d7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	0391      	lsls	r1, r2, #14
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <UART_CheckIdleState+0x8c>)
 8004d6c:	9200      	str	r2, [sp, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f000 f82c 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004d74:	1e03      	subs	r3, r0, #0
 8004d76:	d001      	beq.n	8004d7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e021      	b.n	8004dc0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2204      	movs	r2, #4
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d10c      	bne.n	8004da4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2280      	movs	r2, #128	; 0x80
 8004d8e:	03d1      	lsls	r1, r2, #15
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4a0d      	ldr	r2, [pc, #52]	; (8004dc8 <UART_CheckIdleState+0x8c>)
 8004d94:	9200      	str	r2, [sp, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f000 f818 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004d9c:	1e03      	subs	r3, r0, #0
 8004d9e:	d001      	beq.n	8004da4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e00d      	b.n	8004dc0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2274      	movs	r2, #116	; 0x74
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b004      	add	sp, #16
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	01ffffff 	.word	0x01ffffff

08004dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b094      	sub	sp, #80	; 0x50
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ddc:	e0a3      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de0:	3301      	adds	r3, #1
 8004de2:	d100      	bne.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004de4:	e09f      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fd fd09 	bl	80027fc <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d13d      	bne.n	8004e78 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e04:	647b      	str	r3, [r7, #68]	; 0x44
 8004e06:	2301      	movs	r3, #1
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	494c      	ldr	r1, [pc, #304]	; (8004f50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004e1e:	400a      	ands	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e36:	643b      	str	r3, [r7, #64]	; 0x40
 8004e38:	2301      	movs	r3, #1
 8004e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	438a      	bics	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2274      	movs	r2, #116	; 0x74
 8004e70:	2100      	movs	r1, #0
 8004e72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e067      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4013      	ands	r3, r2
 8004e82:	d050      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	401a      	ands	r2, r3
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d146      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2280      	movs	r2, #128	; 0x80
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ea8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eac:	2301      	movs	r3, #1
 8004eae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f383 8810 	msr	PRIMASK, r3
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4923      	ldr	r1, [pc, #140]	; (8004f50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f383 8810 	msr	PRIMASK, r3
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004eda:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ede:	2301      	movs	r3, #1
 8004ee0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	2120      	movs	r1, #32
 8004f18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2274      	movs	r2, #116	; 0x74
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e010      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	425a      	negs	r2, r3
 8004f36:	4153      	adcs	r3, r2
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	1dfb      	adds	r3, r7, #7
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d100      	bne.n	8004f46 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004f44:	e74b      	b.n	8004dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b014      	add	sp, #80	; 0x50
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	fffffe5f 	.word	0xfffffe5f

08004f54 <__errno>:
 8004f54:	4b01      	ldr	r3, [pc, #4]	; (8004f5c <__errno+0x8>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	4770      	bx	lr
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	20000190 	.word	0x20000190

08004f60 <__libc_init_array>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	2600      	movs	r6, #0
 8004f64:	4d0c      	ldr	r5, [pc, #48]	; (8004f98 <__libc_init_array+0x38>)
 8004f66:	4c0d      	ldr	r4, [pc, #52]	; (8004f9c <__libc_init_array+0x3c>)
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	42a6      	cmp	r6, r4
 8004f6e:	d109      	bne.n	8004f84 <__libc_init_array+0x24>
 8004f70:	2600      	movs	r6, #0
 8004f72:	f001 f8a1 	bl	80060b8 <_init>
 8004f76:	4d0a      	ldr	r5, [pc, #40]	; (8004fa0 <__libc_init_array+0x40>)
 8004f78:	4c0a      	ldr	r4, [pc, #40]	; (8004fa4 <__libc_init_array+0x44>)
 8004f7a:	1b64      	subs	r4, r4, r5
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	42a6      	cmp	r6, r4
 8004f80:	d105      	bne.n	8004f8e <__libc_init_array+0x2e>
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	00b3      	lsls	r3, r6, #2
 8004f86:	58eb      	ldr	r3, [r5, r3]
 8004f88:	4798      	blx	r3
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7ee      	b.n	8004f6c <__libc_init_array+0xc>
 8004f8e:	00b3      	lsls	r3, r6, #2
 8004f90:	58eb      	ldr	r3, [r5, r3]
 8004f92:	4798      	blx	r3
 8004f94:	3601      	adds	r6, #1
 8004f96:	e7f2      	b.n	8004f7e <__libc_init_array+0x1e>
 8004f98:	080062f8 	.word	0x080062f8
 8004f9c:	080062f8 	.word	0x080062f8
 8004fa0:	080062f8 	.word	0x080062f8
 8004fa4:	080062fc 	.word	0x080062fc

08004fa8 <memcpy>:
 8004fa8:	2300      	movs	r3, #0
 8004faa:	b510      	push	{r4, lr}
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d100      	bne.n	8004fb2 <memcpy+0xa>
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	5ccc      	ldrb	r4, [r1, r3]
 8004fb4:	54c4      	strb	r4, [r0, r3]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	e7f8      	b.n	8004fac <memcpy+0x4>

08004fba <memset>:
 8004fba:	0003      	movs	r3, r0
 8004fbc:	1882      	adds	r2, r0, r2
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d100      	bne.n	8004fc4 <memset+0xa>
 8004fc2:	4770      	bx	lr
 8004fc4:	7019      	strb	r1, [r3, #0]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	e7f9      	b.n	8004fbe <memset+0x4>
	...

08004fcc <_puts_r>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	0005      	movs	r5, r0
 8004fd0:	000e      	movs	r6, r1
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d004      	beq.n	8004fe0 <_puts_r+0x14>
 8004fd6:	6983      	ldr	r3, [r0, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <_puts_r+0x14>
 8004fdc:	f000 faa4 	bl	8005528 <__sinit>
 8004fe0:	69ab      	ldr	r3, [r5, #24]
 8004fe2:	68ac      	ldr	r4, [r5, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <_puts_r+0x22>
 8004fe8:	0028      	movs	r0, r5
 8004fea:	f000 fa9d 	bl	8005528 <__sinit>
 8004fee:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <_puts_r+0xd8>)
 8004ff0:	429c      	cmp	r4, r3
 8004ff2:	d122      	bne.n	800503a <_puts_r+0x6e>
 8004ff4:	686c      	ldr	r4, [r5, #4]
 8004ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ff8:	07db      	lsls	r3, r3, #31
 8004ffa:	d405      	bmi.n	8005008 <_puts_r+0x3c>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	059b      	lsls	r3, r3, #22
 8005000:	d402      	bmi.n	8005008 <_puts_r+0x3c>
 8005002:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005004:	f000 fb31 	bl	800566a <__retarget_lock_acquire_recursive>
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	071b      	lsls	r3, r3, #28
 800500c:	d502      	bpl.n	8005014 <_puts_r+0x48>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d129      	bne.n	8005068 <_puts_r+0x9c>
 8005014:	0021      	movs	r1, r4
 8005016:	0028      	movs	r0, r5
 8005018:	f000 f8e0 	bl	80051dc <__swsetup_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	d023      	beq.n	8005068 <_puts_r+0x9c>
 8005020:	2501      	movs	r5, #1
 8005022:	426d      	negs	r5, r5
 8005024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005026:	07db      	lsls	r3, r3, #31
 8005028:	d405      	bmi.n	8005036 <_puts_r+0x6a>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	059b      	lsls	r3, r3, #22
 800502e:	d402      	bmi.n	8005036 <_puts_r+0x6a>
 8005030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005032:	f000 fb1b 	bl	800566c <__retarget_lock_release_recursive>
 8005036:	0028      	movs	r0, r5
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <_puts_r+0xdc>)
 800503c:	429c      	cmp	r4, r3
 800503e:	d101      	bne.n	8005044 <_puts_r+0x78>
 8005040:	68ac      	ldr	r4, [r5, #8]
 8005042:	e7d8      	b.n	8004ff6 <_puts_r+0x2a>
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <_puts_r+0xe0>)
 8005046:	429c      	cmp	r4, r3
 8005048:	d1d5      	bne.n	8004ff6 <_puts_r+0x2a>
 800504a:	68ec      	ldr	r4, [r5, #12]
 800504c:	e7d3      	b.n	8004ff6 <_puts_r+0x2a>
 800504e:	3601      	adds	r6, #1
 8005050:	60a3      	str	r3, [r4, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da04      	bge.n	8005060 <_puts_r+0x94>
 8005056:	69a2      	ldr	r2, [r4, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	dc16      	bgt.n	800508a <_puts_r+0xbe>
 800505c:	290a      	cmp	r1, #10
 800505e:	d014      	beq.n	800508a <_puts_r+0xbe>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	7019      	strb	r1, [r3, #0]
 8005068:	68a3      	ldr	r3, [r4, #8]
 800506a:	7831      	ldrb	r1, [r6, #0]
 800506c:	3b01      	subs	r3, #1
 800506e:	2900      	cmp	r1, #0
 8005070:	d1ed      	bne.n	800504e <_puts_r+0x82>
 8005072:	60a3      	str	r3, [r4, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	da0f      	bge.n	8005098 <_puts_r+0xcc>
 8005078:	0028      	movs	r0, r5
 800507a:	0022      	movs	r2, r4
 800507c:	310a      	adds	r1, #10
 800507e:	f000 f857 	bl	8005130 <__swbuf_r>
 8005082:	250a      	movs	r5, #10
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d1cd      	bne.n	8005024 <_puts_r+0x58>
 8005088:	e7ca      	b.n	8005020 <_puts_r+0x54>
 800508a:	0022      	movs	r2, r4
 800508c:	0028      	movs	r0, r5
 800508e:	f000 f84f 	bl	8005130 <__swbuf_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d1e8      	bne.n	8005068 <_puts_r+0x9c>
 8005096:	e7c3      	b.n	8005020 <_puts_r+0x54>
 8005098:	250a      	movs	r5, #10
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	701d      	strb	r5, [r3, #0]
 80050a2:	e7bf      	b.n	8005024 <_puts_r+0x58>
 80050a4:	0800627c 	.word	0x0800627c
 80050a8:	0800629c 	.word	0x0800629c
 80050ac:	0800625c 	.word	0x0800625c

080050b0 <puts>:
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <puts+0x10>)
 80050b4:	0001      	movs	r1, r0
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	f7ff ff88 	bl	8004fcc <_puts_r>
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	20000190 	.word	0x20000190

080050c4 <siprintf>:
 80050c4:	b40e      	push	{r1, r2, r3}
 80050c6:	b500      	push	{lr}
 80050c8:	490b      	ldr	r1, [pc, #44]	; (80050f8 <siprintf+0x34>)
 80050ca:	b09c      	sub	sp, #112	; 0x70
 80050cc:	ab1d      	add	r3, sp, #116	; 0x74
 80050ce:	9002      	str	r0, [sp, #8]
 80050d0:	9006      	str	r0, [sp, #24]
 80050d2:	9107      	str	r1, [sp, #28]
 80050d4:	9104      	str	r1, [sp, #16]
 80050d6:	4809      	ldr	r0, [pc, #36]	; (80050fc <siprintf+0x38>)
 80050d8:	4909      	ldr	r1, [pc, #36]	; (8005100 <siprintf+0x3c>)
 80050da:	cb04      	ldmia	r3!, {r2}
 80050dc:	9105      	str	r1, [sp, #20]
 80050de:	6800      	ldr	r0, [r0, #0]
 80050e0:	a902      	add	r1, sp, #8
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	f000 fc3a 	bl	800595c <_svfiprintf_r>
 80050e8:	2300      	movs	r3, #0
 80050ea:	9a02      	ldr	r2, [sp, #8]
 80050ec:	7013      	strb	r3, [r2, #0]
 80050ee:	b01c      	add	sp, #112	; 0x70
 80050f0:	bc08      	pop	{r3}
 80050f2:	b003      	add	sp, #12
 80050f4:	4718      	bx	r3
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	7fffffff 	.word	0x7fffffff
 80050fc:	20000190 	.word	0x20000190
 8005100:	ffff0208 	.word	0xffff0208

08005104 <strncat>:
 8005104:	0003      	movs	r3, r0
 8005106:	b530      	push	{r4, r5, lr}
 8005108:	781c      	ldrb	r4, [r3, #0]
 800510a:	2c00      	cmp	r4, #0
 800510c:	d108      	bne.n	8005120 <strncat+0x1c>
 800510e:	1889      	adds	r1, r1, r2
 8005110:	2a00      	cmp	r2, #0
 8005112:	d004      	beq.n	800511e <strncat+0x1a>
 8005114:	4255      	negs	r5, r2
 8005116:	5d4d      	ldrb	r5, [r1, r5]
 8005118:	701d      	strb	r5, [r3, #0]
 800511a:	2d00      	cmp	r5, #0
 800511c:	d102      	bne.n	8005124 <strncat+0x20>
 800511e:	bd30      	pop	{r4, r5, pc}
 8005120:	3301      	adds	r3, #1
 8005122:	e7f1      	b.n	8005108 <strncat+0x4>
 8005124:	2a01      	cmp	r2, #1
 8005126:	d100      	bne.n	800512a <strncat+0x26>
 8005128:	705c      	strb	r4, [r3, #1]
 800512a:	3301      	adds	r3, #1
 800512c:	3a01      	subs	r2, #1
 800512e:	e7ef      	b.n	8005110 <strncat+0xc>

08005130 <__swbuf_r>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	0005      	movs	r5, r0
 8005134:	000e      	movs	r6, r1
 8005136:	0014      	movs	r4, r2
 8005138:	2800      	cmp	r0, #0
 800513a:	d004      	beq.n	8005146 <__swbuf_r+0x16>
 800513c:	6983      	ldr	r3, [r0, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <__swbuf_r+0x16>
 8005142:	f000 f9f1 	bl	8005528 <__sinit>
 8005146:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <__swbuf_r+0xa0>)
 8005148:	429c      	cmp	r4, r3
 800514a:	d12e      	bne.n	80051aa <__swbuf_r+0x7a>
 800514c:	686c      	ldr	r4, [r5, #4]
 800514e:	69a3      	ldr	r3, [r4, #24]
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	071b      	lsls	r3, r3, #28
 8005156:	d532      	bpl.n	80051be <__swbuf_r+0x8e>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02f      	beq.n	80051be <__swbuf_r+0x8e>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	b2f7      	uxtb	r7, r6
 8005164:	1a98      	subs	r0, r3, r2
 8005166:	6963      	ldr	r3, [r4, #20]
 8005168:	b2f6      	uxtb	r6, r6
 800516a:	4283      	cmp	r3, r0
 800516c:	dc05      	bgt.n	800517a <__swbuf_r+0x4a>
 800516e:	0021      	movs	r1, r4
 8005170:	0028      	movs	r0, r5
 8005172:	f000 f937 	bl	80053e4 <_fflush_r>
 8005176:	2800      	cmp	r0, #0
 8005178:	d127      	bne.n	80051ca <__swbuf_r+0x9a>
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	3001      	adds	r0, #1
 800517e:	3b01      	subs	r3, #1
 8005180:	60a3      	str	r3, [r4, #8]
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	6022      	str	r2, [r4, #0]
 8005188:	701f      	strb	r7, [r3, #0]
 800518a:	6963      	ldr	r3, [r4, #20]
 800518c:	4283      	cmp	r3, r0
 800518e:	d004      	beq.n	800519a <__swbuf_r+0x6a>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	07db      	lsls	r3, r3, #31
 8005194:	d507      	bpl.n	80051a6 <__swbuf_r+0x76>
 8005196:	2e0a      	cmp	r6, #10
 8005198:	d105      	bne.n	80051a6 <__swbuf_r+0x76>
 800519a:	0021      	movs	r1, r4
 800519c:	0028      	movs	r0, r5
 800519e:	f000 f921 	bl	80053e4 <_fflush_r>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d111      	bne.n	80051ca <__swbuf_r+0x9a>
 80051a6:	0030      	movs	r0, r6
 80051a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <__swbuf_r+0xa4>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	d101      	bne.n	80051b4 <__swbuf_r+0x84>
 80051b0:	68ac      	ldr	r4, [r5, #8]
 80051b2:	e7cc      	b.n	800514e <__swbuf_r+0x1e>
 80051b4:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <__swbuf_r+0xa8>)
 80051b6:	429c      	cmp	r4, r3
 80051b8:	d1c9      	bne.n	800514e <__swbuf_r+0x1e>
 80051ba:	68ec      	ldr	r4, [r5, #12]
 80051bc:	e7c7      	b.n	800514e <__swbuf_r+0x1e>
 80051be:	0021      	movs	r1, r4
 80051c0:	0028      	movs	r0, r5
 80051c2:	f000 f80b 	bl	80051dc <__swsetup_r>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d0c9      	beq.n	800515e <__swbuf_r+0x2e>
 80051ca:	2601      	movs	r6, #1
 80051cc:	4276      	negs	r6, r6
 80051ce:	e7ea      	b.n	80051a6 <__swbuf_r+0x76>
 80051d0:	0800627c 	.word	0x0800627c
 80051d4:	0800629c 	.word	0x0800629c
 80051d8:	0800625c 	.word	0x0800625c

080051dc <__swsetup_r>:
 80051dc:	4b37      	ldr	r3, [pc, #220]	; (80052bc <__swsetup_r+0xe0>)
 80051de:	b570      	push	{r4, r5, r6, lr}
 80051e0:	681d      	ldr	r5, [r3, #0]
 80051e2:	0006      	movs	r6, r0
 80051e4:	000c      	movs	r4, r1
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	d005      	beq.n	80051f6 <__swsetup_r+0x1a>
 80051ea:	69ab      	ldr	r3, [r5, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <__swsetup_r+0x1a>
 80051f0:	0028      	movs	r0, r5
 80051f2:	f000 f999 	bl	8005528 <__sinit>
 80051f6:	4b32      	ldr	r3, [pc, #200]	; (80052c0 <__swsetup_r+0xe4>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d10f      	bne.n	800521c <__swsetup_r+0x40>
 80051fc:	686c      	ldr	r4, [r5, #4]
 80051fe:	230c      	movs	r3, #12
 8005200:	5ee2      	ldrsh	r2, [r4, r3]
 8005202:	b293      	uxth	r3, r2
 8005204:	0711      	lsls	r1, r2, #28
 8005206:	d42d      	bmi.n	8005264 <__swsetup_r+0x88>
 8005208:	06d9      	lsls	r1, r3, #27
 800520a:	d411      	bmi.n	8005230 <__swsetup_r+0x54>
 800520c:	2309      	movs	r3, #9
 800520e:	2001      	movs	r0, #1
 8005210:	6033      	str	r3, [r6, #0]
 8005212:	3337      	adds	r3, #55	; 0x37
 8005214:	4313      	orrs	r3, r2
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	4240      	negs	r0, r0
 800521a:	bd70      	pop	{r4, r5, r6, pc}
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <__swsetup_r+0xe8>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d101      	bne.n	8005226 <__swsetup_r+0x4a>
 8005222:	68ac      	ldr	r4, [r5, #8]
 8005224:	e7eb      	b.n	80051fe <__swsetup_r+0x22>
 8005226:	4b28      	ldr	r3, [pc, #160]	; (80052c8 <__swsetup_r+0xec>)
 8005228:	429c      	cmp	r4, r3
 800522a:	d1e8      	bne.n	80051fe <__swsetup_r+0x22>
 800522c:	68ec      	ldr	r4, [r5, #12]
 800522e:	e7e6      	b.n	80051fe <__swsetup_r+0x22>
 8005230:	075b      	lsls	r3, r3, #29
 8005232:	d513      	bpl.n	800525c <__swsetup_r+0x80>
 8005234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005236:	2900      	cmp	r1, #0
 8005238:	d008      	beq.n	800524c <__swsetup_r+0x70>
 800523a:	0023      	movs	r3, r4
 800523c:	3344      	adds	r3, #68	; 0x44
 800523e:	4299      	cmp	r1, r3
 8005240:	d002      	beq.n	8005248 <__swsetup_r+0x6c>
 8005242:	0030      	movs	r0, r6
 8005244:	f000 fa80 	bl	8005748 <_free_r>
 8005248:	2300      	movs	r3, #0
 800524a:	6363      	str	r3, [r4, #52]	; 0x34
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	4393      	bics	r3, r2
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	2300      	movs	r3, #0
 8005256:	6063      	str	r3, [r4, #4]
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	2308      	movs	r3, #8
 800525e:	89a2      	ldrh	r2, [r4, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	81a3      	strh	r3, [r4, #12]
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <__swsetup_r+0xa6>
 800526a:	21a0      	movs	r1, #160	; 0xa0
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	0089      	lsls	r1, r1, #2
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	400b      	ands	r3, r1
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <__swsetup_r+0xa6>
 800527a:	0021      	movs	r1, r4
 800527c:	0030      	movs	r0, r6
 800527e:	f000 fa1f 	bl	80056c0 <__smakebuf_r>
 8005282:	220c      	movs	r2, #12
 8005284:	5ea3      	ldrsh	r3, [r4, r2]
 8005286:	2001      	movs	r0, #1
 8005288:	001a      	movs	r2, r3
 800528a:	b299      	uxth	r1, r3
 800528c:	4002      	ands	r2, r0
 800528e:	4203      	tst	r3, r0
 8005290:	d00f      	beq.n	80052b2 <__swsetup_r+0xd6>
 8005292:	2200      	movs	r2, #0
 8005294:	60a2      	str	r2, [r4, #8]
 8005296:	6962      	ldr	r2, [r4, #20]
 8005298:	4252      	negs	r2, r2
 800529a:	61a2      	str	r2, [r4, #24]
 800529c:	2000      	movs	r0, #0
 800529e:	6922      	ldr	r2, [r4, #16]
 80052a0:	4282      	cmp	r2, r0
 80052a2:	d1ba      	bne.n	800521a <__swsetup_r+0x3e>
 80052a4:	060a      	lsls	r2, r1, #24
 80052a6:	d5b8      	bpl.n	800521a <__swsetup_r+0x3e>
 80052a8:	2240      	movs	r2, #64	; 0x40
 80052aa:	4313      	orrs	r3, r2
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	3801      	subs	r0, #1
 80052b0:	e7b3      	b.n	800521a <__swsetup_r+0x3e>
 80052b2:	0788      	lsls	r0, r1, #30
 80052b4:	d400      	bmi.n	80052b8 <__swsetup_r+0xdc>
 80052b6:	6962      	ldr	r2, [r4, #20]
 80052b8:	60a2      	str	r2, [r4, #8]
 80052ba:	e7ef      	b.n	800529c <__swsetup_r+0xc0>
 80052bc:	20000190 	.word	0x20000190
 80052c0:	0800627c 	.word	0x0800627c
 80052c4:	0800629c 	.word	0x0800629c
 80052c8:	0800625c 	.word	0x0800625c

080052cc <__sflush_r>:
 80052cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ce:	898b      	ldrh	r3, [r1, #12]
 80052d0:	0005      	movs	r5, r0
 80052d2:	000c      	movs	r4, r1
 80052d4:	071a      	lsls	r2, r3, #28
 80052d6:	d45f      	bmi.n	8005398 <__sflush_r+0xcc>
 80052d8:	684a      	ldr	r2, [r1, #4]
 80052da:	2a00      	cmp	r2, #0
 80052dc:	dc04      	bgt.n	80052e8 <__sflush_r+0x1c>
 80052de:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	dc01      	bgt.n	80052e8 <__sflush_r+0x1c>
 80052e4:	2000      	movs	r0, #0
 80052e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80052ea:	2f00      	cmp	r7, #0
 80052ec:	d0fa      	beq.n	80052e4 <__sflush_r+0x18>
 80052ee:	2200      	movs	r2, #0
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	682e      	ldr	r6, [r5, #0]
 80052f4:	602a      	str	r2, [r5, #0]
 80052f6:	001a      	movs	r2, r3
 80052f8:	0149      	lsls	r1, r1, #5
 80052fa:	400a      	ands	r2, r1
 80052fc:	420b      	tst	r3, r1
 80052fe:	d034      	beq.n	800536a <__sflush_r+0x9e>
 8005300:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	075b      	lsls	r3, r3, #29
 8005306:	d506      	bpl.n	8005316 <__sflush_r+0x4a>
 8005308:	6863      	ldr	r3, [r4, #4]
 800530a:	1ac0      	subs	r0, r0, r3
 800530c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <__sflush_r+0x4a>
 8005312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005314:	1ac0      	subs	r0, r0, r3
 8005316:	0002      	movs	r2, r0
 8005318:	6a21      	ldr	r1, [r4, #32]
 800531a:	2300      	movs	r3, #0
 800531c:	0028      	movs	r0, r5
 800531e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005320:	47b8      	blx	r7
 8005322:	89a1      	ldrh	r1, [r4, #12]
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d106      	bne.n	8005336 <__sflush_r+0x6a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	2b1d      	cmp	r3, #29
 800532c:	d831      	bhi.n	8005392 <__sflush_r+0xc6>
 800532e:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <__sflush_r+0x114>)
 8005330:	40da      	lsrs	r2, r3
 8005332:	07d3      	lsls	r3, r2, #31
 8005334:	d52d      	bpl.n	8005392 <__sflush_r+0xc6>
 8005336:	2300      	movs	r3, #0
 8005338:	6063      	str	r3, [r4, #4]
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	04cb      	lsls	r3, r1, #19
 8005340:	d505      	bpl.n	800534e <__sflush_r+0x82>
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	d102      	bne.n	800534c <__sflush_r+0x80>
 8005346:	682b      	ldr	r3, [r5, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d100      	bne.n	800534e <__sflush_r+0x82>
 800534c:	6560      	str	r0, [r4, #84]	; 0x54
 800534e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005350:	602e      	str	r6, [r5, #0]
 8005352:	2900      	cmp	r1, #0
 8005354:	d0c6      	beq.n	80052e4 <__sflush_r+0x18>
 8005356:	0023      	movs	r3, r4
 8005358:	3344      	adds	r3, #68	; 0x44
 800535a:	4299      	cmp	r1, r3
 800535c:	d002      	beq.n	8005364 <__sflush_r+0x98>
 800535e:	0028      	movs	r0, r5
 8005360:	f000 f9f2 	bl	8005748 <_free_r>
 8005364:	2000      	movs	r0, #0
 8005366:	6360      	str	r0, [r4, #52]	; 0x34
 8005368:	e7bd      	b.n	80052e6 <__sflush_r+0x1a>
 800536a:	2301      	movs	r3, #1
 800536c:	0028      	movs	r0, r5
 800536e:	6a21      	ldr	r1, [r4, #32]
 8005370:	47b8      	blx	r7
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	d1c5      	bne.n	8005302 <__sflush_r+0x36>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0c2      	beq.n	8005302 <__sflush_r+0x36>
 800537c:	2b1d      	cmp	r3, #29
 800537e:	d001      	beq.n	8005384 <__sflush_r+0xb8>
 8005380:	2b16      	cmp	r3, #22
 8005382:	d101      	bne.n	8005388 <__sflush_r+0xbc>
 8005384:	602e      	str	r6, [r5, #0]
 8005386:	e7ad      	b.n	80052e4 <__sflush_r+0x18>
 8005388:	2340      	movs	r3, #64	; 0x40
 800538a:	89a2      	ldrh	r2, [r4, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	e7a9      	b.n	80052e6 <__sflush_r+0x1a>
 8005392:	2340      	movs	r3, #64	; 0x40
 8005394:	430b      	orrs	r3, r1
 8005396:	e7fa      	b.n	800538e <__sflush_r+0xc2>
 8005398:	690f      	ldr	r7, [r1, #16]
 800539a:	2f00      	cmp	r7, #0
 800539c:	d0a2      	beq.n	80052e4 <__sflush_r+0x18>
 800539e:	680a      	ldr	r2, [r1, #0]
 80053a0:	600f      	str	r7, [r1, #0]
 80053a2:	1bd2      	subs	r2, r2, r7
 80053a4:	9201      	str	r2, [sp, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	079b      	lsls	r3, r3, #30
 80053aa:	d100      	bne.n	80053ae <__sflush_r+0xe2>
 80053ac:	694a      	ldr	r2, [r1, #20]
 80053ae:	60a2      	str	r2, [r4, #8]
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dc00      	bgt.n	80053b8 <__sflush_r+0xec>
 80053b6:	e795      	b.n	80052e4 <__sflush_r+0x18>
 80053b8:	003a      	movs	r2, r7
 80053ba:	0028      	movs	r0, r5
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	6a21      	ldr	r1, [r4, #32]
 80053c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053c2:	47b0      	blx	r6
 80053c4:	2800      	cmp	r0, #0
 80053c6:	dc06      	bgt.n	80053d6 <__sflush_r+0x10a>
 80053c8:	2340      	movs	r3, #64	; 0x40
 80053ca:	2001      	movs	r0, #1
 80053cc:	89a2      	ldrh	r2, [r4, #12]
 80053ce:	4240      	negs	r0, r0
 80053d0:	4313      	orrs	r3, r2
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	e787      	b.n	80052e6 <__sflush_r+0x1a>
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	183f      	adds	r7, r7, r0
 80053da:	1a1b      	subs	r3, r3, r0
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	e7e7      	b.n	80053b0 <__sflush_r+0xe4>
 80053e0:	20400001 	.word	0x20400001

080053e4 <_fflush_r>:
 80053e4:	690b      	ldr	r3, [r1, #16]
 80053e6:	b570      	push	{r4, r5, r6, lr}
 80053e8:	0005      	movs	r5, r0
 80053ea:	000c      	movs	r4, r1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <_fflush_r+0x12>
 80053f0:	2500      	movs	r5, #0
 80053f2:	0028      	movs	r0, r5
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d004      	beq.n	8005404 <_fflush_r+0x20>
 80053fa:	6983      	ldr	r3, [r0, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <_fflush_r+0x20>
 8005400:	f000 f892 	bl	8005528 <__sinit>
 8005404:	4b14      	ldr	r3, [pc, #80]	; (8005458 <_fflush_r+0x74>)
 8005406:	429c      	cmp	r4, r3
 8005408:	d11b      	bne.n	8005442 <_fflush_r+0x5e>
 800540a:	686c      	ldr	r4, [r5, #4]
 800540c:	220c      	movs	r2, #12
 800540e:	5ea3      	ldrsh	r3, [r4, r2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0ed      	beq.n	80053f0 <_fflush_r+0xc>
 8005414:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005416:	07d2      	lsls	r2, r2, #31
 8005418:	d404      	bmi.n	8005424 <_fflush_r+0x40>
 800541a:	059b      	lsls	r3, r3, #22
 800541c:	d402      	bmi.n	8005424 <_fflush_r+0x40>
 800541e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005420:	f000 f923 	bl	800566a <__retarget_lock_acquire_recursive>
 8005424:	0028      	movs	r0, r5
 8005426:	0021      	movs	r1, r4
 8005428:	f7ff ff50 	bl	80052cc <__sflush_r>
 800542c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800542e:	0005      	movs	r5, r0
 8005430:	07db      	lsls	r3, r3, #31
 8005432:	d4de      	bmi.n	80053f2 <_fflush_r+0xe>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	059b      	lsls	r3, r3, #22
 8005438:	d4db      	bmi.n	80053f2 <_fflush_r+0xe>
 800543a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800543c:	f000 f916 	bl	800566c <__retarget_lock_release_recursive>
 8005440:	e7d7      	b.n	80053f2 <_fflush_r+0xe>
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <_fflush_r+0x78>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d101      	bne.n	800544c <_fflush_r+0x68>
 8005448:	68ac      	ldr	r4, [r5, #8]
 800544a:	e7df      	b.n	800540c <_fflush_r+0x28>
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <_fflush_r+0x7c>)
 800544e:	429c      	cmp	r4, r3
 8005450:	d1dc      	bne.n	800540c <_fflush_r+0x28>
 8005452:	68ec      	ldr	r4, [r5, #12]
 8005454:	e7da      	b.n	800540c <_fflush_r+0x28>
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	0800627c 	.word	0x0800627c
 800545c:	0800629c 	.word	0x0800629c
 8005460:	0800625c 	.word	0x0800625c

08005464 <std>:
 8005464:	2300      	movs	r3, #0
 8005466:	b510      	push	{r4, lr}
 8005468:	0004      	movs	r4, r0
 800546a:	6003      	str	r3, [r0, #0]
 800546c:	6043      	str	r3, [r0, #4]
 800546e:	6083      	str	r3, [r0, #8]
 8005470:	8181      	strh	r1, [r0, #12]
 8005472:	6643      	str	r3, [r0, #100]	; 0x64
 8005474:	0019      	movs	r1, r3
 8005476:	81c2      	strh	r2, [r0, #14]
 8005478:	6103      	str	r3, [r0, #16]
 800547a:	6143      	str	r3, [r0, #20]
 800547c:	6183      	str	r3, [r0, #24]
 800547e:	2208      	movs	r2, #8
 8005480:	305c      	adds	r0, #92	; 0x5c
 8005482:	f7ff fd9a 	bl	8004fba <memset>
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <std+0x38>)
 8005488:	6263      	str	r3, [r4, #36]	; 0x24
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <std+0x3c>)
 800548c:	6224      	str	r4, [r4, #32]
 800548e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <std+0x40>)
 8005492:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005494:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <std+0x44>)
 8005496:	6323      	str	r3, [r4, #48]	; 0x30
 8005498:	bd10      	pop	{r4, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	08005e85 	.word	0x08005e85
 80054a0:	08005ead 	.word	0x08005ead
 80054a4:	08005ee5 	.word	0x08005ee5
 80054a8:	08005f11 	.word	0x08005f11

080054ac <_cleanup_r>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4902      	ldr	r1, [pc, #8]	; (80054b8 <_cleanup_r+0xc>)
 80054b0:	f000 f8ba 	bl	8005628 <_fwalk_reent>
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	080053e5 	.word	0x080053e5

080054bc <__sfmoreglue>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	2568      	movs	r5, #104	; 0x68
 80054c0:	1e4a      	subs	r2, r1, #1
 80054c2:	4355      	muls	r5, r2
 80054c4:	000e      	movs	r6, r1
 80054c6:	0029      	movs	r1, r5
 80054c8:	3174      	adds	r1, #116	; 0x74
 80054ca:	f000 f987 	bl	80057dc <_malloc_r>
 80054ce:	1e04      	subs	r4, r0, #0
 80054d0:	d008      	beq.n	80054e4 <__sfmoreglue+0x28>
 80054d2:	2100      	movs	r1, #0
 80054d4:	002a      	movs	r2, r5
 80054d6:	6001      	str	r1, [r0, #0]
 80054d8:	6046      	str	r6, [r0, #4]
 80054da:	300c      	adds	r0, #12
 80054dc:	60a0      	str	r0, [r4, #8]
 80054de:	3268      	adds	r2, #104	; 0x68
 80054e0:	f7ff fd6b 	bl	8004fba <memset>
 80054e4:	0020      	movs	r0, r4
 80054e6:	bd70      	pop	{r4, r5, r6, pc}

080054e8 <__sfp_lock_acquire>:
 80054e8:	b510      	push	{r4, lr}
 80054ea:	4802      	ldr	r0, [pc, #8]	; (80054f4 <__sfp_lock_acquire+0xc>)
 80054ec:	f000 f8bd 	bl	800566a <__retarget_lock_acquire_recursive>
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	20000350 	.word	0x20000350

080054f8 <__sfp_lock_release>:
 80054f8:	b510      	push	{r4, lr}
 80054fa:	4802      	ldr	r0, [pc, #8]	; (8005504 <__sfp_lock_release+0xc>)
 80054fc:	f000 f8b6 	bl	800566c <__retarget_lock_release_recursive>
 8005500:	bd10      	pop	{r4, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	20000350 	.word	0x20000350

08005508 <__sinit_lock_acquire>:
 8005508:	b510      	push	{r4, lr}
 800550a:	4802      	ldr	r0, [pc, #8]	; (8005514 <__sinit_lock_acquire+0xc>)
 800550c:	f000 f8ad 	bl	800566a <__retarget_lock_acquire_recursive>
 8005510:	bd10      	pop	{r4, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	2000034b 	.word	0x2000034b

08005518 <__sinit_lock_release>:
 8005518:	b510      	push	{r4, lr}
 800551a:	4802      	ldr	r0, [pc, #8]	; (8005524 <__sinit_lock_release+0xc>)
 800551c:	f000 f8a6 	bl	800566c <__retarget_lock_release_recursive>
 8005520:	bd10      	pop	{r4, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	2000034b 	.word	0x2000034b

08005528 <__sinit>:
 8005528:	b513      	push	{r0, r1, r4, lr}
 800552a:	0004      	movs	r4, r0
 800552c:	f7ff ffec 	bl	8005508 <__sinit_lock_acquire>
 8005530:	69a3      	ldr	r3, [r4, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <__sinit+0x14>
 8005536:	f7ff ffef 	bl	8005518 <__sinit_lock_release>
 800553a:	bd13      	pop	{r0, r1, r4, pc}
 800553c:	64a3      	str	r3, [r4, #72]	; 0x48
 800553e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005540:	6523      	str	r3, [r4, #80]	; 0x50
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <__sinit+0x68>)
 8005544:	4a13      	ldr	r2, [pc, #76]	; (8005594 <__sinit+0x6c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	62a2      	str	r2, [r4, #40]	; 0x28
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	42a3      	cmp	r3, r4
 800554e:	d101      	bne.n	8005554 <__sinit+0x2c>
 8005550:	2301      	movs	r3, #1
 8005552:	61a3      	str	r3, [r4, #24]
 8005554:	0020      	movs	r0, r4
 8005556:	f000 f81f 	bl	8005598 <__sfp>
 800555a:	6060      	str	r0, [r4, #4]
 800555c:	0020      	movs	r0, r4
 800555e:	f000 f81b 	bl	8005598 <__sfp>
 8005562:	60a0      	str	r0, [r4, #8]
 8005564:	0020      	movs	r0, r4
 8005566:	f000 f817 	bl	8005598 <__sfp>
 800556a:	2200      	movs	r2, #0
 800556c:	2104      	movs	r1, #4
 800556e:	60e0      	str	r0, [r4, #12]
 8005570:	6860      	ldr	r0, [r4, #4]
 8005572:	f7ff ff77 	bl	8005464 <std>
 8005576:	2201      	movs	r2, #1
 8005578:	2109      	movs	r1, #9
 800557a:	68a0      	ldr	r0, [r4, #8]
 800557c:	f7ff ff72 	bl	8005464 <std>
 8005580:	2202      	movs	r2, #2
 8005582:	2112      	movs	r1, #18
 8005584:	68e0      	ldr	r0, [r4, #12]
 8005586:	f7ff ff6d 	bl	8005464 <std>
 800558a:	2301      	movs	r3, #1
 800558c:	61a3      	str	r3, [r4, #24]
 800558e:	e7d2      	b.n	8005536 <__sinit+0xe>
 8005590:	08006258 	.word	0x08006258
 8005594:	080054ad 	.word	0x080054ad

08005598 <__sfp>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	0007      	movs	r7, r0
 800559c:	f7ff ffa4 	bl	80054e8 <__sfp_lock_acquire>
 80055a0:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <__sfp+0x88>)
 80055a2:	681e      	ldr	r6, [r3, #0]
 80055a4:	69b3      	ldr	r3, [r6, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <__sfp+0x18>
 80055aa:	0030      	movs	r0, r6
 80055ac:	f7ff ffbc 	bl	8005528 <__sinit>
 80055b0:	3648      	adds	r6, #72	; 0x48
 80055b2:	68b4      	ldr	r4, [r6, #8]
 80055b4:	6873      	ldr	r3, [r6, #4]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	d504      	bpl.n	80055c4 <__sfp+0x2c>
 80055ba:	6833      	ldr	r3, [r6, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d022      	beq.n	8005606 <__sfp+0x6e>
 80055c0:	6836      	ldr	r6, [r6, #0]
 80055c2:	e7f6      	b.n	80055b2 <__sfp+0x1a>
 80055c4:	220c      	movs	r2, #12
 80055c6:	5ea5      	ldrsh	r5, [r4, r2]
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	d11a      	bne.n	8005602 <__sfp+0x6a>
 80055cc:	0020      	movs	r0, r4
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <__sfp+0x8c>)
 80055d0:	3058      	adds	r0, #88	; 0x58
 80055d2:	60e3      	str	r3, [r4, #12]
 80055d4:	6665      	str	r5, [r4, #100]	; 0x64
 80055d6:	f000 f847 	bl	8005668 <__retarget_lock_init_recursive>
 80055da:	f7ff ff8d 	bl	80054f8 <__sfp_lock_release>
 80055de:	0020      	movs	r0, r4
 80055e0:	2208      	movs	r2, #8
 80055e2:	0029      	movs	r1, r5
 80055e4:	6025      	str	r5, [r4, #0]
 80055e6:	60a5      	str	r5, [r4, #8]
 80055e8:	6065      	str	r5, [r4, #4]
 80055ea:	6125      	str	r5, [r4, #16]
 80055ec:	6165      	str	r5, [r4, #20]
 80055ee:	61a5      	str	r5, [r4, #24]
 80055f0:	305c      	adds	r0, #92	; 0x5c
 80055f2:	f7ff fce2 	bl	8004fba <memset>
 80055f6:	6365      	str	r5, [r4, #52]	; 0x34
 80055f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80055fa:	64a5      	str	r5, [r4, #72]	; 0x48
 80055fc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80055fe:	0020      	movs	r0, r4
 8005600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005602:	3468      	adds	r4, #104	; 0x68
 8005604:	e7d7      	b.n	80055b6 <__sfp+0x1e>
 8005606:	2104      	movs	r1, #4
 8005608:	0038      	movs	r0, r7
 800560a:	f7ff ff57 	bl	80054bc <__sfmoreglue>
 800560e:	1e04      	subs	r4, r0, #0
 8005610:	6030      	str	r0, [r6, #0]
 8005612:	d1d5      	bne.n	80055c0 <__sfp+0x28>
 8005614:	f7ff ff70 	bl	80054f8 <__sfp_lock_release>
 8005618:	230c      	movs	r3, #12
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	e7ef      	b.n	80055fe <__sfp+0x66>
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	08006258 	.word	0x08006258
 8005624:	ffff0001 	.word	0xffff0001

08005628 <_fwalk_reent>:
 8005628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800562a:	0004      	movs	r4, r0
 800562c:	0006      	movs	r6, r0
 800562e:	2700      	movs	r7, #0
 8005630:	9101      	str	r1, [sp, #4]
 8005632:	3448      	adds	r4, #72	; 0x48
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	68a5      	ldr	r5, [r4, #8]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	9b00      	ldr	r3, [sp, #0]
 800563c:	3b01      	subs	r3, #1
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	d504      	bpl.n	800564c <_fwalk_reent+0x24>
 8005642:	6824      	ldr	r4, [r4, #0]
 8005644:	2c00      	cmp	r4, #0
 8005646:	d1f5      	bne.n	8005634 <_fwalk_reent+0xc>
 8005648:	0038      	movs	r0, r7
 800564a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800564c:	89ab      	ldrh	r3, [r5, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d908      	bls.n	8005664 <_fwalk_reent+0x3c>
 8005652:	220e      	movs	r2, #14
 8005654:	5eab      	ldrsh	r3, [r5, r2]
 8005656:	3301      	adds	r3, #1
 8005658:	d004      	beq.n	8005664 <_fwalk_reent+0x3c>
 800565a:	0029      	movs	r1, r5
 800565c:	0030      	movs	r0, r6
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	4798      	blx	r3
 8005662:	4307      	orrs	r7, r0
 8005664:	3568      	adds	r5, #104	; 0x68
 8005666:	e7e8      	b.n	800563a <_fwalk_reent+0x12>

08005668 <__retarget_lock_init_recursive>:
 8005668:	4770      	bx	lr

0800566a <__retarget_lock_acquire_recursive>:
 800566a:	4770      	bx	lr

0800566c <__retarget_lock_release_recursive>:
 800566c:	4770      	bx	lr
	...

08005670 <__swhatbuf_r>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	000e      	movs	r6, r1
 8005674:	001d      	movs	r5, r3
 8005676:	230e      	movs	r3, #14
 8005678:	5ec9      	ldrsh	r1, [r1, r3]
 800567a:	0014      	movs	r4, r2
 800567c:	b096      	sub	sp, #88	; 0x58
 800567e:	2900      	cmp	r1, #0
 8005680:	da07      	bge.n	8005692 <__swhatbuf_r+0x22>
 8005682:	2300      	movs	r3, #0
 8005684:	602b      	str	r3, [r5, #0]
 8005686:	89b3      	ldrh	r3, [r6, #12]
 8005688:	061b      	lsls	r3, r3, #24
 800568a:	d411      	bmi.n	80056b0 <__swhatbuf_r+0x40>
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	e00f      	b.n	80056b2 <__swhatbuf_r+0x42>
 8005692:	466a      	mov	r2, sp
 8005694:	f000 fc68 	bl	8005f68 <_fstat_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	dbf2      	blt.n	8005682 <__swhatbuf_r+0x12>
 800569c:	23f0      	movs	r3, #240	; 0xf0
 800569e:	9901      	ldr	r1, [sp, #4]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	4019      	ands	r1, r3
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <__swhatbuf_r+0x4c>)
 80056a6:	18c9      	adds	r1, r1, r3
 80056a8:	424b      	negs	r3, r1
 80056aa:	4159      	adcs	r1, r3
 80056ac:	6029      	str	r1, [r5, #0]
 80056ae:	e7ed      	b.n	800568c <__swhatbuf_r+0x1c>
 80056b0:	2340      	movs	r3, #64	; 0x40
 80056b2:	2000      	movs	r0, #0
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	b016      	add	sp, #88	; 0x58
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	ffffe000 	.word	0xffffe000

080056c0 <__smakebuf_r>:
 80056c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056c2:	2602      	movs	r6, #2
 80056c4:	898b      	ldrh	r3, [r1, #12]
 80056c6:	0005      	movs	r5, r0
 80056c8:	000c      	movs	r4, r1
 80056ca:	4233      	tst	r3, r6
 80056cc:	d006      	beq.n	80056dc <__smakebuf_r+0x1c>
 80056ce:	0023      	movs	r3, r4
 80056d0:	3347      	adds	r3, #71	; 0x47
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	2301      	movs	r3, #1
 80056d8:	6163      	str	r3, [r4, #20]
 80056da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80056dc:	466a      	mov	r2, sp
 80056de:	ab01      	add	r3, sp, #4
 80056e0:	f7ff ffc6 	bl	8005670 <__swhatbuf_r>
 80056e4:	9900      	ldr	r1, [sp, #0]
 80056e6:	0007      	movs	r7, r0
 80056e8:	0028      	movs	r0, r5
 80056ea:	f000 f877 	bl	80057dc <_malloc_r>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d108      	bne.n	8005704 <__smakebuf_r+0x44>
 80056f2:	220c      	movs	r2, #12
 80056f4:	5ea3      	ldrsh	r3, [r4, r2]
 80056f6:	059a      	lsls	r2, r3, #22
 80056f8:	d4ef      	bmi.n	80056da <__smakebuf_r+0x1a>
 80056fa:	2203      	movs	r2, #3
 80056fc:	4393      	bics	r3, r2
 80056fe:	431e      	orrs	r6, r3
 8005700:	81a6      	strh	r6, [r4, #12]
 8005702:	e7e4      	b.n	80056ce <__smakebuf_r+0xe>
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <__smakebuf_r+0x84>)
 8005706:	62ab      	str	r3, [r5, #40]	; 0x28
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	89a2      	ldrh	r2, [r4, #12]
 800570c:	6020      	str	r0, [r4, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	81a3      	strh	r3, [r4, #12]
 8005712:	9b00      	ldr	r3, [sp, #0]
 8005714:	6120      	str	r0, [r4, #16]
 8005716:	6163      	str	r3, [r4, #20]
 8005718:	9b01      	ldr	r3, [sp, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <__smakebuf_r+0x7a>
 800571e:	0028      	movs	r0, r5
 8005720:	230e      	movs	r3, #14
 8005722:	5ee1      	ldrsh	r1, [r4, r3]
 8005724:	f000 fc32 	bl	8005f8c <_isatty_r>
 8005728:	2800      	cmp	r0, #0
 800572a:	d006      	beq.n	800573a <__smakebuf_r+0x7a>
 800572c:	2203      	movs	r2, #3
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	4393      	bics	r3, r2
 8005732:	001a      	movs	r2, r3
 8005734:	2301      	movs	r3, #1
 8005736:	4313      	orrs	r3, r2
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	89a0      	ldrh	r0, [r4, #12]
 800573c:	4307      	orrs	r7, r0
 800573e:	81a7      	strh	r7, [r4, #12]
 8005740:	e7cb      	b.n	80056da <__smakebuf_r+0x1a>
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	080054ad 	.word	0x080054ad

08005748 <_free_r>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	0005      	movs	r5, r0
 800574c:	2900      	cmp	r1, #0
 800574e:	d010      	beq.n	8005772 <_free_r+0x2a>
 8005750:	1f0c      	subs	r4, r1, #4
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	da00      	bge.n	800575a <_free_r+0x12>
 8005758:	18e4      	adds	r4, r4, r3
 800575a:	0028      	movs	r0, r5
 800575c:	f000 fc5a 	bl	8006014 <__malloc_lock>
 8005760:	4a1d      	ldr	r2, [pc, #116]	; (80057d8 <_free_r+0x90>)
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <_free_r+0x2c>
 8005768:	6063      	str	r3, [r4, #4]
 800576a:	6014      	str	r4, [r2, #0]
 800576c:	0028      	movs	r0, r5
 800576e:	f000 fc59 	bl	8006024 <__malloc_unlock>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	42a3      	cmp	r3, r4
 8005776:	d908      	bls.n	800578a <_free_r+0x42>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	1860      	adds	r0, r4, r1
 800577c:	4283      	cmp	r3, r0
 800577e:	d1f3      	bne.n	8005768 <_free_r+0x20>
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	1841      	adds	r1, r0, r1
 8005786:	6021      	str	r1, [r4, #0]
 8005788:	e7ee      	b.n	8005768 <_free_r+0x20>
 800578a:	001a      	movs	r2, r3
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <_free_r+0x4e>
 8005792:	42a3      	cmp	r3, r4
 8005794:	d9f9      	bls.n	800578a <_free_r+0x42>
 8005796:	6811      	ldr	r1, [r2, #0]
 8005798:	1850      	adds	r0, r2, r1
 800579a:	42a0      	cmp	r0, r4
 800579c:	d10b      	bne.n	80057b6 <_free_r+0x6e>
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	1809      	adds	r1, r1, r0
 80057a2:	1850      	adds	r0, r2, r1
 80057a4:	6011      	str	r1, [r2, #0]
 80057a6:	4283      	cmp	r3, r0
 80057a8:	d1e0      	bne.n	800576c <_free_r+0x24>
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	1841      	adds	r1, r0, r1
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	6053      	str	r3, [r2, #4]
 80057b4:	e7da      	b.n	800576c <_free_r+0x24>
 80057b6:	42a0      	cmp	r0, r4
 80057b8:	d902      	bls.n	80057c0 <_free_r+0x78>
 80057ba:	230c      	movs	r3, #12
 80057bc:	602b      	str	r3, [r5, #0]
 80057be:	e7d5      	b.n	800576c <_free_r+0x24>
 80057c0:	6821      	ldr	r1, [r4, #0]
 80057c2:	1860      	adds	r0, r4, r1
 80057c4:	4283      	cmp	r3, r0
 80057c6:	d103      	bne.n	80057d0 <_free_r+0x88>
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	1841      	adds	r1, r0, r1
 80057ce:	6021      	str	r1, [r4, #0]
 80057d0:	6063      	str	r3, [r4, #4]
 80057d2:	6054      	str	r4, [r2, #4]
 80057d4:	e7ca      	b.n	800576c <_free_r+0x24>
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	20000260 	.word	0x20000260

080057dc <_malloc_r>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	2303      	movs	r3, #3
 80057e0:	1ccd      	adds	r5, r1, #3
 80057e2:	439d      	bics	r5, r3
 80057e4:	3508      	adds	r5, #8
 80057e6:	0006      	movs	r6, r0
 80057e8:	2d0c      	cmp	r5, #12
 80057ea:	d21f      	bcs.n	800582c <_malloc_r+0x50>
 80057ec:	250c      	movs	r5, #12
 80057ee:	42a9      	cmp	r1, r5
 80057f0:	d81e      	bhi.n	8005830 <_malloc_r+0x54>
 80057f2:	0030      	movs	r0, r6
 80057f4:	f000 fc0e 	bl	8006014 <__malloc_lock>
 80057f8:	4925      	ldr	r1, [pc, #148]	; (8005890 <_malloc_r+0xb4>)
 80057fa:	680a      	ldr	r2, [r1, #0]
 80057fc:	0014      	movs	r4, r2
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d11a      	bne.n	8005838 <_malloc_r+0x5c>
 8005802:	4f24      	ldr	r7, [pc, #144]	; (8005894 <_malloc_r+0xb8>)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <_malloc_r+0x38>
 800580a:	0021      	movs	r1, r4
 800580c:	0030      	movs	r0, r6
 800580e:	f000 fb27 	bl	8005e60 <_sbrk_r>
 8005812:	6038      	str	r0, [r7, #0]
 8005814:	0029      	movs	r1, r5
 8005816:	0030      	movs	r0, r6
 8005818:	f000 fb22 	bl	8005e60 <_sbrk_r>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d12b      	bne.n	8005878 <_malloc_r+0x9c>
 8005820:	230c      	movs	r3, #12
 8005822:	0030      	movs	r0, r6
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	f000 fbfd 	bl	8006024 <__malloc_unlock>
 800582a:	e003      	b.n	8005834 <_malloc_r+0x58>
 800582c:	2d00      	cmp	r5, #0
 800582e:	dade      	bge.n	80057ee <_malloc_r+0x12>
 8005830:	230c      	movs	r3, #12
 8005832:	6033      	str	r3, [r6, #0]
 8005834:	2000      	movs	r0, #0
 8005836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	1b5b      	subs	r3, r3, r5
 800583c:	d419      	bmi.n	8005872 <_malloc_r+0x96>
 800583e:	2b0b      	cmp	r3, #11
 8005840:	d903      	bls.n	800584a <_malloc_r+0x6e>
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	18e4      	adds	r4, r4, r3
 8005846:	6025      	str	r5, [r4, #0]
 8005848:	e003      	b.n	8005852 <_malloc_r+0x76>
 800584a:	6863      	ldr	r3, [r4, #4]
 800584c:	42a2      	cmp	r2, r4
 800584e:	d10e      	bne.n	800586e <_malloc_r+0x92>
 8005850:	600b      	str	r3, [r1, #0]
 8005852:	0030      	movs	r0, r6
 8005854:	f000 fbe6 	bl	8006024 <__malloc_unlock>
 8005858:	0020      	movs	r0, r4
 800585a:	2207      	movs	r2, #7
 800585c:	300b      	adds	r0, #11
 800585e:	1d23      	adds	r3, r4, #4
 8005860:	4390      	bics	r0, r2
 8005862:	1ac2      	subs	r2, r0, r3
 8005864:	4298      	cmp	r0, r3
 8005866:	d0e6      	beq.n	8005836 <_malloc_r+0x5a>
 8005868:	1a1b      	subs	r3, r3, r0
 800586a:	50a3      	str	r3, [r4, r2]
 800586c:	e7e3      	b.n	8005836 <_malloc_r+0x5a>
 800586e:	6053      	str	r3, [r2, #4]
 8005870:	e7ef      	b.n	8005852 <_malloc_r+0x76>
 8005872:	0022      	movs	r2, r4
 8005874:	6864      	ldr	r4, [r4, #4]
 8005876:	e7c2      	b.n	80057fe <_malloc_r+0x22>
 8005878:	2303      	movs	r3, #3
 800587a:	1cc4      	adds	r4, r0, #3
 800587c:	439c      	bics	r4, r3
 800587e:	42a0      	cmp	r0, r4
 8005880:	d0e1      	beq.n	8005846 <_malloc_r+0x6a>
 8005882:	1a21      	subs	r1, r4, r0
 8005884:	0030      	movs	r0, r6
 8005886:	f000 faeb 	bl	8005e60 <_sbrk_r>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	d1db      	bne.n	8005846 <_malloc_r+0x6a>
 800588e:	e7c7      	b.n	8005820 <_malloc_r+0x44>
 8005890:	20000260 	.word	0x20000260
 8005894:	20000264 	.word	0x20000264

08005898 <__ssputs_r>:
 8005898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800589a:	688e      	ldr	r6, [r1, #8]
 800589c:	b085      	sub	sp, #20
 800589e:	0007      	movs	r7, r0
 80058a0:	000c      	movs	r4, r1
 80058a2:	9203      	str	r2, [sp, #12]
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	429e      	cmp	r6, r3
 80058a8:	d83c      	bhi.n	8005924 <__ssputs_r+0x8c>
 80058aa:	2390      	movs	r3, #144	; 0x90
 80058ac:	898a      	ldrh	r2, [r1, #12]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	421a      	tst	r2, r3
 80058b2:	d034      	beq.n	800591e <__ssputs_r+0x86>
 80058b4:	2503      	movs	r5, #3
 80058b6:	6909      	ldr	r1, [r1, #16]
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	1a5b      	subs	r3, r3, r1
 80058bc:	9302      	str	r3, [sp, #8]
 80058be:	6963      	ldr	r3, [r4, #20]
 80058c0:	9802      	ldr	r0, [sp, #8]
 80058c2:	435d      	muls	r5, r3
 80058c4:	0feb      	lsrs	r3, r5, #31
 80058c6:	195d      	adds	r5, r3, r5
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	106d      	asrs	r5, r5, #1
 80058cc:	3301      	adds	r3, #1
 80058ce:	181b      	adds	r3, r3, r0
 80058d0:	42ab      	cmp	r3, r5
 80058d2:	d900      	bls.n	80058d6 <__ssputs_r+0x3e>
 80058d4:	001d      	movs	r5, r3
 80058d6:	0553      	lsls	r3, r2, #21
 80058d8:	d532      	bpl.n	8005940 <__ssputs_r+0xa8>
 80058da:	0029      	movs	r1, r5
 80058dc:	0038      	movs	r0, r7
 80058de:	f7ff ff7d 	bl	80057dc <_malloc_r>
 80058e2:	1e06      	subs	r6, r0, #0
 80058e4:	d109      	bne.n	80058fa <__ssputs_r+0x62>
 80058e6:	230c      	movs	r3, #12
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	2001      	movs	r0, #1
 80058ee:	89a2      	ldrh	r2, [r4, #12]
 80058f0:	4240      	negs	r0, r0
 80058f2:	4313      	orrs	r3, r2
 80058f4:	81a3      	strh	r3, [r4, #12]
 80058f6:	b005      	add	sp, #20
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fa:	9a02      	ldr	r2, [sp, #8]
 80058fc:	6921      	ldr	r1, [r4, #16]
 80058fe:	f7ff fb53 	bl	8004fa8 <memcpy>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	4a14      	ldr	r2, [pc, #80]	; (8005958 <__ssputs_r+0xc0>)
 8005906:	401a      	ands	r2, r3
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	4313      	orrs	r3, r2
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	9b02      	ldr	r3, [sp, #8]
 8005910:	6126      	str	r6, [r4, #16]
 8005912:	18f6      	adds	r6, r6, r3
 8005914:	6026      	str	r6, [r4, #0]
 8005916:	6165      	str	r5, [r4, #20]
 8005918:	9e01      	ldr	r6, [sp, #4]
 800591a:	1aed      	subs	r5, r5, r3
 800591c:	60a5      	str	r5, [r4, #8]
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	429e      	cmp	r6, r3
 8005922:	d900      	bls.n	8005926 <__ssputs_r+0x8e>
 8005924:	9e01      	ldr	r6, [sp, #4]
 8005926:	0032      	movs	r2, r6
 8005928:	9903      	ldr	r1, [sp, #12]
 800592a:	6820      	ldr	r0, [r4, #0]
 800592c:	f000 fb5f 	bl	8005fee <memmove>
 8005930:	68a3      	ldr	r3, [r4, #8]
 8005932:	2000      	movs	r0, #0
 8005934:	1b9b      	subs	r3, r3, r6
 8005936:	60a3      	str	r3, [r4, #8]
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	199e      	adds	r6, r3, r6
 800593c:	6026      	str	r6, [r4, #0]
 800593e:	e7da      	b.n	80058f6 <__ssputs_r+0x5e>
 8005940:	002a      	movs	r2, r5
 8005942:	0038      	movs	r0, r7
 8005944:	f000 fb76 	bl	8006034 <_realloc_r>
 8005948:	1e06      	subs	r6, r0, #0
 800594a:	d1e0      	bne.n	800590e <__ssputs_r+0x76>
 800594c:	0038      	movs	r0, r7
 800594e:	6921      	ldr	r1, [r4, #16]
 8005950:	f7ff fefa 	bl	8005748 <_free_r>
 8005954:	e7c7      	b.n	80058e6 <__ssputs_r+0x4e>
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	fffffb7f 	.word	0xfffffb7f

0800595c <_svfiprintf_r>:
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595e:	b0a1      	sub	sp, #132	; 0x84
 8005960:	9003      	str	r0, [sp, #12]
 8005962:	001d      	movs	r5, r3
 8005964:	898b      	ldrh	r3, [r1, #12]
 8005966:	000f      	movs	r7, r1
 8005968:	0016      	movs	r6, r2
 800596a:	061b      	lsls	r3, r3, #24
 800596c:	d511      	bpl.n	8005992 <_svfiprintf_r+0x36>
 800596e:	690b      	ldr	r3, [r1, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10e      	bne.n	8005992 <_svfiprintf_r+0x36>
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	f7ff ff31 	bl	80057dc <_malloc_r>
 800597a:	6038      	str	r0, [r7, #0]
 800597c:	6138      	str	r0, [r7, #16]
 800597e:	2800      	cmp	r0, #0
 8005980:	d105      	bne.n	800598e <_svfiprintf_r+0x32>
 8005982:	230c      	movs	r3, #12
 8005984:	9a03      	ldr	r2, [sp, #12]
 8005986:	3801      	subs	r0, #1
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	b021      	add	sp, #132	; 0x84
 800598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598e:	2340      	movs	r3, #64	; 0x40
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	2300      	movs	r3, #0
 8005994:	ac08      	add	r4, sp, #32
 8005996:	6163      	str	r3, [r4, #20]
 8005998:	3320      	adds	r3, #32
 800599a:	7663      	strb	r3, [r4, #25]
 800599c:	3310      	adds	r3, #16
 800599e:	76a3      	strb	r3, [r4, #26]
 80059a0:	9507      	str	r5, [sp, #28]
 80059a2:	0035      	movs	r5, r6
 80059a4:	782b      	ldrb	r3, [r5, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <_svfiprintf_r+0x52>
 80059aa:	2b25      	cmp	r3, #37	; 0x25
 80059ac:	d147      	bne.n	8005a3e <_svfiprintf_r+0xe2>
 80059ae:	1bab      	subs	r3, r5, r6
 80059b0:	9305      	str	r3, [sp, #20]
 80059b2:	42b5      	cmp	r5, r6
 80059b4:	d00c      	beq.n	80059d0 <_svfiprintf_r+0x74>
 80059b6:	0032      	movs	r2, r6
 80059b8:	0039      	movs	r1, r7
 80059ba:	9803      	ldr	r0, [sp, #12]
 80059bc:	f7ff ff6c 	bl	8005898 <__ssputs_r>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d100      	bne.n	80059c6 <_svfiprintf_r+0x6a>
 80059c4:	e0ae      	b.n	8005b24 <_svfiprintf_r+0x1c8>
 80059c6:	6962      	ldr	r2, [r4, #20]
 80059c8:	9b05      	ldr	r3, [sp, #20]
 80059ca:	4694      	mov	ip, r2
 80059cc:	4463      	add	r3, ip
 80059ce:	6163      	str	r3, [r4, #20]
 80059d0:	782b      	ldrb	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d100      	bne.n	80059d8 <_svfiprintf_r+0x7c>
 80059d6:	e0a5      	b.n	8005b24 <_svfiprintf_r+0x1c8>
 80059d8:	2201      	movs	r2, #1
 80059da:	2300      	movs	r3, #0
 80059dc:	4252      	negs	r2, r2
 80059de:	6062      	str	r2, [r4, #4]
 80059e0:	a904      	add	r1, sp, #16
 80059e2:	3254      	adds	r2, #84	; 0x54
 80059e4:	1852      	adds	r2, r2, r1
 80059e6:	1c6e      	adds	r6, r5, #1
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	60e3      	str	r3, [r4, #12]
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	7013      	strb	r3, [r2, #0]
 80059f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80059f2:	2205      	movs	r2, #5
 80059f4:	7831      	ldrb	r1, [r6, #0]
 80059f6:	4854      	ldr	r0, [pc, #336]	; (8005b48 <_svfiprintf_r+0x1ec>)
 80059f8:	f000 faee 	bl	8005fd8 <memchr>
 80059fc:	1c75      	adds	r5, r6, #1
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d11f      	bne.n	8005a42 <_svfiprintf_r+0xe6>
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	06d3      	lsls	r3, r2, #27
 8005a06:	d504      	bpl.n	8005a12 <_svfiprintf_r+0xb6>
 8005a08:	2353      	movs	r3, #83	; 0x53
 8005a0a:	a904      	add	r1, sp, #16
 8005a0c:	185b      	adds	r3, r3, r1
 8005a0e:	2120      	movs	r1, #32
 8005a10:	7019      	strb	r1, [r3, #0]
 8005a12:	0713      	lsls	r3, r2, #28
 8005a14:	d504      	bpl.n	8005a20 <_svfiprintf_r+0xc4>
 8005a16:	2353      	movs	r3, #83	; 0x53
 8005a18:	a904      	add	r1, sp, #16
 8005a1a:	185b      	adds	r3, r3, r1
 8005a1c:	212b      	movs	r1, #43	; 0x2b
 8005a1e:	7019      	strb	r1, [r3, #0]
 8005a20:	7833      	ldrb	r3, [r6, #0]
 8005a22:	2b2a      	cmp	r3, #42	; 0x2a
 8005a24:	d016      	beq.n	8005a54 <_svfiprintf_r+0xf8>
 8005a26:	0035      	movs	r5, r6
 8005a28:	2100      	movs	r1, #0
 8005a2a:	200a      	movs	r0, #10
 8005a2c:	68e3      	ldr	r3, [r4, #12]
 8005a2e:	782a      	ldrb	r2, [r5, #0]
 8005a30:	1c6e      	adds	r6, r5, #1
 8005a32:	3a30      	subs	r2, #48	; 0x30
 8005a34:	2a09      	cmp	r2, #9
 8005a36:	d94e      	bls.n	8005ad6 <_svfiprintf_r+0x17a>
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	d111      	bne.n	8005a60 <_svfiprintf_r+0x104>
 8005a3c:	e017      	b.n	8005a6e <_svfiprintf_r+0x112>
 8005a3e:	3501      	adds	r5, #1
 8005a40:	e7b0      	b.n	80059a4 <_svfiprintf_r+0x48>
 8005a42:	4b41      	ldr	r3, [pc, #260]	; (8005b48 <_svfiprintf_r+0x1ec>)
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	1ac0      	subs	r0, r0, r3
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4083      	lsls	r3, r0
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	002e      	movs	r6, r5
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	e7ce      	b.n	80059f2 <_svfiprintf_r+0x96>
 8005a54:	9b07      	ldr	r3, [sp, #28]
 8005a56:	1d19      	adds	r1, r3, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	9107      	str	r1, [sp, #28]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	db01      	blt.n	8005a64 <_svfiprintf_r+0x108>
 8005a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a62:	e004      	b.n	8005a6e <_svfiprintf_r+0x112>
 8005a64:	425b      	negs	r3, r3
 8005a66:	60e3      	str	r3, [r4, #12]
 8005a68:	2302      	movs	r3, #2
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	782b      	ldrb	r3, [r5, #0]
 8005a70:	2b2e      	cmp	r3, #46	; 0x2e
 8005a72:	d10a      	bne.n	8005a8a <_svfiprintf_r+0x12e>
 8005a74:	786b      	ldrb	r3, [r5, #1]
 8005a76:	2b2a      	cmp	r3, #42	; 0x2a
 8005a78:	d135      	bne.n	8005ae6 <_svfiprintf_r+0x18a>
 8005a7a:	9b07      	ldr	r3, [sp, #28]
 8005a7c:	3502      	adds	r5, #2
 8005a7e:	1d1a      	adds	r2, r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	9207      	str	r2, [sp, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	db2b      	blt.n	8005ae0 <_svfiprintf_r+0x184>
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	4e30      	ldr	r6, [pc, #192]	; (8005b4c <_svfiprintf_r+0x1f0>)
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	0030      	movs	r0, r6
 8005a90:	7829      	ldrb	r1, [r5, #0]
 8005a92:	f000 faa1 	bl	8005fd8 <memchr>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d006      	beq.n	8005aa8 <_svfiprintf_r+0x14c>
 8005a9a:	2340      	movs	r3, #64	; 0x40
 8005a9c:	1b80      	subs	r0, r0, r6
 8005a9e:	4083      	lsls	r3, r0
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	3501      	adds	r5, #1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	7829      	ldrb	r1, [r5, #0]
 8005aaa:	2206      	movs	r2, #6
 8005aac:	4828      	ldr	r0, [pc, #160]	; (8005b50 <_svfiprintf_r+0x1f4>)
 8005aae:	1c6e      	adds	r6, r5, #1
 8005ab0:	7621      	strb	r1, [r4, #24]
 8005ab2:	f000 fa91 	bl	8005fd8 <memchr>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d03c      	beq.n	8005b34 <_svfiprintf_r+0x1d8>
 8005aba:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <_svfiprintf_r+0x1f8>)
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d125      	bne.n	8005b0c <_svfiprintf_r+0x1b0>
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	9b07      	ldr	r3, [sp, #28]
 8005ac4:	3307      	adds	r3, #7
 8005ac6:	4393      	bics	r3, r2
 8005ac8:	3308      	adds	r3, #8
 8005aca:	9307      	str	r3, [sp, #28]
 8005acc:	6963      	ldr	r3, [r4, #20]
 8005ace:	9a04      	ldr	r2, [sp, #16]
 8005ad0:	189b      	adds	r3, r3, r2
 8005ad2:	6163      	str	r3, [r4, #20]
 8005ad4:	e765      	b.n	80059a2 <_svfiprintf_r+0x46>
 8005ad6:	4343      	muls	r3, r0
 8005ad8:	0035      	movs	r5, r6
 8005ada:	2101      	movs	r1, #1
 8005adc:	189b      	adds	r3, r3, r2
 8005ade:	e7a6      	b.n	8005a2e <_svfiprintf_r+0xd2>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	425b      	negs	r3, r3
 8005ae4:	e7d0      	b.n	8005a88 <_svfiprintf_r+0x12c>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	200a      	movs	r0, #10
 8005aea:	001a      	movs	r2, r3
 8005aec:	3501      	adds	r5, #1
 8005aee:	6063      	str	r3, [r4, #4]
 8005af0:	7829      	ldrb	r1, [r5, #0]
 8005af2:	1c6e      	adds	r6, r5, #1
 8005af4:	3930      	subs	r1, #48	; 0x30
 8005af6:	2909      	cmp	r1, #9
 8005af8:	d903      	bls.n	8005b02 <_svfiprintf_r+0x1a6>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0c5      	beq.n	8005a8a <_svfiprintf_r+0x12e>
 8005afe:	9209      	str	r2, [sp, #36]	; 0x24
 8005b00:	e7c3      	b.n	8005a8a <_svfiprintf_r+0x12e>
 8005b02:	4342      	muls	r2, r0
 8005b04:	0035      	movs	r5, r6
 8005b06:	2301      	movs	r3, #1
 8005b08:	1852      	adds	r2, r2, r1
 8005b0a:	e7f1      	b.n	8005af0 <_svfiprintf_r+0x194>
 8005b0c:	ab07      	add	r3, sp, #28
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	003a      	movs	r2, r7
 8005b12:	0021      	movs	r1, r4
 8005b14:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <_svfiprintf_r+0x1fc>)
 8005b16:	9803      	ldr	r0, [sp, #12]
 8005b18:	e000      	b.n	8005b1c <_svfiprintf_r+0x1c0>
 8005b1a:	bf00      	nop
 8005b1c:	9004      	str	r0, [sp, #16]
 8005b1e:	9b04      	ldr	r3, [sp, #16]
 8005b20:	3301      	adds	r3, #1
 8005b22:	d1d3      	bne.n	8005acc <_svfiprintf_r+0x170>
 8005b24:	89bb      	ldrh	r3, [r7, #12]
 8005b26:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b28:	065b      	lsls	r3, r3, #25
 8005b2a:	d400      	bmi.n	8005b2e <_svfiprintf_r+0x1d2>
 8005b2c:	e72d      	b.n	800598a <_svfiprintf_r+0x2e>
 8005b2e:	2001      	movs	r0, #1
 8005b30:	4240      	negs	r0, r0
 8005b32:	e72a      	b.n	800598a <_svfiprintf_r+0x2e>
 8005b34:	ab07      	add	r3, sp, #28
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	003a      	movs	r2, r7
 8005b3a:	0021      	movs	r1, r4
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <_svfiprintf_r+0x1fc>)
 8005b3e:	9803      	ldr	r0, [sp, #12]
 8005b40:	f000 f87c 	bl	8005c3c <_printf_i>
 8005b44:	e7ea      	b.n	8005b1c <_svfiprintf_r+0x1c0>
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	080062bc 	.word	0x080062bc
 8005b4c:	080062c2 	.word	0x080062c2
 8005b50:	080062c6 	.word	0x080062c6
 8005b54:	00000000 	.word	0x00000000
 8005b58:	08005899 	.word	0x08005899

08005b5c <_printf_common>:
 8005b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b5e:	0015      	movs	r5, r2
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	688a      	ldr	r2, [r1, #8]
 8005b64:	690b      	ldr	r3, [r1, #16]
 8005b66:	000c      	movs	r4, r1
 8005b68:	9000      	str	r0, [sp, #0]
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	da00      	bge.n	8005b70 <_printf_common+0x14>
 8005b6e:	0013      	movs	r3, r2
 8005b70:	0022      	movs	r2, r4
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	3243      	adds	r2, #67	; 0x43
 8005b76:	7812      	ldrb	r2, [r2, #0]
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	d001      	beq.n	8005b80 <_printf_common+0x24>
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	069b      	lsls	r3, r3, #26
 8005b84:	d502      	bpl.n	8005b8c <_printf_common+0x30>
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	3302      	adds	r3, #2
 8005b8a:	602b      	str	r3, [r5, #0]
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	2306      	movs	r3, #6
 8005b90:	0017      	movs	r7, r2
 8005b92:	401f      	ands	r7, r3
 8005b94:	421a      	tst	r2, r3
 8005b96:	d027      	beq.n	8005be8 <_printf_common+0x8c>
 8005b98:	0023      	movs	r3, r4
 8005b9a:	3343      	adds	r3, #67	; 0x43
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	4193      	sbcs	r3, r2
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	0692      	lsls	r2, r2, #26
 8005ba6:	d430      	bmi.n	8005c0a <_printf_common+0xae>
 8005ba8:	0022      	movs	r2, r4
 8005baa:	9901      	ldr	r1, [sp, #4]
 8005bac:	9800      	ldr	r0, [sp, #0]
 8005bae:	9e08      	ldr	r6, [sp, #32]
 8005bb0:	3243      	adds	r2, #67	; 0x43
 8005bb2:	47b0      	blx	r6
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d025      	beq.n	8005c04 <_printf_common+0xa8>
 8005bb8:	2306      	movs	r3, #6
 8005bba:	6820      	ldr	r0, [r4, #0]
 8005bbc:	682a      	ldr	r2, [r5, #0]
 8005bbe:	68e1      	ldr	r1, [r4, #12]
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	4003      	ands	r3, r0
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d103      	bne.n	8005bd0 <_printf_common+0x74>
 8005bc8:	1a8d      	subs	r5, r1, r2
 8005bca:	43eb      	mvns	r3, r5
 8005bcc:	17db      	asrs	r3, r3, #31
 8005bce:	401d      	ands	r5, r3
 8005bd0:	68a3      	ldr	r3, [r4, #8]
 8005bd2:	6922      	ldr	r2, [r4, #16]
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	dd01      	ble.n	8005bdc <_printf_common+0x80>
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	18ed      	adds	r5, r5, r3
 8005bdc:	2700      	movs	r7, #0
 8005bde:	42bd      	cmp	r5, r7
 8005be0:	d120      	bne.n	8005c24 <_printf_common+0xc8>
 8005be2:	2000      	movs	r0, #0
 8005be4:	e010      	b.n	8005c08 <_printf_common+0xac>
 8005be6:	3701      	adds	r7, #1
 8005be8:	68e3      	ldr	r3, [r4, #12]
 8005bea:	682a      	ldr	r2, [r5, #0]
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	42bb      	cmp	r3, r7
 8005bf0:	ddd2      	ble.n	8005b98 <_printf_common+0x3c>
 8005bf2:	0022      	movs	r2, r4
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	9901      	ldr	r1, [sp, #4]
 8005bf8:	9800      	ldr	r0, [sp, #0]
 8005bfa:	9e08      	ldr	r6, [sp, #32]
 8005bfc:	3219      	adds	r2, #25
 8005bfe:	47b0      	blx	r6
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d1f0      	bne.n	8005be6 <_printf_common+0x8a>
 8005c04:	2001      	movs	r0, #1
 8005c06:	4240      	negs	r0, r0
 8005c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c0a:	2030      	movs	r0, #48	; 0x30
 8005c0c:	18e1      	adds	r1, r4, r3
 8005c0e:	3143      	adds	r1, #67	; 0x43
 8005c10:	7008      	strb	r0, [r1, #0]
 8005c12:	0021      	movs	r1, r4
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	3145      	adds	r1, #69	; 0x45
 8005c18:	7809      	ldrb	r1, [r1, #0]
 8005c1a:	18a2      	adds	r2, r4, r2
 8005c1c:	3243      	adds	r2, #67	; 0x43
 8005c1e:	3302      	adds	r3, #2
 8005c20:	7011      	strb	r1, [r2, #0]
 8005c22:	e7c1      	b.n	8005ba8 <_printf_common+0x4c>
 8005c24:	0022      	movs	r2, r4
 8005c26:	2301      	movs	r3, #1
 8005c28:	9901      	ldr	r1, [sp, #4]
 8005c2a:	9800      	ldr	r0, [sp, #0]
 8005c2c:	9e08      	ldr	r6, [sp, #32]
 8005c2e:	321a      	adds	r2, #26
 8005c30:	47b0      	blx	r6
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d0e6      	beq.n	8005c04 <_printf_common+0xa8>
 8005c36:	3701      	adds	r7, #1
 8005c38:	e7d1      	b.n	8005bde <_printf_common+0x82>
	...

08005c3c <_printf_i>:
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b08b      	sub	sp, #44	; 0x2c
 8005c40:	9206      	str	r2, [sp, #24]
 8005c42:	000a      	movs	r2, r1
 8005c44:	3243      	adds	r2, #67	; 0x43
 8005c46:	9307      	str	r3, [sp, #28]
 8005c48:	9005      	str	r0, [sp, #20]
 8005c4a:	9204      	str	r2, [sp, #16]
 8005c4c:	7e0a      	ldrb	r2, [r1, #24]
 8005c4e:	000c      	movs	r4, r1
 8005c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c52:	2a78      	cmp	r2, #120	; 0x78
 8005c54:	d806      	bhi.n	8005c64 <_printf_i+0x28>
 8005c56:	2a62      	cmp	r2, #98	; 0x62
 8005c58:	d808      	bhi.n	8005c6c <_printf_i+0x30>
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d100      	bne.n	8005c60 <_printf_i+0x24>
 8005c5e:	e0c0      	b.n	8005de2 <_printf_i+0x1a6>
 8005c60:	2a58      	cmp	r2, #88	; 0x58
 8005c62:	d052      	beq.n	8005d0a <_printf_i+0xce>
 8005c64:	0026      	movs	r6, r4
 8005c66:	3642      	adds	r6, #66	; 0x42
 8005c68:	7032      	strb	r2, [r6, #0]
 8005c6a:	e022      	b.n	8005cb2 <_printf_i+0x76>
 8005c6c:	0010      	movs	r0, r2
 8005c6e:	3863      	subs	r0, #99	; 0x63
 8005c70:	2815      	cmp	r0, #21
 8005c72:	d8f7      	bhi.n	8005c64 <_printf_i+0x28>
 8005c74:	f7fa fa50 	bl	8000118 <__gnu_thumb1_case_shi>
 8005c78:	001f0016 	.word	0x001f0016
 8005c7c:	fff6fff6 	.word	0xfff6fff6
 8005c80:	fff6fff6 	.word	0xfff6fff6
 8005c84:	fff6001f 	.word	0xfff6001f
 8005c88:	fff6fff6 	.word	0xfff6fff6
 8005c8c:	00a8fff6 	.word	0x00a8fff6
 8005c90:	009a0036 	.word	0x009a0036
 8005c94:	fff6fff6 	.word	0xfff6fff6
 8005c98:	fff600b9 	.word	0xfff600b9
 8005c9c:	fff60036 	.word	0xfff60036
 8005ca0:	009efff6 	.word	0x009efff6
 8005ca4:	0026      	movs	r6, r4
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	3642      	adds	r6, #66	; 0x42
 8005caa:	1d11      	adds	r1, r2, #4
 8005cac:	6019      	str	r1, [r3, #0]
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	7033      	strb	r3, [r6, #0]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e0a7      	b.n	8005e06 <_printf_i+0x1ca>
 8005cb6:	6808      	ldr	r0, [r1, #0]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	1d0a      	adds	r2, r1, #4
 8005cbc:	0605      	lsls	r5, r0, #24
 8005cbe:	d50b      	bpl.n	8005cd8 <_printf_i+0x9c>
 8005cc0:	680d      	ldr	r5, [r1, #0]
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	2d00      	cmp	r5, #0
 8005cc6:	da03      	bge.n	8005cd0 <_printf_i+0x94>
 8005cc8:	232d      	movs	r3, #45	; 0x2d
 8005cca:	9a04      	ldr	r2, [sp, #16]
 8005ccc:	426d      	negs	r5, r5
 8005cce:	7013      	strb	r3, [r2, #0]
 8005cd0:	4b61      	ldr	r3, [pc, #388]	; (8005e58 <_printf_i+0x21c>)
 8005cd2:	270a      	movs	r7, #10
 8005cd4:	9303      	str	r3, [sp, #12]
 8005cd6:	e032      	b.n	8005d3e <_printf_i+0x102>
 8005cd8:	680d      	ldr	r5, [r1, #0]
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	0641      	lsls	r1, r0, #25
 8005cde:	d5f1      	bpl.n	8005cc4 <_printf_i+0x88>
 8005ce0:	b22d      	sxth	r5, r5
 8005ce2:	e7ef      	b.n	8005cc4 <_printf_i+0x88>
 8005ce4:	680d      	ldr	r5, [r1, #0]
 8005ce6:	6819      	ldr	r1, [r3, #0]
 8005ce8:	1d08      	adds	r0, r1, #4
 8005cea:	6018      	str	r0, [r3, #0]
 8005cec:	062e      	lsls	r6, r5, #24
 8005cee:	d501      	bpl.n	8005cf4 <_printf_i+0xb8>
 8005cf0:	680d      	ldr	r5, [r1, #0]
 8005cf2:	e003      	b.n	8005cfc <_printf_i+0xc0>
 8005cf4:	066d      	lsls	r5, r5, #25
 8005cf6:	d5fb      	bpl.n	8005cf0 <_printf_i+0xb4>
 8005cf8:	680d      	ldr	r5, [r1, #0]
 8005cfa:	b2ad      	uxth	r5, r5
 8005cfc:	4b56      	ldr	r3, [pc, #344]	; (8005e58 <_printf_i+0x21c>)
 8005cfe:	270a      	movs	r7, #10
 8005d00:	9303      	str	r3, [sp, #12]
 8005d02:	2a6f      	cmp	r2, #111	; 0x6f
 8005d04:	d117      	bne.n	8005d36 <_printf_i+0xfa>
 8005d06:	2708      	movs	r7, #8
 8005d08:	e015      	b.n	8005d36 <_printf_i+0xfa>
 8005d0a:	3145      	adds	r1, #69	; 0x45
 8005d0c:	700a      	strb	r2, [r1, #0]
 8005d0e:	4a52      	ldr	r2, [pc, #328]	; (8005e58 <_printf_i+0x21c>)
 8005d10:	9203      	str	r2, [sp, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	6821      	ldr	r1, [r4, #0]
 8005d16:	ca20      	ldmia	r2!, {r5}
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	0608      	lsls	r0, r1, #24
 8005d1c:	d550      	bpl.n	8005dc0 <_printf_i+0x184>
 8005d1e:	07cb      	lsls	r3, r1, #31
 8005d20:	d502      	bpl.n	8005d28 <_printf_i+0xec>
 8005d22:	2320      	movs	r3, #32
 8005d24:	4319      	orrs	r1, r3
 8005d26:	6021      	str	r1, [r4, #0]
 8005d28:	2710      	movs	r7, #16
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	d103      	bne.n	8005d36 <_printf_i+0xfa>
 8005d2e:	2320      	movs	r3, #32
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	439a      	bics	r2, r3
 8005d34:	6022      	str	r2, [r4, #0]
 8005d36:	0023      	movs	r3, r4
 8005d38:	2200      	movs	r2, #0
 8005d3a:	3343      	adds	r3, #67	; 0x43
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	60a3      	str	r3, [r4, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db03      	blt.n	8005d4e <_printf_i+0x112>
 8005d46:	2204      	movs	r2, #4
 8005d48:	6821      	ldr	r1, [r4, #0]
 8005d4a:	4391      	bics	r1, r2
 8005d4c:	6021      	str	r1, [r4, #0]
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	d102      	bne.n	8005d58 <_printf_i+0x11c>
 8005d52:	9e04      	ldr	r6, [sp, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00c      	beq.n	8005d72 <_printf_i+0x136>
 8005d58:	9e04      	ldr	r6, [sp, #16]
 8005d5a:	0028      	movs	r0, r5
 8005d5c:	0039      	movs	r1, r7
 8005d5e:	f7fa fa6b 	bl	8000238 <__aeabi_uidivmod>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	3e01      	subs	r6, #1
 8005d66:	5c5b      	ldrb	r3, [r3, r1]
 8005d68:	7033      	strb	r3, [r6, #0]
 8005d6a:	002b      	movs	r3, r5
 8005d6c:	0005      	movs	r5, r0
 8005d6e:	429f      	cmp	r7, r3
 8005d70:	d9f3      	bls.n	8005d5a <_printf_i+0x11e>
 8005d72:	2f08      	cmp	r7, #8
 8005d74:	d109      	bne.n	8005d8a <_printf_i+0x14e>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	07db      	lsls	r3, r3, #31
 8005d7a:	d506      	bpl.n	8005d8a <_printf_i+0x14e>
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	6922      	ldr	r2, [r4, #16]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	dc02      	bgt.n	8005d8a <_printf_i+0x14e>
 8005d84:	2330      	movs	r3, #48	; 0x30
 8005d86:	3e01      	subs	r6, #1
 8005d88:	7033      	strb	r3, [r6, #0]
 8005d8a:	9b04      	ldr	r3, [sp, #16]
 8005d8c:	1b9b      	subs	r3, r3, r6
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	9b07      	ldr	r3, [sp, #28]
 8005d92:	0021      	movs	r1, r4
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	9805      	ldr	r0, [sp, #20]
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	aa09      	add	r2, sp, #36	; 0x24
 8005d9c:	f7ff fede 	bl	8005b5c <_printf_common>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d135      	bne.n	8005e10 <_printf_i+0x1d4>
 8005da4:	2001      	movs	r0, #1
 8005da6:	4240      	negs	r0, r0
 8005da8:	b00b      	add	sp, #44	; 0x2c
 8005daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dac:	2220      	movs	r2, #32
 8005dae:	6809      	ldr	r1, [r1, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	6022      	str	r2, [r4, #0]
 8005db4:	0022      	movs	r2, r4
 8005db6:	2178      	movs	r1, #120	; 0x78
 8005db8:	3245      	adds	r2, #69	; 0x45
 8005dba:	7011      	strb	r1, [r2, #0]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <_printf_i+0x220>)
 8005dbe:	e7a7      	b.n	8005d10 <_printf_i+0xd4>
 8005dc0:	0648      	lsls	r0, r1, #25
 8005dc2:	d5ac      	bpl.n	8005d1e <_printf_i+0xe2>
 8005dc4:	b2ad      	uxth	r5, r5
 8005dc6:	e7aa      	b.n	8005d1e <_printf_i+0xe2>
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	680d      	ldr	r5, [r1, #0]
 8005dcc:	1d10      	adds	r0, r2, #4
 8005dce:	6949      	ldr	r1, [r1, #20]
 8005dd0:	6018      	str	r0, [r3, #0]
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	062e      	lsls	r6, r5, #24
 8005dd6:	d501      	bpl.n	8005ddc <_printf_i+0x1a0>
 8005dd8:	6019      	str	r1, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <_printf_i+0x1a6>
 8005ddc:	066d      	lsls	r5, r5, #25
 8005dde:	d5fb      	bpl.n	8005dd8 <_printf_i+0x19c>
 8005de0:	8019      	strh	r1, [r3, #0]
 8005de2:	2300      	movs	r3, #0
 8005de4:	9e04      	ldr	r6, [sp, #16]
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	e7d2      	b.n	8005d90 <_printf_i+0x154>
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	1d11      	adds	r1, r2, #4
 8005dee:	6019      	str	r1, [r3, #0]
 8005df0:	6816      	ldr	r6, [r2, #0]
 8005df2:	2100      	movs	r1, #0
 8005df4:	0030      	movs	r0, r6
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	f000 f8ee 	bl	8005fd8 <memchr>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d001      	beq.n	8005e04 <_printf_i+0x1c8>
 8005e00:	1b80      	subs	r0, r0, r6
 8005e02:	6060      	str	r0, [r4, #4]
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9a04      	ldr	r2, [sp, #16]
 8005e0c:	7013      	strb	r3, [r2, #0]
 8005e0e:	e7bf      	b.n	8005d90 <_printf_i+0x154>
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	0032      	movs	r2, r6
 8005e14:	9906      	ldr	r1, [sp, #24]
 8005e16:	9805      	ldr	r0, [sp, #20]
 8005e18:	9d07      	ldr	r5, [sp, #28]
 8005e1a:	47a8      	blx	r5
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d0c1      	beq.n	8005da4 <_printf_i+0x168>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	079b      	lsls	r3, r3, #30
 8005e24:	d415      	bmi.n	8005e52 <_printf_i+0x216>
 8005e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e28:	68e0      	ldr	r0, [r4, #12]
 8005e2a:	4298      	cmp	r0, r3
 8005e2c:	dabc      	bge.n	8005da8 <_printf_i+0x16c>
 8005e2e:	0018      	movs	r0, r3
 8005e30:	e7ba      	b.n	8005da8 <_printf_i+0x16c>
 8005e32:	0022      	movs	r2, r4
 8005e34:	2301      	movs	r3, #1
 8005e36:	9906      	ldr	r1, [sp, #24]
 8005e38:	9805      	ldr	r0, [sp, #20]
 8005e3a:	9e07      	ldr	r6, [sp, #28]
 8005e3c:	3219      	adds	r2, #25
 8005e3e:	47b0      	blx	r6
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d0af      	beq.n	8005da4 <_printf_i+0x168>
 8005e44:	3501      	adds	r5, #1
 8005e46:	68e3      	ldr	r3, [r4, #12]
 8005e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	dcf0      	bgt.n	8005e32 <_printf_i+0x1f6>
 8005e50:	e7e9      	b.n	8005e26 <_printf_i+0x1ea>
 8005e52:	2500      	movs	r5, #0
 8005e54:	e7f7      	b.n	8005e46 <_printf_i+0x20a>
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	080062cd 	.word	0x080062cd
 8005e5c:	080062de 	.word	0x080062de

08005e60 <_sbrk_r>:
 8005e60:	2300      	movs	r3, #0
 8005e62:	b570      	push	{r4, r5, r6, lr}
 8005e64:	4d06      	ldr	r5, [pc, #24]	; (8005e80 <_sbrk_r+0x20>)
 8005e66:	0004      	movs	r4, r0
 8005e68:	0008      	movs	r0, r1
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	f7fc fbe2 	bl	8002634 <_sbrk>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d103      	bne.n	8005e7c <_sbrk_r+0x1c>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d000      	beq.n	8005e7c <_sbrk_r+0x1c>
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	20000354 	.word	0x20000354

08005e84 <__sread>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	000c      	movs	r4, r1
 8005e88:	250e      	movs	r5, #14
 8005e8a:	5f49      	ldrsh	r1, [r1, r5]
 8005e8c:	f000 f8f8 	bl	8006080 <_read_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	db03      	blt.n	8005e9c <__sread+0x18>
 8005e94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e96:	181b      	adds	r3, r3, r0
 8005e98:	6563      	str	r3, [r4, #84]	; 0x54
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	4a02      	ldr	r2, [pc, #8]	; (8005ea8 <__sread+0x24>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	e7f9      	b.n	8005e9a <__sread+0x16>
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	ffffefff 	.word	0xffffefff

08005eac <__swrite>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	001f      	movs	r7, r3
 8005eb0:	898b      	ldrh	r3, [r1, #12]
 8005eb2:	0005      	movs	r5, r0
 8005eb4:	000c      	movs	r4, r1
 8005eb6:	0016      	movs	r6, r2
 8005eb8:	05db      	lsls	r3, r3, #23
 8005eba:	d505      	bpl.n	8005ec8 <__swrite+0x1c>
 8005ebc:	230e      	movs	r3, #14
 8005ebe:	5ec9      	ldrsh	r1, [r1, r3]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	f000 f874 	bl	8005fb0 <_lseek_r>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <__swrite+0x34>)
 8005ecc:	0028      	movs	r0, r5
 8005ece:	4013      	ands	r3, r2
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	0032      	movs	r2, r6
 8005ed4:	230e      	movs	r3, #14
 8005ed6:	5ee1      	ldrsh	r1, [r4, r3]
 8005ed8:	003b      	movs	r3, r7
 8005eda:	f000 f81f 	bl	8005f1c <_write_r>
 8005ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee0:	ffffefff 	.word	0xffffefff

08005ee4 <__sseek>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	000c      	movs	r4, r1
 8005ee8:	250e      	movs	r5, #14
 8005eea:	5f49      	ldrsh	r1, [r1, r5]
 8005eec:	f000 f860 	bl	8005fb0 <_lseek_r>
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	1c42      	adds	r2, r0, #1
 8005ef4:	d103      	bne.n	8005efe <__sseek+0x1a>
 8005ef6:	4a05      	ldr	r2, [pc, #20]	; (8005f0c <__sseek+0x28>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	bd70      	pop	{r4, r5, r6, pc}
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	0152      	lsls	r2, r2, #5
 8005f02:	4313      	orrs	r3, r2
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	6560      	str	r0, [r4, #84]	; 0x54
 8005f08:	e7f8      	b.n	8005efc <__sseek+0x18>
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	ffffefff 	.word	0xffffefff

08005f10 <__sclose>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	230e      	movs	r3, #14
 8005f14:	5ec9      	ldrsh	r1, [r1, r3]
 8005f16:	f000 f815 	bl	8005f44 <_close_r>
 8005f1a:	bd10      	pop	{r4, pc}

08005f1c <_write_r>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	0004      	movs	r4, r0
 8005f20:	0008      	movs	r0, r1
 8005f22:	0011      	movs	r1, r2
 8005f24:	001a      	movs	r2, r3
 8005f26:	2300      	movs	r3, #0
 8005f28:	4d05      	ldr	r5, [pc, #20]	; (8005f40 <_write_r+0x24>)
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fc fb3a 	bl	80025a4 <_write>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d103      	bne.n	8005f3c <_write_r+0x20>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d000      	beq.n	8005f3c <_write_r+0x20>
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	20000354 	.word	0x20000354

08005f44 <_close_r>:
 8005f44:	2300      	movs	r3, #0
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	4d06      	ldr	r5, [pc, #24]	; (8005f64 <_close_r+0x20>)
 8005f4a:	0004      	movs	r4, r0
 8005f4c:	0008      	movs	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fc fb44 	bl	80025dc <_close>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d103      	bne.n	8005f60 <_close_r+0x1c>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d000      	beq.n	8005f60 <_close_r+0x1c>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	20000354 	.word	0x20000354

08005f68 <_fstat_r>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b570      	push	{r4, r5, r6, lr}
 8005f6c:	4d06      	ldr	r5, [pc, #24]	; (8005f88 <_fstat_r+0x20>)
 8005f6e:	0004      	movs	r4, r0
 8005f70:	0008      	movs	r0, r1
 8005f72:	0011      	movs	r1, r2
 8005f74:	602b      	str	r3, [r5, #0]
 8005f76:	f7fc fb3b 	bl	80025f0 <_fstat>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	d103      	bne.n	8005f86 <_fstat_r+0x1e>
 8005f7e:	682b      	ldr	r3, [r5, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d000      	beq.n	8005f86 <_fstat_r+0x1e>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
 8005f88:	20000354 	.word	0x20000354

08005f8c <_isatty_r>:
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	b570      	push	{r4, r5, r6, lr}
 8005f90:	4d06      	ldr	r5, [pc, #24]	; (8005fac <_isatty_r+0x20>)
 8005f92:	0004      	movs	r4, r0
 8005f94:	0008      	movs	r0, r1
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	f7fc fb38 	bl	800260c <_isatty>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d103      	bne.n	8005fa8 <_isatty_r+0x1c>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d000      	beq.n	8005fa8 <_isatty_r+0x1c>
 8005fa6:	6023      	str	r3, [r4, #0]
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	20000354 	.word	0x20000354

08005fb0 <_lseek_r>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	0004      	movs	r4, r0
 8005fb4:	0008      	movs	r0, r1
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	001a      	movs	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4d05      	ldr	r5, [pc, #20]	; (8005fd4 <_lseek_r+0x24>)
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fc fb2d 	bl	800261e <_lseek>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d103      	bne.n	8005fd0 <_lseek_r+0x20>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d000      	beq.n	8005fd0 <_lseek_r+0x20>
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	20000354 	.word	0x20000354

08005fd8 <memchr>:
 8005fd8:	b2c9      	uxtb	r1, r1
 8005fda:	1882      	adds	r2, r0, r2
 8005fdc:	4290      	cmp	r0, r2
 8005fde:	d101      	bne.n	8005fe4 <memchr+0xc>
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	4770      	bx	lr
 8005fe4:	7803      	ldrb	r3, [r0, #0]
 8005fe6:	428b      	cmp	r3, r1
 8005fe8:	d0fb      	beq.n	8005fe2 <memchr+0xa>
 8005fea:	3001      	adds	r0, #1
 8005fec:	e7f6      	b.n	8005fdc <memchr+0x4>

08005fee <memmove>:
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	4288      	cmp	r0, r1
 8005ff2:	d902      	bls.n	8005ffa <memmove+0xc>
 8005ff4:	188b      	adds	r3, r1, r2
 8005ff6:	4298      	cmp	r0, r3
 8005ff8:	d303      	bcc.n	8006002 <memmove+0x14>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e007      	b.n	800600e <memmove+0x20>
 8005ffe:	5c8b      	ldrb	r3, [r1, r2]
 8006000:	5483      	strb	r3, [r0, r2]
 8006002:	3a01      	subs	r2, #1
 8006004:	d2fb      	bcs.n	8005ffe <memmove+0x10>
 8006006:	bd10      	pop	{r4, pc}
 8006008:	5ccc      	ldrb	r4, [r1, r3]
 800600a:	54c4      	strb	r4, [r0, r3]
 800600c:	3301      	adds	r3, #1
 800600e:	429a      	cmp	r2, r3
 8006010:	d1fa      	bne.n	8006008 <memmove+0x1a>
 8006012:	e7f8      	b.n	8006006 <memmove+0x18>

08006014 <__malloc_lock>:
 8006014:	b510      	push	{r4, lr}
 8006016:	4802      	ldr	r0, [pc, #8]	; (8006020 <__malloc_lock+0xc>)
 8006018:	f7ff fb27 	bl	800566a <__retarget_lock_acquire_recursive>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	2000034c 	.word	0x2000034c

08006024 <__malloc_unlock>:
 8006024:	b510      	push	{r4, lr}
 8006026:	4802      	ldr	r0, [pc, #8]	; (8006030 <__malloc_unlock+0xc>)
 8006028:	f7ff fb20 	bl	800566c <__retarget_lock_release_recursive>
 800602c:	bd10      	pop	{r4, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	2000034c 	.word	0x2000034c

08006034 <_realloc_r>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0007      	movs	r7, r0
 8006038:	000d      	movs	r5, r1
 800603a:	0016      	movs	r6, r2
 800603c:	2900      	cmp	r1, #0
 800603e:	d105      	bne.n	800604c <_realloc_r+0x18>
 8006040:	0011      	movs	r1, r2
 8006042:	f7ff fbcb 	bl	80057dc <_malloc_r>
 8006046:	0004      	movs	r4, r0
 8006048:	0020      	movs	r0, r4
 800604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800604c:	2a00      	cmp	r2, #0
 800604e:	d103      	bne.n	8006058 <_realloc_r+0x24>
 8006050:	f7ff fb7a 	bl	8005748 <_free_r>
 8006054:	0034      	movs	r4, r6
 8006056:	e7f7      	b.n	8006048 <_realloc_r+0x14>
 8006058:	f000 f826 	bl	80060a8 <_malloc_usable_size_r>
 800605c:	002c      	movs	r4, r5
 800605e:	42b0      	cmp	r0, r6
 8006060:	d2f2      	bcs.n	8006048 <_realloc_r+0x14>
 8006062:	0031      	movs	r1, r6
 8006064:	0038      	movs	r0, r7
 8006066:	f7ff fbb9 	bl	80057dc <_malloc_r>
 800606a:	1e04      	subs	r4, r0, #0
 800606c:	d0ec      	beq.n	8006048 <_realloc_r+0x14>
 800606e:	0029      	movs	r1, r5
 8006070:	0032      	movs	r2, r6
 8006072:	f7fe ff99 	bl	8004fa8 <memcpy>
 8006076:	0029      	movs	r1, r5
 8006078:	0038      	movs	r0, r7
 800607a:	f7ff fb65 	bl	8005748 <_free_r>
 800607e:	e7e3      	b.n	8006048 <_realloc_r+0x14>

08006080 <_read_r>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	0004      	movs	r4, r0
 8006084:	0008      	movs	r0, r1
 8006086:	0011      	movs	r1, r2
 8006088:	001a      	movs	r2, r3
 800608a:	2300      	movs	r3, #0
 800608c:	4d05      	ldr	r5, [pc, #20]	; (80060a4 <_read_r+0x24>)
 800608e:	602b      	str	r3, [r5, #0]
 8006090:	f7fc fa6b 	bl	800256a <_read>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d103      	bne.n	80060a0 <_read_r+0x20>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d000      	beq.n	80060a0 <_read_r+0x20>
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	20000354 	.word	0x20000354

080060a8 <_malloc_usable_size_r>:
 80060a8:	1f0b      	subs	r3, r1, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	1f18      	subs	r0, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da01      	bge.n	80060b6 <_malloc_usable_size_r+0xe>
 80060b2:	580b      	ldr	r3, [r1, r0]
 80060b4:	18c0      	adds	r0, r0, r3
 80060b6:	4770      	bx	lr

080060b8 <_init>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr

080060c4 <_fini>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr
