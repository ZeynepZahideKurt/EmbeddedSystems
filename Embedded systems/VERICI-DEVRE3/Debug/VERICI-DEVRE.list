
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006250  08006250  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006258  08006258  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08006260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001f4  08006454  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006454  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012120  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fa  00000000  00000000  0003233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012df6  00000000  00000000  00036490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd98  00000000  00000000  00049286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068046  00000000  00000000  0005901e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000c10b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006028 	.word	0x08006028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08006028 	.word	0x08006028

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8ba 	bl	8000640 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8b5 	bl	8000640 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzdi2>:
 8000640:	b510      	push	{r4, lr}
 8000642:	2900      	cmp	r1, #0
 8000644:	d103      	bne.n	800064e <__clzdi2+0xe>
 8000646:	f000 f807 	bl	8000658 <__clzsi2>
 800064a:	3020      	adds	r0, #32
 800064c:	e002      	b.n	8000654 <__clzdi2+0x14>
 800064e:	1c08      	adds	r0, r1, #0
 8000650:	f000 f802 	bl	8000658 <__clzsi2>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <InputSDIO>:
**Name: 	vSpi3Init
**Func: 	Init Spi-3 Config
**Note:
**********************************************************/
void InputSDIO(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	240c      	movs	r4, #12
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f004 fc40 	bl	8004f2a <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <InputSDIO+0x70>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <InputSDIO+0x70>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <InputSDIO+0x70>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <InputSDIO+0x70>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <InputSDIO+0x70>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <InputSDIO+0x70>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	00d2      	lsls	r2, r2, #3
 80006e0:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(SDIO_GPIO_Port, &GPIO_InitStruct);
 80006ee:	193a      	adds	r2, r7, r4
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 f922 	bl	8002940 <HAL_GPIO_Init>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b009      	add	sp, #36	; 0x24
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	40021000 	.word	0x40021000

08000708 <OutputSDIO>:
void OutputSDIO(){
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	240c      	movs	r4, #12
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2314      	movs	r3, #20
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f004 fc06 	bl	8004f2a <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <OutputSDIO+0x88>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <OutputSDIO+0x88>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <OutputSDIO+0x88>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <OutputSDIO+0x88>)
 8000738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <OutputSDIO+0x88>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <OutputSDIO+0x88>)
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	00d9      	lsls	r1, r3, #3
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2200      	movs	r2, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fa7c 	bl	8002c56 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	00d2      	lsls	r2, r2, #3
 8000764:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	193a      	adds	r2, r7, r4
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f8dd 	bl	8002940 <HAL_GPIO_Init>


}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b009      	add	sp, #36	; 0x24
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <OutputSDCK>:

void OutputSDCK(void){
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 fbc0 	bl	8004f2a <memset>

	  	  /* GPIO Ports Clock Enable */
	  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <OutputSDCK+0x88>)
 80007ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <OutputSDCK+0x88>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	430a      	orrs	r2, r1
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <OutputSDCK+0x88>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
	  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <OutputSDCK+0x88>)
 80007c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <OutputSDCK+0x88>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <OutputSDCK+0x88>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

	  	  /*Configure GPIO pin Output Level */
	  	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	0099      	lsls	r1, r3, #2
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2200      	movs	r2, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fa36 	bl	8002c56 <HAL_GPIO_WritePin>

	  	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  	  GPIO_InitStruct.Pin = SCLK_Pin;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	601a      	str	r2, [r3, #0]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
	  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
	  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	193a      	adds	r2, r7, r4
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f002 f897 	bl	8002940 <HAL_GPIO_Init>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	; 0x24
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <OutputFCSB>:

void OutputFCSB(void){
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	240c      	movs	r4, #12
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2314      	movs	r3, #20
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 fb7a 	bl	8004f2a <memset>

		  	  /* GPIO Ports Clock Enable */
		  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <OutputFCSB+0x84>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <OutputFCSB+0x84>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <OutputFCSB+0x84>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
		  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <OutputFCSB+0x84>)
 8000850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <OutputFCSB+0x84>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <OutputFCSB+0x84>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2200      	movs	r2, #0
 800086c:	2104      	movs	r1, #4
 800086e:	0018      	movs	r0, r3
 8000870:	f002 f9f1 	bl	8002c56 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2204      	movs	r2, #4
 800087a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	187a      	adds	r2, r7, r1
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f002 f852 	bl	8002940 <HAL_GPIO_Init>


}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b009      	add	sp, #36	; 0x24
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <OutputCSB>:

void OutputCSB(void){
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	240c      	movs	r4, #12
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f004 fb36 	bl	8004f2a <memset>

	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <OutputCSB+0x84>)
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <OutputCSB+0x84>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	430a      	orrs	r2, r1
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <OutputCSB+0x84>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <OutputCSB+0x84>)
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <OutputCSB+0x84>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <OutputCSB+0x84>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 f9ad 	bl	8002c56 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = CSB_Pin;
 80008fc:	0021      	movs	r1, r4
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2201      	movs	r2, #1
 8000908:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	187a      	adds	r2, r7, r1
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f80e 	bl	8002940 <HAL_GPIO_Init>
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b009      	add	sp, #36	; 0x24
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40021000 	.word	0x40021000

08000930 <_delay_us>:
void _delay_us(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
 	// HAL_UART_Transmit( &hlpuart1, (uint8_t *)"giriyor\r\n",9, 100);

	//
	  	//  }
	 //HAL_Delay(1);
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <vSpi3Init>:
void vSpi3Init(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
	OutputCSB();
 800093e:	f7ff ffb3 	bl	80008a8 <OutputCSB>
	OutputFCSB();
 8000942:	f7ff ff6d 	bl	8000820 <OutputFCSB>
	OutputSDCK();
 8000946:	f7ff ff25 	bl	8000794 <OutputSDCK>
	OutputSDIO();
 800094a:	f7ff fedd 	bl	8000708 <OutputSDIO>

	SetCSB();
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2201      	movs	r2, #1
 8000954:	2102      	movs	r1, #2
 8000956:	0018      	movs	r0, r3
 8000958:	f002 f97d 	bl	8002c56 <HAL_GPIO_WritePin>
	SetFCSB();
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2201      	movs	r2, #1
 8000962:	2104      	movs	r1, #4
 8000964:	0018      	movs	r0, r3
 8000966:	f002 f976 	bl	8002c56 <HAL_GPIO_WritePin>
	SetSDIO();
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	00d9      	lsls	r1, r3, #3
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2201      	movs	r2, #1
 8000974:	0018      	movs	r0, r3
 8000976:	f002 f96e 	bl	8002c56 <HAL_GPIO_WritePin>
	ClrSDCK();
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	0099      	lsls	r1, r3, #2
 800097e:	23a0      	movs	r3, #160	; 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f002 f966 	bl	8002c56 <HAL_GPIO_WritePin>
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <vSpi3WriteByte>:
**Func: 	SPI-3 send one byte
**Input:
**Output:  
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	701a      	strb	r2, [r3, #0]

 	byte bitcnt;
 
	SetFCSB();				//FCSB = 1;
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	2201      	movs	r2, #1
 80009a2:	2104      	movs	r1, #4
 80009a4:	0018      	movs	r0, r3
 80009a6:	f002 f956 	bl	8002c56 <HAL_GPIO_WritePin>
 
 	OutputSDIO();			//SDA output mode
 80009aa:	f7ff fead 	bl	8000708 <OutputSDIO>
 	SetSDIO();				//    output 1
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	00d9      	lsls	r1, r3, #3
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2201      	movs	r2, #1
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 f94c 	bl	8002c56 <HAL_GPIO_WritePin>
 
 	ClrSDCK();
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	0099      	lsls	r1, r3, #2
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2200      	movs	r2, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f002 f944 	bl	8002c56 <HAL_GPIO_WritePin>
 	ClrCSB();
 80009ce:	23a0      	movs	r3, #160	; 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	2200      	movs	r2, #0
 80009d4:	2102      	movs	r1, #2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f002 f93d 	bl	8002c56 <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2208      	movs	r2, #8
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e034      	b.n	8000a50 <vSpi3WriteByte+0xc0>
 		{
		ClrSDCK();
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	0099      	lsls	r1, r3, #2
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2200      	movs	r2, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 f930 	bl	8002c56 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 80009f6:	f7ff ff9b 	bl	8000930 <_delay_us>
 		if(dat&0x80)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	da08      	bge.n	8000a16 <vSpi3WriteByte+0x86>
 			SetSDIO();
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	00d9      	lsls	r1, r3, #3
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f002 f921 	bl	8002c56 <HAL_GPIO_WritePin>
 8000a14:	e007      	b.n	8000a26 <vSpi3WriteByte+0x96>
 		else
 			ClrSDIO();
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	00d9      	lsls	r1, r3, #3
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2200      	movs	r2, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 f918 	bl	8002c56 <HAL_GPIO_WritePin>
		SetSDCK();
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	0099      	lsls	r1, r3, #2
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	2201      	movs	r2, #1
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 f910 	bl	8002c56 <HAL_GPIO_WritePin>
 		dat <<= 1;
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	18db      	adds	r3, r3, r3
 8000a3e:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000a40:	f7ff ff76 	bl	8000930 <_delay_us>
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000a44:	210f      	movs	r1, #15
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1c5      	bne.n	80009e6 <vSpi3WriteByte+0x56>
 		}
 	ClrSDCK();
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	0099      	lsls	r1, r3, #2
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 f8f6 	bl	8002c56 <HAL_GPIO_WritePin>
 	SetSDIO();
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	00d9      	lsls	r1, r3, #3
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2201      	movs	r2, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 f8ee 	bl	8002c56 <HAL_GPIO_WritePin>
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <bSpi3ReadByte>:
**Func: 	SPI-3 read one byte
**Input:
**Output:  
**********************************************************/
byte bSpi3ReadByte(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
	byte RdPara = 0;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
  
 	ClrCSB();
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 f8dd 	bl	8002c56 <HAL_GPIO_WritePin>
 	InputSDIO();
 8000a9c:	f7ff fdfa 	bl	8000694 <InputSDIO>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e033      	b.n	8000b10 <bSpi3ReadByte+0x8e>
 		{
 		ClrSDCK();
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	0099      	lsls	r1, r3, #2
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 f8cf 	bl	8002c56 <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 8000ab8:	1dfa      	adds	r2, r7, #7
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	18db      	adds	r3, r3, r3
 8000ac0:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000ac2:	f7ff ff35 	bl	8000930 <_delay_us>
 		SetSDCK();
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	0099      	lsls	r1, r3, #2
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	2201      	movs	r2, #1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 f8c0 	bl	8002c56 <HAL_GPIO_WritePin>
 		_delay_us(); //_delay_us(1);
 8000ad6:	f7ff ff2b 	bl	8000930 <_delay_us>

 		if(SDIO_H())
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	00da      	lsls	r2, r3, #3
 8000ade:	23a0      	movs	r3, #160	; 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f899 	bl	8002c1c <HAL_GPIO_ReadPin>
 8000aea:	0003      	movs	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d106      	bne.n	8000afe <bSpi3ReadByte+0x7c>
 			RdPara |= 0x01;
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	430a      	orrs	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e003      	b.n	8000b06 <bSpi3ReadByte+0x84>
 		else
 			RdPara |= 0x00;
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	1dfa      	adds	r2, r7, #7
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000b06:	1dbb      	adds	r3, r7, #6
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1c7      	bne.n	8000aa8 <bSpi3ReadByte+0x26>
 		}
 	ClrSDCK();
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	0099      	lsls	r1, r3, #2
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 f897 	bl	8002c56 <HAL_GPIO_WritePin>
 	OutputSDIO();
 8000b28:	f7ff fdee 	bl	8000708 <OutputSDIO>
 	SetSDIO();
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	00d9      	lsls	r1, r3, #3
 8000b30:	23a0      	movs	r3, #160	; 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2201      	movs	r2, #1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 f88d 	bl	8002c56 <HAL_GPIO_WritePin>
 	SetCSB();
 8000b3c:	23a0      	movs	r3, #160	; 0xa0
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f002 f886 	bl	8002c56 <HAL_GPIO_WritePin>
 	return(RdPara);
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <vSpi3Write>:
**Func: 	SPI Write One word
**Input: 	Write word
**Output:	none
**********************************************************/
void vSpi3Write(word dat)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 	vSpi3WriteByte((byte)(dat>>8)&0x7F);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	227f      	movs	r2, #127	; 0x7f
 8000b66:	4013      	ands	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff ff10 	bl	8000990 <vSpi3WriteByte>
 	vSpi3WriteByte((byte)dat);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff0b 	bl	8000990 <vSpi3WriteByte>
 	SetCSB();
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2102      	movs	r1, #2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 f867 	bl	8002c56 <HAL_GPIO_WritePin>
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <bSpi3Read>:
**Func: 	SPI-3 Read One byte
**Input: 	readout addresss
**Output:	readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
  	vSpi3WriteByte(addr|0x80);
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	4252      	negs	r2, r2
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fef1 	bl	8000990 <vSpi3WriteByte>
 	return(bSpi3ReadByte());
 8000bae:	f7ff ff68 	bl	8000a82 <bSpi3ReadByte>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <vSpi3WriteFIFO>:
**Func: 	SPI-3 send one byte to FIFO
**Input: 	one byte buffer
**Output:	none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
 
 	SetCSB();
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2102      	movs	r1, #2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 f840 	bl	8002c56 <HAL_GPIO_WritePin>
	OutputSDIO();
 8000bd6:	f7ff fd97 	bl	8000708 <OutputSDIO>
	ClrSDCK();
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	0099      	lsls	r1, r3, #2
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2200      	movs	r2, #0
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 f836 	bl	8002c56 <HAL_GPIO_WritePin>
 	ClrFCSB();			//FCSB = 0
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f002 f82f 	bl	8002c56 <HAL_GPIO_WritePin>
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e034      	b.n	8000c6c <vSpi3WriteFIFO+0xb0>
 		{
 		ClrSDCK();
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	0099      	lsls	r1, r3, #2
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 f822 	bl	8002c56 <HAL_GPIO_WritePin>

 		if(dat&0x80)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da08      	bge.n	8000c2e <vSpi3WriteFIFO+0x72>
			SetSDIO();
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	00d9      	lsls	r1, r3, #3
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2201      	movs	r2, #1
 8000c26:	0018      	movs	r0, r3
 8000c28:	f002 f815 	bl	8002c56 <HAL_GPIO_WritePin>
 8000c2c:	e007      	b.n	8000c3e <vSpi3WriteFIFO+0x82>
		else
			ClrSDIO();
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	00d9      	lsls	r1, r3, #3
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	2200      	movs	r2, #0
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 f80c 	bl	8002c56 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000c3e:	f7ff fe77 	bl	8000930 <_delay_us>
		SetSDCK();
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	0099      	lsls	r1, r3, #2
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 f802 	bl	8002c56 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000c52:	f7ff fe6d 	bl	8000930 <_delay_us>
 		dat <<= 1;
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	18db      	adds	r3, r3, r3
 8000c5e:	7013      	strb	r3, [r2, #0]
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000c60:	210f      	movs	r1, #15
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1c5      	bne.n	8000c02 <vSpi3WriteFIFO+0x46>
 		}
 	ClrSDCK();
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	0099      	lsls	r1, r3, #2
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	2200      	movs	r2, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 ffe8 	bl	8002c56 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000c86:	f7ff fe53 	bl	8000930 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000c8a:	f7ff fe51 	bl	8000930 <_delay_us>
 	SetFCSB();
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	2201      	movs	r2, #1
 8000c94:	2104      	movs	r1, #4
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 ffdd 	bl	8002c56 <HAL_GPIO_WritePin>
	SetSDIO();
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	00d9      	lsls	r1, r3, #3
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 ffd5 	bl	8002c56 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000cac:	f7ff fe40 	bl	8000930 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000cb0:	f7ff fe3e 	bl	8000930 <_delay_us>
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b004      	add	sp, #16
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <vSpi3BurstWriteFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length & head pointer
**Output:	none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	1cfb      	adds	r3, r7, #3
 8000cc8:	701a      	strb	r2, [r3, #0]
 	byte i;
 	if(length!=0x00)
 8000cca:	1cfb      	adds	r3, r7, #3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01a      	beq.n	8000d08 <vSpi3BurstWriteFIFO+0x4c>
	 	{
 		for(i=0;i<length;i++)
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e00d      	b.n	8000cf8 <vSpi3BurstWriteFIFO+0x3c>
 			vSpi3WriteFIFO(ptr[i]);
 8000cdc:	240f      	movs	r4, #15
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ff67 	bl	8000bbc <vSpi3WriteFIFO>
 		for(i=0;i<length;i++)
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	3201      	adds	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fa      	adds	r2, r7, r3
 8000cfc:	1cfb      	adds	r3, r7, #3
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ea      	bcc.n	8000cdc <vSpi3BurstWriteFIFO+0x20>
 		}
 	return;
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46c0      	nop			; (mov r8, r8)
}
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b005      	add	sp, #20
 8000d0e:	bd90      	pop	{r4, r7, pc}

08000d10 <GPO3In>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
void GPO3In(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	240c      	movs	r4, #12
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2314      	movs	r3, #20
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f004 f902 	bl	8004f2a <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <GPO3In+0x70>)
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <GPO3In+0x70>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <GPO3In+0x70>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <GPO3In+0x70>)
 8000d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <GPO3In+0x70>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <GPO3In+0x70>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = GPO3_Pin;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0152      	lsls	r2, r2, #5
 8000d5c:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	193a      	adds	r2, r7, r4
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 fde4 	bl	8002940 <HAL_GPIO_Init>
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b009      	add	sp, #36	; 0x24
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <bGoTx>:

byte bGoTx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	}
	if(i>=100)
		return(false);
	#endif

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <bGoTx+0x7c>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fee2 	bl	8000b56 <vSpi3Write>
	for(i=0; i<100; i++){
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e020      	b.n	8000ddc <bGoTx+0x58>
		for(i=0; i<100; i++){
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e006      	b.n	8000db0 <bGoTx+0x2c>
					_delay_us(); //_delay_us(100);
 8000da2:	f7ff fdc5 	bl	8000930 <_delay_us>
		for(i=0; i<100; i++){
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	3201      	adds	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b63      	cmp	r3, #99	; 0x63
 8000db6:	d9f4      	bls.n	8000da2 <bGoTx+0x1e>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000db8:	2061      	movs	r0, #97	; 0x61
 8000dba:	f7ff fee9 	bl	8000b90 <bSpi3Read>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	1dbb      	adds	r3, r7, #6
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_TX)
 8000dca:	1dbb      	adds	r3, r7, #6
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d009      	beq.n	8000de6 <bGoTx+0x62>
	for(i=0; i<100; i++){
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	3201      	adds	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b63      	cmp	r3, #99	; 0x63
 8000de2:	d9da      	bls.n	8000d9a <bGoTx+0x16>
 8000de4:	e000      	b.n	8000de8 <bGoTx+0x64>
			break;
 8000de6:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b63      	cmp	r3, #99	; 0x63
 8000dee:	d901      	bls.n	8000df4 <bGoTx+0x70>
		return(false);
 8000df0:	2300      	movs	r3, #0
 8000df2:	e000      	b.n	8000df6 <bGoTx+0x72>
	else
		return(true);
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	00006040 	.word	0x00006040

08000e04 <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	byte tmp;

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <bGoSleep+0x4c>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fea2 	bl	8000b56 <vSpi3Write>
	for(int i=0; i<100; i++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	e004      	b.n	8000e22 <bGoSleep+0x1e>
				_delay_us(); //_delay_us(100);
 8000e18:	f7ff fd8a 	bl	8000930 <_delay_us>
	for(int i=0; i<100; i++){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b63      	cmp	r3, #99	; 0x63
 8000e26:	ddf7      	ble.n	8000e18 <bGoSleep+0x14>
			}	//enough?
	tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000e28:	2061      	movs	r0, #97	; 0x61
 8000e2a:	f7ff feb1 	bl	8000b90 <bSpi3Read>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	0019      	movs	r1, r3
 8000e32:	1cfb      	adds	r3, r7, #3
 8000e34:	220f      	movs	r2, #15
 8000e36:	400a      	ands	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_GO_SLEEP)
 8000e3a:	1cfb      	adds	r3, r7, #3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	d101      	bne.n	8000e46 <bGoSleep+0x42>
		return(true);
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <bGoSleep+0x44>
	else
		return(false);
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	00006010 	.word	0x00006010

08000e54 <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	byte tmp, i;

	RssiTrig = false;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <bGoStandby+0x80>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <bGoStandby+0x84>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fe77 	bl	8000b56 <vSpi3Write>
	for(i=0; i<100; i++){
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e020      	b.n	8000eb2 <bGoStandby+0x5e>
		for(i=0; i<100; i++){
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e006      	b.n	8000e86 <bGoStandby+0x32>
					_delay_us(); //_delay_us(100);
 8000e78:	f7ff fd5a 	bl	8000930 <_delay_us>
		for(i=0; i<100; i++){
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	3201      	adds	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b63      	cmp	r3, #99	; 0x63
 8000e8c:	d9f4      	bls.n	8000e78 <bGoStandby+0x24>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000e8e:	2061      	movs	r0, #97	; 0x61
 8000e90:	f7ff fe7e 	bl	8000b90 <bSpi3Read>
 8000e94:	0003      	movs	r3, r0
 8000e96:	0019      	movs	r1, r3
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_STBY)
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d009      	beq.n	8000ebc <bGoStandby+0x68>
	for(i=0; i<100; i++){
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	3201      	adds	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b63      	cmp	r3, #99	; 0x63
 8000eb8:	d9da      	bls.n	8000e70 <bGoStandby+0x1c>
 8000eba:	e000      	b.n	8000ebe <bGoStandby+0x6a>
			break;
 8000ebc:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b63      	cmp	r3, #99	; 0x63
 8000ec4:	d901      	bls.n	8000eca <bGoStandby+0x76>
		return(false);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <bGoStandby+0x78>
	else
		return(true);
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200002f1 	.word	0x200002f1
 8000ed8:	00006002 	.word	0x00006002

08000edc <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <vSoftReset+0x18>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fe37 	bl	8000b56 <vSpi3Write>
	HAL_Delay(1);				//enough?
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 fc49 	bl	8002780 <HAL_Delay>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	00007fff 	.word	0x00007fff

08000ef8 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	0002      	movs	r2, r0
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	22ca      	movs	r2, #202	; 0xca
 8000f0a:	01d2      	lsls	r2, r2, #7
 8000f0c:	4694      	mov	ip, r2
 8000f0e:	4463      	add	r3, ip
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fe20 	bl	8000b56 <vSpi3Write>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <vIntSrcCfg>:
**Function: config interrupt source  
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 8000f1e:	b590      	push	{r4, r7, lr}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	0002      	movs	r2, r0
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	1dbb      	adds	r3, r7, #6
 8000f2c:	1c0a      	adds	r2, r1, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 8000f30:	2066      	movs	r0, #102	; 0x66
 8000f32:	f7ff fe2d 	bl	8000b90 <bSpi3Read>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	240f      	movs	r4, #15
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	221f      	movs	r2, #31
 8000f40:	4391      	bics	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8000f46:	193a      	adds	r2, r7, r4
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	7812      	ldrb	r2, [r2, #0]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	22cc      	movs	r2, #204	; 0xcc
 8000f54:	01d2      	lsls	r2, r2, #7
 8000f56:	4694      	mov	ip, r2
 8000f58:	4463      	add	r3, ip
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff fdfb 	bl	8000b56 <vSpi3Write>

	tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 8000f60:	2067      	movs	r0, #103	; 0x67
 8000f62:	f7ff fe15 	bl	8000b90 <bSpi3Read>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0019      	movs	r1, r3
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	221f      	movs	r2, #31
 8000f6e:	4391      	bics	r1, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8000f74:	193a      	adds	r2, r7, r4
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	22ce      	movs	r2, #206	; 0xce
 8000f82:	01d2      	lsls	r2, r2, #7
 8000f84:	4694      	mov	ip, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fde4 	bl	8000b56 <vSpi3Write>
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b005      	add	sp, #20
 8000f94:	bd90      	pop	{r4, r7, pc}

08000f96 <vEnableAntSwitch>:
**Function:  
**Input:    
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 8000f96:	b5b0      	push	{r4, r5, r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = bSpi3Read(CMT23_INT1_CTL);
 8000fa2:	250f      	movs	r5, #15
 8000fa4:	197c      	adds	r4, r7, r5
 8000fa6:	2066      	movs	r0, #102	; 0x66
 8000fa8:	f7ff fdf2 	bl	8000b90 <bSpi3Read>
 8000fac:	0003      	movs	r3, r0
 8000fae:	7023      	strb	r3, [r4, #0]
	tmp&= 0x3F;
 8000fb0:	197b      	adds	r3, r7, r5
 8000fb2:	197a      	adds	r2, r7, r5
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	213f      	movs	r1, #63	; 0x3f
 8000fb8:	400a      	ands	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d002      	beq.n	8000fca <vEnableAntSwitch+0x34>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d009      	beq.n	8000fdc <vEnableAntSwitch+0x46>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
		case 2:
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
		case 0:
		default:
			break;							//Disable
 8000fc8:	e010      	b.n	8000fec <vEnableAntSwitch+0x56>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 8000fca:	220f      	movs	r2, #15
 8000fcc:	18bb      	adds	r3, r7, r2
 8000fce:	18ba      	adds	r2, r7, r2
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4249      	negs	r1, r1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <vEnableAntSwitch+0x56>
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 8000fdc:	220f      	movs	r2, #15
 8000fde:	18bb      	adds	r3, r7, r2
 8000fe0:	18ba      	adds	r2, r7, r2
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	46c0      	nop			; (mov r8, r8)
	}
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	22cc      	movs	r2, #204	; 0xcc
 8000ff4:	01d2      	lsls	r2, r2, #7
 8000ff6:	4694      	mov	ip, r2
 8000ff8:	4463      	add	r3, ip
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fdab 	bl	8000b56 <vSpi3Write>
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bdb0      	pop	{r4, r5, r7, pc}

08001008 <vIntSrcEnable>:
**Function: enable interrupt source 
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	22d0      	movs	r2, #208	; 0xd0
 800101a:	01d2      	lsls	r2, r2, #7
 800101c:	4694      	mov	ip, r2
 800101e:	4463      	add	r3, ip
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fd98 	bl	8000b56 <vSpi3Write>
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	//byte tmp;
	//byte int_clr2 = 0;
	//byte int_clr1 = 0;
	byte flg = 0;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		int_clr1 |= RX_TIMEOUT_CLR;
		flg |= RX_TMO_EN;
	}
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1);	//Clear flag
#endif
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <bIntSrcFlagClr+0x28>)
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff fd89 	bl	8000b56 <vSpi3Write>
	vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF);	//Clear flag
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <bIntSrcFlagClr+0x2c>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fd85 	bl	8000b56 <vSpi3Write>

	return(flg);
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	00006a07 	.word	0x00006a07
 800105c:	00006bff 	.word	0x00006bff

08001060 <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_FLG);
 8001066:	1dfc      	adds	r4, r7, #7
 8001068:	206e      	movs	r0, #110	; 0x6e
 800106a:	f7ff fd91 	bl	8000b90 <bSpi3Read>
 800106e:	0003      	movs	r3, r0
 8001070:	7023      	strb	r3, [r4, #0]
	vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <vClearFIFO+0x28>)
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff fd6e 	bl	8000b56 <vSpi3Write>
	return(tmp);
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
}
 800107e:	0018      	movs	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	b003      	add	sp, #12
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	00006c03 	.word	0x00006c03

0800108c <vEnableWrFifo>:

#if 1		//splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_CTL);
 8001092:	1dfc      	adds	r4, r7, #7
 8001094:	2069      	movs	r0, #105	; 0x69
 8001096:	f7ff fd7b 	bl	8000b90 <bSpi3Read>
 800109a:	0003      	movs	r3, r0
 800109c:	7023      	strb	r3, [r4, #0]
	tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	1dfa      	adds	r2, r7, #7
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	2105      	movs	r1, #5
 80010a6:	430a      	orrs	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	22d2      	movs	r2, #210	; 0xd2
 80010b0:	01d2      	lsls	r2, r2, #7
 80010b2:	4694      	mov	ip, r2
 80010b4:	4463      	add	r3, ip
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff fd4d 	bl	8000b56 <vSpi3Write>
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b003      	add	sp, #12
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
	byte tmp;
	vSpi3Init();
 80010ca:	f7ff fc36 	bl	800093a <vSpi3Init>
	//GPO1In();
	//GPO2In();
	GPO3In();
 80010ce:	f7ff fe1f 	bl	8000d10 <GPO3In>

	//TX_ANTOut();
	//RX_ANTOut();

	vSoftReset();
 80010d2:	f7ff ff03 	bl	8000edc <vSoftReset>
	HAL_Delay(20);
 80010d6:	2014      	movs	r0, #20
 80010d8:	f001 fb52 	bl	8002780 <HAL_Delay>
	bGoStandby();
 80010dc:	f7ff feba 	bl	8000e54 <bGoStandby>

	//
	tmp = bSpi3Read(CMT23_MODE_STA);
 80010e0:	1dfc      	adds	r4, r7, #7
 80010e2:	2061      	movs	r0, #97	; 0x61
 80010e4:	f7ff fd54 	bl	8000b90 <bSpi3Read>
 80010e8:	0003      	movs	r3, r0
 80010ea:	7023      	strb	r3, [r4, #0]
	tmp|= EEP_CPY_DIS;
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	2110      	movs	r1, #16
 80010f4:	430a      	orrs	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
	tmp&= (~RSTN_IN_EN);			//Disable RstPin
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	2120      	movs	r1, #32
 8001100:	438a      	bics	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	22c2      	movs	r2, #194	; 0xc2
 800110a:	01d2      	lsls	r2, r2, #7
 800110c:	4694      	mov	ip, r2
 800110e:	4463      	add	r3, ip
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fd20 	bl	8000b56 <vSpi3Write>

	bIntSrcFlagClr();
 8001116:	f7ff ff8b 	bl	8001030 <bIntSrcFlagClr>
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b003      	add	sp, #12
 8001120:	bd90      	pop	{r4, r7, pc}

08001122 <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 8001122:	b590      	push	{r4, r7, lr}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	000a      	movs	r2, r1
 800112c:	1cfb      	adds	r3, r7, #3
 800112e:	701a      	strb	r2, [r3, #0]
	byte i;

	if(length!=0){
 8001130:	1cfb      	adds	r3, r7, #3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01a      	beq.n	800116e <vCfgBank+0x4c>
		for(i=0; i<length; i++)
 8001138:	230f      	movs	r3, #15
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e00e      	b.n	8001160 <vCfgBank+0x3e>
			vSpi3Write(cfg[i]);
 8001142:	240f      	movs	r4, #15
 8001144:	193b      	adds	r3, r7, r4
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fd00 	bl	8000b56 <vSpi3Write>
		for(i=0; i<length; i++)
 8001156:	193b      	adds	r3, r7, r4
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	193b      	adds	r3, r7, r4
 800115c:	3201      	adds	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	230f      	movs	r3, #15
 8001162:	18fa      	adds	r2, r7, r3
 8001164:	1cfb      	adds	r3, r7, #3
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3e9      	bcc.n	8001142 <vCfgBank+0x20>
	}
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b005      	add	sp, #20
 8001174:	bd90      	pop	{r4, r7, pc}

08001176 <bSendMessage>:
	rev = 0xFF;
	return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	000a      	movs	r2, r1
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	701a      	strb	r2, [r3, #0]
	bIntSrcFlagClr();
 8001184:	f7ff ff54 	bl	8001030 <bIntSrcFlagClr>
#if 1
	//mode1
	vSetTxPayloadLength(length);
 8001188:	1cfb      	adds	r3, r7, #3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f813 	bl	80011b8 <vSetTxPayloadLength>
	bGoStandby();
 8001192:	f7ff fe5f 	bl	8000e54 <bGoStandby>
	vEnableWrFifo();
 8001196:	f7ff ff79 	bl	800108c <vEnableWrFifo>
	vSpi3BurstWriteFIFO(msg, length);
 800119a:	1cfb      	adds	r3, r7, #3
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	0011      	movs	r1, r2
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fd8a 	bl	8000cbc <vSpi3BurstWriteFIFO>
	bGoTx();
 80011a8:	f7ff fdec 	bl	8000d84 <bGoTx>
	vSetTxPayloadLength(length);
	bGoTx();
	vEnableWrFifo();
	vSpi3BurstWriteFIFO(msg, length);
#endif
	return(true);
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	byte tmp;
	byte len;
	bGoStandby();
 80011c0:	f7ff fe48 	bl	8000e54 <bGoStandby>
	tmp = bSpi3Read(CMT23_PKT_CTRL1);
 80011c4:	250f      	movs	r5, #15
 80011c6:	197c      	adds	r4, r7, r5
 80011c8:	2045      	movs	r0, #69	; 0x45
 80011ca:	f7ff fce1 	bl	8000b90 <bSpi3Read>
 80011ce:	0003      	movs	r3, r0
 80011d0:	7023      	strb	r3, [r4, #0]
	tmp&= 0x8F;
 80011d2:	0028      	movs	r0, r5
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	183a      	adds	r2, r7, r0
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	2170      	movs	r1, #112	; 0x70
 80011dc:	438a      	bics	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]

	if(length!=0){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01c      	beq.n	8001220 <vSetTxPayloadLength+0x68>
		if(FixedPktLength){
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <vSetTxPayloadLength+0xc0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <vSetTxPayloadLength+0x50>
		  tmp &= ~(1<<0);		//clear bit0
 80011ee:	183b      	adds	r3, r7, r0
 80011f0:	183a      	adds	r2, r7, r0
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	438a      	bics	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
		  len = length - 1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	230e      	movs	r3, #14
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	3a01      	subs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e00f      	b.n	8001228 <vSetTxPayloadLength+0x70>
		}
		else{
		  tmp |= (1<<0);	   //set bit0
 8001208:	220f      	movs	r2, #15
 800120a:	18bb      	adds	r3, r7, r2
 800120c:	18ba      	adds	r2, r7, r2
 800120e:	7812      	ldrb	r2, [r2, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
		  len = length;
 8001216:	230e      	movs	r3, #14
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e003      	b.n	8001228 <vSetTxPayloadLength+0x70>
		}
	}else
		len = 0;
 8001220:	230e      	movs	r3, #14
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

	tmp|= (((byte)(len>>8)&0x07)<<4);
 8001228:	240e      	movs	r4, #14
 800122a:	193b      	adds	r3, r7, r4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	b2db      	uxtb	r3, r3
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2270      	movs	r2, #112	; 0x70
 8001238:	4013      	ands	r3, r2
 800123a:	b25a      	sxtb	r2, r3
 800123c:	210f      	movs	r1, #15
 800123e:	187b      	adds	r3, r7, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b25a      	sxtb	r2, r3
 8001248:	187b      	adds	r3, r7, r1
 800124a:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	228a      	movs	r2, #138	; 0x8a
 8001252:	01d2      	lsls	r2, r2, #7
 8001254:	4694      	mov	ip, r2
 8001256:	4463      	add	r3, ip
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fc7c 	bl	8000b56 <vSpi3Write>
	vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len);	//Payload length
 800125e:	193b      	adds	r3, r7, r4
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	228c      	movs	r2, #140	; 0x8c
 8001264:	01d2      	lsls	r2, r2, #7
 8001266:	4694      	mov	ip, r2
 8001268:	4463      	add	r3, ip
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff fc73 	bl	8000b56 <vSpi3Write>
	//bGoSleep();
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	200002f2 	.word	0x200002f2

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b0fa      	sub	sp, #488	; 0x1e8
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f001 fa0d 	bl	80026a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 fbc1 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 fc9b 	bl	8001bc4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800128e:	f000 fc6b 	bl	8001b68 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001292:	f000 fc29 	bl	8001ae8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //  https://github.com/Sensirion/embedded-sht
 HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Basladi\r\n", 9, 100);
 8001296:	49ef      	ldr	r1, [pc, #956]	; (8001654 <main+0x3d8>)
 8001298:	48ef      	ldr	r0, [pc, #956]	; (8001658 <main+0x3dc>)
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	2209      	movs	r2, #9
 800129e:	f003 f947 	bl	8004530 <HAL_UART_Transmit>
  sensirion_i2c_init();
 80012a2:	f000 ff0f 	bl	80020c4 <sensirion_i2c_init>

  /*while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
    	printf("SHT sensor probing failed\n");
  }*/ // burayı aç
  printf("SHT sensor probing successful\n");
 80012a6:	4bed      	ldr	r3, [pc, #948]	; (800165c <main+0x3e0>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f003 feb9 	bl	8005020 <puts>

  #define TX_NUM  24
  byte tx_buf[32] = {'H', 'o', 'p', 'e', 'R', 'F', ' ', 'R', 'F', 'M', ' ', 'C', 'O', 'B', 'R', 'F', 'M', '3', '0', '0', 'A'};
 80012ae:	23da      	movs	r3, #218	; 0xda
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	18f9      	adds	r1, r7, r3
 80012b4:	4aea      	ldr	r2, [pc, #936]	; (8001660 <main+0x3e4>)
 80012b6:	000b      	movs	r3, r1
 80012b8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80012ba:	c331      	stmia	r3!, {r0, r4, r5}
 80012bc:	ca11      	ldmia	r2!, {r0, r4}
 80012be:	c311      	stmia	r3!, {r0, r4}
 80012c0:	8812      	ldrh	r2, [r2, #0]
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	2316      	movs	r3, #22
 80012c6:	18cb      	adds	r3, r1, r3
 80012c8:	220a      	movs	r2, #10
 80012ca:	2100      	movs	r1, #0
 80012cc:	0018      	movs	r0, r3
 80012ce:	f003 fe2c 	bl	8004f2a <memset>
  char bufferkontrol[100];
  char sayac[100];
  char buffer_temperature[100];


  FixedPktLength    = 0;
 80012d2:	4be4      	ldr	r3, [pc, #912]	; (8001664 <main+0x3e8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  PayloadLength     = 23;
 80012d8:	4be3      	ldr	r3, [pc, #908]	; (8001668 <main+0x3ec>)
 80012da:	2217      	movs	r2, #23
 80012dc:	601a      	str	r2, [r3, #0]
  vInit();
 80012de:	f7ff fef1 	bl	80010c4 <vInit>
  vCfgBank(CMTBank, 12);
 80012e2:	4be2      	ldr	r3, [pc, #904]	; (800166c <main+0x3f0>)
 80012e4:	210c      	movs	r1, #12
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff ff1b 	bl	8001122 <vCfgBank>
  vCfgBank(SystemBank, 12);
 80012ec:	4be0      	ldr	r3, [pc, #896]	; (8001670 <main+0x3f4>)
 80012ee:	210c      	movs	r1, #12
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff16 	bl	8001122 <vCfgBank>
  vCfgBank(FrequencyBank, 8);
 80012f6:	4bdf      	ldr	r3, [pc, #892]	; (8001674 <main+0x3f8>)
 80012f8:	2108      	movs	r1, #8
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff11 	bl	8001122 <vCfgBank>
  vCfgBank(DataRateBank, 24);
 8001300:	4bdd      	ldr	r3, [pc, #884]	; (8001678 <main+0x3fc>)
 8001302:	2118      	movs	r1, #24
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ff0c 	bl	8001122 <vCfgBank>
  vCfgBank(BasebandBank, 29);
 800130a:	4bdc      	ldr	r3, [pc, #880]	; (800167c <main+0x400>)
 800130c:	211d      	movs	r1, #29
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff ff07 	bl	8001122 <vCfgBank>
  vCfgBank(TXBank, 11);
 8001314:	4bda      	ldr	r3, [pc, #872]	; (8001680 <main+0x404>)
 8001316:	210b      	movs	r1, #11
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff02 	bl	8001122 <vCfgBank>
  vEnableAntSwitch(0);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fe39 	bl	8000f96 <vEnableAntSwitch>
  vGpioFuncCfg(GPIO1_DCLK + GPIO2_DCLK + GPIO3_INT2); //GPIO Maping
 8001324:	202f      	movs	r0, #47	; 0x2f
 8001326:	f7ff fde7 	bl	8000ef8 <vGpioFuncCfg>



  vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 800132a:	210a      	movs	r1, #10
 800132c:	2010      	movs	r0, #16
 800132e:	f7ff fdf6 	bl	8000f1e <vIntSrcCfg>
  vIntSrcEnable(TX_DONE_EN);
 8001332:	2020      	movs	r0, #32
 8001334:	f7ff fe68 	bl	8001008 <vIntSrcEnable>
  vClearFIFO();
 8001338:	f7ff fe92 	bl	8001060 <vClearFIFO>
  bGoSleep();
 800133c:	f7ff fd62 	bl	8000e04 <bGoSleep>

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Tx...\r\n", 7, 100);
 8001340:	49d0      	ldr	r1, [pc, #832]	; (8001684 <main+0x408>)
 8001342:	48c5      	ldr	r0, [pc, #788]	; (8001658 <main+0x3dc>)
 8001344:	2364      	movs	r3, #100	; 0x64
 8001346:	2207      	movs	r2, #7
 8001348:	f003 f8f2 	bl	8004530 <HAL_UART_Transmit>
int kontrol=1;
 800134c:	2301      	movs	r3, #1
 800134e:	22ee      	movs	r2, #238	; 0xee
 8001350:	0052      	lsls	r2, r2, #1
 8001352:	18ba      	adds	r2, r7, r2
 8001354:	6013      	str	r3, [r2, #0]
int c=0;
 8001356:	2300      	movs	r3, #0
 8001358:	22f2      	movs	r2, #242	; 0xf2
 800135a:	0052      	lsls	r2, r2, #1
 800135c:	18ba      	adds	r2, r7, r2
 800135e:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int32_t temperature, humidity;
	  int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT,&temperature, &humidity);
 8001360:	1d3a      	adds	r2, r7, #4
 8001362:	2308      	movs	r3, #8
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	0019      	movs	r1, r3
 8001368:	2044      	movs	r0, #68	; 0x44
 800136a:	f000 ff41 	bl	80021f0 <sht3x_measure_blocking_read>
 800136e:	0003      	movs	r3, r0
 8001370:	001a      	movs	r2, r3
 8001372:	21dc      	movs	r1, #220	; 0xdc
 8001374:	31ff      	adds	r1, #255	; 0xff
 8001376:	187b      	adds	r3, r7, r1
 8001378:	701a      	strb	r2, [r3, #0]

	  if (ret == STATUS_OK) {
 800137a:	187b      	adds	r3, r7, r1
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d000      	beq.n	8001386 <main+0x10a>
 8001384:	e0a3      	b.n	80014ce <main+0x252>
		  sprintf(buffer, "%d", temperature/10); //100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	210a      	movs	r1, #10
 800138a:	0018      	movs	r0, r3
 800138c:	f7fe ff58 	bl	8000240 <__divsi3>
 8001390:	0003      	movs	r3, r0
 8001392:	001a      	movs	r2, r3
 8001394:	49bc      	ldr	r1, [pc, #752]	; (8001688 <main+0x40c>)
 8001396:	24ce      	movs	r4, #206	; 0xce
 8001398:	0064      	lsls	r4, r4, #1
 800139a:	193b      	adds	r3, r7, r4
 800139c:	0018      	movs	r0, r3
 800139e:	f003 fe49 	bl	8005034 <siprintf>
	      HAL_UART_Transmit(&hlpuart1, "t: ", 3, 1000);
 80013a2:	23fa      	movs	r3, #250	; 0xfa
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	49b9      	ldr	r1, [pc, #740]	; (800168c <main+0x410>)
 80013a8:	48ab      	ldr	r0, [pc, #684]	; (8001658 <main+0x3dc>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	f003 f8c0 	bl	8004530 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7fe fea8 	bl	8000108 <strlen>
 80013b8:	0003      	movs	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	23fa      	movs	r3, #250	; 0xfa
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	1939      	adds	r1, r7, r4
 80013c2:	48a5      	ldr	r0, [pc, #660]	; (8001658 <main+0x3dc>)
 80013c4:	f003 f8b4 	bl	8004530 <HAL_UART_Transmit>
	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80013c8:	49b1      	ldr	r1, [pc, #708]	; (8001690 <main+0x414>)
 80013ca:	48a3      	ldr	r0, [pc, #652]	; (8001658 <main+0x3dc>)
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	2202      	movs	r2, #2
 80013d0:	f003 f8ae 	bl	8004530 <HAL_UART_Transmit>





	      sprintf(buffer2, "%d", humidity/10);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	210a      	movs	r1, #10
 80013d8:	0018      	movs	r0, r3
 80013da:	f7fe ff31 	bl	8000240 <__divsi3>
 80013de:	0003      	movs	r3, r0
 80013e0:	001a      	movs	r2, r3
 80013e2:	49a9      	ldr	r1, [pc, #676]	; (8001688 <main+0x40c>)
 80013e4:	259c      	movs	r5, #156	; 0x9c
 80013e6:	006d      	lsls	r5, r5, #1
 80013e8:	197b      	adds	r3, r7, r5
 80013ea:	0018      	movs	r0, r3
 80013ec:	f003 fe22 	bl	8005034 <siprintf>
	      HAL_UART_Transmit(&hlpuart1, "n: ", 3, 1000);
 80013f0:	23fa      	movs	r3, #250	; 0xfa
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	49a7      	ldr	r1, [pc, #668]	; (8001694 <main+0x418>)
 80013f6:	4898      	ldr	r0, [pc, #608]	; (8001658 <main+0x3dc>)
 80013f8:	2203      	movs	r2, #3
 80013fa:	f003 f899 	bl	8004530 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer2, strlen(buffer2), 1000);
 80013fe:	197b      	adds	r3, r7, r5
 8001400:	0018      	movs	r0, r3
 8001402:	f7fe fe81 	bl	8000108 <strlen>
 8001406:	0003      	movs	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	23fa      	movs	r3, #250	; 0xfa
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	1979      	adds	r1, r7, r5
 8001410:	4891      	ldr	r0, [pc, #580]	; (8001658 <main+0x3dc>)
 8001412:	f003 f88d 	bl	8004530 <HAL_UART_Transmit>
	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001416:	499e      	ldr	r1, [pc, #632]	; (8001690 <main+0x414>)
 8001418:	488f      	ldr	r0, [pc, #572]	; (8001658 <main+0x3dc>)
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	2202      	movs	r2, #2
 800141e:	f003 f887 	bl	8004530 <HAL_UART_Transmit>


	      strncat(buffer, buffer2, 5); //sondaki sayı eklenecek karakter sayısı
 8001422:	1979      	adds	r1, r7, r5
 8001424:	193b      	adds	r3, r7, r4
 8001426:	2205      	movs	r2, #5
 8001428:	0018      	movs	r0, r3
 800142a:	f003 fe23 	bl	8005074 <strncat>
	      strncat(buffer,"A0000000002B", 12);
 800142e:	193b      	adds	r3, r7, r4
 8001430:	0018      	movs	r0, r3
 8001432:	f7fe fe69 	bl	8000108 <strlen>
 8001436:	0003      	movs	r3, r0
 8001438:	001a      	movs	r2, r3
 800143a:	193b      	adds	r3, r7, r4
 800143c:	189a      	adds	r2, r3, r2
 800143e:	4b96      	ldr	r3, [pc, #600]	; (8001698 <main+0x41c>)
 8001440:	0010      	movs	r0, r2
 8001442:	0019      	movs	r1, r3
 8001444:	230d      	movs	r3, #13
 8001446:	001a      	movs	r2, r3
 8001448:	f003 fd66 	bl	8004f18 <memcpy>
	      HAL_UART_Transmit(&hlpuart1, "buffer toplam: ", 15, 1000);
 800144c:	23fa      	movs	r3, #250	; 0xfa
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4992      	ldr	r1, [pc, #584]	; (800169c <main+0x420>)
 8001452:	4881      	ldr	r0, [pc, #516]	; (8001658 <main+0x3dc>)
 8001454:	220f      	movs	r2, #15
 8001456:	f003 f86b 	bl	8004530 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 800145a:	193b      	adds	r3, r7, r4
 800145c:	0018      	movs	r0, r3
 800145e:	f7fe fe53 	bl	8000108 <strlen>
 8001462:	0003      	movs	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	23fa      	movs	r3, #250	; 0xfa
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	1939      	adds	r1, r7, r4
 800146c:	487a      	ldr	r0, [pc, #488]	; (8001658 <main+0x3dc>)
 800146e:	f003 f85f 	bl	8004530 <HAL_UART_Transmit>
	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001472:	4987      	ldr	r1, [pc, #540]	; (8001690 <main+0x414>)
 8001474:	4878      	ldr	r0, [pc, #480]	; (8001658 <main+0x3dc>)
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	2202      	movs	r2, #2
 800147a:	f003 f859 	bl	8004530 <HAL_UART_Transmit>

	      //if((bufferkontrol[0]!=buffer[0])||(bufferkontrol[1]!=buffer[1])||(bufferkontrol[2]!=buffer[2])||(bufferkontrol[3]!=buffer[3])){
	    	  bSendMessage(buffer,  strlen(buffer));
 800147e:	193b      	adds	r3, r7, r4
 8001480:	0018      	movs	r0, r3
 8001482:	f7fe fe41 	bl	8000108 <strlen>
 8001486:	0003      	movs	r3, r0
 8001488:	b2da      	uxtb	r2, r3
 800148a:	193b      	adds	r3, r7, r4
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff fe71 	bl	8001176 <bSendMessage>
	    	  while (GPO3_L());
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 fbbb 	bl	8002c1c <HAL_GPIO_ReadPin>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d0f5      	beq.n	8001496 <main+0x21a>
	    	  bIntSrcFlagClr();
 80014aa:	f7ff fdc1 	bl	8001030 <bIntSrcFlagClr>
	    	  vClearFIFO();
 80014ae:	f7ff fdd7 	bl	8001060 <vClearFIFO>
	    	  bGoSleep();
 80014b2:	f7ff fca7 	bl	8000e04 <bGoSleep>
	    	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderildi\r\n",12, 100);
 80014b6:	497a      	ldr	r1, [pc, #488]	; (80016a0 <main+0x424>)
 80014b8:	4867      	ldr	r0, [pc, #412]	; (8001658 <main+0x3dc>)
 80014ba:	2364      	movs	r3, #100	; 0x64
 80014bc:	220c      	movs	r2, #12
 80014be:	f003 f837 	bl	8004530 <HAL_UART_Transmit>
	    	  HAL_Delay(2000);
 80014c2:	23fa      	movs	r3, #250	; 0xfa
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	0018      	movs	r0, r3
 80014c8:	f001 f95a 	bl	8002780 <HAL_Delay>
 80014cc:	e748      	b.n	8001360 <main+0xe4>
	      //strcpy(bufferkontrol,buffer);


	  }else
	  {
		  c++;
 80014ce:	22f2      	movs	r2, #242	; 0xf2
 80014d0:	0052      	lsls	r2, r2, #1
 80014d2:	18bb      	adds	r3, r7, r2
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	18b9      	adds	r1, r7, r2
 80014da:	600b      	str	r3, [r1, #0]
		 		  	    	sprintf(sayac, "%d", c);
 80014dc:	18bb      	adds	r3, r7, r2
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4969      	ldr	r1, [pc, #420]	; (8001688 <main+0x40c>)
 80014e2:	2470      	movs	r4, #112	; 0x70
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	0018      	movs	r0, r3
 80014e8:	f003 fda4 	bl	8005034 <siprintf>
		 		  	    	HAL_UART_Transmit(&hlpuart1, (uint8_t *)sayac, strlen(sayac), 1000);
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7fe fe0a 	bl	8000108 <strlen>
 80014f4:	0003      	movs	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	23fa      	movs	r3, #250	; 0xfa
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	1939      	adds	r1, r7, r4
 80014fe:	4856      	ldr	r0, [pc, #344]	; (8001658 <main+0x3dc>)
 8001500:	f003 f816 	bl	8004530 <HAL_UART_Transmit>
		 		  	    	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001504:	4962      	ldr	r1, [pc, #392]	; (8001690 <main+0x414>)
 8001506:	4854      	ldr	r0, [pc, #336]	; (8001658 <main+0x3dc>)
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	2202      	movs	r2, #2
 800150c:	f003 f810 	bl	8004530 <HAL_UART_Transmit>
		  int temperature1=-1111;
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <main+0x428>)
 8001512:	24f0      	movs	r4, #240	; 0xf0
 8001514:	0064      	lsls	r4, r4, #1
 8001516:	193a      	adds	r2, r7, r4
 8001518:	6013      	str	r3, [r2, #0]
		  int humidity1=1111;
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <main+0x42c>)
 800151c:	22ea      	movs	r2, #234	; 0xea
 800151e:	0052      	lsls	r2, r2, #1
 8001520:	18ba      	adds	r2, r7, r2
 8001522:	6013      	str	r3, [r2, #0]
		  //HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
		  //HAL_UART_Transmit(&hlpuart1, "error",  5, 1000);



		  if(temperature1<-1000){
 8001524:	193b      	adds	r3, r7, r4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a60      	ldr	r2, [pc, #384]	; (80016ac <main+0x430>)
 800152a:	4293      	cmp	r3, r2
 800152c:	da2d      	bge.n	800158a <main+0x30e>


			  temperature1=temperature1*-1;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	425b      	negs	r3, r3
 8001534:	193a      	adds	r2, r7, r4
 8001536:	6013      	str	r3, [r2, #0]
			  sprintf(buffer, "%d", temperature1);
 8001538:	193b      	adds	r3, r7, r4
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4952      	ldr	r1, [pc, #328]	; (8001688 <main+0x40c>)
 800153e:	25ce      	movs	r5, #206	; 0xce
 8001540:	006d      	lsls	r5, r5, #1
 8001542:	197b      	adds	r3, r7, r5
 8001544:	0018      	movs	r0, r3
 8001546:	f003 fd75 	bl	8005034 <siprintf>

			  HAL_UART_Transmit(&hlpuart1, "-10dan kucuk", 12, 1000);
 800154a:	23fa      	movs	r3, #250	; 0xfa
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4958      	ldr	r1, [pc, #352]	; (80016b0 <main+0x434>)
 8001550:	4841      	ldr	r0, [pc, #260]	; (8001658 <main+0x3dc>)
 8001552:	220c      	movs	r2, #12
 8001554:	f002 ffec 	bl	8004530 <HAL_UART_Transmit>
			  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001558:	494d      	ldr	r1, [pc, #308]	; (8001690 <main+0x414>)
 800155a:	483f      	ldr	r0, [pc, #252]	; (8001658 <main+0x3dc>)
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	2202      	movs	r2, #2
 8001560:	f002 ffe6 	bl	8004530 <HAL_UART_Transmit>


			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 8001564:	23fa      	movs	r3, #250	; 0xfa
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	1979      	adds	r1, r7, r5
 800156a:	483b      	ldr	r0, [pc, #236]	; (8001658 <main+0x3dc>)
 800156c:	2205      	movs	r2, #5
 800156e:	f002 ffdf 	bl	8004530 <HAL_UART_Transmit>
			  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001572:	4947      	ldr	r1, [pc, #284]	; (8001690 <main+0x414>)
 8001574:	4838      	ldr	r0, [pc, #224]	; (8001658 <main+0x3dc>)
 8001576:	2364      	movs	r3, #100	; 0x64
 8001578:	2202      	movs	r2, #2
 800157a:	f002 ffd9 	bl	8004530 <HAL_UART_Transmit>


			  temperature1=temperature1*-1;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	425b      	negs	r3, r3
 8001584:	193a      	adds	r2, r7, r4
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e0c8      	b.n	800171c <main+0x4a0>
		  }
		  else if(temperature1<0){
 800158a:	24f0      	movs	r4, #240	; 0xf0
 800158c:	0064      	lsls	r4, r4, #1
 800158e:	193b      	adds	r3, r7, r4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da2d      	bge.n	80015f2 <main+0x376>

		  			temperature1=temperature1*-1;
 8001596:	193b      	adds	r3, r7, r4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	425b      	negs	r3, r3
 800159c:	193a      	adds	r2, r7, r4
 800159e:	6013      	str	r3, [r2, #0]
		  			sprintf(buffer, "%d", temperature1);
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4938      	ldr	r1, [pc, #224]	; (8001688 <main+0x40c>)
 80015a6:	25ce      	movs	r5, #206	; 0xce
 80015a8:	006d      	lsls	r5, r5, #1
 80015aa:	197b      	adds	r3, r7, r5
 80015ac:	0018      	movs	r0, r3
 80015ae:	f003 fd41 	bl	8005034 <siprintf>

		  			HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 80015b2:	23fa      	movs	r3, #250	; 0xfa
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	1979      	adds	r1, r7, r5
 80015b8:	4827      	ldr	r0, [pc, #156]	; (8001658 <main+0x3dc>)
 80015ba:	2205      	movs	r2, #5
 80015bc:	f002 ffb8 	bl	8004530 <HAL_UART_Transmit>
		  			HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80015c0:	4933      	ldr	r1, [pc, #204]	; (8001690 <main+0x414>)
 80015c2:	4825      	ldr	r0, [pc, #148]	; (8001658 <main+0x3dc>)
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	2202      	movs	r2, #2
 80015c8:	f002 ffb2 	bl	8004530 <HAL_UART_Transmit>

		  			HAL_UART_Transmit(&hlpuart1, "0'la -10 arasında",18, 1000);
 80015cc:	23fa      	movs	r3, #250	; 0xfa
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4938      	ldr	r1, [pc, #224]	; (80016b4 <main+0x438>)
 80015d2:	4821      	ldr	r0, [pc, #132]	; (8001658 <main+0x3dc>)
 80015d4:	2212      	movs	r2, #18
 80015d6:	f002 ffab 	bl	8004530 <HAL_UART_Transmit>
		  			HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80015da:	492d      	ldr	r1, [pc, #180]	; (8001690 <main+0x414>)
 80015dc:	481e      	ldr	r0, [pc, #120]	; (8001658 <main+0x3dc>)
 80015de:	2364      	movs	r3, #100	; 0x64
 80015e0:	2202      	movs	r2, #2
 80015e2:	f002 ffa5 	bl	8004530 <HAL_UART_Transmit>
		  			temperature1=temperature1*-1;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	425b      	negs	r3, r3
 80015ec:	193a      	adds	r2, r7, r4
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e094      	b.n	800171c <main+0x4a0>

		  		  }

		  else if(0==temperature1){
 80015f2:	24f0      	movs	r4, #240	; 0xf0
 80015f4:	0064      	lsls	r4, r4, #1
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <main+0x384>
 80015fe:	e08d      	b.n	800171c <main+0x4a0>

		  }else if(temperature1<1000){
 8001600:	193b      	adds	r3, r7, r4
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	23fa      	movs	r3, #250	; 0xfa
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	429a      	cmp	r2, r3
 800160a:	da57      	bge.n	80016bc <main+0x440>

			  HAL_UART_Transmit(&hlpuart1, "0 ile 10 arasinda", 17, 1000);
 800160c:	23fa      	movs	r3, #250	; 0xfa
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4929      	ldr	r1, [pc, #164]	; (80016b8 <main+0x43c>)
 8001612:	4811      	ldr	r0, [pc, #68]	; (8001658 <main+0x3dc>)
 8001614:	2211      	movs	r2, #17
 8001616:	f002 ff8b 	bl	8004530 <HAL_UART_Transmit>
			  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 800161a:	491d      	ldr	r1, [pc, #116]	; (8001690 <main+0x414>)
 800161c:	480e      	ldr	r0, [pc, #56]	; (8001658 <main+0x3dc>)
 800161e:	2364      	movs	r3, #100	; 0x64
 8001620:	2202      	movs	r2, #2
 8001622:	f002 ff85 	bl	8004530 <HAL_UART_Transmit>
			  sprintf(buffer, "%d", temperature1);
 8001626:	193b      	adds	r3, r7, r4
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4917      	ldr	r1, [pc, #92]	; (8001688 <main+0x40c>)
 800162c:	24ce      	movs	r4, #206	; 0xce
 800162e:	0064      	lsls	r4, r4, #1
 8001630:	193b      	adds	r3, r7, r4
 8001632:	0018      	movs	r0, r3
 8001634:	f003 fcfe 	bl	8005034 <siprintf>

			  		  			HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 15, 1000);
 8001638:	23fa      	movs	r3, #250	; 0xfa
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	1939      	adds	r1, r7, r4
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <main+0x3dc>)
 8001640:	220f      	movs	r2, #15
 8001642:	f002 ff75 	bl	8004530 <HAL_UART_Transmit>
			  		  			HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001646:	4912      	ldr	r1, [pc, #72]	; (8001690 <main+0x414>)
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <main+0x3dc>)
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	2202      	movs	r2, #2
 800164e:	f002 ff6f 	bl	8004530 <HAL_UART_Transmit>
 8001652:	e063      	b.n	800171c <main+0x4a0>
 8001654:	08006040 	.word	0x08006040
 8001658:	20000268 	.word	0x20000268
 800165c:	0800604c 	.word	0x0800604c
 8001660:	0800612c 	.word	0x0800612c
 8001664:	200002f2 	.word	0x200002f2
 8001668:	200002f4 	.word	0x200002f4
 800166c:	20000000 	.word	0x20000000
 8001670:	20000030 	.word	0x20000030
 8001674:	20000060 	.word	0x20000060
 8001678:	20000080 	.word	0x20000080
 800167c:	200000e0 	.word	0x200000e0
 8001680:	20000154 	.word	0x20000154
 8001684:	0800606c 	.word	0x0800606c
 8001688:	08006074 	.word	0x08006074
 800168c:	08006078 	.word	0x08006078
 8001690:	0800607c 	.word	0x0800607c
 8001694:	08006080 	.word	0x08006080
 8001698:	08006084 	.word	0x08006084
 800169c:	08006094 	.word	0x08006094
 80016a0:	080060a4 	.word	0x080060a4
 80016a4:	fffffba9 	.word	0xfffffba9
 80016a8:	00000457 	.word	0x00000457
 80016ac:	fffffc18 	.word	0xfffffc18
 80016b0:	080060b4 	.word	0x080060b4
 80016b4:	080060c4 	.word	0x080060c4
 80016b8:	080060d8 	.word	0x080060d8

		  }else if(temperature1>=1000){
 80016bc:	24f0      	movs	r4, #240	; 0xf0
 80016be:	0064      	lsls	r4, r4, #1
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	23fa      	movs	r3, #250	; 0xfa
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	db27      	blt.n	800171c <main+0x4a0>

			  HAL_UART_Transmit(&hlpuart1, "10'dan buyuk", 12, 1000);
 80016cc:	23fa      	movs	r3, #250	; 0xfa
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	49be      	ldr	r1, [pc, #760]	; (80019cc <main+0x750>)
 80016d2:	48bf      	ldr	r0, [pc, #764]	; (80019d0 <main+0x754>)
 80016d4:	220c      	movs	r2, #12
 80016d6:	f002 ff2b 	bl	8004530 <HAL_UART_Transmit>
			  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80016da:	49be      	ldr	r1, [pc, #760]	; (80019d4 <main+0x758>)
 80016dc:	48bc      	ldr	r0, [pc, #752]	; (80019d0 <main+0x754>)
 80016de:	2364      	movs	r3, #100	; 0x64
 80016e0:	2202      	movs	r2, #2
 80016e2:	f002 ff25 	bl	8004530 <HAL_UART_Transmit>

			  sprintf(buffer, "%d", temperature1); //100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	49bb      	ldr	r1, [pc, #748]	; (80019d8 <main+0x75c>)
 80016ec:	24ce      	movs	r4, #206	; 0xce
 80016ee:	0064      	lsls	r4, r4, #1
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	0018      	movs	r0, r3
 80016f4:	f003 fc9e 	bl	8005034 <siprintf>
			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7fe fd04 	bl	8000108 <strlen>
 8001700:	0003      	movs	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	23fa      	movs	r3, #250	; 0xfa
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	1939      	adds	r1, r7, r4
 800170a:	48b1      	ldr	r0, [pc, #708]	; (80019d0 <main+0x754>)
 800170c:	f002 ff10 	bl	8004530 <HAL_UART_Transmit>
			  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001710:	49b0      	ldr	r1, [pc, #704]	; (80019d4 <main+0x758>)
 8001712:	48af      	ldr	r0, [pc, #700]	; (80019d0 <main+0x754>)
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	2202      	movs	r2, #2
 8001718:	f002 ff0a 	bl	8004530 <HAL_UART_Transmit>
		  }

		  	      //  printf("measured temperature: %0.2f degreeCelsius","measured humidity: %0.2f percentRH\n",temperature / 1000.0f, humidity / 1000.0f);


		  		  sprintf(buffer2, "%d", humidity1);
 800171c:	23ea      	movs	r3, #234	; 0xea
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	49ac      	ldr	r1, [pc, #688]	; (80019d8 <main+0x75c>)
 8001726:	249c      	movs	r4, #156	; 0x9c
 8001728:	0064      	lsls	r4, r4, #1
 800172a:	193b      	adds	r3, r7, r4
 800172c:	0018      	movs	r0, r3
 800172e:	f003 fc81 	bl	8005034 <siprintf>

		  		  strncat(buffer, buffer2, 10); //sondaki sayı eklenecek karakter sayısı
 8001732:	1939      	adds	r1, r7, r4
 8001734:	24ce      	movs	r4, #206	; 0xce
 8001736:	0064      	lsls	r4, r4, #1
 8001738:	193b      	adds	r3, r7, r4
 800173a:	220a      	movs	r2, #10
 800173c:	0018      	movs	r0, r3
 800173e:	f003 fc99 	bl	8005074 <strncat>
		  		  HAL_UART_Transmit(&hlpuart1, "buffer: ", 9, 1000);
 8001742:	23fa      	movs	r3, #250	; 0xfa
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	49a5      	ldr	r1, [pc, #660]	; (80019dc <main+0x760>)
 8001748:	48a1      	ldr	r0, [pc, #644]	; (80019d0 <main+0x754>)
 800174a:	2209      	movs	r2, #9
 800174c:	f002 fef0 	bl	8004530 <HAL_UART_Transmit>
		  		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 4, 1000);
 8001750:	23fa      	movs	r3, #250	; 0xfa
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	1939      	adds	r1, r7, r4
 8001756:	489e      	ldr	r0, [pc, #632]	; (80019d0 <main+0x754>)
 8001758:	2204      	movs	r2, #4
 800175a:	f002 fee9 	bl	8004530 <HAL_UART_Transmit>
		  		  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 800175e:	499d      	ldr	r1, [pc, #628]	; (80019d4 <main+0x758>)
 8001760:	489b      	ldr	r0, [pc, #620]	; (80019d0 <main+0x754>)
 8001762:	2364      	movs	r3, #100	; 0x64
 8001764:	2202      	movs	r2, #2
 8001766:	f002 fee3 	bl	8004530 <HAL_UART_Transmit>
		  		  strncat(buffer, "7", 1); //pil durumu 1-6 arası kadameli olacak
 800176a:	193b      	adds	r3, r7, r4
 800176c:	0018      	movs	r0, r3
 800176e:	f7fe fccb 	bl	8000108 <strlen>
 8001772:	0003      	movs	r3, r0
 8001774:	001a      	movs	r2, r3
 8001776:	193b      	adds	r3, r7, r4
 8001778:	189a      	adds	r2, r3, r2
 800177a:	4b99      	ldr	r3, [pc, #612]	; (80019e0 <main+0x764>)
 800177c:	0010      	movs	r0, r2
 800177e:	0019      	movs	r1, r3
 8001780:	2302      	movs	r3, #2
 8001782:	001a      	movs	r2, r3
 8001784:	f003 fbc8 	bl	8004f18 <memcpy>
		  		  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
 8001788:	23fa      	movs	r3, #250	; 0xfa
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	1939      	adds	r1, r7, r4
 800178e:	4890      	ldr	r0, [pc, #576]	; (80019d0 <main+0x754>)
 8001790:	220a      	movs	r2, #10
 8001792:	f002 fecd 	bl	8004530 <HAL_UART_Transmit>
		  		  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001796:	498f      	ldr	r1, [pc, #572]	; (80019d4 <main+0x758>)
 8001798:	488d      	ldr	r0, [pc, #564]	; (80019d0 <main+0x754>)
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	2202      	movs	r2, #2
 800179e:	f002 fec7 	bl	8004530 <HAL_UART_Transmit>



		  		if(temperature1<-1000){
 80017a2:	23f0      	movs	r3, #240	; 0xf0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a8e      	ldr	r2, [pc, #568]	; (80019e4 <main+0x768>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	da29      	bge.n	8001804 <main+0x588>
		  			strncat(buffer, "-", 1); //+ - durumu
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7fe fca8 	bl	8000108 <strlen>
 80017b8:	0003      	movs	r3, r0
 80017ba:	001a      	movs	r2, r3
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	189a      	adds	r2, r3, r2
 80017c0:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <main+0x76c>)
 80017c2:	0010      	movs	r0, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	2302      	movs	r3, #2
 80017c8:	001a      	movs	r2, r3
 80017ca:	f003 fba5 	bl	8004f18 <memcpy>
		  			HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 80017ce:	23fa      	movs	r3, #250	; 0xfa
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	1939      	adds	r1, r7, r4
 80017d4:	487e      	ldr	r0, [pc, #504]	; (80019d0 <main+0x754>)
 80017d6:	2216      	movs	r2, #22
 80017d8:	f002 feaa 	bl	8004530 <HAL_UART_Transmit>
		  			HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80017dc:	497d      	ldr	r1, [pc, #500]	; (80019d4 <main+0x758>)
 80017de:	487c      	ldr	r0, [pc, #496]	; (80019d0 <main+0x754>)
 80017e0:	2364      	movs	r3, #100	; 0x64
 80017e2:	2202      	movs	r2, #2
 80017e4:	f002 fea4 	bl	8004530 <HAL_UART_Transmit>


		  			HAL_UART_Transmit(&hlpuart1, "-10dan kucuk", 12, 1000);
 80017e8:	23fa      	movs	r3, #250	; 0xfa
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	497f      	ldr	r1, [pc, #508]	; (80019ec <main+0x770>)
 80017ee:	4878      	ldr	r0, [pc, #480]	; (80019d0 <main+0x754>)
 80017f0:	220c      	movs	r2, #12
 80017f2:	f002 fe9d 	bl	8004530 <HAL_UART_Transmit>
		  			HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80017f6:	4977      	ldr	r1, [pc, #476]	; (80019d4 <main+0x758>)
 80017f8:	4875      	ldr	r0, [pc, #468]	; (80019d0 <main+0x754>)
 80017fa:	2364      	movs	r3, #100	; 0x64
 80017fc:	2202      	movs	r2, #2
 80017fe:	f002 fe97 	bl	8004530 <HAL_UART_Transmit>
 8001802:	e082      	b.n	800190a <main+0x68e>
		  		}else if(temperature1<0){
 8001804:	23f0      	movs	r3, #240	; 0xf0
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da1e      	bge.n	800184e <main+0x5d2>
		  			strncat(buffer, "e-", 2); //+ - durumu
 8001810:	24ce      	movs	r4, #206	; 0xce
 8001812:	0064      	lsls	r4, r4, #1
 8001814:	193b      	adds	r3, r7, r4
 8001816:	0018      	movs	r0, r3
 8001818:	f7fe fc76 	bl	8000108 <strlen>
 800181c:	0003      	movs	r3, r0
 800181e:	001a      	movs	r2, r3
 8001820:	193b      	adds	r3, r7, r4
 8001822:	189a      	adds	r2, r3, r2
 8001824:	4b72      	ldr	r3, [pc, #456]	; (80019f0 <main+0x774>)
 8001826:	0010      	movs	r0, r2
 8001828:	0019      	movs	r1, r3
 800182a:	2303      	movs	r3, #3
 800182c:	001a      	movs	r2, r3
 800182e:	f003 fb73 	bl	8004f18 <memcpy>
		  			HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 8001832:	23fa      	movs	r3, #250	; 0xfa
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	1939      	adds	r1, r7, r4
 8001838:	4865      	ldr	r0, [pc, #404]	; (80019d0 <main+0x754>)
 800183a:	2205      	movs	r2, #5
 800183c:	f002 fe78 	bl	8004530 <HAL_UART_Transmit>
		  			HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001840:	4964      	ldr	r1, [pc, #400]	; (80019d4 <main+0x758>)
 8001842:	4863      	ldr	r0, [pc, #396]	; (80019d0 <main+0x754>)
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	2202      	movs	r2, #2
 8001848:	f002 fe72 	bl	8004530 <HAL_UART_Transmit>
 800184c:	e05d      	b.n	800190a <main+0x68e>
		  		}
		  				  else if(0==temperature1){
 800184e:	22f0      	movs	r2, #240	; 0xf0
 8001850:	0052      	lsls	r2, r2, #1
 8001852:	18bb      	adds	r3, r7, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d057      	beq.n	800190a <main+0x68e>


		  				  }else if(temperature1<1000){
 800185a:	18bb      	adds	r3, r7, r2
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	23fa      	movs	r3, #250	; 0xfa
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	429a      	cmp	r2, r3
 8001864:	da1e      	bge.n	80018a4 <main+0x628>
		  					strncat(buffer, "e+", 2);
 8001866:	24ce      	movs	r4, #206	; 0xce
 8001868:	0064      	lsls	r4, r4, #1
 800186a:	193b      	adds	r3, r7, r4
 800186c:	0018      	movs	r0, r3
 800186e:	f7fe fc4b 	bl	8000108 <strlen>
 8001872:	0003      	movs	r3, r0
 8001874:	001a      	movs	r2, r3
 8001876:	193b      	adds	r3, r7, r4
 8001878:	189a      	adds	r2, r3, r2
 800187a:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <main+0x778>)
 800187c:	0010      	movs	r0, r2
 800187e:	0019      	movs	r1, r3
 8001880:	2303      	movs	r3, #3
 8001882:	001a      	movs	r2, r3
 8001884:	f003 fb48 	bl	8004f18 <memcpy>
		  					  HAL_UART_Transmit(&hlpuart1, "0 ile 10 arasinda", 17, 1000);
 8001888:	23fa      	movs	r3, #250	; 0xfa
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	495a      	ldr	r1, [pc, #360]	; (80019f8 <main+0x77c>)
 800188e:	4850      	ldr	r0, [pc, #320]	; (80019d0 <main+0x754>)
 8001890:	2211      	movs	r2, #17
 8001892:	f002 fe4d 	bl	8004530 <HAL_UART_Transmit>
		  					  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001896:	494f      	ldr	r1, [pc, #316]	; (80019d4 <main+0x758>)
 8001898:	484d      	ldr	r0, [pc, #308]	; (80019d0 <main+0x754>)
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	2202      	movs	r2, #2
 800189e:	f002 fe47 	bl	8004530 <HAL_UART_Transmit>
 80018a2:	e032      	b.n	800190a <main+0x68e>

		  				  }else if(temperature1>=1000){
 80018a4:	23f0      	movs	r3, #240	; 0xf0
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	23fa      	movs	r3, #250	; 0xfa
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	db2a      	blt.n	800190a <main+0x68e>

		  					  HAL_UART_Transmit(&hlpuart1, "10'dan buyuk", 12, 1000);
 80018b4:	23fa      	movs	r3, #250	; 0xfa
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4944      	ldr	r1, [pc, #272]	; (80019cc <main+0x750>)
 80018ba:	4845      	ldr	r0, [pc, #276]	; (80019d0 <main+0x754>)
 80018bc:	220c      	movs	r2, #12
 80018be:	f002 fe37 	bl	8004530 <HAL_UART_Transmit>
		  					  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80018c2:	4944      	ldr	r1, [pc, #272]	; (80019d4 <main+0x758>)
 80018c4:	4842      	ldr	r0, [pc, #264]	; (80019d0 <main+0x754>)
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	2202      	movs	r2, #2
 80018ca:	f002 fe31 	bl	8004530 <HAL_UART_Transmit>
		  					  strncat(buffer, "+", 1); //+ - durumu
 80018ce:	24ce      	movs	r4, #206	; 0xce
 80018d0:	0064      	lsls	r4, r4, #1
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7fe fc17 	bl	8000108 <strlen>
 80018da:	0003      	movs	r3, r0
 80018dc:	001a      	movs	r2, r3
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	189a      	adds	r2, r3, r2
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <main+0x780>)
 80018e4:	0010      	movs	r0, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	2302      	movs	r3, #2
 80018ea:	001a      	movs	r2, r3
 80018ec:	f003 fb14 	bl	8004f18 <memcpy>
		  					  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 80018f0:	23fa      	movs	r3, #250	; 0xfa
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	1939      	adds	r1, r7, r4
 80018f6:	4836      	ldr	r0, [pc, #216]	; (80019d0 <main+0x754>)
 80018f8:	2216      	movs	r2, #22
 80018fa:	f002 fe19 	bl	8004530 <HAL_UART_Transmit>
		  					  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80018fe:	4935      	ldr	r1, [pc, #212]	; (80019d4 <main+0x758>)
 8001900:	4833      	ldr	r0, [pc, #204]	; (80019d0 <main+0x754>)
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	2202      	movs	r2, #2
 8001906:	f002 fe13 	bl	8004530 <HAL_UART_Transmit>
		  				  }




		  	    strncat(buffer,"A0000000003B", 12);
 800190a:	24ce      	movs	r4, #206	; 0xce
 800190c:	0064      	lsls	r4, r4, #1
 800190e:	193b      	adds	r3, r7, r4
 8001910:	0018      	movs	r0, r3
 8001912:	f7fe fbf9 	bl	8000108 <strlen>
 8001916:	0003      	movs	r3, r0
 8001918:	001a      	movs	r2, r3
 800191a:	193b      	adds	r3, r7, r4
 800191c:	189a      	adds	r2, r3, r2
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <main+0x784>)
 8001920:	0010      	movs	r0, r2
 8001922:	0019      	movs	r1, r3
 8001924:	230d      	movs	r3, #13
 8001926:	001a      	movs	r2, r3
 8001928:	f003 faf6 	bl	8004f18 <memcpy>
		  	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 800192c:	23fa      	movs	r3, #250	; 0xfa
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	1939      	adds	r1, r7, r4
 8001932:	4827      	ldr	r0, [pc, #156]	; (80019d0 <main+0x754>)
 8001934:	2216      	movs	r2, #22
 8001936:	f002 fdfb 	bl	8004530 <HAL_UART_Transmit>
		  	   	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 800193a:	4926      	ldr	r1, [pc, #152]	; (80019d4 <main+0x758>)
 800193c:	4824      	ldr	r0, [pc, #144]	; (80019d0 <main+0x754>)
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	2202      	movs	r2, #2
 8001942:	f002 fdf5 	bl	8004530 <HAL_UART_Transmit>
		  	  //  strncat(buffer,"Asil2000000B", 12);
		  	  //   strncat(buffer,"Asil3000000B", 12);
		  	  //  strncat(buffer,"Asil4000000B", 12);
		  	  //  strncat(buffer,"Asil5000000B", 12);
		  	   // strncat(buffer,"Asil6000000B", 12);
		  	      HAL_UART_Transmit(&hlpuart1, "buffer toplam: ", 15, 1000);
 8001946:	23fa      	movs	r3, #250	; 0xfa
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	492e      	ldr	r1, [pc, #184]	; (8001a04 <main+0x788>)
 800194c:	4820      	ldr	r0, [pc, #128]	; (80019d0 <main+0x754>)
 800194e:	220f      	movs	r2, #15
 8001950:	f002 fdee 	bl	8004530 <HAL_UART_Transmit>
		  	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 8001954:	23fa      	movs	r3, #250	; 0xfa
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	1939      	adds	r1, r7, r4
 800195a:	481d      	ldr	r0, [pc, #116]	; (80019d0 <main+0x754>)
 800195c:	2216      	movs	r2, #22
 800195e:	f002 fde7 	bl	8004530 <HAL_UART_Transmit>
		  	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001962:	491c      	ldr	r1, [pc, #112]	; (80019d4 <main+0x758>)
 8001964:	481a      	ldr	r0, [pc, #104]	; (80019d0 <main+0x754>)
 8001966:	2364      	movs	r3, #100	; 0x64
 8001968:	2202      	movs	r2, #2
 800196a:	f002 fde1 	bl	8004530 <HAL_UART_Transmit>

		  	      //if((bufferkontrol[0]!=buffer[0])||(bufferkontrol[1]!=buffer[1])||(bufferkontrol[2]!=buffer[2])||(bufferkontrol[3]!=buffer[3])){
		  	    	  bSendMessage(buffer,  strlen(buffer));
 800196e:	193b      	adds	r3, r7, r4
 8001970:	0018      	movs	r0, r3
 8001972:	f7fe fbc9 	bl	8000108 <strlen>
 8001976:	0003      	movs	r3, r0
 8001978:	b2da      	uxtb	r2, r3
 800197a:	193b      	adds	r3, r7, r4
 800197c:	0011      	movs	r1, r2
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff fbf9 	bl	8001176 <bSendMessage>
		  	    	  while (GPO3_L());
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	23a0      	movs	r3, #160	; 0xa0
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	0011      	movs	r1, r2
 8001990:	0018      	movs	r0, r3
 8001992:	f001 f943 	bl	8002c1c <HAL_GPIO_ReadPin>
 8001996:	1e03      	subs	r3, r0, #0
 8001998:	d0f5      	beq.n	8001986 <main+0x70a>
		  	    	  bIntSrcFlagClr();
 800199a:	f7ff fb49 	bl	8001030 <bIntSrcFlagClr>
		  	    	  vClearFIFO();
 800199e:	f7ff fb5f 	bl	8001060 <vClearFIFO>
		  	    	  bGoSleep();
 80019a2:	f7ff fa2f 	bl	8000e04 <bGoSleep>
		  	    	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderildi\r\n",12, 100);
 80019a6:	4918      	ldr	r1, [pc, #96]	; (8001a08 <main+0x78c>)
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <main+0x754>)
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	220c      	movs	r2, #12
 80019ae:	f002 fdbf 	bl	8004530 <HAL_UART_Transmit>
		  	    	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <main+0x758>)
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <main+0x754>)
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	2202      	movs	r2, #2
 80019ba:	f002 fdb9 	bl	8004530 <HAL_UART_Transmit>
		  	    	  HAL_Delay(4000);
 80019be:	23fa      	movs	r3, #250	; 0xfa
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	0018      	movs	r0, r3
 80019c4:	f000 fedc 	bl	8002780 <HAL_Delay>
  {
 80019c8:	e4ca      	b.n	8001360 <main+0xe4>
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	080060ec 	.word	0x080060ec
 80019d0:	20000268 	.word	0x20000268
 80019d4:	0800607c 	.word	0x0800607c
 80019d8:	08006074 	.word	0x08006074
 80019dc:	080060fc 	.word	0x080060fc
 80019e0:	08006108 	.word	0x08006108
 80019e4:	fffffc18 	.word	0xfffffc18
 80019e8:	0800610c 	.word	0x0800610c
 80019ec:	080060b4 	.word	0x080060b4
 80019f0:	08006110 	.word	0x08006110
 80019f4:	08006114 	.word	0x08006114
 80019f8:	080060d8 	.word	0x080060d8
 80019fc:	08006118 	.word	0x08006118
 8001a00:	0800611c 	.word	0x0800611c
 8001a04:	08006094 	.word	0x08006094
 8001a08:	080060a4 	.word	0x080060a4

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b099      	sub	sp, #100	; 0x64
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	242c      	movs	r4, #44	; 0x2c
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	0018      	movs	r0, r3
 8001a18:	2334      	movs	r3, #52	; 0x34
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f003 fa84 	bl	8004f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a22:	2318      	movs	r3, #24
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	0018      	movs	r0, r3
 8001a28:	2314      	movs	r3, #20
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	f003 fa7c 	bl	8004f2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a32:	003b      	movs	r3, r7
 8001a34:	0018      	movs	r0, r3
 8001a36:	2318      	movs	r3, #24
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f003 fa75 	bl	8004f2a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <SystemClock_Config+0xd4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <SystemClock_Config+0xd8>)
 8001a46:	401a      	ands	r2, r3
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <SystemClock_Config+0xd4>)
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	0109      	lsls	r1, r1, #4
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a52:	0021      	movs	r1, r4
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2210      	movs	r2, #16
 8001a58:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	22a0      	movs	r2, #160	; 0xa0
 8001a6a:	0212      	lsls	r2, r2, #8
 8001a6c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2200      	movs	r2, #0
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	0018      	movs	r0, r3
 8001a78:	f001 fe40 	bl	80036fc <HAL_RCC_OscConfig>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001a80:	f000 f92c 	bl	8001cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	2118      	movs	r1, #24
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	220f      	movs	r2, #15
 8001a8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f002 f9a3 	bl	8003df4 <HAL_RCC_ClockConfig>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001ab2:	f000 f913 	bl	8001cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8001ab6:	003b      	movs	r3, r7
 8001ab8:	220c      	movs	r2, #12
 8001aba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001abc:	003b      	movs	r3, r7
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ac2:	003b      	movs	r3, r7
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac8:	003b      	movs	r3, r7
 8001aca:	0018      	movs	r0, r3
 8001acc:	f002 fbb6 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001ad4:	f000 f902 	bl	8001cdc <Error_Handler>
  }
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b019      	add	sp, #100	; 0x64
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	ffffe7ff 	.word	0xffffe7ff

08001ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <MX_I2C1_Init+0x7c>)
 8001af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001af4:	22e1      	movs	r2, #225	; 0xe1
 8001af6:	00d2      	lsls	r2, r2, #3
 8001af8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b26:	0018      	movs	r0, r3
 8001b28:	f001 f8b2 	bl	8002c90 <HAL_I2C_Init>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b30:	f000 f8d4 	bl	8001cdc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f001 fd47 	bl	80035cc <HAL_I2CEx_ConfigAnalogFilter>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b42:	f000 f8cb 	bl	8001cdc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2C1_Init+0x78>)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f001 fd8a 	bl	8003664 <HAL_I2CEx_ConfigDigitalFilter>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b54:	f000 f8c2 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	200002f8 	.word	0x200002f8
 8001b64:	40005400 	.word	0x40005400

08001b68 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <MX_LPUART1_UART_Init+0x58>)
 8001b70:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b74:	22e1      	movs	r2, #225	; 0xe1
 8001b76:	0252      	lsls	r2, r2, #9
 8001b78:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <MX_LPUART1_UART_Init+0x54>)
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f002 fc6e 	bl	8004488 <HAL_UART_Init>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001bb0:	f000 f894 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	20000268 	.word	0x20000268
 8001bc0:	40004800 	.word	0x40004800

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b08b      	sub	sp, #44	; 0x2c
 8001bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	2414      	movs	r4, #20
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	0018      	movs	r0, r3
 8001bd0:	2314      	movs	r3, #20
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	f003 f9a8 	bl	8004f2a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	4b3c      	ldr	r3, [pc, #240]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001be0:	2104      	movs	r1, #4
 8001be2:	430a      	orrs	r2, r1
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001be6:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	2204      	movs	r2, #4
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf6:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	430a      	orrs	r2, r1
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001c28:	2102      	movs	r1, #2
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <MX_GPIO_Init+0x108>)
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	2202      	movs	r2, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	4824      	ldr	r0, [pc, #144]	; (8001cd0 <MX_GPIO_Init+0x10c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	0019      	movs	r1, r3
 8001c44:	f001 f807 	bl	8002c56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin, GPIO_PIN_RESET);
 8001c48:	4922      	ldr	r1, [pc, #136]	; (8001cd4 <MX_GPIO_Init+0x110>)
 8001c4a:	23a0      	movs	r3, #160	; 0xa0
 8001c4c:	05db      	lsls	r3, r3, #23
 8001c4e:	2200      	movs	r2, #0
 8001c50:	0018      	movs	r0, r3
 8001c52:	f001 f800 	bl	8002c56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	0192      	lsls	r2, r2, #6
 8001c5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	2201      	movs	r2, #1
 8001c62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <MX_GPIO_Init+0x10c>)
 8001c74:	0019      	movs	r1, r3
 8001c76:	0010      	movs	r0, r2
 8001c78:	f000 fe62 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin;
 8001c7c:	193b      	adds	r3, r7, r4
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <MX_GPIO_Init+0x110>)
 8001c80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	193b      	adds	r3, r7, r4
 8001c84:	2201      	movs	r2, #1
 8001c86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	193a      	adds	r2, r7, r4
 8001c96:	23a0      	movs	r3, #160	; 0xa0
 8001c98:	05db      	lsls	r3, r3, #23
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 fe4f 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin GPO3_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GPO3_Pin;
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <MX_GPIO_Init+0x114>)
 8001ca6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	2200      	movs	r2, #0
 8001cac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	193a      	adds	r2, r7, r4
 8001cb6:	23a0      	movs	r3, #160	; 0xa0
 8001cb8:	05db      	lsls	r3, r3, #23
 8001cba:	0011      	movs	r1, r2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 fe3f 	bl	8002940 <HAL_GPIO_Init>

}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b00b      	add	sp, #44	; 0x2c
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	50000800 	.word	0x50000800
 8001cd4:	00000606 	.word	0x00000606
 8001cd8:	00001010 	.word	0x00001010

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <Error_Handler+0x8>

08001ce6 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	000a      	movs	r2, r1
 8001cf0:	1cbb      	adds	r3, r7, #2
 8001cf2:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001cf4:	230d      	movs	r3, #13
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	22ff      	movs	r2, #255	; 0xff
 8001cfa:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001cfc:	230e      	movs	r3, #14
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	2200      	movs	r2, #0
 8001d02:	801a      	strh	r2, [r3, #0]
 8001d04:	e037      	b.n	8001d76 <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 8001d06:	230e      	movs	r3, #14
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	18d3      	adds	r3, r2, r3
 8001d10:	7819      	ldrb	r1, [r3, #0]
 8001d12:	220d      	movs	r2, #13
 8001d14:	18bb      	adds	r3, r7, r2
 8001d16:	18ba      	adds	r2, r7, r2
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	404a      	eors	r2, r1
 8001d1c:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001d1e:	230c      	movs	r3, #12
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2208      	movs	r2, #8
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e01b      	b.n	8001d60 <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 8001d28:	210d      	movs	r1, #13
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da09      	bge.n	8001d48 <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	2231      	movs	r2, #49	; 0x31
 8001d3e:	4053      	eors	r3, r2
 8001d40:	b25a      	sxtb	r2, r3
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e005      	b.n	8001d54 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8001d48:	230d      	movs	r3, #13
 8001d4a:	18fa      	adds	r2, r7, r3
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	18db      	adds	r3, r3, r3
 8001d52:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001d54:	220c      	movs	r2, #12
 8001d56:	18bb      	adds	r3, r7, r2
 8001d58:	18ba      	adds	r2, r7, r2
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	230c      	movs	r3, #12
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1de      	bne.n	8001d28 <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001d6a:	220e      	movs	r2, #14
 8001d6c:	18bb      	adds	r3, r7, r2
 8001d6e:	18ba      	adds	r2, r7, r2
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	3201      	adds	r2, #1
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	230e      	movs	r3, #14
 8001d78:	18fa      	adds	r2, r7, r3
 8001d7a:	1cbb      	adds	r3, r7, #2
 8001d7c:	8812      	ldrh	r2, [r2, #0]
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3c0      	bcc.n	8001d06 <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8001d84:	230d      	movs	r3, #13
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	781b      	ldrb	r3, [r3, #0]
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b004      	add	sp, #16
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	0008      	movs	r0, r1
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	1cbb      	adds	r3, r7, #2
 8001da0:	1c02      	adds	r2, r0, #0
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	1c7b      	adds	r3, r7, #1
 8001da6:	1c0a      	adds	r2, r1, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8001daa:	1cbb      	adds	r3, r7, #2
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0011      	movs	r1, r2
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7ff ff97 	bl	8001ce6 <sensirion_common_generate_crc>
 8001db8:	0003      	movs	r3, r0
 8001dba:	001a      	movs	r2, r3
 8001dbc:	1c7b      	adds	r3, r7, #1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d002      	beq.n	8001dca <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	e000      	b.n	8001dcc <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	0008      	movs	r0, r1
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	0019      	movs	r1, r3
 8001de2:	250a      	movs	r5, #10
 8001de4:	197b      	adds	r3, r7, r5
 8001de6:	1c02      	adds	r2, r0, #0
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	2309      	movs	r3, #9
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	1c0a      	adds	r2, r1, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8001df2:	2014      	movs	r0, #20
 8001df4:	183b      	adds	r3, r7, r0
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8001dfa:	197b      	adds	r3, r7, r5
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b299      	uxth	r1, r3
 8001e02:	183b      	adds	r3, r7, r0
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	0004      	movs	r4, r0
 8001e08:	183a      	adds	r2, r7, r0
 8001e0a:	1c58      	adds	r0, r3, #1
 8001e0c:	8010      	strh	r0, [r2, #0]
 8001e0e:	001a      	movs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	193a      	adds	r2, r7, r4
 8001e1e:	1c59      	adds	r1, r3, #1
 8001e20:	8011      	strh	r1, [r2, #0]
 8001e22:	001a      	movs	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	189b      	adds	r3, r3, r2
 8001e28:	197a      	adds	r2, r7, r5
 8001e2a:	8812      	ldrh	r2, [r2, #0]
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8001e30:	2317      	movs	r3, #23
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e042      	b.n	8001ec0 <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8001e3a:	2617      	movs	r6, #23
 8001e3c:	19bb      	adds	r3, r7, r6
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	2414      	movs	r4, #20
 8001e4e:	193b      	adds	r3, r7, r4
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	193a      	adds	r2, r7, r4
 8001e54:	1c58      	adds	r0, r3, #1
 8001e56:	8010      	strh	r0, [r2, #0]
 8001e58:	001a      	movs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	189b      	adds	r3, r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8001e62:	19bb      	adds	r3, r7, r6
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	18d3      	adds	r3, r2, r3
 8001e6c:	8819      	ldrh	r1, [r3, #0]
 8001e6e:	0025      	movs	r5, r4
 8001e70:	197b      	adds	r3, r7, r5
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	197a      	adds	r2, r7, r5
 8001e76:	1c58      	adds	r0, r3, #1
 8001e78:	8010      	strh	r0, [r2, #0]
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	189b      	adds	r3, r3, r2
 8001e80:	b2ca      	uxtb	r2, r1
 8001e82:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8001e84:	197b      	adds	r3, r7, r5
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3b02      	subs	r3, #2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	18d3      	adds	r3, r2, r3
 8001e8e:	2213      	movs	r2, #19
 8001e90:	18bc      	adds	r4, r7, r2
 8001e92:	2102      	movs	r1, #2
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff ff26 	bl	8001ce6 <sensirion_common_generate_crc>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8001e9e:	197b      	adds	r3, r7, r5
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	197a      	adds	r2, r7, r5
 8001ea4:	1c59      	adds	r1, r3, #1
 8001ea6:	8011      	strh	r1, [r2, #0]
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	2213      	movs	r2, #19
 8001eb0:	18ba      	adds	r2, r7, r2
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8001eb6:	19bb      	adds	r3, r7, r6
 8001eb8:	19ba      	adds	r2, r7, r6
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	3201      	adds	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	2317      	movs	r3, #23
 8001ec2:	18fa      	adds	r2, r7, r3
 8001ec4:	2309      	movs	r3, #9
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3b4      	bcc.n	8001e3a <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 8001ed0:	2314      	movs	r3, #20
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	881b      	ldrh	r3, [r3, #0]
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b007      	add	sp, #28
 8001edc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ede <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8001ede:	b5b0      	push	{r4, r5, r7, lr}
 8001ee0:	b096      	sub	sp, #88	; 0x58
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	1c02      	adds	r2, r0, #0
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	1c0a      	adds	r2, r1, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8001ef4:	2052      	movs	r0, #82	; 0x52
 8001ef6:	1839      	adds	r1, r7, r0
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	1c1a      	adds	r2, r3, #0
 8001efe:	1892      	adds	r2, r2, r2
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001f04:	2308      	movs	r3, #8
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f10:	1dfb      	adds	r3, r7, #7
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 f901 	bl	800211c <sensirion_i2c_read>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	214a      	movs	r1, #74	; 0x4a
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8001f24:	000a      	movs	r2, r1
 8001f26:	18bb      	adds	r3, r7, r2
 8001f28:	2100      	movs	r1, #0
 8001f2a:	5e5b      	ldrsh	r3, [r3, r1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 8001f30:	18bb      	adds	r3, r7, r2
 8001f32:	2200      	movs	r2, #0
 8001f34:	5e9b      	ldrsh	r3, [r3, r2]
 8001f36:	e053      	b.n	8001fe0 <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001f38:	2356      	movs	r3, #86	; 0x56
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	2354      	movs	r3, #84	; 0x54
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	e041      	b.n	8001fce <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001f4a:	2156      	movs	r1, #86	; 0x56
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f52:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f5c:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	001a      	movs	r2, r3
 8001f62:	2102      	movs	r1, #2
 8001f64:	f7ff ff15 	bl	8001d92 <sensirion_common_check_crc>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	214a      	movs	r1, #74	; 0x4a
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 8001f72:	000a      	movs	r2, r1
 8001f74:	18bb      	adds	r3, r7, r2
 8001f76:	2100      	movs	r1, #0
 8001f78:	5e5b      	ldrsh	r3, [r3, r1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 8001f7e:	18bb      	adds	r3, r7, r2
 8001f80:	2200      	movs	r2, #0
 8001f82:	5e9b      	ldrsh	r3, [r3, r2]
 8001f84:	e02c      	b.n	8001fe0 <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8001f86:	2456      	movs	r4, #86	; 0x56
 8001f88:	193b      	adds	r3, r7, r4
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f8e:	18d2      	adds	r2, r2, r3
 8001f90:	2554      	movs	r5, #84	; 0x54
 8001f92:	197b      	adds	r3, r7, r5
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	1979      	adds	r1, r7, r5
 8001f98:	1c58      	adds	r0, r3, #1
 8001f9a:	8008      	strh	r0, [r1, #0]
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	185b      	adds	r3, r3, r1
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8001fa6:	193b      	adds	r3, r7, r4
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fae:	18d2      	adds	r2, r2, r3
 8001fb0:	197b      	adds	r3, r7, r5
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	1979      	adds	r1, r7, r5
 8001fb6:	1c58      	adds	r0, r3, #1
 8001fb8:	8008      	strh	r0, [r1, #0]
 8001fba:	0019      	movs	r1, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	185b      	adds	r3, r3, r1
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001fc4:	193b      	adds	r3, r7, r4
 8001fc6:	193a      	adds	r2, r7, r4
 8001fc8:	8812      	ldrh	r2, [r2, #0]
 8001fca:	3203      	adds	r2, #3
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	2356      	movs	r3, #86	; 0x56
 8001fd0:	18fa      	adds	r2, r7, r3
 8001fd2:	2352      	movs	r3, #82	; 0x52
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	8812      	ldrh	r2, [r2, #0]
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3b5      	bcc.n	8001f4a <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b016      	add	sp, #88	; 0x58
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6039      	str	r1, [r7, #0]
 8001ff0:	0011      	movs	r1, r2
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	1c02      	adds	r2, r0, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	1c0a      	adds	r2, r1, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8001ffe:	250c      	movs	r5, #12
 8002000:	197c      	adds	r4, r7, r5
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff ff66 	bl	8001ede <sensirion_i2c_read_words_as_bytes>
 8002012:	0003      	movs	r3, r0
 8002014:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 8002016:	197b      	adds	r3, r7, r5
 8002018:	2200      	movs	r2, #0
 800201a:	5e9b      	ldrsh	r3, [r3, r2]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <sensirion_i2c_read_words+0x40>
        return ret;
 8002020:	197b      	adds	r3, r7, r5
 8002022:	2200      	movs	r2, #0
 8002024:	5e9b      	ldrsh	r3, [r3, r2]
 8002026:	e02a      	b.n	800207e <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 8002028:	230f      	movs	r3, #15
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e01c      	b.n	800206c <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 8002032:	200f      	movs	r0, #15
 8002034:	183b      	adds	r3, r7, r0
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21a      	sxth	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3301      	adds	r3, #1
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b21b      	sxth	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b219      	sxth	r1, r3
 8002054:	183b      	adds	r3, r7, r0
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	b28a      	uxth	r2, r1
 8002060:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8002062:	183b      	adds	r3, r7, r0
 8002064:	183a      	adds	r2, r7, r0
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	3201      	adds	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	230f      	movs	r3, #15
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	1d3a      	adds	r2, r7, #4
 8002076:	8812      	ldrh	r2, [r2, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8da      	bhi.n	8002032 <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 800207c:	2300      	movs	r3, #0
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bdb0      	pop	{r4, r5, r7, pc}

08002086 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8002086:	b590      	push	{r4, r7, lr}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	0002      	movs	r2, r0
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	1c0a      	adds	r2, r1, #0
 8002096:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	8819      	ldrh	r1, [r3, #0]
 800209c:	240c      	movs	r4, #12
 800209e:	1938      	adds	r0, r7, r4
 80020a0:	2300      	movs	r3, #0
 80020a2:	2200      	movs	r2, #0
 80020a4:	f7ff fe96 	bl	8001dd4 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80020a8:	1939      	adds	r1, r7, r4
 80020aa:	1dfb      	adds	r3, r7, #7
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2202      	movs	r2, #2
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 f853 	bl	800215c <sensirion_i2c_write>
 80020b6:	0003      	movs	r3, r0
 80020b8:	b21b      	sxth	r3, r3
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b005      	add	sp, #20
 80020c0:	bd90      	pop	{r4, r7, pc}
	...

080020c4 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <sensirion_i2c_init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <sensirion_i2c_init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
   // hi2c1.Init.ClockSpeed = 100000;
   // hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <sensirion_i2c_init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <sensirion_i2c_init+0x4c>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <sensirion_i2c_init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <sensirion_i2c_init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <sensirion_i2c_init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <sensirion_i2c_init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <sensirion_i2c_init+0x54>)
 80020f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <sensirion_i2c_init+0x54>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0389      	lsls	r1, r1, #14
 80020fc:	430a      	orrs	r2, r1
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <sensirion_i2c_init+0x4c>)
 8002102:	0018      	movs	r0, r3
 8002104:	f000 fdc4 	bl	8002c90 <HAL_I2C_Init>
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	20000210 	.word	0x20000210
 8002114:	40005400 	.word	0x40005400
 8002118:	40021000 	.word	0x40021000

0800211c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	af02      	add	r7, sp, #8
 8002122:	6039      	str	r1, [r7, #0]
 8002124:	0011      	movs	r1, r2
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	1c02      	adds	r2, r0, #0
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	1c0a      	adds	r2, r1, #0
 8002130:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	18db      	adds	r3, r3, r3
 800213a:	b299      	uxth	r1, r3
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <sensirion_i2c_read+0x3c>)
 8002144:	2464      	movs	r4, #100	; 0x64
 8002146:	9400      	str	r4, [sp, #0]
 8002148:	f000 ff40 	bl	8002fcc <HAL_I2C_Master_Receive>
 800214c:	0003      	movs	r3, r0
 800214e:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b003      	add	sp, #12
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	20000210 	.word	0x20000210

0800215c <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af02      	add	r7, sp, #8
 8002162:	6039      	str	r1, [r7, #0]
 8002164:	0011      	movs	r1, r2
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	1c02      	adds	r2, r0, #0
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	1c0a      	adds	r2, r1, #0
 8002170:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	18db      	adds	r3, r3, r3
 800217a:	b299      	uxth	r1, r3
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <sensirion_i2c_write+0x3c>)
 8002184:	2464      	movs	r4, #100	; 0x64
 8002186:	9400      	str	r4, [sp, #0]
 8002188:	f000 fe18 	bl	8002dbc <HAL_I2C_Master_Transmit>
 800218c:	0003      	movs	r3, r0
 800218e:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b003      	add	sp, #12
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	20000210 	.word	0x20000210

0800219c <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	22fa      	movs	r2, #250	; 0xfa
 80021a8:	0091      	lsls	r1, r2, #2
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7fd ffbe 	bl	800012c <__udivsi3>
 80021b0:	0003      	movs	r3, r0
 80021b2:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	22fa      	movs	r2, #250	; 0xfa
 80021b8:	0091      	lsls	r1, r2, #2
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fe f83c 	bl	8000238 <__aeabi_uidivmod>
 80021c0:	1e0b      	subs	r3, r1, #0
 80021c2:	d002      	beq.n	80021ca <sensirion_sleep_usec+0x2e>
        msec++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 80021ca:	f000 fafd 	bl	80027c8 <HAL_GetHalVersion>
 80021ce:	0003      	movs	r3, r0
 80021d0:	4a06      	ldr	r2, [pc, #24]	; (80021ec <sensirion_sleep_usec+0x50>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d802      	bhi.n	80021dc <sensirion_sleep_usec+0x40>
        msec++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 face 	bl	8002780 <HAL_Delay>
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	010100ff 	.word	0x010100ff

080021f0 <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	250f      	movs	r5, #15
 80021fc:	197b      	adds	r3, r7, r5
 80021fe:	1c02      	adds	r2, r0, #0
 8002200:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 8002202:	2616      	movs	r6, #22
 8002204:	19bc      	adds	r4, r7, r6
 8002206:	197b      	adds	r3, r7, r5
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	0018      	movs	r0, r3
 800220c:	f000 f820 	bl	8002250 <sht3x_measure>
 8002210:	0003      	movs	r3, r0
 8002212:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 8002214:	19bb      	adds	r3, r7, r6
 8002216:	2200      	movs	r2, #0
 8002218:	5e9b      	ldrsh	r3, [r3, r2]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <sht3x_measure_blocking_read+0x5c>)
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ffbb 	bl	800219c <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 8002226:	19bc      	adds	r4, r7, r6
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	197b      	adds	r3, r7, r5
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 f823 	bl	800227c <sht3x_read>
 8002236:	0003      	movs	r3, r0
 8002238:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 800223a:	2316      	movs	r3, #22
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	2200      	movs	r2, #0
 8002240:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b007      	add	sp, #28
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	00003a98 	.word	0x00003a98

08002250 <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	0002      	movs	r2, r0
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <sht3x_measure+0x28>)
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	0011      	movs	r1, r2
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff ff0d 	bl	8002086 <sensirion_i2c_write_cmd>
 800226c:	0003      	movs	r3, r0
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	20000180 	.word	0x20000180

0800227c <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	260f      	movs	r6, #15
 8002288:	19bb      	adds	r3, r7, r6
 800228a:	1c02      	adds	r2, r0, #0
 800228c:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 800228e:	2316      	movs	r3, #22
 8002290:	18fc      	adds	r4, r7, r3
 8002292:	2510      	movs	r5, #16
 8002294:	1979      	adds	r1, r7, r5
 8002296:	19bb      	adds	r3, r7, r6
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2202      	movs	r2, #2
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff fea3 	bl	8001fe8 <sensirion_i2c_read_words>
 80022a2:	0003      	movs	r3, r0
 80022a4:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	0011      	movs	r1, r2
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 f810 	bl	80022d4 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 80022b4:	197b      	adds	r3, r7, r5
 80022b6:	885b      	ldrh	r3, [r3, #2]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	0011      	movs	r1, r2
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f821 	bl	8002304 <tick_to_humidity>

    return ret;
 80022c2:	2316      	movs	r3, #22
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2200      	movs	r2, #0
 80022c8:	5e9b      	ldrsh	r3, [r3, r2]
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b007      	add	sp, #28
 80022d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022d4 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	1dbb      	adds	r3, r7, #6
 80022e0:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 80022e2:	1dbb      	adds	r3, r7, #6
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <tick_to_temperature+0x28>)
 80022e8:	4353      	muls	r3, r2
 80022ea:	135b      	asrs	r3, r3, #13
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <tick_to_temperature+0x2c>)
 80022ee:	189a      	adds	r2, r3, r2
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	00005573 	.word	0x00005573
 8002300:	ffff5038 	.word	0xffff5038

08002304 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	0002      	movs	r2, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8002312:	1dbb      	adds	r3, r7, #6
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <tick_to_humidity+0x24>)
 8002318:	4353      	muls	r3, r2
 800231a:	135a      	asrs	r2, r3, #13
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}
 8002328:	000030d4 	.word	0x000030d4

0800232c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_MspInit+0x24>)
 8002332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_MspInit+0x24>)
 8002336:	2101      	movs	r1, #1
 8002338:	430a      	orrs	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_MspInit+0x24>)
 800233e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_MspInit+0x24>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0549      	lsls	r1, r1, #21
 8002346:	430a      	orrs	r2, r1
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	240c      	movs	r4, #12
 800235e:	193b      	adds	r3, r7, r4
 8002360:	0018      	movs	r0, r3
 8002362:	2314      	movs	r3, #20
 8002364:	001a      	movs	r2, r3
 8002366:	2100      	movs	r1, #0
 8002368:	f002 fddf 	bl	8004f2a <memset>
  if(hi2c->Instance==I2C1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <HAL_I2C_MspInit+0x7c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d128      	bne.n	80023c8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_I2C_MspInit+0x80>)
 8002378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_I2C_MspInit+0x80>)
 800237c:	2102      	movs	r1, #2
 800237e:	430a      	orrs	r2, r1
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_I2C_MspInit+0x80>)
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	0021      	movs	r1, r4
 8002390:	187b      	adds	r3, r7, r1
 8002392:	22c0      	movs	r2, #192	; 0xc0
 8002394:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2212      	movs	r2, #18
 800239a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2203      	movs	r2, #3
 80023a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2201      	movs	r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_I2C_MspInit+0x84>)
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f000 fac3 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_I2C_MspInit+0x80>)
 80023bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_I2C_MspInit+0x80>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0389      	lsls	r1, r1, #14
 80023c4:	430a      	orrs	r2, r1
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b009      	add	sp, #36	; 0x24
 80023ce:	bd90      	pop	{r4, r7, pc}
 80023d0:	40005400 	.word	0x40005400
 80023d4:	40021000 	.word	0x40021000
 80023d8:	50000400 	.word	0x50000400

080023dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b08b      	sub	sp, #44	; 0x2c
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	2414      	movs	r4, #20
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	0018      	movs	r0, r3
 80023ea:	2314      	movs	r3, #20
 80023ec:	001a      	movs	r2, r3
 80023ee:	2100      	movs	r1, #0
 80023f0:	f002 fd9b 	bl	8004f2a <memset>
  if(huart->Instance==LPUART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_UART_MspInit+0xc0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d14a      	bne.n	8002494 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 8002400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	02c9      	lsls	r1, r1, #11
 8002408:	430a      	orrs	r2, r1
 800240a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 8002412:	2104      	movs	r1, #4
 8002414:	430a      	orrs	r2, r1
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	2204      	movs	r2, #4
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 800242a:	2102      	movs	r1, #2
 800242c:	430a      	orrs	r2, r1
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_UART_MspInit+0xc4>)
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2202      	movs	r2, #2
 8002436:	4013      	ands	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800243c:	193b      	adds	r3, r7, r4
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	193b      	adds	r3, r7, r4
 8002444:	2202      	movs	r2, #2
 8002446:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	193b      	adds	r3, r7, r4
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	193b      	adds	r3, r7, r4
 8002450:	2203      	movs	r2, #3
 8002452:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002454:	193b      	adds	r3, r7, r4
 8002456:	2206      	movs	r2, #6
 8002458:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245a:	193b      	adds	r3, r7, r4
 800245c:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <HAL_UART_MspInit+0xc8>)
 800245e:	0019      	movs	r1, r3
 8002460:	0010      	movs	r0, r2
 8002462:	f000 fa6d 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002466:	0021      	movs	r1, r4
 8002468:	187b      	adds	r3, r7, r1
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	00d2      	lsls	r2, r2, #3
 800246e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	187b      	adds	r3, r7, r1
 8002472:	2202      	movs	r2, #2
 8002474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	187b      	adds	r3, r7, r1
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	187b      	adds	r3, r7, r1
 800247e:	2203      	movs	r2, #3
 8002480:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2206      	movs	r2, #6
 8002486:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	187b      	adds	r3, r7, r1
 800248a:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_UART_MspInit+0xcc>)
 800248c:	0019      	movs	r1, r3
 800248e:	0010      	movs	r0, r2
 8002490:	f000 fa56 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b00b      	add	sp, #44	; 0x2c
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	40004800 	.word	0x40004800
 80024a0:	40021000 	.word	0x40021000
 80024a4:	50000800 	.word	0x50000800
 80024a8:	50000400 	.word	0x50000400

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <NMI_Handler+0x4>

080024b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <HardFault_Handler+0x4>

080024b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d0:	f000 f93a 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e00a      	b.n	8002502 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ec:	e000      	b.n	80024f0 <_read+0x16>
 80024ee:	bf00      	nop
 80024f0:	0001      	movs	r1, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	60ba      	str	r2, [r7, #8]
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	dbf0      	blt.n	80024ec <_read+0x12>
	}

return len;
 800250a:	687b      	ldr	r3, [r7, #4]
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b006      	add	sp, #24
 8002512:	bd80      	pop	{r7, pc}

08002514 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e009      	b.n	800253a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	60ba      	str	r2, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	e000      	b.n	8002534 <_write+0x20>
 8002532:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	dbf1      	blt.n	8002526 <_write+0x12>
	}
	return len;
 8002542:	687b      	ldr	r3, [r7, #4]
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b006      	add	sp, #24
 800254a:	bd80      	pop	{r7, pc}

0800254c <_close>:

int _close(int file)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	return -1;
 8002554:	2301      	movs	r3, #1
 8002556:	425b      	negs	r3, r3
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	0192      	lsls	r2, r2, #6
 8002570:	605a      	str	r2, [r3, #4]
	return 0;
 8002572:	2300      	movs	r3, #0
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}

0800257c <_isatty>:

int _isatty(int file)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	return 1;
 8002584:	2301      	movs	r3, #1
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}

0800258e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
	return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ac:	4a14      	ldr	r2, [pc, #80]	; (8002600 <_sbrk+0x5c>)
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <_sbrk+0x60>)
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <_sbrk+0x64>)
 80025c2:	4a12      	ldr	r2, [pc, #72]	; (800260c <_sbrk+0x68>)
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d207      	bcs.n	80025e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d4:	f002 fc76 	bl	8004ec4 <__errno>
 80025d8:	0003      	movs	r3, r0
 80025da:	220c      	movs	r2, #12
 80025dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025de:	2301      	movs	r3, #1
 80025e0:	425b      	negs	r3, r3
 80025e2:	e009      	b.n	80025f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	18d2      	adds	r2, r2, r3
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <_sbrk+0x64>)
 80025f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20002000 	.word	0x20002000
 8002604:	00000400 	.word	0x00000400
 8002608:	2000025c 	.word	0x2000025c
 800260c:	20000358 	.word	0x20000358

08002610 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800261c:	4813      	ldr	r0, [pc, #76]	; (800266c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800261e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002620:	4813      	ldr	r0, [pc, #76]	; (8002670 <LoopForever+0x6>)
    LDR R1, [R0]
 8002622:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002624:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <LoopForever+0xa>)
    CMP R1, R2
 8002628:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800262a:	d105      	bne.n	8002638 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800262c:	4812      	ldr	r0, [pc, #72]	; (8002678 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800262e:	4913      	ldr	r1, [pc, #76]	; (800267c <LoopForever+0x12>)
    STR R1, [R0]
 8002630:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002632:	4813      	ldr	r0, [pc, #76]	; (8002680 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002634:	4913      	ldr	r1, [pc, #76]	; (8002684 <LoopForever+0x1a>)
    STR R1, [R0]
 8002636:	6001      	str	r1, [r0, #0]

08002638 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	4813      	ldr	r0, [pc, #76]	; (8002688 <LoopForever+0x1e>)
  ldr r1, =_edata
 800263a:	4914      	ldr	r1, [pc, #80]	; (800268c <LoopForever+0x22>)
  ldr r2, =_sidata
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <LoopForever+0x26>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002650:	4c11      	ldr	r4, [pc, #68]	; (8002698 <LoopForever+0x2e>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800265e:	f7ff ffd7 	bl	8002610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002662:	f002 fc35 	bl	8004ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7fe fe09 	bl	800127c <main>

0800266a <LoopForever>:

LoopForever:
    b LoopForever
 800266a:	e7fe      	b.n	800266a <LoopForever>
   ldr   r0, =_estack
 800266c:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002670:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002674:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002678:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800267c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002680:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002684:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800268c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002690:	08006260 	.word	0x08006260
  ldr r2, =_sbss
 8002694:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002698:	20000358 	.word	0x20000358

0800269c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC1_IRQHandler>
	...

080026a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_Init+0x3c>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_Init+0x3c>)
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f811 	bl	80026e0 <HAL_InitTick>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d003      	beq.n	80026ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e001      	b.n	80026ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ca:	f7ff fe2f 	bl	800232c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b002      	add	sp, #8
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	40022000 	.word	0x40022000

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_InitTick+0x5c>)
 80026ea:	681c      	ldr	r4, [r3, #0]
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_InitTick+0x60>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	0019      	movs	r1, r3
 80026f2:	23fa      	movs	r3, #250	; 0xfa
 80026f4:	0098      	lsls	r0, r3, #2
 80026f6:	f7fd fd19 	bl	800012c <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	0019      	movs	r1, r3
 80026fe:	0020      	movs	r0, r4
 8002700:	f7fd fd14 	bl	800012c <__udivsi3>
 8002704:	0003      	movs	r3, r0
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f90d 	bl	8002926 <HAL_SYSTICK_Config>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e00f      	b.n	8002734 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d80b      	bhi.n	8002732 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	2301      	movs	r3, #1
 800271e:	425b      	negs	r3, r3
 8002720:	2200      	movs	r2, #0
 8002722:	0018      	movs	r0, r3
 8002724:	f000 f8ea 	bl	80028fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_InitTick+0x64>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b003      	add	sp, #12
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	20000184 	.word	0x20000184
 8002740:	2000018c 	.word	0x2000018c
 8002744:	20000188 	.word	0x20000188

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_IncTick+0x1c>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	001a      	movs	r2, r3
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_IncTick+0x20>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	18d2      	adds	r2, r2, r3
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_IncTick+0x20>)
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	2000018c 	.word	0x2000018c
 8002768:	20000344 	.word	0x20000344

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b02      	ldr	r3, [pc, #8]	; (800277c <HAL_GetTick+0x10>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	20000344 	.word	0x20000344

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff fff0 	bl	800276c <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3301      	adds	r3, #1
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_Delay+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	001a      	movs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	f7ff ffe0 	bl	800276c <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b004      	add	sp, #16
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	2000018c 	.word	0x2000018c

080027c8 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 80027cc:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <HAL_GetHalVersion+0xc>)
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	010a0500 	.word	0x010a0500

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	0002      	movs	r2, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b7f      	cmp	r3, #127	; 0x7f
 80027ec:	d828      	bhi.n	8002840 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ee:	4a2f      	ldr	r2, [pc, #188]	; (80028ac <__NVIC_SetPriority+0xd4>)
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	33c0      	adds	r3, #192	; 0xc0
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	589b      	ldr	r3, [r3, r2]
 80027fe:	1dfa      	adds	r2, r7, #7
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	0011      	movs	r1, r2
 8002804:	2203      	movs	r2, #3
 8002806:	400a      	ands	r2, r1
 8002808:	00d2      	lsls	r2, r2, #3
 800280a:	21ff      	movs	r1, #255	; 0xff
 800280c:	4091      	lsls	r1, r2
 800280e:	000a      	movs	r2, r1
 8002810:	43d2      	mvns	r2, r2
 8002812:	401a      	ands	r2, r3
 8002814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	019b      	lsls	r3, r3, #6
 800281a:	22ff      	movs	r2, #255	; 0xff
 800281c:	401a      	ands	r2, r3
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	0018      	movs	r0, r3
 8002824:	2303      	movs	r3, #3
 8002826:	4003      	ands	r3, r0
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800282c:	481f      	ldr	r0, [pc, #124]	; (80028ac <__NVIC_SetPriority+0xd4>)
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b25b      	sxtb	r3, r3
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	430a      	orrs	r2, r1
 8002838:	33c0      	adds	r3, #192	; 0xc0
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800283e:	e031      	b.n	80028a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002840:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <__NVIC_SetPriority+0xd8>)
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	0019      	movs	r1, r3
 8002848:	230f      	movs	r3, #15
 800284a:	400b      	ands	r3, r1
 800284c:	3b08      	subs	r3, #8
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3306      	adds	r3, #6
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	18d3      	adds	r3, r2, r3
 8002856:	3304      	adds	r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	1dfa      	adds	r2, r7, #7
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	0011      	movs	r1, r2
 8002860:	2203      	movs	r2, #3
 8002862:	400a      	ands	r2, r1
 8002864:	00d2      	lsls	r2, r2, #3
 8002866:	21ff      	movs	r1, #255	; 0xff
 8002868:	4091      	lsls	r1, r2
 800286a:	000a      	movs	r2, r1
 800286c:	43d2      	mvns	r2, r2
 800286e:	401a      	ands	r2, r3
 8002870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	22ff      	movs	r2, #255	; 0xff
 8002878:	401a      	ands	r2, r3
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	0018      	movs	r0, r3
 8002880:	2303      	movs	r3, #3
 8002882:	4003      	ands	r3, r0
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002888:	4809      	ldr	r0, [pc, #36]	; (80028b0 <__NVIC_SetPriority+0xd8>)
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	001c      	movs	r4, r3
 8002890:	230f      	movs	r3, #15
 8002892:	4023      	ands	r3, r4
 8002894:	3b08      	subs	r3, #8
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	430a      	orrs	r2, r1
 800289a:	3306      	adds	r3, #6
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	18c3      	adds	r3, r0, r3
 80028a0:	3304      	adds	r3, #4
 80028a2:	601a      	str	r2, [r3, #0]
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b003      	add	sp, #12
 80028aa:	bd90      	pop	{r4, r7, pc}
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	1e5a      	subs	r2, r3, #1
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	045b      	lsls	r3, r3, #17
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d301      	bcc.n	80028cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c8:	2301      	movs	r3, #1
 80028ca:	e010      	b.n	80028ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <SysTick_Config+0x44>)
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	3a01      	subs	r2, #1
 80028d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d4:	2301      	movs	r3, #1
 80028d6:	425b      	negs	r3, r3
 80028d8:	2103      	movs	r1, #3
 80028da:	0018      	movs	r0, r3
 80028dc:	f7ff ff7c 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x44>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x44>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	210f      	movs	r1, #15
 8002908:	187b      	adds	r3, r7, r1
 800290a:	1c02      	adds	r2, r0, #0
 800290c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	187b      	adds	r3, r7, r1
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b25b      	sxtb	r3, r3
 8002916:	0011      	movs	r1, r2
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff ffbf 	bl	80028b4 <SysTick_Config>
 8002936:	0003      	movs	r3, r0
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002956:	e149      	b.n	8002bec <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4091      	lsls	r1, r2
 8002962:	000a      	movs	r2, r1
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d100      	bne.n	8002970 <HAL_GPIO_Init+0x30>
 800296e:	e13a      	b.n	8002be6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	4013      	ands	r3, r2
 8002978:	2b01      	cmp	r3, #1
 800297a:	d005      	beq.n	8002988 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002984:	2b02      	cmp	r3, #2
 8002986:	d130      	bne.n	80029ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	409a      	lsls	r2, r3
 8002996:	0013      	movs	r3, r2
 8002998:	43da      	mvns	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	409a      	lsls	r2, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029be:	2201      	movs	r2, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	409a      	lsls	r2, r3
 80029c4:	0013      	movs	r3, r2
 80029c6:	43da      	mvns	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	2201      	movs	r2, #1
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2203      	movs	r2, #3
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d017      	beq.n	8002a26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	43da      	mvns	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	0013      	movs	r3, r2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d123      	bne.n	8002a7a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	58d3      	ldr	r3, [r2, r3]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2207      	movs	r2, #7
 8002a44:	4013      	ands	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2107      	movs	r1, #7
 8002a5e:	400b      	ands	r3, r1
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	409a      	lsls	r2, r3
 8002a64:	0013      	movs	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	6939      	ldr	r1, [r7, #16]
 8002a78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	409a      	lsls	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2203      	movs	r2, #3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	0013      	movs	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	23c0      	movs	r3, #192	; 0xc0
 8002ab4:	029b      	lsls	r3, r3, #10
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d100      	bne.n	8002abc <HAL_GPIO_Init+0x17c>
 8002aba:	e094      	b.n	8002be6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abc:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_GPIO_Init+0x2c4>)
 8002abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_GPIO_Init+0x2c4>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac8:	4a4f      	ldr	r2, [pc, #316]	; (8002c08 <HAL_GPIO_Init+0x2c8>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	589b      	ldr	r3, [r3, r2]
 8002ad4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4013      	ands	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	0013      	movs	r3, r2
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	23a0      	movs	r3, #160	; 0xa0
 8002af0:	05db      	lsls	r3, r3, #23
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x1de>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <HAL_GPIO_Init+0x2cc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x1da>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a43      	ldr	r2, [pc, #268]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x1d6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_GPIO_Init+0x2d4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x1d2>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_Init+0x1e0>
 8002b12:	2306      	movs	r3, #6
 8002b14:	e004      	b.n	8002b20 <HAL_GPIO_Init+0x1e0>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_Init+0x1e0>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_GPIO_Init+0x1e0>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	2103      	movs	r1, #3
 8002b24:	400a      	ands	r2, r1
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	4093      	lsls	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b30:	4935      	ldr	r1, [pc, #212]	; (8002c08 <HAL_GPIO_Init+0x2c8>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43da      	mvns	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	025b      	lsls	r3, r3, #9
 8002b56:	4013      	ands	r3, r2
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	4013      	ands	r3, r2
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	035b      	lsls	r3, r3, #13
 8002baa:	4013      	ands	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	039b      	lsls	r3, r3, #14
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002be0:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_GPIO_Init+0x2d8>)
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	40da      	lsrs	r2, r3
 8002bf4:	1e13      	subs	r3, r2, #0
 8002bf6:	d000      	beq.n	8002bfa <HAL_GPIO_Init+0x2ba>
 8002bf8:	e6ae      	b.n	8002958 <HAL_GPIO_Init+0x18>
  }
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b006      	add	sp, #24
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	50000400 	.word	0x50000400
 8002c10:	50000800 	.word	0x50000800
 8002c14:	50001c00 	.word	0x50001c00
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	000a      	movs	r2, r1
 8002c26:	1cbb      	adds	r3, r7, #2
 8002c28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	1cba      	adds	r2, r7, #2
 8002c30:	8812      	ldrh	r2, [r2, #0]
 8002c32:	4013      	ands	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c36:	230f      	movs	r3, #15
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e003      	b.n	8002c48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c40:	230f      	movs	r3, #15
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c48:	230f      	movs	r3, #15
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	781b      	ldrb	r3, [r3, #0]
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b004      	add	sp, #16
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	0008      	movs	r0, r1
 8002c60:	0011      	movs	r1, r2
 8002c62:	1cbb      	adds	r3, r7, #2
 8002c64:	1c02      	adds	r2, r0, #0
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	1c7b      	adds	r3, r7, #1
 8002c6a:	1c0a      	adds	r2, r1, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6e:	1c7b      	adds	r3, r7, #1
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c76:	1cbb      	adds	r3, r7, #2
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c7e:	e003      	b.n	8002c88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c80:	1cbb      	adds	r3, r7, #2
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e082      	b.n	8002da8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2241      	movs	r2, #65	; 0x41
 8002ca6:	5c9b      	ldrb	r3, [r3, r2]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff fb4b 	bl	8002354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2241      	movs	r2, #65	; 0x41
 8002cc2:	2124      	movs	r1, #36	; 0x24
 8002cc4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	438a      	bics	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4934      	ldr	r1, [pc, #208]	; (8002db0 <HAL_I2C_Init+0x120>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4931      	ldr	r1, [pc, #196]	; (8002db4 <HAL_I2C_Init+0x124>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0209      	lsls	r1, r1, #8
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e007      	b.n	8002d1e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2184      	movs	r1, #132	; 0x84
 8002d18:	0209      	lsls	r1, r1, #8
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d104      	bne.n	8002d30 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	491f      	ldr	r1, [pc, #124]	; (8002db8 <HAL_I2C_Init+0x128>)
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	491a      	ldr	r1, [pc, #104]	; (8002db4 <HAL_I2C_Init+0x124>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69d9      	ldr	r1, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2241      	movs	r2, #65	; 0x41
 8002d94:	2120      	movs	r1, #32
 8002d96:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2242      	movs	r2, #66	; 0x42
 8002da2:	2100      	movs	r1, #0
 8002da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	f0ffffff 	.word	0xf0ffffff
 8002db4:	ffff7fff 	.word	0xffff7fff
 8002db8:	02008000 	.word	0x02008000

08002dbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	0008      	movs	r0, r1
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	0019      	movs	r1, r3
 8002dca:	230a      	movs	r3, #10
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	1c02      	adds	r2, r0, #0
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	1c0a      	adds	r2, r1, #0
 8002dd8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2241      	movs	r2, #65	; 0x41
 8002dde:	5c9b      	ldrb	r3, [r3, r2]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d000      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0x2c>
 8002de6:	e0e7      	b.n	8002fb8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Master_Transmit+0x3a>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0e1      	b.n	8002fba <HAL_I2C_Master_Transmit+0x1fe>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2240      	movs	r2, #64	; 0x40
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dfe:	f7ff fcb5 	bl	800276c <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	0219      	lsls	r1, r3, #8
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2319      	movs	r3, #25
 8002e12:	2201      	movs	r2, #1
 8002e14:	f000 fa04 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0cc      	b.n	8002fba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2241      	movs	r2, #65	; 0x41
 8002e24:	2121      	movs	r1, #33	; 0x21
 8002e26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2242      	movs	r2, #66	; 0x42
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2208      	movs	r2, #8
 8002e40:	18ba      	adds	r2, r7, r2
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2bff      	cmp	r3, #255	; 0xff
 8002e54:	d911      	bls.n	8002e7a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	045c      	lsls	r4, r3, #17
 8002e66:	230a      	movs	r3, #10
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	8819      	ldrh	r1, [r3, #0]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <HAL_I2C_Master_Transmit+0x208>)
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	0023      	movs	r3, r4
 8002e74:	f000 fb74 	bl	8003560 <I2C_TransferConfig>
 8002e78:	e075      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	049c      	lsls	r4, r3, #18
 8002e8e:	230a      	movs	r3, #10
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	8819      	ldrh	r1, [r3, #0]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_I2C_Master_Transmit+0x208>)
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	0023      	movs	r3, r4
 8002e9c:	f000 fb60 	bl	8003560 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ea0:	e061      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f9f8 	bl	800329e <I2C_WaitOnTXISFlagUntilTimeout>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e081      	b.n	8002fba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d03a      	beq.n	8002f66 <HAL_I2C_Master_Transmit+0x1aa>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d136      	bne.n	8002f66 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	0013      	movs	r3, r2
 8002f02:	2200      	movs	r2, #0
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	f000 f98b 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e053      	b.n	8002fba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2bff      	cmp	r3, #255	; 0xff
 8002f1a:	d911      	bls.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	045c      	lsls	r4, r3, #17
 8002f2c:	230a      	movs	r3, #10
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	8819      	ldrh	r1, [r3, #0]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	0023      	movs	r3, r4
 8002f3a:	f000 fb11 	bl	8003560 <I2C_TransferConfig>
 8002f3e:	e012      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	049c      	lsls	r4, r3, #18
 8002f54:	230a      	movs	r3, #10
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	8819      	ldrh	r1, [r3, #0]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	0023      	movs	r3, r4
 8002f62:	f000 fafd 	bl	8003560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d198      	bne.n	8002ea2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f9d0 	bl	800331c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e01a      	b.n	8002fba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <HAL_I2C_Master_Transmit+0x20c>)
 8002f98:	400a      	ands	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2241      	movs	r2, #65	; 0x41
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2242      	movs	r2, #66	; 0x42
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2240      	movs	r2, #64	; 0x40
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b007      	add	sp, #28
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	80002000 	.word	0x80002000
 8002fc8:	fe00e800 	.word	0xfe00e800

08002fcc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	0008      	movs	r0, r1
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	0019      	movs	r1, r3
 8002fda:	230a      	movs	r3, #10
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	1c02      	adds	r2, r0, #0
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	1c0a      	adds	r2, r1, #0
 8002fe8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2241      	movs	r2, #65	; 0x41
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d000      	beq.n	8002ff8 <HAL_I2C_Master_Receive+0x2c>
 8002ff6:	e0e8      	b.n	80031ca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	5c9b      	ldrb	r3, [r3, r2]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Master_Receive+0x3a>
 8003002:	2302      	movs	r3, #2
 8003004:	e0e2      	b.n	80031cc <HAL_I2C_Master_Receive+0x200>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2240      	movs	r2, #64	; 0x40
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800300e:	f7ff fbad 	bl	800276c <HAL_GetTick>
 8003012:	0003      	movs	r3, r0
 8003014:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	0219      	lsls	r1, r3, #8
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2319      	movs	r3, #25
 8003022:	2201      	movs	r2, #1
 8003024:	f000 f8fc 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8003028:	1e03      	subs	r3, r0, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0cd      	b.n	80031cc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2241      	movs	r2, #65	; 0x41
 8003034:	2122      	movs	r1, #34	; 0x22
 8003036:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2242      	movs	r2, #66	; 0x42
 800303c:	2110      	movs	r1, #16
 800303e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2208      	movs	r2, #8
 8003050:	18ba      	adds	r2, r7, r2
 8003052:	8812      	ldrh	r2, [r2, #0]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d911      	bls.n	800308a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	22ff      	movs	r2, #255	; 0xff
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	045c      	lsls	r4, r3, #17
 8003076:	230a      	movs	r3, #10
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	8819      	ldrh	r1, [r3, #0]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_I2C_Master_Receive+0x208>)
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	0023      	movs	r3, r4
 8003084:	f000 fa6c 	bl	8003560 <I2C_TransferConfig>
 8003088:	e076      	b.n	8003178 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	b2da      	uxtb	r2, r3
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	049c      	lsls	r4, r3, #18
 800309e:	230a      	movs	r3, #10
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	8819      	ldrh	r1, [r3, #0]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_I2C_Master_Receive+0x208>)
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	0023      	movs	r3, r4
 80030ac:	f000 fa58 	bl	8003560 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80030b0:	e062      	b.n	8003178 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f96b 	bl	8003394 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e082      	b.n	80031cc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03a      	beq.n	8003178 <HAL_I2C_Master_Receive+0x1ac>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	2b00      	cmp	r3, #0
 8003108:	d136      	bne.n	8003178 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	0013      	movs	r3, r2
 8003114:	2200      	movs	r2, #0
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	f000 f882 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 800311c:	1e03      	subs	r3, r0, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e053      	b.n	80031cc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	d911      	bls.n	8003152 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	b2da      	uxtb	r2, r3
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	045c      	lsls	r4, r3, #17
 800313e:	230a      	movs	r3, #10
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	8819      	ldrh	r1, [r3, #0]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	0023      	movs	r3, r4
 800314c:	f000 fa08 	bl	8003560 <I2C_TransferConfig>
 8003150:	e012      	b.n	8003178 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	b2da      	uxtb	r2, r3
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	049c      	lsls	r4, r3, #18
 8003166:	230a      	movs	r3, #10
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	8819      	ldrh	r1, [r3, #0]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	0023      	movs	r3, r4
 8003174:	f000 f9f4 	bl	8003560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d197      	bne.n	80030b2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f8c7 	bl	800331c <I2C_WaitOnSTOPFlagUntilTimeout>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e01a      	b.n	80031cc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2220      	movs	r2, #32
 800319c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	490b      	ldr	r1, [pc, #44]	; (80031d8 <HAL_I2C_Master_Receive+0x20c>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2241      	movs	r2, #65	; 0x41
 80031b2:	2120      	movs	r1, #32
 80031b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2242      	movs	r2, #66	; 0x42
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b007      	add	sp, #28
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	80002400 	.word	0x80002400
 80031d8:	fe00e800 	.word	0xfe00e800

080031dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d103      	bne.n	80031fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2200      	movs	r2, #0
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	2b01      	cmp	r3, #1
 8003206:	d007      	beq.n	8003218 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	430a      	orrs	r2, r1
 8003216:	619a      	str	r2, [r3, #24]
  }
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	e021      	b.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	d01e      	beq.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7ff fa98 	bl	800276c <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d113      	bne.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	2220      	movs	r2, #32
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2241      	movs	r2, #65	; 0x41
 800325e:	2120      	movs	r1, #32
 8003260:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2242      	movs	r2, #66	; 0x42
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	2100      	movs	r1, #0
 8003270:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e00f      	b.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	425a      	negs	r2, r3
 8003286:	4153      	adcs	r3, r2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	001a      	movs	r2, r3
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d0ce      	beq.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b004      	add	sp, #16
 800329c:	bd80      	pop	{r7, pc}

0800329e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032aa:	e02b      	b.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f8da 	bl	800346c <I2C_IsAcknowledgeFailed>
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e029      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3301      	adds	r3, #1
 80032c4:	d01e      	beq.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7ff fa51 	bl	800276c <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d113      	bne.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	2220      	movs	r2, #32
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2241      	movs	r2, #65	; 0x41
 80032ec:	2120      	movs	r1, #32
 80032ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2242      	movs	r2, #66	; 0x42
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	2100      	movs	r1, #0
 80032fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2202      	movs	r2, #2
 800330c:	4013      	ands	r3, r2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d1cc      	bne.n	80032ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b004      	add	sp, #16
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003328:	e028      	b.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f89b 	bl	800346c <I2C_IsAcknowledgeFailed>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e026      	b.n	800338c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7ff fa15 	bl	800276c <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d113      	bne.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	2220      	movs	r2, #32
 800335a:	431a      	orrs	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2241      	movs	r2, #65	; 0x41
 8003364:	2120      	movs	r1, #32
 8003366:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2242      	movs	r2, #66	; 0x42
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2240      	movs	r2, #64	; 0x40
 8003374:	2100      	movs	r1, #0
 8003376:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2220      	movs	r2, #32
 8003384:	4013      	ands	r3, r2
 8003386:	2b20      	cmp	r3, #32
 8003388:	d1cf      	bne.n	800332a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b004      	add	sp, #16
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a0:	e055      	b.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f000 f85f 	bl	800346c <I2C_IsAcknowledgeFailed>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e053      	b.n	800345e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2220      	movs	r2, #32
 80033be:	4013      	ands	r3, r2
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d129      	bne.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2204      	movs	r2, #4
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d105      	bne.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e03f      	b.n	800345e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2220      	movs	r2, #32
 80033e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	491d      	ldr	r1, [pc, #116]	; (8003468 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2241      	movs	r2, #65	; 0x41
 8003400:	2120      	movs	r1, #32
 8003402:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2242      	movs	r2, #66	; 0x42
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	2100      	movs	r1, #0
 8003412:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e022      	b.n	800345e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7ff f9a8 	bl	800276c <HAL_GetTick>
 800341c:	0002      	movs	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	2220      	movs	r2, #32
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2241      	movs	r2, #65	; 0x41
 800343e:	2120      	movs	r1, #32
 8003440:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e007      	b.n	800345e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2204      	movs	r2, #4
 8003456:	4013      	ands	r3, r2
 8003458:	2b04      	cmp	r3, #4
 800345a:	d1a2      	bne.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	fe00e800 	.word	0xfe00e800

0800346c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2210      	movs	r2, #16
 8003480:	4013      	ands	r3, r2
 8003482:	2b10      	cmp	r3, #16
 8003484:	d164      	bne.n	8003550 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	049b      	lsls	r3, r3, #18
 8003490:	401a      	ands	r2, r3
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	049b      	lsls	r3, r3, #18
 8003496:	429a      	cmp	r2, r3
 8003498:	d02b      	beq.n	80034f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	01c9      	lsls	r1, r1, #7
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ac:	e021      	b.n	80034f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3301      	adds	r3, #1
 80034b2:	d01e      	beq.n	80034f2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7ff f95a 	bl	800276c <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d302      	bcc.n	80034ca <I2C_IsAcknowledgeFailed+0x5e>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d113      	bne.n	80034f2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	2220      	movs	r2, #32
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2241      	movs	r2, #65	; 0x41
 80034da:	2120      	movs	r1, #32
 80034dc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2242      	movs	r2, #66	; 0x42
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2240      	movs	r2, #64	; 0x40
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e02f      	b.n	8003552 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2220      	movs	r2, #32
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d1d6      	bne.n	80034ae <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2220      	movs	r2, #32
 800350e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	0018      	movs	r0, r3
 8003514:	f7ff fe62 	bl	80031dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	490e      	ldr	r1, [pc, #56]	; (800355c <I2C_IsAcknowledgeFailed+0xf0>)
 8003524:	400a      	ands	r2, r1
 8003526:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	2204      	movs	r2, #4
 800352e:	431a      	orrs	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2241      	movs	r2, #65	; 0x41
 8003538:	2120      	movs	r1, #32
 800353a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2242      	movs	r2, #66	; 0x42
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2240      	movs	r2, #64	; 0x40
 8003548:	2100      	movs	r1, #0
 800354a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b004      	add	sp, #16
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	fe00e800 	.word	0xfe00e800

08003560 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	0008      	movs	r0, r1
 800356a:	0011      	movs	r1, r2
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	240a      	movs	r4, #10
 8003570:	193b      	adds	r3, r7, r4
 8003572:	1c02      	adds	r2, r0, #0
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	2009      	movs	r0, #9
 8003578:	183b      	adds	r3, r7, r0
 800357a:	1c0a      	adds	r2, r1, #0
 800357c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	0d51      	lsrs	r1, r2, #21
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	00d2      	lsls	r2, r2, #3
 800358c:	400a      	ands	r2, r1
 800358e:	490e      	ldr	r1, [pc, #56]	; (80035c8 <I2C_TransferConfig+0x68>)
 8003590:	430a      	orrs	r2, r1
 8003592:	43d2      	mvns	r2, r2
 8003594:	401a      	ands	r2, r3
 8003596:	0011      	movs	r1, r2
 8003598:	193b      	adds	r3, r7, r4
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	059b      	lsls	r3, r3, #22
 800359e:	0d9a      	lsrs	r2, r3, #22
 80035a0:	183b      	adds	r3, r7, r0
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	0418      	lsls	r0, r3, #16
 80035a6:	23ff      	movs	r3, #255	; 0xff
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	4003      	ands	r3, r0
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b005      	add	sp, #20
 80035c4:	bd90      	pop	{r4, r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	03ff63ff 	.word	0x03ff63ff

080035cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2241      	movs	r2, #65	; 0x41
 80035da:	5c9b      	ldrb	r3, [r3, r2]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d138      	bne.n	8003654 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	5c9b      	ldrb	r3, [r3, r2]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e032      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2240      	movs	r2, #64	; 0x40
 80035f4:	2101      	movs	r1, #1
 80035f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2241      	movs	r2, #65	; 0x41
 80035fc:	2124      	movs	r1, #36	; 0x24
 80035fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2101      	movs	r1, #1
 800360c:	438a      	bics	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4911      	ldr	r1, [pc, #68]	; (8003660 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800361c:	400a      	ands	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2101      	movs	r1, #1
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2241      	movs	r2, #65	; 0x41
 8003644:	2120      	movs	r1, #32
 8003646:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	2100      	movs	r1, #0
 800364e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	ffffefff 	.word	0xffffefff

08003664 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2241      	movs	r2, #65	; 0x41
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	d139      	bne.n	80036ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2240      	movs	r2, #64	; 0x40
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003684:	2302      	movs	r3, #2
 8003686:	e033      	b.n	80036f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2240      	movs	r2, #64	; 0x40
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2241      	movs	r2, #65	; 0x41
 8003694:	2124      	movs	r1, #36	; 0x24
 8003696:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	438a      	bics	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2241      	movs	r2, #65	; 0x41
 80036de:	2120      	movs	r1, #32
 80036e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2240      	movs	r2, #64	; 0x40
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e000      	b.n	80036f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	fffff0ff 	.word	0xfffff0ff

080036fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b5b0      	push	{r4, r5, r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f000 fb6c 	bl	8003de8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003710:	4bc8      	ldr	r3, [pc, #800]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	220c      	movs	r2, #12
 8003716:	4013      	ands	r3, r2
 8003718:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800371a:	4bc6      	ldr	r3, [pc, #792]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	025b      	lsls	r3, r3, #9
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	4013      	ands	r3, r2
 800372e:	d100      	bne.n	8003732 <HAL_RCC_OscConfig+0x36>
 8003730:	e07d      	b.n	800382e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d007      	beq.n	8003748 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d112      	bne.n	8003764 <HAL_RCC_OscConfig+0x68>
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	025b      	lsls	r3, r3, #9
 8003744:	429a      	cmp	r2, r3
 8003746:	d10d      	bne.n	8003764 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4bba      	ldr	r3, [pc, #744]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	4013      	ands	r3, r2
 8003752:	d100      	bne.n	8003756 <HAL_RCC_OscConfig+0x5a>
 8003754:	e06a      	b.n	800382c <HAL_RCC_OscConfig+0x130>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d166      	bne.n	800382c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f000 fb42 	bl	8003de8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x84>
 8003770:	4bb0      	ldr	r3, [pc, #704]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4baf      	ldr	r3, [pc, #700]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	0249      	lsls	r1, r1, #9
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e027      	b.n	80037d0 <HAL_RCC_OscConfig+0xd4>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	23a0      	movs	r3, #160	; 0xa0
 8003786:	02db      	lsls	r3, r3, #11
 8003788:	429a      	cmp	r2, r3
 800378a:	d10e      	bne.n	80037aa <HAL_RCC_OscConfig+0xae>
 800378c:	4ba9      	ldr	r3, [pc, #676]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4ba8      	ldr	r3, [pc, #672]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	02c9      	lsls	r1, r1, #11
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	4ba6      	ldr	r3, [pc, #664]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4ba5      	ldr	r3, [pc, #660]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80037a0:	2180      	movs	r1, #128	; 0x80
 80037a2:	0249      	lsls	r1, r1, #9
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e012      	b.n	80037d0 <HAL_RCC_OscConfig+0xd4>
 80037aa:	4ba2      	ldr	r3, [pc, #648]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4ba1      	ldr	r3, [pc, #644]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80037b0:	49a1      	ldr	r1, [pc, #644]	; (8003a38 <HAL_RCC_OscConfig+0x33c>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	4b9f      	ldr	r3, [pc, #636]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	025b      	lsls	r3, r3, #9
 80037be:	4013      	ands	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4b9b      	ldr	r3, [pc, #620]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b9a      	ldr	r3, [pc, #616]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80037ca:	499c      	ldr	r1, [pc, #624]	; (8003a3c <HAL_RCC_OscConfig+0x340>)
 80037cc:	400a      	ands	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d014      	beq.n	8003802 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe ffc8 	bl	800276c <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e2:	f7fe ffc3 	bl	800276c <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b64      	cmp	r3, #100	; 0x64
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e2f9      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037f4:	4b8f      	ldr	r3, [pc, #572]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	029b      	lsls	r3, r3, #10
 80037fc:	4013      	ands	r3, r2
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0xe6>
 8003800:	e015      	b.n	800382e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe ffb3 	bl	800276c <HAL_GetTick>
 8003806:	0003      	movs	r3, r0
 8003808:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe ffae 	bl	800276c <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e2e4      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800381e:	4b85      	ldr	r3, [pc, #532]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	029b      	lsls	r3, r3, #10
 8003826:	4013      	ands	r3, r2
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x110>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2202      	movs	r2, #2
 8003834:	4013      	ands	r3, r2
 8003836:	d100      	bne.n	800383a <HAL_RCC_OscConfig+0x13e>
 8003838:	e099      	b.n	800396e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	2220      	movs	r2, #32
 8003844:	4013      	ands	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003848:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b79      	ldr	r3, [pc, #484]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800384e:	2120      	movs	r1, #32
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	2220      	movs	r2, #32
 8003858:	4393      	bics	r3, r2
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	2b04      	cmp	r3, #4
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d13e      	bne.n	80038e6 <HAL_RCC_OscConfig+0x1ea>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d13b      	bne.n	80038e6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800386e:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	4013      	ands	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_RCC_OscConfig+0x186>
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e2b2      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003882:	4b6c      	ldr	r3, [pc, #432]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <HAL_RCC_OscConfig+0x344>)
 8003888:	4013      	ands	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	021a      	lsls	r2, r3, #8
 8003892:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003898:	4b66      	ldr	r3, [pc, #408]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2209      	movs	r2, #9
 800389e:	4393      	bics	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	4b64      	ldr	r3, [pc, #400]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 fbeb 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 80038ae:	0001      	movs	r1, r0
 80038b0:	4b60      	ldr	r3, [pc, #384]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	220f      	movs	r2, #15
 80038b8:	4013      	ands	r3, r2
 80038ba:	4a62      	ldr	r2, [pc, #392]	; (8003a44 <HAL_RCC_OscConfig+0x348>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	000a      	movs	r2, r1
 80038c0:	40da      	lsrs	r2, r3
 80038c2:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <HAL_RCC_OscConfig+0x34c>)
 80038c4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80038c6:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCC_OscConfig+0x350>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2513      	movs	r5, #19
 80038cc:	197c      	adds	r4, r7, r5
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7fe ff06 	bl	80026e0 <HAL_InitTick>
 80038d4:	0003      	movs	r3, r0
 80038d6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80038d8:	197b      	adds	r3, r7, r5
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d046      	beq.n	800396e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80038e0:	197b      	adds	r3, r7, r5
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	e280      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d027      	beq.n	800393c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80038ec:	4b51      	ldr	r3, [pc, #324]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2209      	movs	r2, #9
 80038f2:	4393      	bics	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	4b4f      	ldr	r3, [pc, #316]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80038f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe ff35 	bl	800276c <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003908:	f7fe ff30 	bl	800276c <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e266      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800391a:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2204      	movs	r2, #4
 8003920:	4013      	ands	r3, r2
 8003922:	d0f1      	beq.n	8003908 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a45      	ldr	r2, [pc, #276]	; (8003a40 <HAL_RCC_OscConfig+0x344>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e018      	b.n	800396e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393c:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003942:	2101      	movs	r1, #1
 8003944:	438a      	bics	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe ff10 	bl	800276c <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003952:	f7fe ff0b 	bl	800276c <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e241      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003964:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2204      	movs	r2, #4
 800396a:	4013      	ands	r3, r2
 800396c:	d1f1      	bne.n	8003952 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	4013      	ands	r3, r2
 8003976:	d100      	bne.n	800397a <HAL_RCC_OscConfig+0x27e>
 8003978:	e0a1      	b.n	8003abe <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d140      	bne.n	8003a02 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003980:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4013      	ands	r3, r2
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x29c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e227      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003998:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <HAL_RCC_OscConfig+0x354>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	0a19      	lsrs	r1, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	061a      	lsls	r2, r3, #24
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	0b5b      	lsrs	r3, r3, #13
 80039c6:	3301      	adds	r3, #1
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0212      	lsls	r2, r2, #8
 80039cc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80039ce:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	210f      	movs	r1, #15
 80039d6:	400b      	ands	r3, r1
 80039d8:	491a      	ldr	r1, [pc, #104]	; (8003a44 <HAL_RCC_OscConfig+0x348>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_RCC_OscConfig+0x34c>)
 80039e0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCC_OscConfig+0x350>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2513      	movs	r5, #19
 80039e8:	197c      	adds	r4, r7, r5
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fe fe78 	bl	80026e0 <HAL_InitTick>
 80039f0:	0003      	movs	r3, r0
 80039f2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80039f4:	197b      	adds	r3, r7, r5
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d060      	beq.n	8003abe <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80039fc:	197b      	adds	r3, r7, r5
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	e1f2      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d03f      	beq.n	8003a8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	0049      	lsls	r1, r1, #1
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe fea8 	bl	800276c <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a20:	e018      	b.n	8003a54 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a22:	f7fe fea3 	bl	800276c <HAL_GetTick>
 8003a26:	0002      	movs	r2, r0
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d911      	bls.n	8003a54 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1d9      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	fffeffff 	.word	0xfffeffff
 8003a3c:	fffbffff 	.word	0xfffbffff
 8003a40:	ffffe0ff 	.word	0xffffe0ff
 8003a44:	0800614c 	.word	0x0800614c
 8003a48:	20000184 	.word	0x20000184
 8003a4c:	20000188 	.word	0x20000188
 8003a50:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a54:	4bc9      	ldr	r3, [pc, #804]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d0e0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a60:	4bc6      	ldr	r3, [pc, #792]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4ac6      	ldr	r2, [pc, #792]	; (8003d80 <HAL_RCC_OscConfig+0x684>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1a      	ldr	r2, [r3, #32]
 8003a6e:	4bc3      	ldr	r3, [pc, #780]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a74:	4bc1      	ldr	r3, [pc, #772]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	0a19      	lsrs	r1, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	061a      	lsls	r2, r3, #24
 8003a82:	4bbe      	ldr	r3, [pc, #760]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	e019      	b.n	8003abe <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a8a:	4bbc      	ldr	r3, [pc, #752]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4bbb      	ldr	r3, [pc, #748]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003a90:	49bc      	ldr	r1, [pc, #752]	; (8003d84 <HAL_RCC_OscConfig+0x688>)
 8003a92:	400a      	ands	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fe fe69 	bl	800276c <HAL_GetTick>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aa0:	f7fe fe64 	bl	800276c <HAL_GetTick>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e19a      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ab2:	4bb2      	ldr	r3, [pc, #712]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4013      	ands	r3, r2
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d036      	beq.n	8003b36 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d019      	beq.n	8003b04 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad0:	4baa      	ldr	r3, [pc, #680]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ad4:	4ba9      	ldr	r3, [pc, #676]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7fe fe46 	bl	800276c <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fe41 	bl	800276c <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e177      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003af8:	4ba0      	ldr	r3, [pc, #640]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	2202      	movs	r2, #2
 8003afe:	4013      	ands	r3, r2
 8003b00:	d0f1      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x3ea>
 8003b02:	e018      	b.n	8003b36 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b04:	4b9d      	ldr	r3, [pc, #628]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b08:	4b9c      	ldr	r3, [pc, #624]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	438a      	bics	r2, r1
 8003b0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fe fe2c 	bl	800276c <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fe27 	bl	800276c <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e15d      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b2c:	4b93      	ldr	r3, [pc, #588]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	2202      	movs	r2, #2
 8003b32:	4013      	ands	r3, r2
 8003b34:	d1f1      	bne.n	8003b1a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <HAL_RCC_OscConfig+0x446>
 8003b40:	e0ae      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2023      	movs	r0, #35	; 0x23
 8003b44:	183b      	adds	r3, r7, r0
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4a:	4b8c      	ldr	r3, [pc, #560]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	055b      	lsls	r3, r3, #21
 8003b52:	4013      	ands	r3, r2
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	4b89      	ldr	r3, [pc, #548]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5a:	4b88      	ldr	r3, [pc, #544]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003b5c:	2180      	movs	r1, #128	; 0x80
 8003b5e:	0549      	lsls	r1, r1, #21
 8003b60:	430a      	orrs	r2, r1
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b64:	183b      	adds	r3, r7, r0
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <HAL_RCC_OscConfig+0x68c>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4013      	ands	r3, r2
 8003b74:	d11a      	bne.n	8003bac <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b76:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0x68c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b83      	ldr	r3, [pc, #524]	; (8003d88 <HAL_RCC_OscConfig+0x68c>)
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	0049      	lsls	r1, r1, #1
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b84:	f7fe fdf2 	bl	800276c <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fe fded 	bl	800276c <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	; 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e123      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b79      	ldr	r3, [pc, #484]	; (8003d88 <HAL_RCC_OscConfig+0x68c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4cc>
 8003bb8:	4b70      	ldr	r3, [pc, #448]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	0049      	lsls	r1, r1, #1
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8003bc6:	e031      	b.n	8003c2c <HAL_RCC_OscConfig+0x530>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10c      	bne.n	8003bea <HAL_RCC_OscConfig+0x4ee>
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bd4:	4b69      	ldr	r3, [pc, #420]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003bd6:	496b      	ldr	r1, [pc, #428]	; (8003d84 <HAL_RCC_OscConfig+0x688>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	651a      	str	r2, [r3, #80]	; 0x50
 8003bdc:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003be2:	496a      	ldr	r1, [pc, #424]	; (8003d8c <HAL_RCC_OscConfig+0x690>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	651a      	str	r2, [r3, #80]	; 0x50
 8003be8:	e020      	b.n	8003c2c <HAL_RCC_OscConfig+0x530>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	23a0      	movs	r3, #160	; 0xa0
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d10e      	bne.n	8003c14 <HAL_RCC_OscConfig+0x518>
 8003bf6:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bfa:	4b60      	ldr	r3, [pc, #384]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	00c9      	lsls	r1, r1, #3
 8003c00:	430a      	orrs	r2, r1
 8003c02:	651a      	str	r2, [r3, #80]	; 0x50
 8003c04:	4b5d      	ldr	r3, [pc, #372]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c08:	4b5c      	ldr	r3, [pc, #368]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	0049      	lsls	r1, r1, #1
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x530>
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c18:	4b58      	ldr	r3, [pc, #352]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c1a:	495a      	ldr	r1, [pc, #360]	; (8003d84 <HAL_RCC_OscConfig+0x688>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c20:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c24:	4b55      	ldr	r3, [pc, #340]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c26:	4959      	ldr	r1, [pc, #356]	; (8003d8c <HAL_RCC_OscConfig+0x690>)
 8003c28:	400a      	ands	r2, r1
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7fe fd9a 	bl	800276c <HAL_GetTick>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c3c:	e009      	b.n	8003c52 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fe fd95 	bl	800276c <HAL_GetTick>
 8003c42:	0002      	movs	r2, r0
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	4a51      	ldr	r2, [pc, #324]	; (8003d90 <HAL_RCC_OscConfig+0x694>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0ca      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c52:	4b4a      	ldr	r3, [pc, #296]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d0ef      	beq.n	8003c3e <HAL_RCC_OscConfig+0x542>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c60:	f7fe fd84 	bl	800276c <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c68:	e009      	b.n	8003c7e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fe fd7f 	bl	800276c <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	4a46      	ldr	r2, [pc, #280]	; (8003d90 <HAL_RCC_OscConfig+0x694>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0b4      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4013      	ands	r3, r2
 8003c88:	d1ef      	bne.n	8003c6a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c8a:	2323      	movs	r3, #35	; 0x23
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c98:	4b38      	ldr	r3, [pc, #224]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003c9a:	493e      	ldr	r1, [pc, #248]	; (8003d94 <HAL_RCC_OscConfig+0x698>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d100      	bne.n	8003caa <HAL_RCC_OscConfig+0x5ae>
 8003ca8:	e09d      	b.n	8003de6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d100      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x5b6>
 8003cb0:	e076      	b.n	8003da0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d145      	bne.n	8003d46 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003cc0:	4935      	ldr	r1, [pc, #212]	; (8003d98 <HAL_RCC_OscConfig+0x69c>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe fd51 	bl	800276c <HAL_GetTick>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fe fd4c 	bl	800276c <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e082      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ce2:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	049b      	lsls	r3, r3, #18
 8003cea:	4013      	ands	r3, r2
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cee:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <HAL_RCC_OscConfig+0x6a0>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	431a      	orrs	r2, r3
 8003d08:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003d14:	2180      	movs	r1, #128	; 0x80
 8003d16:	0449      	lsls	r1, r1, #17
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fd26 	bl	800276c <HAL_GetTick>
 8003d20:	0003      	movs	r3, r0
 8003d22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe fd21 	bl	800276c <HAL_GetTick>
 8003d2a:	0002      	movs	r2, r0
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e057      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	049b      	lsls	r3, r3, #18
 8003d40:	4013      	ands	r3, r2
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x62a>
 8003d44:	e04f      	b.n	8003de6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003d4c:	4912      	ldr	r1, [pc, #72]	; (8003d98 <HAL_RCC_OscConfig+0x69c>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d52:	f7fe fd0b 	bl	800276c <HAL_GetTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fe fd06 	bl	800276c <HAL_GetTick>
 8003d60:	0002      	movs	r2, r0
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e03c      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d6e:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_RCC_OscConfig+0x680>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	049b      	lsls	r3, r3, #18
 8003d76:	4013      	ands	r3, r2
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x660>
 8003d7a:	e034      	b.n	8003de6 <HAL_RCC_OscConfig+0x6ea>
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	ffff1fff 	.word	0xffff1fff
 8003d84:	fffffeff 	.word	0xfffffeff
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	fffffbff 	.word	0xfffffbff
 8003d90:	00001388 	.word	0x00001388
 8003d94:	efffffff 	.word	0xefffffff
 8003d98:	feffffff 	.word	0xfeffffff
 8003d9c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_OscConfig+0x6f4>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	025b      	lsls	r3, r3, #9
 8003db8:	401a      	ands	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d10f      	bne.n	8003de2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	23f0      	movs	r3, #240	; 0xf0
 8003dc6:	039b      	lsls	r3, r3, #14
 8003dc8:	401a      	ands	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	23c0      	movs	r3, #192	; 0xc0
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	401a      	ands	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b00a      	add	sp, #40	; 0x28
 8003dee:	bdb0      	pop	{r4, r5, r7, pc}
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b5b0      	push	{r4, r5, r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e128      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b96      	ldr	r3, [pc, #600]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	4013      	ands	r3, r2
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d91e      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b93      	ldr	r3, [pc, #588]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	4b90      	ldr	r3, [pc, #576]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e28:	f7fe fca0 	bl	800276c <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e30:	e009      	b.n	8003e46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e32:	f7fe fc9b 	bl	800276c <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	4a8a      	ldr	r2, [pc, #552]	; (8004068 <HAL_RCC_ClockConfig+0x274>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e109      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b87      	ldr	r3, [pc, #540]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1ee      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5e:	4b83      	ldr	r3, [pc, #524]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	22f0      	movs	r2, #240	; 0xf0
 8003e64:	4393      	bics	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	4b7f      	ldr	r3, [pc, #508]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2201      	movs	r2, #1
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d100      	bne.n	8003e7e <HAL_RCC_ClockConfig+0x8a>
 8003e7c:	e089      	b.n	8003f92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e86:	4b79      	ldr	r3, [pc, #484]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	029b      	lsls	r3, r3, #10
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d120      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0e1      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	049b      	lsls	r3, r3, #18
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d114      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0d5      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d109      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0ca      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ec4:	4b69      	ldr	r3, [pc, #420]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0c2      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed4:	4b65      	ldr	r3, [pc, #404]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2203      	movs	r2, #3
 8003eda:	4393      	bics	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4b62      	ldr	r3, [pc, #392]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee8:	f7fe fc40 	bl	800276c <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef8:	e009      	b.n	8003f0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efa:	f7fe fc37 	bl	800276c <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	4a58      	ldr	r2, [pc, #352]	; (8004068 <HAL_RCC_ClockConfig+0x274>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0a5      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f0e:	4b57      	ldr	r3, [pc, #348]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	220c      	movs	r2, #12
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d1ef      	bne.n	8003efa <HAL_RCC_ClockConfig+0x106>
 8003f1a:	e03a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d111      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f24:	e009      	b.n	8003f3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f26:	f7fe fc21 	bl	800276c <HAL_GetTick>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	4a4d      	ldr	r2, [pc, #308]	; (8004068 <HAL_RCC_ClockConfig+0x274>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e08f      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	220c      	movs	r2, #12
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d1ef      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x132>
 8003f46:	e024      	b.n	8003f92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d11b      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f50:	e009      	b.n	8003f66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f52:	f7fe fc0b 	bl	800276c <HAL_GetTick>
 8003f56:	0002      	movs	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	4a42      	ldr	r2, [pc, #264]	; (8004068 <HAL_RCC_ClockConfig+0x274>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e079      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	220c      	movs	r2, #12
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d1ef      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x15e>
 8003f72:	e00e      	b.n	8003f92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f74:	f7fe fbfa 	bl	800276c <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	4a3a      	ldr	r2, [pc, #232]	; (8004068 <HAL_RCC_ClockConfig+0x274>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e068      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f88:	4b38      	ldr	r3, [pc, #224]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	220c      	movs	r2, #12
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	4013      	ands	r3, r2
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d21e      	bcs.n	8003fde <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb2:	f7fe fbdb 	bl	800276c <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	e009      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fe fbd6 	bl	800276c <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	4a28      	ldr	r2, [pc, #160]	; (8004068 <HAL_RCC_ClockConfig+0x274>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e044      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_ClockConfig+0x270>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d1ee      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b20      	ldr	r3, [pc, #128]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a20      	ldr	r2, [pc, #128]	; (8004070 <HAL_RCC_ClockConfig+0x27c>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2208      	movs	r2, #8
 8004002:	4013      	ands	r3, r2
 8004004:	d00a      	beq.n	800401c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004006:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <HAL_RCC_ClockConfig+0x280>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	00da      	lsls	r2, r3, #3
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401c:	f000 f832 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004020:	0001      	movs	r1, r0
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_RCC_ClockConfig+0x278>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	220f      	movs	r2, #15
 800402a:	4013      	ands	r3, r2
 800402c:	4a12      	ldr	r2, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x284>)
 800402e:	5cd3      	ldrb	r3, [r2, r3]
 8004030:	000a      	movs	r2, r1
 8004032:	40da      	lsrs	r2, r3
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_RCC_ClockConfig+0x288>)
 8004036:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_RCC_ClockConfig+0x28c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	250b      	movs	r5, #11
 800403e:	197c      	adds	r4, r7, r5
 8004040:	0018      	movs	r0, r3
 8004042:	f7fe fb4d 	bl	80026e0 <HAL_InitTick>
 8004046:	0003      	movs	r3, r0
 8004048:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800404a:	197b      	adds	r3, r7, r5
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004052:	197b      	adds	r3, r7, r5
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	e000      	b.n	800405a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b004      	add	sp, #16
 8004060:	bdb0      	pop	{r4, r5, r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	40022000 	.word	0x40022000
 8004068:	00001388 	.word	0x00001388
 800406c:	40021000 	.word	0x40021000
 8004070:	fffff8ff 	.word	0xfffff8ff
 8004074:	ffffc7ff 	.word	0xffffc7ff
 8004078:	0800614c 	.word	0x0800614c
 800407c:	20000184 	.word	0x20000184
 8004080:	20000188 	.word	0x20000188

08004084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b08e      	sub	sp, #56	; 0x38
 8004088:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800408a:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_RCC_GetSysClockFreq+0x138>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004092:	230c      	movs	r3, #12
 8004094:	4013      	ands	r3, r2
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d014      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x40>
 800409a:	d900      	bls.n	800409e <HAL_RCC_GetSysClockFreq+0x1a>
 800409c:	e07b      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x112>
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x24>
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x3a>
 80040a6:	e076      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80040a8:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_RCC_GetSysClockFreq+0x138>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2210      	movs	r2, #16
 80040ae:	4013      	ands	r3, r2
 80040b0:	d002      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80040b2:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80040b6:	e07c      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80040b8:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040bc:	e079      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040be:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040c2:	e076      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	0c9a      	lsrs	r2, r3, #18
 80040c8:	230f      	movs	r3, #15
 80040ca:	401a      	ands	r2, r3
 80040cc:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_GetSysClockFreq+0x148>)
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	0d9a      	lsrs	r2, r3, #22
 80040d6:	2303      	movs	r3, #3
 80040d8:	4013      	ands	r3, r2
 80040da:	3301      	adds	r3, #1
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040de:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCC_GetSysClockFreq+0x138>)
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	4013      	ands	r3, r2
 80040e8:	d01a      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	4a35      	ldr	r2, [pc, #212]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80040f4:	2300      	movs	r3, #0
 80040f6:	69b8      	ldr	r0, [r7, #24]
 80040f8:	69f9      	ldr	r1, [r7, #28]
 80040fa:	f7fc f9ad 	bl	8000458 <__aeabi_lmul>
 80040fe:	0002      	movs	r2, r0
 8004100:	000b      	movs	r3, r1
 8004102:	0010      	movs	r0, r2
 8004104:	0019      	movs	r1, r3
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f7fc f981 	bl	8000418 <__aeabi_uldivmod>
 8004116:	0002      	movs	r2, r0
 8004118:	000b      	movs	r3, r1
 800411a:	0013      	movs	r3, r2
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
 800411e:	e037      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <HAL_RCC_GetSysClockFreq+0x138>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	4013      	ands	r3, r2
 8004128:	d01a      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4a23      	ldr	r2, [pc, #140]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004134:	2300      	movs	r3, #0
 8004136:	68b8      	ldr	r0, [r7, #8]
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	f7fc f98d 	bl	8000458 <__aeabi_lmul>
 800413e:	0002      	movs	r2, r0
 8004140:	000b      	movs	r3, r1
 8004142:	0010      	movs	r0, r2
 8004144:	0019      	movs	r1, r3
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f7fc f961 	bl	8000418 <__aeabi_uldivmod>
 8004156:	0002      	movs	r2, r0
 8004158:	000b      	movs	r3, r1
 800415a:	0013      	movs	r3, r2
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
 800415e:	e017      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	0018      	movs	r0, r3
 8004164:	2300      	movs	r3, #0
 8004166:	0019      	movs	r1, r3
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x140>)
 800416a:	2300      	movs	r3, #0
 800416c:	f7fc f974 	bl	8000458 <__aeabi_lmul>
 8004170:	0002      	movs	r2, r0
 8004172:	000b      	movs	r3, r1
 8004174:	0010      	movs	r0, r2
 8004176:	0019      	movs	r1, r3
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	001c      	movs	r4, r3
 800417c:	2300      	movs	r3, #0
 800417e:	001d      	movs	r5, r3
 8004180:	0022      	movs	r2, r4
 8004182:	002b      	movs	r3, r5
 8004184:	f7fc f948 	bl	8000418 <__aeabi_uldivmod>
 8004188:	0002      	movs	r2, r0
 800418a:	000b      	movs	r3, r1
 800418c:	0013      	movs	r3, r2
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004194:	e00d      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_GetSysClockFreq+0x138>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	0b5b      	lsrs	r3, r3, #13
 800419c:	2207      	movs	r2, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	3301      	adds	r3, #1
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	0212      	lsls	r2, r2, #8
 80041aa:	409a      	lsls	r2, r3
 80041ac:	0013      	movs	r3, r2
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b00e      	add	sp, #56	; 0x38
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	003d0900 	.word	0x003d0900
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	017d7840 	.word	0x017d7840
 80041cc:	08006164 	.word	0x08006164

080041d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b02      	ldr	r3, [pc, #8]	; (80041e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	20000184 	.word	0x20000184

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff2 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041ec:	0001      	movs	r1, r0
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	2207      	movs	r2, #7
 80041f6:	4013      	ands	r3, r2
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <HAL_RCC_GetPCLK1Freq+0x28>)
 80041fa:	5cd3      	ldrb	r3, [r2, r3]
 80041fc:	40d9      	lsrs	r1, r3
 80041fe:	000b      	movs	r3, r1
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	40021000 	.word	0x40021000
 800420c:	0800615c 	.word	0x0800615c

08004210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004214:	f7ff ffdc 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 8004218:	0001      	movs	r1, r0
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	0adb      	lsrs	r3, r3, #11
 8004220:	2207      	movs	r2, #7
 8004222:	4013      	ands	r3, r2
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004226:	5cd3      	ldrb	r3, [r2, r3]
 8004228:	40d9      	lsrs	r1, r3
 800422a:	000b      	movs	r3, r1
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40021000 	.word	0x40021000
 8004238:	0800615c 	.word	0x0800615c

0800423c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004244:	2017      	movs	r0, #23
 8004246:	183b      	adds	r3, r7, r0
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2220      	movs	r2, #32
 8004252:	4013      	ands	r3, r2
 8004254:	d100      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004256:	e0c2      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004258:	4b81      	ldr	r3, [pc, #516]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800425a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	055b      	lsls	r3, r3, #21
 8004260:	4013      	ands	r3, r2
 8004262:	d109      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	4b7e      	ldr	r3, [pc, #504]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004268:	4b7d      	ldr	r3, [pc, #500]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	0549      	lsls	r1, r1, #21
 800426e:	430a      	orrs	r2, r1
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004272:	183b      	adds	r3, r7, r0
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004278:	4b7a      	ldr	r3, [pc, #488]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4013      	ands	r3, r2
 8004282:	d11a      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004284:	4b77      	ldr	r3, [pc, #476]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b76      	ldr	r3, [pc, #472]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	0049      	lsls	r1, r1, #1
 800428e:	430a      	orrs	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004292:	f7fe fa6b 	bl	800276c <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	e008      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800429c:	f7fe fa66 	bl	800276c <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0d4      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ae:	4b6d      	ldr	r3, [pc, #436]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	4013      	ands	r3, r2
 80042b8:	d0f0      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80042ba:	4b69      	ldr	r3, [pc, #420]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	23c0      	movs	r3, #192	; 0xc0
 80042c0:	039b      	lsls	r3, r3, #14
 80042c2:	4013      	ands	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	23c0      	movs	r3, #192	; 0xc0
 80042cc:	039b      	lsls	r3, r3, #14
 80042ce:	4013      	ands	r3, r2
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d013      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	23c0      	movs	r3, #192	; 0xc0
 80042dc:	029b      	lsls	r3, r3, #10
 80042de:	401a      	ands	r2, r3
 80042e0:	23c0      	movs	r3, #192	; 0xc0
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d10a      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042e8:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	401a      	ands	r2, r3
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d101      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e0ac      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80042fe:	4b58      	ldr	r3, [pc, #352]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004302:	23c0      	movs	r3, #192	; 0xc0
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	4013      	ands	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d03b      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	23c0      	movs	r3, #192	; 0xc0
 8004316:	029b      	lsls	r3, r3, #10
 8004318:	4013      	ands	r3, r2
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d033      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2220      	movs	r2, #32
 8004326:	4013      	ands	r3, r2
 8004328:	d02e      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800432a:	4b4d      	ldr	r3, [pc, #308]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	4a4e      	ldr	r2, [pc, #312]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004334:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004338:	4b49      	ldr	r3, [pc, #292]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	0309      	lsls	r1, r1, #12
 800433e:	430a      	orrs	r2, r1
 8004340:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004346:	4b46      	ldr	r3, [pc, #280]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004348:	4948      	ldr	r1, [pc, #288]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800434a:	400a      	ands	r2, r1
 800434c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800434e:	4b44      	ldr	r3, [pc, #272]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4013      	ands	r3, r2
 800435c:	d014      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fe fa05 	bl	800276c <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004366:	e009      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fe fa00 	bl	800276c <HAL_GetTick>
 800436c:	0002      	movs	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	4a3f      	ldr	r2, [pc, #252]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e06d      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437c:	4b38      	ldr	r3, [pc, #224]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800437e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4013      	ands	r3, r2
 8004386:	d0ef      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	23c0      	movs	r3, #192	; 0xc0
 800438e:	029b      	lsls	r3, r3, #10
 8004390:	401a      	ands	r2, r3
 8004392:	23c0      	movs	r3, #192	; 0xc0
 8004394:	029b      	lsls	r3, r3, #10
 8004396:	429a      	cmp	r2, r3
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800439a:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a35      	ldr	r2, [pc, #212]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	0019      	movs	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	23c0      	movs	r3, #192	; 0xc0
 80043aa:	039b      	lsls	r3, r3, #14
 80043ac:	401a      	ands	r2, r3
 80043ae:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043b6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	23c0      	movs	r3, #192	; 0xc0
 80043be:	029b      	lsls	r3, r3, #10
 80043c0:	401a      	ands	r2, r3
 80043c2:	4b27      	ldr	r3, [pc, #156]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043c4:	430a      	orrs	r2, r1
 80043c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043c8:	2317      	movs	r3, #23
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d105      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043d8:	4927      	ldr	r1, [pc, #156]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80043da:	400a      	ands	r2, r1
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2202      	movs	r2, #2
 80043e4:	4013      	ands	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	220c      	movs	r2, #12
 80043ee:	4393      	bics	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043f8:	430a      	orrs	r2, r1
 80043fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	4a1c      	ldr	r2, [pc, #112]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800440c:	4013      	ands	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004416:	430a      	orrs	r2, r1
 8004418:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2208      	movs	r2, #8
 8004420:	4013      	ands	r3, r2
 8004422:	d009      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	4a15      	ldr	r2, [pc, #84]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800442a:	4013      	ands	r3, r2
 800442c:	0019      	movs	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004434:	430a      	orrs	r2, r1
 8004436:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	4013      	ands	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004448:	4013      	ands	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004452:	430a      	orrs	r2, r1
 8004454:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000
 8004468:	fffcffff 	.word	0xfffcffff
 800446c:	fff7ffff 	.word	0xfff7ffff
 8004470:	00001388 	.word	0x00001388
 8004474:	ffcfffff 	.word	0xffcfffff
 8004478:	efffffff 	.word	0xefffffff
 800447c:	fffff3ff 	.word	0xfffff3ff
 8004480:	ffffcfff 	.word	0xffffcfff
 8004484:	fff3ffff 	.word	0xfff3ffff

08004488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e044      	b.n	8004524 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d107      	bne.n	80044b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2274      	movs	r2, #116	; 0x74
 80044a6:	2100      	movs	r1, #0
 80044a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7fd ff95 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2224      	movs	r2, #36	; 0x24
 80044b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2101      	movs	r1, #1
 80044c4:	438a      	bics	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 f8d8 	bl	8004680 <UART_SetConfig>
 80044d0:	0003      	movs	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e024      	b.n	8004524 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 fb2d 	bl	8004b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	490d      	ldr	r1, [pc, #52]	; (800452c <HAL_UART_Init+0xa4>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	212a      	movs	r1, #42	; 0x2a
 8004506:	438a      	bics	r2, r1
 8004508:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	430a      	orrs	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0018      	movs	r0, r3
 800451e:	f000 fbc5 	bl	8004cac <UART_CheckIdleState>
 8004522:	0003      	movs	r3, r0
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}
 800452c:	ffffb7ff 	.word	0xffffb7ff

08004530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	1dbb      	adds	r3, r7, #6
 800453e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004544:	2b20      	cmp	r3, #32
 8004546:	d000      	beq.n	800454a <HAL_UART_Transmit+0x1a>
 8004548:	e095      	b.n	8004676 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_UART_Transmit+0x28>
 8004550:	1dbb      	adds	r3, r7, #6
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e08d      	b.n	8004678 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	015b      	lsls	r3, r3, #5
 8004564:	429a      	cmp	r2, r3
 8004566:	d109      	bne.n	800457c <HAL_UART_Transmit+0x4c>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d001      	beq.n	800457c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e07d      	b.n	8004678 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2274      	movs	r2, #116	; 0x74
 8004580:	5c9b      	ldrb	r3, [r3, r2]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_UART_Transmit+0x5a>
 8004586:	2302      	movs	r3, #2
 8004588:	e076      	b.n	8004678 <HAL_UART_Transmit+0x148>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2274      	movs	r2, #116	; 0x74
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2280      	movs	r2, #128	; 0x80
 8004596:	2100      	movs	r1, #0
 8004598:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2221      	movs	r2, #33	; 0x21
 800459e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a0:	f7fe f8e4 	bl	800276c <HAL_GetTick>
 80045a4:	0003      	movs	r3, r0
 80045a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1dba      	adds	r2, r7, #6
 80045ac:	2150      	movs	r1, #80	; 0x50
 80045ae:	8812      	ldrh	r2, [r2, #0]
 80045b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1dba      	adds	r2, r7, #6
 80045b6:	2152      	movs	r1, #82	; 0x52
 80045b8:	8812      	ldrh	r2, [r2, #0]
 80045ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	015b      	lsls	r3, r3, #5
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d108      	bne.n	80045da <HAL_UART_Transmit+0xaa>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e003      	b.n	80045e2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2274      	movs	r2, #116	; 0x74
 80045e6:	2100      	movs	r1, #0
 80045e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80045ea:	e02c      	b.n	8004646 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	0013      	movs	r3, r2
 80045f6:	2200      	movs	r2, #0
 80045f8:	2180      	movs	r1, #128	; 0x80
 80045fa:	f000 fb9f 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 80045fe:	1e03      	subs	r3, r0, #0
 8004600:	d001      	beq.n	8004606 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e038      	b.n	8004678 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	001a      	movs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	05d2      	lsls	r2, r2, #23
 8004618:	0dd2      	lsrs	r2, r2, #23
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	3302      	adds	r3, #2
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e007      	b.n	8004634 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2252      	movs	r2, #82	; 0x52
 8004638:	5a9b      	ldrh	r3, [r3, r2]
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b299      	uxth	r1, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2252      	movs	r2, #82	; 0x52
 8004644:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2252      	movs	r2, #82	; 0x52
 800464a:	5a9b      	ldrh	r3, [r3, r2]
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1cc      	bne.n	80045ec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	0013      	movs	r3, r2
 800465c:	2200      	movs	r2, #0
 800465e:	2140      	movs	r1, #64	; 0x40
 8004660:	f000 fb6c 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004664:	1e03      	subs	r3, r0, #0
 8004666:	d001      	beq.n	800466c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e005      	b.n	8004678 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b008      	add	sp, #32
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	b5b0      	push	{r4, r5, r7, lr}
 8004682:	b08e      	sub	sp, #56	; 0x38
 8004684:	af00      	add	r7, sp, #0
 8004686:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004688:	231a      	movs	r3, #26
 800468a:	2218      	movs	r2, #24
 800468c:	4694      	mov	ip, r2
 800468e:	44bc      	add	ip, r7
 8004690:	4463      	add	r3, ip
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	431a      	orrs	r2, r3
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4abc      	ldr	r2, [pc, #752]	; (80049a8 <UART_SetConfig+0x328>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c0:	430a      	orrs	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4ab8      	ldr	r2, [pc, #736]	; (80049ac <UART_SetConfig+0x32c>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4ab2      	ldr	r2, [pc, #712]	; (80049b0 <UART_SetConfig+0x330>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046f2:	4313      	orrs	r3, r2
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4aad      	ldr	r2, [pc, #692]	; (80049b4 <UART_SetConfig+0x334>)
 80046fe:	4013      	ands	r3, r2
 8004700:	0019      	movs	r1, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004708:	430a      	orrs	r2, r1
 800470a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4aa9      	ldr	r2, [pc, #676]	; (80049b8 <UART_SetConfig+0x338>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d136      	bne.n	8004784 <UART_SetConfig+0x104>
 8004716:	4ba9      	ldr	r3, [pc, #676]	; (80049bc <UART_SetConfig+0x33c>)
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	220c      	movs	r2, #12
 800471c:	4013      	ands	r3, r2
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d020      	beq.n	8004764 <UART_SetConfig+0xe4>
 8004722:	d827      	bhi.n	8004774 <UART_SetConfig+0xf4>
 8004724:	2b08      	cmp	r3, #8
 8004726:	d00d      	beq.n	8004744 <UART_SetConfig+0xc4>
 8004728:	d824      	bhi.n	8004774 <UART_SetConfig+0xf4>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <UART_SetConfig+0xb4>
 800472e:	2b04      	cmp	r3, #4
 8004730:	d010      	beq.n	8004754 <UART_SetConfig+0xd4>
 8004732:	e01f      	b.n	8004774 <UART_SetConfig+0xf4>
 8004734:	231b      	movs	r3, #27
 8004736:	2218      	movs	r2, #24
 8004738:	4694      	mov	ip, r2
 800473a:	44bc      	add	ip, r7
 800473c:	4463      	add	r3, ip
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e06f      	b.n	8004824 <UART_SetConfig+0x1a4>
 8004744:	231b      	movs	r3, #27
 8004746:	2218      	movs	r2, #24
 8004748:	4694      	mov	ip, r2
 800474a:	44bc      	add	ip, r7
 800474c:	4463      	add	r3, ip
 800474e:	2202      	movs	r2, #2
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e067      	b.n	8004824 <UART_SetConfig+0x1a4>
 8004754:	231b      	movs	r3, #27
 8004756:	2218      	movs	r2, #24
 8004758:	4694      	mov	ip, r2
 800475a:	44bc      	add	ip, r7
 800475c:	4463      	add	r3, ip
 800475e:	2204      	movs	r2, #4
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e05f      	b.n	8004824 <UART_SetConfig+0x1a4>
 8004764:	231b      	movs	r3, #27
 8004766:	2218      	movs	r2, #24
 8004768:	4694      	mov	ip, r2
 800476a:	44bc      	add	ip, r7
 800476c:	4463      	add	r3, ip
 800476e:	2208      	movs	r2, #8
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e057      	b.n	8004824 <UART_SetConfig+0x1a4>
 8004774:	231b      	movs	r3, #27
 8004776:	2218      	movs	r2, #24
 8004778:	4694      	mov	ip, r2
 800477a:	44bc      	add	ip, r7
 800477c:	4463      	add	r3, ip
 800477e:	2210      	movs	r2, #16
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e04f      	b.n	8004824 <UART_SetConfig+0x1a4>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a89      	ldr	r2, [pc, #548]	; (80049b0 <UART_SetConfig+0x330>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d143      	bne.n	8004816 <UART_SetConfig+0x196>
 800478e:	4b8b      	ldr	r3, [pc, #556]	; (80049bc <UART_SetConfig+0x33c>)
 8004790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004792:	23c0      	movs	r3, #192	; 0xc0
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4013      	ands	r3, r2
 8004798:	22c0      	movs	r2, #192	; 0xc0
 800479a:	0112      	lsls	r2, r2, #4
 800479c:	4293      	cmp	r3, r2
 800479e:	d02a      	beq.n	80047f6 <UART_SetConfig+0x176>
 80047a0:	22c0      	movs	r2, #192	; 0xc0
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d82e      	bhi.n	8004806 <UART_SetConfig+0x186>
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	0112      	lsls	r2, r2, #4
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d012      	beq.n	80047d6 <UART_SetConfig+0x156>
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	0112      	lsls	r2, r2, #4
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d826      	bhi.n	8004806 <UART_SetConfig+0x186>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <UART_SetConfig+0x146>
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	00d2      	lsls	r2, r2, #3
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d010      	beq.n	80047e6 <UART_SetConfig+0x166>
 80047c4:	e01f      	b.n	8004806 <UART_SetConfig+0x186>
 80047c6:	231b      	movs	r3, #27
 80047c8:	2218      	movs	r2, #24
 80047ca:	4694      	mov	ip, r2
 80047cc:	44bc      	add	ip, r7
 80047ce:	4463      	add	r3, ip
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e026      	b.n	8004824 <UART_SetConfig+0x1a4>
 80047d6:	231b      	movs	r3, #27
 80047d8:	2218      	movs	r2, #24
 80047da:	4694      	mov	ip, r2
 80047dc:	44bc      	add	ip, r7
 80047de:	4463      	add	r3, ip
 80047e0:	2202      	movs	r2, #2
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e01e      	b.n	8004824 <UART_SetConfig+0x1a4>
 80047e6:	231b      	movs	r3, #27
 80047e8:	2218      	movs	r2, #24
 80047ea:	4694      	mov	ip, r2
 80047ec:	44bc      	add	ip, r7
 80047ee:	4463      	add	r3, ip
 80047f0:	2204      	movs	r2, #4
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e016      	b.n	8004824 <UART_SetConfig+0x1a4>
 80047f6:	231b      	movs	r3, #27
 80047f8:	2218      	movs	r2, #24
 80047fa:	4694      	mov	ip, r2
 80047fc:	44bc      	add	ip, r7
 80047fe:	4463      	add	r3, ip
 8004800:	2208      	movs	r2, #8
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e00e      	b.n	8004824 <UART_SetConfig+0x1a4>
 8004806:	231b      	movs	r3, #27
 8004808:	2218      	movs	r2, #24
 800480a:	4694      	mov	ip, r2
 800480c:	44bc      	add	ip, r7
 800480e:	4463      	add	r3, ip
 8004810:	2210      	movs	r2, #16
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e006      	b.n	8004824 <UART_SetConfig+0x1a4>
 8004816:	231b      	movs	r3, #27
 8004818:	2218      	movs	r2, #24
 800481a:	4694      	mov	ip, r2
 800481c:	44bc      	add	ip, r7
 800481e:	4463      	add	r3, ip
 8004820:	2210      	movs	r2, #16
 8004822:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a61      	ldr	r2, [pc, #388]	; (80049b0 <UART_SetConfig+0x330>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d000      	beq.n	8004830 <UART_SetConfig+0x1b0>
 800482e:	e088      	b.n	8004942 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004830:	231b      	movs	r3, #27
 8004832:	2218      	movs	r2, #24
 8004834:	4694      	mov	ip, r2
 8004836:	44bc      	add	ip, r7
 8004838:	4463      	add	r3, ip
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d01d      	beq.n	800487c <UART_SetConfig+0x1fc>
 8004840:	dc20      	bgt.n	8004884 <UART_SetConfig+0x204>
 8004842:	2b04      	cmp	r3, #4
 8004844:	d015      	beq.n	8004872 <UART_SetConfig+0x1f2>
 8004846:	dc1d      	bgt.n	8004884 <UART_SetConfig+0x204>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <UART_SetConfig+0x1d2>
 800484c:	2b02      	cmp	r3, #2
 800484e:	d005      	beq.n	800485c <UART_SetConfig+0x1dc>
 8004850:	e018      	b.n	8004884 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004852:	f7ff fcc7 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8004856:	0003      	movs	r3, r0
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800485a:	e01d      	b.n	8004898 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800485c:	4b57      	ldr	r3, [pc, #348]	; (80049bc <UART_SetConfig+0x33c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	4013      	ands	r3, r2
 8004864:	d002      	beq.n	800486c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004866:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <UART_SetConfig+0x340>)
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800486a:	e015      	b.n	8004898 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800486c:	4b55      	ldr	r3, [pc, #340]	; (80049c4 <UART_SetConfig+0x344>)
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004870:	e012      	b.n	8004898 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004872:	f7ff fc07 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004876:	0003      	movs	r3, r0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800487a:	e00d      	b.n	8004898 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004882:	e009      	b.n	8004898 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004888:	231a      	movs	r3, #26
 800488a:	2218      	movs	r2, #24
 800488c:	4694      	mov	ip, r2
 800488e:	44bc      	add	ip, r7
 8004890:	4463      	add	r3, ip
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
        break;
 8004896:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d100      	bne.n	80048a0 <UART_SetConfig+0x220>
 800489e:	e139      	b.n	8004b14 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	0013      	movs	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d305      	bcc.n	80048bc <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d907      	bls.n	80048cc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80048bc:	231a      	movs	r3, #26
 80048be:	2218      	movs	r2, #24
 80048c0:	4694      	mov	ip, r2
 80048c2:	44bc      	add	ip, r7
 80048c4:	4463      	add	r3, ip
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e123      	b.n	8004b14 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	6939      	ldr	r1, [r7, #16]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	000b      	movs	r3, r1
 80048da:	0e1b      	lsrs	r3, r3, #24
 80048dc:	0010      	movs	r0, r2
 80048de:	0205      	lsls	r5, r0, #8
 80048e0:	431d      	orrs	r5, r3
 80048e2:	000b      	movs	r3, r1
 80048e4:	021c      	lsls	r4, r3, #8
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68b8      	ldr	r0, [r7, #8]
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	1900      	adds	r0, r0, r4
 80048f8:	4169      	adcs	r1, r5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f7fb fd86 	bl	8000418 <__aeabi_uldivmod>
 800490c:	0002      	movs	r2, r0
 800490e:	000b      	movs	r3, r1
 8004910:	0013      	movs	r3, r2
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004916:	23c0      	movs	r3, #192	; 0xc0
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	429a      	cmp	r2, r3
 800491c:	d309      	bcc.n	8004932 <UART_SetConfig+0x2b2>
 800491e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	035b      	lsls	r3, r3, #13
 8004924:	429a      	cmp	r2, r3
 8004926:	d204      	bcs.n	8004932 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492e:	60da      	str	r2, [r3, #12]
 8004930:	e0f0      	b.n	8004b14 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004932:	231a      	movs	r3, #26
 8004934:	2218      	movs	r2, #24
 8004936:	4694      	mov	ip, r2
 8004938:	44bc      	add	ip, r7
 800493a:	4463      	add	r3, ip
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	e0e8      	b.n	8004b14 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	429a      	cmp	r2, r3
 800494c:	d000      	beq.n	8004950 <UART_SetConfig+0x2d0>
 800494e:	e087      	b.n	8004a60 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8004950:	231b      	movs	r3, #27
 8004952:	2218      	movs	r2, #24
 8004954:	4694      	mov	ip, r2
 8004956:	44bc      	add	ip, r7
 8004958:	4463      	add	r3, ip
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d835      	bhi.n	80049cc <UART_SetConfig+0x34c>
 8004960:	009a      	lsls	r2, r3, #2
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <UART_SetConfig+0x348>)
 8004964:	18d3      	adds	r3, r2, r3
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496a:	f7ff fc3b 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 800496e:	0003      	movs	r3, r0
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004972:	e035      	b.n	80049e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7ff fc4c 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 8004978:	0003      	movs	r3, r0
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800497c:	e030      	b.n	80049e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <UART_SetConfig+0x33c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2210      	movs	r2, #16
 8004984:	4013      	ands	r3, r2
 8004986:	d002      	beq.n	800498e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <UART_SetConfig+0x340>)
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800498c:	e028      	b.n	80049e0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <UART_SetConfig+0x344>)
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004992:	e025      	b.n	80049e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004994:	f7ff fb76 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004998:	0003      	movs	r3, r0
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800499c:	e020      	b.n	80049e0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049a4:	e01c      	b.n	80049e0 <UART_SetConfig+0x360>
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	efff69f3 	.word	0xefff69f3
 80049ac:	ffffcfff 	.word	0xffffcfff
 80049b0:	40004800 	.word	0x40004800
 80049b4:	fffff4ff 	.word	0xfffff4ff
 80049b8:	40004400 	.word	0x40004400
 80049bc:	40021000 	.word	0x40021000
 80049c0:	003d0900 	.word	0x003d0900
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	08006170 	.word	0x08006170
      default:
        pclk = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049d0:	231a      	movs	r3, #26
 80049d2:	2218      	movs	r2, #24
 80049d4:	4694      	mov	ip, r2
 80049d6:	44bc      	add	ip, r7
 80049d8:	4463      	add	r3, ip
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
        break;
 80049de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d100      	bne.n	80049e8 <UART_SetConfig+0x368>
 80049e6:	e095      	b.n	8004b14 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	005a      	lsls	r2, r3, #1
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	18d2      	adds	r2, r2, r3
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0019      	movs	r1, r3
 80049fa:	0010      	movs	r0, r2
 80049fc:	f7fb fb96 	bl	800012c <__udivsi3>
 8004a00:	0003      	movs	r3, r0
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2b0f      	cmp	r3, #15
 8004a0a:	d921      	bls.n	8004a50 <UART_SetConfig+0x3d0>
 8004a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	025b      	lsls	r3, r3, #9
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d21c      	bcs.n	8004a50 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	200e      	movs	r0, #14
 8004a1c:	2418      	movs	r4, #24
 8004a1e:	193b      	adds	r3, r7, r4
 8004a20:	181b      	adds	r3, r3, r0
 8004a22:	210f      	movs	r1, #15
 8004a24:	438a      	bics	r2, r1
 8004a26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2207      	movs	r2, #7
 8004a30:	4013      	ands	r3, r2
 8004a32:	b299      	uxth	r1, r3
 8004a34:	193b      	adds	r3, r7, r4
 8004a36:	181b      	adds	r3, r3, r0
 8004a38:	193a      	adds	r2, r7, r4
 8004a3a:	1812      	adds	r2, r2, r0
 8004a3c:	8812      	ldrh	r2, [r2, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	193a      	adds	r2, r7, r4
 8004a48:	1812      	adds	r2, r2, r0
 8004a4a:	8812      	ldrh	r2, [r2, #0]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e061      	b.n	8004b14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004a50:	231a      	movs	r3, #26
 8004a52:	2218      	movs	r2, #24
 8004a54:	4694      	mov	ip, r2
 8004a56:	44bc      	add	ip, r7
 8004a58:	4463      	add	r3, ip
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e059      	b.n	8004b14 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a60:	231b      	movs	r3, #27
 8004a62:	2218      	movs	r2, #24
 8004a64:	4694      	mov	ip, r2
 8004a66:	44bc      	add	ip, r7
 8004a68:	4463      	add	r3, ip
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d822      	bhi.n	8004ab6 <UART_SetConfig+0x436>
 8004a70:	009a      	lsls	r2, r3, #2
 8004a72:	4b30      	ldr	r3, [pc, #192]	; (8004b34 <UART_SetConfig+0x4b4>)
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7a:	f7ff fbb3 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a82:	e022      	b.n	8004aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a84:	f7ff fbc4 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a8c:	e01d      	b.n	8004aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	; (8004b38 <UART_SetConfig+0x4b8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2210      	movs	r2, #16
 8004a94:	4013      	ands	r3, r2
 8004a96:	d002      	beq.n	8004a9e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a98:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <UART_SetConfig+0x4bc>)
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a9c:	e015      	b.n	8004aca <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <UART_SetConfig+0x4c0>)
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aa2:	e012      	b.n	8004aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa4:	f7ff faee 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aac:	e00d      	b.n	8004aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ab4:	e009      	b.n	8004aca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004aba:	231a      	movs	r3, #26
 8004abc:	2218      	movs	r2, #24
 8004abe:	4694      	mov	ip, r2
 8004ac0:	44bc      	add	ip, r7
 8004ac2:	4463      	add	r3, ip
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
        break;
 8004ac8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d021      	beq.n	8004b14 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	085a      	lsrs	r2, r3, #1
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	18d2      	adds	r2, r2, r3
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	0019      	movs	r1, r3
 8004ae0:	0010      	movs	r0, r2
 8004ae2:	f7fb fb23 	bl	800012c <__udivsi3>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	2b0f      	cmp	r3, #15
 8004af0:	d909      	bls.n	8004b06 <UART_SetConfig+0x486>
 8004af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d204      	bcs.n	8004b06 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	e006      	b.n	8004b14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004b06:	231a      	movs	r3, #26
 8004b08:	2218      	movs	r2, #24
 8004b0a:	4694      	mov	ip, r2
 8004b0c:	44bc      	add	ip, r7
 8004b0e:	4463      	add	r3, ip
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2200      	movs	r2, #0
 8004b18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b20:	231a      	movs	r3, #26
 8004b22:	2218      	movs	r2, #24
 8004b24:	4694      	mov	ip, r2
 8004b26:	44bc      	add	ip, r7
 8004b28:	4463      	add	r3, ip
 8004b2a:	781b      	ldrb	r3, [r3, #0]
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b00e      	add	sp, #56	; 0x38
 8004b32:	bdb0      	pop	{r4, r5, r7, pc}
 8004b34:	08006194 	.word	0x08006194
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	003d0900 	.word	0x003d0900
 8004b40:	00f42400 	.word	0x00f42400

08004b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2201      	movs	r2, #1
 8004b52:	4013      	ands	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a4a      	ldr	r2, [pc, #296]	; (8004c88 <UART_AdvFeatureConfig+0x144>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2202      	movs	r2, #2
 8004b74:	4013      	ands	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4a43      	ldr	r2, [pc, #268]	; (8004c8c <UART_AdvFeatureConfig+0x148>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2204      	movs	r2, #4
 8004b96:	4013      	ands	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <UART_AdvFeatureConfig+0x14c>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <UART_AdvFeatureConfig+0x150>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2210      	movs	r2, #16
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <UART_AdvFeatureConfig+0x154>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d00b      	beq.n	8004c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4a25      	ldr	r2, [pc, #148]	; (8004c9c <UART_AdvFeatureConfig+0x158>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2240      	movs	r2, #64	; 0x40
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d01d      	beq.n	8004c5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <UART_AdvFeatureConfig+0x15c>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	035b      	lsls	r3, r3, #13
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d10b      	bne.n	8004c5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <UART_AdvFeatureConfig+0x160>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	0019      	movs	r1, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	4013      	ands	r3, r2
 8004c66:	d00b      	beq.n	8004c80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <UART_AdvFeatureConfig+0x164>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	0019      	movs	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }
}
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b002      	add	sp, #8
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	fffdffff 	.word	0xfffdffff
 8004c8c:	fffeffff 	.word	0xfffeffff
 8004c90:	fffbffff 	.word	0xfffbffff
 8004c94:	ffff7fff 	.word	0xffff7fff
 8004c98:	ffffefff 	.word	0xffffefff
 8004c9c:	ffffdfff 	.word	0xffffdfff
 8004ca0:	ffefffff 	.word	0xffefffff
 8004ca4:	ff9fffff 	.word	0xff9fffff
 8004ca8:	fff7ffff 	.word	0xfff7ffff

08004cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	2100      	movs	r1, #0
 8004cba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cbc:	f7fd fd56 	bl	800276c <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2208      	movs	r2, #8
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d10c      	bne.n	8004cec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2280      	movs	r2, #128	; 0x80
 8004cd6:	0391      	lsls	r1, r2, #14
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <UART_CheckIdleState+0x8c>)
 8004cdc:	9200      	str	r2, [sp, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f000 f82c 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d001      	beq.n	8004cec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e021      	b.n	8004d30 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d10c      	bne.n	8004d14 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	03d1      	lsls	r1, r2, #15
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <UART_CheckIdleState+0x8c>)
 8004d04:	9200      	str	r2, [sp, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f000 f818 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004d0c:	1e03      	subs	r3, r0, #0
 8004d0e:	d001      	beq.n	8004d14 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e00d      	b.n	8004d30 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2274      	movs	r2, #116	; 0x74
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	01ffffff 	.word	0x01ffffff

08004d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b094      	sub	sp, #80	; 0x50
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	1dfb      	adds	r3, r7, #7
 8004d4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	e0a3      	b.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d50:	3301      	adds	r3, #1
 8004d52:	d100      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004d54:	e09f      	b.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fd fd09 	bl	800276c <HAL_GetTick>
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d13d      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
 8004d76:	2301      	movs	r3, #1
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	f383 8810 	msr	PRIMASK, r3
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	494c      	ldr	r1, [pc, #304]	; (8004ec0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004d8e:	400a      	ands	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	f383 8810 	msr	PRIMASK, r3
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	643b      	str	r3, [r7, #64]	; 0x40
 8004da8:	2301      	movs	r3, #1
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	f383 8810 	msr	PRIMASK, r3
}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	438a      	bics	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dca:	f383 8810 	msr	PRIMASK, r3
}
 8004dce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2274      	movs	r2, #116	; 0x74
 8004de0:	2100      	movs	r1, #0
 8004de2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e067      	b.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2204      	movs	r2, #4
 8004df0:	4013      	ands	r3, r2
 8004df2:	d050      	beq.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	401a      	ands	r2, r3
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d146      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	0112      	lsls	r2, r2, #4
 8004e10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e12:	f3ef 8310 	mrs	r3, PRIMASK
 8004e16:	613b      	str	r3, [r7, #16]
  return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f383 8810 	msr	PRIMASK, r3
}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4923      	ldr	r1, [pc, #140]	; (8004ec0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e44:	f3ef 8310 	mrs	r3, PRIMASK
 8004e48:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e4e:	2301      	movs	r3, #1
 8004e50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f383 8810 	msr	PRIMASK, r3
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2101      	movs	r1, #1
 8004e66:	438a      	bics	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]
 8004e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	f383 8810 	msr	PRIMASK, r3
}
 8004e74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2280      	movs	r2, #128	; 0x80
 8004e86:	2120      	movs	r1, #32
 8004e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2274      	movs	r2, #116	; 0x74
 8004e8e:	2100      	movs	r1, #0
 8004e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e010      	b.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	425a      	negs	r2, r3
 8004ea6:	4153      	adcs	r3, r2
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	001a      	movs	r2, r3
 8004eac:	1dfb      	adds	r3, r7, #7
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d100      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004eb4:	e74b      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b014      	add	sp, #80	; 0x50
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	fffffe5f 	.word	0xfffffe5f

08004ec4 <__errno>:
 8004ec4:	4b01      	ldr	r3, [pc, #4]	; (8004ecc <__errno+0x8>)
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	4770      	bx	lr
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20000190 	.word	0x20000190

08004ed0 <__libc_init_array>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	4d0c      	ldr	r5, [pc, #48]	; (8004f08 <__libc_init_array+0x38>)
 8004ed6:	4c0d      	ldr	r4, [pc, #52]	; (8004f0c <__libc_init_array+0x3c>)
 8004ed8:	1b64      	subs	r4, r4, r5
 8004eda:	10a4      	asrs	r4, r4, #2
 8004edc:	42a6      	cmp	r6, r4
 8004ede:	d109      	bne.n	8004ef4 <__libc_init_array+0x24>
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	f001 f8a1 	bl	8006028 <_init>
 8004ee6:	4d0a      	ldr	r5, [pc, #40]	; (8004f10 <__libc_init_array+0x40>)
 8004ee8:	4c0a      	ldr	r4, [pc, #40]	; (8004f14 <__libc_init_array+0x44>)
 8004eea:	1b64      	subs	r4, r4, r5
 8004eec:	10a4      	asrs	r4, r4, #2
 8004eee:	42a6      	cmp	r6, r4
 8004ef0:	d105      	bne.n	8004efe <__libc_init_array+0x2e>
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	00b3      	lsls	r3, r6, #2
 8004ef6:	58eb      	ldr	r3, [r5, r3]
 8004ef8:	4798      	blx	r3
 8004efa:	3601      	adds	r6, #1
 8004efc:	e7ee      	b.n	8004edc <__libc_init_array+0xc>
 8004efe:	00b3      	lsls	r3, r6, #2
 8004f00:	58eb      	ldr	r3, [r5, r3]
 8004f02:	4798      	blx	r3
 8004f04:	3601      	adds	r6, #1
 8004f06:	e7f2      	b.n	8004eee <__libc_init_array+0x1e>
 8004f08:	08006258 	.word	0x08006258
 8004f0c:	08006258 	.word	0x08006258
 8004f10:	08006258 	.word	0x08006258
 8004f14:	0800625c 	.word	0x0800625c

08004f18 <memcpy>:
 8004f18:	2300      	movs	r3, #0
 8004f1a:	b510      	push	{r4, lr}
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d100      	bne.n	8004f22 <memcpy+0xa>
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	5ccc      	ldrb	r4, [r1, r3]
 8004f24:	54c4      	strb	r4, [r0, r3]
 8004f26:	3301      	adds	r3, #1
 8004f28:	e7f8      	b.n	8004f1c <memcpy+0x4>

08004f2a <memset>:
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	1882      	adds	r2, r0, r2
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d100      	bne.n	8004f34 <memset+0xa>
 8004f32:	4770      	bx	lr
 8004f34:	7019      	strb	r1, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	e7f9      	b.n	8004f2e <memset+0x4>
	...

08004f3c <_puts_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	0005      	movs	r5, r0
 8004f40:	000e      	movs	r6, r1
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d004      	beq.n	8004f50 <_puts_r+0x14>
 8004f46:	6983      	ldr	r3, [r0, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <_puts_r+0x14>
 8004f4c:	f000 faa4 	bl	8005498 <__sinit>
 8004f50:	69ab      	ldr	r3, [r5, #24]
 8004f52:	68ac      	ldr	r4, [r5, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <_puts_r+0x22>
 8004f58:	0028      	movs	r0, r5
 8004f5a:	f000 fa9d 	bl	8005498 <__sinit>
 8004f5e:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <_puts_r+0xd8>)
 8004f60:	429c      	cmp	r4, r3
 8004f62:	d122      	bne.n	8004faa <_puts_r+0x6e>
 8004f64:	686c      	ldr	r4, [r5, #4]
 8004f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f68:	07db      	lsls	r3, r3, #31
 8004f6a:	d405      	bmi.n	8004f78 <_puts_r+0x3c>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	059b      	lsls	r3, r3, #22
 8004f70:	d402      	bmi.n	8004f78 <_puts_r+0x3c>
 8004f72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f74:	f000 fb31 	bl	80055da <__retarget_lock_acquire_recursive>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	071b      	lsls	r3, r3, #28
 8004f7c:	d502      	bpl.n	8004f84 <_puts_r+0x48>
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d129      	bne.n	8004fd8 <_puts_r+0x9c>
 8004f84:	0021      	movs	r1, r4
 8004f86:	0028      	movs	r0, r5
 8004f88:	f000 f8e0 	bl	800514c <__swsetup_r>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d023      	beq.n	8004fd8 <_puts_r+0x9c>
 8004f90:	2501      	movs	r5, #1
 8004f92:	426d      	negs	r5, r5
 8004f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f96:	07db      	lsls	r3, r3, #31
 8004f98:	d405      	bmi.n	8004fa6 <_puts_r+0x6a>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	059b      	lsls	r3, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_puts_r+0x6a>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa2:	f000 fb1b 	bl	80055dc <__retarget_lock_release_recursive>
 8004fa6:	0028      	movs	r0, r5
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <_puts_r+0xdc>)
 8004fac:	429c      	cmp	r4, r3
 8004fae:	d101      	bne.n	8004fb4 <_puts_r+0x78>
 8004fb0:	68ac      	ldr	r4, [r5, #8]
 8004fb2:	e7d8      	b.n	8004f66 <_puts_r+0x2a>
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <_puts_r+0xe0>)
 8004fb6:	429c      	cmp	r4, r3
 8004fb8:	d1d5      	bne.n	8004f66 <_puts_r+0x2a>
 8004fba:	68ec      	ldr	r4, [r5, #12]
 8004fbc:	e7d3      	b.n	8004f66 <_puts_r+0x2a>
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	60a3      	str	r3, [r4, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da04      	bge.n	8004fd0 <_puts_r+0x94>
 8004fc6:	69a2      	ldr	r2, [r4, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	dc16      	bgt.n	8004ffa <_puts_r+0xbe>
 8004fcc:	290a      	cmp	r1, #10
 8004fce:	d014      	beq.n	8004ffa <_puts_r+0xbe>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	6022      	str	r2, [r4, #0]
 8004fd6:	7019      	strb	r1, [r3, #0]
 8004fd8:	68a3      	ldr	r3, [r4, #8]
 8004fda:	7831      	ldrb	r1, [r6, #0]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d1ed      	bne.n	8004fbe <_puts_r+0x82>
 8004fe2:	60a3      	str	r3, [r4, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	da0f      	bge.n	8005008 <_puts_r+0xcc>
 8004fe8:	0028      	movs	r0, r5
 8004fea:	0022      	movs	r2, r4
 8004fec:	310a      	adds	r1, #10
 8004fee:	f000 f857 	bl	80050a0 <__swbuf_r>
 8004ff2:	250a      	movs	r5, #10
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d1cd      	bne.n	8004f94 <_puts_r+0x58>
 8004ff8:	e7ca      	b.n	8004f90 <_puts_r+0x54>
 8004ffa:	0022      	movs	r2, r4
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	f000 f84f 	bl	80050a0 <__swbuf_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d1e8      	bne.n	8004fd8 <_puts_r+0x9c>
 8005006:	e7c3      	b.n	8004f90 <_puts_r+0x54>
 8005008:	250a      	movs	r5, #10
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	6022      	str	r2, [r4, #0]
 8005010:	701d      	strb	r5, [r3, #0]
 8005012:	e7bf      	b.n	8004f94 <_puts_r+0x58>
 8005014:	080061dc 	.word	0x080061dc
 8005018:	080061fc 	.word	0x080061fc
 800501c:	080061bc 	.word	0x080061bc

08005020 <puts>:
 8005020:	b510      	push	{r4, lr}
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <puts+0x10>)
 8005024:	0001      	movs	r1, r0
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	f7ff ff88 	bl	8004f3c <_puts_r>
 800502c:	bd10      	pop	{r4, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	20000190 	.word	0x20000190

08005034 <siprintf>:
 8005034:	b40e      	push	{r1, r2, r3}
 8005036:	b500      	push	{lr}
 8005038:	490b      	ldr	r1, [pc, #44]	; (8005068 <siprintf+0x34>)
 800503a:	b09c      	sub	sp, #112	; 0x70
 800503c:	ab1d      	add	r3, sp, #116	; 0x74
 800503e:	9002      	str	r0, [sp, #8]
 8005040:	9006      	str	r0, [sp, #24]
 8005042:	9107      	str	r1, [sp, #28]
 8005044:	9104      	str	r1, [sp, #16]
 8005046:	4809      	ldr	r0, [pc, #36]	; (800506c <siprintf+0x38>)
 8005048:	4909      	ldr	r1, [pc, #36]	; (8005070 <siprintf+0x3c>)
 800504a:	cb04      	ldmia	r3!, {r2}
 800504c:	9105      	str	r1, [sp, #20]
 800504e:	6800      	ldr	r0, [r0, #0]
 8005050:	a902      	add	r1, sp, #8
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	f000 fc3a 	bl	80058cc <_svfiprintf_r>
 8005058:	2300      	movs	r3, #0
 800505a:	9a02      	ldr	r2, [sp, #8]
 800505c:	7013      	strb	r3, [r2, #0]
 800505e:	b01c      	add	sp, #112	; 0x70
 8005060:	bc08      	pop	{r3}
 8005062:	b003      	add	sp, #12
 8005064:	4718      	bx	r3
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	7fffffff 	.word	0x7fffffff
 800506c:	20000190 	.word	0x20000190
 8005070:	ffff0208 	.word	0xffff0208

08005074 <strncat>:
 8005074:	0003      	movs	r3, r0
 8005076:	b530      	push	{r4, r5, lr}
 8005078:	781c      	ldrb	r4, [r3, #0]
 800507a:	2c00      	cmp	r4, #0
 800507c:	d108      	bne.n	8005090 <strncat+0x1c>
 800507e:	1889      	adds	r1, r1, r2
 8005080:	2a00      	cmp	r2, #0
 8005082:	d004      	beq.n	800508e <strncat+0x1a>
 8005084:	4255      	negs	r5, r2
 8005086:	5d4d      	ldrb	r5, [r1, r5]
 8005088:	701d      	strb	r5, [r3, #0]
 800508a:	2d00      	cmp	r5, #0
 800508c:	d102      	bne.n	8005094 <strncat+0x20>
 800508e:	bd30      	pop	{r4, r5, pc}
 8005090:	3301      	adds	r3, #1
 8005092:	e7f1      	b.n	8005078 <strncat+0x4>
 8005094:	2a01      	cmp	r2, #1
 8005096:	d100      	bne.n	800509a <strncat+0x26>
 8005098:	705c      	strb	r4, [r3, #1]
 800509a:	3301      	adds	r3, #1
 800509c:	3a01      	subs	r2, #1
 800509e:	e7ef      	b.n	8005080 <strncat+0xc>

080050a0 <__swbuf_r>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	0005      	movs	r5, r0
 80050a4:	000e      	movs	r6, r1
 80050a6:	0014      	movs	r4, r2
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d004      	beq.n	80050b6 <__swbuf_r+0x16>
 80050ac:	6983      	ldr	r3, [r0, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <__swbuf_r+0x16>
 80050b2:	f000 f9f1 	bl	8005498 <__sinit>
 80050b6:	4b22      	ldr	r3, [pc, #136]	; (8005140 <__swbuf_r+0xa0>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d12e      	bne.n	800511a <__swbuf_r+0x7a>
 80050bc:	686c      	ldr	r4, [r5, #4]
 80050be:	69a3      	ldr	r3, [r4, #24]
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	d532      	bpl.n	800512e <__swbuf_r+0x8e>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02f      	beq.n	800512e <__swbuf_r+0x8e>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	6922      	ldr	r2, [r4, #16]
 80050d2:	b2f7      	uxtb	r7, r6
 80050d4:	1a98      	subs	r0, r3, r2
 80050d6:	6963      	ldr	r3, [r4, #20]
 80050d8:	b2f6      	uxtb	r6, r6
 80050da:	4283      	cmp	r3, r0
 80050dc:	dc05      	bgt.n	80050ea <__swbuf_r+0x4a>
 80050de:	0021      	movs	r1, r4
 80050e0:	0028      	movs	r0, r5
 80050e2:	f000 f937 	bl	8005354 <_fflush_r>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d127      	bne.n	800513a <__swbuf_r+0x9a>
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	3001      	adds	r0, #1
 80050ee:	3b01      	subs	r3, #1
 80050f0:	60a3      	str	r3, [r4, #8]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	6022      	str	r2, [r4, #0]
 80050f8:	701f      	strb	r7, [r3, #0]
 80050fa:	6963      	ldr	r3, [r4, #20]
 80050fc:	4283      	cmp	r3, r0
 80050fe:	d004      	beq.n	800510a <__swbuf_r+0x6a>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	07db      	lsls	r3, r3, #31
 8005104:	d507      	bpl.n	8005116 <__swbuf_r+0x76>
 8005106:	2e0a      	cmp	r6, #10
 8005108:	d105      	bne.n	8005116 <__swbuf_r+0x76>
 800510a:	0021      	movs	r1, r4
 800510c:	0028      	movs	r0, r5
 800510e:	f000 f921 	bl	8005354 <_fflush_r>
 8005112:	2800      	cmp	r0, #0
 8005114:	d111      	bne.n	800513a <__swbuf_r+0x9a>
 8005116:	0030      	movs	r0, r6
 8005118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <__swbuf_r+0xa4>)
 800511c:	429c      	cmp	r4, r3
 800511e:	d101      	bne.n	8005124 <__swbuf_r+0x84>
 8005120:	68ac      	ldr	r4, [r5, #8]
 8005122:	e7cc      	b.n	80050be <__swbuf_r+0x1e>
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <__swbuf_r+0xa8>)
 8005126:	429c      	cmp	r4, r3
 8005128:	d1c9      	bne.n	80050be <__swbuf_r+0x1e>
 800512a:	68ec      	ldr	r4, [r5, #12]
 800512c:	e7c7      	b.n	80050be <__swbuf_r+0x1e>
 800512e:	0021      	movs	r1, r4
 8005130:	0028      	movs	r0, r5
 8005132:	f000 f80b 	bl	800514c <__swsetup_r>
 8005136:	2800      	cmp	r0, #0
 8005138:	d0c9      	beq.n	80050ce <__swbuf_r+0x2e>
 800513a:	2601      	movs	r6, #1
 800513c:	4276      	negs	r6, r6
 800513e:	e7ea      	b.n	8005116 <__swbuf_r+0x76>
 8005140:	080061dc 	.word	0x080061dc
 8005144:	080061fc 	.word	0x080061fc
 8005148:	080061bc 	.word	0x080061bc

0800514c <__swsetup_r>:
 800514c:	4b37      	ldr	r3, [pc, #220]	; (800522c <__swsetup_r+0xe0>)
 800514e:	b570      	push	{r4, r5, r6, lr}
 8005150:	681d      	ldr	r5, [r3, #0]
 8005152:	0006      	movs	r6, r0
 8005154:	000c      	movs	r4, r1
 8005156:	2d00      	cmp	r5, #0
 8005158:	d005      	beq.n	8005166 <__swsetup_r+0x1a>
 800515a:	69ab      	ldr	r3, [r5, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <__swsetup_r+0x1a>
 8005160:	0028      	movs	r0, r5
 8005162:	f000 f999 	bl	8005498 <__sinit>
 8005166:	4b32      	ldr	r3, [pc, #200]	; (8005230 <__swsetup_r+0xe4>)
 8005168:	429c      	cmp	r4, r3
 800516a:	d10f      	bne.n	800518c <__swsetup_r+0x40>
 800516c:	686c      	ldr	r4, [r5, #4]
 800516e:	230c      	movs	r3, #12
 8005170:	5ee2      	ldrsh	r2, [r4, r3]
 8005172:	b293      	uxth	r3, r2
 8005174:	0711      	lsls	r1, r2, #28
 8005176:	d42d      	bmi.n	80051d4 <__swsetup_r+0x88>
 8005178:	06d9      	lsls	r1, r3, #27
 800517a:	d411      	bmi.n	80051a0 <__swsetup_r+0x54>
 800517c:	2309      	movs	r3, #9
 800517e:	2001      	movs	r0, #1
 8005180:	6033      	str	r3, [r6, #0]
 8005182:	3337      	adds	r3, #55	; 0x37
 8005184:	4313      	orrs	r3, r2
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	4240      	negs	r0, r0
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	4b29      	ldr	r3, [pc, #164]	; (8005234 <__swsetup_r+0xe8>)
 800518e:	429c      	cmp	r4, r3
 8005190:	d101      	bne.n	8005196 <__swsetup_r+0x4a>
 8005192:	68ac      	ldr	r4, [r5, #8]
 8005194:	e7eb      	b.n	800516e <__swsetup_r+0x22>
 8005196:	4b28      	ldr	r3, [pc, #160]	; (8005238 <__swsetup_r+0xec>)
 8005198:	429c      	cmp	r4, r3
 800519a:	d1e8      	bne.n	800516e <__swsetup_r+0x22>
 800519c:	68ec      	ldr	r4, [r5, #12]
 800519e:	e7e6      	b.n	800516e <__swsetup_r+0x22>
 80051a0:	075b      	lsls	r3, r3, #29
 80051a2:	d513      	bpl.n	80051cc <__swsetup_r+0x80>
 80051a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051a6:	2900      	cmp	r1, #0
 80051a8:	d008      	beq.n	80051bc <__swsetup_r+0x70>
 80051aa:	0023      	movs	r3, r4
 80051ac:	3344      	adds	r3, #68	; 0x44
 80051ae:	4299      	cmp	r1, r3
 80051b0:	d002      	beq.n	80051b8 <__swsetup_r+0x6c>
 80051b2:	0030      	movs	r0, r6
 80051b4:	f000 fa80 	bl	80056b8 <_free_r>
 80051b8:	2300      	movs	r3, #0
 80051ba:	6363      	str	r3, [r4, #52]	; 0x34
 80051bc:	2224      	movs	r2, #36	; 0x24
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	4393      	bics	r3, r2
 80051c2:	81a3      	strh	r3, [r4, #12]
 80051c4:	2300      	movs	r3, #0
 80051c6:	6063      	str	r3, [r4, #4]
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	2308      	movs	r3, #8
 80051ce:	89a2      	ldrh	r2, [r4, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10b      	bne.n	80051f2 <__swsetup_r+0xa6>
 80051da:	21a0      	movs	r1, #160	; 0xa0
 80051dc:	2280      	movs	r2, #128	; 0x80
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	0089      	lsls	r1, r1, #2
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	400b      	ands	r3, r1
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <__swsetup_r+0xa6>
 80051ea:	0021      	movs	r1, r4
 80051ec:	0030      	movs	r0, r6
 80051ee:	f000 fa1f 	bl	8005630 <__smakebuf_r>
 80051f2:	220c      	movs	r2, #12
 80051f4:	5ea3      	ldrsh	r3, [r4, r2]
 80051f6:	2001      	movs	r0, #1
 80051f8:	001a      	movs	r2, r3
 80051fa:	b299      	uxth	r1, r3
 80051fc:	4002      	ands	r2, r0
 80051fe:	4203      	tst	r3, r0
 8005200:	d00f      	beq.n	8005222 <__swsetup_r+0xd6>
 8005202:	2200      	movs	r2, #0
 8005204:	60a2      	str	r2, [r4, #8]
 8005206:	6962      	ldr	r2, [r4, #20]
 8005208:	4252      	negs	r2, r2
 800520a:	61a2      	str	r2, [r4, #24]
 800520c:	2000      	movs	r0, #0
 800520e:	6922      	ldr	r2, [r4, #16]
 8005210:	4282      	cmp	r2, r0
 8005212:	d1ba      	bne.n	800518a <__swsetup_r+0x3e>
 8005214:	060a      	lsls	r2, r1, #24
 8005216:	d5b8      	bpl.n	800518a <__swsetup_r+0x3e>
 8005218:	2240      	movs	r2, #64	; 0x40
 800521a:	4313      	orrs	r3, r2
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	3801      	subs	r0, #1
 8005220:	e7b3      	b.n	800518a <__swsetup_r+0x3e>
 8005222:	0788      	lsls	r0, r1, #30
 8005224:	d400      	bmi.n	8005228 <__swsetup_r+0xdc>
 8005226:	6962      	ldr	r2, [r4, #20]
 8005228:	60a2      	str	r2, [r4, #8]
 800522a:	e7ef      	b.n	800520c <__swsetup_r+0xc0>
 800522c:	20000190 	.word	0x20000190
 8005230:	080061dc 	.word	0x080061dc
 8005234:	080061fc 	.word	0x080061fc
 8005238:	080061bc 	.word	0x080061bc

0800523c <__sflush_r>:
 800523c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523e:	898b      	ldrh	r3, [r1, #12]
 8005240:	0005      	movs	r5, r0
 8005242:	000c      	movs	r4, r1
 8005244:	071a      	lsls	r2, r3, #28
 8005246:	d45f      	bmi.n	8005308 <__sflush_r+0xcc>
 8005248:	684a      	ldr	r2, [r1, #4]
 800524a:	2a00      	cmp	r2, #0
 800524c:	dc04      	bgt.n	8005258 <__sflush_r+0x1c>
 800524e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005250:	2a00      	cmp	r2, #0
 8005252:	dc01      	bgt.n	8005258 <__sflush_r+0x1c>
 8005254:	2000      	movs	r0, #0
 8005256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005258:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800525a:	2f00      	cmp	r7, #0
 800525c:	d0fa      	beq.n	8005254 <__sflush_r+0x18>
 800525e:	2200      	movs	r2, #0
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	682e      	ldr	r6, [r5, #0]
 8005264:	602a      	str	r2, [r5, #0]
 8005266:	001a      	movs	r2, r3
 8005268:	0149      	lsls	r1, r1, #5
 800526a:	400a      	ands	r2, r1
 800526c:	420b      	tst	r3, r1
 800526e:	d034      	beq.n	80052da <__sflush_r+0x9e>
 8005270:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	075b      	lsls	r3, r3, #29
 8005276:	d506      	bpl.n	8005286 <__sflush_r+0x4a>
 8005278:	6863      	ldr	r3, [r4, #4]
 800527a:	1ac0      	subs	r0, r0, r3
 800527c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <__sflush_r+0x4a>
 8005282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005284:	1ac0      	subs	r0, r0, r3
 8005286:	0002      	movs	r2, r0
 8005288:	6a21      	ldr	r1, [r4, #32]
 800528a:	2300      	movs	r3, #0
 800528c:	0028      	movs	r0, r5
 800528e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005290:	47b8      	blx	r7
 8005292:	89a1      	ldrh	r1, [r4, #12]
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d106      	bne.n	80052a6 <__sflush_r+0x6a>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	2b1d      	cmp	r3, #29
 800529c:	d831      	bhi.n	8005302 <__sflush_r+0xc6>
 800529e:	4a2c      	ldr	r2, [pc, #176]	; (8005350 <__sflush_r+0x114>)
 80052a0:	40da      	lsrs	r2, r3
 80052a2:	07d3      	lsls	r3, r2, #31
 80052a4:	d52d      	bpl.n	8005302 <__sflush_r+0xc6>
 80052a6:	2300      	movs	r3, #0
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	04cb      	lsls	r3, r1, #19
 80052b0:	d505      	bpl.n	80052be <__sflush_r+0x82>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d102      	bne.n	80052bc <__sflush_r+0x80>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d100      	bne.n	80052be <__sflush_r+0x82>
 80052bc:	6560      	str	r0, [r4, #84]	; 0x54
 80052be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052c0:	602e      	str	r6, [r5, #0]
 80052c2:	2900      	cmp	r1, #0
 80052c4:	d0c6      	beq.n	8005254 <__sflush_r+0x18>
 80052c6:	0023      	movs	r3, r4
 80052c8:	3344      	adds	r3, #68	; 0x44
 80052ca:	4299      	cmp	r1, r3
 80052cc:	d002      	beq.n	80052d4 <__sflush_r+0x98>
 80052ce:	0028      	movs	r0, r5
 80052d0:	f000 f9f2 	bl	80056b8 <_free_r>
 80052d4:	2000      	movs	r0, #0
 80052d6:	6360      	str	r0, [r4, #52]	; 0x34
 80052d8:	e7bd      	b.n	8005256 <__sflush_r+0x1a>
 80052da:	2301      	movs	r3, #1
 80052dc:	0028      	movs	r0, r5
 80052de:	6a21      	ldr	r1, [r4, #32]
 80052e0:	47b8      	blx	r7
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	d1c5      	bne.n	8005272 <__sflush_r+0x36>
 80052e6:	682b      	ldr	r3, [r5, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0c2      	beq.n	8005272 <__sflush_r+0x36>
 80052ec:	2b1d      	cmp	r3, #29
 80052ee:	d001      	beq.n	80052f4 <__sflush_r+0xb8>
 80052f0:	2b16      	cmp	r3, #22
 80052f2:	d101      	bne.n	80052f8 <__sflush_r+0xbc>
 80052f4:	602e      	str	r6, [r5, #0]
 80052f6:	e7ad      	b.n	8005254 <__sflush_r+0x18>
 80052f8:	2340      	movs	r3, #64	; 0x40
 80052fa:	89a2      	ldrh	r2, [r4, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	e7a9      	b.n	8005256 <__sflush_r+0x1a>
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	430b      	orrs	r3, r1
 8005306:	e7fa      	b.n	80052fe <__sflush_r+0xc2>
 8005308:	690f      	ldr	r7, [r1, #16]
 800530a:	2f00      	cmp	r7, #0
 800530c:	d0a2      	beq.n	8005254 <__sflush_r+0x18>
 800530e:	680a      	ldr	r2, [r1, #0]
 8005310:	600f      	str	r7, [r1, #0]
 8005312:	1bd2      	subs	r2, r2, r7
 8005314:	9201      	str	r2, [sp, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	079b      	lsls	r3, r3, #30
 800531a:	d100      	bne.n	800531e <__sflush_r+0xe2>
 800531c:	694a      	ldr	r2, [r1, #20]
 800531e:	60a2      	str	r2, [r4, #8]
 8005320:	9b01      	ldr	r3, [sp, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	dc00      	bgt.n	8005328 <__sflush_r+0xec>
 8005326:	e795      	b.n	8005254 <__sflush_r+0x18>
 8005328:	003a      	movs	r2, r7
 800532a:	0028      	movs	r0, r5
 800532c:	9b01      	ldr	r3, [sp, #4]
 800532e:	6a21      	ldr	r1, [r4, #32]
 8005330:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005332:	47b0      	blx	r6
 8005334:	2800      	cmp	r0, #0
 8005336:	dc06      	bgt.n	8005346 <__sflush_r+0x10a>
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	2001      	movs	r0, #1
 800533c:	89a2      	ldrh	r2, [r4, #12]
 800533e:	4240      	negs	r0, r0
 8005340:	4313      	orrs	r3, r2
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	e787      	b.n	8005256 <__sflush_r+0x1a>
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	183f      	adds	r7, r7, r0
 800534a:	1a1b      	subs	r3, r3, r0
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	e7e7      	b.n	8005320 <__sflush_r+0xe4>
 8005350:	20400001 	.word	0x20400001

08005354 <_fflush_r>:
 8005354:	690b      	ldr	r3, [r1, #16]
 8005356:	b570      	push	{r4, r5, r6, lr}
 8005358:	0005      	movs	r5, r0
 800535a:	000c      	movs	r4, r1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <_fflush_r+0x12>
 8005360:	2500      	movs	r5, #0
 8005362:	0028      	movs	r0, r5
 8005364:	bd70      	pop	{r4, r5, r6, pc}
 8005366:	2800      	cmp	r0, #0
 8005368:	d004      	beq.n	8005374 <_fflush_r+0x20>
 800536a:	6983      	ldr	r3, [r0, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <_fflush_r+0x20>
 8005370:	f000 f892 	bl	8005498 <__sinit>
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <_fflush_r+0x74>)
 8005376:	429c      	cmp	r4, r3
 8005378:	d11b      	bne.n	80053b2 <_fflush_r+0x5e>
 800537a:	686c      	ldr	r4, [r5, #4]
 800537c:	220c      	movs	r2, #12
 800537e:	5ea3      	ldrsh	r3, [r4, r2]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0ed      	beq.n	8005360 <_fflush_r+0xc>
 8005384:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005386:	07d2      	lsls	r2, r2, #31
 8005388:	d404      	bmi.n	8005394 <_fflush_r+0x40>
 800538a:	059b      	lsls	r3, r3, #22
 800538c:	d402      	bmi.n	8005394 <_fflush_r+0x40>
 800538e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005390:	f000 f923 	bl	80055da <__retarget_lock_acquire_recursive>
 8005394:	0028      	movs	r0, r5
 8005396:	0021      	movs	r1, r4
 8005398:	f7ff ff50 	bl	800523c <__sflush_r>
 800539c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800539e:	0005      	movs	r5, r0
 80053a0:	07db      	lsls	r3, r3, #31
 80053a2:	d4de      	bmi.n	8005362 <_fflush_r+0xe>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	059b      	lsls	r3, r3, #22
 80053a8:	d4db      	bmi.n	8005362 <_fflush_r+0xe>
 80053aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ac:	f000 f916 	bl	80055dc <__retarget_lock_release_recursive>
 80053b0:	e7d7      	b.n	8005362 <_fflush_r+0xe>
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <_fflush_r+0x78>)
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d101      	bne.n	80053bc <_fflush_r+0x68>
 80053b8:	68ac      	ldr	r4, [r5, #8]
 80053ba:	e7df      	b.n	800537c <_fflush_r+0x28>
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <_fflush_r+0x7c>)
 80053be:	429c      	cmp	r4, r3
 80053c0:	d1dc      	bne.n	800537c <_fflush_r+0x28>
 80053c2:	68ec      	ldr	r4, [r5, #12]
 80053c4:	e7da      	b.n	800537c <_fflush_r+0x28>
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	080061dc 	.word	0x080061dc
 80053cc:	080061fc 	.word	0x080061fc
 80053d0:	080061bc 	.word	0x080061bc

080053d4 <std>:
 80053d4:	2300      	movs	r3, #0
 80053d6:	b510      	push	{r4, lr}
 80053d8:	0004      	movs	r4, r0
 80053da:	6003      	str	r3, [r0, #0]
 80053dc:	6043      	str	r3, [r0, #4]
 80053de:	6083      	str	r3, [r0, #8]
 80053e0:	8181      	strh	r1, [r0, #12]
 80053e2:	6643      	str	r3, [r0, #100]	; 0x64
 80053e4:	0019      	movs	r1, r3
 80053e6:	81c2      	strh	r2, [r0, #14]
 80053e8:	6103      	str	r3, [r0, #16]
 80053ea:	6143      	str	r3, [r0, #20]
 80053ec:	6183      	str	r3, [r0, #24]
 80053ee:	2208      	movs	r2, #8
 80053f0:	305c      	adds	r0, #92	; 0x5c
 80053f2:	f7ff fd9a 	bl	8004f2a <memset>
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <std+0x38>)
 80053f8:	6263      	str	r3, [r4, #36]	; 0x24
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <std+0x3c>)
 80053fc:	6224      	str	r4, [r4, #32]
 80053fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <std+0x40>)
 8005402:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <std+0x44>)
 8005406:	6323      	str	r3, [r4, #48]	; 0x30
 8005408:	bd10      	pop	{r4, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	08005df5 	.word	0x08005df5
 8005410:	08005e1d 	.word	0x08005e1d
 8005414:	08005e55 	.word	0x08005e55
 8005418:	08005e81 	.word	0x08005e81

0800541c <_cleanup_r>:
 800541c:	b510      	push	{r4, lr}
 800541e:	4902      	ldr	r1, [pc, #8]	; (8005428 <_cleanup_r+0xc>)
 8005420:	f000 f8ba 	bl	8005598 <_fwalk_reent>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	08005355 	.word	0x08005355

0800542c <__sfmoreglue>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	2568      	movs	r5, #104	; 0x68
 8005430:	1e4a      	subs	r2, r1, #1
 8005432:	4355      	muls	r5, r2
 8005434:	000e      	movs	r6, r1
 8005436:	0029      	movs	r1, r5
 8005438:	3174      	adds	r1, #116	; 0x74
 800543a:	f000 f987 	bl	800574c <_malloc_r>
 800543e:	1e04      	subs	r4, r0, #0
 8005440:	d008      	beq.n	8005454 <__sfmoreglue+0x28>
 8005442:	2100      	movs	r1, #0
 8005444:	002a      	movs	r2, r5
 8005446:	6001      	str	r1, [r0, #0]
 8005448:	6046      	str	r6, [r0, #4]
 800544a:	300c      	adds	r0, #12
 800544c:	60a0      	str	r0, [r4, #8]
 800544e:	3268      	adds	r2, #104	; 0x68
 8005450:	f7ff fd6b 	bl	8004f2a <memset>
 8005454:	0020      	movs	r0, r4
 8005456:	bd70      	pop	{r4, r5, r6, pc}

08005458 <__sfp_lock_acquire>:
 8005458:	b510      	push	{r4, lr}
 800545a:	4802      	ldr	r0, [pc, #8]	; (8005464 <__sfp_lock_acquire+0xc>)
 800545c:	f000 f8bd 	bl	80055da <__retarget_lock_acquire_recursive>
 8005460:	bd10      	pop	{r4, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	20000350 	.word	0x20000350

08005468 <__sfp_lock_release>:
 8005468:	b510      	push	{r4, lr}
 800546a:	4802      	ldr	r0, [pc, #8]	; (8005474 <__sfp_lock_release+0xc>)
 800546c:	f000 f8b6 	bl	80055dc <__retarget_lock_release_recursive>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	20000350 	.word	0x20000350

08005478 <__sinit_lock_acquire>:
 8005478:	b510      	push	{r4, lr}
 800547a:	4802      	ldr	r0, [pc, #8]	; (8005484 <__sinit_lock_acquire+0xc>)
 800547c:	f000 f8ad 	bl	80055da <__retarget_lock_acquire_recursive>
 8005480:	bd10      	pop	{r4, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	2000034b 	.word	0x2000034b

08005488 <__sinit_lock_release>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4802      	ldr	r0, [pc, #8]	; (8005494 <__sinit_lock_release+0xc>)
 800548c:	f000 f8a6 	bl	80055dc <__retarget_lock_release_recursive>
 8005490:	bd10      	pop	{r4, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	2000034b 	.word	0x2000034b

08005498 <__sinit>:
 8005498:	b513      	push	{r0, r1, r4, lr}
 800549a:	0004      	movs	r4, r0
 800549c:	f7ff ffec 	bl	8005478 <__sinit_lock_acquire>
 80054a0:	69a3      	ldr	r3, [r4, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <__sinit+0x14>
 80054a6:	f7ff ffef 	bl	8005488 <__sinit_lock_release>
 80054aa:	bd13      	pop	{r0, r1, r4, pc}
 80054ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80054ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80054b0:	6523      	str	r3, [r4, #80]	; 0x50
 80054b2:	4b13      	ldr	r3, [pc, #76]	; (8005500 <__sinit+0x68>)
 80054b4:	4a13      	ldr	r2, [pc, #76]	; (8005504 <__sinit+0x6c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d101      	bne.n	80054c4 <__sinit+0x2c>
 80054c0:	2301      	movs	r3, #1
 80054c2:	61a3      	str	r3, [r4, #24]
 80054c4:	0020      	movs	r0, r4
 80054c6:	f000 f81f 	bl	8005508 <__sfp>
 80054ca:	6060      	str	r0, [r4, #4]
 80054cc:	0020      	movs	r0, r4
 80054ce:	f000 f81b 	bl	8005508 <__sfp>
 80054d2:	60a0      	str	r0, [r4, #8]
 80054d4:	0020      	movs	r0, r4
 80054d6:	f000 f817 	bl	8005508 <__sfp>
 80054da:	2200      	movs	r2, #0
 80054dc:	2104      	movs	r1, #4
 80054de:	60e0      	str	r0, [r4, #12]
 80054e0:	6860      	ldr	r0, [r4, #4]
 80054e2:	f7ff ff77 	bl	80053d4 <std>
 80054e6:	2201      	movs	r2, #1
 80054e8:	2109      	movs	r1, #9
 80054ea:	68a0      	ldr	r0, [r4, #8]
 80054ec:	f7ff ff72 	bl	80053d4 <std>
 80054f0:	2202      	movs	r2, #2
 80054f2:	2112      	movs	r1, #18
 80054f4:	68e0      	ldr	r0, [r4, #12]
 80054f6:	f7ff ff6d 	bl	80053d4 <std>
 80054fa:	2301      	movs	r3, #1
 80054fc:	61a3      	str	r3, [r4, #24]
 80054fe:	e7d2      	b.n	80054a6 <__sinit+0xe>
 8005500:	080061b8 	.word	0x080061b8
 8005504:	0800541d 	.word	0x0800541d

08005508 <__sfp>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	0007      	movs	r7, r0
 800550c:	f7ff ffa4 	bl	8005458 <__sfp_lock_acquire>
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <__sfp+0x88>)
 8005512:	681e      	ldr	r6, [r3, #0]
 8005514:	69b3      	ldr	r3, [r6, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <__sfp+0x18>
 800551a:	0030      	movs	r0, r6
 800551c:	f7ff ffbc 	bl	8005498 <__sinit>
 8005520:	3648      	adds	r6, #72	; 0x48
 8005522:	68b4      	ldr	r4, [r6, #8]
 8005524:	6873      	ldr	r3, [r6, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	d504      	bpl.n	8005534 <__sfp+0x2c>
 800552a:	6833      	ldr	r3, [r6, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d022      	beq.n	8005576 <__sfp+0x6e>
 8005530:	6836      	ldr	r6, [r6, #0]
 8005532:	e7f6      	b.n	8005522 <__sfp+0x1a>
 8005534:	220c      	movs	r2, #12
 8005536:	5ea5      	ldrsh	r5, [r4, r2]
 8005538:	2d00      	cmp	r5, #0
 800553a:	d11a      	bne.n	8005572 <__sfp+0x6a>
 800553c:	0020      	movs	r0, r4
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <__sfp+0x8c>)
 8005540:	3058      	adds	r0, #88	; 0x58
 8005542:	60e3      	str	r3, [r4, #12]
 8005544:	6665      	str	r5, [r4, #100]	; 0x64
 8005546:	f000 f847 	bl	80055d8 <__retarget_lock_init_recursive>
 800554a:	f7ff ff8d 	bl	8005468 <__sfp_lock_release>
 800554e:	0020      	movs	r0, r4
 8005550:	2208      	movs	r2, #8
 8005552:	0029      	movs	r1, r5
 8005554:	6025      	str	r5, [r4, #0]
 8005556:	60a5      	str	r5, [r4, #8]
 8005558:	6065      	str	r5, [r4, #4]
 800555a:	6125      	str	r5, [r4, #16]
 800555c:	6165      	str	r5, [r4, #20]
 800555e:	61a5      	str	r5, [r4, #24]
 8005560:	305c      	adds	r0, #92	; 0x5c
 8005562:	f7ff fce2 	bl	8004f2a <memset>
 8005566:	6365      	str	r5, [r4, #52]	; 0x34
 8005568:	63a5      	str	r5, [r4, #56]	; 0x38
 800556a:	64a5      	str	r5, [r4, #72]	; 0x48
 800556c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800556e:	0020      	movs	r0, r4
 8005570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005572:	3468      	adds	r4, #104	; 0x68
 8005574:	e7d7      	b.n	8005526 <__sfp+0x1e>
 8005576:	2104      	movs	r1, #4
 8005578:	0038      	movs	r0, r7
 800557a:	f7ff ff57 	bl	800542c <__sfmoreglue>
 800557e:	1e04      	subs	r4, r0, #0
 8005580:	6030      	str	r0, [r6, #0]
 8005582:	d1d5      	bne.n	8005530 <__sfp+0x28>
 8005584:	f7ff ff70 	bl	8005468 <__sfp_lock_release>
 8005588:	230c      	movs	r3, #12
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	e7ef      	b.n	800556e <__sfp+0x66>
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	080061b8 	.word	0x080061b8
 8005594:	ffff0001 	.word	0xffff0001

08005598 <_fwalk_reent>:
 8005598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800559a:	0004      	movs	r4, r0
 800559c:	0006      	movs	r6, r0
 800559e:	2700      	movs	r7, #0
 80055a0:	9101      	str	r1, [sp, #4]
 80055a2:	3448      	adds	r4, #72	; 0x48
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	68a5      	ldr	r5, [r4, #8]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	9b00      	ldr	r3, [sp, #0]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	d504      	bpl.n	80055bc <_fwalk_reent+0x24>
 80055b2:	6824      	ldr	r4, [r4, #0]
 80055b4:	2c00      	cmp	r4, #0
 80055b6:	d1f5      	bne.n	80055a4 <_fwalk_reent+0xc>
 80055b8:	0038      	movs	r0, r7
 80055ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055bc:	89ab      	ldrh	r3, [r5, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d908      	bls.n	80055d4 <_fwalk_reent+0x3c>
 80055c2:	220e      	movs	r2, #14
 80055c4:	5eab      	ldrsh	r3, [r5, r2]
 80055c6:	3301      	adds	r3, #1
 80055c8:	d004      	beq.n	80055d4 <_fwalk_reent+0x3c>
 80055ca:	0029      	movs	r1, r5
 80055cc:	0030      	movs	r0, r6
 80055ce:	9b01      	ldr	r3, [sp, #4]
 80055d0:	4798      	blx	r3
 80055d2:	4307      	orrs	r7, r0
 80055d4:	3568      	adds	r5, #104	; 0x68
 80055d6:	e7e8      	b.n	80055aa <_fwalk_reent+0x12>

080055d8 <__retarget_lock_init_recursive>:
 80055d8:	4770      	bx	lr

080055da <__retarget_lock_acquire_recursive>:
 80055da:	4770      	bx	lr

080055dc <__retarget_lock_release_recursive>:
 80055dc:	4770      	bx	lr
	...

080055e0 <__swhatbuf_r>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	000e      	movs	r6, r1
 80055e4:	001d      	movs	r5, r3
 80055e6:	230e      	movs	r3, #14
 80055e8:	5ec9      	ldrsh	r1, [r1, r3]
 80055ea:	0014      	movs	r4, r2
 80055ec:	b096      	sub	sp, #88	; 0x58
 80055ee:	2900      	cmp	r1, #0
 80055f0:	da07      	bge.n	8005602 <__swhatbuf_r+0x22>
 80055f2:	2300      	movs	r3, #0
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	89b3      	ldrh	r3, [r6, #12]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	d411      	bmi.n	8005620 <__swhatbuf_r+0x40>
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	e00f      	b.n	8005622 <__swhatbuf_r+0x42>
 8005602:	466a      	mov	r2, sp
 8005604:	f000 fc68 	bl	8005ed8 <_fstat_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	dbf2      	blt.n	80055f2 <__swhatbuf_r+0x12>
 800560c:	23f0      	movs	r3, #240	; 0xf0
 800560e:	9901      	ldr	r1, [sp, #4]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	4019      	ands	r1, r3
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <__swhatbuf_r+0x4c>)
 8005616:	18c9      	adds	r1, r1, r3
 8005618:	424b      	negs	r3, r1
 800561a:	4159      	adcs	r1, r3
 800561c:	6029      	str	r1, [r5, #0]
 800561e:	e7ed      	b.n	80055fc <__swhatbuf_r+0x1c>
 8005620:	2340      	movs	r3, #64	; 0x40
 8005622:	2000      	movs	r0, #0
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	b016      	add	sp, #88	; 0x58
 8005628:	bd70      	pop	{r4, r5, r6, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	ffffe000 	.word	0xffffe000

08005630 <__smakebuf_r>:
 8005630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005632:	2602      	movs	r6, #2
 8005634:	898b      	ldrh	r3, [r1, #12]
 8005636:	0005      	movs	r5, r0
 8005638:	000c      	movs	r4, r1
 800563a:	4233      	tst	r3, r6
 800563c:	d006      	beq.n	800564c <__smakebuf_r+0x1c>
 800563e:	0023      	movs	r3, r4
 8005640:	3347      	adds	r3, #71	; 0x47
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	2301      	movs	r3, #1
 8005648:	6163      	str	r3, [r4, #20]
 800564a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800564c:	466a      	mov	r2, sp
 800564e:	ab01      	add	r3, sp, #4
 8005650:	f7ff ffc6 	bl	80055e0 <__swhatbuf_r>
 8005654:	9900      	ldr	r1, [sp, #0]
 8005656:	0007      	movs	r7, r0
 8005658:	0028      	movs	r0, r5
 800565a:	f000 f877 	bl	800574c <_malloc_r>
 800565e:	2800      	cmp	r0, #0
 8005660:	d108      	bne.n	8005674 <__smakebuf_r+0x44>
 8005662:	220c      	movs	r2, #12
 8005664:	5ea3      	ldrsh	r3, [r4, r2]
 8005666:	059a      	lsls	r2, r3, #22
 8005668:	d4ef      	bmi.n	800564a <__smakebuf_r+0x1a>
 800566a:	2203      	movs	r2, #3
 800566c:	4393      	bics	r3, r2
 800566e:	431e      	orrs	r6, r3
 8005670:	81a6      	strh	r6, [r4, #12]
 8005672:	e7e4      	b.n	800563e <__smakebuf_r+0xe>
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <__smakebuf_r+0x84>)
 8005676:	62ab      	str	r3, [r5, #40]	; 0x28
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	89a2      	ldrh	r2, [r4, #12]
 800567c:	6020      	str	r0, [r4, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	81a3      	strh	r3, [r4, #12]
 8005682:	9b00      	ldr	r3, [sp, #0]
 8005684:	6120      	str	r0, [r4, #16]
 8005686:	6163      	str	r3, [r4, #20]
 8005688:	9b01      	ldr	r3, [sp, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <__smakebuf_r+0x7a>
 800568e:	0028      	movs	r0, r5
 8005690:	230e      	movs	r3, #14
 8005692:	5ee1      	ldrsh	r1, [r4, r3]
 8005694:	f000 fc32 	bl	8005efc <_isatty_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	d006      	beq.n	80056aa <__smakebuf_r+0x7a>
 800569c:	2203      	movs	r2, #3
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	4393      	bics	r3, r2
 80056a2:	001a      	movs	r2, r3
 80056a4:	2301      	movs	r3, #1
 80056a6:	4313      	orrs	r3, r2
 80056a8:	81a3      	strh	r3, [r4, #12]
 80056aa:	89a0      	ldrh	r0, [r4, #12]
 80056ac:	4307      	orrs	r7, r0
 80056ae:	81a7      	strh	r7, [r4, #12]
 80056b0:	e7cb      	b.n	800564a <__smakebuf_r+0x1a>
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	0800541d 	.word	0x0800541d

080056b8 <_free_r>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	0005      	movs	r5, r0
 80056bc:	2900      	cmp	r1, #0
 80056be:	d010      	beq.n	80056e2 <_free_r+0x2a>
 80056c0:	1f0c      	subs	r4, r1, #4
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da00      	bge.n	80056ca <_free_r+0x12>
 80056c8:	18e4      	adds	r4, r4, r3
 80056ca:	0028      	movs	r0, r5
 80056cc:	f000 fc5a 	bl	8005f84 <__malloc_lock>
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <_free_r+0x90>)
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <_free_r+0x2c>
 80056d8:	6063      	str	r3, [r4, #4]
 80056da:	6014      	str	r4, [r2, #0]
 80056dc:	0028      	movs	r0, r5
 80056de:	f000 fc59 	bl	8005f94 <__malloc_unlock>
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	42a3      	cmp	r3, r4
 80056e6:	d908      	bls.n	80056fa <_free_r+0x42>
 80056e8:	6821      	ldr	r1, [r4, #0]
 80056ea:	1860      	adds	r0, r4, r1
 80056ec:	4283      	cmp	r3, r0
 80056ee:	d1f3      	bne.n	80056d8 <_free_r+0x20>
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	1841      	adds	r1, r0, r1
 80056f6:	6021      	str	r1, [r4, #0]
 80056f8:	e7ee      	b.n	80056d8 <_free_r+0x20>
 80056fa:	001a      	movs	r2, r3
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <_free_r+0x4e>
 8005702:	42a3      	cmp	r3, r4
 8005704:	d9f9      	bls.n	80056fa <_free_r+0x42>
 8005706:	6811      	ldr	r1, [r2, #0]
 8005708:	1850      	adds	r0, r2, r1
 800570a:	42a0      	cmp	r0, r4
 800570c:	d10b      	bne.n	8005726 <_free_r+0x6e>
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1809      	adds	r1, r1, r0
 8005712:	1850      	adds	r0, r2, r1
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	4283      	cmp	r3, r0
 8005718:	d1e0      	bne.n	80056dc <_free_r+0x24>
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	1841      	adds	r1, r0, r1
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	6053      	str	r3, [r2, #4]
 8005724:	e7da      	b.n	80056dc <_free_r+0x24>
 8005726:	42a0      	cmp	r0, r4
 8005728:	d902      	bls.n	8005730 <_free_r+0x78>
 800572a:	230c      	movs	r3, #12
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	e7d5      	b.n	80056dc <_free_r+0x24>
 8005730:	6821      	ldr	r1, [r4, #0]
 8005732:	1860      	adds	r0, r4, r1
 8005734:	4283      	cmp	r3, r0
 8005736:	d103      	bne.n	8005740 <_free_r+0x88>
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	1841      	adds	r1, r0, r1
 800573e:	6021      	str	r1, [r4, #0]
 8005740:	6063      	str	r3, [r4, #4]
 8005742:	6054      	str	r4, [r2, #4]
 8005744:	e7ca      	b.n	80056dc <_free_r+0x24>
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	20000260 	.word	0x20000260

0800574c <_malloc_r>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	2303      	movs	r3, #3
 8005750:	1ccd      	adds	r5, r1, #3
 8005752:	439d      	bics	r5, r3
 8005754:	3508      	adds	r5, #8
 8005756:	0006      	movs	r6, r0
 8005758:	2d0c      	cmp	r5, #12
 800575a:	d21f      	bcs.n	800579c <_malloc_r+0x50>
 800575c:	250c      	movs	r5, #12
 800575e:	42a9      	cmp	r1, r5
 8005760:	d81e      	bhi.n	80057a0 <_malloc_r+0x54>
 8005762:	0030      	movs	r0, r6
 8005764:	f000 fc0e 	bl	8005f84 <__malloc_lock>
 8005768:	4925      	ldr	r1, [pc, #148]	; (8005800 <_malloc_r+0xb4>)
 800576a:	680a      	ldr	r2, [r1, #0]
 800576c:	0014      	movs	r4, r2
 800576e:	2c00      	cmp	r4, #0
 8005770:	d11a      	bne.n	80057a8 <_malloc_r+0x5c>
 8005772:	4f24      	ldr	r7, [pc, #144]	; (8005804 <_malloc_r+0xb8>)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <_malloc_r+0x38>
 800577a:	0021      	movs	r1, r4
 800577c:	0030      	movs	r0, r6
 800577e:	f000 fb27 	bl	8005dd0 <_sbrk_r>
 8005782:	6038      	str	r0, [r7, #0]
 8005784:	0029      	movs	r1, r5
 8005786:	0030      	movs	r0, r6
 8005788:	f000 fb22 	bl	8005dd0 <_sbrk_r>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d12b      	bne.n	80057e8 <_malloc_r+0x9c>
 8005790:	230c      	movs	r3, #12
 8005792:	0030      	movs	r0, r6
 8005794:	6033      	str	r3, [r6, #0]
 8005796:	f000 fbfd 	bl	8005f94 <__malloc_unlock>
 800579a:	e003      	b.n	80057a4 <_malloc_r+0x58>
 800579c:	2d00      	cmp	r5, #0
 800579e:	dade      	bge.n	800575e <_malloc_r+0x12>
 80057a0:	230c      	movs	r3, #12
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	2000      	movs	r0, #0
 80057a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	1b5b      	subs	r3, r3, r5
 80057ac:	d419      	bmi.n	80057e2 <_malloc_r+0x96>
 80057ae:	2b0b      	cmp	r3, #11
 80057b0:	d903      	bls.n	80057ba <_malloc_r+0x6e>
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	18e4      	adds	r4, r4, r3
 80057b6:	6025      	str	r5, [r4, #0]
 80057b8:	e003      	b.n	80057c2 <_malloc_r+0x76>
 80057ba:	6863      	ldr	r3, [r4, #4]
 80057bc:	42a2      	cmp	r2, r4
 80057be:	d10e      	bne.n	80057de <_malloc_r+0x92>
 80057c0:	600b      	str	r3, [r1, #0]
 80057c2:	0030      	movs	r0, r6
 80057c4:	f000 fbe6 	bl	8005f94 <__malloc_unlock>
 80057c8:	0020      	movs	r0, r4
 80057ca:	2207      	movs	r2, #7
 80057cc:	300b      	adds	r0, #11
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	4390      	bics	r0, r2
 80057d2:	1ac2      	subs	r2, r0, r3
 80057d4:	4298      	cmp	r0, r3
 80057d6:	d0e6      	beq.n	80057a6 <_malloc_r+0x5a>
 80057d8:	1a1b      	subs	r3, r3, r0
 80057da:	50a3      	str	r3, [r4, r2]
 80057dc:	e7e3      	b.n	80057a6 <_malloc_r+0x5a>
 80057de:	6053      	str	r3, [r2, #4]
 80057e0:	e7ef      	b.n	80057c2 <_malloc_r+0x76>
 80057e2:	0022      	movs	r2, r4
 80057e4:	6864      	ldr	r4, [r4, #4]
 80057e6:	e7c2      	b.n	800576e <_malloc_r+0x22>
 80057e8:	2303      	movs	r3, #3
 80057ea:	1cc4      	adds	r4, r0, #3
 80057ec:	439c      	bics	r4, r3
 80057ee:	42a0      	cmp	r0, r4
 80057f0:	d0e1      	beq.n	80057b6 <_malloc_r+0x6a>
 80057f2:	1a21      	subs	r1, r4, r0
 80057f4:	0030      	movs	r0, r6
 80057f6:	f000 faeb 	bl	8005dd0 <_sbrk_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d1db      	bne.n	80057b6 <_malloc_r+0x6a>
 80057fe:	e7c7      	b.n	8005790 <_malloc_r+0x44>
 8005800:	20000260 	.word	0x20000260
 8005804:	20000264 	.word	0x20000264

08005808 <__ssputs_r>:
 8005808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580a:	688e      	ldr	r6, [r1, #8]
 800580c:	b085      	sub	sp, #20
 800580e:	0007      	movs	r7, r0
 8005810:	000c      	movs	r4, r1
 8005812:	9203      	str	r2, [sp, #12]
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	429e      	cmp	r6, r3
 8005818:	d83c      	bhi.n	8005894 <__ssputs_r+0x8c>
 800581a:	2390      	movs	r3, #144	; 0x90
 800581c:	898a      	ldrh	r2, [r1, #12]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	421a      	tst	r2, r3
 8005822:	d034      	beq.n	800588e <__ssputs_r+0x86>
 8005824:	2503      	movs	r5, #3
 8005826:	6909      	ldr	r1, [r1, #16]
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	1a5b      	subs	r3, r3, r1
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	6963      	ldr	r3, [r4, #20]
 8005830:	9802      	ldr	r0, [sp, #8]
 8005832:	435d      	muls	r5, r3
 8005834:	0feb      	lsrs	r3, r5, #31
 8005836:	195d      	adds	r5, r3, r5
 8005838:	9b01      	ldr	r3, [sp, #4]
 800583a:	106d      	asrs	r5, r5, #1
 800583c:	3301      	adds	r3, #1
 800583e:	181b      	adds	r3, r3, r0
 8005840:	42ab      	cmp	r3, r5
 8005842:	d900      	bls.n	8005846 <__ssputs_r+0x3e>
 8005844:	001d      	movs	r5, r3
 8005846:	0553      	lsls	r3, r2, #21
 8005848:	d532      	bpl.n	80058b0 <__ssputs_r+0xa8>
 800584a:	0029      	movs	r1, r5
 800584c:	0038      	movs	r0, r7
 800584e:	f7ff ff7d 	bl	800574c <_malloc_r>
 8005852:	1e06      	subs	r6, r0, #0
 8005854:	d109      	bne.n	800586a <__ssputs_r+0x62>
 8005856:	230c      	movs	r3, #12
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	2340      	movs	r3, #64	; 0x40
 800585c:	2001      	movs	r0, #1
 800585e:	89a2      	ldrh	r2, [r4, #12]
 8005860:	4240      	negs	r0, r0
 8005862:	4313      	orrs	r3, r2
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	b005      	add	sp, #20
 8005868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800586a:	9a02      	ldr	r2, [sp, #8]
 800586c:	6921      	ldr	r1, [r4, #16]
 800586e:	f7ff fb53 	bl	8004f18 <memcpy>
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <__ssputs_r+0xc0>)
 8005876:	401a      	ands	r2, r3
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	4313      	orrs	r3, r2
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	6126      	str	r6, [r4, #16]
 8005882:	18f6      	adds	r6, r6, r3
 8005884:	6026      	str	r6, [r4, #0]
 8005886:	6165      	str	r5, [r4, #20]
 8005888:	9e01      	ldr	r6, [sp, #4]
 800588a:	1aed      	subs	r5, r5, r3
 800588c:	60a5      	str	r5, [r4, #8]
 800588e:	9b01      	ldr	r3, [sp, #4]
 8005890:	429e      	cmp	r6, r3
 8005892:	d900      	bls.n	8005896 <__ssputs_r+0x8e>
 8005894:	9e01      	ldr	r6, [sp, #4]
 8005896:	0032      	movs	r2, r6
 8005898:	9903      	ldr	r1, [sp, #12]
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	f000 fb5f 	bl	8005f5e <memmove>
 80058a0:	68a3      	ldr	r3, [r4, #8]
 80058a2:	2000      	movs	r0, #0
 80058a4:	1b9b      	subs	r3, r3, r6
 80058a6:	60a3      	str	r3, [r4, #8]
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	199e      	adds	r6, r3, r6
 80058ac:	6026      	str	r6, [r4, #0]
 80058ae:	e7da      	b.n	8005866 <__ssputs_r+0x5e>
 80058b0:	002a      	movs	r2, r5
 80058b2:	0038      	movs	r0, r7
 80058b4:	f000 fb76 	bl	8005fa4 <_realloc_r>
 80058b8:	1e06      	subs	r6, r0, #0
 80058ba:	d1e0      	bne.n	800587e <__ssputs_r+0x76>
 80058bc:	0038      	movs	r0, r7
 80058be:	6921      	ldr	r1, [r4, #16]
 80058c0:	f7ff fefa 	bl	80056b8 <_free_r>
 80058c4:	e7c7      	b.n	8005856 <__ssputs_r+0x4e>
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	fffffb7f 	.word	0xfffffb7f

080058cc <_svfiprintf_r>:
 80058cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ce:	b0a1      	sub	sp, #132	; 0x84
 80058d0:	9003      	str	r0, [sp, #12]
 80058d2:	001d      	movs	r5, r3
 80058d4:	898b      	ldrh	r3, [r1, #12]
 80058d6:	000f      	movs	r7, r1
 80058d8:	0016      	movs	r6, r2
 80058da:	061b      	lsls	r3, r3, #24
 80058dc:	d511      	bpl.n	8005902 <_svfiprintf_r+0x36>
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10e      	bne.n	8005902 <_svfiprintf_r+0x36>
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	f7ff ff31 	bl	800574c <_malloc_r>
 80058ea:	6038      	str	r0, [r7, #0]
 80058ec:	6138      	str	r0, [r7, #16]
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d105      	bne.n	80058fe <_svfiprintf_r+0x32>
 80058f2:	230c      	movs	r3, #12
 80058f4:	9a03      	ldr	r2, [sp, #12]
 80058f6:	3801      	subs	r0, #1
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	b021      	add	sp, #132	; 0x84
 80058fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	2300      	movs	r3, #0
 8005904:	ac08      	add	r4, sp, #32
 8005906:	6163      	str	r3, [r4, #20]
 8005908:	3320      	adds	r3, #32
 800590a:	7663      	strb	r3, [r4, #25]
 800590c:	3310      	adds	r3, #16
 800590e:	76a3      	strb	r3, [r4, #26]
 8005910:	9507      	str	r5, [sp, #28]
 8005912:	0035      	movs	r5, r6
 8005914:	782b      	ldrb	r3, [r5, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <_svfiprintf_r+0x52>
 800591a:	2b25      	cmp	r3, #37	; 0x25
 800591c:	d147      	bne.n	80059ae <_svfiprintf_r+0xe2>
 800591e:	1bab      	subs	r3, r5, r6
 8005920:	9305      	str	r3, [sp, #20]
 8005922:	42b5      	cmp	r5, r6
 8005924:	d00c      	beq.n	8005940 <_svfiprintf_r+0x74>
 8005926:	0032      	movs	r2, r6
 8005928:	0039      	movs	r1, r7
 800592a:	9803      	ldr	r0, [sp, #12]
 800592c:	f7ff ff6c 	bl	8005808 <__ssputs_r>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d100      	bne.n	8005936 <_svfiprintf_r+0x6a>
 8005934:	e0ae      	b.n	8005a94 <_svfiprintf_r+0x1c8>
 8005936:	6962      	ldr	r2, [r4, #20]
 8005938:	9b05      	ldr	r3, [sp, #20]
 800593a:	4694      	mov	ip, r2
 800593c:	4463      	add	r3, ip
 800593e:	6163      	str	r3, [r4, #20]
 8005940:	782b      	ldrb	r3, [r5, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d100      	bne.n	8005948 <_svfiprintf_r+0x7c>
 8005946:	e0a5      	b.n	8005a94 <_svfiprintf_r+0x1c8>
 8005948:	2201      	movs	r2, #1
 800594a:	2300      	movs	r3, #0
 800594c:	4252      	negs	r2, r2
 800594e:	6062      	str	r2, [r4, #4]
 8005950:	a904      	add	r1, sp, #16
 8005952:	3254      	adds	r2, #84	; 0x54
 8005954:	1852      	adds	r2, r2, r1
 8005956:	1c6e      	adds	r6, r5, #1
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	60e3      	str	r3, [r4, #12]
 800595c:	60a3      	str	r3, [r4, #8]
 800595e:	7013      	strb	r3, [r2, #0]
 8005960:	65a3      	str	r3, [r4, #88]	; 0x58
 8005962:	2205      	movs	r2, #5
 8005964:	7831      	ldrb	r1, [r6, #0]
 8005966:	4854      	ldr	r0, [pc, #336]	; (8005ab8 <_svfiprintf_r+0x1ec>)
 8005968:	f000 faee 	bl	8005f48 <memchr>
 800596c:	1c75      	adds	r5, r6, #1
 800596e:	2800      	cmp	r0, #0
 8005970:	d11f      	bne.n	80059b2 <_svfiprintf_r+0xe6>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	06d3      	lsls	r3, r2, #27
 8005976:	d504      	bpl.n	8005982 <_svfiprintf_r+0xb6>
 8005978:	2353      	movs	r3, #83	; 0x53
 800597a:	a904      	add	r1, sp, #16
 800597c:	185b      	adds	r3, r3, r1
 800597e:	2120      	movs	r1, #32
 8005980:	7019      	strb	r1, [r3, #0]
 8005982:	0713      	lsls	r3, r2, #28
 8005984:	d504      	bpl.n	8005990 <_svfiprintf_r+0xc4>
 8005986:	2353      	movs	r3, #83	; 0x53
 8005988:	a904      	add	r1, sp, #16
 800598a:	185b      	adds	r3, r3, r1
 800598c:	212b      	movs	r1, #43	; 0x2b
 800598e:	7019      	strb	r1, [r3, #0]
 8005990:	7833      	ldrb	r3, [r6, #0]
 8005992:	2b2a      	cmp	r3, #42	; 0x2a
 8005994:	d016      	beq.n	80059c4 <_svfiprintf_r+0xf8>
 8005996:	0035      	movs	r5, r6
 8005998:	2100      	movs	r1, #0
 800599a:	200a      	movs	r0, #10
 800599c:	68e3      	ldr	r3, [r4, #12]
 800599e:	782a      	ldrb	r2, [r5, #0]
 80059a0:	1c6e      	adds	r6, r5, #1
 80059a2:	3a30      	subs	r2, #48	; 0x30
 80059a4:	2a09      	cmp	r2, #9
 80059a6:	d94e      	bls.n	8005a46 <_svfiprintf_r+0x17a>
 80059a8:	2900      	cmp	r1, #0
 80059aa:	d111      	bne.n	80059d0 <_svfiprintf_r+0x104>
 80059ac:	e017      	b.n	80059de <_svfiprintf_r+0x112>
 80059ae:	3501      	adds	r5, #1
 80059b0:	e7b0      	b.n	8005914 <_svfiprintf_r+0x48>
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <_svfiprintf_r+0x1ec>)
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	1ac0      	subs	r0, r0, r3
 80059b8:	2301      	movs	r3, #1
 80059ba:	4083      	lsls	r3, r0
 80059bc:	4313      	orrs	r3, r2
 80059be:	002e      	movs	r6, r5
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	e7ce      	b.n	8005962 <_svfiprintf_r+0x96>
 80059c4:	9b07      	ldr	r3, [sp, #28]
 80059c6:	1d19      	adds	r1, r3, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	9107      	str	r1, [sp, #28]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	db01      	blt.n	80059d4 <_svfiprintf_r+0x108>
 80059d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80059d2:	e004      	b.n	80059de <_svfiprintf_r+0x112>
 80059d4:	425b      	negs	r3, r3
 80059d6:	60e3      	str	r3, [r4, #12]
 80059d8:	2302      	movs	r3, #2
 80059da:	4313      	orrs	r3, r2
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	782b      	ldrb	r3, [r5, #0]
 80059e0:	2b2e      	cmp	r3, #46	; 0x2e
 80059e2:	d10a      	bne.n	80059fa <_svfiprintf_r+0x12e>
 80059e4:	786b      	ldrb	r3, [r5, #1]
 80059e6:	2b2a      	cmp	r3, #42	; 0x2a
 80059e8:	d135      	bne.n	8005a56 <_svfiprintf_r+0x18a>
 80059ea:	9b07      	ldr	r3, [sp, #28]
 80059ec:	3502      	adds	r5, #2
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	9207      	str	r2, [sp, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db2b      	blt.n	8005a50 <_svfiprintf_r+0x184>
 80059f8:	9309      	str	r3, [sp, #36]	; 0x24
 80059fa:	4e30      	ldr	r6, [pc, #192]	; (8005abc <_svfiprintf_r+0x1f0>)
 80059fc:	2203      	movs	r2, #3
 80059fe:	0030      	movs	r0, r6
 8005a00:	7829      	ldrb	r1, [r5, #0]
 8005a02:	f000 faa1 	bl	8005f48 <memchr>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d006      	beq.n	8005a18 <_svfiprintf_r+0x14c>
 8005a0a:	2340      	movs	r3, #64	; 0x40
 8005a0c:	1b80      	subs	r0, r0, r6
 8005a0e:	4083      	lsls	r3, r0
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	3501      	adds	r5, #1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	7829      	ldrb	r1, [r5, #0]
 8005a1a:	2206      	movs	r2, #6
 8005a1c:	4828      	ldr	r0, [pc, #160]	; (8005ac0 <_svfiprintf_r+0x1f4>)
 8005a1e:	1c6e      	adds	r6, r5, #1
 8005a20:	7621      	strb	r1, [r4, #24]
 8005a22:	f000 fa91 	bl	8005f48 <memchr>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d03c      	beq.n	8005aa4 <_svfiprintf_r+0x1d8>
 8005a2a:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <_svfiprintf_r+0x1f8>)
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d125      	bne.n	8005a7c <_svfiprintf_r+0x1b0>
 8005a30:	2207      	movs	r2, #7
 8005a32:	9b07      	ldr	r3, [sp, #28]
 8005a34:	3307      	adds	r3, #7
 8005a36:	4393      	bics	r3, r2
 8005a38:	3308      	adds	r3, #8
 8005a3a:	9307      	str	r3, [sp, #28]
 8005a3c:	6963      	ldr	r3, [r4, #20]
 8005a3e:	9a04      	ldr	r2, [sp, #16]
 8005a40:	189b      	adds	r3, r3, r2
 8005a42:	6163      	str	r3, [r4, #20]
 8005a44:	e765      	b.n	8005912 <_svfiprintf_r+0x46>
 8005a46:	4343      	muls	r3, r0
 8005a48:	0035      	movs	r5, r6
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	e7a6      	b.n	800599e <_svfiprintf_r+0xd2>
 8005a50:	2301      	movs	r3, #1
 8005a52:	425b      	negs	r3, r3
 8005a54:	e7d0      	b.n	80059f8 <_svfiprintf_r+0x12c>
 8005a56:	2300      	movs	r3, #0
 8005a58:	200a      	movs	r0, #10
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	7829      	ldrb	r1, [r5, #0]
 8005a62:	1c6e      	adds	r6, r5, #1
 8005a64:	3930      	subs	r1, #48	; 0x30
 8005a66:	2909      	cmp	r1, #9
 8005a68:	d903      	bls.n	8005a72 <_svfiprintf_r+0x1a6>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0c5      	beq.n	80059fa <_svfiprintf_r+0x12e>
 8005a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a70:	e7c3      	b.n	80059fa <_svfiprintf_r+0x12e>
 8005a72:	4342      	muls	r2, r0
 8005a74:	0035      	movs	r5, r6
 8005a76:	2301      	movs	r3, #1
 8005a78:	1852      	adds	r2, r2, r1
 8005a7a:	e7f1      	b.n	8005a60 <_svfiprintf_r+0x194>
 8005a7c:	ab07      	add	r3, sp, #28
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	003a      	movs	r2, r7
 8005a82:	0021      	movs	r1, r4
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <_svfiprintf_r+0x1fc>)
 8005a86:	9803      	ldr	r0, [sp, #12]
 8005a88:	e000      	b.n	8005a8c <_svfiprintf_r+0x1c0>
 8005a8a:	bf00      	nop
 8005a8c:	9004      	str	r0, [sp, #16]
 8005a8e:	9b04      	ldr	r3, [sp, #16]
 8005a90:	3301      	adds	r3, #1
 8005a92:	d1d3      	bne.n	8005a3c <_svfiprintf_r+0x170>
 8005a94:	89bb      	ldrh	r3, [r7, #12]
 8005a96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a98:	065b      	lsls	r3, r3, #25
 8005a9a:	d400      	bmi.n	8005a9e <_svfiprintf_r+0x1d2>
 8005a9c:	e72d      	b.n	80058fa <_svfiprintf_r+0x2e>
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	4240      	negs	r0, r0
 8005aa2:	e72a      	b.n	80058fa <_svfiprintf_r+0x2e>
 8005aa4:	ab07      	add	r3, sp, #28
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	003a      	movs	r2, r7
 8005aaa:	0021      	movs	r1, r4
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <_svfiprintf_r+0x1fc>)
 8005aae:	9803      	ldr	r0, [sp, #12]
 8005ab0:	f000 f87c 	bl	8005bac <_printf_i>
 8005ab4:	e7ea      	b.n	8005a8c <_svfiprintf_r+0x1c0>
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	0800621c 	.word	0x0800621c
 8005abc:	08006222 	.word	0x08006222
 8005ac0:	08006226 	.word	0x08006226
 8005ac4:	00000000 	.word	0x00000000
 8005ac8:	08005809 	.word	0x08005809

08005acc <_printf_common>:
 8005acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ace:	0015      	movs	r5, r2
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	688a      	ldr	r2, [r1, #8]
 8005ad4:	690b      	ldr	r3, [r1, #16]
 8005ad6:	000c      	movs	r4, r1
 8005ad8:	9000      	str	r0, [sp, #0]
 8005ada:	4293      	cmp	r3, r2
 8005adc:	da00      	bge.n	8005ae0 <_printf_common+0x14>
 8005ade:	0013      	movs	r3, r2
 8005ae0:	0022      	movs	r2, r4
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	3243      	adds	r2, #67	; 0x43
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	d001      	beq.n	8005af0 <_printf_common+0x24>
 8005aec:	3301      	adds	r3, #1
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	069b      	lsls	r3, r3, #26
 8005af4:	d502      	bpl.n	8005afc <_printf_common+0x30>
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	3302      	adds	r3, #2
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	2306      	movs	r3, #6
 8005b00:	0017      	movs	r7, r2
 8005b02:	401f      	ands	r7, r3
 8005b04:	421a      	tst	r2, r3
 8005b06:	d027      	beq.n	8005b58 <_printf_common+0x8c>
 8005b08:	0023      	movs	r3, r4
 8005b0a:	3343      	adds	r3, #67	; 0x43
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	4193      	sbcs	r3, r2
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	0692      	lsls	r2, r2, #26
 8005b16:	d430      	bmi.n	8005b7a <_printf_common+0xae>
 8005b18:	0022      	movs	r2, r4
 8005b1a:	9901      	ldr	r1, [sp, #4]
 8005b1c:	9800      	ldr	r0, [sp, #0]
 8005b1e:	9e08      	ldr	r6, [sp, #32]
 8005b20:	3243      	adds	r2, #67	; 0x43
 8005b22:	47b0      	blx	r6
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d025      	beq.n	8005b74 <_printf_common+0xa8>
 8005b28:	2306      	movs	r3, #6
 8005b2a:	6820      	ldr	r0, [r4, #0]
 8005b2c:	682a      	ldr	r2, [r5, #0]
 8005b2e:	68e1      	ldr	r1, [r4, #12]
 8005b30:	2500      	movs	r5, #0
 8005b32:	4003      	ands	r3, r0
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d103      	bne.n	8005b40 <_printf_common+0x74>
 8005b38:	1a8d      	subs	r5, r1, r2
 8005b3a:	43eb      	mvns	r3, r5
 8005b3c:	17db      	asrs	r3, r3, #31
 8005b3e:	401d      	ands	r5, r3
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	6922      	ldr	r2, [r4, #16]
 8005b44:	4293      	cmp	r3, r2
 8005b46:	dd01      	ble.n	8005b4c <_printf_common+0x80>
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	18ed      	adds	r5, r5, r3
 8005b4c:	2700      	movs	r7, #0
 8005b4e:	42bd      	cmp	r5, r7
 8005b50:	d120      	bne.n	8005b94 <_printf_common+0xc8>
 8005b52:	2000      	movs	r0, #0
 8005b54:	e010      	b.n	8005b78 <_printf_common+0xac>
 8005b56:	3701      	adds	r7, #1
 8005b58:	68e3      	ldr	r3, [r4, #12]
 8005b5a:	682a      	ldr	r2, [r5, #0]
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	42bb      	cmp	r3, r7
 8005b60:	ddd2      	ble.n	8005b08 <_printf_common+0x3c>
 8005b62:	0022      	movs	r2, r4
 8005b64:	2301      	movs	r3, #1
 8005b66:	9901      	ldr	r1, [sp, #4]
 8005b68:	9800      	ldr	r0, [sp, #0]
 8005b6a:	9e08      	ldr	r6, [sp, #32]
 8005b6c:	3219      	adds	r2, #25
 8005b6e:	47b0      	blx	r6
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d1f0      	bne.n	8005b56 <_printf_common+0x8a>
 8005b74:	2001      	movs	r0, #1
 8005b76:	4240      	negs	r0, r0
 8005b78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b7a:	2030      	movs	r0, #48	; 0x30
 8005b7c:	18e1      	adds	r1, r4, r3
 8005b7e:	3143      	adds	r1, #67	; 0x43
 8005b80:	7008      	strb	r0, [r1, #0]
 8005b82:	0021      	movs	r1, r4
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	3145      	adds	r1, #69	; 0x45
 8005b88:	7809      	ldrb	r1, [r1, #0]
 8005b8a:	18a2      	adds	r2, r4, r2
 8005b8c:	3243      	adds	r2, #67	; 0x43
 8005b8e:	3302      	adds	r3, #2
 8005b90:	7011      	strb	r1, [r2, #0]
 8005b92:	e7c1      	b.n	8005b18 <_printf_common+0x4c>
 8005b94:	0022      	movs	r2, r4
 8005b96:	2301      	movs	r3, #1
 8005b98:	9901      	ldr	r1, [sp, #4]
 8005b9a:	9800      	ldr	r0, [sp, #0]
 8005b9c:	9e08      	ldr	r6, [sp, #32]
 8005b9e:	321a      	adds	r2, #26
 8005ba0:	47b0      	blx	r6
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	d0e6      	beq.n	8005b74 <_printf_common+0xa8>
 8005ba6:	3701      	adds	r7, #1
 8005ba8:	e7d1      	b.n	8005b4e <_printf_common+0x82>
	...

08005bac <_printf_i>:
 8005bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bae:	b08b      	sub	sp, #44	; 0x2c
 8005bb0:	9206      	str	r2, [sp, #24]
 8005bb2:	000a      	movs	r2, r1
 8005bb4:	3243      	adds	r2, #67	; 0x43
 8005bb6:	9307      	str	r3, [sp, #28]
 8005bb8:	9005      	str	r0, [sp, #20]
 8005bba:	9204      	str	r2, [sp, #16]
 8005bbc:	7e0a      	ldrb	r2, [r1, #24]
 8005bbe:	000c      	movs	r4, r1
 8005bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bc2:	2a78      	cmp	r2, #120	; 0x78
 8005bc4:	d806      	bhi.n	8005bd4 <_printf_i+0x28>
 8005bc6:	2a62      	cmp	r2, #98	; 0x62
 8005bc8:	d808      	bhi.n	8005bdc <_printf_i+0x30>
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	d100      	bne.n	8005bd0 <_printf_i+0x24>
 8005bce:	e0c0      	b.n	8005d52 <_printf_i+0x1a6>
 8005bd0:	2a58      	cmp	r2, #88	; 0x58
 8005bd2:	d052      	beq.n	8005c7a <_printf_i+0xce>
 8005bd4:	0026      	movs	r6, r4
 8005bd6:	3642      	adds	r6, #66	; 0x42
 8005bd8:	7032      	strb	r2, [r6, #0]
 8005bda:	e022      	b.n	8005c22 <_printf_i+0x76>
 8005bdc:	0010      	movs	r0, r2
 8005bde:	3863      	subs	r0, #99	; 0x63
 8005be0:	2815      	cmp	r0, #21
 8005be2:	d8f7      	bhi.n	8005bd4 <_printf_i+0x28>
 8005be4:	f7fa fa98 	bl	8000118 <__gnu_thumb1_case_shi>
 8005be8:	001f0016 	.word	0x001f0016
 8005bec:	fff6fff6 	.word	0xfff6fff6
 8005bf0:	fff6fff6 	.word	0xfff6fff6
 8005bf4:	fff6001f 	.word	0xfff6001f
 8005bf8:	fff6fff6 	.word	0xfff6fff6
 8005bfc:	00a8fff6 	.word	0x00a8fff6
 8005c00:	009a0036 	.word	0x009a0036
 8005c04:	fff6fff6 	.word	0xfff6fff6
 8005c08:	fff600b9 	.word	0xfff600b9
 8005c0c:	fff60036 	.word	0xfff60036
 8005c10:	009efff6 	.word	0x009efff6
 8005c14:	0026      	movs	r6, r4
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	3642      	adds	r6, #66	; 0x42
 8005c1a:	1d11      	adds	r1, r2, #4
 8005c1c:	6019      	str	r1, [r3, #0]
 8005c1e:	6813      	ldr	r3, [r2, #0]
 8005c20:	7033      	strb	r3, [r6, #0]
 8005c22:	2301      	movs	r3, #1
 8005c24:	e0a7      	b.n	8005d76 <_printf_i+0x1ca>
 8005c26:	6808      	ldr	r0, [r1, #0]
 8005c28:	6819      	ldr	r1, [r3, #0]
 8005c2a:	1d0a      	adds	r2, r1, #4
 8005c2c:	0605      	lsls	r5, r0, #24
 8005c2e:	d50b      	bpl.n	8005c48 <_printf_i+0x9c>
 8005c30:	680d      	ldr	r5, [r1, #0]
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	da03      	bge.n	8005c40 <_printf_i+0x94>
 8005c38:	232d      	movs	r3, #45	; 0x2d
 8005c3a:	9a04      	ldr	r2, [sp, #16]
 8005c3c:	426d      	negs	r5, r5
 8005c3e:	7013      	strb	r3, [r2, #0]
 8005c40:	4b61      	ldr	r3, [pc, #388]	; (8005dc8 <_printf_i+0x21c>)
 8005c42:	270a      	movs	r7, #10
 8005c44:	9303      	str	r3, [sp, #12]
 8005c46:	e032      	b.n	8005cae <_printf_i+0x102>
 8005c48:	680d      	ldr	r5, [r1, #0]
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	0641      	lsls	r1, r0, #25
 8005c4e:	d5f1      	bpl.n	8005c34 <_printf_i+0x88>
 8005c50:	b22d      	sxth	r5, r5
 8005c52:	e7ef      	b.n	8005c34 <_printf_i+0x88>
 8005c54:	680d      	ldr	r5, [r1, #0]
 8005c56:	6819      	ldr	r1, [r3, #0]
 8005c58:	1d08      	adds	r0, r1, #4
 8005c5a:	6018      	str	r0, [r3, #0]
 8005c5c:	062e      	lsls	r6, r5, #24
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0xb8>
 8005c60:	680d      	ldr	r5, [r1, #0]
 8005c62:	e003      	b.n	8005c6c <_printf_i+0xc0>
 8005c64:	066d      	lsls	r5, r5, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0xb4>
 8005c68:	680d      	ldr	r5, [r1, #0]
 8005c6a:	b2ad      	uxth	r5, r5
 8005c6c:	4b56      	ldr	r3, [pc, #344]	; (8005dc8 <_printf_i+0x21c>)
 8005c6e:	270a      	movs	r7, #10
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	2a6f      	cmp	r2, #111	; 0x6f
 8005c74:	d117      	bne.n	8005ca6 <_printf_i+0xfa>
 8005c76:	2708      	movs	r7, #8
 8005c78:	e015      	b.n	8005ca6 <_printf_i+0xfa>
 8005c7a:	3145      	adds	r1, #69	; 0x45
 8005c7c:	700a      	strb	r2, [r1, #0]
 8005c7e:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <_printf_i+0x21c>)
 8005c80:	9203      	str	r2, [sp, #12]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	6821      	ldr	r1, [r4, #0]
 8005c86:	ca20      	ldmia	r2!, {r5}
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	0608      	lsls	r0, r1, #24
 8005c8c:	d550      	bpl.n	8005d30 <_printf_i+0x184>
 8005c8e:	07cb      	lsls	r3, r1, #31
 8005c90:	d502      	bpl.n	8005c98 <_printf_i+0xec>
 8005c92:	2320      	movs	r3, #32
 8005c94:	4319      	orrs	r1, r3
 8005c96:	6021      	str	r1, [r4, #0]
 8005c98:	2710      	movs	r7, #16
 8005c9a:	2d00      	cmp	r5, #0
 8005c9c:	d103      	bne.n	8005ca6 <_printf_i+0xfa>
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	439a      	bics	r2, r3
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	0023      	movs	r3, r4
 8005ca8:	2200      	movs	r2, #0
 8005caa:	3343      	adds	r3, #67	; 0x43
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	60a3      	str	r3, [r4, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db03      	blt.n	8005cbe <_printf_i+0x112>
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	6821      	ldr	r1, [r4, #0]
 8005cba:	4391      	bics	r1, r2
 8005cbc:	6021      	str	r1, [r4, #0]
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	d102      	bne.n	8005cc8 <_printf_i+0x11c>
 8005cc2:	9e04      	ldr	r6, [sp, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00c      	beq.n	8005ce2 <_printf_i+0x136>
 8005cc8:	9e04      	ldr	r6, [sp, #16]
 8005cca:	0028      	movs	r0, r5
 8005ccc:	0039      	movs	r1, r7
 8005cce:	f7fa fab3 	bl	8000238 <__aeabi_uidivmod>
 8005cd2:	9b03      	ldr	r3, [sp, #12]
 8005cd4:	3e01      	subs	r6, #1
 8005cd6:	5c5b      	ldrb	r3, [r3, r1]
 8005cd8:	7033      	strb	r3, [r6, #0]
 8005cda:	002b      	movs	r3, r5
 8005cdc:	0005      	movs	r5, r0
 8005cde:	429f      	cmp	r7, r3
 8005ce0:	d9f3      	bls.n	8005cca <_printf_i+0x11e>
 8005ce2:	2f08      	cmp	r7, #8
 8005ce4:	d109      	bne.n	8005cfa <_printf_i+0x14e>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	07db      	lsls	r3, r3, #31
 8005cea:	d506      	bpl.n	8005cfa <_printf_i+0x14e>
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	6922      	ldr	r2, [r4, #16]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	dc02      	bgt.n	8005cfa <_printf_i+0x14e>
 8005cf4:	2330      	movs	r3, #48	; 0x30
 8005cf6:	3e01      	subs	r6, #1
 8005cf8:	7033      	strb	r3, [r6, #0]
 8005cfa:	9b04      	ldr	r3, [sp, #16]
 8005cfc:	1b9b      	subs	r3, r3, r6
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	0021      	movs	r1, r4
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	9805      	ldr	r0, [sp, #20]
 8005d08:	9b06      	ldr	r3, [sp, #24]
 8005d0a:	aa09      	add	r2, sp, #36	; 0x24
 8005d0c:	f7ff fede 	bl	8005acc <_printf_common>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d135      	bne.n	8005d80 <_printf_i+0x1d4>
 8005d14:	2001      	movs	r0, #1
 8005d16:	4240      	negs	r0, r0
 8005d18:	b00b      	add	sp, #44	; 0x2c
 8005d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	6809      	ldr	r1, [r1, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	6022      	str	r2, [r4, #0]
 8005d24:	0022      	movs	r2, r4
 8005d26:	2178      	movs	r1, #120	; 0x78
 8005d28:	3245      	adds	r2, #69	; 0x45
 8005d2a:	7011      	strb	r1, [r2, #0]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <_printf_i+0x220>)
 8005d2e:	e7a7      	b.n	8005c80 <_printf_i+0xd4>
 8005d30:	0648      	lsls	r0, r1, #25
 8005d32:	d5ac      	bpl.n	8005c8e <_printf_i+0xe2>
 8005d34:	b2ad      	uxth	r5, r5
 8005d36:	e7aa      	b.n	8005c8e <_printf_i+0xe2>
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	680d      	ldr	r5, [r1, #0]
 8005d3c:	1d10      	adds	r0, r2, #4
 8005d3e:	6949      	ldr	r1, [r1, #20]
 8005d40:	6018      	str	r0, [r3, #0]
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	062e      	lsls	r6, r5, #24
 8005d46:	d501      	bpl.n	8005d4c <_printf_i+0x1a0>
 8005d48:	6019      	str	r1, [r3, #0]
 8005d4a:	e002      	b.n	8005d52 <_printf_i+0x1a6>
 8005d4c:	066d      	lsls	r5, r5, #25
 8005d4e:	d5fb      	bpl.n	8005d48 <_printf_i+0x19c>
 8005d50:	8019      	strh	r1, [r3, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	9e04      	ldr	r6, [sp, #16]
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	e7d2      	b.n	8005d00 <_printf_i+0x154>
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	1d11      	adds	r1, r2, #4
 8005d5e:	6019      	str	r1, [r3, #0]
 8005d60:	6816      	ldr	r6, [r2, #0]
 8005d62:	2100      	movs	r1, #0
 8005d64:	0030      	movs	r0, r6
 8005d66:	6862      	ldr	r2, [r4, #4]
 8005d68:	f000 f8ee 	bl	8005f48 <memchr>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d001      	beq.n	8005d74 <_printf_i+0x1c8>
 8005d70:	1b80      	subs	r0, r0, r6
 8005d72:	6060      	str	r0, [r4, #4]
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	6123      	str	r3, [r4, #16]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9a04      	ldr	r2, [sp, #16]
 8005d7c:	7013      	strb	r3, [r2, #0]
 8005d7e:	e7bf      	b.n	8005d00 <_printf_i+0x154>
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	0032      	movs	r2, r6
 8005d84:	9906      	ldr	r1, [sp, #24]
 8005d86:	9805      	ldr	r0, [sp, #20]
 8005d88:	9d07      	ldr	r5, [sp, #28]
 8005d8a:	47a8      	blx	r5
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d0c1      	beq.n	8005d14 <_printf_i+0x168>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	079b      	lsls	r3, r3, #30
 8005d94:	d415      	bmi.n	8005dc2 <_printf_i+0x216>
 8005d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d98:	68e0      	ldr	r0, [r4, #12]
 8005d9a:	4298      	cmp	r0, r3
 8005d9c:	dabc      	bge.n	8005d18 <_printf_i+0x16c>
 8005d9e:	0018      	movs	r0, r3
 8005da0:	e7ba      	b.n	8005d18 <_printf_i+0x16c>
 8005da2:	0022      	movs	r2, r4
 8005da4:	2301      	movs	r3, #1
 8005da6:	9906      	ldr	r1, [sp, #24]
 8005da8:	9805      	ldr	r0, [sp, #20]
 8005daa:	9e07      	ldr	r6, [sp, #28]
 8005dac:	3219      	adds	r2, #25
 8005dae:	47b0      	blx	r6
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d0af      	beq.n	8005d14 <_printf_i+0x168>
 8005db4:	3501      	adds	r5, #1
 8005db6:	68e3      	ldr	r3, [r4, #12]
 8005db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	42ab      	cmp	r3, r5
 8005dbe:	dcf0      	bgt.n	8005da2 <_printf_i+0x1f6>
 8005dc0:	e7e9      	b.n	8005d96 <_printf_i+0x1ea>
 8005dc2:	2500      	movs	r5, #0
 8005dc4:	e7f7      	b.n	8005db6 <_printf_i+0x20a>
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	0800622d 	.word	0x0800622d
 8005dcc:	0800623e 	.word	0x0800623e

08005dd0 <_sbrk_r>:
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	b570      	push	{r4, r5, r6, lr}
 8005dd4:	4d06      	ldr	r5, [pc, #24]	; (8005df0 <_sbrk_r+0x20>)
 8005dd6:	0004      	movs	r4, r0
 8005dd8:	0008      	movs	r0, r1
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fc fbe2 	bl	80025a4 <_sbrk>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d103      	bne.n	8005dec <_sbrk_r+0x1c>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d000      	beq.n	8005dec <_sbrk_r+0x1c>
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	20000354 	.word	0x20000354

08005df4 <__sread>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	000c      	movs	r4, r1
 8005df8:	250e      	movs	r5, #14
 8005dfa:	5f49      	ldrsh	r1, [r1, r5]
 8005dfc:	f000 f8f8 	bl	8005ff0 <_read_r>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	db03      	blt.n	8005e0c <__sread+0x18>
 8005e04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e06:	181b      	adds	r3, r3, r0
 8005e08:	6563      	str	r3, [r4, #84]	; 0x54
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	4a02      	ldr	r2, [pc, #8]	; (8005e18 <__sread+0x24>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	e7f9      	b.n	8005e0a <__sread+0x16>
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	ffffefff 	.word	0xffffefff

08005e1c <__swrite>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	001f      	movs	r7, r3
 8005e20:	898b      	ldrh	r3, [r1, #12]
 8005e22:	0005      	movs	r5, r0
 8005e24:	000c      	movs	r4, r1
 8005e26:	0016      	movs	r6, r2
 8005e28:	05db      	lsls	r3, r3, #23
 8005e2a:	d505      	bpl.n	8005e38 <__swrite+0x1c>
 8005e2c:	230e      	movs	r3, #14
 8005e2e:	5ec9      	ldrsh	r1, [r1, r3]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2302      	movs	r3, #2
 8005e34:	f000 f874 	bl	8005f20 <_lseek_r>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	4a05      	ldr	r2, [pc, #20]	; (8005e50 <__swrite+0x34>)
 8005e3c:	0028      	movs	r0, r5
 8005e3e:	4013      	ands	r3, r2
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	0032      	movs	r2, r6
 8005e44:	230e      	movs	r3, #14
 8005e46:	5ee1      	ldrsh	r1, [r4, r3]
 8005e48:	003b      	movs	r3, r7
 8005e4a:	f000 f81f 	bl	8005e8c <_write_r>
 8005e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e50:	ffffefff 	.word	0xffffefff

08005e54 <__sseek>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	000c      	movs	r4, r1
 8005e58:	250e      	movs	r5, #14
 8005e5a:	5f49      	ldrsh	r1, [r1, r5]
 8005e5c:	f000 f860 	bl	8005f20 <_lseek_r>
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	1c42      	adds	r2, r0, #1
 8005e64:	d103      	bne.n	8005e6e <__sseek+0x1a>
 8005e66:	4a05      	ldr	r2, [pc, #20]	; (8005e7c <__sseek+0x28>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
 8005e6e:	2280      	movs	r2, #128	; 0x80
 8005e70:	0152      	lsls	r2, r2, #5
 8005e72:	4313      	orrs	r3, r2
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	6560      	str	r0, [r4, #84]	; 0x54
 8005e78:	e7f8      	b.n	8005e6c <__sseek+0x18>
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	ffffefff 	.word	0xffffefff

08005e80 <__sclose>:
 8005e80:	b510      	push	{r4, lr}
 8005e82:	230e      	movs	r3, #14
 8005e84:	5ec9      	ldrsh	r1, [r1, r3]
 8005e86:	f000 f815 	bl	8005eb4 <_close_r>
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <_write_r>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	0004      	movs	r4, r0
 8005e90:	0008      	movs	r0, r1
 8005e92:	0011      	movs	r1, r2
 8005e94:	001a      	movs	r2, r3
 8005e96:	2300      	movs	r3, #0
 8005e98:	4d05      	ldr	r5, [pc, #20]	; (8005eb0 <_write_r+0x24>)
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fc fb3a 	bl	8002514 <_write>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d103      	bne.n	8005eac <_write_r+0x20>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d000      	beq.n	8005eac <_write_r+0x20>
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	bd70      	pop	{r4, r5, r6, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	20000354 	.word	0x20000354

08005eb4 <_close_r>:
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b570      	push	{r4, r5, r6, lr}
 8005eb8:	4d06      	ldr	r5, [pc, #24]	; (8005ed4 <_close_r+0x20>)
 8005eba:	0004      	movs	r4, r0
 8005ebc:	0008      	movs	r0, r1
 8005ebe:	602b      	str	r3, [r5, #0]
 8005ec0:	f7fc fb44 	bl	800254c <_close>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d103      	bne.n	8005ed0 <_close_r+0x1c>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d000      	beq.n	8005ed0 <_close_r+0x1c>
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	20000354 	.word	0x20000354

08005ed8 <_fstat_r>:
 8005ed8:	2300      	movs	r3, #0
 8005eda:	b570      	push	{r4, r5, r6, lr}
 8005edc:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_fstat_r+0x20>)
 8005ede:	0004      	movs	r4, r0
 8005ee0:	0008      	movs	r0, r1
 8005ee2:	0011      	movs	r1, r2
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f7fc fb3b 	bl	8002560 <_fstat>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d103      	bne.n	8005ef6 <_fstat_r+0x1e>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d000      	beq.n	8005ef6 <_fstat_r+0x1e>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	20000354 	.word	0x20000354

08005efc <_isatty_r>:
 8005efc:	2300      	movs	r3, #0
 8005efe:	b570      	push	{r4, r5, r6, lr}
 8005f00:	4d06      	ldr	r5, [pc, #24]	; (8005f1c <_isatty_r+0x20>)
 8005f02:	0004      	movs	r4, r0
 8005f04:	0008      	movs	r0, r1
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	f7fc fb38 	bl	800257c <_isatty>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d103      	bne.n	8005f18 <_isatty_r+0x1c>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d000      	beq.n	8005f18 <_isatty_r+0x1c>
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	bd70      	pop	{r4, r5, r6, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	20000354 	.word	0x20000354

08005f20 <_lseek_r>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	0004      	movs	r4, r0
 8005f24:	0008      	movs	r0, r1
 8005f26:	0011      	movs	r1, r2
 8005f28:	001a      	movs	r2, r3
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4d05      	ldr	r5, [pc, #20]	; (8005f44 <_lseek_r+0x24>)
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	f7fc fb2d 	bl	800258e <_lseek>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d103      	bne.n	8005f40 <_lseek_r+0x20>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d000      	beq.n	8005f40 <_lseek_r+0x20>
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	20000354 	.word	0x20000354

08005f48 <memchr>:
 8005f48:	b2c9      	uxtb	r1, r1
 8005f4a:	1882      	adds	r2, r0, r2
 8005f4c:	4290      	cmp	r0, r2
 8005f4e:	d101      	bne.n	8005f54 <memchr+0xc>
 8005f50:	2000      	movs	r0, #0
 8005f52:	4770      	bx	lr
 8005f54:	7803      	ldrb	r3, [r0, #0]
 8005f56:	428b      	cmp	r3, r1
 8005f58:	d0fb      	beq.n	8005f52 <memchr+0xa>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	e7f6      	b.n	8005f4c <memchr+0x4>

08005f5e <memmove>:
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	4288      	cmp	r0, r1
 8005f62:	d902      	bls.n	8005f6a <memmove+0xc>
 8005f64:	188b      	adds	r3, r1, r2
 8005f66:	4298      	cmp	r0, r3
 8005f68:	d303      	bcc.n	8005f72 <memmove+0x14>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e007      	b.n	8005f7e <memmove+0x20>
 8005f6e:	5c8b      	ldrb	r3, [r1, r2]
 8005f70:	5483      	strb	r3, [r0, r2]
 8005f72:	3a01      	subs	r2, #1
 8005f74:	d2fb      	bcs.n	8005f6e <memmove+0x10>
 8005f76:	bd10      	pop	{r4, pc}
 8005f78:	5ccc      	ldrb	r4, [r1, r3]
 8005f7a:	54c4      	strb	r4, [r0, r3]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d1fa      	bne.n	8005f78 <memmove+0x1a>
 8005f82:	e7f8      	b.n	8005f76 <memmove+0x18>

08005f84 <__malloc_lock>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4802      	ldr	r0, [pc, #8]	; (8005f90 <__malloc_lock+0xc>)
 8005f88:	f7ff fb27 	bl	80055da <__retarget_lock_acquire_recursive>
 8005f8c:	bd10      	pop	{r4, pc}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	2000034c 	.word	0x2000034c

08005f94 <__malloc_unlock>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	4802      	ldr	r0, [pc, #8]	; (8005fa0 <__malloc_unlock+0xc>)
 8005f98:	f7ff fb20 	bl	80055dc <__retarget_lock_release_recursive>
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	2000034c 	.word	0x2000034c

08005fa4 <_realloc_r>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	0007      	movs	r7, r0
 8005fa8:	000d      	movs	r5, r1
 8005faa:	0016      	movs	r6, r2
 8005fac:	2900      	cmp	r1, #0
 8005fae:	d105      	bne.n	8005fbc <_realloc_r+0x18>
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	f7ff fbcb 	bl	800574c <_malloc_r>
 8005fb6:	0004      	movs	r4, r0
 8005fb8:	0020      	movs	r0, r4
 8005fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	d103      	bne.n	8005fc8 <_realloc_r+0x24>
 8005fc0:	f7ff fb7a 	bl	80056b8 <_free_r>
 8005fc4:	0034      	movs	r4, r6
 8005fc6:	e7f7      	b.n	8005fb8 <_realloc_r+0x14>
 8005fc8:	f000 f826 	bl	8006018 <_malloc_usable_size_r>
 8005fcc:	002c      	movs	r4, r5
 8005fce:	42b0      	cmp	r0, r6
 8005fd0:	d2f2      	bcs.n	8005fb8 <_realloc_r+0x14>
 8005fd2:	0031      	movs	r1, r6
 8005fd4:	0038      	movs	r0, r7
 8005fd6:	f7ff fbb9 	bl	800574c <_malloc_r>
 8005fda:	1e04      	subs	r4, r0, #0
 8005fdc:	d0ec      	beq.n	8005fb8 <_realloc_r+0x14>
 8005fde:	0029      	movs	r1, r5
 8005fe0:	0032      	movs	r2, r6
 8005fe2:	f7fe ff99 	bl	8004f18 <memcpy>
 8005fe6:	0029      	movs	r1, r5
 8005fe8:	0038      	movs	r0, r7
 8005fea:	f7ff fb65 	bl	80056b8 <_free_r>
 8005fee:	e7e3      	b.n	8005fb8 <_realloc_r+0x14>

08005ff0 <_read_r>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	0004      	movs	r4, r0
 8005ff4:	0008      	movs	r0, r1
 8005ff6:	0011      	movs	r1, r2
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4d05      	ldr	r5, [pc, #20]	; (8006014 <_read_r+0x24>)
 8005ffe:	602b      	str	r3, [r5, #0]
 8006000:	f7fc fa6b 	bl	80024da <_read>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d103      	bne.n	8006010 <_read_r+0x20>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d000      	beq.n	8006010 <_read_r+0x20>
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	20000354 	.word	0x20000354

08006018 <_malloc_usable_size_r>:
 8006018:	1f0b      	subs	r3, r1, #4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	1f18      	subs	r0, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	da01      	bge.n	8006026 <_malloc_usable_size_r+0xe>
 8006022:	580b      	ldr	r3, [r1, r0]
 8006024:	18c0      	adds	r0, r0, r3
 8006026:	4770      	bx	lr

08006028 <_init>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr

08006034 <_fini>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr
