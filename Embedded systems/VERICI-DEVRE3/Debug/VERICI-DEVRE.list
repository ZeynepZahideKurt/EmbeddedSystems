
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007428  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007800  08007800  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007808  08007808  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001f4  08007a04  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08007a04  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e49  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d37  00000000  00000000  00034065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00036da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00037bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013820  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bca  00000000  00000000  0004c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c19f  00000000  00000000  0005dc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9e31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000c9e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080074d0 	.word	0x080074d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	080074d0 	.word	0x080074d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c08      	adds	r0, r1, #0
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fac7 	bl	80009b4 <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fa4b 	bl	80008cc <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fab9 	bl	80009b4 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 faaf 	bl	80009b4 <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fa59 	bl	800091c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fa4f 	bl	800091c <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_uldivmod>:
 800048c:	2b00      	cmp	r3, #0
 800048e:	d111      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000490:	2a00      	cmp	r2, #0
 8000492:	d10f      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000494:	2900      	cmp	r1, #0
 8000496:	d100      	bne.n	800049a <__aeabi_uldivmod+0xe>
 8000498:	2800      	cmp	r0, #0
 800049a:	d002      	beq.n	80004a2 <__aeabi_uldivmod+0x16>
 800049c:	2100      	movs	r1, #0
 800049e:	43c9      	mvns	r1, r1
 80004a0:	1c08      	adds	r0, r1, #0
 80004a2:	b407      	push	{r0, r1, r2}
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <__aeabi_uldivmod+0x24>)
 80004a6:	a102      	add	r1, pc, #8	; (adr r1, 80004b0 <__aeabi_uldivmod+0x24>)
 80004a8:	1840      	adds	r0, r0, r1
 80004aa:	9002      	str	r0, [sp, #8]
 80004ac:	bd03      	pop	{r0, r1, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	ffffff65 	.word	0xffffff65
 80004b4:	b403      	push	{r0, r1}
 80004b6:	4668      	mov	r0, sp
 80004b8:	b501      	push	{r0, lr}
 80004ba:	9802      	ldr	r0, [sp, #8]
 80004bc:	f000 f82e 	bl	800051c <__udivmoddi4>
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	469e      	mov	lr, r3
 80004c4:	b002      	add	sp, #8
 80004c6:	bc0c      	pop	{r2, r3}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_lmul>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	0415      	lsls	r5, r2, #16
 80004d0:	0c2d      	lsrs	r5, r5, #16
 80004d2:	000f      	movs	r7, r1
 80004d4:	0001      	movs	r1, r0
 80004d6:	002e      	movs	r6, r5
 80004d8:	46c6      	mov	lr, r8
 80004da:	4684      	mov	ip, r0
 80004dc:	0400      	lsls	r0, r0, #16
 80004de:	0c14      	lsrs	r4, r2, #16
 80004e0:	0c00      	lsrs	r0, r0, #16
 80004e2:	0c09      	lsrs	r1, r1, #16
 80004e4:	4346      	muls	r6, r0
 80004e6:	434d      	muls	r5, r1
 80004e8:	4360      	muls	r0, r4
 80004ea:	4361      	muls	r1, r4
 80004ec:	1940      	adds	r0, r0, r5
 80004ee:	0c34      	lsrs	r4, r6, #16
 80004f0:	1824      	adds	r4, r4, r0
 80004f2:	b500      	push	{lr}
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	d903      	bls.n	8000500 <__aeabi_lmul+0x34>
 80004f8:	2080      	movs	r0, #128	; 0x80
 80004fa:	0240      	lsls	r0, r0, #9
 80004fc:	4680      	mov	r8, r0
 80004fe:	4441      	add	r1, r8
 8000500:	0c25      	lsrs	r5, r4, #16
 8000502:	186d      	adds	r5, r5, r1
 8000504:	4661      	mov	r1, ip
 8000506:	4359      	muls	r1, r3
 8000508:	437a      	muls	r2, r7
 800050a:	0430      	lsls	r0, r6, #16
 800050c:	1949      	adds	r1, r1, r5
 800050e:	0424      	lsls	r4, r4, #16
 8000510:	0c00      	lsrs	r0, r0, #16
 8000512:	1820      	adds	r0, r4, r0
 8000514:	1889      	adds	r1, r1, r2
 8000516:	bc80      	pop	{r7}
 8000518:	46b8      	mov	r8, r7
 800051a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800051c <__udivmoddi4>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	4657      	mov	r7, sl
 8000520:	464e      	mov	r6, r9
 8000522:	4645      	mov	r5, r8
 8000524:	46de      	mov	lr, fp
 8000526:	b5e0      	push	{r5, r6, r7, lr}
 8000528:	0004      	movs	r4, r0
 800052a:	000d      	movs	r5, r1
 800052c:	4692      	mov	sl, r2
 800052e:	4699      	mov	r9, r3
 8000530:	b083      	sub	sp, #12
 8000532:	428b      	cmp	r3, r1
 8000534:	d830      	bhi.n	8000598 <__udivmoddi4+0x7c>
 8000536:	d02d      	beq.n	8000594 <__udivmoddi4+0x78>
 8000538:	4649      	mov	r1, r9
 800053a:	4650      	mov	r0, sl
 800053c:	f000 fc3e 	bl	8000dbc <__clzdi2>
 8000540:	0029      	movs	r1, r5
 8000542:	0006      	movs	r6, r0
 8000544:	0020      	movs	r0, r4
 8000546:	f000 fc39 	bl	8000dbc <__clzdi2>
 800054a:	1a33      	subs	r3, r6, r0
 800054c:	4698      	mov	r8, r3
 800054e:	3b20      	subs	r3, #32
 8000550:	469b      	mov	fp, r3
 8000552:	d433      	bmi.n	80005bc <__udivmoddi4+0xa0>
 8000554:	465a      	mov	r2, fp
 8000556:	4653      	mov	r3, sl
 8000558:	4093      	lsls	r3, r2
 800055a:	4642      	mov	r2, r8
 800055c:	001f      	movs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d83a      	bhi.n	80005de <__udivmoddi4+0xc2>
 8000568:	42af      	cmp	r7, r5
 800056a:	d100      	bne.n	800056e <__udivmoddi4+0x52>
 800056c:	e078      	b.n	8000660 <__udivmoddi4+0x144>
 800056e:	465b      	mov	r3, fp
 8000570:	1ba4      	subs	r4, r4, r6
 8000572:	41bd      	sbcs	r5, r7
 8000574:	2b00      	cmp	r3, #0
 8000576:	da00      	bge.n	800057a <__udivmoddi4+0x5e>
 8000578:	e075      	b.n	8000666 <__udivmoddi4+0x14a>
 800057a:	2200      	movs	r2, #0
 800057c:	2300      	movs	r3, #0
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	465a      	mov	r2, fp
 8000586:	4093      	lsls	r3, r2
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	4642      	mov	r2, r8
 800058e:	4093      	lsls	r3, r2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	e028      	b.n	80005e6 <__udivmoddi4+0xca>
 8000594:	4282      	cmp	r2, r0
 8000596:	d9cf      	bls.n	8000538 <__udivmoddi4+0x1c>
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <__udivmoddi4+0x8e>
 80005a6:	601c      	str	r4, [r3, #0]
 80005a8:	605d      	str	r5, [r3, #4]
 80005aa:	9800      	ldr	r0, [sp, #0]
 80005ac:	9901      	ldr	r1, [sp, #4]
 80005ae:	b003      	add	sp, #12
 80005b0:	bcf0      	pop	{r4, r5, r6, r7}
 80005b2:	46bb      	mov	fp, r7
 80005b4:	46b2      	mov	sl, r6
 80005b6:	46a9      	mov	r9, r5
 80005b8:	46a0      	mov	r8, r4
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005bc:	4642      	mov	r2, r8
 80005be:	2320      	movs	r3, #32
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	4652      	mov	r2, sl
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	4641      	mov	r1, r8
 80005c8:	0013      	movs	r3, r2
 80005ca:	464a      	mov	r2, r9
 80005cc:	408a      	lsls	r2, r1
 80005ce:	0017      	movs	r7, r2
 80005d0:	4642      	mov	r2, r8
 80005d2:	431f      	orrs	r7, r3
 80005d4:	4653      	mov	r3, sl
 80005d6:	4093      	lsls	r3, r2
 80005d8:	001e      	movs	r6, r3
 80005da:	42af      	cmp	r7, r5
 80005dc:	d9c4      	bls.n	8000568 <__udivmoddi4+0x4c>
 80005de:	2200      	movs	r2, #0
 80005e0:	2300      	movs	r3, #0
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	4643      	mov	r3, r8
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0d9      	beq.n	80005a0 <__udivmoddi4+0x84>
 80005ec:	07fb      	lsls	r3, r7, #31
 80005ee:	0872      	lsrs	r2, r6, #1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4646      	mov	r6, r8
 80005f4:	087b      	lsrs	r3, r7, #1
 80005f6:	e00e      	b.n	8000616 <__udivmoddi4+0xfa>
 80005f8:	42ab      	cmp	r3, r5
 80005fa:	d101      	bne.n	8000600 <__udivmoddi4+0xe4>
 80005fc:	42a2      	cmp	r2, r4
 80005fe:	d80c      	bhi.n	800061a <__udivmoddi4+0xfe>
 8000600:	1aa4      	subs	r4, r4, r2
 8000602:	419d      	sbcs	r5, r3
 8000604:	2001      	movs	r0, #1
 8000606:	1924      	adds	r4, r4, r4
 8000608:	416d      	adcs	r5, r5
 800060a:	2100      	movs	r1, #0
 800060c:	3e01      	subs	r6, #1
 800060e:	1824      	adds	r4, r4, r0
 8000610:	414d      	adcs	r5, r1
 8000612:	2e00      	cmp	r6, #0
 8000614:	d006      	beq.n	8000624 <__udivmoddi4+0x108>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d9ee      	bls.n	80005f8 <__udivmoddi4+0xdc>
 800061a:	3e01      	subs	r6, #1
 800061c:	1924      	adds	r4, r4, r4
 800061e:	416d      	adcs	r5, r5
 8000620:	2e00      	cmp	r6, #0
 8000622:	d1f8      	bne.n	8000616 <__udivmoddi4+0xfa>
 8000624:	9800      	ldr	r0, [sp, #0]
 8000626:	9901      	ldr	r1, [sp, #4]
 8000628:	465b      	mov	r3, fp
 800062a:	1900      	adds	r0, r0, r4
 800062c:	4169      	adcs	r1, r5
 800062e:	2b00      	cmp	r3, #0
 8000630:	db24      	blt.n	800067c <__udivmoddi4+0x160>
 8000632:	002b      	movs	r3, r5
 8000634:	465a      	mov	r2, fp
 8000636:	4644      	mov	r4, r8
 8000638:	40d3      	lsrs	r3, r2
 800063a:	002a      	movs	r2, r5
 800063c:	40e2      	lsrs	r2, r4
 800063e:	001c      	movs	r4, r3
 8000640:	465b      	mov	r3, fp
 8000642:	0015      	movs	r5, r2
 8000644:	2b00      	cmp	r3, #0
 8000646:	db2a      	blt.n	800069e <__udivmoddi4+0x182>
 8000648:	0026      	movs	r6, r4
 800064a:	409e      	lsls	r6, r3
 800064c:	0033      	movs	r3, r6
 800064e:	0026      	movs	r6, r4
 8000650:	4647      	mov	r7, r8
 8000652:	40be      	lsls	r6, r7
 8000654:	0032      	movs	r2, r6
 8000656:	1a80      	subs	r0, r0, r2
 8000658:	4199      	sbcs	r1, r3
 800065a:	9000      	str	r0, [sp, #0]
 800065c:	9101      	str	r1, [sp, #4]
 800065e:	e79f      	b.n	80005a0 <__udivmoddi4+0x84>
 8000660:	42a3      	cmp	r3, r4
 8000662:	d8bc      	bhi.n	80005de <__udivmoddi4+0xc2>
 8000664:	e783      	b.n	800056e <__udivmoddi4+0x52>
 8000666:	4642      	mov	r2, r8
 8000668:	2320      	movs	r3, #32
 800066a:	2100      	movs	r1, #0
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	9100      	str	r1, [sp, #0]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	40da      	lsrs	r2, r3
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	e786      	b.n	800058a <__udivmoddi4+0x6e>
 800067c:	4642      	mov	r2, r8
 800067e:	2320      	movs	r3, #32
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	002a      	movs	r2, r5
 8000684:	4646      	mov	r6, r8
 8000686:	409a      	lsls	r2, r3
 8000688:	0023      	movs	r3, r4
 800068a:	40f3      	lsrs	r3, r6
 800068c:	4644      	mov	r4, r8
 800068e:	4313      	orrs	r3, r2
 8000690:	002a      	movs	r2, r5
 8000692:	40e2      	lsrs	r2, r4
 8000694:	001c      	movs	r4, r3
 8000696:	465b      	mov	r3, fp
 8000698:	0015      	movs	r5, r2
 800069a:	2b00      	cmp	r3, #0
 800069c:	dad4      	bge.n	8000648 <__udivmoddi4+0x12c>
 800069e:	4642      	mov	r2, r8
 80006a0:	002f      	movs	r7, r5
 80006a2:	2320      	movs	r3, #32
 80006a4:	0026      	movs	r6, r4
 80006a6:	4097      	lsls	r7, r2
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	40de      	lsrs	r6, r3
 80006ac:	003b      	movs	r3, r7
 80006ae:	4333      	orrs	r3, r6
 80006b0:	e7cd      	b.n	800064e <__udivmoddi4+0x132>
 80006b2:	46c0      	nop			; (mov r8, r8)

080006b4 <__aeabi_fdiv>:
 80006b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b6:	464f      	mov	r7, r9
 80006b8:	4646      	mov	r6, r8
 80006ba:	46d6      	mov	lr, sl
 80006bc:	0245      	lsls	r5, r0, #9
 80006be:	b5c0      	push	{r6, r7, lr}
 80006c0:	0047      	lsls	r7, r0, #1
 80006c2:	1c0c      	adds	r4, r1, #0
 80006c4:	0a6d      	lsrs	r5, r5, #9
 80006c6:	0e3f      	lsrs	r7, r7, #24
 80006c8:	0fc6      	lsrs	r6, r0, #31
 80006ca:	2f00      	cmp	r7, #0
 80006cc:	d066      	beq.n	800079c <__aeabi_fdiv+0xe8>
 80006ce:	2fff      	cmp	r7, #255	; 0xff
 80006d0:	d06c      	beq.n	80007ac <__aeabi_fdiv+0xf8>
 80006d2:	2300      	movs	r3, #0
 80006d4:	00ea      	lsls	r2, r5, #3
 80006d6:	2580      	movs	r5, #128	; 0x80
 80006d8:	4699      	mov	r9, r3
 80006da:	469a      	mov	sl, r3
 80006dc:	04ed      	lsls	r5, r5, #19
 80006de:	4315      	orrs	r5, r2
 80006e0:	3f7f      	subs	r7, #127	; 0x7f
 80006e2:	0260      	lsls	r0, r4, #9
 80006e4:	0061      	lsls	r1, r4, #1
 80006e6:	0a43      	lsrs	r3, r0, #9
 80006e8:	4698      	mov	r8, r3
 80006ea:	0e09      	lsrs	r1, r1, #24
 80006ec:	0fe4      	lsrs	r4, r4, #31
 80006ee:	2900      	cmp	r1, #0
 80006f0:	d048      	beq.n	8000784 <__aeabi_fdiv+0xd0>
 80006f2:	29ff      	cmp	r1, #255	; 0xff
 80006f4:	d010      	beq.n	8000718 <__aeabi_fdiv+0x64>
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	00d8      	lsls	r0, r3, #3
 80006fa:	04d2      	lsls	r2, r2, #19
 80006fc:	4302      	orrs	r2, r0
 80006fe:	4690      	mov	r8, r2
 8000700:	2000      	movs	r0, #0
 8000702:	397f      	subs	r1, #127	; 0x7f
 8000704:	464a      	mov	r2, r9
 8000706:	0033      	movs	r3, r6
 8000708:	1a7f      	subs	r7, r7, r1
 800070a:	4302      	orrs	r2, r0
 800070c:	496c      	ldr	r1, [pc, #432]	; (80008c0 <__aeabi_fdiv+0x20c>)
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	588a      	ldr	r2, [r1, r2]
 8000712:	4063      	eors	r3, r4
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4697      	mov	pc, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d16d      	bne.n	80007f8 <__aeabi_fdiv+0x144>
 800071c:	2002      	movs	r0, #2
 800071e:	3fff      	subs	r7, #255	; 0xff
 8000720:	e033      	b.n	800078a <__aeabi_fdiv+0xd6>
 8000722:	2300      	movs	r3, #0
 8000724:	4698      	mov	r8, r3
 8000726:	0026      	movs	r6, r4
 8000728:	4645      	mov	r5, r8
 800072a:	4682      	mov	sl, r0
 800072c:	4653      	mov	r3, sl
 800072e:	2b02      	cmp	r3, #2
 8000730:	d100      	bne.n	8000734 <__aeabi_fdiv+0x80>
 8000732:	e07f      	b.n	8000834 <__aeabi_fdiv+0x180>
 8000734:	2b03      	cmp	r3, #3
 8000736:	d100      	bne.n	800073a <__aeabi_fdiv+0x86>
 8000738:	e094      	b.n	8000864 <__aeabi_fdiv+0x1b0>
 800073a:	2b01      	cmp	r3, #1
 800073c:	d017      	beq.n	800076e <__aeabi_fdiv+0xba>
 800073e:	0038      	movs	r0, r7
 8000740:	307f      	adds	r0, #127	; 0x7f
 8000742:	2800      	cmp	r0, #0
 8000744:	dd5f      	ble.n	8000806 <__aeabi_fdiv+0x152>
 8000746:	076b      	lsls	r3, r5, #29
 8000748:	d004      	beq.n	8000754 <__aeabi_fdiv+0xa0>
 800074a:	230f      	movs	r3, #15
 800074c:	402b      	ands	r3, r5
 800074e:	2b04      	cmp	r3, #4
 8000750:	d000      	beq.n	8000754 <__aeabi_fdiv+0xa0>
 8000752:	3504      	adds	r5, #4
 8000754:	012b      	lsls	r3, r5, #4
 8000756:	d503      	bpl.n	8000760 <__aeabi_fdiv+0xac>
 8000758:	0038      	movs	r0, r7
 800075a:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <__aeabi_fdiv+0x210>)
 800075c:	3080      	adds	r0, #128	; 0x80
 800075e:	401d      	ands	r5, r3
 8000760:	28fe      	cmp	r0, #254	; 0xfe
 8000762:	dc67      	bgt.n	8000834 <__aeabi_fdiv+0x180>
 8000764:	01ad      	lsls	r5, r5, #6
 8000766:	0a6d      	lsrs	r5, r5, #9
 8000768:	b2c0      	uxtb	r0, r0
 800076a:	e002      	b.n	8000772 <__aeabi_fdiv+0xbe>
 800076c:	001e      	movs	r6, r3
 800076e:	2000      	movs	r0, #0
 8000770:	2500      	movs	r5, #0
 8000772:	05c0      	lsls	r0, r0, #23
 8000774:	4328      	orrs	r0, r5
 8000776:	07f6      	lsls	r6, r6, #31
 8000778:	4330      	orrs	r0, r6
 800077a:	bce0      	pop	{r5, r6, r7}
 800077c:	46ba      	mov	sl, r7
 800077e:	46b1      	mov	r9, r6
 8000780:	46a8      	mov	r8, r5
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000784:	2b00      	cmp	r3, #0
 8000786:	d12b      	bne.n	80007e0 <__aeabi_fdiv+0x12c>
 8000788:	2001      	movs	r0, #1
 800078a:	464a      	mov	r2, r9
 800078c:	0033      	movs	r3, r6
 800078e:	494e      	ldr	r1, [pc, #312]	; (80008c8 <__aeabi_fdiv+0x214>)
 8000790:	4302      	orrs	r2, r0
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	588a      	ldr	r2, [r1, r2]
 8000796:	4063      	eors	r3, r4
 8000798:	b2db      	uxtb	r3, r3
 800079a:	4697      	mov	pc, r2
 800079c:	2d00      	cmp	r5, #0
 800079e:	d113      	bne.n	80007c8 <__aeabi_fdiv+0x114>
 80007a0:	2304      	movs	r3, #4
 80007a2:	4699      	mov	r9, r3
 80007a4:	3b03      	subs	r3, #3
 80007a6:	2700      	movs	r7, #0
 80007a8:	469a      	mov	sl, r3
 80007aa:	e79a      	b.n	80006e2 <__aeabi_fdiv+0x2e>
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d105      	bne.n	80007bc <__aeabi_fdiv+0x108>
 80007b0:	2308      	movs	r3, #8
 80007b2:	4699      	mov	r9, r3
 80007b4:	3b06      	subs	r3, #6
 80007b6:	27ff      	movs	r7, #255	; 0xff
 80007b8:	469a      	mov	sl, r3
 80007ba:	e792      	b.n	80006e2 <__aeabi_fdiv+0x2e>
 80007bc:	230c      	movs	r3, #12
 80007be:	4699      	mov	r9, r3
 80007c0:	3b09      	subs	r3, #9
 80007c2:	27ff      	movs	r7, #255	; 0xff
 80007c4:	469a      	mov	sl, r3
 80007c6:	e78c      	b.n	80006e2 <__aeabi_fdiv+0x2e>
 80007c8:	0028      	movs	r0, r5
 80007ca:	f000 fad9 	bl	8000d80 <__clzsi2>
 80007ce:	2776      	movs	r7, #118	; 0x76
 80007d0:	1f43      	subs	r3, r0, #5
 80007d2:	409d      	lsls	r5, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	427f      	negs	r7, r7
 80007d8:	4699      	mov	r9, r3
 80007da:	469a      	mov	sl, r3
 80007dc:	1a3f      	subs	r7, r7, r0
 80007de:	e780      	b.n	80006e2 <__aeabi_fdiv+0x2e>
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 facd 	bl	8000d80 <__clzsi2>
 80007e6:	4642      	mov	r2, r8
 80007e8:	1f43      	subs	r3, r0, #5
 80007ea:	2176      	movs	r1, #118	; 0x76
 80007ec:	409a      	lsls	r2, r3
 80007ee:	4249      	negs	r1, r1
 80007f0:	1a09      	subs	r1, r1, r0
 80007f2:	4690      	mov	r8, r2
 80007f4:	2000      	movs	r0, #0
 80007f6:	e785      	b.n	8000704 <__aeabi_fdiv+0x50>
 80007f8:	21ff      	movs	r1, #255	; 0xff
 80007fa:	2003      	movs	r0, #3
 80007fc:	e782      	b.n	8000704 <__aeabi_fdiv+0x50>
 80007fe:	001e      	movs	r6, r3
 8000800:	20ff      	movs	r0, #255	; 0xff
 8000802:	2500      	movs	r5, #0
 8000804:	e7b5      	b.n	8000772 <__aeabi_fdiv+0xbe>
 8000806:	2301      	movs	r3, #1
 8000808:	1a1b      	subs	r3, r3, r0
 800080a:	2b1b      	cmp	r3, #27
 800080c:	dcaf      	bgt.n	800076e <__aeabi_fdiv+0xba>
 800080e:	379e      	adds	r7, #158	; 0x9e
 8000810:	0029      	movs	r1, r5
 8000812:	40bd      	lsls	r5, r7
 8000814:	40d9      	lsrs	r1, r3
 8000816:	1e6a      	subs	r2, r5, #1
 8000818:	4195      	sbcs	r5, r2
 800081a:	430d      	orrs	r5, r1
 800081c:	076b      	lsls	r3, r5, #29
 800081e:	d004      	beq.n	800082a <__aeabi_fdiv+0x176>
 8000820:	230f      	movs	r3, #15
 8000822:	402b      	ands	r3, r5
 8000824:	2b04      	cmp	r3, #4
 8000826:	d000      	beq.n	800082a <__aeabi_fdiv+0x176>
 8000828:	3504      	adds	r5, #4
 800082a:	016b      	lsls	r3, r5, #5
 800082c:	d544      	bpl.n	80008b8 <__aeabi_fdiv+0x204>
 800082e:	2001      	movs	r0, #1
 8000830:	2500      	movs	r5, #0
 8000832:	e79e      	b.n	8000772 <__aeabi_fdiv+0xbe>
 8000834:	20ff      	movs	r0, #255	; 0xff
 8000836:	2500      	movs	r5, #0
 8000838:	e79b      	b.n	8000772 <__aeabi_fdiv+0xbe>
 800083a:	2580      	movs	r5, #128	; 0x80
 800083c:	2600      	movs	r6, #0
 800083e:	20ff      	movs	r0, #255	; 0xff
 8000840:	03ed      	lsls	r5, r5, #15
 8000842:	e796      	b.n	8000772 <__aeabi_fdiv+0xbe>
 8000844:	2300      	movs	r3, #0
 8000846:	4698      	mov	r8, r3
 8000848:	2080      	movs	r0, #128	; 0x80
 800084a:	03c0      	lsls	r0, r0, #15
 800084c:	4205      	tst	r5, r0
 800084e:	d009      	beq.n	8000864 <__aeabi_fdiv+0x1b0>
 8000850:	4643      	mov	r3, r8
 8000852:	4203      	tst	r3, r0
 8000854:	d106      	bne.n	8000864 <__aeabi_fdiv+0x1b0>
 8000856:	4645      	mov	r5, r8
 8000858:	4305      	orrs	r5, r0
 800085a:	026d      	lsls	r5, r5, #9
 800085c:	0026      	movs	r6, r4
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	e786      	b.n	8000772 <__aeabi_fdiv+0xbe>
 8000864:	2080      	movs	r0, #128	; 0x80
 8000866:	03c0      	lsls	r0, r0, #15
 8000868:	4305      	orrs	r5, r0
 800086a:	026d      	lsls	r5, r5, #9
 800086c:	20ff      	movs	r0, #255	; 0xff
 800086e:	0a6d      	lsrs	r5, r5, #9
 8000870:	e77f      	b.n	8000772 <__aeabi_fdiv+0xbe>
 8000872:	4641      	mov	r1, r8
 8000874:	016a      	lsls	r2, r5, #5
 8000876:	0148      	lsls	r0, r1, #5
 8000878:	4282      	cmp	r2, r0
 800087a:	d219      	bcs.n	80008b0 <__aeabi_fdiv+0x1fc>
 800087c:	211b      	movs	r1, #27
 800087e:	2500      	movs	r5, #0
 8000880:	3f01      	subs	r7, #1
 8000882:	2601      	movs	r6, #1
 8000884:	0014      	movs	r4, r2
 8000886:	006d      	lsls	r5, r5, #1
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	2c00      	cmp	r4, #0
 800088c:	db01      	blt.n	8000892 <__aeabi_fdiv+0x1de>
 800088e:	4290      	cmp	r0, r2
 8000890:	d801      	bhi.n	8000896 <__aeabi_fdiv+0x1e2>
 8000892:	1a12      	subs	r2, r2, r0
 8000894:	4335      	orrs	r5, r6
 8000896:	3901      	subs	r1, #1
 8000898:	2900      	cmp	r1, #0
 800089a:	d1f3      	bne.n	8000884 <__aeabi_fdiv+0x1d0>
 800089c:	1e50      	subs	r0, r2, #1
 800089e:	4182      	sbcs	r2, r0
 80008a0:	0038      	movs	r0, r7
 80008a2:	307f      	adds	r0, #127	; 0x7f
 80008a4:	001e      	movs	r6, r3
 80008a6:	4315      	orrs	r5, r2
 80008a8:	2800      	cmp	r0, #0
 80008aa:	dd00      	ble.n	80008ae <__aeabi_fdiv+0x1fa>
 80008ac:	e74b      	b.n	8000746 <__aeabi_fdiv+0x92>
 80008ae:	e7aa      	b.n	8000806 <__aeabi_fdiv+0x152>
 80008b0:	211a      	movs	r1, #26
 80008b2:	2501      	movs	r5, #1
 80008b4:	1a12      	subs	r2, r2, r0
 80008b6:	e7e4      	b.n	8000882 <__aeabi_fdiv+0x1ce>
 80008b8:	01ad      	lsls	r5, r5, #6
 80008ba:	2000      	movs	r0, #0
 80008bc:	0a6d      	lsrs	r5, r5, #9
 80008be:	e758      	b.n	8000772 <__aeabi_fdiv+0xbe>
 80008c0:	0800763c 	.word	0x0800763c
 80008c4:	f7ffffff 	.word	0xf7ffffff
 80008c8:	0800767c 	.word	0x0800767c

080008cc <__eqsf2>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	0042      	lsls	r2, r0, #1
 80008d0:	024e      	lsls	r6, r1, #9
 80008d2:	004c      	lsls	r4, r1, #1
 80008d4:	0245      	lsls	r5, r0, #9
 80008d6:	0a6d      	lsrs	r5, r5, #9
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	0fc3      	lsrs	r3, r0, #31
 80008dc:	0a76      	lsrs	r6, r6, #9
 80008de:	0e24      	lsrs	r4, r4, #24
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	2aff      	cmp	r2, #255	; 0xff
 80008e4:	d00f      	beq.n	8000906 <__eqsf2+0x3a>
 80008e6:	2cff      	cmp	r4, #255	; 0xff
 80008e8:	d011      	beq.n	800090e <__eqsf2+0x42>
 80008ea:	2001      	movs	r0, #1
 80008ec:	42a2      	cmp	r2, r4
 80008ee:	d000      	beq.n	80008f2 <__eqsf2+0x26>
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	42b5      	cmp	r5, r6
 80008f4:	d1fc      	bne.n	80008f0 <__eqsf2+0x24>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d00d      	beq.n	8000916 <__eqsf2+0x4a>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d1f8      	bne.n	80008f0 <__eqsf2+0x24>
 80008fe:	0028      	movs	r0, r5
 8000900:	1e45      	subs	r5, r0, #1
 8000902:	41a8      	sbcs	r0, r5
 8000904:	e7f4      	b.n	80008f0 <__eqsf2+0x24>
 8000906:	2001      	movs	r0, #1
 8000908:	2d00      	cmp	r5, #0
 800090a:	d1f1      	bne.n	80008f0 <__eqsf2+0x24>
 800090c:	e7eb      	b.n	80008e6 <__eqsf2+0x1a>
 800090e:	2001      	movs	r0, #1
 8000910:	2e00      	cmp	r6, #0
 8000912:	d1ed      	bne.n	80008f0 <__eqsf2+0x24>
 8000914:	e7e9      	b.n	80008ea <__eqsf2+0x1e>
 8000916:	2000      	movs	r0, #0
 8000918:	e7ea      	b.n	80008f0 <__eqsf2+0x24>
 800091a:	46c0      	nop			; (mov r8, r8)

0800091c <__gesf2>:
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091e:	0042      	lsls	r2, r0, #1
 8000920:	0246      	lsls	r6, r0, #9
 8000922:	024d      	lsls	r5, r1, #9
 8000924:	004c      	lsls	r4, r1, #1
 8000926:	0fc3      	lsrs	r3, r0, #31
 8000928:	0a76      	lsrs	r6, r6, #9
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	0e24      	lsrs	r4, r4, #24
 8000930:	0fc8      	lsrs	r0, r1, #31
 8000932:	2aff      	cmp	r2, #255	; 0xff
 8000934:	d01f      	beq.n	8000976 <__gesf2+0x5a>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d010      	beq.n	800095c <__gesf2+0x40>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d11f      	bne.n	800097e <__gesf2+0x62>
 800093e:	4271      	negs	r1, r6
 8000940:	4171      	adcs	r1, r6
 8000942:	2c00      	cmp	r4, #0
 8000944:	d101      	bne.n	800094a <__gesf2+0x2e>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d01e      	beq.n	8000988 <__gesf2+0x6c>
 800094a:	2900      	cmp	r1, #0
 800094c:	d10e      	bne.n	800096c <__gesf2+0x50>
 800094e:	4283      	cmp	r3, r0
 8000950:	d01e      	beq.n	8000990 <__gesf2+0x74>
 8000952:	2102      	movs	r1, #2
 8000954:	1e58      	subs	r0, r3, #1
 8000956:	4008      	ands	r0, r1
 8000958:	3801      	subs	r0, #1
 800095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095c:	2d00      	cmp	r5, #0
 800095e:	d126      	bne.n	80009ae <__gesf2+0x92>
 8000960:	2a00      	cmp	r2, #0
 8000962:	d1f4      	bne.n	800094e <__gesf2+0x32>
 8000964:	4271      	negs	r1, r6
 8000966:	4171      	adcs	r1, r6
 8000968:	2900      	cmp	r1, #0
 800096a:	d0f0      	beq.n	800094e <__gesf2+0x32>
 800096c:	2800      	cmp	r0, #0
 800096e:	d1f4      	bne.n	800095a <__gesf2+0x3e>
 8000970:	2001      	movs	r0, #1
 8000972:	4240      	negs	r0, r0
 8000974:	e7f1      	b.n	800095a <__gesf2+0x3e>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d119      	bne.n	80009ae <__gesf2+0x92>
 800097a:	2cff      	cmp	r4, #255	; 0xff
 800097c:	d0ee      	beq.n	800095c <__gesf2+0x40>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d1e5      	bne.n	800094e <__gesf2+0x32>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d1e3      	bne.n	800094e <__gesf2+0x32>
 8000986:	e7e4      	b.n	8000952 <__gesf2+0x36>
 8000988:	2000      	movs	r0, #0
 800098a:	2e00      	cmp	r6, #0
 800098c:	d0e5      	beq.n	800095a <__gesf2+0x3e>
 800098e:	e7e0      	b.n	8000952 <__gesf2+0x36>
 8000990:	42a2      	cmp	r2, r4
 8000992:	dc05      	bgt.n	80009a0 <__gesf2+0x84>
 8000994:	dbea      	blt.n	800096c <__gesf2+0x50>
 8000996:	42ae      	cmp	r6, r5
 8000998:	d802      	bhi.n	80009a0 <__gesf2+0x84>
 800099a:	d3e7      	bcc.n	800096c <__gesf2+0x50>
 800099c:	2000      	movs	r0, #0
 800099e:	e7dc      	b.n	800095a <__gesf2+0x3e>
 80009a0:	4241      	negs	r1, r0
 80009a2:	4141      	adcs	r1, r0
 80009a4:	4248      	negs	r0, r1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4008      	ands	r0, r1
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7d5      	b.n	800095a <__gesf2+0x3e>
 80009ae:	2002      	movs	r0, #2
 80009b0:	4240      	negs	r0, r0
 80009b2:	e7d2      	b.n	800095a <__gesf2+0x3e>

080009b4 <__lesf2>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	0042      	lsls	r2, r0, #1
 80009b8:	0246      	lsls	r6, r0, #9
 80009ba:	024d      	lsls	r5, r1, #9
 80009bc:	004c      	lsls	r4, r1, #1
 80009be:	0fc3      	lsrs	r3, r0, #31
 80009c0:	0a76      	lsrs	r6, r6, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	0a6d      	lsrs	r5, r5, #9
 80009c6:	0e24      	lsrs	r4, r4, #24
 80009c8:	0fc8      	lsrs	r0, r1, #31
 80009ca:	2aff      	cmp	r2, #255	; 0xff
 80009cc:	d00d      	beq.n	80009ea <__lesf2+0x36>
 80009ce:	2cff      	cmp	r4, #255	; 0xff
 80009d0:	d00f      	beq.n	80009f2 <__lesf2+0x3e>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d123      	bne.n	8000a1e <__lesf2+0x6a>
 80009d6:	4271      	negs	r1, r6
 80009d8:	4171      	adcs	r1, r6
 80009da:	2c00      	cmp	r4, #0
 80009dc:	d10f      	bne.n	80009fe <__lesf2+0x4a>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d10d      	bne.n	80009fe <__lesf2+0x4a>
 80009e2:	2000      	movs	r0, #0
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d014      	beq.n	8000a12 <__lesf2+0x5e>
 80009e8:	e00d      	b.n	8000a06 <__lesf2+0x52>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d110      	bne.n	8000a10 <__lesf2+0x5c>
 80009ee:	2cff      	cmp	r4, #255	; 0xff
 80009f0:	d115      	bne.n	8000a1e <__lesf2+0x6a>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d10c      	bne.n	8000a10 <__lesf2+0x5c>
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d103      	bne.n	8000a02 <__lesf2+0x4e>
 80009fa:	4271      	negs	r1, r6
 80009fc:	4171      	adcs	r1, r6
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d108      	bne.n	8000a14 <__lesf2+0x60>
 8000a02:	4283      	cmp	r3, r0
 8000a04:	d010      	beq.n	8000a28 <__lesf2+0x74>
 8000a06:	2102      	movs	r1, #2
 8000a08:	1e58      	subs	r0, r3, #1
 8000a0a:	4008      	ands	r0, r1
 8000a0c:	3801      	subs	r0, #1
 8000a0e:	e000      	b.n	8000a12 <__lesf2+0x5e>
 8000a10:	2002      	movs	r0, #2
 8000a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d1fc      	bne.n	8000a12 <__lesf2+0x5e>
 8000a18:	2001      	movs	r0, #1
 8000a1a:	4240      	negs	r0, r0
 8000a1c:	e7f9      	b.n	8000a12 <__lesf2+0x5e>
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d1ef      	bne.n	8000a02 <__lesf2+0x4e>
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d1ed      	bne.n	8000a02 <__lesf2+0x4e>
 8000a26:	e7ee      	b.n	8000a06 <__lesf2+0x52>
 8000a28:	42a2      	cmp	r2, r4
 8000a2a:	dc05      	bgt.n	8000a38 <__lesf2+0x84>
 8000a2c:	dbf2      	blt.n	8000a14 <__lesf2+0x60>
 8000a2e:	42ae      	cmp	r6, r5
 8000a30:	d802      	bhi.n	8000a38 <__lesf2+0x84>
 8000a32:	d3ef      	bcc.n	8000a14 <__lesf2+0x60>
 8000a34:	2000      	movs	r0, #0
 8000a36:	e7ec      	b.n	8000a12 <__lesf2+0x5e>
 8000a38:	4241      	negs	r1, r0
 8000a3a:	4141      	adcs	r1, r0
 8000a3c:	4248      	negs	r0, r1
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4008      	ands	r0, r1
 8000a42:	3801      	subs	r0, #1
 8000a44:	e7e5      	b.n	8000a12 <__lesf2+0x5e>
 8000a46:	46c0      	nop			; (mov r8, r8)

08000a48 <__aeabi_fmul>:
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4a:	4657      	mov	r7, sl
 8000a4c:	464e      	mov	r6, r9
 8000a4e:	4645      	mov	r5, r8
 8000a50:	46de      	mov	lr, fp
 8000a52:	0244      	lsls	r4, r0, #9
 8000a54:	b5e0      	push	{r5, r6, r7, lr}
 8000a56:	0045      	lsls	r5, r0, #1
 8000a58:	1c0f      	adds	r7, r1, #0
 8000a5a:	0a64      	lsrs	r4, r4, #9
 8000a5c:	0e2d      	lsrs	r5, r5, #24
 8000a5e:	0fc6      	lsrs	r6, r0, #31
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d047      	beq.n	8000af4 <__aeabi_fmul+0xac>
 8000a64:	2dff      	cmp	r5, #255	; 0xff
 8000a66:	d04d      	beq.n	8000b04 <__aeabi_fmul+0xbc>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	2080      	movs	r0, #128	; 0x80
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	469b      	mov	fp, r3
 8000a70:	00e4      	lsls	r4, r4, #3
 8000a72:	04c0      	lsls	r0, r0, #19
 8000a74:	4304      	orrs	r4, r0
 8000a76:	3d7f      	subs	r5, #127	; 0x7f
 8000a78:	0278      	lsls	r0, r7, #9
 8000a7a:	0a43      	lsrs	r3, r0, #9
 8000a7c:	4699      	mov	r9, r3
 8000a7e:	007a      	lsls	r2, r7, #1
 8000a80:	0ffb      	lsrs	r3, r7, #31
 8000a82:	4698      	mov	r8, r3
 8000a84:	0e12      	lsrs	r2, r2, #24
 8000a86:	464b      	mov	r3, r9
 8000a88:	d044      	beq.n	8000b14 <__aeabi_fmul+0xcc>
 8000a8a:	2aff      	cmp	r2, #255	; 0xff
 8000a8c:	d011      	beq.n	8000ab2 <__aeabi_fmul+0x6a>
 8000a8e:	00d8      	lsls	r0, r3, #3
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	04db      	lsls	r3, r3, #19
 8000a94:	4303      	orrs	r3, r0
 8000a96:	4699      	mov	r9, r3
 8000a98:	2000      	movs	r0, #0
 8000a9a:	3a7f      	subs	r2, #127	; 0x7f
 8000a9c:	18ad      	adds	r5, r5, r2
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	4653      	mov	r3, sl
 8000aa2:	4077      	eors	r7, r6
 8000aa4:	1c69      	adds	r1, r5, #1
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d83f      	bhi.n	8000b2a <__aeabi_fmul+0xe2>
 8000aaa:	4a72      	ldr	r2, [pc, #456]	; (8000c74 <__aeabi_fmul+0x22c>)
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	58d3      	ldr	r3, [r2, r3]
 8000ab0:	469f      	mov	pc, r3
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fmul+0x72>
 8000ab8:	e079      	b.n	8000bae <__aeabi_fmul+0x166>
 8000aba:	4652      	mov	r2, sl
 8000abc:	2302      	movs	r3, #2
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	4692      	mov	sl, r2
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	e7eb      	b.n	8000a9e <__aeabi_fmul+0x56>
 8000ac6:	4647      	mov	r7, r8
 8000ac8:	464c      	mov	r4, r9
 8000aca:	4683      	mov	fp, r0
 8000acc:	465b      	mov	r3, fp
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d028      	beq.n	8000b24 <__aeabi_fmul+0xdc>
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fmul+0x90>
 8000ad6:	e0c6      	b.n	8000c66 <__aeabi_fmul+0x21e>
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d14f      	bne.n	8000b7c <__aeabi_fmul+0x134>
 8000adc:	2000      	movs	r0, #0
 8000ade:	2400      	movs	r4, #0
 8000ae0:	05c0      	lsls	r0, r0, #23
 8000ae2:	07ff      	lsls	r7, r7, #31
 8000ae4:	4320      	orrs	r0, r4
 8000ae6:	4338      	orrs	r0, r7
 8000ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8000aea:	46bb      	mov	fp, r7
 8000aec:	46b2      	mov	sl, r6
 8000aee:	46a9      	mov	r9, r5
 8000af0:	46a0      	mov	r8, r4
 8000af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d171      	bne.n	8000bdc <__aeabi_fmul+0x194>
 8000af8:	2304      	movs	r3, #4
 8000afa:	469a      	mov	sl, r3
 8000afc:	3b03      	subs	r3, #3
 8000afe:	2500      	movs	r5, #0
 8000b00:	469b      	mov	fp, r3
 8000b02:	e7b9      	b.n	8000a78 <__aeabi_fmul+0x30>
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d163      	bne.n	8000bd0 <__aeabi_fmul+0x188>
 8000b08:	2308      	movs	r3, #8
 8000b0a:	469a      	mov	sl, r3
 8000b0c:	3b06      	subs	r3, #6
 8000b0e:	25ff      	movs	r5, #255	; 0xff
 8000b10:	469b      	mov	fp, r3
 8000b12:	e7b1      	b.n	8000a78 <__aeabi_fmul+0x30>
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d150      	bne.n	8000bba <__aeabi_fmul+0x172>
 8000b18:	4652      	mov	r2, sl
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	4692      	mov	sl, r2
 8000b20:	2001      	movs	r0, #1
 8000b22:	e7bc      	b.n	8000a9e <__aeabi_fmul+0x56>
 8000b24:	20ff      	movs	r0, #255	; 0xff
 8000b26:	2400      	movs	r4, #0
 8000b28:	e7da      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	0c26      	lsrs	r6, r4, #16
 8000b2e:	0424      	lsls	r4, r4, #16
 8000b30:	0c22      	lsrs	r2, r4, #16
 8000b32:	0404      	lsls	r4, r0, #16
 8000b34:	0c24      	lsrs	r4, r4, #16
 8000b36:	464b      	mov	r3, r9
 8000b38:	0020      	movs	r0, r4
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	4350      	muls	r0, r2
 8000b3e:	4374      	muls	r4, r6
 8000b40:	435a      	muls	r2, r3
 8000b42:	435e      	muls	r6, r3
 8000b44:	1912      	adds	r2, r2, r4
 8000b46:	0c03      	lsrs	r3, r0, #16
 8000b48:	189b      	adds	r3, r3, r2
 8000b4a:	429c      	cmp	r4, r3
 8000b4c:	d903      	bls.n	8000b56 <__aeabi_fmul+0x10e>
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	0252      	lsls	r2, r2, #9
 8000b52:	4694      	mov	ip, r2
 8000b54:	4466      	add	r6, ip
 8000b56:	0400      	lsls	r0, r0, #16
 8000b58:	041a      	lsls	r2, r3, #16
 8000b5a:	0c00      	lsrs	r0, r0, #16
 8000b5c:	1812      	adds	r2, r2, r0
 8000b5e:	0194      	lsls	r4, r2, #6
 8000b60:	1e60      	subs	r0, r4, #1
 8000b62:	4184      	sbcs	r4, r0
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	0e92      	lsrs	r2, r2, #26
 8000b68:	199b      	adds	r3, r3, r6
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	d572      	bpl.n	8000c5a <__aeabi_fmul+0x212>
 8000b74:	2001      	movs	r0, #1
 8000b76:	0863      	lsrs	r3, r4, #1
 8000b78:	4004      	ands	r4, r0
 8000b7a:	431c      	orrs	r4, r3
 8000b7c:	0008      	movs	r0, r1
 8000b7e:	307f      	adds	r0, #127	; 0x7f
 8000b80:	2800      	cmp	r0, #0
 8000b82:	dd3c      	ble.n	8000bfe <__aeabi_fmul+0x1b6>
 8000b84:	0763      	lsls	r3, r4, #29
 8000b86:	d004      	beq.n	8000b92 <__aeabi_fmul+0x14a>
 8000b88:	230f      	movs	r3, #15
 8000b8a:	4023      	ands	r3, r4
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_fmul+0x14a>
 8000b90:	3404      	adds	r4, #4
 8000b92:	0123      	lsls	r3, r4, #4
 8000b94:	d503      	bpl.n	8000b9e <__aeabi_fmul+0x156>
 8000b96:	3180      	adds	r1, #128	; 0x80
 8000b98:	0008      	movs	r0, r1
 8000b9a:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <__aeabi_fmul+0x230>)
 8000b9c:	401c      	ands	r4, r3
 8000b9e:	28fe      	cmp	r0, #254	; 0xfe
 8000ba0:	dcc0      	bgt.n	8000b24 <__aeabi_fmul+0xdc>
 8000ba2:	01a4      	lsls	r4, r4, #6
 8000ba4:	0a64      	lsrs	r4, r4, #9
 8000ba6:	b2c0      	uxtb	r0, r0
 8000ba8:	e79a      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000baa:	0037      	movs	r7, r6
 8000bac:	e78e      	b.n	8000acc <__aeabi_fmul+0x84>
 8000bae:	4652      	mov	r2, sl
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	4692      	mov	sl, r2
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	e771      	b.n	8000a9e <__aeabi_fmul+0x56>
 8000bba:	4648      	mov	r0, r9
 8000bbc:	f000 f8e0 	bl	8000d80 <__clzsi2>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	1f43      	subs	r3, r0, #5
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	1a2d      	subs	r5, r5, r0
 8000bc8:	4691      	mov	r9, r2
 8000bca:	2000      	movs	r0, #0
 8000bcc:	3d76      	subs	r5, #118	; 0x76
 8000bce:	e766      	b.n	8000a9e <__aeabi_fmul+0x56>
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	3b09      	subs	r3, #9
 8000bd6:	25ff      	movs	r5, #255	; 0xff
 8000bd8:	469b      	mov	fp, r3
 8000bda:	e74d      	b.n	8000a78 <__aeabi_fmul+0x30>
 8000bdc:	0020      	movs	r0, r4
 8000bde:	f000 f8cf 	bl	8000d80 <__clzsi2>
 8000be2:	2576      	movs	r5, #118	; 0x76
 8000be4:	1f43      	subs	r3, r0, #5
 8000be6:	409c      	lsls	r4, r3
 8000be8:	2300      	movs	r3, #0
 8000bea:	426d      	negs	r5, r5
 8000bec:	469a      	mov	sl, r3
 8000bee:	469b      	mov	fp, r3
 8000bf0:	1a2d      	subs	r5, r5, r0
 8000bf2:	e741      	b.n	8000a78 <__aeabi_fmul+0x30>
 8000bf4:	2480      	movs	r4, #128	; 0x80
 8000bf6:	2700      	movs	r7, #0
 8000bf8:	20ff      	movs	r0, #255	; 0xff
 8000bfa:	03e4      	lsls	r4, r4, #15
 8000bfc:	e770      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	2b1b      	cmp	r3, #27
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x1c0>
 8000c06:	e769      	b.n	8000adc <__aeabi_fmul+0x94>
 8000c08:	319e      	adds	r1, #158	; 0x9e
 8000c0a:	0020      	movs	r0, r4
 8000c0c:	408c      	lsls	r4, r1
 8000c0e:	40d8      	lsrs	r0, r3
 8000c10:	1e63      	subs	r3, r4, #1
 8000c12:	419c      	sbcs	r4, r3
 8000c14:	4304      	orrs	r4, r0
 8000c16:	0763      	lsls	r3, r4, #29
 8000c18:	d004      	beq.n	8000c24 <__aeabi_fmul+0x1dc>
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	4023      	ands	r3, r4
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fmul+0x1dc>
 8000c22:	3404      	adds	r4, #4
 8000c24:	0163      	lsls	r3, r4, #5
 8000c26:	d51a      	bpl.n	8000c5e <__aeabi_fmul+0x216>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	e758      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000c2e:	2080      	movs	r0, #128	; 0x80
 8000c30:	03c0      	lsls	r0, r0, #15
 8000c32:	4204      	tst	r4, r0
 8000c34:	d009      	beq.n	8000c4a <__aeabi_fmul+0x202>
 8000c36:	464b      	mov	r3, r9
 8000c38:	4203      	tst	r3, r0
 8000c3a:	d106      	bne.n	8000c4a <__aeabi_fmul+0x202>
 8000c3c:	464c      	mov	r4, r9
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	0264      	lsls	r4, r4, #9
 8000c42:	4647      	mov	r7, r8
 8000c44:	20ff      	movs	r0, #255	; 0xff
 8000c46:	0a64      	lsrs	r4, r4, #9
 8000c48:	e74a      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000c4a:	2080      	movs	r0, #128	; 0x80
 8000c4c:	03c0      	lsls	r0, r0, #15
 8000c4e:	4304      	orrs	r4, r0
 8000c50:	0264      	lsls	r4, r4, #9
 8000c52:	0037      	movs	r7, r6
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	0a64      	lsrs	r4, r4, #9
 8000c58:	e742      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000c5a:	0029      	movs	r1, r5
 8000c5c:	e78e      	b.n	8000b7c <__aeabi_fmul+0x134>
 8000c5e:	01a4      	lsls	r4, r4, #6
 8000c60:	2000      	movs	r0, #0
 8000c62:	0a64      	lsrs	r4, r4, #9
 8000c64:	e73c      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000c66:	2080      	movs	r0, #128	; 0x80
 8000c68:	03c0      	lsls	r0, r0, #15
 8000c6a:	4304      	orrs	r4, r0
 8000c6c:	0264      	lsls	r4, r4, #9
 8000c6e:	20ff      	movs	r0, #255	; 0xff
 8000c70:	0a64      	lsrs	r4, r4, #9
 8000c72:	e735      	b.n	8000ae0 <__aeabi_fmul+0x98>
 8000c74:	080076bc 	.word	0x080076bc
 8000c78:	f7ffffff 	.word	0xf7ffffff

08000c7c <__aeabi_i2f>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d013      	beq.n	8000caa <__aeabi_i2f+0x2e>
 8000c82:	17c3      	asrs	r3, r0, #31
 8000c84:	18c5      	adds	r5, r0, r3
 8000c86:	405d      	eors	r5, r3
 8000c88:	0fc4      	lsrs	r4, r0, #31
 8000c8a:	0028      	movs	r0, r5
 8000c8c:	f000 f878 	bl	8000d80 <__clzsi2>
 8000c90:	239e      	movs	r3, #158	; 0x9e
 8000c92:	0001      	movs	r1, r0
 8000c94:	1a1b      	subs	r3, r3, r0
 8000c96:	2b96      	cmp	r3, #150	; 0x96
 8000c98:	dc0f      	bgt.n	8000cba <__aeabi_i2f+0x3e>
 8000c9a:	2808      	cmp	r0, #8
 8000c9c:	dd01      	ble.n	8000ca2 <__aeabi_i2f+0x26>
 8000c9e:	3908      	subs	r1, #8
 8000ca0:	408d      	lsls	r5, r1
 8000ca2:	026d      	lsls	r5, r5, #9
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	b2d8      	uxtb	r0, r3
 8000ca8:	e002      	b.n	8000cb0 <__aeabi_i2f+0x34>
 8000caa:	2400      	movs	r4, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	2500      	movs	r5, #0
 8000cb0:	05c0      	lsls	r0, r0, #23
 8000cb2:	4328      	orrs	r0, r5
 8000cb4:	07e4      	lsls	r4, r4, #31
 8000cb6:	4320      	orrs	r0, r4
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	2b99      	cmp	r3, #153	; 0x99
 8000cbc:	dd0b      	ble.n	8000cd6 <__aeabi_i2f+0x5a>
 8000cbe:	2205      	movs	r2, #5
 8000cc0:	002e      	movs	r6, r5
 8000cc2:	1a12      	subs	r2, r2, r0
 8000cc4:	40d6      	lsrs	r6, r2
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	321b      	adds	r2, #27
 8000cca:	4095      	lsls	r5, r2
 8000ccc:	0028      	movs	r0, r5
 8000cce:	1e45      	subs	r5, r0, #1
 8000cd0:	41a8      	sbcs	r0, r5
 8000cd2:	0035      	movs	r5, r6
 8000cd4:	4305      	orrs	r5, r0
 8000cd6:	2905      	cmp	r1, #5
 8000cd8:	dd01      	ble.n	8000cde <__aeabi_i2f+0x62>
 8000cda:	1f4a      	subs	r2, r1, #5
 8000cdc:	4095      	lsls	r5, r2
 8000cde:	002a      	movs	r2, r5
 8000ce0:	4e08      	ldr	r6, [pc, #32]	; (8000d04 <__aeabi_i2f+0x88>)
 8000ce2:	4032      	ands	r2, r6
 8000ce4:	0768      	lsls	r0, r5, #29
 8000ce6:	d009      	beq.n	8000cfc <__aeabi_i2f+0x80>
 8000ce8:	200f      	movs	r0, #15
 8000cea:	4028      	ands	r0, r5
 8000cec:	2804      	cmp	r0, #4
 8000cee:	d005      	beq.n	8000cfc <__aeabi_i2f+0x80>
 8000cf0:	3204      	adds	r2, #4
 8000cf2:	0150      	lsls	r0, r2, #5
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_i2f+0x80>
 8000cf6:	239f      	movs	r3, #159	; 0x9f
 8000cf8:	4032      	ands	r2, r6
 8000cfa:	1a5b      	subs	r3, r3, r1
 8000cfc:	0192      	lsls	r2, r2, #6
 8000cfe:	0a55      	lsrs	r5, r2, #9
 8000d00:	b2d8      	uxtb	r0, r3
 8000d02:	e7d5      	b.n	8000cb0 <__aeabi_i2f+0x34>
 8000d04:	fbffffff 	.word	0xfbffffff

08000d08 <__aeabi_ui2f>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	1e05      	subs	r5, r0, #0
 8000d0c:	d00e      	beq.n	8000d2c <__aeabi_ui2f+0x24>
 8000d0e:	f000 f837 	bl	8000d80 <__clzsi2>
 8000d12:	239e      	movs	r3, #158	; 0x9e
 8000d14:	0004      	movs	r4, r0
 8000d16:	1a1b      	subs	r3, r3, r0
 8000d18:	2b96      	cmp	r3, #150	; 0x96
 8000d1a:	dc0c      	bgt.n	8000d36 <__aeabi_ui2f+0x2e>
 8000d1c:	2808      	cmp	r0, #8
 8000d1e:	dd01      	ble.n	8000d24 <__aeabi_ui2f+0x1c>
 8000d20:	3c08      	subs	r4, #8
 8000d22:	40a5      	lsls	r5, r4
 8000d24:	026d      	lsls	r5, r5, #9
 8000d26:	0a6d      	lsrs	r5, r5, #9
 8000d28:	b2d8      	uxtb	r0, r3
 8000d2a:	e001      	b.n	8000d30 <__aeabi_ui2f+0x28>
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	2500      	movs	r5, #0
 8000d30:	05c0      	lsls	r0, r0, #23
 8000d32:	4328      	orrs	r0, r5
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	2b99      	cmp	r3, #153	; 0x99
 8000d38:	dd09      	ble.n	8000d4e <__aeabi_ui2f+0x46>
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	0029      	movs	r1, r5
 8000d3e:	321b      	adds	r2, #27
 8000d40:	4091      	lsls	r1, r2
 8000d42:	1e4a      	subs	r2, r1, #1
 8000d44:	4191      	sbcs	r1, r2
 8000d46:	2205      	movs	r2, #5
 8000d48:	1a12      	subs	r2, r2, r0
 8000d4a:	40d5      	lsrs	r5, r2
 8000d4c:	430d      	orrs	r5, r1
 8000d4e:	2c05      	cmp	r4, #5
 8000d50:	dd01      	ble.n	8000d56 <__aeabi_ui2f+0x4e>
 8000d52:	1f62      	subs	r2, r4, #5
 8000d54:	4095      	lsls	r5, r2
 8000d56:	0029      	movs	r1, r5
 8000d58:	4e08      	ldr	r6, [pc, #32]	; (8000d7c <__aeabi_ui2f+0x74>)
 8000d5a:	4031      	ands	r1, r6
 8000d5c:	076a      	lsls	r2, r5, #29
 8000d5e:	d009      	beq.n	8000d74 <__aeabi_ui2f+0x6c>
 8000d60:	200f      	movs	r0, #15
 8000d62:	4028      	ands	r0, r5
 8000d64:	2804      	cmp	r0, #4
 8000d66:	d005      	beq.n	8000d74 <__aeabi_ui2f+0x6c>
 8000d68:	3104      	adds	r1, #4
 8000d6a:	014a      	lsls	r2, r1, #5
 8000d6c:	d502      	bpl.n	8000d74 <__aeabi_ui2f+0x6c>
 8000d6e:	239f      	movs	r3, #159	; 0x9f
 8000d70:	4031      	ands	r1, r6
 8000d72:	1b1b      	subs	r3, r3, r4
 8000d74:	0189      	lsls	r1, r1, #6
 8000d76:	0a4d      	lsrs	r5, r1, #9
 8000d78:	b2d8      	uxtb	r0, r3
 8000d7a:	e7d9      	b.n	8000d30 <__aeabi_ui2f+0x28>
 8000d7c:	fbffffff 	.word	0xfbffffff

08000d80 <__clzsi2>:
 8000d80:	211c      	movs	r1, #28
 8000d82:	2301      	movs	r3, #1
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d301      	bcc.n	8000d8e <__clzsi2+0xe>
 8000d8a:	0c00      	lsrs	r0, r0, #16
 8000d8c:	3910      	subs	r1, #16
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d301      	bcc.n	8000d98 <__clzsi2+0x18>
 8000d94:	0a00      	lsrs	r0, r0, #8
 8000d96:	3908      	subs	r1, #8
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d301      	bcc.n	8000da2 <__clzsi2+0x22>
 8000d9e:	0900      	lsrs	r0, r0, #4
 8000da0:	3904      	subs	r1, #4
 8000da2:	a202      	add	r2, pc, #8	; (adr r2, 8000dac <__clzsi2+0x2c>)
 8000da4:	5c10      	ldrb	r0, [r2, r0]
 8000da6:	1840      	adds	r0, r0, r1
 8000da8:	4770      	bx	lr
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	02020304 	.word	0x02020304
 8000db0:	01010101 	.word	0x01010101
	...

08000dbc <__clzdi2>:
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	2900      	cmp	r1, #0
 8000dc0:	d103      	bne.n	8000dca <__clzdi2+0xe>
 8000dc2:	f7ff ffdd 	bl	8000d80 <__clzsi2>
 8000dc6:	3020      	adds	r0, #32
 8000dc8:	e002      	b.n	8000dd0 <__clzdi2+0x14>
 8000dca:	1c08      	adds	r0, r1, #0
 8000dcc:	f7ff ffd8 	bl	8000d80 <__clzsi2>
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)

08000dd4 <InputSDIO>:
**Name: 	vSpi3Init
**Func: 	Init Spi-3 Config
**Note:
**********************************************************/
void InputSDIO(void)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	240c      	movs	r4, #12
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	0018      	movs	r0, r3
 8000de0:	2314      	movs	r3, #20
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f005 faf4 	bl	80063d2 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <InputSDIO+0x70>)
 8000dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <InputSDIO+0x70>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	430a      	orrs	r2, r1
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <InputSDIO+0x70>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <InputSDIO+0x70>)
 8000e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <InputSDIO+0x70>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <InputSDIO+0x70>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	2201      	movs	r2, #1
 8000e14:	4013      	ands	r3, r2
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	00d2      	lsls	r2, r2, #3
 8000e20:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(SDIO_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	193a      	adds	r2, r7, r4
 8000e30:	23a0      	movs	r3, #160	; 0xa0
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	0011      	movs	r1, r2
 8000e36:	0018      	movs	r0, r3
 8000e38:	f002 ffd6 	bl	8003de8 <HAL_GPIO_Init>
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b009      	add	sp, #36	; 0x24
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	40021000 	.word	0x40021000

08000e48 <OutputSDIO>:
void OutputSDIO(){
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	240c      	movs	r4, #12
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0018      	movs	r0, r3
 8000e54:	2314      	movs	r3, #20
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f005 faba 	bl	80063d2 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <OutputSDIO+0x88>)
 8000e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <OutputSDIO+0x88>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	430a      	orrs	r2, r1
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <OutputSDIO+0x88>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <OutputSDIO+0x88>)
 8000e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <OutputSDIO+0x88>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <OutputSDIO+0x88>)
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	2201      	movs	r2, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	00d9      	lsls	r1, r3, #3
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2200      	movs	r2, #0
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f003 f930 	bl	80040fe <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	00d2      	lsls	r2, r2, #3
 8000ea4:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	193a      	adds	r2, r7, r4
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f002 ff91 	bl	8003de8 <HAL_GPIO_Init>


}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b009      	add	sp, #36	; 0x24
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <OutputSDCK>:

void OutputSDCK(void){
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	240c      	movs	r4, #12
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	0018      	movs	r0, r3
 8000ee0:	2314      	movs	r3, #20
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f005 fa74 	bl	80063d2 <memset>

	  	  /* GPIO Ports Clock Enable */
	  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <OutputSDCK+0x88>)
 8000eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <OutputSDCK+0x88>)
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <OutputSDCK+0x88>)
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
	  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <OutputSDCK+0x88>)
 8000f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <OutputSDCK+0x88>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <OutputSDCK+0x88>)
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f12:	2201      	movs	r2, #1
 8000f14:	4013      	ands	r3, r2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

	  	  /*Configure GPIO pin Output Level */
	  	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	0099      	lsls	r1, r3, #2
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	2200      	movs	r2, #0
 8000f24:	0018      	movs	r0, r3
 8000f26:	f003 f8ea 	bl	80040fe <HAL_GPIO_WritePin>

	  	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  	  GPIO_InitStruct.Pin = SCLK_Pin;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	601a      	str	r2, [r3, #0]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2201      	movs	r2, #1
 8000f36:	605a      	str	r2, [r3, #4]
	  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
	  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	193a      	adds	r2, r7, r4
 8000f46:	23a0      	movs	r3, #160	; 0xa0
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f002 ff4b 	bl	8003de8 <HAL_GPIO_Init>

}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b009      	add	sp, #36	; 0x24
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	40021000 	.word	0x40021000

08000f60 <OutputFCSB>:

void OutputFCSB(void){
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	240c      	movs	r4, #12
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2314      	movs	r3, #20
 8000f6e:	001a      	movs	r2, r3
 8000f70:	2100      	movs	r1, #0
 8000f72:	f005 fa2e 	bl	80063d2 <memset>

		  	  /* GPIO Ports Clock Enable */
		  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <OutputFCSB+0x84>)
 8000f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <OutputFCSB+0x84>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <OutputFCSB+0x84>)
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
		  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <OutputFCSB+0x84>)
 8000f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <OutputFCSB+0x84>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	430a      	orrs	r2, r1
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <OutputFCSB+0x84>)
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	2200      	movs	r2, #0
 8000fac:	2104      	movs	r1, #4
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f003 f8a5 	bl	80040fe <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 8000fb4:	0021      	movs	r1, r4
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2204      	movs	r2, #4
 8000fba:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	187a      	adds	r2, r7, r1
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f002 ff06 	bl	8003de8 <HAL_GPIO_Init>


}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b009      	add	sp, #36	; 0x24
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <OutputCSB>:

void OutputCSB(void){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	240c      	movs	r4, #12
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	2314      	movs	r3, #20
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f005 f9ea 	bl	80063d2 <memset>

	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <OutputCSB+0x84>)
 8001000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <OutputCSB+0x84>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	430a      	orrs	r2, r1
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <OutputCSB+0x84>)
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <OutputCSB+0x84>)
 8001018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <OutputCSB+0x84>)
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <OutputCSB+0x84>)
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	2201      	movs	r2, #1
 8001028:	4013      	ands	r3, r2
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2200      	movs	r2, #0
 8001034:	2102      	movs	r1, #2
 8001036:	0018      	movs	r0, r3
 8001038:	f003 f861 	bl	80040fe <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = CSB_Pin;
 800103c:	0021      	movs	r1, r4
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2201      	movs	r2, #1
 8001048:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	187a      	adds	r2, r7, r1
 8001058:	23a0      	movs	r3, #160	; 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f002 fec2 	bl	8003de8 <HAL_GPIO_Init>
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b009      	add	sp, #36	; 0x24
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	40021000 	.word	0x40021000

08001070 <_delay_us>:
void _delay_us(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
 	// HAL_UART_Transmit( &hlpuart1, (uint8_t *)"giriyor\r\n",9, 100);

	//
	  	//  }
	 //HAL_Delay(1);
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <vSpi3Init>:
void vSpi3Init(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
	OutputCSB();
 800107e:	f7ff ffb3 	bl	8000fe8 <OutputCSB>
	OutputFCSB();
 8001082:	f7ff ff6d 	bl	8000f60 <OutputFCSB>
	OutputSDCK();
 8001086:	f7ff ff25 	bl	8000ed4 <OutputSDCK>
	OutputSDIO();
 800108a:	f7ff fedd 	bl	8000e48 <OutputSDIO>

	SetCSB();
 800108e:	23a0      	movs	r3, #160	; 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	2201      	movs	r2, #1
 8001094:	2102      	movs	r1, #2
 8001096:	0018      	movs	r0, r3
 8001098:	f003 f831 	bl	80040fe <HAL_GPIO_WritePin>
	SetFCSB();
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	2201      	movs	r2, #1
 80010a2:	2104      	movs	r1, #4
 80010a4:	0018      	movs	r0, r3
 80010a6:	f003 f82a 	bl	80040fe <HAL_GPIO_WritePin>
	SetSDIO();
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	00d9      	lsls	r1, r3, #3
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	2201      	movs	r2, #1
 80010b4:	0018      	movs	r0, r3
 80010b6:	f003 f822 	bl	80040fe <HAL_GPIO_WritePin>
	ClrSDCK();
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	0099      	lsls	r1, r3, #2
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	2200      	movs	r2, #0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f003 f81a 	bl	80040fe <HAL_GPIO_WritePin>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <vSpi3WriteByte>:
**Func: 	SPI-3 send one byte
**Input:
**Output:  
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	701a      	strb	r2, [r3, #0]

 	byte bitcnt;
 
	SetFCSB();				//FCSB = 1;
 80010dc:	23a0      	movs	r3, #160	; 0xa0
 80010de:	05db      	lsls	r3, r3, #23
 80010e0:	2201      	movs	r2, #1
 80010e2:	2104      	movs	r1, #4
 80010e4:	0018      	movs	r0, r3
 80010e6:	f003 f80a 	bl	80040fe <HAL_GPIO_WritePin>
 
 	OutputSDIO();			//SDA output mode
 80010ea:	f7ff fead 	bl	8000e48 <OutputSDIO>
 	SetSDIO();				//    output 1
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	00d9      	lsls	r1, r3, #3
 80010f2:	23a0      	movs	r3, #160	; 0xa0
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	2201      	movs	r2, #1
 80010f8:	0018      	movs	r0, r3
 80010fa:	f003 f800 	bl	80040fe <HAL_GPIO_WritePin>
 
 	ClrSDCK();
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	0099      	lsls	r1, r3, #2
 8001102:	23a0      	movs	r3, #160	; 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2200      	movs	r2, #0
 8001108:	0018      	movs	r0, r3
 800110a:	f002 fff8 	bl	80040fe <HAL_GPIO_WritePin>
 	ClrCSB();
 800110e:	23a0      	movs	r3, #160	; 0xa0
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	2200      	movs	r2, #0
 8001114:	2102      	movs	r1, #2
 8001116:	0018      	movs	r0, r3
 8001118:	f002 fff1 	bl	80040fe <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 800111c:	230f      	movs	r3, #15
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2208      	movs	r2, #8
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e034      	b.n	8001190 <vSpi3WriteByte+0xc0>
 		{
		ClrSDCK();
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	0099      	lsls	r1, r3, #2
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	2200      	movs	r2, #0
 8001130:	0018      	movs	r0, r3
 8001132:	f002 ffe4 	bl	80040fe <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8001136:	f7ff ff9b 	bl	8001070 <_delay_us>
 		if(dat&0x80)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	da08      	bge.n	8001156 <vSpi3WriteByte+0x86>
 			SetSDIO();
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	00d9      	lsls	r1, r3, #3
 8001148:	23a0      	movs	r3, #160	; 0xa0
 800114a:	05db      	lsls	r3, r3, #23
 800114c:	2201      	movs	r2, #1
 800114e:	0018      	movs	r0, r3
 8001150:	f002 ffd5 	bl	80040fe <HAL_GPIO_WritePin>
 8001154:	e007      	b.n	8001166 <vSpi3WriteByte+0x96>
 		else
 			ClrSDIO();
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	00d9      	lsls	r1, r3, #3
 800115a:	23a0      	movs	r3, #160	; 0xa0
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	2200      	movs	r2, #0
 8001160:	0018      	movs	r0, r3
 8001162:	f002 ffcc 	bl	80040fe <HAL_GPIO_WritePin>
		SetSDCK();
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	0099      	lsls	r1, r3, #2
 800116a:	23a0      	movs	r3, #160	; 0xa0
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2201      	movs	r2, #1
 8001170:	0018      	movs	r0, r3
 8001172:	f002 ffc4 	bl	80040fe <HAL_GPIO_WritePin>
 		dat <<= 1;
 8001176:	1dfa      	adds	r2, r7, #7
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	18db      	adds	r3, r3, r3
 800117e:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8001180:	f7ff ff76 	bl	8001070 <_delay_us>
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001184:	210f      	movs	r1, #15
 8001186:	187b      	adds	r3, r7, r1
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	187b      	adds	r3, r7, r1
 800118c:	3a01      	subs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1c5      	bne.n	8001126 <vSpi3WriteByte+0x56>
 		}
 	ClrSDCK();
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	0099      	lsls	r1, r3, #2
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	2200      	movs	r2, #0
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 ffaa 	bl	80040fe <HAL_GPIO_WritePin>
 	SetSDIO();
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	00d9      	lsls	r1, r3, #3
 80011ae:	23a0      	movs	r3, #160	; 0xa0
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	2201      	movs	r2, #1
 80011b4:	0018      	movs	r0, r3
 80011b6:	f002 ffa2 	bl	80040fe <HAL_GPIO_WritePin>
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b004      	add	sp, #16
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <bSpi3ReadByte>:
**Func: 	SPI-3 read one byte
**Input:
**Output:  
**********************************************************/
byte bSpi3ReadByte(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
	byte RdPara = 0;
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
  
 	ClrCSB();
 80011ce:	23a0      	movs	r3, #160	; 0xa0
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	2200      	movs	r2, #0
 80011d4:	2102      	movs	r1, #2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f002 ff91 	bl	80040fe <HAL_GPIO_WritePin>
 	InputSDIO();
 80011dc:	f7ff fdfa 	bl	8000dd4 <InputSDIO>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80011e0:	1dbb      	adds	r3, r7, #6
 80011e2:	2208      	movs	r2, #8
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e033      	b.n	8001250 <bSpi3ReadByte+0x8e>
 		{
 		ClrSDCK();
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	0099      	lsls	r1, r3, #2
 80011ec:	23a0      	movs	r3, #160	; 0xa0
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	2200      	movs	r2, #0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f002 ff83 	bl	80040fe <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 80011f8:	1dfa      	adds	r2, r7, #7
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	18db      	adds	r3, r3, r3
 8001200:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8001202:	f7ff ff35 	bl	8001070 <_delay_us>
 		SetSDCK();
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	0099      	lsls	r1, r3, #2
 800120a:	23a0      	movs	r3, #160	; 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2201      	movs	r2, #1
 8001210:	0018      	movs	r0, r3
 8001212:	f002 ff74 	bl	80040fe <HAL_GPIO_WritePin>
 		_delay_us(); //_delay_us(1);
 8001216:	f7ff ff2b 	bl	8001070 <_delay_us>

 		if(SDIO_H())
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	00da      	lsls	r2, r3, #3
 800121e:	23a0      	movs	r3, #160	; 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f002 ff4d 	bl	80040c4 <HAL_GPIO_ReadPin>
 800122a:	0003      	movs	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d106      	bne.n	800123e <bSpi3ReadByte+0x7c>
 			RdPara |= 0x01;
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	1dfa      	adds	r2, r7, #7
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e003      	b.n	8001246 <bSpi3ReadByte+0x84>
 		else
 			RdPara |= 0x00;
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	1dfa      	adds	r2, r7, #7
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	3a01      	subs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1c7      	bne.n	80011e8 <bSpi3ReadByte+0x26>
 		}
 	ClrSDCK();
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	0099      	lsls	r1, r3, #2
 800125c:	23a0      	movs	r3, #160	; 0xa0
 800125e:	05db      	lsls	r3, r3, #23
 8001260:	2200      	movs	r2, #0
 8001262:	0018      	movs	r0, r3
 8001264:	f002 ff4b 	bl	80040fe <HAL_GPIO_WritePin>
 	OutputSDIO();
 8001268:	f7ff fdee 	bl	8000e48 <OutputSDIO>
 	SetSDIO();
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	00d9      	lsls	r1, r3, #3
 8001270:	23a0      	movs	r3, #160	; 0xa0
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	2201      	movs	r2, #1
 8001276:	0018      	movs	r0, r3
 8001278:	f002 ff41 	bl	80040fe <HAL_GPIO_WritePin>
 	SetCSB();
 800127c:	23a0      	movs	r3, #160	; 0xa0
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	2201      	movs	r2, #1
 8001282:	2102      	movs	r1, #2
 8001284:	0018      	movs	r0, r3
 8001286:	f002 ff3a 	bl	80040fe <HAL_GPIO_WritePin>
 	return(RdPara);
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}

08001296 <vSpi3Write>:
**Func: 	SPI Write One word
**Input: 	Write word
**Output:	none
**********************************************************/
void vSpi3Write(word dat)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 	vSpi3WriteByte((byte)(dat>>8)&0x7F);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	227f      	movs	r2, #127	; 0x7f
 80012a6:	4013      	ands	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff ff10 	bl	80010d0 <vSpi3WriteByte>
 	vSpi3WriteByte((byte)dat);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff ff0b 	bl	80010d0 <vSpi3WriteByte>
 	SetCSB();
 80012ba:	23a0      	movs	r3, #160	; 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	2201      	movs	r2, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f002 ff1b 	bl	80040fe <HAL_GPIO_WritePin>
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <bSpi3Read>:
**Func: 	SPI-3 Read One byte
**Input: 	readout addresss
**Output:	readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	0002      	movs	r2, r0
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	701a      	strb	r2, [r3, #0]
  	vSpi3WriteByte(addr|0x80);
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	4252      	negs	r2, r2
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fef1 	bl	80010d0 <vSpi3WriteByte>
 	return(bSpi3ReadByte());
 80012ee:	f7ff ff68 	bl	80011c2 <bSpi3ReadByte>
 80012f2:	0003      	movs	r3, r0
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <vSpi3WriteFIFO>:
**Func: 	SPI-3 send one byte to FIFO
**Input: 	one byte buffer
**Output:	none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	0002      	movs	r2, r0
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
 
 	SetCSB();
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	2201      	movs	r2, #1
 800130e:	2102      	movs	r1, #2
 8001310:	0018      	movs	r0, r3
 8001312:	f002 fef4 	bl	80040fe <HAL_GPIO_WritePin>
	OutputSDIO();
 8001316:	f7ff fd97 	bl	8000e48 <OutputSDIO>
	ClrSDCK();
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	0099      	lsls	r1, r3, #2
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	2200      	movs	r2, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f002 feea 	bl	80040fe <HAL_GPIO_WritePin>
 	ClrFCSB();			//FCSB = 0
 800132a:	23a0      	movs	r3, #160	; 0xa0
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	2200      	movs	r2, #0
 8001330:	2104      	movs	r1, #4
 8001332:	0018      	movs	r0, r3
 8001334:	f002 fee3 	bl	80040fe <HAL_GPIO_WritePin>
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2208      	movs	r2, #8
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e034      	b.n	80013ac <vSpi3WriteFIFO+0xb0>
 		{
 		ClrSDCK();
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	0099      	lsls	r1, r3, #2
 8001346:	23a0      	movs	r3, #160	; 0xa0
 8001348:	05db      	lsls	r3, r3, #23
 800134a:	2200      	movs	r2, #0
 800134c:	0018      	movs	r0, r3
 800134e:	f002 fed6 	bl	80040fe <HAL_GPIO_WritePin>

 		if(dat&0x80)
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	da08      	bge.n	800136e <vSpi3WriteFIFO+0x72>
			SetSDIO();
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	00d9      	lsls	r1, r3, #3
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2201      	movs	r2, #1
 8001366:	0018      	movs	r0, r3
 8001368:	f002 fec9 	bl	80040fe <HAL_GPIO_WritePin>
 800136c:	e007      	b.n	800137e <vSpi3WriteFIFO+0x82>
		else
			ClrSDIO();
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	00d9      	lsls	r1, r3, #3
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	2200      	movs	r2, #0
 8001378:	0018      	movs	r0, r3
 800137a:	f002 fec0 	bl	80040fe <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 800137e:	f7ff fe77 	bl	8001070 <_delay_us>
		SetSDCK();
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	0099      	lsls	r1, r3, #2
 8001386:	23a0      	movs	r3, #160	; 0xa0
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	2201      	movs	r2, #1
 800138c:	0018      	movs	r0, r3
 800138e:	f002 feb6 	bl	80040fe <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8001392:	f7ff fe6d 	bl	8001070 <_delay_us>
 		dat <<= 1;
 8001396:	1dfa      	adds	r2, r7, #7
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	18db      	adds	r3, r3, r3
 800139e:	7013      	strb	r3, [r2, #0]
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80013a0:	210f      	movs	r1, #15
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	3a01      	subs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	230f      	movs	r3, #15
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1c5      	bne.n	8001342 <vSpi3WriteFIFO+0x46>
 		}
 	ClrSDCK();
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	0099      	lsls	r1, r3, #2
 80013ba:	23a0      	movs	r3, #160	; 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	2200      	movs	r2, #0
 80013c0:	0018      	movs	r0, r3
 80013c2:	f002 fe9c 	bl	80040fe <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 80013c6:	f7ff fe53 	bl	8001070 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 80013ca:	f7ff fe51 	bl	8001070 <_delay_us>
 	SetFCSB();
 80013ce:	23a0      	movs	r3, #160	; 0xa0
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	2201      	movs	r2, #1
 80013d4:	2104      	movs	r1, #4
 80013d6:	0018      	movs	r0, r3
 80013d8:	f002 fe91 	bl	80040fe <HAL_GPIO_WritePin>
	SetSDIO();
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	00d9      	lsls	r1, r3, #3
 80013e0:	23a0      	movs	r3, #160	; 0xa0
 80013e2:	05db      	lsls	r3, r3, #23
 80013e4:	2201      	movs	r2, #1
 80013e6:	0018      	movs	r0, r3
 80013e8:	f002 fe89 	bl	80040fe <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 80013ec:	f7ff fe40 	bl	8001070 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 80013f0:	f7ff fe3e 	bl	8001070 <_delay_us>
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b004      	add	sp, #16
 80013fa:	bd80      	pop	{r7, pc}

080013fc <vSpi3BurstWriteFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length & head pointer
**Output:	none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	000a      	movs	r2, r1
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	701a      	strb	r2, [r3, #0]
 	byte i;
 	if(length!=0x00)
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01a      	beq.n	8001448 <vSpi3BurstWriteFIFO+0x4c>
	 	{
 		for(i=0;i<length;i++)
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e00d      	b.n	8001438 <vSpi3BurstWriteFIFO+0x3c>
 			vSpi3WriteFIFO(ptr[i]);
 800141c:	240f      	movs	r4, #15
 800141e:	193b      	adds	r3, r7, r4
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff ff67 	bl	80012fc <vSpi3WriteFIFO>
 		for(i=0;i<length;i++)
 800142e:	193b      	adds	r3, r7, r4
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	193b      	adds	r3, r7, r4
 8001434:	3201      	adds	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	230f      	movs	r3, #15
 800143a:	18fa      	adds	r2, r7, r3
 800143c:	1cfb      	adds	r3, r7, #3
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3ea      	bcc.n	800141c <vSpi3BurstWriteFIFO+0x20>
 		}
 	return;
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46c0      	nop			; (mov r8, r8)
}
 800144a:	46bd      	mov	sp, r7
 800144c:	b005      	add	sp, #20
 800144e:	bd90      	pop	{r4, r7, pc}

08001450 <GPO3In>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
void GPO3In(void)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	240c      	movs	r4, #12
 8001458:	193b      	adds	r3, r7, r4
 800145a:	0018      	movs	r0, r3
 800145c:	2314      	movs	r3, #20
 800145e:	001a      	movs	r2, r3
 8001460:	2100      	movs	r1, #0
 8001462:	f004 ffb6 	bl	80063d2 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <GPO3In+0x70>)
 8001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <GPO3In+0x70>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	430a      	orrs	r2, r1
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <GPO3In+0x70>)
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <GPO3In+0x70>)
 8001480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <GPO3In+0x70>)
 8001484:	2101      	movs	r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <GPO3In+0x70>)
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	2201      	movs	r2, #1
 8001490:	4013      	ands	r3, r2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = GPO3_Pin;
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0152      	lsls	r2, r2, #5
 800149c:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 80014aa:	193a      	adds	r2, r7, r4
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	05db      	lsls	r3, r3, #23
 80014b0:	0011      	movs	r1, r2
 80014b2:	0018      	movs	r0, r3
 80014b4:	f002 fc98 	bl	8003de8 <HAL_GPIO_Init>
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b009      	add	sp, #36	; 0x24
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	40021000 	.word	0x40021000

080014c4 <bGoTx>:

byte bGoTx(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	}
	if(i>=100)
		return(false);
	#endif

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <bGoTx+0x7c>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fee2 	bl	8001296 <vSpi3Write>
	for(i=0; i<100; i++){
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e020      	b.n	800151c <bGoTx+0x58>
		for(i=0; i<100; i++){
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e006      	b.n	80014f0 <bGoTx+0x2c>
					_delay_us(); //_delay_us(100);
 80014e2:	f7ff fdc5 	bl	8001070 <_delay_us>
		for(i=0; i<100; i++){
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	3201      	adds	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b63      	cmp	r3, #99	; 0x63
 80014f6:	d9f4      	bls.n	80014e2 <bGoTx+0x1e>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 80014f8:	2061      	movs	r0, #97	; 0x61
 80014fa:	f7ff fee9 	bl	80012d0 <bSpi3Read>
 80014fe:	0003      	movs	r3, r0
 8001500:	0019      	movs	r1, r3
 8001502:	1dbb      	adds	r3, r7, #6
 8001504:	220f      	movs	r2, #15
 8001506:	400a      	ands	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_TX)
 800150a:	1dbb      	adds	r3, r7, #6
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d009      	beq.n	8001526 <bGoTx+0x62>
	for(i=0; i<100; i++){
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	3201      	adds	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b63      	cmp	r3, #99	; 0x63
 8001522:	d9da      	bls.n	80014da <bGoTx+0x16>
 8001524:	e000      	b.n	8001528 <bGoTx+0x64>
			break;
 8001526:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b63      	cmp	r3, #99	; 0x63
 800152e:	d901      	bls.n	8001534 <bGoTx+0x70>
		return(false);
 8001530:	2300      	movs	r3, #0
 8001532:	e000      	b.n	8001536 <bGoTx+0x72>
	else
		return(true);
 8001534:	2301      	movs	r3, #1
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	00006040 	.word	0x00006040

08001544 <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	byte tmp;

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <bGoSleep+0x4c>)
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fea2 	bl	8001296 <vSpi3Write>
	for(int i=0; i<100; i++){
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	e004      	b.n	8001562 <bGoSleep+0x1e>
				_delay_us(); //_delay_us(100);
 8001558:	f7ff fd8a 	bl	8001070 <_delay_us>
	for(int i=0; i<100; i++){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b63      	cmp	r3, #99	; 0x63
 8001566:	ddf7      	ble.n	8001558 <bGoSleep+0x14>
			}	//enough?
	tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8001568:	2061      	movs	r0, #97	; 0x61
 800156a:	f7ff feb1 	bl	80012d0 <bSpi3Read>
 800156e:	0003      	movs	r3, r0
 8001570:	0019      	movs	r1, r3
 8001572:	1cfb      	adds	r3, r7, #3
 8001574:	220f      	movs	r2, #15
 8001576:	400a      	ands	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_GO_SLEEP)
 800157a:	1cfb      	adds	r3, r7, #3
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b10      	cmp	r3, #16
 8001580:	d101      	bne.n	8001586 <bGoSleep+0x42>
		return(true);
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <bGoSleep+0x44>
	else
		return(false);
 8001586:	2300      	movs	r3, #0
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	00006010 	.word	0x00006010

08001594 <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	byte tmp, i;

	RssiTrig = false;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <bGoStandby+0x80>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <bGoStandby+0x84>)
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff fe77 	bl	8001296 <vSpi3Write>
	for(i=0; i<100; i++){
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	e020      	b.n	80015f2 <bGoStandby+0x5e>
		for(i=0; i<100; i++){
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e006      	b.n	80015c6 <bGoStandby+0x32>
					_delay_us(); //_delay_us(100);
 80015b8:	f7ff fd5a 	bl	8001070 <_delay_us>
		for(i=0; i<100; i++){
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	3201      	adds	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b63      	cmp	r3, #99	; 0x63
 80015cc:	d9f4      	bls.n	80015b8 <bGoStandby+0x24>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 80015ce:	2061      	movs	r0, #97	; 0x61
 80015d0:	f7ff fe7e 	bl	80012d0 <bSpi3Read>
 80015d4:	0003      	movs	r3, r0
 80015d6:	0019      	movs	r1, r3
 80015d8:	1dbb      	adds	r3, r7, #6
 80015da:	220f      	movs	r2, #15
 80015dc:	400a      	ands	r2, r1
 80015de:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_STBY)
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d009      	beq.n	80015fc <bGoStandby+0x68>
	for(i=0; i<100; i++){
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	3201      	adds	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b63      	cmp	r3, #99	; 0x63
 80015f8:	d9da      	bls.n	80015b0 <bGoStandby+0x1c>
 80015fa:	e000      	b.n	80015fe <bGoStandby+0x6a>
			break;
 80015fc:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b63      	cmp	r3, #99	; 0x63
 8001604:	d901      	bls.n	800160a <bGoStandby+0x76>
		return(false);
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <bGoStandby+0x78>
	else
		return(true);
 800160a:	2301      	movs	r3, #1
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200002f1 	.word	0x200002f1
 8001618:	00006002 	.word	0x00006002

0800161c <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <vSoftReset+0x18>)
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff fe37 	bl	8001296 <vSpi3Write>
	HAL_Delay(1);				//enough?
 8001628:	2001      	movs	r0, #1
 800162a:	f001 fe0b 	bl	8003244 <HAL_Delay>
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	00007fff 	.word	0x00007fff

08001638 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	0002      	movs	r2, r0
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	22ca      	movs	r2, #202	; 0xca
 800164a:	01d2      	lsls	r2, r2, #7
 800164c:	4694      	mov	ip, r2
 800164e:	4463      	add	r3, ip
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fe20 	bl	8001296 <vSpi3Write>
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}

0800165e <vIntSrcCfg>:
**Function: config interrupt source  
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 800165e:	b590      	push	{r4, r7, lr}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	0002      	movs	r2, r0
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	1dbb      	adds	r3, r7, #6
 800166c:	1c0a      	adds	r2, r1, #0
 800166e:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 8001670:	2066      	movs	r0, #102	; 0x66
 8001672:	f7ff fe2d 	bl	80012d0 <bSpi3Read>
 8001676:	0003      	movs	r3, r0
 8001678:	0019      	movs	r1, r3
 800167a:	240f      	movs	r4, #15
 800167c:	193b      	adds	r3, r7, r4
 800167e:	221f      	movs	r2, #31
 8001680:	4391      	bics	r1, r2
 8001682:	000a      	movs	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8001686:	193a      	adds	r2, r7, r4
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	22cc      	movs	r2, #204	; 0xcc
 8001694:	01d2      	lsls	r2, r2, #7
 8001696:	4694      	mov	ip, r2
 8001698:	4463      	add	r3, ip
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff fdfb 	bl	8001296 <vSpi3Write>

	tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 80016a0:	2067      	movs	r0, #103	; 0x67
 80016a2:	f7ff fe15 	bl	80012d0 <bSpi3Read>
 80016a6:	0003      	movs	r3, r0
 80016a8:	0019      	movs	r1, r3
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	221f      	movs	r2, #31
 80016ae:	4391      	bics	r1, r2
 80016b0:	000a      	movs	r2, r1
 80016b2:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 80016b4:	193a      	adds	r2, r7, r4
 80016b6:	1dbb      	adds	r3, r7, #6
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4313      	orrs	r3, r2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	22ce      	movs	r2, #206	; 0xce
 80016c2:	01d2      	lsls	r2, r2, #7
 80016c4:	4694      	mov	ip, r2
 80016c6:	4463      	add	r3, ip
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fde4 	bl	8001296 <vSpi3Write>
}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b005      	add	sp, #20
 80016d4:	bd90      	pop	{r4, r7, pc}

080016d6 <vEnableAntSwitch>:
**Function:  
**Input:    
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 80016d6:	b5b0      	push	{r4, r5, r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	0002      	movs	r2, r0
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = bSpi3Read(CMT23_INT1_CTL);
 80016e2:	250f      	movs	r5, #15
 80016e4:	197c      	adds	r4, r7, r5
 80016e6:	2066      	movs	r0, #102	; 0x66
 80016e8:	f7ff fdf2 	bl	80012d0 <bSpi3Read>
 80016ec:	0003      	movs	r3, r0
 80016ee:	7023      	strb	r3, [r4, #0]
	tmp&= 0x3F;
 80016f0:	197b      	adds	r3, r7, r5
 80016f2:	197a      	adds	r2, r7, r5
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	213f      	movs	r1, #63	; 0x3f
 80016f8:	400a      	ands	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]
	switch(mode)
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d002      	beq.n	800170a <vEnableAntSwitch+0x34>
 8001704:	2b02      	cmp	r3, #2
 8001706:	d009      	beq.n	800171c <vEnableAntSwitch+0x46>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
		case 2:
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
		case 0:
		default:
			break;							//Disable
 8001708:	e010      	b.n	800172c <vEnableAntSwitch+0x56>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 800170a:	220f      	movs	r2, #15
 800170c:	18bb      	adds	r3, r7, r2
 800170e:	18ba      	adds	r2, r7, r2
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	4249      	negs	r1, r1
 8001716:	430a      	orrs	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e007      	b.n	800172c <vEnableAntSwitch+0x56>
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 800171c:	220f      	movs	r2, #15
 800171e:	18bb      	adds	r3, r7, r2
 8001720:	18ba      	adds	r2, r7, r2
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	2140      	movs	r1, #64	; 0x40
 8001726:	430a      	orrs	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	46c0      	nop			; (mov r8, r8)
	}
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	22cc      	movs	r2, #204	; 0xcc
 8001734:	01d2      	lsls	r2, r2, #7
 8001736:	4694      	mov	ip, r2
 8001738:	4463      	add	r3, ip
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff fdab 	bl	8001296 <vSpi3Write>
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bdb0      	pop	{r4, r5, r7, pc}

08001748 <vIntSrcEnable>:
**Function: enable interrupt source 
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	0002      	movs	r2, r0
 8001750:	1dfb      	adds	r3, r7, #7
 8001752:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	22d0      	movs	r2, #208	; 0xd0
 800175a:	01d2      	lsls	r2, r2, #7
 800175c:	4694      	mov	ip, r2
 800175e:	4463      	add	r3, ip
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fd98 	bl	8001296 <vSpi3Write>
}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	//byte tmp;
	//byte int_clr2 = 0;
	//byte int_clr1 = 0;
	byte flg = 0;
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
		int_clr1 |= RX_TIMEOUT_CLR;
		flg |= RX_TMO_EN;
	}
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1);	//Clear flag
#endif
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <bIntSrcFlagClr+0x28>)
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff fd89 	bl	8001296 <vSpi3Write>
	vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF);	//Clear flag
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <bIntSrcFlagClr+0x2c>)
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff fd85 	bl	8001296 <vSpi3Write>

	return(flg);
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}
 8001798:	00006a07 	.word	0x00006a07
 800179c:	00006bff 	.word	0x00006bff

080017a0 <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_FLG);
 80017a6:	1dfc      	adds	r4, r7, #7
 80017a8:	206e      	movs	r0, #110	; 0x6e
 80017aa:	f7ff fd91 	bl	80012d0 <bSpi3Read>
 80017ae:	0003      	movs	r3, r0
 80017b0:	7023      	strb	r3, [r4, #0]
	vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <vClearFIFO+0x28>)
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fd6e 	bl	8001296 <vSpi3Write>
	return(tmp);
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b003      	add	sp, #12
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	00006c03 	.word	0x00006c03

080017cc <vEnableWrFifo>:

#if 1		//splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_CTL);
 80017d2:	1dfc      	adds	r4, r7, #7
 80017d4:	2069      	movs	r0, #105	; 0x69
 80017d6:	f7ff fd7b 	bl	80012d0 <bSpi3Read>
 80017da:	0003      	movs	r3, r0
 80017dc:	7023      	strb	r3, [r4, #0]
	tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	1dfa      	adds	r2, r7, #7
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	2105      	movs	r1, #5
 80017e6:	430a      	orrs	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	22d2      	movs	r2, #210	; 0xd2
 80017f0:	01d2      	lsls	r2, r2, #7
 80017f2:	4694      	mov	ip, r2
 80017f4:	4463      	add	r3, ip
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fd4d 	bl	8001296 <vSpi3Write>
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b003      	add	sp, #12
 8001802:	bd90      	pop	{r4, r7, pc}

08001804 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
	byte tmp;
	vSpi3Init();
 800180a:	f7ff fc36 	bl	800107a <vSpi3Init>
	//GPO1In();
	//GPO2In();
	GPO3In();
 800180e:	f7ff fe1f 	bl	8001450 <GPO3In>

	//TX_ANTOut();
	//RX_ANTOut();

	vSoftReset();
 8001812:	f7ff ff03 	bl	800161c <vSoftReset>
	HAL_Delay(20);
 8001816:	2014      	movs	r0, #20
 8001818:	f001 fd14 	bl	8003244 <HAL_Delay>
	bGoStandby();
 800181c:	f7ff feba 	bl	8001594 <bGoStandby>

	//
	tmp = bSpi3Read(CMT23_MODE_STA);
 8001820:	1dfc      	adds	r4, r7, #7
 8001822:	2061      	movs	r0, #97	; 0x61
 8001824:	f7ff fd54 	bl	80012d0 <bSpi3Read>
 8001828:	0003      	movs	r3, r0
 800182a:	7023      	strb	r3, [r4, #0]
	tmp|= EEP_CPY_DIS;
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	1dfa      	adds	r2, r7, #7
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	2110      	movs	r1, #16
 8001834:	430a      	orrs	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
	tmp&= (~RSTN_IN_EN);			//Disable RstPin
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	2120      	movs	r1, #32
 8001840:	438a      	bics	r2, r1
 8001842:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	22c2      	movs	r2, #194	; 0xc2
 800184a:	01d2      	lsls	r2, r2, #7
 800184c:	4694      	mov	ip, r2
 800184e:	4463      	add	r3, ip
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff fd20 	bl	8001296 <vSpi3Write>

	bIntSrcFlagClr();
 8001856:	f7ff ff8b 	bl	8001770 <bIntSrcFlagClr>
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b003      	add	sp, #12
 8001860:	bd90      	pop	{r4, r7, pc}

08001862 <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 8001862:	b590      	push	{r4, r7, lr}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	000a      	movs	r2, r1
 800186c:	1cfb      	adds	r3, r7, #3
 800186e:	701a      	strb	r2, [r3, #0]
	byte i;

	if(length!=0){
 8001870:	1cfb      	adds	r3, r7, #3
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01a      	beq.n	80018ae <vCfgBank+0x4c>
		for(i=0; i<length; i++)
 8001878:	230f      	movs	r3, #15
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	e00e      	b.n	80018a0 <vCfgBank+0x3e>
			vSpi3Write(cfg[i]);
 8001882:	240f      	movs	r4, #15
 8001884:	193b      	adds	r3, r7, r4
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff fd00 	bl	8001296 <vSpi3Write>
		for(i=0; i<length; i++)
 8001896:	193b      	adds	r3, r7, r4
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	193b      	adds	r3, r7, r4
 800189c:	3201      	adds	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	230f      	movs	r3, #15
 80018a2:	18fa      	adds	r2, r7, r3
 80018a4:	1cfb      	adds	r3, r7, #3
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3e9      	bcc.n	8001882 <vCfgBank+0x20>
	}
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b005      	add	sp, #20
 80018b4:	bd90      	pop	{r4, r7, pc}

080018b6 <bSendMessage>:
	rev = 0xFF;
	return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	000a      	movs	r2, r1
 80018c0:	1cfb      	adds	r3, r7, #3
 80018c2:	701a      	strb	r2, [r3, #0]
	bIntSrcFlagClr();
 80018c4:	f7ff ff54 	bl	8001770 <bIntSrcFlagClr>
#if 1
	//mode1
	vSetTxPayloadLength(length);
 80018c8:	1cfb      	adds	r3, r7, #3
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f813 	bl	80018f8 <vSetTxPayloadLength>
	bGoStandby();
 80018d2:	f7ff fe5f 	bl	8001594 <bGoStandby>
	vEnableWrFifo();
 80018d6:	f7ff ff79 	bl	80017cc <vEnableWrFifo>
	vSpi3BurstWriteFIFO(msg, length);
 80018da:	1cfb      	adds	r3, r7, #3
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff fd8a 	bl	80013fc <vSpi3BurstWriteFIFO>
	bGoTx();
 80018e8:	f7ff fdec 	bl	80014c4 <bGoTx>
	vSetTxPayloadLength(length);
	bGoTx();
	vEnableWrFifo();
	vSpi3BurstWriteFIFO(msg, length);
#endif
	return(true);
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	byte tmp;
	byte len;
	bGoStandby();
 8001900:	f7ff fe48 	bl	8001594 <bGoStandby>
	tmp = bSpi3Read(CMT23_PKT_CTRL1);
 8001904:	250f      	movs	r5, #15
 8001906:	197c      	adds	r4, r7, r5
 8001908:	2045      	movs	r0, #69	; 0x45
 800190a:	f7ff fce1 	bl	80012d0 <bSpi3Read>
 800190e:	0003      	movs	r3, r0
 8001910:	7023      	strb	r3, [r4, #0]
	tmp&= 0x8F;
 8001912:	0028      	movs	r0, r5
 8001914:	183b      	adds	r3, r7, r0
 8001916:	183a      	adds	r2, r7, r0
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	2170      	movs	r1, #112	; 0x70
 800191c:	438a      	bics	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]

	if(length!=0){
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01c      	beq.n	8001960 <vSetTxPayloadLength+0x68>
		if(FixedPktLength){
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <vSetTxPayloadLength+0xc0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00c      	beq.n	8001948 <vSetTxPayloadLength+0x50>
		  tmp &= ~(1<<0);		//clear bit0
 800192e:	183b      	adds	r3, r7, r0
 8001930:	183a      	adds	r2, r7, r0
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	438a      	bics	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
		  len = length - 1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	230e      	movs	r3, #14
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	3a01      	subs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e00f      	b.n	8001968 <vSetTxPayloadLength+0x70>
		}
		else{
		  tmp |= (1<<0);	   //set bit0
 8001948:	220f      	movs	r2, #15
 800194a:	18bb      	adds	r3, r7, r2
 800194c:	18ba      	adds	r2, r7, r2
 800194e:	7812      	ldrb	r2, [r2, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
		  len = length;
 8001956:	230e      	movs	r3, #14
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e003      	b.n	8001968 <vSetTxPayloadLength+0x70>
		}
	}else
		len = 0;
 8001960:	230e      	movs	r3, #14
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

	tmp|= (((byte)(len>>8)&0x07)<<4);
 8001968:	240e      	movs	r4, #14
 800196a:	193b      	adds	r3, r7, r4
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	121b      	asrs	r3, r3, #8
 8001970:	b2db      	uxtb	r3, r3
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	b25b      	sxtb	r3, r3
 8001976:	2270      	movs	r2, #112	; 0x70
 8001978:	4013      	ands	r3, r2
 800197a:	b25a      	sxtb	r2, r3
 800197c:	210f      	movs	r1, #15
 800197e:	187b      	adds	r3, r7, r1
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b25b      	sxtb	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b25a      	sxtb	r2, r3
 8001988:	187b      	adds	r3, r7, r1
 800198a:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 800198c:	187b      	adds	r3, r7, r1
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	228a      	movs	r2, #138	; 0x8a
 8001992:	01d2      	lsls	r2, r2, #7
 8001994:	4694      	mov	ip, r2
 8001996:	4463      	add	r3, ip
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fc7c 	bl	8001296 <vSpi3Write>
	vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len);	//Payload length
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	228c      	movs	r2, #140	; 0x8c
 80019a4:	01d2      	lsls	r2, r2, #7
 80019a6:	4694      	mov	ip, r2
 80019a8:	4463      	add	r3, ip
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff fc73 	bl	8001296 <vSpi3Write>
	//bGoSleep();
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	200002f2 	.word	0x200002f2

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	b0fd      	sub	sp, #500	; 0x1f4
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c2:	f001 fbcf 	bl	8003164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c6:	f000 fd05 	bl	80023d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ca:	f000 fe45 	bl	8002658 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80019ce:	f000 fe15 	bl	80025fc <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80019d2:	f000 fdd3 	bl	800257c <MX_I2C1_Init>
  MX_ADC_Init();
 80019d6:	f000 fd6b 	bl	80024b0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  //  https://github.com/Sensirion/embedded-sht

  sensirion_i2c_init();
 80019da:	f001 f8bd 	bl	8002b58 <sensirion_i2c_init>
HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Basladi\r\n", 9, 100);
 80019de:	49c6      	ldr	r1, [pc, #792]	; (8001cf8 <main+0x33c>)
 80019e0:	48c6      	ldr	r0, [pc, #792]	; (8001cfc <main+0x340>)
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	2209      	movs	r2, #9
 80019e6:	f003 fff7 	bl	80059d8 <HAL_UART_Transmit>
  /*while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
      printf("SHT sensor probing failed\n");
    }*/ // burayı aç
  printf("SHT sensor probing successful\n");
 80019ea:	4bc5      	ldr	r3, [pc, #788]	; (8001d00 <main+0x344>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f004 fd6b 	bl	80064c8 <puts>
#define VREFINT_CAL_ADDR			0x1FF80078
#define VREFINT_CAL 				((uint16_t*) VREFINT_CAL_ADDR)

#define TX_NUM  24
  byte tx_buf[32] = {'H', 'A', 'T', 'A', '1', '1', '1', '1', '1', '1', 'A', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5', 'B'};
 80019f2:	23da      	movs	r3, #218	; 0xda
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	18f9      	adds	r1, r7, r3
 80019f8:	4ac2      	ldr	r2, [pc, #776]	; (8001d04 <main+0x348>)
 80019fa:	000b      	movs	r3, r1
 80019fc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80019fe:	c331      	stmia	r3!, {r0, r4, r5}
 8001a00:	ca11      	ldmia	r2!, {r0, r4}
 8001a02:	c311      	stmia	r3!, {r0, r4}
 8001a04:	8810      	ldrh	r0, [r2, #0]
 8001a06:	8018      	strh	r0, [r3, #0]
 8001a08:	7892      	ldrb	r2, [r2, #2]
 8001a0a:	709a      	strb	r2, [r3, #2]
 8001a0c:	2317      	movs	r3, #23
 8001a0e:	18cb      	adds	r3, r1, r3
 8001a10:	2209      	movs	r2, #9
 8001a12:	2100      	movs	r1, #0
 8001a14:	0018      	movs	r0, r3
 8001a16:	f004 fcdc 	bl	80063d2 <memset>
  char buffer3[100];
  char sayac[100];
  char buffer_temperature[100];


  FixedPktLength    = 0;
 8001a1a:	4bbb      	ldr	r3, [pc, #748]	; (8001d08 <main+0x34c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
  PayloadLength     = 23;
 8001a20:	4bba      	ldr	r3, [pc, #744]	; (8001d0c <main+0x350>)
 8001a22:	2217      	movs	r2, #23
 8001a24:	601a      	str	r2, [r3, #0]
  vInit();
 8001a26:	f7ff feed 	bl	8001804 <vInit>
  vCfgBank(CMTBank, 12);
 8001a2a:	4bb9      	ldr	r3, [pc, #740]	; (8001d10 <main+0x354>)
 8001a2c:	210c      	movs	r1, #12
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7ff ff17 	bl	8001862 <vCfgBank>
  vCfgBank(SystemBank, 12);
 8001a34:	4bb7      	ldr	r3, [pc, #732]	; (8001d14 <main+0x358>)
 8001a36:	210c      	movs	r1, #12
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff ff12 	bl	8001862 <vCfgBank>
  vCfgBank(FrequencyBank, 8);
 8001a3e:	4bb6      	ldr	r3, [pc, #728]	; (8001d18 <main+0x35c>)
 8001a40:	2108      	movs	r1, #8
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7ff ff0d 	bl	8001862 <vCfgBank>
  vCfgBank(DataRateBank, 24);
 8001a48:	4bb4      	ldr	r3, [pc, #720]	; (8001d1c <main+0x360>)
 8001a4a:	2118      	movs	r1, #24
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff ff08 	bl	8001862 <vCfgBank>
  vCfgBank(BasebandBank, 29);
 8001a52:	4bb3      	ldr	r3, [pc, #716]	; (8001d20 <main+0x364>)
 8001a54:	211d      	movs	r1, #29
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ff03 	bl	8001862 <vCfgBank>
  vCfgBank(TXBank, 11);
 8001a5c:	4bb1      	ldr	r3, [pc, #708]	; (8001d24 <main+0x368>)
 8001a5e:	210b      	movs	r1, #11
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff fefe 	bl	8001862 <vCfgBank>
  vEnableAntSwitch(0);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fe35 	bl	80016d6 <vEnableAntSwitch>
  vGpioFuncCfg(GPIO1_DCLK + GPIO2_DCLK + GPIO3_INT2); //GPIO Maping
 8001a6c:	202f      	movs	r0, #47	; 0x2f
 8001a6e:	f7ff fde3 	bl	8001638 <vGpioFuncCfg>



  vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 8001a72:	210a      	movs	r1, #10
 8001a74:	2010      	movs	r0, #16
 8001a76:	f7ff fdf2 	bl	800165e <vIntSrcCfg>
  vIntSrcEnable(TX_DONE_EN);
 8001a7a:	2020      	movs	r0, #32
 8001a7c:	f7ff fe64 	bl	8001748 <vIntSrcEnable>
  vClearFIFO();
 8001a80:	f7ff fe8e 	bl	80017a0 <vClearFIFO>
  bGoSleep();
 8001a84:	f7ff fd5e 	bl	8001544 <bGoSleep>

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Tx...\r\n", 7, 100);
 8001a88:	49a7      	ldr	r1, [pc, #668]	; (8001d28 <main+0x36c>)
 8001a8a:	489c      	ldr	r0, [pc, #624]	; (8001cfc <main+0x340>)
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	2207      	movs	r2, #7
 8001a90:	f003 ffa2 	bl	80059d8 <HAL_UART_Transmit>
  int kontrol = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	22f4      	movs	r2, #244	; 0xf4
 8001a98:	0052      	lsls	r2, r2, #1
 8001a9a:	18ba      	adds	r2, r7, r2
 8001a9c:	6013      	str	r3, [r2, #0]
  int c = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	22f6      	movs	r2, #246	; 0xf6
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	18ba      	adds	r2, r7, r2
 8001aa6:	6013      	str	r3, [r2, #0]
  int temperature1 = 2222;
 8001aa8:	4ba0      	ldr	r3, [pc, #640]	; (8001d2c <main+0x370>)
 8001aaa:	22f2      	movs	r2, #242	; 0xf2
 8001aac:	0052      	lsls	r2, r2, #1
 8001aae:	18ba      	adds	r2, r7, r2
 8001ab0:	6013      	str	r3, [r2, #0]
  int humidity1 = 2525;
 8001ab2:	4b9f      	ldr	r3, [pc, #636]	; (8001d30 <main+0x374>)
 8001ab4:	22f0      	movs	r2, #240	; 0xf0
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	18ba      	adds	r2, r7, r2
 8001aba:	6013      	str	r3, [r2, #0]
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001abc:	4b9d      	ldr	r3, [pc, #628]	; (8001d34 <main+0x378>)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f002 f83f 	bl	8003b44 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    int32_t temperature, humidity;
    int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT, &temperature, &humidity);
 8001ac6:	1d3a      	adds	r2, r7, #4
 8001ac8:	2308      	movs	r3, #8
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	0019      	movs	r1, r3
 8001ace:	2044      	movs	r0, #68	; 0x44
 8001ad0:	f001 f8d8 	bl	8002c84 <sht3x_measure_blocking_read>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	25e0      	movs	r5, #224	; 0xe0
 8001ada:	35ff      	adds	r5, #255	; 0xff
 8001adc:	197b      	adds	r3, r7, r5
 8001ade:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Start(&hadc);
 8001ae0:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <main+0x378>)
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 fd4e 	bl	8003584 <HAL_ADC_Start>

    	  	HAL_ADC_PollForConversion(&hadc, 100);
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <main+0x378>)
 8001aea:	2164      	movs	r1, #100	; 0x64
 8001aec:	0018      	movs	r0, r3
 8001aee:	f001 fddd 	bl	80036ac <HAL_ADC_PollForConversion>
    	  	uint16_t VREFINTADC = HAL_ADC_GetValue(&hadc);
 8001af2:	4b90      	ldr	r3, [pc, #576]	; (8001d34 <main+0x378>)
 8001af4:	0018      	movs	r0, r3
 8001af6:	f001 fe75 	bl	80037e4 <HAL_ADC_GetValue>
 8001afa:	0002      	movs	r2, r0
 8001afc:	26ee      	movs	r6, #238	; 0xee
 8001afe:	0076      	lsls	r6, r6, #1
 8001b00:	19bb      	adds	r3, r7, r6
 8001b02:	801a      	strh	r2, [r3, #0]
    	  	HAL_ADC_Stop(&hadc);
 8001b04:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <main+0x378>)
 8001b06:	0018      	movs	r0, r3
 8001b08:	f001 fd90 	bl	800362c <HAL_ADC_Stop>
    	  	float VDD = 3000.0 * (*VREFINT_CAL / (float) VREFINTADC);
 8001b0c:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <main+0x37c>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff f8b3 	bl	8000c7c <__aeabi_i2f>
 8001b16:	1c04      	adds	r4, r0, #0
 8001b18:	19bb      	adds	r3, r7, r6
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff f8f3 	bl	8000d08 <__aeabi_ui2f>
 8001b22:	1c03      	adds	r3, r0, #0
 8001b24:	1c19      	adds	r1, r3, #0
 8001b26:	1c20      	adds	r0, r4, #0
 8001b28:	f7fe fdc4 	bl	80006b4 <__aeabi_fdiv>
 8001b2c:	1c03      	adds	r3, r0, #0
 8001b2e:	4983      	ldr	r1, [pc, #524]	; (8001d3c <main+0x380>)
 8001b30:	1c18      	adds	r0, r3, #0
 8001b32:	f7fe ff89 	bl	8000a48 <__aeabi_fmul>
 8001b36:	1c03      	adds	r3, r0, #0
 8001b38:	22ec      	movs	r2, #236	; 0xec
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	18ba      	adds	r2, r7, r2
 8001b3e:	6013      	str	r3, [r2, #0]
    	  	temperature=temperature/10;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	210a      	movs	r1, #10
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7fe fb7b 	bl	8000240 <__divsi3>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	60bb      	str	r3, [r7, #8]
    	  	humidity=humidity/10;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	210a      	movs	r1, #10
 8001b52:	0018      	movs	r0, r3
 8001b54:	f7fe fb74 	bl	8000240 <__divsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	607b      	str	r3, [r7, #4]
    if (ret == STATUS_OK) {
 8001b5c:	197b      	adds	r3, r7, r5
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <main+0x1ae>
 8001b66:	f000 fbed 	bl	8002344 <main+0x988>
    	HAL_UART_Transmit(&hlpuart1, "burada2", 7, 1000);
 8001b6a:	23fa      	movs	r3, #250	; 0xfa
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4974      	ldr	r1, [pc, #464]	; (8001d40 <main+0x384>)
 8001b70:	4862      	ldr	r0, [pc, #392]	; (8001cfc <main+0x340>)
 8001b72:	2207      	movs	r2, #7
 8001b74:	f003 ff30 	bl	80059d8 <HAL_UART_Transmit>
    	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001b78:	4972      	ldr	r1, [pc, #456]	; (8001d44 <main+0x388>)
 8001b7a:	4860      	ldr	r0, [pc, #384]	; (8001cfc <main+0x340>)
 8001b7c:	2364      	movs	r3, #100	; 0x64
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f003 ff2a 	bl	80059d8 <HAL_UART_Transmit>
    	c++;
 8001b84:	22f6      	movs	r2, #246	; 0xf6
 8001b86:	0052      	lsls	r2, r2, #1
 8001b88:	18bb      	adds	r3, r7, r2
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	18b9      	adds	r1, r7, r2
 8001b90:	600b      	str	r3, [r1, #0]
    	      sprintf(sayac, "%d", c);
 8001b92:	18bb      	adds	r3, r7, r2
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	496c      	ldr	r1, [pc, #432]	; (8001d48 <main+0x38c>)
 8001b98:	2470      	movs	r4, #112	; 0x70
 8001b9a:	193b      	adds	r3, r7, r4
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f004 fc9d 	bl	80064dc <siprintf>
    	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)sayac, strlen(sayac), 1000);
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7fe faaf 	bl	8000108 <strlen>
 8001baa:	0003      	movs	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	23fa      	movs	r3, #250	; 0xfa
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	1939      	adds	r1, r7, r4
 8001bb4:	4851      	ldr	r0, [pc, #324]	; (8001cfc <main+0x340>)
 8001bb6:	f003 ff0f 	bl	80059d8 <HAL_UART_Transmit>
    	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001bba:	4962      	ldr	r1, [pc, #392]	; (8001d44 <main+0x388>)
 8001bbc:	484f      	ldr	r0, [pc, #316]	; (8001cfc <main+0x340>)
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f003 ff09 	bl	80059d8 <HAL_UART_Transmit>


    	      //HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
    	      //HAL_UART_Transmit(&hlpuart1, "error",  5, 1000);

    	      if (-4000 <= temperature && temperature <= 9999 && 0 <= humidity && humidity <= 9999) {
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <main+0x390>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	da00      	bge.n	8001bd0 <main+0x214>
 8001bce:	e38e      	b.n	80022ee <main+0x932>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4a5f      	ldr	r2, [pc, #380]	; (8001d50 <main+0x394>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	dd00      	ble.n	8001bda <main+0x21e>
 8001bd8:	e389      	b.n	80022ee <main+0x932>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da00      	bge.n	8001be2 <main+0x226>
 8001be0:	e385      	b.n	80022ee <main+0x932>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a5a      	ldr	r2, [pc, #360]	; (8001d50 <main+0x394>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	dd00      	ble.n	8001bec <main+0x230>
 8001bea:	e380      	b.n	80022ee <main+0x932>

    	        if (temperature < -1000) {
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4a59      	ldr	r2, [pc, #356]	; (8001d54 <main+0x398>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	da28      	bge.n	8001c46 <main+0x28a>


    	          temperature = temperature * -1;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	60bb      	str	r3, [r7, #8]
    	          sprintf(buffer, "%d", temperature);
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4952      	ldr	r1, [pc, #328]	; (8001d48 <main+0x38c>)
 8001bfe:	24ce      	movs	r4, #206	; 0xce
 8001c00:	0064      	lsls	r4, r4, #1
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	0018      	movs	r0, r3
 8001c06:	f004 fc69 	bl	80064dc <siprintf>

    	          HAL_UART_Transmit(&hlpuart1, "-10dan kucuk", 12, 1000);
 8001c0a:	23fa      	movs	r3, #250	; 0xfa
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4952      	ldr	r1, [pc, #328]	; (8001d58 <main+0x39c>)
 8001c10:	483a      	ldr	r0, [pc, #232]	; (8001cfc <main+0x340>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	f003 fee0 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001c18:	494a      	ldr	r1, [pc, #296]	; (8001d44 <main+0x388>)
 8001c1a:	4838      	ldr	r0, [pc, #224]	; (8001cfc <main+0x340>)
 8001c1c:	2364      	movs	r3, #100	; 0x64
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f003 feda 	bl	80059d8 <HAL_UART_Transmit>


    	          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 8001c24:	23fa      	movs	r3, #250	; 0xfa
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	1939      	adds	r1, r7, r4
 8001c2a:	4834      	ldr	r0, [pc, #208]	; (8001cfc <main+0x340>)
 8001c2c:	2205      	movs	r2, #5
 8001c2e:	f003 fed3 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001c32:	4944      	ldr	r1, [pc, #272]	; (8001d44 <main+0x388>)
 8001c34:	4831      	ldr	r0, [pc, #196]	; (8001cfc <main+0x340>)
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f003 fecd 	bl	80059d8 <HAL_UART_Transmit>


    	          temperature = temperature * -1;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	425b      	negs	r3, r3
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	e0ba      	b.n	8001dbc <main+0x400>
    	        }
    	        else if (temperature < 0) {
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da28      	bge.n	8001c9e <main+0x2e2>

    	          temperature = temperature * -1;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	425b      	negs	r3, r3
 8001c50:	60bb      	str	r3, [r7, #8]
    	          sprintf(buffer, "%d", temperature);
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	493c      	ldr	r1, [pc, #240]	; (8001d48 <main+0x38c>)
 8001c56:	24ce      	movs	r4, #206	; 0xce
 8001c58:	0064      	lsls	r4, r4, #1
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f004 fc3d 	bl	80064dc <siprintf>

    	          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 8001c62:	23fa      	movs	r3, #250	; 0xfa
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	1939      	adds	r1, r7, r4
 8001c68:	4824      	ldr	r0, [pc, #144]	; (8001cfc <main+0x340>)
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f003 feb4 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <main+0x388>)
 8001c72:	4822      	ldr	r0, [pc, #136]	; (8001cfc <main+0x340>)
 8001c74:	2364      	movs	r3, #100	; 0x64
 8001c76:	2202      	movs	r2, #2
 8001c78:	f003 feae 	bl	80059d8 <HAL_UART_Transmit>

    	          HAL_UART_Transmit(&hlpuart1, "0'la -10 arasında", 18, 1000);
 8001c7c:	23fa      	movs	r3, #250	; 0xfa
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4936      	ldr	r1, [pc, #216]	; (8001d5c <main+0x3a0>)
 8001c82:	481e      	ldr	r0, [pc, #120]	; (8001cfc <main+0x340>)
 8001c84:	2212      	movs	r2, #18
 8001c86:	f003 fea7 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001c8a:	492e      	ldr	r1, [pc, #184]	; (8001d44 <main+0x388>)
 8001c8c:	481b      	ldr	r0, [pc, #108]	; (8001cfc <main+0x340>)
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	2202      	movs	r2, #2
 8001c92:	f003 fea1 	bl	80059d8 <HAL_UART_Transmit>
    	          temperature = temperature * -1;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	425b      	negs	r3, r3
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	e08e      	b.n	8001dbc <main+0x400>

    	        }

    	        else if (0 == temperature) {
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d100      	bne.n	8001ca6 <main+0x2ea>
 8001ca4:	e08a      	b.n	8001dbc <main+0x400>

    	        } else if (temperature < 1000) {
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	23fa      	movs	r3, #250	; 0xfa
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	da59      	bge.n	8001d64 <main+0x3a8>

    	          HAL_UART_Transmit(&hlpuart1, "0 ile 10 arasinda", 17, 1000);
 8001cb0:	23fa      	movs	r3, #250	; 0xfa
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	492a      	ldr	r1, [pc, #168]	; (8001d60 <main+0x3a4>)
 8001cb6:	4811      	ldr	r0, [pc, #68]	; (8001cfc <main+0x340>)
 8001cb8:	2211      	movs	r2, #17
 8001cba:	f003 fe8d 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001cbe:	4921      	ldr	r1, [pc, #132]	; (8001d44 <main+0x388>)
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <main+0x340>)
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f003 fe87 	bl	80059d8 <HAL_UART_Transmit>
    	          sprintf(buffer, "%d", temperature);
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	491e      	ldr	r1, [pc, #120]	; (8001d48 <main+0x38c>)
 8001cce:	24ce      	movs	r4, #206	; 0xce
 8001cd0:	0064      	lsls	r4, r4, #1
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f004 fc01 	bl	80064dc <siprintf>

    	          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 15, 1000);
 8001cda:	23fa      	movs	r3, #250	; 0xfa
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	1939      	adds	r1, r7, r4
 8001ce0:	4806      	ldr	r0, [pc, #24]	; (8001cfc <main+0x340>)
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	f003 fe78 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001ce8:	4916      	ldr	r1, [pc, #88]	; (8001d44 <main+0x388>)
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <main+0x340>)
 8001cec:	2364      	movs	r3, #100	; 0x64
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f003 fe72 	bl	80059d8 <HAL_UART_Transmit>
 8001cf4:	e062      	b.n	8001dbc <main+0x400>
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	080074e8 	.word	0x080074e8
 8001cfc:	20000268 	.word	0x20000268
 8001d00:	080074f4 	.word	0x080074f4
 8001d04:	0800761c 	.word	0x0800761c
 8001d08:	200002f2 	.word	0x200002f2
 8001d0c:	200002f4 	.word	0x200002f4
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000030 	.word	0x20000030
 8001d18:	20000060 	.word	0x20000060
 8001d1c:	20000080 	.word	0x20000080
 8001d20:	200000e0 	.word	0x200000e0
 8001d24:	20000154 	.word	0x20000154
 8001d28:	08007514 	.word	0x08007514
 8001d2c:	000008ae 	.word	0x000008ae
 8001d30:	000009dd 	.word	0x000009dd
 8001d34:	20000344 	.word	0x20000344
 8001d38:	1ff80078 	.word	0x1ff80078
 8001d3c:	453b8000 	.word	0x453b8000
 8001d40:	0800751c 	.word	0x0800751c
 8001d44:	08007524 	.word	0x08007524
 8001d48:	08007528 	.word	0x08007528
 8001d4c:	fffff060 	.word	0xfffff060
 8001d50:	0000270f 	.word	0x0000270f
 8001d54:	fffffc18 	.word	0xfffffc18
 8001d58:	0800752c 	.word	0x0800752c
 8001d5c:	0800753c 	.word	0x0800753c
 8001d60:	08007550 	.word	0x08007550

    	        } else if (temperature >= 1000) {
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	23fa      	movs	r3, #250	; 0xfa
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	db26      	blt.n	8001dbc <main+0x400>

    	          HAL_UART_Transmit(&hlpuart1, "10'dan buyuk", 12, 1000);
 8001d6e:	23fa      	movs	r3, #250	; 0xfa
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	49eb      	ldr	r1, [pc, #940]	; (8002120 <main+0x764>)
 8001d74:	48eb      	ldr	r0, [pc, #940]	; (8002124 <main+0x768>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	f003 fe2e 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001d7c:	49ea      	ldr	r1, [pc, #936]	; (8002128 <main+0x76c>)
 8001d7e:	48e9      	ldr	r0, [pc, #932]	; (8002124 <main+0x768>)
 8001d80:	2364      	movs	r3, #100	; 0x64
 8001d82:	2202      	movs	r2, #2
 8001d84:	f003 fe28 	bl	80059d8 <HAL_UART_Transmit>

    	          sprintf(buffer, "%d", temperature); //100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	49e8      	ldr	r1, [pc, #928]	; (800212c <main+0x770>)
 8001d8c:	24ce      	movs	r4, #206	; 0xce
 8001d8e:	0064      	lsls	r4, r4, #1
 8001d90:	193b      	adds	r3, r7, r4
 8001d92:	0018      	movs	r0, r3
 8001d94:	f004 fba2 	bl	80064dc <siprintf>
    	          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7fe f9b4 	bl	8000108 <strlen>
 8001da0:	0003      	movs	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	23fa      	movs	r3, #250	; 0xfa
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	1939      	adds	r1, r7, r4
 8001daa:	48de      	ldr	r0, [pc, #888]	; (8002124 <main+0x768>)
 8001dac:	f003 fe14 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001db0:	49dd      	ldr	r1, [pc, #884]	; (8002128 <main+0x76c>)
 8001db2:	48dc      	ldr	r0, [pc, #880]	; (8002124 <main+0x768>)
 8001db4:	2364      	movs	r3, #100	; 0x64
 8001db6:	2202      	movs	r2, #2
 8001db8:	f003 fe0e 	bl	80059d8 <HAL_UART_Transmit>
    	        }

    	        //  printf("measured temperature: %0.2f degreeCelsius","measured humidity: %0.2f percentRH\n",temperature / 1000.0f, humidity / 1000.0f);


    	        sprintf(buffer2, "%d", humidity);
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	49db      	ldr	r1, [pc, #876]	; (800212c <main+0x770>)
 8001dc0:	249c      	movs	r4, #156	; 0x9c
 8001dc2:	0064      	lsls	r4, r4, #1
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f004 fb88 	bl	80064dc <siprintf>

    	        strncat(buffer, buffer2, 10); //sondaki sayı eklenecek karakter sayısı
 8001dcc:	1939      	adds	r1, r7, r4
 8001dce:	24ce      	movs	r4, #206	; 0xce
 8001dd0:	0064      	lsls	r4, r4, #1
 8001dd2:	193b      	adds	r3, r7, r4
 8001dd4:	220a      	movs	r2, #10
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f004 fba0 	bl	800651c <strncat>
    	        HAL_UART_Transmit(&hlpuart1, "buffer: ", 9, 1000);
 8001ddc:	23fa      	movs	r3, #250	; 0xfa
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	49d3      	ldr	r1, [pc, #844]	; (8002130 <main+0x774>)
 8001de2:	48d0      	ldr	r0, [pc, #832]	; (8002124 <main+0x768>)
 8001de4:	2209      	movs	r2, #9
 8001de6:	f003 fdf7 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 4, 1000);
 8001dea:	23fa      	movs	r3, #250	; 0xfa
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	1939      	adds	r1, r7, r4
 8001df0:	48cc      	ldr	r0, [pc, #816]	; (8002124 <main+0x768>)
 8001df2:	2204      	movs	r2, #4
 8001df4:	f003 fdf0 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001df8:	49cb      	ldr	r1, [pc, #812]	; (8002128 <main+0x76c>)
 8001dfa:	48ca      	ldr	r0, [pc, #808]	; (8002124 <main+0x768>)
 8001dfc:	2364      	movs	r3, #100	; 0x64
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f003 fdea 	bl	80059d8 <HAL_UART_Transmit>



    	        if(VDD<=3600 && VDD>3240){
 8001e04:	49cb      	ldr	r1, [pc, #812]	; (8002134 <main+0x778>)
 8001e06:	25ec      	movs	r5, #236	; 0xec
 8001e08:	006d      	lsls	r5, r5, #1
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	f7fe fb1f 	bl	8000450 <__aeabi_fcmple>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d035      	beq.n	8001e82 <main+0x4c6>
 8001e16:	49c8      	ldr	r1, [pc, #800]	; (8002138 <main+0x77c>)
 8001e18:	197b      	adds	r3, r7, r5
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	f7fe fb22 	bl	8000464 <__aeabi_fcmpgt>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d02e      	beq.n	8001e82 <main+0x4c6>
    	        	pil=5;
 8001e24:	2305      	movs	r3, #5
 8001e26:	22ea      	movs	r2, #234	; 0xea
 8001e28:	0052      	lsls	r2, r2, #1
 8001e2a:	18ba      	adds	r2, r7, r2
 8001e2c:	6013      	str	r3, [r2, #0]
    	        	HAL_UART_Transmit(&hlpuart1, "pil=5", 12, 1000);
 8001e2e:	23fa      	movs	r3, #250	; 0xfa
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	49c2      	ldr	r1, [pc, #776]	; (800213c <main+0x780>)
 8001e34:	48bb      	ldr	r0, [pc, #748]	; (8002124 <main+0x768>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	f003 fdce 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001e3c:	49ba      	ldr	r1, [pc, #744]	; (8002128 <main+0x76c>)
 8001e3e:	48b9      	ldr	r0, [pc, #740]	; (8002124 <main+0x768>)
 8001e40:	2364      	movs	r3, #100	; 0x64
 8001e42:	2202      	movs	r2, #2
 8001e44:	f003 fdc8 	bl	80059d8 <HAL_UART_Transmit>
    	        	strncat(buffer, "5", 1); //pil durumu 1-5 arası kadameli olacak
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7fe f95c 	bl	8000108 <strlen>
 8001e50:	0003      	movs	r3, r0
 8001e52:	001a      	movs	r2, r3
 8001e54:	193b      	adds	r3, r7, r4
 8001e56:	189a      	adds	r2, r3, r2
 8001e58:	4bb9      	ldr	r3, [pc, #740]	; (8002140 <main+0x784>)
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	2302      	movs	r3, #2
 8001e60:	001a      	movs	r2, r3
 8001e62:	f004 faad 	bl	80063c0 <memcpy>
    	        	HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
 8001e66:	23fa      	movs	r3, #250	; 0xfa
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	1939      	adds	r1, r7, r4
 8001e6c:	48ad      	ldr	r0, [pc, #692]	; (8002124 <main+0x768>)
 8001e6e:	220a      	movs	r2, #10
 8001e70:	f003 fdb2 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001e74:	49ac      	ldr	r1, [pc, #688]	; (8002128 <main+0x76c>)
 8001e76:	48ab      	ldr	r0, [pc, #684]	; (8002124 <main+0x768>)
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f003 fdac 	bl	80059d8 <HAL_UART_Transmit>
 8001e80:	e0fb      	b.n	800207a <main+0x6be>
    	        }else if(VDD<=3240 && VDD>2880){
 8001e82:	49ad      	ldr	r1, [pc, #692]	; (8002138 <main+0x77c>)
 8001e84:	24ec      	movs	r4, #236	; 0xec
 8001e86:	0064      	lsls	r4, r4, #1
 8001e88:	193b      	adds	r3, r7, r4
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	f7fe fae0 	bl	8000450 <__aeabi_fcmple>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d037      	beq.n	8001f04 <main+0x548>
 8001e94:	49ab      	ldr	r1, [pc, #684]	; (8002144 <main+0x788>)
 8001e96:	193b      	adds	r3, r7, r4
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	f7fe fae3 	bl	8000464 <__aeabi_fcmpgt>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d030      	beq.n	8001f04 <main+0x548>
    	        	pil=4;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	22ea      	movs	r2, #234	; 0xea
 8001ea6:	0052      	lsls	r2, r2, #1
 8001ea8:	18ba      	adds	r2, r7, r2
 8001eaa:	6013      	str	r3, [r2, #0]
    	        	HAL_UART_Transmit(&hlpuart1, "pil=4", 12, 1000);
 8001eac:	23fa      	movs	r3, #250	; 0xfa
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	49a5      	ldr	r1, [pc, #660]	; (8002148 <main+0x78c>)
 8001eb2:	489c      	ldr	r0, [pc, #624]	; (8002124 <main+0x768>)
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	f003 fd8f 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001eba:	499b      	ldr	r1, [pc, #620]	; (8002128 <main+0x76c>)
 8001ebc:	4899      	ldr	r0, [pc, #612]	; (8002124 <main+0x768>)
 8001ebe:	2364      	movs	r3, #100	; 0x64
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f003 fd89 	bl	80059d8 <HAL_UART_Transmit>
    	        	strncat(buffer, "4", 1); //pil durumu 1-5 arası kadameli olacak
 8001ec6:	24ce      	movs	r4, #206	; 0xce
 8001ec8:	0064      	lsls	r4, r4, #1
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe f91b 	bl	8000108 <strlen>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	193b      	adds	r3, r7, r4
 8001ed8:	189a      	adds	r2, r3, r2
 8001eda:	4b9c      	ldr	r3, [pc, #624]	; (800214c <main+0x790>)
 8001edc:	0010      	movs	r0, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	f004 fa6c 	bl	80063c0 <memcpy>
    	        	HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
 8001ee8:	23fa      	movs	r3, #250	; 0xfa
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	1939      	adds	r1, r7, r4
 8001eee:	488d      	ldr	r0, [pc, #564]	; (8002124 <main+0x768>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	f003 fd71 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001ef6:	498c      	ldr	r1, [pc, #560]	; (8002128 <main+0x76c>)
 8001ef8:	488a      	ldr	r0, [pc, #552]	; (8002124 <main+0x768>)
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	2202      	movs	r2, #2
 8001efe:	f003 fd6b 	bl	80059d8 <HAL_UART_Transmit>
 8001f02:	e0ba      	b.n	800207a <main+0x6be>
    	        }else if(VDD<=2880 && VDD>2520){
 8001f04:	498f      	ldr	r1, [pc, #572]	; (8002144 <main+0x788>)
 8001f06:	24ec      	movs	r4, #236	; 0xec
 8001f08:	0064      	lsls	r4, r4, #1
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	f7fe fa9f 	bl	8000450 <__aeabi_fcmple>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d037      	beq.n	8001f86 <main+0x5ca>
 8001f16:	498e      	ldr	r1, [pc, #568]	; (8002150 <main+0x794>)
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	f7fe faa2 	bl	8000464 <__aeabi_fcmpgt>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d030      	beq.n	8001f86 <main+0x5ca>
    	            pil=3;
 8001f24:	2303      	movs	r3, #3
 8001f26:	22ea      	movs	r2, #234	; 0xea
 8001f28:	0052      	lsls	r2, r2, #1
 8001f2a:	18ba      	adds	r2, r7, r2
 8001f2c:	6013      	str	r3, [r2, #0]
    	            HAL_UART_Transmit(&hlpuart1, "pil=3", 12, 1000);
 8001f2e:	23fa      	movs	r3, #250	; 0xfa
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4988      	ldr	r1, [pc, #544]	; (8002154 <main+0x798>)
 8001f34:	487b      	ldr	r0, [pc, #492]	; (8002124 <main+0x768>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	f003 fd4e 	bl	80059d8 <HAL_UART_Transmit>
    	            HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001f3c:	497a      	ldr	r1, [pc, #488]	; (8002128 <main+0x76c>)
 8001f3e:	4879      	ldr	r0, [pc, #484]	; (8002124 <main+0x768>)
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	2202      	movs	r2, #2
 8001f44:	f003 fd48 	bl	80059d8 <HAL_UART_Transmit>
    	            strncat(buffer, "3", 1); //pil durumu 1-5 arası kadameli olacak
 8001f48:	24ce      	movs	r4, #206	; 0xce
 8001f4a:	0064      	lsls	r4, r4, #1
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7fe f8da 	bl	8000108 <strlen>
 8001f54:	0003      	movs	r3, r0
 8001f56:	001a      	movs	r2, r3
 8001f58:	193b      	adds	r3, r7, r4
 8001f5a:	189a      	adds	r2, r3, r2
 8001f5c:	4b7e      	ldr	r3, [pc, #504]	; (8002158 <main+0x79c>)
 8001f5e:	0010      	movs	r0, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	2302      	movs	r3, #2
 8001f64:	001a      	movs	r2, r3
 8001f66:	f004 fa2b 	bl	80063c0 <memcpy>
    	            HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
 8001f6a:	23fa      	movs	r3, #250	; 0xfa
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	1939      	adds	r1, r7, r4
 8001f70:	486c      	ldr	r0, [pc, #432]	; (8002124 <main+0x768>)
 8001f72:	220a      	movs	r2, #10
 8001f74:	f003 fd30 	bl	80059d8 <HAL_UART_Transmit>
    	            HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001f78:	496b      	ldr	r1, [pc, #428]	; (8002128 <main+0x76c>)
 8001f7a:	486a      	ldr	r0, [pc, #424]	; (8002124 <main+0x768>)
 8001f7c:	2364      	movs	r3, #100	; 0x64
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f003 fd2a 	bl	80059d8 <HAL_UART_Transmit>
 8001f84:	e079      	b.n	800207a <main+0x6be>
    	        }else if(VDD<=2520 && VDD>2160){
 8001f86:	4972      	ldr	r1, [pc, #456]	; (8002150 <main+0x794>)
 8001f88:	24ec      	movs	r4, #236	; 0xec
 8001f8a:	0064      	lsls	r4, r4, #1
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	f7fe fa5e 	bl	8000450 <__aeabi_fcmple>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d037      	beq.n	8002008 <main+0x64c>
 8001f98:	4970      	ldr	r1, [pc, #448]	; (800215c <main+0x7a0>)
 8001f9a:	193b      	adds	r3, r7, r4
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	f7fe fa61 	bl	8000464 <__aeabi_fcmpgt>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d030      	beq.n	8002008 <main+0x64c>
    	        	pil=2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	22ea      	movs	r2, #234	; 0xea
 8001faa:	0052      	lsls	r2, r2, #1
 8001fac:	18ba      	adds	r2, r7, r2
 8001fae:	6013      	str	r3, [r2, #0]
    	        	HAL_UART_Transmit(&hlpuart1, "pil=2", 12, 1000);
 8001fb0:	23fa      	movs	r3, #250	; 0xfa
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	496a      	ldr	r1, [pc, #424]	; (8002160 <main+0x7a4>)
 8001fb6:	485b      	ldr	r0, [pc, #364]	; (8002124 <main+0x768>)
 8001fb8:	220c      	movs	r2, #12
 8001fba:	f003 fd0d 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001fbe:	495a      	ldr	r1, [pc, #360]	; (8002128 <main+0x76c>)
 8001fc0:	4858      	ldr	r0, [pc, #352]	; (8002124 <main+0x768>)
 8001fc2:	2364      	movs	r3, #100	; 0x64
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f003 fd07 	bl	80059d8 <HAL_UART_Transmit>
    	        	strncat(buffer, "2", 1); //pil durumu 1-5 arası kadameli olacak
 8001fca:	24ce      	movs	r4, #206	; 0xce
 8001fcc:	0064      	lsls	r4, r4, #1
 8001fce:	193b      	adds	r3, r7, r4
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7fe f899 	bl	8000108 <strlen>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	001a      	movs	r2, r3
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	189a      	adds	r2, r3, r2
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <main+0x7a8>)
 8001fe0:	0010      	movs	r0, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	f004 f9ea 	bl	80063c0 <memcpy>
    	            HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
 8001fec:	23fa      	movs	r3, #250	; 0xfa
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	1939      	adds	r1, r7, r4
 8001ff2:	484c      	ldr	r0, [pc, #304]	; (8002124 <main+0x768>)
 8001ff4:	220a      	movs	r2, #10
 8001ff6:	f003 fcef 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8001ffa:	494b      	ldr	r1, [pc, #300]	; (8002128 <main+0x76c>)
 8001ffc:	4849      	ldr	r0, [pc, #292]	; (8002124 <main+0x768>)
 8001ffe:	2364      	movs	r3, #100	; 0x64
 8002000:	2202      	movs	r2, #2
 8002002:	f003 fce9 	bl	80059d8 <HAL_UART_Transmit>
 8002006:	e038      	b.n	800207a <main+0x6be>
    	        }else if(VDD<2160){
 8002008:	4954      	ldr	r1, [pc, #336]	; (800215c <main+0x7a0>)
 800200a:	23ec      	movs	r3, #236	; 0xec
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	f7fe fa13 	bl	800043c <__aeabi_fcmplt>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d02f      	beq.n	800207a <main+0x6be>
    	        	pil=1;
 800201a:	2301      	movs	r3, #1
 800201c:	22ea      	movs	r2, #234	; 0xea
 800201e:	0052      	lsls	r2, r2, #1
 8002020:	18ba      	adds	r2, r7, r2
 8002022:	6013      	str	r3, [r2, #0]
    	        	HAL_UART_Transmit(&hlpuart1, "pil=1", 12, 1000);
 8002024:	23fa      	movs	r3, #250	; 0xfa
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	494f      	ldr	r1, [pc, #316]	; (8002168 <main+0x7ac>)
 800202a:	483e      	ldr	r0, [pc, #248]	; (8002124 <main+0x768>)
 800202c:	220c      	movs	r2, #12
 800202e:	f003 fcd3 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8002032:	493d      	ldr	r1, [pc, #244]	; (8002128 <main+0x76c>)
 8002034:	483b      	ldr	r0, [pc, #236]	; (8002124 <main+0x768>)
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	2202      	movs	r2, #2
 800203a:	f003 fccd 	bl	80059d8 <HAL_UART_Transmit>
    	        	strncat(buffer, "1", 1); //pil durumu 1-5 arası kadameli olacak
 800203e:	24ce      	movs	r4, #206	; 0xce
 8002040:	0064      	lsls	r4, r4, #1
 8002042:	193b      	adds	r3, r7, r4
 8002044:	0018      	movs	r0, r3
 8002046:	f7fe f85f 	bl	8000108 <strlen>
 800204a:	0003      	movs	r3, r0
 800204c:	001a      	movs	r2, r3
 800204e:	193b      	adds	r3, r7, r4
 8002050:	189a      	adds	r2, r3, r2
 8002052:	4b46      	ldr	r3, [pc, #280]	; (800216c <main+0x7b0>)
 8002054:	0010      	movs	r0, r2
 8002056:	0019      	movs	r1, r3
 8002058:	2302      	movs	r3, #2
 800205a:	001a      	movs	r2, r3
 800205c:	f004 f9b0 	bl	80063c0 <memcpy>
    	        	HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 10, 1000);
 8002060:	23fa      	movs	r3, #250	; 0xfa
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	1939      	adds	r1, r7, r4
 8002066:	482f      	ldr	r0, [pc, #188]	; (8002124 <main+0x768>)
 8002068:	220a      	movs	r2, #10
 800206a:	f003 fcb5 	bl	80059d8 <HAL_UART_Transmit>
    	        	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800206e:	492e      	ldr	r1, [pc, #184]	; (8002128 <main+0x76c>)
 8002070:	482c      	ldr	r0, [pc, #176]	; (8002124 <main+0x768>)
 8002072:	2364      	movs	r3, #100	; 0x64
 8002074:	2202      	movs	r2, #2
 8002076:	f003 fcaf 	bl	80059d8 <HAL_UART_Transmit>





    	        if (temperature < -1000) {
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a3c      	ldr	r2, [pc, #240]	; (8002170 <main+0x7b4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	da2b      	bge.n	80020da <main+0x71e>
    	          strncat(buffer, "-", 1); //+ - durumu
 8002082:	24ce      	movs	r4, #206	; 0xce
 8002084:	0064      	lsls	r4, r4, #1
 8002086:	193b      	adds	r3, r7, r4
 8002088:	0018      	movs	r0, r3
 800208a:	f7fe f83d 	bl	8000108 <strlen>
 800208e:	0003      	movs	r3, r0
 8002090:	001a      	movs	r2, r3
 8002092:	193b      	adds	r3, r7, r4
 8002094:	189a      	adds	r2, r3, r2
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <main+0x7b8>)
 8002098:	0010      	movs	r0, r2
 800209a:	0019      	movs	r1, r3
 800209c:	2302      	movs	r3, #2
 800209e:	001a      	movs	r2, r3
 80020a0:	f004 f98e 	bl	80063c0 <memcpy>
    	          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 80020a4:	23fa      	movs	r3, #250	; 0xfa
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	1939      	adds	r1, r7, r4
 80020aa:	481e      	ldr	r0, [pc, #120]	; (8002124 <main+0x768>)
 80020ac:	2216      	movs	r2, #22
 80020ae:	f003 fc93 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80020b2:	491d      	ldr	r1, [pc, #116]	; (8002128 <main+0x76c>)
 80020b4:	481b      	ldr	r0, [pc, #108]	; (8002124 <main+0x768>)
 80020b6:	2364      	movs	r3, #100	; 0x64
 80020b8:	2202      	movs	r2, #2
 80020ba:	f003 fc8d 	bl	80059d8 <HAL_UART_Transmit>


    	          HAL_UART_Transmit(&hlpuart1, "-10dan kucuk", 12, 1000);
 80020be:	23fa      	movs	r3, #250	; 0xfa
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	492d      	ldr	r1, [pc, #180]	; (8002178 <main+0x7bc>)
 80020c4:	4817      	ldr	r0, [pc, #92]	; (8002124 <main+0x768>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	f003 fc86 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <main+0x76c>)
 80020ce:	4815      	ldr	r0, [pc, #84]	; (8002124 <main+0x768>)
 80020d0:	2364      	movs	r3, #100	; 0x64
 80020d2:	2202      	movs	r2, #2
 80020d4:	f003 fc80 	bl	80059d8 <HAL_UART_Transmit>
 80020d8:	e0a9      	b.n	800222e <main+0x872>
    	        } else if (temperature < 0) {
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	da4f      	bge.n	8002180 <main+0x7c4>
    	          strncat(buffer, "e-", 2); //+ - durumu
 80020e0:	24ce      	movs	r4, #206	; 0xce
 80020e2:	0064      	lsls	r4, r4, #1
 80020e4:	193b      	adds	r3, r7, r4
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7fe f80e 	bl	8000108 <strlen>
 80020ec:	0003      	movs	r3, r0
 80020ee:	001a      	movs	r2, r3
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	189a      	adds	r2, r3, r2
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <main+0x7c0>)
 80020f6:	0010      	movs	r0, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	2303      	movs	r3, #3
 80020fc:	001a      	movs	r2, r3
 80020fe:	f004 f95f 	bl	80063c0 <memcpy>
    	          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 5, 1000);
 8002102:	23fa      	movs	r3, #250	; 0xfa
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	1939      	adds	r1, r7, r4
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <main+0x768>)
 800210a:	2205      	movs	r2, #5
 800210c:	f003 fc64 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8002110:	4905      	ldr	r1, [pc, #20]	; (8002128 <main+0x76c>)
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <main+0x768>)
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	2202      	movs	r2, #2
 8002118:	f003 fc5e 	bl	80059d8 <HAL_UART_Transmit>
 800211c:	e087      	b.n	800222e <main+0x872>
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	08007564 	.word	0x08007564
 8002124:	20000268 	.word	0x20000268
 8002128:	08007524 	.word	0x08007524
 800212c:	08007528 	.word	0x08007528
 8002130:	08007574 	.word	0x08007574
 8002134:	45610000 	.word	0x45610000
 8002138:	454a8000 	.word	0x454a8000
 800213c:	08007580 	.word	0x08007580
 8002140:	08007588 	.word	0x08007588
 8002144:	45340000 	.word	0x45340000
 8002148:	0800758c 	.word	0x0800758c
 800214c:	08007594 	.word	0x08007594
 8002150:	451d8000 	.word	0x451d8000
 8002154:	08007598 	.word	0x08007598
 8002158:	080075a0 	.word	0x080075a0
 800215c:	45070000 	.word	0x45070000
 8002160:	080075a4 	.word	0x080075a4
 8002164:	080075ac 	.word	0x080075ac
 8002168:	080075b0 	.word	0x080075b0
 800216c:	080075b8 	.word	0x080075b8
 8002170:	fffffc18 	.word	0xfffffc18
 8002174:	080075bc 	.word	0x080075bc
 8002178:	0800752c 	.word	0x0800752c
 800217c:	080075c0 	.word	0x080075c0
    	        }
    	        else if (0 == temperature) {
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d053      	beq.n	800222e <main+0x872>


    	        } else if (temperature < 1000) {
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	23fa      	movs	r3, #250	; 0xfa
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	da1e      	bge.n	80021ce <main+0x812>
    	          strncat(buffer, "e+", 2);
 8002190:	24ce      	movs	r4, #206	; 0xce
 8002192:	0064      	lsls	r4, r4, #1
 8002194:	193b      	adds	r3, r7, r4
 8002196:	0018      	movs	r0, r3
 8002198:	f7fd ffb6 	bl	8000108 <strlen>
 800219c:	0003      	movs	r3, r0
 800219e:	001a      	movs	r2, r3
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	189a      	adds	r2, r3, r2
 80021a4:	4b7f      	ldr	r3, [pc, #508]	; (80023a4 <main+0x9e8>)
 80021a6:	0010      	movs	r0, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	2303      	movs	r3, #3
 80021ac:	001a      	movs	r2, r3
 80021ae:	f004 f907 	bl	80063c0 <memcpy>
    	          HAL_UART_Transmit(&hlpuart1, "0 ile 10 arasinda", 17, 1000);
 80021b2:	23fa      	movs	r3, #250	; 0xfa
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	497c      	ldr	r1, [pc, #496]	; (80023a8 <main+0x9ec>)
 80021b8:	487c      	ldr	r0, [pc, #496]	; (80023ac <main+0x9f0>)
 80021ba:	2211      	movs	r2, #17
 80021bc:	f003 fc0c 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80021c0:	497b      	ldr	r1, [pc, #492]	; (80023b0 <main+0x9f4>)
 80021c2:	487a      	ldr	r0, [pc, #488]	; (80023ac <main+0x9f0>)
 80021c4:	2364      	movs	r3, #100	; 0x64
 80021c6:	2202      	movs	r2, #2
 80021c8:	f003 fc06 	bl	80059d8 <HAL_UART_Transmit>
 80021cc:	e02f      	b.n	800222e <main+0x872>

    	        } else if (temperature >= 1000) {
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	23fa      	movs	r3, #250	; 0xfa
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	db2a      	blt.n	800222e <main+0x872>

    	          HAL_UART_Transmit(&hlpuart1, "10'dan buyuk", 12, 1000);
 80021d8:	23fa      	movs	r3, #250	; 0xfa
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4975      	ldr	r1, [pc, #468]	; (80023b4 <main+0x9f8>)
 80021de:	4873      	ldr	r0, [pc, #460]	; (80023ac <main+0x9f0>)
 80021e0:	220c      	movs	r2, #12
 80021e2:	f003 fbf9 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80021e6:	4972      	ldr	r1, [pc, #456]	; (80023b0 <main+0x9f4>)
 80021e8:	4870      	ldr	r0, [pc, #448]	; (80023ac <main+0x9f0>)
 80021ea:	2364      	movs	r3, #100	; 0x64
 80021ec:	2202      	movs	r2, #2
 80021ee:	f003 fbf3 	bl	80059d8 <HAL_UART_Transmit>
    	          strncat(buffer, "+", 1); //+ - durumu
 80021f2:	24ce      	movs	r4, #206	; 0xce
 80021f4:	0064      	lsls	r4, r4, #1
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7fd ff85 	bl	8000108 <strlen>
 80021fe:	0003      	movs	r3, r0
 8002200:	001a      	movs	r2, r3
 8002202:	193b      	adds	r3, r7, r4
 8002204:	189a      	adds	r2, r3, r2
 8002206:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <main+0x9fc>)
 8002208:	0010      	movs	r0, r2
 800220a:	0019      	movs	r1, r3
 800220c:	2302      	movs	r3, #2
 800220e:	001a      	movs	r2, r3
 8002210:	f004 f8d6 	bl	80063c0 <memcpy>
    	          HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 8002214:	23fa      	movs	r3, #250	; 0xfa
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	1939      	adds	r1, r7, r4
 800221a:	4864      	ldr	r0, [pc, #400]	; (80023ac <main+0x9f0>)
 800221c:	2216      	movs	r2, #22
 800221e:	f003 fbdb 	bl	80059d8 <HAL_UART_Transmit>
    	          HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8002222:	4963      	ldr	r1, [pc, #396]	; (80023b0 <main+0x9f4>)
 8002224:	4861      	ldr	r0, [pc, #388]	; (80023ac <main+0x9f0>)
 8002226:	2364      	movs	r3, #100	; 0x64
 8002228:	2202      	movs	r2, #2
 800222a:	f003 fbd5 	bl	80059d8 <HAL_UART_Transmit>
    	        }




    	        strncat(buffer, "A0000000001B", 12); //seri numarası 10 haneli A ve B arasında
 800222e:	24ce      	movs	r4, #206	; 0xce
 8002230:	0064      	lsls	r4, r4, #1
 8002232:	193b      	adds	r3, r7, r4
 8002234:	0018      	movs	r0, r3
 8002236:	f7fd ff67 	bl	8000108 <strlen>
 800223a:	0003      	movs	r3, r0
 800223c:	001a      	movs	r2, r3
 800223e:	193b      	adds	r3, r7, r4
 8002240:	189a      	adds	r2, r3, r2
 8002242:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <main+0xa00>)
 8002244:	0010      	movs	r0, r2
 8002246:	0019      	movs	r1, r3
 8002248:	230d      	movs	r3, #13
 800224a:	001a      	movs	r2, r3
 800224c:	f004 f8b8 	bl	80063c0 <memcpy>
    	        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 8002250:	23fa      	movs	r3, #250	; 0xfa
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	1939      	adds	r1, r7, r4
 8002256:	4855      	ldr	r0, [pc, #340]	; (80023ac <main+0x9f0>)
 8002258:	2216      	movs	r2, #22
 800225a:	f003 fbbd 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800225e:	4954      	ldr	r1, [pc, #336]	; (80023b0 <main+0x9f4>)
 8002260:	4852      	ldr	r0, [pc, #328]	; (80023ac <main+0x9f0>)
 8002262:	2364      	movs	r3, #100	; 0x64
 8002264:	2202      	movs	r2, #2
 8002266:	f003 fbb7 	bl	80059d8 <HAL_UART_Transmit>
    	        //  strncat(buffer,"Asil2000000B", 12);
    	        //   strncat(buffer,"Asil3000000B", 12);
    	        //  strncat(buffer,"Asil4000000B", 12);
    	        //  strncat(buffer,"Asil5000000B", 12);
    	        // strncat(buffer,"Asil6000000B", 12);
    	        HAL_UART_Transmit(&hlpuart1, "buffer toplam: ", 15, 1000);
 800226a:	23fa      	movs	r3, #250	; 0xfa
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4954      	ldr	r1, [pc, #336]	; (80023c0 <main+0xa04>)
 8002270:	484e      	ldr	r0, [pc, #312]	; (80023ac <main+0x9f0>)
 8002272:	220f      	movs	r2, #15
 8002274:	f003 fbb0 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, 22, 1000);
 8002278:	23fa      	movs	r3, #250	; 0xfa
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	1939      	adds	r1, r7, r4
 800227e:	484b      	ldr	r0, [pc, #300]	; (80023ac <main+0x9f0>)
 8002280:	2216      	movs	r2, #22
 8002282:	f003 fba9 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8002286:	494a      	ldr	r1, [pc, #296]	; (80023b0 <main+0x9f4>)
 8002288:	4848      	ldr	r0, [pc, #288]	; (80023ac <main+0x9f0>)
 800228a:	2364      	movs	r3, #100	; 0x64
 800228c:	2202      	movs	r2, #2
 800228e:	f003 fba3 	bl	80059d8 <HAL_UART_Transmit>

    	        //if((bufferkontrol[0]!=buffer[0])||(bufferkontrol[1]!=buffer[1])||(bufferkontrol[2]!=buffer[2])||(bufferkontrol[3]!=buffer[3])){
    	        bSendMessage(buffer,  strlen(buffer));
 8002292:	193b      	adds	r3, r7, r4
 8002294:	0018      	movs	r0, r3
 8002296:	f7fd ff37 	bl	8000108 <strlen>
 800229a:	0003      	movs	r3, r0
 800229c:	b2da      	uxtb	r2, r3
 800229e:	193b      	adds	r3, r7, r4
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff fb07 	bl	80018b6 <bSendMessage>
    	        while (GPO3_L());
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	23a0      	movs	r3, #160	; 0xa0
 80022b0:	05db      	lsls	r3, r3, #23
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f001 ff05 	bl	80040c4 <HAL_GPIO_ReadPin>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d0f5      	beq.n	80022aa <main+0x8ee>
    	        bIntSrcFlagClr();
 80022be:	f7ff fa57 	bl	8001770 <bIntSrcFlagClr>
    	        vClearFIFO();
 80022c2:	f7ff fa6d 	bl	80017a0 <vClearFIFO>
    	        bGoSleep();
 80022c6:	f7ff f93d 	bl	8001544 <bGoSleep>
    	        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderildi\r\n", 12, 100);
 80022ca:	493e      	ldr	r1, [pc, #248]	; (80023c4 <main+0xa08>)
 80022cc:	4837      	ldr	r0, [pc, #220]	; (80023ac <main+0x9f0>)
 80022ce:	2364      	movs	r3, #100	; 0x64
 80022d0:	220c      	movs	r2, #12
 80022d2:	f003 fb81 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80022d6:	4936      	ldr	r1, [pc, #216]	; (80023b0 <main+0x9f4>)
 80022d8:	4834      	ldr	r0, [pc, #208]	; (80023ac <main+0x9f0>)
 80022da:	2364      	movs	r3, #100	; 0x64
 80022dc:	2202      	movs	r2, #2
 80022de:	f003 fb7b 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_Delay(4000);
 80022e2:	23fa      	movs	r3, #250	; 0xfa
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 ffac 	bl	8003244 <HAL_Delay>
 80022ec:	e058      	b.n	80023a0 <main+0x9e4>
    	        // else HAL_UART_Transmit( &hlpuart1, (uint8_t *)"degısmedi\r\n",11, 100);

    	        //strcpy(buffer,bufferkontrol);
    	      } else {

    	        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderilmedi\r\n", 14, 100);
 80022ee:	4936      	ldr	r1, [pc, #216]	; (80023c8 <main+0xa0c>)
 80022f0:	482e      	ldr	r0, [pc, #184]	; (80023ac <main+0x9f0>)
 80022f2:	2364      	movs	r3, #100	; 0x64
 80022f4:	220e      	movs	r2, #14
 80022f6:	f003 fb6f 	bl	80059d8 <HAL_UART_Transmit>
    	        HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 80022fa:	492d      	ldr	r1, [pc, #180]	; (80023b0 <main+0x9f4>)
 80022fc:	482b      	ldr	r0, [pc, #172]	; (80023ac <main+0x9f0>)
 80022fe:	2364      	movs	r3, #100	; 0x64
 8002300:	2202      	movs	r2, #2
 8002302:	f003 fb69 	bl	80059d8 <HAL_UART_Transmit>
    	        bSendMessage(tx_buf, 22);
 8002306:	23da      	movs	r3, #218	; 0xda
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2116      	movs	r1, #22
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff fad1 	bl	80018b6 <bSendMessage>
    	        while (GPO3_L());
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	23a0      	movs	r3, #160	; 0xa0
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	0011      	movs	r1, r2
 8002320:	0018      	movs	r0, r3
 8002322:	f001 fecf 	bl	80040c4 <HAL_GPIO_ReadPin>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d0f5      	beq.n	8002316 <main+0x95a>
    	        bIntSrcFlagClr();
 800232a:	f7ff fa21 	bl	8001770 <bIntSrcFlagClr>
    	        vClearFIFO();
 800232e:	f7ff fa37 	bl	80017a0 <vClearFIFO>
    	        bGoSleep();
 8002332:	f7ff f907 	bl	8001544 <bGoSleep>
    	        HAL_Delay(4000);
 8002336:	23fa      	movs	r3, #250	; 0xfa
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	0018      	movs	r0, r3
 800233c:	f000 ff82 	bl	8003244 <HAL_Delay>
 8002340:	f7ff fbc1 	bl	8001ac6 <main+0x10a>
      //strcpy(bufferkontrol,buffer);


    } else
    {
    	c++;
 8002344:	24f6      	movs	r4, #246	; 0xf6
 8002346:	0064      	lsls	r4, r4, #1
 8002348:	193b      	adds	r3, r7, r4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	193a      	adds	r2, r7, r4
 8002350:	6013      	str	r3, [r2, #0]
    	HAL_UART_Transmit(&hlpuart1, "göndermiyor", 11, 1000);
 8002352:	23fa      	movs	r3, #250	; 0xfa
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	491d      	ldr	r1, [pc, #116]	; (80023cc <main+0xa10>)
 8002358:	4814      	ldr	r0, [pc, #80]	; (80023ac <main+0x9f0>)
 800235a:	220b      	movs	r2, #11
 800235c:	f003 fb3c 	bl	80059d8 <HAL_UART_Transmit>
    	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8002360:	4913      	ldr	r1, [pc, #76]	; (80023b0 <main+0x9f4>)
 8002362:	4812      	ldr	r0, [pc, #72]	; (80023ac <main+0x9f0>)
 8002364:	2364      	movs	r3, #100	; 0x64
 8002366:	2202      	movs	r2, #2
 8002368:	f003 fb36 	bl	80059d8 <HAL_UART_Transmit>
    	sprintf(sayac, "%d", c);
 800236c:	193b      	adds	r3, r7, r4
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4917      	ldr	r1, [pc, #92]	; (80023d0 <main+0xa14>)
 8002372:	2470      	movs	r4, #112	; 0x70
 8002374:	193b      	adds	r3, r7, r4
 8002376:	0018      	movs	r0, r3
 8002378:	f004 f8b0 	bl	80064dc <siprintf>
    	HAL_UART_Transmit(&hlpuart1, (uint8_t *)sayac, strlen(sayac), 1000);
 800237c:	193b      	adds	r3, r7, r4
 800237e:	0018      	movs	r0, r3
 8002380:	f7fd fec2 	bl	8000108 <strlen>
 8002384:	0003      	movs	r3, r0
 8002386:	b29a      	uxth	r2, r3
 8002388:	23fa      	movs	r3, #250	; 0xfa
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	1939      	adds	r1, r7, r4
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <main+0x9f0>)
 8002390:	f003 fb22 	bl	80059d8 <HAL_UART_Transmit>
    	HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8002394:	4906      	ldr	r1, [pc, #24]	; (80023b0 <main+0x9f4>)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <main+0x9f0>)
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	2202      	movs	r2, #2
 800239c:	f003 fb1c 	bl	80059d8 <HAL_UART_Transmit>
  {
 80023a0:	f7ff fb91 	bl	8001ac6 <main+0x10a>
 80023a4:	080075c4 	.word	0x080075c4
 80023a8:	08007550 	.word	0x08007550
 80023ac:	20000268 	.word	0x20000268
 80023b0:	08007524 	.word	0x08007524
 80023b4:	08007564 	.word	0x08007564
 80023b8:	080075c8 	.word	0x080075c8
 80023bc:	080075cc 	.word	0x080075cc
 80023c0:	080075dc 	.word	0x080075dc
 80023c4:	080075ec 	.word	0x080075ec
 80023c8:	080075fc 	.word	0x080075fc
 80023cc:	0800760c 	.word	0x0800760c
 80023d0:	08007528 	.word	0x08007528

080023d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b099      	sub	sp, #100	; 0x64
 80023d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023da:	242c      	movs	r4, #44	; 0x2c
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	0018      	movs	r0, r3
 80023e0:	2334      	movs	r3, #52	; 0x34
 80023e2:	001a      	movs	r2, r3
 80023e4:	2100      	movs	r1, #0
 80023e6:	f003 fff4 	bl	80063d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ea:	2318      	movs	r3, #24
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	0018      	movs	r0, r3
 80023f0:	2314      	movs	r3, #20
 80023f2:	001a      	movs	r2, r3
 80023f4:	2100      	movs	r1, #0
 80023f6:	f003 ffec 	bl	80063d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023fa:	003b      	movs	r3, r7
 80023fc:	0018      	movs	r0, r3
 80023fe:	2318      	movs	r3, #24
 8002400:	001a      	movs	r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	f003 ffe5 	bl	80063d2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <SystemClock_Config+0xd4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <SystemClock_Config+0xd8>)
 800240e:	401a      	ands	r2, r3
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <SystemClock_Config+0xd4>)
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	0109      	lsls	r1, r1, #4
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800241a:	0021      	movs	r1, r4
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2210      	movs	r2, #16
 8002420:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2201      	movs	r2, #1
 8002426:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	22a0      	movs	r2, #160	; 0xa0
 8002432:	0212      	lsls	r2, r2, #8
 8002434:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002436:	187b      	adds	r3, r7, r1
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243c:	187b      	adds	r3, r7, r1
 800243e:	0018      	movs	r0, r3
 8002440:	f002 fbb0 	bl	8004ba4 <HAL_RCC_OscConfig>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d001      	beq.n	800244c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002448:	f000 f992 	bl	8002770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244c:	2118      	movs	r1, #24
 800244e:	187b      	adds	r3, r7, r1
 8002450:	220f      	movs	r2, #15
 8002452:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002460:	187b      	adds	r3, r7, r1
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800246c:	187b      	adds	r3, r7, r1
 800246e:	2100      	movs	r1, #0
 8002470:	0018      	movs	r0, r3
 8002472:	f002 ff13 	bl	800529c <HAL_RCC_ClockConfig>
 8002476:	1e03      	subs	r3, r0, #0
 8002478:	d001      	beq.n	800247e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800247a:	f000 f979 	bl	8002770 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800247e:	003b      	movs	r3, r7
 8002480:	220c      	movs	r2, #12
 8002482:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002484:	003b      	movs	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800248a:	003b      	movs	r3, r7
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002490:	003b      	movs	r3, r7
 8002492:	0018      	movs	r0, r3
 8002494:	f003 f926 	bl	80056e4 <HAL_RCCEx_PeriphCLKConfig>
 8002498:	1e03      	subs	r3, r0, #0
 800249a:	d001      	beq.n	80024a0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800249c:	f000 f968 	bl	8002770 <Error_Handler>
  }
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b019      	add	sp, #100	; 0x64
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	40007000 	.word	0x40007000
 80024ac:	ffffe7ff 	.word	0xffffe7ff

080024b0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024b6:	003b      	movs	r3, r7
 80024b8:	0018      	movs	r0, r3
 80024ba:	2308      	movs	r3, #8
 80024bc:	001a      	movs	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f003 ff87 	bl	80063d2 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <MX_ADC_Init+0xc0>)
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <MX_ADC_Init+0xc4>)
 80024c8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80024ca:	4b29      	ldr	r3, [pc, #164]	; (8002570 <MX_ADC_Init+0xc0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <MX_ADC_Init+0xc0>)
 80024d2:	22c0      	movs	r2, #192	; 0xc0
 80024d4:	0612      	lsls	r2, r2, #24
 80024d6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <MX_ADC_Init+0xc0>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <MX_ADC_Init+0xc0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <MX_ADC_Init+0xc0>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <MX_ADC_Init+0xc0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <MX_ADC_Init+0xc0>)
 80024f2:	2220      	movs	r2, #32
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MX_ADC_Init+0xc0>)
 80024fa:	2221      	movs	r2, #33	; 0x21
 80024fc:	2100      	movs	r1, #0
 80024fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <MX_ADC_Init+0xc0>)
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <MX_ADC_Init+0xc0>)
 8002508:	22c2      	movs	r2, #194	; 0xc2
 800250a:	32ff      	adds	r2, #255	; 0xff
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <MX_ADC_Init+0xc0>)
 8002510:	222c      	movs	r2, #44	; 0x2c
 8002512:	2100      	movs	r1, #0
 8002514:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <MX_ADC_Init+0xc0>)
 8002518:	2204      	movs	r2, #4
 800251a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <MX_ADC_Init+0xc0>)
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <MX_ADC_Init+0xc0>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MX_ADC_Init+0xc0>)
 800252a:	2201      	movs	r2, #1
 800252c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_ADC_Init+0xc0>)
 8002530:	2200      	movs	r2, #0
 8002532:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_ADC_Init+0xc0>)
 8002536:	0018      	movs	r0, r3
 8002538:	f000 feb0 	bl	800329c <HAL_ADC_Init>
 800253c:	1e03      	subs	r3, r0, #0
 800253e:	d001      	beq.n	8002544 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002540:	f000 f916 	bl	8002770 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002544:	003b      	movs	r3, r7
 8002546:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <MX_ADC_Init+0xc8>)
 8002548:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800254a:	003b      	movs	r3, r7
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	0152      	lsls	r2, r2, #5
 8002550:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002552:	003a      	movs	r2, r7
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_ADC_Init+0xc0>)
 8002556:	0011      	movs	r1, r2
 8002558:	0018      	movs	r0, r3
 800255a:	f001 f94f 	bl	80037fc <HAL_ADC_ConfigChannel>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002562:	f000 f905 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	20000344 	.word	0x20000344
 8002574:	40012400 	.word	0x40012400
 8002578:	44020000 	.word	0x44020000

0800257c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <MX_I2C1_Init+0x78>)
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <MX_I2C1_Init+0x7c>)
 8002584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <MX_I2C1_Init+0x78>)
 8002588:	22e1      	movs	r2, #225	; 0xe1
 800258a:	00d2      	lsls	r2, r2, #3
 800258c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <MX_I2C1_Init+0x78>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <MX_I2C1_Init+0x78>)
 8002596:	2201      	movs	r2, #1
 8002598:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <MX_I2C1_Init+0x78>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MX_I2C1_Init+0x78>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <MX_I2C1_Init+0x78>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_I2C1_Init+0x78>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <MX_I2C1_Init+0x78>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_I2C1_Init+0x78>)
 80025ba:	0018      	movs	r0, r3
 80025bc:	f001 fdbc 	bl	8004138 <HAL_I2C_Init>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d001      	beq.n	80025c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025c4:	f000 f8d4 	bl	8002770 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <MX_I2C1_Init+0x78>)
 80025ca:	2100      	movs	r1, #0
 80025cc:	0018      	movs	r0, r3
 80025ce:	f002 fa51 	bl	8004a74 <HAL_I2CEx_ConfigAnalogFilter>
 80025d2:	1e03      	subs	r3, r0, #0
 80025d4:	d001      	beq.n	80025da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80025d6:	f000 f8cb 	bl	8002770 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_I2C1_Init+0x78>)
 80025dc:	2100      	movs	r1, #0
 80025de:	0018      	movs	r0, r3
 80025e0:	f002 fa94 	bl	8004b0c <HAL_I2CEx_ConfigDigitalFilter>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d001      	beq.n	80025ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80025e8:	f000 f8c2 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	200002f8 	.word	0x200002f8
 80025f8:	40005400 	.word	0x40005400

080025fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <MX_LPUART1_UART_Init+0x58>)
 8002604:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 8002608:	22e1      	movs	r2, #225	; 0xe1
 800260a:	0252      	lsls	r2, r2, #9
 800260c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 8002622:	220c      	movs	r2, #12
 8002624:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 800262e:	2200      	movs	r2, #0
 8002630:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <MX_LPUART1_UART_Init+0x54>)
 800263a:	0018      	movs	r0, r3
 800263c:	f003 f978 	bl	8005930 <HAL_UART_Init>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d001      	beq.n	8002648 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002644:	f000 f894 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	20000268 	.word	0x20000268
 8002654:	40004800 	.word	0x40004800

08002658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b08b      	sub	sp, #44	; 0x2c
 800265c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265e:	2414      	movs	r4, #20
 8002660:	193b      	adds	r3, r7, r4
 8002662:	0018      	movs	r0, r3
 8002664:	2314      	movs	r3, #20
 8002666:	001a      	movs	r2, r3
 8002668:	2100      	movs	r1, #0
 800266a:	f003 feb2 	bl	80063d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <MX_GPIO_Init+0x108>)
 8002670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <MX_GPIO_Init+0x108>)
 8002674:	2104      	movs	r1, #4
 8002676:	430a      	orrs	r2, r1
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <MX_GPIO_Init+0x108>)
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <MX_GPIO_Init+0x108>)
 8002688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268a:	4b35      	ldr	r3, [pc, #212]	; (8002760 <MX_GPIO_Init+0x108>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	430a      	orrs	r2, r1
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <MX_GPIO_Init+0x108>)
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <MX_GPIO_Init+0x108>)
 80026a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <MX_GPIO_Init+0x108>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <MX_GPIO_Init+0x108>)
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <MX_GPIO_Init+0x108>)
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ba:	4b29      	ldr	r3, [pc, #164]	; (8002760 <MX_GPIO_Init+0x108>)
 80026bc:	2102      	movs	r1, #2
 80026be:	430a      	orrs	r2, r1
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <MX_GPIO_Init+0x108>)
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	2202      	movs	r2, #2
 80026c8:	4013      	ands	r3, r2
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	4824      	ldr	r0, [pc, #144]	; (8002764 <MX_GPIO_Init+0x10c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	0019      	movs	r1, r3
 80026d8:	f001 fd11 	bl	80040fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin, GPIO_PIN_RESET);
 80026dc:	4922      	ldr	r1, [pc, #136]	; (8002768 <MX_GPIO_Init+0x110>)
 80026de:	23a0      	movs	r3, #160	; 0xa0
 80026e0:	05db      	lsls	r3, r3, #23
 80026e2:	2200      	movs	r2, #0
 80026e4:	0018      	movs	r0, r3
 80026e6:	f001 fd0a 	bl	80040fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	0192      	lsls	r2, r2, #6
 80026f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2201      	movs	r2, #1
 80026f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	2200      	movs	r2, #0
 8002702:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002704:	193b      	adds	r3, r7, r4
 8002706:	4a17      	ldr	r2, [pc, #92]	; (8002764 <MX_GPIO_Init+0x10c>)
 8002708:	0019      	movs	r1, r3
 800270a:	0010      	movs	r0, r2
 800270c:	f001 fb6c 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	4a15      	ldr	r2, [pc, #84]	; (8002768 <MX_GPIO_Init+0x110>)
 8002714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	193b      	adds	r3, r7, r4
 8002718:	2201      	movs	r2, #1
 800271a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	193b      	adds	r3, r7, r4
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	193b      	adds	r3, r7, r4
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	193a      	adds	r2, r7, r4
 800272a:	23a0      	movs	r3, #160	; 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f001 fb59 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin GPO3_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GPO3_Pin;
 8002736:	193b      	adds	r3, r7, r4
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <MX_GPIO_Init+0x114>)
 800273a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273c:	193b      	adds	r3, r7, r4
 800273e:	2200      	movs	r2, #0
 8002740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	193b      	adds	r3, r7, r4
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	193a      	adds	r2, r7, r4
 800274a:	23a0      	movs	r3, #160	; 0xa0
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f001 fb49 	bl	8003de8 <HAL_GPIO_Init>

}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b00b      	add	sp, #44	; 0x2c
 800275c:	bd90      	pop	{r4, r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	40021000 	.word	0x40021000
 8002764:	50000800 	.word	0x50000800
 8002768:	00000606 	.word	0x00000606
 800276c:	00001010 	.word	0x00001010

08002770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002774:	b672      	cpsid	i
}
 8002776:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002778:	e7fe      	b.n	8002778 <Error_Handler+0x8>

0800277a <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	000a      	movs	r2, r1
 8002784:	1cbb      	adds	r3, r7, #2
 8002786:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8002788:	230d      	movs	r3, #13
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8002790:	230e      	movs	r3, #14
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2200      	movs	r2, #0
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	e037      	b.n	800280a <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800279a:	230e      	movs	r3, #14
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	18d3      	adds	r3, r2, r3
 80027a4:	7819      	ldrb	r1, [r3, #0]
 80027a6:	220d      	movs	r2, #13
 80027a8:	18bb      	adds	r3, r7, r2
 80027aa:	18ba      	adds	r2, r7, r2
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	404a      	eors	r2, r1
 80027b0:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80027b2:	230c      	movs	r3, #12
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2208      	movs	r2, #8
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e01b      	b.n	80027f4 <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 80027bc:	210d      	movs	r1, #13
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da09      	bge.n	80027dc <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	2231      	movs	r2, #49	; 0x31
 80027d2:	4053      	eors	r3, r2
 80027d4:	b25a      	sxtb	r2, r3
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e005      	b.n	80027e8 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 80027dc:	230d      	movs	r3, #13
 80027de:	18fa      	adds	r2, r7, r3
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	18db      	adds	r3, r3, r3
 80027e6:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80027e8:	220c      	movs	r2, #12
 80027ea:	18bb      	adds	r3, r7, r2
 80027ec:	18ba      	adds	r2, r7, r2
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	3a01      	subs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	230c      	movs	r3, #12
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1de      	bne.n	80027bc <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80027fe:	220e      	movs	r2, #14
 8002800:	18bb      	adds	r3, r7, r2
 8002802:	18ba      	adds	r2, r7, r2
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	3201      	adds	r2, #1
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	230e      	movs	r3, #14
 800280c:	18fa      	adds	r2, r7, r3
 800280e:	1cbb      	adds	r3, r7, #2
 8002810:	8812      	ldrh	r2, [r2, #0]
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d3c0      	bcc.n	800279a <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 8002818:	230d      	movs	r3, #13
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b004      	add	sp, #16
 8002824:	bd80      	pop	{r7, pc}

08002826 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	0008      	movs	r0, r1
 8002830:	0011      	movs	r1, r2
 8002832:	1cbb      	adds	r3, r7, #2
 8002834:	1c02      	adds	r2, r0, #0
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	1c7b      	adds	r3, r7, #1
 800283a:	1c0a      	adds	r2, r1, #0
 800283c:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 800283e:	1cbb      	adds	r3, r7, #2
 8002840:	881a      	ldrh	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0011      	movs	r1, r2
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff ff97 	bl	800277a <sensirion_common_generate_crc>
 800284c:	0003      	movs	r3, r0
 800284e:	001a      	movs	r2, r3
 8002850:	1c7b      	adds	r3, r7, #1
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4293      	cmp	r3, r2
 8002856:	d002      	beq.n	800285e <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 8002858:	2301      	movs	r3, #1
 800285a:	425b      	negs	r3, r3
 800285c:	e000      	b.n	8002860 <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 800285e:	2300      	movs	r3, #0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	0008      	movs	r0, r1
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	0019      	movs	r1, r3
 8002876:	250a      	movs	r5, #10
 8002878:	197b      	adds	r3, r7, r5
 800287a:	1c02      	adds	r2, r0, #0
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	2309      	movs	r3, #9
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	1c0a      	adds	r2, r1, #0
 8002884:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8002886:	2014      	movs	r0, #20
 8002888:	183b      	adds	r3, r7, r0
 800288a:	2200      	movs	r2, #0
 800288c:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 800288e:	197b      	adds	r3, r7, r5
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	b299      	uxth	r1, r3
 8002896:	183b      	adds	r3, r7, r0
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	0004      	movs	r4, r0
 800289c:	183a      	adds	r2, r7, r0
 800289e:	1c58      	adds	r0, r3, #1
 80028a0:	8010      	strh	r0, [r2, #0]
 80028a2:	001a      	movs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	193a      	adds	r2, r7, r4
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	8011      	strh	r1, [r2, #0]
 80028b6:	001a      	movs	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	197a      	adds	r2, r7, r5
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 80028c4:	2317      	movs	r3, #23
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	e042      	b.n	8002954 <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 80028ce:	2617      	movs	r6, #23
 80028d0:	19bb      	adds	r3, r7, r6
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	18d3      	adds	r3, r2, r3
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	b299      	uxth	r1, r3
 80028e0:	2414      	movs	r4, #20
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	193a      	adds	r2, r7, r4
 80028e8:	1c58      	adds	r0, r3, #1
 80028ea:	8010      	strh	r0, [r2, #0]
 80028ec:	001a      	movs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	189b      	adds	r3, r3, r2
 80028f2:	b2ca      	uxtb	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 80028f6:	19bb      	adds	r3, r7, r6
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	18d3      	adds	r3, r2, r3
 8002900:	8819      	ldrh	r1, [r3, #0]
 8002902:	0025      	movs	r5, r4
 8002904:	197b      	adds	r3, r7, r5
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	197a      	adds	r2, r7, r5
 800290a:	1c58      	adds	r0, r3, #1
 800290c:	8010      	strh	r0, [r2, #0]
 800290e:	001a      	movs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	189b      	adds	r3, r3, r2
 8002914:	b2ca      	uxtb	r2, r1
 8002916:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8002918:	197b      	adds	r3, r7, r5
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	3b02      	subs	r3, #2
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	18d3      	adds	r3, r2, r3
 8002922:	2213      	movs	r2, #19
 8002924:	18bc      	adds	r4, r7, r2
 8002926:	2102      	movs	r1, #2
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff ff26 	bl	800277a <sensirion_common_generate_crc>
 800292e:	0003      	movs	r3, r0
 8002930:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8002932:	197b      	adds	r3, r7, r5
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	197a      	adds	r2, r7, r5
 8002938:	1c59      	adds	r1, r3, #1
 800293a:	8011      	strh	r1, [r2, #0]
 800293c:	001a      	movs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	189b      	adds	r3, r3, r2
 8002942:	2213      	movs	r2, #19
 8002944:	18ba      	adds	r2, r7, r2
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 800294a:	19bb      	adds	r3, r7, r6
 800294c:	19ba      	adds	r2, r7, r6
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	3201      	adds	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	2317      	movs	r3, #23
 8002956:	18fa      	adds	r2, r7, r3
 8002958:	2309      	movs	r3, #9
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d3b4      	bcc.n	80028ce <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 8002964:	2314      	movs	r3, #20
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	881b      	ldrh	r3, [r3, #0]
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b007      	add	sp, #28
 8002970:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002972 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8002972:	b5b0      	push	{r4, r5, r7, lr}
 8002974:	b096      	sub	sp, #88	; 0x58
 8002976:	af00      	add	r7, sp, #0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	0011      	movs	r1, r2
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	1c02      	adds	r2, r0, #0
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	1c0a      	adds	r2, r1, #0
 8002986:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8002988:	2052      	movs	r0, #82	; 0x52
 800298a:	1839      	adds	r1, r7, r0
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	1c1a      	adds	r2, r3, #0
 8002992:	1892      	adds	r2, r2, r2
 8002994:	18d3      	adds	r3, r2, r3
 8002996:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8002998:	2308      	movs	r3, #8
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800299e:	183b      	adds	r3, r7, r0
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 f901 	bl	8002bb0 <sensirion_i2c_read>
 80029ae:	0003      	movs	r3, r0
 80029b0:	001a      	movs	r2, r3
 80029b2:	214a      	movs	r1, #74	; 0x4a
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 80029b8:	000a      	movs	r2, r1
 80029ba:	18bb      	adds	r3, r7, r2
 80029bc:	2100      	movs	r1, #0
 80029be:	5e5b      	ldrsh	r3, [r3, r1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 80029c4:	18bb      	adds	r3, r7, r2
 80029c6:	2200      	movs	r2, #0
 80029c8:	5e9b      	ldrsh	r3, [r3, r2]
 80029ca:	e053      	b.n	8002a74 <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80029cc:	2356      	movs	r3, #86	; 0x56
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2200      	movs	r2, #0
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	2354      	movs	r3, #84	; 0x54
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	e041      	b.n	8002a62 <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 80029de:	2156      	movs	r1, #86	; 0x56
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e6:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	3302      	adds	r3, #2
 80029ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029f0:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	001a      	movs	r2, r3
 80029f6:	2102      	movs	r1, #2
 80029f8:	f7ff ff15 	bl	8002826 <sensirion_common_check_crc>
 80029fc:	0003      	movs	r3, r0
 80029fe:	001a      	movs	r2, r3
 8002a00:	214a      	movs	r1, #74	; 0x4a
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 8002a06:	000a      	movs	r2, r1
 8002a08:	18bb      	adds	r3, r7, r2
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5e5b      	ldrsh	r3, [r3, r1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 8002a12:	18bb      	adds	r3, r7, r2
 8002a14:	2200      	movs	r2, #0
 8002a16:	5e9b      	ldrsh	r3, [r3, r2]
 8002a18:	e02c      	b.n	8002a74 <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8002a1a:	2456      	movs	r4, #86	; 0x56
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a22:	18d2      	adds	r2, r2, r3
 8002a24:	2554      	movs	r5, #84	; 0x54
 8002a26:	197b      	adds	r3, r7, r5
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	1979      	adds	r1, r7, r5
 8002a2c:	1c58      	adds	r0, r3, #1
 8002a2e:	8008      	strh	r0, [r1, #0]
 8002a30:	0019      	movs	r1, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	185b      	adds	r3, r3, r1
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a42:	18d2      	adds	r2, r2, r3
 8002a44:	197b      	adds	r3, r7, r5
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	1979      	adds	r1, r7, r5
 8002a4a:	1c58      	adds	r0, r3, #1
 8002a4c:	8008      	strh	r0, [r1, #0]
 8002a4e:	0019      	movs	r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	185b      	adds	r3, r3, r1
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002a58:	193b      	adds	r3, r7, r4
 8002a5a:	193a      	adds	r2, r7, r4
 8002a5c:	8812      	ldrh	r2, [r2, #0]
 8002a5e:	3203      	adds	r2, #3
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	2356      	movs	r3, #86	; 0x56
 8002a64:	18fa      	adds	r2, r7, r3
 8002a66:	2352      	movs	r3, #82	; 0x52
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	8812      	ldrh	r2, [r2, #0]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3b5      	bcc.n	80029de <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b016      	add	sp, #88	; 0x58
 8002a7a:	bdb0      	pop	{r4, r5, r7, pc}

08002a7c <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6039      	str	r1, [r7, #0]
 8002a84:	0011      	movs	r1, r2
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	1c02      	adds	r2, r0, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	1c0a      	adds	r2, r1, #0
 8002a90:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8002a92:	250c      	movs	r5, #12
 8002a94:	197c      	adds	r4, r7, r5
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	1dfb      	adds	r3, r7, #7
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ff66 	bl	8002972 <sensirion_i2c_read_words_as_bytes>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 8002aaa:	197b      	adds	r3, r7, r5
 8002aac:	2200      	movs	r2, #0
 8002aae:	5e9b      	ldrsh	r3, [r3, r2]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <sensirion_i2c_read_words+0x40>
        return ret;
 8002ab4:	197b      	adds	r3, r7, r5
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8002aba:	e02a      	b.n	8002b12 <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 8002abc:	230f      	movs	r3, #15
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e01c      	b.n	8002b00 <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 8002ac6:	200f      	movs	r0, #15
 8002ac8:	183b      	adds	r3, r7, r0
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	18d3      	adds	r3, r2, r3
 8002ad2:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b219      	sxth	r1, r3
 8002ae8:	183b      	adds	r3, r7, r0
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	18d3      	adds	r3, r2, r3
 8002af2:	b28a      	uxth	r2, r1
 8002af4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8002af6:	183b      	adds	r3, r7, r0
 8002af8:	183a      	adds	r2, r7, r0
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	3201      	adds	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	230f      	movs	r3, #15
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	1d3a      	adds	r2, r7, #4
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8da      	bhi.n	8002ac6 <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bdb0      	pop	{r4, r5, r7, pc}

08002b1a <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8002b1a:	b590      	push	{r4, r7, lr}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	0002      	movs	r2, r0
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	1c0a      	adds	r2, r1, #0
 8002b2a:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	8819      	ldrh	r1, [r3, #0]
 8002b30:	240c      	movs	r4, #12
 8002b32:	1938      	adds	r0, r7, r4
 8002b34:	2300      	movs	r3, #0
 8002b36:	2200      	movs	r2, #0
 8002b38:	f7ff fe96 	bl	8002868 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8002b3c:	1939      	adds	r1, r7, r4
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f853 	bl	8002bf0 <sensirion_i2c_write>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	b21b      	sxth	r3, r3
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b005      	add	sp, #20
 8002b54:	bd90      	pop	{r4, r7, pc}
	...

08002b58 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <sensirion_i2c_init+0x50>)
 8002b60:	601a      	str	r2, [r3, #0]
   // hi2c1.Init.ClockSpeed = 100000;
   // hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <sensirion_i2c_init+0x54>)
 8002b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <sensirion_i2c_init+0x54>)
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0389      	lsls	r1, r1, #14
 8002b90:	430a      	orrs	r2, r1
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <sensirion_i2c_init+0x4c>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f001 face 	bl	8004138 <HAL_I2C_Init>
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	20000210 	.word	0x20000210
 8002ba8:	40005400 	.word	0x40005400
 8002bac:	40021000 	.word	0x40021000

08002bb0 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6039      	str	r1, [r7, #0]
 8002bb8:	0011      	movs	r1, r2
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	1c02      	adds	r2, r0, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	1c0a      	adds	r2, r1, #0
 8002bc4:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	18db      	adds	r3, r3, r3
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <sensirion_i2c_read+0x3c>)
 8002bd8:	2464      	movs	r4, #100	; 0x64
 8002bda:	9400      	str	r4, [sp, #0]
 8002bdc:	f001 fc4a 	bl	8004474 <HAL_I2C_Master_Receive>
 8002be0:	0003      	movs	r3, r0
 8002be2:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b003      	add	sp, #12
 8002bea:	bd90      	pop	{r4, r7, pc}
 8002bec:	20000210 	.word	0x20000210

08002bf0 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6039      	str	r1, [r7, #0]
 8002bf8:	0011      	movs	r1, r2
 8002bfa:	1dfb      	adds	r3, r7, #7
 8002bfc:	1c02      	adds	r2, r0, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	1c0a      	adds	r2, r1, #0
 8002c04:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	18db      	adds	r3, r3, r3
 8002c0e:	b299      	uxth	r1, r3
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	4805      	ldr	r0, [pc, #20]	; (8002c2c <sensirion_i2c_write+0x3c>)
 8002c18:	2464      	movs	r4, #100	; 0x64
 8002c1a:	9400      	str	r4, [sp, #0]
 8002c1c:	f001 fb22 	bl	8004264 <HAL_I2C_Master_Transmit>
 8002c20:	0003      	movs	r3, r0
 8002c22:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b003      	add	sp, #12
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	20000210 	.word	0x20000210

08002c30 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	22fa      	movs	r2, #250	; 0xfa
 8002c3c:	0091      	lsls	r1, r2, #2
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fd fa74 	bl	800012c <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	22fa      	movs	r2, #250	; 0xfa
 8002c4c:	0091      	lsls	r1, r2, #2
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7fd faf2 	bl	8000238 <__aeabi_uidivmod>
 8002c54:	1e0b      	subs	r3, r1, #0
 8002c56:	d002      	beq.n	8002c5e <sensirion_sleep_usec+0x2e>
        msec++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8002c5e:	f000 fb15 	bl	800328c <HAL_GetHalVersion>
 8002c62:	0003      	movs	r3, r0
 8002c64:	4a06      	ldr	r2, [pc, #24]	; (8002c80 <sensirion_sleep_usec+0x50>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d802      	bhi.n	8002c70 <sensirion_sleep_usec+0x40>
        msec++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fae6 	bl	8003244 <HAL_Delay>
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	010100ff 	.word	0x010100ff

08002c84 <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 8002c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	250f      	movs	r5, #15
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	1c02      	adds	r2, r0, #0
 8002c94:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 8002c96:	2616      	movs	r6, #22
 8002c98:	19bc      	adds	r4, r7, r6
 8002c9a:	197b      	adds	r3, r7, r5
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 f820 	bl	8002ce4 <sht3x_measure>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 8002ca8:	19bb      	adds	r3, r7, r6
 8002caa:	2200      	movs	r2, #0
 8002cac:	5e9b      	ldrsh	r3, [r3, r2]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <sht3x_measure_blocking_read+0x5c>)
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff ffbb 	bl	8002c30 <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 8002cba:	19bc      	adds	r4, r7, r6
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	197b      	adds	r3, r7, r5
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f823 	bl	8002d10 <sht3x_read>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 8002cce:	2316      	movs	r3, #22
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b007      	add	sp, #28
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	00003a98 	.word	0x00003a98

08002ce4 <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	0002      	movs	r2, r0
 8002cec:	1dfb      	adds	r3, r7, #7
 8002cee:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <sht3x_measure+0x28>)
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	1dfb      	adds	r3, r7, #7
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff ff0d 	bl	8002b1a <sensirion_i2c_write_cmd>
 8002d00:	0003      	movs	r3, r0
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	20000180 	.word	0x20000180

08002d10 <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	260f      	movs	r6, #15
 8002d1c:	19bb      	adds	r3, r7, r6
 8002d1e:	1c02      	adds	r2, r0, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 8002d22:	2316      	movs	r3, #22
 8002d24:	18fc      	adds	r4, r7, r3
 8002d26:	2510      	movs	r5, #16
 8002d28:	1979      	adds	r1, r7, r5
 8002d2a:	19bb      	adds	r3, r7, r6
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff fea3 	bl	8002a7c <sensirion_i2c_read_words>
 8002d36:	0003      	movs	r3, r0
 8002d38:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	0011      	movs	r1, r2
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f810 	bl	8002d68 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8002d48:	197b      	adds	r3, r7, r5
 8002d4a:	885b      	ldrh	r3, [r3, #2]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f821 	bl	8002d98 <tick_to_humidity>

    return ret;
 8002d56:	2316      	movs	r3, #22
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b007      	add	sp, #28
 8002d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d68 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	0002      	movs	r2, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	1dbb      	adds	r3, r7, #6
 8002d74:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8002d76:	1dbb      	adds	r3, r7, #6
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <tick_to_temperature+0x28>)
 8002d7c:	4353      	muls	r3, r2
 8002d7e:	135b      	asrs	r3, r3, #13
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <tick_to_temperature+0x2c>)
 8002d82:	189a      	adds	r2, r3, r2
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	601a      	str	r2, [r3, #0]
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	00005573 	.word	0x00005573
 8002d94:	ffff5038 	.word	0xffff5038

08002d98 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	0002      	movs	r2, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	1dbb      	adds	r3, r7, #6
 8002da4:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8002da6:	1dbb      	adds	r3, r7, #6
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <tick_to_humidity+0x24>)
 8002dac:	4353      	muls	r3, r2
 8002dae:	135a      	asrs	r2, r3, #13
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	000030d4 	.word	0x000030d4

08002dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_MspInit+0x24>)
 8002dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_MspInit+0x24>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_MspInit+0x24>)
 8002dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_MspInit+0x24>)
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	0549      	lsls	r1, r1, #21
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <HAL_ADC_MspInit+0x28>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d106      	bne.n	8002e08 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_ADC_MspInit+0x2c>)
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_ADC_MspInit+0x2c>)
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	0089      	lsls	r1, r1, #2
 8002e04:	430a      	orrs	r2, r1
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40012400 	.word	0x40012400
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	240c      	movs	r4, #12
 8002e22:	193b      	adds	r3, r7, r4
 8002e24:	0018      	movs	r0, r3
 8002e26:	2314      	movs	r3, #20
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f003 fad1 	bl	80063d2 <memset>
  if(hi2c->Instance==I2C1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <HAL_I2C_MspInit+0x7c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d128      	bne.n	8002e8c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <HAL_I2C_MspInit+0x80>)
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_I2C_MspInit+0x80>)
 8002e40:	2102      	movs	r1, #2
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e46:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_I2C_MspInit+0x80>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e52:	0021      	movs	r1, r4
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	22c0      	movs	r2, #192	; 0xc0
 8002e58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2212      	movs	r2, #18
 8002e5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2201      	movs	r2, #1
 8002e70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <HAL_I2C_MspInit+0x84>)
 8002e76:	0019      	movs	r1, r3
 8002e78:	0010      	movs	r0, r2
 8002e7a:	f000 ffb5 	bl	8003de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_I2C_MspInit+0x80>)
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_I2C_MspInit+0x80>)
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0389      	lsls	r1, r1, #14
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b009      	add	sp, #36	; 0x24
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	40005400 	.word	0x40005400
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	50000400 	.word	0x50000400

08002ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b08b      	sub	sp, #44	; 0x2c
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	2414      	movs	r4, #20
 8002eaa:	193b      	adds	r3, r7, r4
 8002eac:	0018      	movs	r0, r3
 8002eae:	2314      	movs	r3, #20
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f003 fa8d 	bl	80063d2 <memset>
  if(huart->Instance==LPUART1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a28      	ldr	r2, [pc, #160]	; (8002f60 <HAL_UART_MspInit+0xc0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d14a      	bne.n	8002f58 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	02c9      	lsls	r1, r1, #11
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8002edc:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002eee:	2102      	movs	r1, #2
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_UART_MspInit+0xc4>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	2202      	movs	r2, #2
 8002f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	2203      	movs	r2, #3
 8002f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	2206      	movs	r2, #6
 8002f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f1e:	193b      	adds	r3, r7, r4
 8002f20:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <HAL_UART_MspInit+0xc8>)
 8002f22:	0019      	movs	r1, r3
 8002f24:	0010      	movs	r0, r2
 8002f26:	f000 ff5f 	bl	8003de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f2a:	0021      	movs	r1, r4
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	00d2      	lsls	r2, r2, #3
 8002f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2202      	movs	r2, #2
 8002f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2203      	movs	r2, #3
 8002f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	2206      	movs	r2, #6
 8002f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <HAL_UART_MspInit+0xcc>)
 8002f50:	0019      	movs	r1, r3
 8002f52:	0010      	movs	r0, r2
 8002f54:	f000 ff48 	bl	8003de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b00b      	add	sp, #44	; 0x2c
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	40004800 	.word	0x40004800
 8002f64:	40021000 	.word	0x40021000
 8002f68:	50000800 	.word	0x50000800
 8002f6c:	50000400 	.word	0x50000400

08002f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <NMI_Handler+0x4>

08002f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <HardFault_Handler+0x4>

08002f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f94:	f000 f93a 	bl	800320c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e00a      	b.n	8002fc6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fb0:	e000      	b.n	8002fb4 <_read+0x16>
 8002fb2:	bf00      	nop
 8002fb4:	0001      	movs	r1, r0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	60ba      	str	r2, [r7, #8]
 8002fbc:	b2ca      	uxtb	r2, r1
 8002fbe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	dbf0      	blt.n	8002fb0 <_read+0x12>
	}

return len;
 8002fce:	687b      	ldr	r3, [r7, #4]
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b006      	add	sp, #24
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	e009      	b.n	8002ffe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	60ba      	str	r2, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	e000      	b.n	8002ff8 <_write+0x20>
 8002ff6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	dbf1      	blt.n	8002fea <_write+0x12>
	}
	return len;
 8003006:	687b      	ldr	r3, [r7, #4]
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b006      	add	sp, #24
 800300e:	bd80      	pop	{r7, pc}

08003010 <_close>:

int _close(int file)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	return -1;
 8003018:	2301      	movs	r3, #1
 800301a:	425b      	negs	r3, r3
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}

08003024 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0192      	lsls	r2, r2, #6
 8003034:	605a      	str	r2, [r3, #4]
	return 0;
 8003036:	2300      	movs	r3, #0
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}

08003040 <_isatty>:

int _isatty(int file)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	return 1;
 8003048:	2301      	movs	r3, #1
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b002      	add	sp, #8
 8003050:	bd80      	pop	{r7, pc}

08003052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
	return 0;
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}

08003068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <_sbrk+0x5c>)
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <_sbrk+0x60>)
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800307c:	4b13      	ldr	r3, [pc, #76]	; (80030cc <_sbrk+0x64>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <_sbrk+0x64>)
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <_sbrk+0x68>)
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	18d3      	adds	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	429a      	cmp	r2, r3
 8003096:	d207      	bcs.n	80030a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003098:	f003 f968 	bl	800636c <__errno>
 800309c:	0003      	movs	r3, r0
 800309e:	220c      	movs	r2, #12
 80030a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	425b      	negs	r3, r3
 80030a6:	e009      	b.n	80030bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <_sbrk+0x64>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <_sbrk+0x64>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	18d2      	adds	r2, r2, r3
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <_sbrk+0x64>)
 80030b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b006      	add	sp, #24
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20002000 	.word	0x20002000
 80030c8:	00000400 	.word	0x00000400
 80030cc:	2000025c 	.word	0x2000025c
 80030d0:	200003b8 	.word	0x200003b8

080030d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80030e0:	4813      	ldr	r0, [pc, #76]	; (8003130 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80030e2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80030e4:	4813      	ldr	r0, [pc, #76]	; (8003134 <LoopForever+0x6>)
    LDR R1, [R0]
 80030e6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80030e8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <LoopForever+0xa>)
    CMP R1, R2
 80030ec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80030ee:	d105      	bne.n	80030fc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80030f0:	4812      	ldr	r0, [pc, #72]	; (800313c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80030f2:	4913      	ldr	r1, [pc, #76]	; (8003140 <LoopForever+0x12>)
    STR R1, [R0]
 80030f4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80030f6:	4813      	ldr	r0, [pc, #76]	; (8003144 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80030f8:	4913      	ldr	r1, [pc, #76]	; (8003148 <LoopForever+0x1a>)
    STR R1, [R0]
 80030fa:	6001      	str	r1, [r0, #0]

080030fc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030fc:	4813      	ldr	r0, [pc, #76]	; (800314c <LoopForever+0x1e>)
  ldr r1, =_edata
 80030fe:	4914      	ldr	r1, [pc, #80]	; (8003150 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <LoopForever+0x26>)
  movs r3, #0
 8003102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003104:	e002      	b.n	800310c <LoopCopyDataInit>

08003106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800310a:	3304      	adds	r3, #4

0800310c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800310c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800310e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003110:	d3f9      	bcc.n	8003106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003114:	4c11      	ldr	r4, [pc, #68]	; (800315c <LoopForever+0x2e>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003118:	e001      	b.n	800311e <LoopFillZerobss>

0800311a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800311a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800311c:	3204      	adds	r2, #4

0800311e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800311e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003120:	d3fb      	bcc.n	800311a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003122:	f7ff ffd7 	bl	80030d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003126:	f003 f927 	bl	8006378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800312a:	f7fe fc47 	bl	80019bc <main>

0800312e <LoopForever>:

LoopForever:
    b LoopForever
 800312e:	e7fe      	b.n	800312e <LoopForever>
   ldr   r0, =_estack
 8003130:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8003134:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003138:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800313c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8003140:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003144:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003148:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800314c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003150:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003154:	08007810 	.word	0x08007810
  ldr r2, =_sbss
 8003158:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800315c:	200003b4 	.word	0x200003b4

08003160 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003160:	e7fe      	b.n	8003160 <ADC1_IRQHandler>
	...

08003164 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_Init+0x3c>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_Init+0x3c>)
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800317c:	2003      	movs	r0, #3
 800317e:	f000 f811 	bl	80031a4 <HAL_InitTick>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d003      	beq.n	800318e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e001      	b.n	8003192 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800318e:	f7ff fe17 	bl	8002dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	40022000 	.word	0x40022000

080031a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_InitTick+0x5c>)
 80031ae:	681c      	ldr	r4, [r3, #0]
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_InitTick+0x60>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	0019      	movs	r1, r3
 80031b6:	23fa      	movs	r3, #250	; 0xfa
 80031b8:	0098      	lsls	r0, r3, #2
 80031ba:	f7fc ffb7 	bl	800012c <__udivsi3>
 80031be:	0003      	movs	r3, r0
 80031c0:	0019      	movs	r1, r3
 80031c2:	0020      	movs	r0, r4
 80031c4:	f7fc ffb2 	bl	800012c <__udivsi3>
 80031c8:	0003      	movs	r3, r0
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fdff 	bl	8003dce <HAL_SYSTICK_Config>
 80031d0:	1e03      	subs	r3, r0, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e00f      	b.n	80031f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d80b      	bhi.n	80031f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	2301      	movs	r3, #1
 80031e2:	425b      	negs	r3, r3
 80031e4:	2200      	movs	r2, #0
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 fddc 	bl	8003da4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_InitTick+0x64>)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b003      	add	sp, #12
 80031fe:	bd90      	pop	{r4, r7, pc}
 8003200:	20000184 	.word	0x20000184
 8003204:	2000018c 	.word	0x2000018c
 8003208:	20000188 	.word	0x20000188

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_IncTick+0x1c>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	001a      	movs	r2, r3
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_IncTick+0x20>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	18d2      	adds	r2, r2, r3
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_IncTick+0x20>)
 800321e:	601a      	str	r2, [r3, #0]
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	2000018c 	.word	0x2000018c
 800322c:	200003a0 	.word	0x200003a0

08003230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  return uwTick;
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <HAL_GetTick+0x10>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	200003a0 	.word	0x200003a0

08003244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff fff0 	bl	8003230 <HAL_GetTick>
 8003250:	0003      	movs	r3, r0
 8003252:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	d005      	beq.n	800326a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_Delay+0x44>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	001a      	movs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	189b      	adds	r3, r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	f7ff ffe0 	bl	8003230 <HAL_GetTick>
 8003270:	0002      	movs	r2, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	429a      	cmp	r2, r3
 800327a:	d8f7      	bhi.n	800326c <HAL_Delay+0x28>
  {
  }
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b004      	add	sp, #16
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	2000018c 	.word	0x2000018c

0800328c <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8003290:	4b01      	ldr	r3, [pc, #4]	; (8003298 <HAL_GetHalVersion+0xc>)
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	010a0500 	.word	0x010a0500

0800329c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e159      	b.n	8003562 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2250      	movs	r2, #80	; 0x50
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff fd8e 	bl	8002de8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	2210      	movs	r2, #16
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d005      	beq.n	80032e4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2204      	movs	r2, #4
 80032e0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80032e2:	d00b      	beq.n	80032fc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	2210      	movs	r2, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2250      	movs	r2, #80	; 0x50
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e132      	b.n	8003562 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	4a9a      	ldr	r2, [pc, #616]	; (800356c <HAL_ADC_Init+0x2d0>)
 8003302:	4013      	ands	r3, r2
 8003304:	2202      	movs	r2, #2
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2203      	movs	r2, #3
 8003314:	4013      	ands	r3, r2
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <HAL_ADC_Init+0x90>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	4013      	ands	r3, r2
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_ADC_Init+0x90>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_ADC_Init+0x92>
 800332c:	2300      	movs	r3, #0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d149      	bne.n	80033c6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	23c0      	movs	r3, #192	; 0xc0
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	429a      	cmp	r2, r3
 800333c:	d00b      	beq.n	8003356 <HAL_ADC_Init+0xba>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	05db      	lsls	r3, r3, #23
 8003346:	429a      	cmp	r2, r3
 8003348:	d005      	beq.n	8003356 <HAL_ADC_Init+0xba>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	429a      	cmp	r2, r3
 8003354:	d111      	bne.n	800337a <HAL_ADC_Init+0xde>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0092      	lsls	r2, r2, #2
 8003362:	0892      	lsrs	r2, r2, #2
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6919      	ldr	r1, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	611a      	str	r2, [r3, #16]
 8003378:	e014      	b.n	80033a4 <HAL_ADC_Init+0x108>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0092      	lsls	r2, r2, #2
 8003386:	0892      	lsrs	r2, r2, #2
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	4b79      	ldr	r3, [pc, #484]	; (8003570 <HAL_ADC_Init+0x2d4>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b78      	ldr	r3, [pc, #480]	; (8003570 <HAL_ADC_Init+0x2d4>)
 8003390:	4978      	ldr	r1, [pc, #480]	; (8003574 <HAL_ADC_Init+0x2d8>)
 8003392:	400a      	ands	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_ADC_Init+0x2d4>)
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <HAL_ADC_Init+0x2d4>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2118      	movs	r1, #24
 80033b0:	438a      	bics	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68d9      	ldr	r1, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80033c6:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_ADC_Init+0x2d4>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b69      	ldr	r3, [pc, #420]	; (8003570 <HAL_ADC_Init+0x2d4>)
 80033cc:	496a      	ldr	r1, [pc, #424]	; (8003578 <HAL_ADC_Init+0x2dc>)
 80033ce:	400a      	ands	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80033d2:	4b67      	ldr	r3, [pc, #412]	; (8003570 <HAL_ADC_Init+0x2d4>)
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	065a      	lsls	r2, r3, #25
 80033dc:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_ADC_Init+0x2d4>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	055b      	lsls	r3, r3, #21
 80033ec:	4013      	ands	r3, r2
 80033ee:	d108      	bne.n	8003402 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	0549      	lsls	r1, r1, #21
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	495b      	ldr	r1, [pc, #364]	; (800357c <HAL_ADC_Init+0x2e0>)
 800340e:	400a      	ands	r2, r1
 8003410:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d101      	bne.n	8003428 <HAL_ADC_Init+0x18c>
 8003424:	2304      	movs	r3, #4
 8003426:	e000      	b.n	800342a <HAL_ADC_Init+0x18e>
 8003428:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800342a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2020      	movs	r0, #32
 8003430:	5c1b      	ldrb	r3, [r3, r0]
 8003432:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003434:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	202c      	movs	r0, #44	; 0x2c
 800343a:	5c1b      	ldrb	r3, [r3, r0]
 800343c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800343e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003444:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800344c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003454:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003462:	23c2      	movs	r3, #194	; 0xc2
 8003464:	33ff      	adds	r3, #255	; 0xff
 8003466:	429a      	cmp	r2, r3
 8003468:	d00b      	beq.n	8003482 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68d9      	ldr	r1, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d11a      	bne.n	80034c2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	5c9b      	ldrb	r3, [r3, r2]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0249      	lsls	r1, r1, #9
 80034a4:	430a      	orrs	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e00b      	b.n	80034c2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2220      	movs	r2, #32
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	2201      	movs	r2, #1
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d11f      	bne.n	800350a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	492a      	ldr	r1, [pc, #168]	; (8003580 <HAL_ADC_Init+0x2e4>)
 80034d6:	400a      	ands	r2, r1
 80034d8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80034e8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80034ee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2101      	movs	r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	611a      	str	r2, [r3, #16]
 8003508:	e00e      	b.n	8003528 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	2b01      	cmp	r3, #1
 8003516:	d107      	bne.n	8003528 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2101      	movs	r1, #1
 8003524:	438a      	bics	r2, r1
 8003526:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2107      	movs	r1, #7
 8003534:	438a      	bics	r2, r1
 8003536:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6959      	ldr	r1, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	2203      	movs	r2, #3
 8003556:	4393      	bics	r3, r2
 8003558:	2201      	movs	r2, #1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	fffffefd 	.word	0xfffffefd
 8003570:	40012708 	.word	0x40012708
 8003574:	ffc3ffff 	.word	0xffc3ffff
 8003578:	fdffffff 	.word	0xfdffffff
 800357c:	fffe0219 	.word	0xfffe0219
 8003580:	fffffc03 	.word	0xfffffc03

08003584 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800358c:	230f      	movs	r3, #15
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2204      	movs	r2, #4
 800359c:	4013      	ands	r3, r2
 800359e:	d138      	bne.n	8003612 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2250      	movs	r2, #80	; 0x50
 80035a4:	5c9b      	ldrb	r3, [r3, r2]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_Start+0x2a>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e038      	b.n	8003620 <HAL_ADC_Start+0x9c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2250      	movs	r2, #80	; 0x50
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d007      	beq.n	80035ce <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80035be:	230f      	movs	r3, #15
 80035c0:	18fc      	adds	r4, r7, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f981 	bl	80038cc <ADC_Enable>
 80035ca:	0003      	movs	r3, r0
 80035cc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035ce:	230f      	movs	r3, #15
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d120      	bne.n	800361a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	4a12      	ldr	r2, [pc, #72]	; (8003628 <HAL_ADC_Start+0xa4>)
 80035de:	4013      	ands	r3, r2
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	0052      	lsls	r2, r2, #1
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2250      	movs	r2, #80	; 0x50
 80035f4:	2100      	movs	r1, #0
 80035f6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	221c      	movs	r2, #28
 80035fe:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2104      	movs	r1, #4
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e003      	b.n	800361a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003612:	230f      	movs	r3, #15
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800361a:	230f      	movs	r3, #15
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b005      	add	sp, #20
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	fffff0fe 	.word	0xfffff0fe

0800362c <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003634:	230f      	movs	r3, #15
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2250      	movs	r2, #80	; 0x50
 8003640:	5c9b      	ldrb	r3, [r3, r2]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_ADC_Stop+0x1e>
 8003646:	2302      	movs	r3, #2
 8003648:	e029      	b.n	800369e <HAL_ADC_Stop+0x72>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2250      	movs	r2, #80	; 0x50
 800364e:	2101      	movs	r1, #1
 8003650:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003652:	250f      	movs	r5, #15
 8003654:	197c      	adds	r4, r7, r5
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fa06 	bl	8003a6a <ADC_ConversionStop>
 800365e:	0003      	movs	r3, r0
 8003660:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003662:	197b      	adds	r3, r7, r5
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d112      	bne.n	8003690 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800366a:	197c      	adds	r4, r7, r5
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 f994 	bl	800399c <ADC_Disable>
 8003674:	0003      	movs	r3, r0
 8003676:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003678:	197b      	adds	r3, r7, r5
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_ADC_Stop+0x7c>)
 8003686:	4013      	ands	r3, r2
 8003688:	2201      	movs	r2, #1
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2250      	movs	r2, #80	; 0x50
 8003694:	2100      	movs	r1, #0
 8003696:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003698:	230f      	movs	r3, #15
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	781b      	ldrb	r3, [r3, #0]
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bdb0      	pop	{r4, r5, r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	fffffefe 	.word	0xfffffefe

080036ac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d102      	bne.n	80036cc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80036c6:	2308      	movs	r3, #8
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e014      	b.n	80036f6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10b      	bne.n	80036f2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	2220      	movs	r2, #32
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2250      	movs	r2, #80	; 0x50
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e072      	b.n	80037d8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80036f2:	230c      	movs	r3, #12
 80036f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80036f6:	f7ff fd9b 	bl	8003230 <HAL_GetTick>
 80036fa:	0003      	movs	r3, r0
 80036fc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036fe:	e01f      	b.n	8003740 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	d01c      	beq.n	8003740 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_ADC_PollForConversion+0x70>
 800370c:	f7ff fd90 	bl	8003230 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d211      	bcs.n	8003740 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	d10b      	bne.n	8003740 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	2204      	movs	r2, #4
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2250      	movs	r2, #80	; 0x50
 8003738:	2100      	movs	r1, #0
 800373a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e04b      	b.n	80037d8 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	d0d9      	beq.n	8003700 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	23c0      	movs	r3, #192	; 0xc0
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	4013      	ands	r3, r2
 8003766:	d12e      	bne.n	80037c6 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800376e:	2b00      	cmp	r3, #0
 8003770:	d129      	bne.n	80037c6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2208      	movs	r2, #8
 800377a:	4013      	ands	r3, r2
 800377c:	2b08      	cmp	r3, #8
 800377e:	d122      	bne.n	80037c6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2204      	movs	r2, #4
 8003788:	4013      	ands	r3, r2
 800378a:	d110      	bne.n	80037ae <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	210c      	movs	r1, #12
 8003798:	438a      	bics	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <HAL_ADC_PollForConversion+0x134>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	2201      	movs	r2, #1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
 80037ac:	e00b      	b.n	80037c6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	2220      	movs	r2, #32
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	2201      	movs	r2, #1
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	220c      	movs	r2, #12
 80037d4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	fffffefe 	.word	0xfffffefe

080037e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b002      	add	sp, #8
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2250      	movs	r2, #80	; 0x50
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x18>
 8003810:	2302      	movs	r3, #2
 8003812:	e050      	b.n	80038b6 <HAL_ADC_ConfigChannel+0xba>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2250      	movs	r2, #80	; 0x50
 8003818:	2101      	movs	r1, #1
 800381a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2204      	movs	r2, #4
 8003824:	4013      	ands	r3, r2
 8003826:	d00b      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	2220      	movs	r2, #32
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2250      	movs	r2, #80	; 0x50
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e03a      	b.n	80038b6 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_ADC_ConfigChannel+0xc4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d018      	beq.n	800387c <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	035b      	lsls	r3, r3, #13
 8003856:	0b5a      	lsrs	r2, r3, #13
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	4013      	ands	r3, r2
 800386a:	d01f      	beq.n	80038ac <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_ADC_ConfigChannel+0xc8>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <HAL_ADC_ConfigChannel+0xc8>)
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	03c9      	lsls	r1, r1, #15
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e017      	b.n	80038ac <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	035b      	lsls	r3, r3, #13
 8003888:	0b5b      	lsrs	r3, r3, #13
 800388a:	43d9      	mvns	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	400a      	ands	r2, r1
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	4013      	ands	r3, r2
 800389e:	d005      	beq.n	80038ac <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_ADC_ConfigChannel+0xc8>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <HAL_ADC_ConfigChannel+0xc8>)
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <HAL_ADC_ConfigChannel+0xcc>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2250      	movs	r2, #80	; 0x50
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	00001001 	.word	0x00001001
 80038c4:	40012708 	.word	0x40012708
 80038c8:	ffbfffff 	.word	0xffbfffff

080038cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2203      	movs	r2, #3
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d108      	bne.n	80038f8 <ADC_Enable+0x2c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <ADC_Enable+0x2c>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <ADC_Enable+0x2e>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d146      	bne.n	800398c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <ADC_Enable+0xcc>)
 8003906:	4013      	ands	r3, r2
 8003908:	d00d      	beq.n	8003926 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	2210      	movs	r2, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	2201      	movs	r2, #1
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e033      	b.n	800398e <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	430a      	orrs	r2, r1
 8003934:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003936:	2001      	movs	r0, #1
 8003938:	f000 f8e4 	bl	8003b04 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800393c:	f7ff fc78 	bl	8003230 <HAL_GetTick>
 8003940:	0003      	movs	r3, r0
 8003942:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003944:	e01b      	b.n	800397e <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003946:	f7ff fc73 	bl	8003230 <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b0a      	cmp	r3, #10
 8003952:	d914      	bls.n	800397e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	2b01      	cmp	r3, #1
 8003960:	d00d      	beq.n	800397e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	2210      	movs	r2, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	2201      	movs	r2, #1
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e007      	b.n	800398e <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	4013      	ands	r3, r2
 8003988:	2b01      	cmp	r3, #1
 800398a:	d1dc      	bne.n	8003946 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b004      	add	sp, #16
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	80000017 	.word	0x80000017

0800399c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2203      	movs	r2, #3
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d108      	bne.n	80039c8 <ADC_Disable+0x2c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2201      	movs	r2, #1
 80039be:	4013      	ands	r3, r2
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <ADC_Disable+0x2c>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <ADC_Disable+0x2e>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d048      	beq.n	8003a60 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2205      	movs	r2, #5
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d110      	bne.n	80039fe <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2102      	movs	r1, #2
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2203      	movs	r2, #3
 80039f2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039f4:	f7ff fc1c 	bl	8003230 <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039fc:	e029      	b.n	8003a52 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	2210      	movs	r2, #16
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	2201      	movs	r2, #1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e023      	b.n	8003a62 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a1a:	f7ff fc09 	bl	8003230 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b0a      	cmp	r3, #10
 8003a26:	d914      	bls.n	8003a52 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d10d      	bne.n	8003a52 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	2201      	movs	r2, #1
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e007      	b.n	8003a62 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d0dc      	beq.n	8003a1a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b004      	add	sp, #16
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d03a      	beq.n	8003af8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d10d      	bne.n	8003aac <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2202      	movs	r2, #2
 8003a98:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003a9a:	d107      	bne.n	8003aac <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aac:	f7ff fbc0 	bl	8003230 <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ab4:	e01a      	b.n	8003aec <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ab6:	f7ff fbbb 	bl	8003230 <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b0a      	cmp	r3, #10
 8003ac2:	d913      	bls.n	8003aec <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2204      	movs	r2, #4
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00d      	beq.n	8003aec <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e006      	b.n	8003afa <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2204      	movs	r2, #4
 8003af4:	4013      	ands	r3, r2
 8003af6:	d1de      	bne.n	8003ab6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <ADC_DelayMicroSecond+0x38>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	490b      	ldr	r1, [pc, #44]	; (8003b40 <ADC_DelayMicroSecond+0x3c>)
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7fc fb0a 	bl	800012c <__udivsi3>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4353      	muls	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003b22:	e002      	b.n	8003b2a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f9      	bne.n	8003b24 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b004      	add	sp, #16
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	20000184 	.word	0x20000184
 8003b40:	000f4240 	.word	0x000f4240

08003b44 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4e:	2317      	movs	r3, #23
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2250      	movs	r2, #80	; 0x50
 8003b62:	5c9b      	ldrb	r3, [r3, r2]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_ADCEx_Calibration_Start+0x28>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e083      	b.n	8003c74 <HAL_ADCEx_Calibration_Start+0x130>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2250      	movs	r2, #80	; 0x50
 8003b70:	2101      	movs	r1, #1
 8003b72:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <HAL_ADCEx_Calibration_Start+0x50>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADCEx_Calibration_Start+0x50>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <HAL_ADCEx_Calibration_Start+0x52>
 8003b94:	2300      	movs	r3, #0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d15b      	bne.n	8003c52 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	4a37      	ldr	r2, [pc, #220]	; (8003c7c <HAL_ADCEx_Calibration_Start+0x138>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2103      	movs	r1, #3
 8003bc2:	438a      	bics	r2, r1
 8003bc4:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0609      	lsls	r1, r1, #24
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003bd8:	f7ff fb2a 	bl	8003230 <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003be0:	e01d      	b.n	8003c1e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003be2:	f7ff fb25 	bl	8003230 <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b0a      	cmp	r3, #10
 8003bee:	d916      	bls.n	8003c1e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0fdb      	lsrs	r3, r3, #31
 8003bf8:	07da      	lsls	r2, r3, #31
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d10d      	bne.n	8003c1e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	2212      	movs	r2, #18
 8003c08:	4393      	bics	r3, r2
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2250      	movs	r2, #80	; 0x50
 8003c16:	2100      	movs	r1, #0
 8003c18:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e02a      	b.n	8003c74 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	0fdb      	lsrs	r3, r3, #31
 8003c26:	07da      	lsls	r2, r3, #31
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d0d8      	beq.n	8003be2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68d9      	ldr	r1, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	2203      	movs	r2, #3
 8003c46:	4393      	bics	r3, r2
 8003c48:	2201      	movs	r2, #1
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
 8003c50:	e009      	b.n	8003c66 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	2220      	movs	r2, #32
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003c5e:	2317      	movs	r3, #23
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2250      	movs	r2, #80	; 0x50
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003c6e:	2317      	movs	r3, #23
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	fffffefd 	.word	0xfffffefd

08003c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	0002      	movs	r2, r0
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	1dfb      	adds	r3, r7, #7
 8003c8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	1dfb      	adds	r3, r7, #7
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b7f      	cmp	r3, #127	; 0x7f
 8003c94:	d828      	bhi.n	8003ce8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c96:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <__NVIC_SetPriority+0xd4>)
 8003c98:	1dfb      	adds	r3, r7, #7
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b25b      	sxtb	r3, r3
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	33c0      	adds	r3, #192	; 0xc0
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	589b      	ldr	r3, [r3, r2]
 8003ca6:	1dfa      	adds	r2, r7, #7
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	0011      	movs	r1, r2
 8003cac:	2203      	movs	r2, #3
 8003cae:	400a      	ands	r2, r1
 8003cb0:	00d2      	lsls	r2, r2, #3
 8003cb2:	21ff      	movs	r1, #255	; 0xff
 8003cb4:	4091      	lsls	r1, r2
 8003cb6:	000a      	movs	r2, r1
 8003cb8:	43d2      	mvns	r2, r2
 8003cba:	401a      	ands	r2, r3
 8003cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	2303      	movs	r3, #3
 8003cce:	4003      	ands	r3, r0
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd4:	481f      	ldr	r0, [pc, #124]	; (8003d54 <__NVIC_SetPriority+0xd4>)
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b25b      	sxtb	r3, r3
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	33c0      	adds	r3, #192	; 0xc0
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ce6:	e031      	b.n	8003d4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <__NVIC_SetPriority+0xd8>)
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	0019      	movs	r1, r3
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	3b08      	subs	r3, #8
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	3306      	adds	r3, #6
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	3304      	adds	r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	1dfa      	adds	r2, r7, #7
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	0011      	movs	r1, r2
 8003d08:	2203      	movs	r2, #3
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	00d2      	lsls	r2, r2, #3
 8003d0e:	21ff      	movs	r1, #255	; 0xff
 8003d10:	4091      	lsls	r1, r2
 8003d12:	000a      	movs	r2, r1
 8003d14:	43d2      	mvns	r2, r2
 8003d16:	401a      	ands	r2, r3
 8003d18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	019b      	lsls	r3, r3, #6
 8003d1e:	22ff      	movs	r2, #255	; 0xff
 8003d20:	401a      	ands	r2, r3
 8003d22:	1dfb      	adds	r3, r7, #7
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	0018      	movs	r0, r3
 8003d28:	2303      	movs	r3, #3
 8003d2a:	4003      	ands	r3, r0
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d30:	4809      	ldr	r0, [pc, #36]	; (8003d58 <__NVIC_SetPriority+0xd8>)
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	001c      	movs	r4, r3
 8003d38:	230f      	movs	r3, #15
 8003d3a:	4023      	ands	r3, r4
 8003d3c:	3b08      	subs	r3, #8
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	430a      	orrs	r2, r1
 8003d42:	3306      	adds	r3, #6
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	18c3      	adds	r3, r0, r3
 8003d48:	3304      	adds	r3, #4
 8003d4a:	601a      	str	r2, [r3, #0]
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b003      	add	sp, #12
 8003d52:	bd90      	pop	{r4, r7, pc}
 8003d54:	e000e100 	.word	0xe000e100
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	1e5a      	subs	r2, r3, #1
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	045b      	lsls	r3, r3, #17
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d301      	bcc.n	8003d74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d70:	2301      	movs	r3, #1
 8003d72:	e010      	b.n	8003d96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <SysTick_Config+0x44>)
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	3a01      	subs	r2, #1
 8003d7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	425b      	negs	r3, r3
 8003d80:	2103      	movs	r1, #3
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff ff7c 	bl	8003c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <SysTick_Config+0x44>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <SysTick_Config+0x44>)
 8003d90:	2207      	movs	r2, #7
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	210f      	movs	r1, #15
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	1c02      	adds	r2, r0, #0
 8003db4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7ff ff5d 	bl	8003c80 <__NVIC_SetPriority>
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff ffbf 	bl	8003d5c <SysTick_Config>
 8003dde:	0003      	movs	r3, r0
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003dfe:	e149      	b.n	8004094 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4091      	lsls	r1, r2
 8003e0a:	000a      	movs	r2, r1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d100      	bne.n	8003e18 <HAL_GPIO_Init+0x30>
 8003e16:	e13a      	b.n	800408e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d130      	bne.n	8003e92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	0013      	movs	r3, r2
 8003e40:	43da      	mvns	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	409a      	lsls	r2, r3
 8003e52:	0013      	movs	r3, r2
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e66:	2201      	movs	r2, #1
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	0013      	movs	r3, r2
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	401a      	ands	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	409a      	lsls	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2203      	movs	r2, #3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d017      	beq.n	8003ece <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	0013      	movs	r3, r2
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	0013      	movs	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d123      	bne.n	8003f22 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	0092      	lsls	r2, r2, #2
 8003ee4:	58d3      	ldr	r3, [r2, r3]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2207      	movs	r2, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2107      	movs	r1, #7
 8003f06:	400b      	ands	r3, r1
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	6939      	ldr	r1, [r7, #16]
 8003f20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0013      	movs	r3, r2
 8003f32:	43da      	mvns	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	401a      	ands	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	23c0      	movs	r3, #192	; 0xc0
 8003f5c:	029b      	lsls	r3, r3, #10
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d100      	bne.n	8003f64 <HAL_GPIO_Init+0x17c>
 8003f62:	e094      	b.n	800408e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f64:	4b51      	ldr	r3, [pc, #324]	; (80040ac <HAL_GPIO_Init+0x2c4>)
 8003f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f68:	4b50      	ldr	r3, [pc, #320]	; (80040ac <HAL_GPIO_Init+0x2c4>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f70:	4a4f      	ldr	r2, [pc, #316]	; (80040b0 <HAL_GPIO_Init+0x2c8>)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	589b      	ldr	r3, [r3, r2]
 8003f7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2203      	movs	r2, #3
 8003f82:	4013      	ands	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	0013      	movs	r3, r2
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	23a0      	movs	r3, #160	; 0xa0
 8003f98:	05db      	lsls	r3, r3, #23
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d013      	beq.n	8003fc6 <HAL_GPIO_Init+0x1de>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a44      	ldr	r2, [pc, #272]	; (80040b4 <HAL_GPIO_Init+0x2cc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_GPIO_Init+0x1da>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a43      	ldr	r2, [pc, #268]	; (80040b8 <HAL_GPIO_Init+0x2d0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <HAL_GPIO_Init+0x1d6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a42      	ldr	r2, [pc, #264]	; (80040bc <HAL_GPIO_Init+0x2d4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_GPIO_Init+0x1d2>
 8003fb6:	2305      	movs	r3, #5
 8003fb8:	e006      	b.n	8003fc8 <HAL_GPIO_Init+0x1e0>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e004      	b.n	8003fc8 <HAL_GPIO_Init+0x1e0>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e002      	b.n	8003fc8 <HAL_GPIO_Init+0x1e0>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_GPIO_Init+0x1e0>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	2103      	movs	r1, #3
 8003fcc:	400a      	ands	r2, r1
 8003fce:	0092      	lsls	r2, r2, #2
 8003fd0:	4093      	lsls	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd8:	4935      	ldr	r1, [pc, #212]	; (80040b0 <HAL_GPIO_Init+0x2c8>)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	3302      	adds	r3, #2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe6:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	025b      	lsls	r3, r3, #9
 8003ffe:	4013      	ands	r3, r2
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43da      	mvns	r2, r3
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	029b      	lsls	r3, r3, #10
 8004028:	4013      	ands	r3, r2
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	43da      	mvns	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	035b      	lsls	r3, r3, #13
 8004052:	4013      	ands	r3, r2
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004064:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	43da      	mvns	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	039b      	lsls	r3, r3, #14
 800407c:	4013      	ands	r3, r2
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3301      	adds	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	40da      	lsrs	r2, r3
 800409c:	1e13      	subs	r3, r2, #0
 800409e:	d000      	beq.n	80040a2 <HAL_GPIO_Init+0x2ba>
 80040a0:	e6ae      	b.n	8003e00 <HAL_GPIO_Init+0x18>
  }
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b006      	add	sp, #24
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40010000 	.word	0x40010000
 80040b4:	50000400 	.word	0x50000400
 80040b8:	50000800 	.word	0x50000800
 80040bc:	50001c00 	.word	0x50001c00
 80040c0:	40010400 	.word	0x40010400

080040c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	000a      	movs	r2, r1
 80040ce:	1cbb      	adds	r3, r7, #2
 80040d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	1cba      	adds	r2, r7, #2
 80040d8:	8812      	ldrh	r2, [r2, #0]
 80040da:	4013      	ands	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80040de:	230f      	movs	r3, #15
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e003      	b.n	80040f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040e8:	230f      	movs	r3, #15
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80040f0:	230f      	movs	r3, #15
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	781b      	ldrb	r3, [r3, #0]
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	0008      	movs	r0, r1
 8004108:	0011      	movs	r1, r2
 800410a:	1cbb      	adds	r3, r7, #2
 800410c:	1c02      	adds	r2, r0, #0
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	1c7b      	adds	r3, r7, #1
 8004112:	1c0a      	adds	r2, r1, #0
 8004114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004116:	1c7b      	adds	r3, r7, #1
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411e:	1cbb      	adds	r3, r7, #2
 8004120:	881a      	ldrh	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004126:	e003      	b.n	8004130 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004128:	1cbb      	adds	r3, r7, #2
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	b002      	add	sp, #8
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e082      	b.n	8004250 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2241      	movs	r2, #65	; 0x41
 800414e:	5c9b      	ldrb	r3, [r3, r2]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2240      	movs	r2, #64	; 0x40
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f7fe fe59 	bl	8002e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2241      	movs	r2, #65	; 0x41
 800416a:	2124      	movs	r1, #36	; 0x24
 800416c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	438a      	bics	r2, r1
 800417c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4934      	ldr	r1, [pc, #208]	; (8004258 <HAL_I2C_Init+0x120>)
 8004188:	400a      	ands	r2, r1
 800418a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4931      	ldr	r1, [pc, #196]	; (800425c <HAL_I2C_Init+0x124>)
 8004198:	400a      	ands	r2, r1
 800419a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d108      	bne.n	80041b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	0209      	lsls	r1, r1, #8
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	e007      	b.n	80041c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2184      	movs	r1, #132	; 0x84
 80041c0:	0209      	lsls	r1, r1, #8
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d104      	bne.n	80041d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	491f      	ldr	r1, [pc, #124]	; (8004260 <HAL_I2C_Init+0x128>)
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	491a      	ldr	r1, [pc, #104]	; (800425c <HAL_I2C_Init+0x124>)
 80041f4:	400a      	ands	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	431a      	orrs	r2, r3
 8004202:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69d9      	ldr	r1, [r3, #28]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1a      	ldr	r2, [r3, #32]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2101      	movs	r1, #1
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2241      	movs	r2, #65	; 0x41
 800423c:	2120      	movs	r1, #32
 800423e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2242      	movs	r2, #66	; 0x42
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}
 8004258:	f0ffffff 	.word	0xf0ffffff
 800425c:	ffff7fff 	.word	0xffff7fff
 8004260:	02008000 	.word	0x02008000

08004264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	0008      	movs	r0, r1
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	0019      	movs	r1, r3
 8004272:	230a      	movs	r3, #10
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	1c02      	adds	r2, r0, #0
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	2308      	movs	r3, #8
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	1c0a      	adds	r2, r1, #0
 8004280:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2241      	movs	r2, #65	; 0x41
 8004286:	5c9b      	ldrb	r3, [r3, r2]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b20      	cmp	r3, #32
 800428c:	d000      	beq.n	8004290 <HAL_I2C_Master_Transmit+0x2c>
 800428e:	e0e7      	b.n	8004460 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2240      	movs	r2, #64	; 0x40
 8004294:	5c9b      	ldrb	r3, [r3, r2]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_I2C_Master_Transmit+0x3a>
 800429a:	2302      	movs	r3, #2
 800429c:	e0e1      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1fe>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	2101      	movs	r1, #1
 80042a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042a6:	f7fe ffc3 	bl	8003230 <HAL_GetTick>
 80042aa:	0003      	movs	r3, r0
 80042ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	0219      	lsls	r1, r3, #8
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2319      	movs	r3, #25
 80042ba:	2201      	movs	r2, #1
 80042bc:	f000 fa04 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0cc      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2241      	movs	r2, #65	; 0x41
 80042cc:	2121      	movs	r1, #33	; 0x21
 80042ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2242      	movs	r2, #66	; 0x42
 80042d4:	2110      	movs	r1, #16
 80042d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2208      	movs	r2, #8
 80042e8:	18ba      	adds	r2, r7, r2
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2bff      	cmp	r3, #255	; 0xff
 80042fc:	d911      	bls.n	8004322 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	b2da      	uxtb	r2, r3
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	045c      	lsls	r4, r3, #17
 800430e:	230a      	movs	r3, #10
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	8819      	ldrh	r1, [r3, #0]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	4b55      	ldr	r3, [pc, #340]	; (800446c <HAL_I2C_Master_Transmit+0x208>)
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	0023      	movs	r3, r4
 800431c:	f000 fb74 	bl	8004a08 <I2C_TransferConfig>
 8004320:	e075      	b.n	800440e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	b2da      	uxtb	r2, r3
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	049c      	lsls	r4, r3, #18
 8004336:	230a      	movs	r3, #10
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	8819      	ldrh	r1, [r3, #0]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_I2C_Master_Transmit+0x208>)
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	0023      	movs	r3, r4
 8004344:	f000 fb60 	bl	8004a08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004348:	e061      	b.n	800440e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f9f8 	bl	8004746 <I2C_WaitOnTXISFlagUntilTimeout>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e081      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d03a      	beq.n	800440e <HAL_I2C_Master_Transmit+0x1aa>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d136      	bne.n	800440e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	0013      	movs	r3, r2
 80043aa:	2200      	movs	r2, #0
 80043ac:	2180      	movs	r1, #128	; 0x80
 80043ae:	f000 f98b 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e053      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2bff      	cmp	r3, #255	; 0xff
 80043c2:	d911      	bls.n	80043e8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	22ff      	movs	r2, #255	; 0xff
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	045c      	lsls	r4, r3, #17
 80043d4:	230a      	movs	r3, #10
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	8819      	ldrh	r1, [r3, #0]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	0023      	movs	r3, r4
 80043e2:	f000 fb11 	bl	8004a08 <I2C_TransferConfig>
 80043e6:	e012      	b.n	800440e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	049c      	lsls	r4, r3, #18
 80043fc:	230a      	movs	r3, #10
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	8819      	ldrh	r1, [r3, #0]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	0023      	movs	r3, r4
 800440a:	f000 fafd 	bl	8004a08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d198      	bne.n	800434a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	0018      	movs	r0, r3
 8004420:	f000 f9d0 	bl	80047c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e01a      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2220      	movs	r2, #32
 8004432:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	490c      	ldr	r1, [pc, #48]	; (8004470 <HAL_I2C_Master_Transmit+0x20c>)
 8004440:	400a      	ands	r2, r1
 8004442:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2241      	movs	r2, #65	; 0x41
 8004448:	2120      	movs	r1, #32
 800444a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2242      	movs	r2, #66	; 0x42
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2240      	movs	r2, #64	; 0x40
 8004458:	2100      	movs	r1, #0
 800445a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	b007      	add	sp, #28
 8004468:	bd90      	pop	{r4, r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	80002000 	.word	0x80002000
 8004470:	fe00e800 	.word	0xfe00e800

08004474 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	0008      	movs	r0, r1
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	0019      	movs	r1, r3
 8004482:	230a      	movs	r3, #10
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	1c02      	adds	r2, r0, #0
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	2308      	movs	r3, #8
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	1c0a      	adds	r2, r1, #0
 8004490:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2241      	movs	r2, #65	; 0x41
 8004496:	5c9b      	ldrb	r3, [r3, r2]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d000      	beq.n	80044a0 <HAL_I2C_Master_Receive+0x2c>
 800449e:	e0e8      	b.n	8004672 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	5c9b      	ldrb	r3, [r3, r2]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_I2C_Master_Receive+0x3a>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0e2      	b.n	8004674 <HAL_I2C_Master_Receive+0x200>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2240      	movs	r2, #64	; 0x40
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044b6:	f7fe febb 	bl	8003230 <HAL_GetTick>
 80044ba:	0003      	movs	r3, r0
 80044bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	0219      	lsls	r1, r3, #8
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2319      	movs	r3, #25
 80044ca:	2201      	movs	r2, #1
 80044cc:	f000 f8fc 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 80044d0:	1e03      	subs	r3, r0, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0cd      	b.n	8004674 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2241      	movs	r2, #65	; 0x41
 80044dc:	2122      	movs	r1, #34	; 0x22
 80044de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2242      	movs	r2, #66	; 0x42
 80044e4:	2110      	movs	r1, #16
 80044e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2208      	movs	r2, #8
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	8812      	ldrh	r2, [r2, #0]
 80044fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2bff      	cmp	r3, #255	; 0xff
 800450c:	d911      	bls.n	8004532 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	22ff      	movs	r2, #255	; 0xff
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	045c      	lsls	r4, r3, #17
 800451e:	230a      	movs	r3, #10
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	8819      	ldrh	r1, [r3, #0]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	4b55      	ldr	r3, [pc, #340]	; (800467c <HAL_I2C_Master_Receive+0x208>)
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	0023      	movs	r3, r4
 800452c:	f000 fa6c 	bl	8004a08 <I2C_TransferConfig>
 8004530:	e076      	b.n	8004620 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	b2da      	uxtb	r2, r3
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	049c      	lsls	r4, r3, #18
 8004546:	230a      	movs	r3, #10
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	8819      	ldrh	r1, [r3, #0]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	4b4b      	ldr	r3, [pc, #300]	; (800467c <HAL_I2C_Master_Receive+0x208>)
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	0023      	movs	r3, r4
 8004554:	f000 fa58 	bl	8004a08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004558:	e062      	b.n	8004620 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 f96b 	bl	800483c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004566:	1e03      	subs	r3, r0, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e082      	b.n	8004674 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03a      	beq.n	8004620 <HAL_I2C_Master_Receive+0x1ac>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d136      	bne.n	8004620 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	0013      	movs	r3, r2
 80045bc:	2200      	movs	r2, #0
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	f000 f882 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e053      	b.n	8004674 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2bff      	cmp	r3, #255	; 0xff
 80045d4:	d911      	bls.n	80045fa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	045c      	lsls	r4, r3, #17
 80045e6:	230a      	movs	r3, #10
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	8819      	ldrh	r1, [r3, #0]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	2300      	movs	r3, #0
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	0023      	movs	r3, r4
 80045f4:	f000 fa08 	bl	8004a08 <I2C_TransferConfig>
 80045f8:	e012      	b.n	8004620 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	b2da      	uxtb	r2, r3
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	049c      	lsls	r4, r3, #18
 800460e:	230a      	movs	r3, #10
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	8819      	ldrh	r1, [r3, #0]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	2300      	movs	r3, #0
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	0023      	movs	r3, r4
 800461c:	f000 f9f4 	bl	8004a08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d197      	bne.n	800455a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 f8c7 	bl	80047c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e01a      	b.n	8004674 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2220      	movs	r2, #32
 8004644:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	490b      	ldr	r1, [pc, #44]	; (8004680 <HAL_I2C_Master_Receive+0x20c>)
 8004652:	400a      	ands	r2, r1
 8004654:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2241      	movs	r2, #65	; 0x41
 800465a:	2120      	movs	r1, #32
 800465c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2242      	movs	r2, #66	; 0x42
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2240      	movs	r2, #64	; 0x40
 800466a:	2100      	movs	r1, #0
 800466c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b007      	add	sp, #28
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	80002400 	.word	0x80002400
 8004680:	fe00e800 	.word	0xfe00e800

08004684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2202      	movs	r2, #2
 8004694:	4013      	ands	r3, r2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d103      	bne.n	80046a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2201      	movs	r2, #1
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d007      	beq.n	80046c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2101      	movs	r1, #1
 80046bc:	430a      	orrs	r2, r1
 80046be:	619a      	str	r2, [r3, #24]
  }
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	1dfb      	adds	r3, r7, #7
 80046d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d8:	e021      	b.n	800471e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	d01e      	beq.n	800471e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e0:	f7fe fda6 	bl	8003230 <HAL_GetTick>
 80046e4:	0002      	movs	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d113      	bne.n	800471e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	2220      	movs	r2, #32
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2241      	movs	r2, #65	; 0x41
 8004706:	2120      	movs	r1, #32
 8004708:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2242      	movs	r2, #66	; 0x42
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2240      	movs	r2, #64	; 0x40
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e00f      	b.n	800473e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	4013      	ands	r3, r2
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	425a      	negs	r2, r3
 800472e:	4153      	adcs	r3, r2
 8004730:	b2db      	uxtb	r3, r3
 8004732:	001a      	movs	r2, r3
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d0ce      	beq.n	80046da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b004      	add	sp, #16
 8004744:	bd80      	pop	{r7, pc}

08004746 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004752:	e02b      	b.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f8da 	bl	8004914 <I2C_IsAcknowledgeFailed>
 8004760:	1e03      	subs	r3, r0, #0
 8004762:	d001      	beq.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e029      	b.n	80047bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	3301      	adds	r3, #1
 800476c:	d01e      	beq.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476e:	f7fe fd5f 	bl	8003230 <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	d302      	bcc.n	8004784 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d113      	bne.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	2220      	movs	r2, #32
 800478a:	431a      	orrs	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2241      	movs	r2, #65	; 0x41
 8004794:	2120      	movs	r1, #32
 8004796:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2242      	movs	r2, #66	; 0x42
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2240      	movs	r2, #64	; 0x40
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e007      	b.n	80047bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2202      	movs	r2, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d1cc      	bne.n	8004754 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b004      	add	sp, #16
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d0:	e028      	b.n	8004824 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 f89b 	bl	8004914 <I2C_IsAcknowledgeFailed>
 80047de:	1e03      	subs	r3, r0, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e026      	b.n	8004834 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fe fd23 	bl	8003230 <HAL_GetTick>
 80047ea:	0002      	movs	r2, r0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d113      	bne.n	8004824 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	2220      	movs	r2, #32
 8004802:	431a      	orrs	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2241      	movs	r2, #65	; 0x41
 800480c:	2120      	movs	r1, #32
 800480e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2242      	movs	r2, #66	; 0x42
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2240      	movs	r2, #64	; 0x40
 800481c:	2100      	movs	r1, #0
 800481e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e007      	b.n	8004834 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2220      	movs	r2, #32
 800482c:	4013      	ands	r3, r2
 800482e:	2b20      	cmp	r3, #32
 8004830:	d1cf      	bne.n	80047d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b004      	add	sp, #16
 800483a:	bd80      	pop	{r7, pc}

0800483c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004848:	e055      	b.n	80048f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	0018      	movs	r0, r3
 8004852:	f000 f85f 	bl	8004914 <I2C_IsAcknowledgeFailed>
 8004856:	1e03      	subs	r3, r0, #0
 8004858:	d001      	beq.n	800485e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e053      	b.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2220      	movs	r2, #32
 8004866:	4013      	ands	r3, r2
 8004868:	2b20      	cmp	r3, #32
 800486a:	d129      	bne.n	80048c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2204      	movs	r2, #4
 8004874:	4013      	ands	r3, r2
 8004876:	2b04      	cmp	r3, #4
 8004878:	d105      	bne.n	8004886 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e03f      	b.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2220      	movs	r2, #32
 800488c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	491d      	ldr	r1, [pc, #116]	; (8004910 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800489a:	400a      	ands	r2, r1
 800489c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2241      	movs	r2, #65	; 0x41
 80048a8:	2120      	movs	r1, #32
 80048aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2242      	movs	r2, #66	; 0x42
 80048b0:	2100      	movs	r1, #0
 80048b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2240      	movs	r2, #64	; 0x40
 80048b8:	2100      	movs	r1, #0
 80048ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e022      	b.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c0:	f7fe fcb6 	bl	8003230 <HAL_GetTick>
 80048c4:	0002      	movs	r2, r0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d302      	bcc.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	2220      	movs	r2, #32
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2241      	movs	r2, #65	; 0x41
 80048e6:	2120      	movs	r1, #32
 80048e8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2240      	movs	r2, #64	; 0x40
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e007      	b.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2204      	movs	r2, #4
 80048fe:	4013      	ands	r3, r2
 8004900:	2b04      	cmp	r3, #4
 8004902:	d1a2      	bne.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	0018      	movs	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	b004      	add	sp, #16
 800490c:	bd80      	pop	{r7, pc}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	fe00e800 	.word	0xfe00e800

08004914 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2210      	movs	r2, #16
 8004928:	4013      	ands	r3, r2
 800492a:	2b10      	cmp	r3, #16
 800492c:	d164      	bne.n	80049f8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	049b      	lsls	r3, r3, #18
 8004938:	401a      	ands	r2, r3
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	049b      	lsls	r3, r3, #18
 800493e:	429a      	cmp	r2, r3
 8004940:	d02b      	beq.n	800499a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2180      	movs	r1, #128	; 0x80
 800494e:	01c9      	lsls	r1, r1, #7
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004954:	e021      	b.n	800499a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3301      	adds	r3, #1
 800495a:	d01e      	beq.n	800499a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495c:	f7fe fc68 	bl	8003230 <HAL_GetTick>
 8004960:	0002      	movs	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	d302      	bcc.n	8004972 <I2C_IsAcknowledgeFailed+0x5e>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d113      	bne.n	800499a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	2220      	movs	r2, #32
 8004978:	431a      	orrs	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2241      	movs	r2, #65	; 0x41
 8004982:	2120      	movs	r1, #32
 8004984:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2242      	movs	r2, #66	; 0x42
 800498a:	2100      	movs	r1, #0
 800498c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2240      	movs	r2, #64	; 0x40
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e02f      	b.n	80049fa <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2220      	movs	r2, #32
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d1d6      	bne.n	8004956 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2210      	movs	r2, #16
 80049ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2220      	movs	r2, #32
 80049b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff fe62 	bl	8004684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	490e      	ldr	r1, [pc, #56]	; (8004a04 <I2C_IsAcknowledgeFailed+0xf0>)
 80049cc:	400a      	ands	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	2204      	movs	r2, #4
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	2120      	movs	r1, #32
 80049e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2242      	movs	r2, #66	; 0x42
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	2100      	movs	r1, #0
 80049f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b004      	add	sp, #16
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	fe00e800 	.word	0xfe00e800

08004a08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	0008      	movs	r0, r1
 8004a12:	0011      	movs	r1, r2
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	240a      	movs	r4, #10
 8004a18:	193b      	adds	r3, r7, r4
 8004a1a:	1c02      	adds	r2, r0, #0
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	2009      	movs	r0, #9
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	1c0a      	adds	r2, r1, #0
 8004a24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	0d51      	lsrs	r1, r2, #21
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	00d2      	lsls	r2, r2, #3
 8004a34:	400a      	ands	r2, r1
 8004a36:	490e      	ldr	r1, [pc, #56]	; (8004a70 <I2C_TransferConfig+0x68>)
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	43d2      	mvns	r2, r2
 8004a3c:	401a      	ands	r2, r3
 8004a3e:	0011      	movs	r1, r2
 8004a40:	193b      	adds	r3, r7, r4
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	059b      	lsls	r3, r3, #22
 8004a46:	0d9a      	lsrs	r2, r3, #22
 8004a48:	183b      	adds	r3, r7, r0
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	0418      	lsls	r0, r3, #16
 8004a4e:	23ff      	movs	r3, #255	; 0xff
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	4003      	ands	r3, r0
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b005      	add	sp, #20
 8004a6c:	bd90      	pop	{r4, r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	03ff63ff 	.word	0x03ff63ff

08004a74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2241      	movs	r2, #65	; 0x41
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d138      	bne.n	8004afc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2240      	movs	r2, #64	; 0x40
 8004a8e:	5c9b      	ldrb	r3, [r3, r2]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e032      	b.n	8004afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2241      	movs	r2, #65	; 0x41
 8004aa4:	2124      	movs	r1, #36	; 0x24
 8004aa6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4911      	ldr	r1, [pc, #68]	; (8004b08 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6819      	ldr	r1, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2241      	movs	r2, #65	; 0x41
 8004aec:	2120      	movs	r1, #32
 8004aee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2240      	movs	r2, #64	; 0x40
 8004af4:	2100      	movs	r1, #0
 8004af6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e000      	b.n	8004afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
  }
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	ffffefff 	.word	0xffffefff

08004b0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2241      	movs	r2, #65	; 0x41
 8004b1a:	5c9b      	ldrb	r3, [r3, r2]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d139      	bne.n	8004b96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e033      	b.n	8004b98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2240      	movs	r2, #64	; 0x40
 8004b34:	2101      	movs	r1, #1
 8004b36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2241      	movs	r2, #65	; 0x41
 8004b3c:	2124      	movs	r1, #36	; 0x24
 8004b3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2241      	movs	r2, #65	; 0x41
 8004b86:	2120      	movs	r1, #32
 8004b88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2240      	movs	r2, #64	; 0x40
 8004b8e:	2100      	movs	r1, #0
 8004b90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b004      	add	sp, #16
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	fffff0ff 	.word	0xfffff0ff

08004ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f000 fb6c 	bl	8005290 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb8:	4bc8      	ldr	r3, [pc, #800]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	220c      	movs	r2, #12
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc2:	4bc6      	ldr	r3, [pc, #792]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	025b      	lsls	r3, r3, #9
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d100      	bne.n	8004bda <HAL_RCC_OscConfig+0x36>
 8004bd8:	e07d      	b.n	8004cd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d007      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d112      	bne.n	8004c0c <HAL_RCC_OscConfig+0x68>
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	025b      	lsls	r3, r3, #9
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d10d      	bne.n	8004c0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	4bba      	ldr	r3, [pc, #744]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	029b      	lsls	r3, r3, #10
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <HAL_RCC_OscConfig+0x5a>
 8004bfc:	e06a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x130>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d166      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f000 fb42 	bl	8005290 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	025b      	lsls	r3, r3, #9
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d107      	bne.n	8004c28 <HAL_RCC_OscConfig+0x84>
 8004c18:	4bb0      	ldr	r3, [pc, #704]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4baf      	ldr	r3, [pc, #700]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c1e:	2180      	movs	r1, #128	; 0x80
 8004c20:	0249      	lsls	r1, r1, #9
 8004c22:	430a      	orrs	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e027      	b.n	8004c78 <HAL_RCC_OscConfig+0xd4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	23a0      	movs	r3, #160	; 0xa0
 8004c2e:	02db      	lsls	r3, r3, #11
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d10e      	bne.n	8004c52 <HAL_RCC_OscConfig+0xae>
 8004c34:	4ba9      	ldr	r3, [pc, #676]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4ba8      	ldr	r3, [pc, #672]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	02c9      	lsls	r1, r1, #11
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	4ba6      	ldr	r3, [pc, #664]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4ba5      	ldr	r3, [pc, #660]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	0249      	lsls	r1, r1, #9
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e012      	b.n	8004c78 <HAL_RCC_OscConfig+0xd4>
 8004c52:	4ba2      	ldr	r3, [pc, #648]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4ba1      	ldr	r3, [pc, #644]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c58:	49a1      	ldr	r1, [pc, #644]	; (8004ee0 <HAL_RCC_OscConfig+0x33c>)
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	4b9f      	ldr	r3, [pc, #636]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	025b      	lsls	r3, r3, #9
 8004c66:	4013      	ands	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4b9b      	ldr	r3, [pc, #620]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b9a      	ldr	r3, [pc, #616]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c72:	499c      	ldr	r1, [pc, #624]	; (8004ee4 <HAL_RCC_OscConfig+0x340>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d014      	beq.n	8004caa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fad6 	bl	8003230 <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c8a:	f7fe fad1 	bl	8003230 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b64      	cmp	r3, #100	; 0x64
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e2f9      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c9c:	4b8f      	ldr	r3, [pc, #572]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0xe6>
 8004ca8:	e015      	b.n	8004cd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fe fac1 	bl	8003230 <HAL_GetTick>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fe fabc 	bl	8003230 <HAL_GetTick>
 8004cb8:	0002      	movs	r2, r0
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e2e4      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cc6:	4b85      	ldr	r3, [pc, #532]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x110>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x13e>
 8004ce0:	e099      	b.n	8004e16 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2220      	movs	r2, #32
 8004cec:	4013      	ands	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004cf0:	4b7a      	ldr	r3, [pc, #488]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b79      	ldr	r3, [pc, #484]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004cf6:	2120      	movs	r1, #32
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2220      	movs	r2, #32
 8004d00:	4393      	bics	r3, r2
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d005      	beq.n	8004d16 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d13e      	bne.n	8004d8e <HAL_RCC_OscConfig+0x1ea>
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d13b      	bne.n	8004d8e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004d16:	4b71      	ldr	r3, [pc, #452]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_RCC_OscConfig+0x186>
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e2b2      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2a:	4b6c      	ldr	r3, [pc, #432]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4a6e      	ldr	r2, [pc, #440]	; (8004ee8 <HAL_RCC_OscConfig+0x344>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	021a      	lsls	r2, r3, #8
 8004d3a:	4b68      	ldr	r3, [pc, #416]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d40:	4b66      	ldr	r3, [pc, #408]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2209      	movs	r2, #9
 8004d46:	4393      	bics	r3, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	4b64      	ldr	r3, [pc, #400]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d52:	f000 fbeb 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8004d56:	0001      	movs	r1, r0
 8004d58:	4b60      	ldr	r3, [pc, #384]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	220f      	movs	r2, #15
 8004d60:	4013      	ands	r3, r2
 8004d62:	4a62      	ldr	r2, [pc, #392]	; (8004eec <HAL_RCC_OscConfig+0x348>)
 8004d64:	5cd3      	ldrb	r3, [r2, r3]
 8004d66:	000a      	movs	r2, r1
 8004d68:	40da      	lsrs	r2, r3
 8004d6a:	4b61      	ldr	r3, [pc, #388]	; (8004ef0 <HAL_RCC_OscConfig+0x34c>)
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004d6e:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <HAL_RCC_OscConfig+0x350>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2513      	movs	r5, #19
 8004d74:	197c      	adds	r4, r7, r5
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fe fa14 	bl	80031a4 <HAL_InitTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004d80:	197b      	adds	r3, r7, r5
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d046      	beq.n	8004e16 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004d88:	197b      	adds	r3, r7, r5
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	e280      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d027      	beq.n	8004de4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d94:	4b51      	ldr	r3, [pc, #324]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2209      	movs	r2, #9
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	4b4f      	ldr	r3, [pc, #316]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da2:	430a      	orrs	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fe fa43 	bl	8003230 <HAL_GetTick>
 8004daa:	0003      	movs	r3, r0
 8004dac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db0:	f7fe fa3e 	bl	8003230 <HAL_GetTick>
 8004db4:	0002      	movs	r2, r0
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e266      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc2:	4b46      	ldr	r3, [pc, #280]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d0f1      	beq.n	8004db0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a45      	ldr	r2, [pc, #276]	; (8004ee8 <HAL_RCC_OscConfig+0x344>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	4b3f      	ldr	r3, [pc, #252]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	e018      	b.n	8004e16 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de4:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004dea:	2101      	movs	r1, #1
 8004dec:	438a      	bics	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fe fa1e 	bl	8003230 <HAL_GetTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fe fa19 	bl	8003230 <HAL_GetTick>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e241      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e0c:	4b33      	ldr	r3, [pc, #204]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2204      	movs	r2, #4
 8004e12:	4013      	ands	r3, r2
 8004e14:	d1f1      	bne.n	8004dfa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2210      	movs	r2, #16
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <HAL_RCC_OscConfig+0x27e>
 8004e20:	e0a1      	b.n	8004f66 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d140      	bne.n	8004eaa <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e28:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4013      	ands	r3, r2
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_OscConfig+0x29c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e227      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e40:	4b26      	ldr	r3, [pc, #152]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <HAL_RCC_OscConfig+0x354>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1a      	ldr	r2, [r3, #32]
 8004e4e:	4b23      	ldr	r3, [pc, #140]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e54:	4b21      	ldr	r3, [pc, #132]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	0a19      	lsrs	r1, r3, #8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	061a      	lsls	r2, r3, #24
 8004e62:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	0b5b      	lsrs	r3, r3, #13
 8004e6e:	3301      	adds	r3, #1
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	0212      	lsls	r2, r2, #8
 8004e74:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	210f      	movs	r1, #15
 8004e7e:	400b      	ands	r3, r1
 8004e80:	491a      	ldr	r1, [pc, #104]	; (8004eec <HAL_RCC_OscConfig+0x348>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e86:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <HAL_RCC_OscConfig+0x34c>)
 8004e88:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <HAL_RCC_OscConfig+0x350>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2513      	movs	r5, #19
 8004e90:	197c      	adds	r4, r7, r5
 8004e92:	0018      	movs	r0, r3
 8004e94:	f7fe f986 	bl	80031a4 <HAL_InitTick>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004e9c:	197b      	adds	r3, r7, r5
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d060      	beq.n	8004f66 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004ea4:	197b      	adds	r3, r7, r5
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	e1f2      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03f      	beq.n	8004f32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCC_OscConfig+0x338>)
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0049      	lsls	r1, r1, #1
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fe f9b6 	bl	8003230 <HAL_GetTick>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ec8:	e018      	b.n	8004efc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eca:	f7fe f9b1 	bl	8003230 <HAL_GetTick>
 8004ece:	0002      	movs	r2, r0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d911      	bls.n	8004efc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e1d9      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	fffeffff 	.word	0xfffeffff
 8004ee4:	fffbffff 	.word	0xfffbffff
 8004ee8:	ffffe0ff 	.word	0xffffe0ff
 8004eec:	080076fc 	.word	0x080076fc
 8004ef0:	20000184 	.word	0x20000184
 8004ef4:	20000188 	.word	0x20000188
 8004ef8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004efc:	4bc9      	ldr	r3, [pc, #804]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d0e0      	beq.n	8004eca <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f08:	4bc6      	ldr	r3, [pc, #792]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4ac6      	ldr	r2, [pc, #792]	; (8005228 <HAL_RCC_OscConfig+0x684>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	0019      	movs	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	4bc3      	ldr	r3, [pc, #780]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f1c:	4bc1      	ldr	r3, [pc, #772]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	0a19      	lsrs	r1, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	061a      	lsls	r2, r3, #24
 8004f2a:	4bbe      	ldr	r3, [pc, #760]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	e019      	b.n	8004f66 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f32:	4bbc      	ldr	r3, [pc, #752]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4bbb      	ldr	r3, [pc, #748]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f38:	49bc      	ldr	r1, [pc, #752]	; (800522c <HAL_RCC_OscConfig+0x688>)
 8004f3a:	400a      	ands	r2, r1
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7fe f977 	bl	8003230 <HAL_GetTick>
 8004f42:	0003      	movs	r3, r0
 8004f44:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f48:	f7fe f972 	bl	8003230 <HAL_GetTick>
 8004f4c:	0002      	movs	r2, r0
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e19a      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f5a:	4bb2      	ldr	r3, [pc, #712]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4013      	ands	r3, r2
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d036      	beq.n	8004fde <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d019      	beq.n	8004fac <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f78:	4baa      	ldr	r3, [pc, #680]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f7c:	4ba9      	ldr	r3, [pc, #676]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004f7e:	2101      	movs	r1, #1
 8004f80:	430a      	orrs	r2, r1
 8004f82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f84:	f7fe f954 	bl	8003230 <HAL_GetTick>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8e:	f7fe f94f 	bl	8003230 <HAL_GetTick>
 8004f92:	0002      	movs	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e177      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fa0:	4ba0      	ldr	r3, [pc, #640]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d0f1      	beq.n	8004f8e <HAL_RCC_OscConfig+0x3ea>
 8004faa:	e018      	b.n	8004fde <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fac:	4b9d      	ldr	r3, [pc, #628]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004fae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fb0:	4b9c      	ldr	r3, [pc, #624]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb8:	f7fe f93a 	bl	8003230 <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc2:	f7fe f935 	bl	8003230 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e15d      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fd4:	4b93      	ldr	r3, [pc, #588]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d1f1      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d100      	bne.n	8004fea <HAL_RCC_OscConfig+0x446>
 8004fe8:	e0ae      	b.n	8005148 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fea:	2023      	movs	r0, #35	; 0x23
 8004fec:	183b      	adds	r3, r7, r0
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff2:	4b8c      	ldr	r3, [pc, #560]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8004ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	055b      	lsls	r3, r3, #21
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffe:	4b89      	ldr	r3, [pc, #548]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	4b88      	ldr	r3, [pc, #544]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005004:	2180      	movs	r1, #128	; 0x80
 8005006:	0549      	lsls	r1, r1, #21
 8005008:	430a      	orrs	r2, r1
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800500c:	183b      	adds	r3, r7, r0
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005012:	4b87      	ldr	r3, [pc, #540]	; (8005230 <HAL_RCC_OscConfig+0x68c>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4013      	ands	r3, r2
 800501c:	d11a      	bne.n	8005054 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800501e:	4b84      	ldr	r3, [pc, #528]	; (8005230 <HAL_RCC_OscConfig+0x68c>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b83      	ldr	r3, [pc, #524]	; (8005230 <HAL_RCC_OscConfig+0x68c>)
 8005024:	2180      	movs	r1, #128	; 0x80
 8005026:	0049      	lsls	r1, r1, #1
 8005028:	430a      	orrs	r2, r1
 800502a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502c:	f7fe f900 	bl	8003230 <HAL_GetTick>
 8005030:	0003      	movs	r3, r0
 8005032:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005036:	f7fe f8fb 	bl	8003230 <HAL_GetTick>
 800503a:	0002      	movs	r2, r0
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b64      	cmp	r3, #100	; 0x64
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e123      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	4b79      	ldr	r3, [pc, #484]	; (8005230 <HAL_RCC_OscConfig+0x68c>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	429a      	cmp	r2, r3
 800505e:	d107      	bne.n	8005070 <HAL_RCC_OscConfig+0x4cc>
 8005060:	4b70      	ldr	r3, [pc, #448]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005064:	4b6f      	ldr	r3, [pc, #444]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	0049      	lsls	r1, r1, #1
 800506a:	430a      	orrs	r2, r1
 800506c:	651a      	str	r2, [r3, #80]	; 0x50
 800506e:	e031      	b.n	80050d4 <HAL_RCC_OscConfig+0x530>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10c      	bne.n	8005092 <HAL_RCC_OscConfig+0x4ee>
 8005078:	4b6a      	ldr	r3, [pc, #424]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 800507a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507c:	4b69      	ldr	r3, [pc, #420]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 800507e:	496b      	ldr	r1, [pc, #428]	; (800522c <HAL_RCC_OscConfig+0x688>)
 8005080:	400a      	ands	r2, r1
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
 8005084:	4b67      	ldr	r3, [pc, #412]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005088:	4b66      	ldr	r3, [pc, #408]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 800508a:	496a      	ldr	r1, [pc, #424]	; (8005234 <HAL_RCC_OscConfig+0x690>)
 800508c:	400a      	ands	r2, r1
 800508e:	651a      	str	r2, [r3, #80]	; 0x50
 8005090:	e020      	b.n	80050d4 <HAL_RCC_OscConfig+0x530>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	23a0      	movs	r3, #160	; 0xa0
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	429a      	cmp	r2, r3
 800509c:	d10e      	bne.n	80050bc <HAL_RCC_OscConfig+0x518>
 800509e:	4b61      	ldr	r3, [pc, #388]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050a2:	4b60      	ldr	r3, [pc, #384]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050a4:	2180      	movs	r1, #128	; 0x80
 80050a6:	00c9      	lsls	r1, r1, #3
 80050a8:	430a      	orrs	r2, r1
 80050aa:	651a      	str	r2, [r3, #80]	; 0x50
 80050ac:	4b5d      	ldr	r3, [pc, #372]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050b0:	4b5c      	ldr	r3, [pc, #368]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050b2:	2180      	movs	r1, #128	; 0x80
 80050b4:	0049      	lsls	r1, r1, #1
 80050b6:	430a      	orrs	r2, r1
 80050b8:	651a      	str	r2, [r3, #80]	; 0x50
 80050ba:	e00b      	b.n	80050d4 <HAL_RCC_OscConfig+0x530>
 80050bc:	4b59      	ldr	r3, [pc, #356]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050c0:	4b58      	ldr	r3, [pc, #352]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050c2:	495a      	ldr	r1, [pc, #360]	; (800522c <HAL_RCC_OscConfig+0x688>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	651a      	str	r2, [r3, #80]	; 0x50
 80050c8:	4b56      	ldr	r3, [pc, #344]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050cc:	4b55      	ldr	r3, [pc, #340]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050ce:	4959      	ldr	r1, [pc, #356]	; (8005234 <HAL_RCC_OscConfig+0x690>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d015      	beq.n	8005108 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050dc:	f7fe f8a8 	bl	8003230 <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050e4:	e009      	b.n	80050fa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fe f8a3 	bl	8003230 <HAL_GetTick>
 80050ea:	0002      	movs	r2, r0
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <HAL_RCC_OscConfig+0x694>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0ca      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050fa:	4b4a      	ldr	r3, [pc, #296]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80050fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4013      	ands	r3, r2
 8005104:	d0ef      	beq.n	80050e6 <HAL_RCC_OscConfig+0x542>
 8005106:	e014      	b.n	8005132 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005108:	f7fe f892 	bl	8003230 <HAL_GetTick>
 800510c:	0003      	movs	r3, r0
 800510e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005110:	e009      	b.n	8005126 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005112:	f7fe f88d 	bl	8003230 <HAL_GetTick>
 8005116:	0002      	movs	r2, r0
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	4a46      	ldr	r2, [pc, #280]	; (8005238 <HAL_RCC_OscConfig+0x694>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e0b4      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005126:	4b3f      	ldr	r3, [pc, #252]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4013      	ands	r3, r2
 8005130:	d1ef      	bne.n	8005112 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005132:	2323      	movs	r3, #35	; 0x23
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d105      	bne.n	8005148 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513c:	4b39      	ldr	r3, [pc, #228]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 800513e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005140:	4b38      	ldr	r3, [pc, #224]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005142:	493e      	ldr	r1, [pc, #248]	; (800523c <HAL_RCC_OscConfig+0x698>)
 8005144:	400a      	ands	r2, r1
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	d100      	bne.n	8005152 <HAL_RCC_OscConfig+0x5ae>
 8005150:	e09d      	b.n	800528e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b0c      	cmp	r3, #12
 8005156:	d100      	bne.n	800515a <HAL_RCC_OscConfig+0x5b6>
 8005158:	e076      	b.n	8005248 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b02      	cmp	r3, #2
 8005160:	d145      	bne.n	80051ee <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005162:	4b30      	ldr	r3, [pc, #192]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005168:	4935      	ldr	r1, [pc, #212]	; (8005240 <HAL_RCC_OscConfig+0x69c>)
 800516a:	400a      	ands	r2, r1
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fe f85f 	bl	8003230 <HAL_GetTick>
 8005172:	0003      	movs	r3, r0
 8005174:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005178:	f7fe f85a 	bl	8003230 <HAL_GetTick>
 800517c:	0002      	movs	r2, r0
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e082      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	049b      	lsls	r3, r3, #18
 8005192:	4013      	ands	r3, r2
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005196:	4b23      	ldr	r3, [pc, #140]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <HAL_RCC_OscConfig+0x6a0>)
 800519c:	4013      	ands	r3, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	431a      	orrs	r2, r3
 80051b0:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80051b2:	430a      	orrs	r2, r1
 80051b4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80051bc:	2180      	movs	r1, #128	; 0x80
 80051be:	0449      	lsls	r1, r1, #17
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fe f834 	bl	8003230 <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ce:	f7fe f82f 	bl	8003230 <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e057      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	049b      	lsls	r3, r3, #18
 80051e8:	4013      	ands	r3, r2
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x62a>
 80051ec:	e04f      	b.n	800528e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 80051f4:	4912      	ldr	r1, [pc, #72]	; (8005240 <HAL_RCC_OscConfig+0x69c>)
 80051f6:	400a      	ands	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fe f819 	bl	8003230 <HAL_GetTick>
 80051fe:	0003      	movs	r3, r0
 8005200:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005204:	f7fe f814 	bl	8003230 <HAL_GetTick>
 8005208:	0002      	movs	r2, r0
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e03c      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_RCC_OscConfig+0x680>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	049b      	lsls	r3, r3, #18
 800521e:	4013      	ands	r3, r2
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x660>
 8005222:	e034      	b.n	800528e <HAL_RCC_OscConfig+0x6ea>
 8005224:	40021000 	.word	0x40021000
 8005228:	ffff1fff 	.word	0xffff1fff
 800522c:	fffffeff 	.word	0xfffffeff
 8005230:	40007000 	.word	0x40007000
 8005234:	fffffbff 	.word	0xfffffbff
 8005238:	00001388 	.word	0x00001388
 800523c:	efffffff 	.word	0xefffffff
 8005240:	feffffff 	.word	0xfeffffff
 8005244:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e01d      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_OscConfig+0x6f4>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	025b      	lsls	r3, r3, #9
 8005260:	401a      	ands	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	429a      	cmp	r2, r3
 8005268:	d10f      	bne.n	800528a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	23f0      	movs	r3, #240	; 0xf0
 800526e:	039b      	lsls	r3, r3, #14
 8005270:	401a      	ands	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d107      	bne.n	800528a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	23c0      	movs	r3, #192	; 0xc0
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	401a      	ands	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d001      	beq.n	800528e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b00a      	add	sp, #40	; 0x28
 8005296:	bdb0      	pop	{r4, r5, r7, pc}
 8005298:	40021000 	.word	0x40021000

0800529c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e128      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b96      	ldr	r3, [pc, #600]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d91e      	bls.n	80052fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b93      	ldr	r3, [pc, #588]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	4393      	bics	r3, r2
 80052c6:	0019      	movs	r1, r3
 80052c8:	4b90      	ldr	r3, [pc, #576]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052d0:	f7fd ffae 	bl	8003230 <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d8:	e009      	b.n	80052ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052da:	f7fd ffa9 	bl	8003230 <HAL_GetTick>
 80052de:	0002      	movs	r2, r0
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	4a8a      	ldr	r2, [pc, #552]	; (8005510 <HAL_RCC_ClockConfig+0x274>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e109      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b87      	ldr	r3, [pc, #540]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4013      	ands	r3, r2
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d1ee      	bne.n	80052da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2202      	movs	r2, #2
 8005302:	4013      	ands	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005306:	4b83      	ldr	r3, [pc, #524]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	22f0      	movs	r2, #240	; 0xf0
 800530c:	4393      	bics	r3, r2
 800530e:	0019      	movs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	4b7f      	ldr	r3, [pc, #508]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005316:	430a      	orrs	r2, r1
 8005318:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	4013      	ands	r3, r2
 8005322:	d100      	bne.n	8005326 <HAL_RCC_ClockConfig+0x8a>
 8005324:	e089      	b.n	800543a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800532e:	4b79      	ldr	r3, [pc, #484]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	4013      	ands	r3, r2
 8005338:	d120      	bne.n	800537c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e0e1      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005346:	4b73      	ldr	r3, [pc, #460]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	049b      	lsls	r3, r3, #18
 800534e:	4013      	ands	r3, r2
 8005350:	d114      	bne.n	800537c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0d5      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d106      	bne.n	800536c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800535e:	4b6d      	ldr	r3, [pc, #436]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2204      	movs	r2, #4
 8005364:	4013      	ands	r3, r2
 8005366:	d109      	bne.n	800537c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0ca      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800536c:	4b69      	ldr	r3, [pc, #420]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0c2      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537c:	4b65      	ldr	r3, [pc, #404]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	2203      	movs	r2, #3
 8005382:	4393      	bics	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	4b62      	ldr	r3, [pc, #392]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 800538c:	430a      	orrs	r2, r1
 800538e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005390:	f7fd ff4e 	bl	8003230 <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d111      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053a0:	e009      	b.n	80053b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a2:	f7fd ff45 	bl	8003230 <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	4a58      	ldr	r2, [pc, #352]	; (8005510 <HAL_RCC_ClockConfig+0x274>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0a5      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053b6:	4b57      	ldr	r3, [pc, #348]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	220c      	movs	r2, #12
 80053bc:	4013      	ands	r3, r2
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d1ef      	bne.n	80053a2 <HAL_RCC_ClockConfig+0x106>
 80053c2:	e03a      	b.n	800543a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d111      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053cc:	e009      	b.n	80053e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ce:	f7fd ff2f 	bl	8003230 <HAL_GetTick>
 80053d2:	0002      	movs	r2, r0
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	4a4d      	ldr	r2, [pc, #308]	; (8005510 <HAL_RCC_ClockConfig+0x274>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e08f      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	220c      	movs	r2, #12
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b0c      	cmp	r3, #12
 80053ec:	d1ef      	bne.n	80053ce <HAL_RCC_ClockConfig+0x132>
 80053ee:	e024      	b.n	800543a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d11b      	bne.n	8005430 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053f8:	e009      	b.n	800540e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fa:	f7fd ff19 	bl	8003230 <HAL_GetTick>
 80053fe:	0002      	movs	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	4a42      	ldr	r2, [pc, #264]	; (8005510 <HAL_RCC_ClockConfig+0x274>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e079      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800540e:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	220c      	movs	r2, #12
 8005414:	4013      	ands	r3, r2
 8005416:	2b04      	cmp	r3, #4
 8005418:	d1ef      	bne.n	80053fa <HAL_RCC_ClockConfig+0x15e>
 800541a:	e00e      	b.n	800543a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800541c:	f7fd ff08 	bl	8003230 <HAL_GetTick>
 8005420:	0002      	movs	r2, r0
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	4a3a      	ldr	r2, [pc, #232]	; (8005510 <HAL_RCC_ClockConfig+0x274>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e068      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005430:	4b38      	ldr	r3, [pc, #224]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	220c      	movs	r2, #12
 8005436:	4013      	ands	r3, r2
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543a:	4b34      	ldr	r3, [pc, #208]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	4013      	ands	r3, r2
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d21e      	bcs.n	8005486 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005448:	4b30      	ldr	r3, [pc, #192]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2201      	movs	r2, #1
 800544e:	4393      	bics	r3, r2
 8005450:	0019      	movs	r1, r3
 8005452:	4b2e      	ldr	r3, [pc, #184]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800545a:	f7fd fee9 	bl	8003230 <HAL_GetTick>
 800545e:	0003      	movs	r3, r0
 8005460:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	e009      	b.n	8005478 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005464:	f7fd fee4 	bl	8003230 <HAL_GetTick>
 8005468:	0002      	movs	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	4a28      	ldr	r2, [pc, #160]	; (8005510 <HAL_RCC_ClockConfig+0x274>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e044      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005478:	4b24      	ldr	r3, [pc, #144]	; (800550c <HAL_RCC_ClockConfig+0x270>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2201      	movs	r2, #1
 800547e:	4013      	ands	r3, r2
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d1ee      	bne.n	8005464 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2204      	movs	r2, #4
 800548c:	4013      	ands	r3, r2
 800548e:	d009      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005490:	4b20      	ldr	r3, [pc, #128]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4a20      	ldr	r2, [pc, #128]	; (8005518 <HAL_RCC_ClockConfig+0x27c>)
 8005496:	4013      	ands	r3, r2
 8005498:	0019      	movs	r1, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 80054a0:	430a      	orrs	r2, r1
 80054a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2208      	movs	r2, #8
 80054aa:	4013      	ands	r3, r2
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4a1a      	ldr	r2, [pc, #104]	; (800551c <HAL_RCC_ClockConfig+0x280>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	0019      	movs	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	00da      	lsls	r2, r3, #3
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 80054c0:	430a      	orrs	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054c4:	f000 f832 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80054c8:	0001      	movs	r1, r0
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_RCC_ClockConfig+0x278>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	220f      	movs	r2, #15
 80054d2:	4013      	ands	r3, r2
 80054d4:	4a12      	ldr	r2, [pc, #72]	; (8005520 <HAL_RCC_ClockConfig+0x284>)
 80054d6:	5cd3      	ldrb	r3, [r2, r3]
 80054d8:	000a      	movs	r2, r1
 80054da:	40da      	lsrs	r2, r3
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <HAL_RCC_ClockConfig+0x288>)
 80054de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_RCC_ClockConfig+0x28c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	250b      	movs	r5, #11
 80054e6:	197c      	adds	r4, r7, r5
 80054e8:	0018      	movs	r0, r3
 80054ea:	f7fd fe5b 	bl	80031a4 <HAL_InitTick>
 80054ee:	0003      	movs	r3, r0
 80054f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80054f2:	197b      	adds	r3, r7, r5
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80054fa:	197b      	adds	r3, r7, r5
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	e000      	b.n	8005502 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	0018      	movs	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	b004      	add	sp, #16
 8005508:	bdb0      	pop	{r4, r5, r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	40022000 	.word	0x40022000
 8005510:	00001388 	.word	0x00001388
 8005514:	40021000 	.word	0x40021000
 8005518:	fffff8ff 	.word	0xfffff8ff
 800551c:	ffffc7ff 	.word	0xffffc7ff
 8005520:	080076fc 	.word	0x080076fc
 8005524:	20000184 	.word	0x20000184
 8005528:	20000188 	.word	0x20000188

0800552c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800552c:	b5b0      	push	{r4, r5, r7, lr}
 800552e:	b08e      	sub	sp, #56	; 0x38
 8005530:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005532:	4b4c      	ldr	r3, [pc, #304]	; (8005664 <HAL_RCC_GetSysClockFreq+0x138>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553a:	230c      	movs	r3, #12
 800553c:	4013      	ands	r3, r2
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d014      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x40>
 8005542:	d900      	bls.n	8005546 <HAL_RCC_GetSysClockFreq+0x1a>
 8005544:	e07b      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x112>
 8005546:	2b04      	cmp	r3, #4
 8005548:	d002      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x24>
 800554a:	2b08      	cmp	r3, #8
 800554c:	d00b      	beq.n	8005566 <HAL_RCC_GetSysClockFreq+0x3a>
 800554e:	e076      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005550:	4b44      	ldr	r3, [pc, #272]	; (8005664 <HAL_RCC_GetSysClockFreq+0x138>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2210      	movs	r2, #16
 8005556:	4013      	ands	r3, r2
 8005558:	d002      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800555a:	4b43      	ldr	r3, [pc, #268]	; (8005668 <HAL_RCC_GetSysClockFreq+0x13c>)
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800555e:	e07c      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005560:	4b42      	ldr	r3, [pc, #264]	; (800566c <HAL_RCC_GetSysClockFreq+0x140>)
 8005562:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005564:	e079      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005566:	4b42      	ldr	r3, [pc, #264]	; (8005670 <HAL_RCC_GetSysClockFreq+0x144>)
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800556a:	e076      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	0c9a      	lsrs	r2, r3, #18
 8005570:	230f      	movs	r3, #15
 8005572:	401a      	ands	r2, r3
 8005574:	4b3f      	ldr	r3, [pc, #252]	; (8005674 <HAL_RCC_GetSysClockFreq+0x148>)
 8005576:	5c9b      	ldrb	r3, [r3, r2]
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	0d9a      	lsrs	r2, r3, #22
 800557e:	2303      	movs	r3, #3
 8005580:	4013      	ands	r3, r2
 8005582:	3301      	adds	r3, #1
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005586:	4b37      	ldr	r3, [pc, #220]	; (8005664 <HAL_RCC_GetSysClockFreq+0x138>)
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	025b      	lsls	r3, r3, #9
 800558e:	4013      	ands	r3, r2
 8005590:	d01a      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	4a35      	ldr	r2, [pc, #212]	; (8005670 <HAL_RCC_GetSysClockFreq+0x144>)
 800559c:	2300      	movs	r3, #0
 800559e:	69b8      	ldr	r0, [r7, #24]
 80055a0:	69f9      	ldr	r1, [r7, #28]
 80055a2:	f7fa ff93 	bl	80004cc <__aeabi_lmul>
 80055a6:	0002      	movs	r2, r0
 80055a8:	000b      	movs	r3, r1
 80055aa:	0010      	movs	r0, r2
 80055ac:	0019      	movs	r1, r3
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f7fa ff67 	bl	800048c <__aeabi_uldivmod>
 80055be:	0002      	movs	r2, r0
 80055c0:	000b      	movs	r3, r1
 80055c2:	0013      	movs	r3, r2
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
 80055c6:	e037      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80055c8:	4b26      	ldr	r3, [pc, #152]	; (8005664 <HAL_RCC_GetSysClockFreq+0x138>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2210      	movs	r2, #16
 80055ce:	4013      	ands	r3, r2
 80055d0:	d01a      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4a23      	ldr	r2, [pc, #140]	; (8005668 <HAL_RCC_GetSysClockFreq+0x13c>)
 80055dc:	2300      	movs	r3, #0
 80055de:	68b8      	ldr	r0, [r7, #8]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	f7fa ff73 	bl	80004cc <__aeabi_lmul>
 80055e6:	0002      	movs	r2, r0
 80055e8:	000b      	movs	r3, r1
 80055ea:	0010      	movs	r0, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f7fa ff47 	bl	800048c <__aeabi_uldivmod>
 80055fe:	0002      	movs	r2, r0
 8005600:	000b      	movs	r3, r1
 8005602:	0013      	movs	r3, r2
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
 8005606:	e017      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	0018      	movs	r0, r3
 800560c:	2300      	movs	r3, #0
 800560e:	0019      	movs	r1, r3
 8005610:	4a16      	ldr	r2, [pc, #88]	; (800566c <HAL_RCC_GetSysClockFreq+0x140>)
 8005612:	2300      	movs	r3, #0
 8005614:	f7fa ff5a 	bl	80004cc <__aeabi_lmul>
 8005618:	0002      	movs	r2, r0
 800561a:	000b      	movs	r3, r1
 800561c:	0010      	movs	r0, r2
 800561e:	0019      	movs	r1, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	001c      	movs	r4, r3
 8005624:	2300      	movs	r3, #0
 8005626:	001d      	movs	r5, r3
 8005628:	0022      	movs	r2, r4
 800562a:	002b      	movs	r3, r5
 800562c:	f7fa ff2e 	bl	800048c <__aeabi_uldivmod>
 8005630:	0002      	movs	r2, r0
 8005632:	000b      	movs	r3, r1
 8005634:	0013      	movs	r3, r2
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800563c:	e00d      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <HAL_RCC_GetSysClockFreq+0x138>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	0b5b      	lsrs	r3, r3, #13
 8005644:	2207      	movs	r2, #7
 8005646:	4013      	ands	r3, r2
 8005648:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	3301      	adds	r3, #1
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	0212      	lsls	r2, r2, #8
 8005652:	409a      	lsls	r2, r3
 8005654:	0013      	movs	r3, r2
 8005656:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005658:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800565c:	0018      	movs	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	b00e      	add	sp, #56	; 0x38
 8005662:	bdb0      	pop	{r4, r5, r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	003d0900 	.word	0x003d0900
 800566c:	00f42400 	.word	0x00f42400
 8005670:	017d7840 	.word	0x017d7840
 8005674:	08007714 	.word	0x08007714

08005678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800567c:	4b02      	ldr	r3, [pc, #8]	; (8005688 <HAL_RCC_GetHCLKFreq+0x10>)
 800567e:	681b      	ldr	r3, [r3, #0]
}
 8005680:	0018      	movs	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	20000184 	.word	0x20000184

0800568c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005690:	f7ff fff2 	bl	8005678 <HAL_RCC_GetHCLKFreq>
 8005694:	0001      	movs	r1, r0
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	2207      	movs	r2, #7
 800569e:	4013      	ands	r3, r2
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056a2:	5cd3      	ldrb	r3, [r2, r3]
 80056a4:	40d9      	lsrs	r1, r3
 80056a6:	000b      	movs	r3, r1
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	40021000 	.word	0x40021000
 80056b4:	0800770c 	.word	0x0800770c

080056b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056bc:	f7ff ffdc 	bl	8005678 <HAL_RCC_GetHCLKFreq>
 80056c0:	0001      	movs	r1, r0
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	0adb      	lsrs	r3, r3, #11
 80056c8:	2207      	movs	r2, #7
 80056ca:	4013      	ands	r3, r2
 80056cc:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ce:	5cd3      	ldrb	r3, [r2, r3]
 80056d0:	40d9      	lsrs	r1, r3
 80056d2:	000b      	movs	r3, r1
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	40021000 	.word	0x40021000
 80056e0:	0800770c 	.word	0x0800770c

080056e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80056ec:	2017      	movs	r0, #23
 80056ee:	183b      	adds	r3, r7, r0
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2220      	movs	r2, #32
 80056fa:	4013      	ands	r3, r2
 80056fc:	d100      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80056fe:	e0c2      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005700:	4b81      	ldr	r3, [pc, #516]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	055b      	lsls	r3, r3, #21
 8005708:	4013      	ands	r3, r2
 800570a:	d109      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800570c:	4b7e      	ldr	r3, [pc, #504]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	4b7d      	ldr	r3, [pc, #500]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	0549      	lsls	r1, r1, #21
 8005716:	430a      	orrs	r2, r1
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800571a:	183b      	adds	r3, r7, r0
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005720:	4b7a      	ldr	r3, [pc, #488]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	4013      	ands	r3, r2
 800572a:	d11a      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572c:	4b77      	ldr	r3, [pc, #476]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	0049      	lsls	r1, r1, #1
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fd fd79 	bl	8003230 <HAL_GetTick>
 800573e:	0003      	movs	r3, r0
 8005740:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	e008      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005744:	f7fd fd74 	bl	8003230 <HAL_GetTick>
 8005748:	0002      	movs	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e0d4      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005756:	4b6d      	ldr	r3, [pc, #436]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	4013      	ands	r3, r2
 8005760:	d0f0      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005762:	4b69      	ldr	r3, [pc, #420]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	23c0      	movs	r3, #192	; 0xc0
 8005768:	039b      	lsls	r3, r3, #14
 800576a:	4013      	ands	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	23c0      	movs	r3, #192	; 0xc0
 8005774:	039b      	lsls	r3, r3, #14
 8005776:	4013      	ands	r3, r2
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	429a      	cmp	r2, r3
 800577c:	d013      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	23c0      	movs	r3, #192	; 0xc0
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	401a      	ands	r2, r3
 8005788:	23c0      	movs	r3, #192	; 0xc0
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	429a      	cmp	r2, r3
 800578e:	d10a      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005790:	4b5d      	ldr	r3, [pc, #372]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	029b      	lsls	r3, r3, #10
 8005798:	401a      	ands	r2, r3
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	029b      	lsls	r3, r3, #10
 800579e:	429a      	cmp	r2, r3
 80057a0:	d101      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e0ac      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80057a6:	4b58      	ldr	r3, [pc, #352]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057aa:	23c0      	movs	r3, #192	; 0xc0
 80057ac:	029b      	lsls	r3, r3, #10
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	23c0      	movs	r3, #192	; 0xc0
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	4013      	ands	r3, r2
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d033      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2220      	movs	r2, #32
 80057ce:	4013      	ands	r3, r2
 80057d0:	d02e      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80057d2:	4b4d      	ldr	r3, [pc, #308]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	4a4e      	ldr	r2, [pc, #312]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057dc:	4b4a      	ldr	r3, [pc, #296]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057e0:	4b49      	ldr	r3, [pc, #292]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	0309      	lsls	r1, r1, #12
 80057e6:	430a      	orrs	r2, r1
 80057e8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ea:	4b47      	ldr	r3, [pc, #284]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ee:	4b46      	ldr	r3, [pc, #280]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057f0:	4948      	ldr	r1, [pc, #288]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057f2:	400a      	ands	r2, r1
 80057f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80057f6:	4b44      	ldr	r3, [pc, #272]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	2380      	movs	r3, #128	; 0x80
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4013      	ands	r3, r2
 8005804:	d014      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005806:	f7fd fd13 	bl	8003230 <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800580e:	e009      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fd fd0e 	bl	8003230 <HAL_GetTick>
 8005814:	0002      	movs	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	4a3f      	ldr	r2, [pc, #252]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e06d      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005824:	4b38      	ldr	r3, [pc, #224]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4013      	ands	r3, r2
 800582e:	d0ef      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	23c0      	movs	r3, #192	; 0xc0
 8005836:	029b      	lsls	r3, r3, #10
 8005838:	401a      	ands	r2, r3
 800583a:	23c0      	movs	r3, #192	; 0xc0
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	429a      	cmp	r2, r3
 8005840:	d10c      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005842:	4b31      	ldr	r3, [pc, #196]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a35      	ldr	r2, [pc, #212]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005848:	4013      	ands	r3, r2
 800584a:	0019      	movs	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	23c0      	movs	r3, #192	; 0xc0
 8005852:	039b      	lsls	r3, r3, #14
 8005854:	401a      	ands	r2, r3
 8005856:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005858:	430a      	orrs	r2, r1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800585e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	23c0      	movs	r3, #192	; 0xc0
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	401a      	ands	r2, r3
 800586a:	4b27      	ldr	r3, [pc, #156]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800586c:	430a      	orrs	r2, r1
 800586e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005870:	2317      	movs	r3, #23
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d105      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800587c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587e:	4b22      	ldr	r3, [pc, #136]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005880:	4927      	ldr	r1, [pc, #156]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005882:	400a      	ands	r2, r1
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2202      	movs	r2, #2
 800588c:	4013      	ands	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005894:	220c      	movs	r2, #12
 8005896:	4393      	bics	r3, r2
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058a0:	430a      	orrs	r2, r1
 80058a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2204      	movs	r2, #4
 80058aa:	4013      	ands	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ae:	4b16      	ldr	r3, [pc, #88]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	0019      	movs	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	4b12      	ldr	r3, [pc, #72]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058be:	430a      	orrs	r2, r1
 80058c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2208      	movs	r2, #8
 80058c8:	4013      	ands	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d0:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	0019      	movs	r1, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058dc:	430a      	orrs	r2, r1
 80058de:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	4013      	ands	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ee:	4a0f      	ldr	r2, [pc, #60]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	0019      	movs	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058fa:	430a      	orrs	r2, r1
 80058fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b006      	add	sp, #24
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40021000 	.word	0x40021000
 800590c:	40007000 	.word	0x40007000
 8005910:	fffcffff 	.word	0xfffcffff
 8005914:	fff7ffff 	.word	0xfff7ffff
 8005918:	00001388 	.word	0x00001388
 800591c:	ffcfffff 	.word	0xffcfffff
 8005920:	efffffff 	.word	0xefffffff
 8005924:	fffff3ff 	.word	0xfffff3ff
 8005928:	ffffcfff 	.word	0xffffcfff
 800592c:	fff3ffff 	.word	0xfff3ffff

08005930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e044      	b.n	80059cc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2274      	movs	r2, #116	; 0x74
 800594e:	2100      	movs	r1, #0
 8005950:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0018      	movs	r0, r3
 8005956:	f7fd faa3 	bl	8002ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2224      	movs	r2, #36	; 0x24
 800595e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2101      	movs	r1, #1
 800596c:	438a      	bics	r2, r1
 800596e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	0018      	movs	r0, r3
 8005974:	f000 f8d8 	bl	8005b28 <UART_SetConfig>
 8005978:	0003      	movs	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e024      	b.n	80059cc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	0018      	movs	r0, r3
 800598e:	f000 fb2d 	bl	8005fec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	490d      	ldr	r1, [pc, #52]	; (80059d4 <HAL_UART_Init+0xa4>)
 800599e:	400a      	ands	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	212a      	movs	r1, #42	; 0x2a
 80059ae:	438a      	bics	r2, r1
 80059b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2101      	movs	r1, #1
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 fbc5 	bl	8006154 <UART_CheckIdleState>
 80059ca:	0003      	movs	r3, r0
}
 80059cc:	0018      	movs	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	ffffb7ff 	.word	0xffffb7ff

080059d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	; 0x28
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	1dbb      	adds	r3, r7, #6
 80059e6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d000      	beq.n	80059f2 <HAL_UART_Transmit+0x1a>
 80059f0:	e095      	b.n	8005b1e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_UART_Transmit+0x28>
 80059f8:	1dbb      	adds	r3, r7, #6
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e08d      	b.n	8005b20 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	015b      	lsls	r3, r3, #5
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d109      	bne.n	8005a24 <HAL_UART_Transmit+0x4c>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d001      	beq.n	8005a24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e07d      	b.n	8005b20 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2274      	movs	r2, #116	; 0x74
 8005a28:	5c9b      	ldrb	r3, [r3, r2]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Transmit+0x5a>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e076      	b.n	8005b20 <HAL_UART_Transmit+0x148>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2274      	movs	r2, #116	; 0x74
 8005a36:	2101      	movs	r1, #1
 8005a38:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2280      	movs	r2, #128	; 0x80
 8005a3e:	2100      	movs	r1, #0
 8005a40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2221      	movs	r2, #33	; 0x21
 8005a46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a48:	f7fd fbf2 	bl	8003230 <HAL_GetTick>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1dba      	adds	r2, r7, #6
 8005a54:	2150      	movs	r1, #80	; 0x50
 8005a56:	8812      	ldrh	r2, [r2, #0]
 8005a58:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1dba      	adds	r2, r7, #6
 8005a5e:	2152      	movs	r1, #82	; 0x52
 8005a60:	8812      	ldrh	r2, [r2, #0]
 8005a62:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	015b      	lsls	r3, r3, #5
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d108      	bne.n	8005a82 <HAL_UART_Transmit+0xaa>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e003      	b.n	8005a8a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2274      	movs	r2, #116	; 0x74
 8005a8e:	2100      	movs	r1, #0
 8005a90:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005a92:	e02c      	b.n	8005aee <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	0013      	movs	r3, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	f000 fb9f 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 8005aa6:	1e03      	subs	r3, r0, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e038      	b.n	8005b20 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	001a      	movs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	05d2      	lsls	r2, r2, #23
 8005ac0:	0dd2      	lsrs	r2, r2, #23
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	3302      	adds	r3, #2
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e007      	b.n	8005adc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	781a      	ldrb	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2252      	movs	r2, #82	; 0x52
 8005ae0:	5a9b      	ldrh	r3, [r3, r2]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b299      	uxth	r1, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2252      	movs	r2, #82	; 0x52
 8005aec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2252      	movs	r2, #82	; 0x52
 8005af2:	5a9b      	ldrh	r3, [r3, r2]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1cc      	bne.n	8005a94 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	0013      	movs	r3, r2
 8005b04:	2200      	movs	r2, #0
 8005b06:	2140      	movs	r1, #64	; 0x40
 8005b08:	f000 fb6c 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 8005b0c:	1e03      	subs	r3, r0, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e005      	b.n	8005b20 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e000      	b.n	8005b20 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
  }
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b008      	add	sp, #32
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b5b0      	push	{r4, r5, r7, lr}
 8005b2a:	b08e      	sub	sp, #56	; 0x38
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b30:	231a      	movs	r3, #26
 8005b32:	2218      	movs	r2, #24
 8005b34:	4694      	mov	ip, r2
 8005b36:	44bc      	add	ip, r7
 8005b38:	4463      	add	r3, ip
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4abc      	ldr	r2, [pc, #752]	; (8005e50 <UART_SetConfig+0x328>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	0019      	movs	r1, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4ab8      	ldr	r2, [pc, #736]	; (8005e54 <UART_SetConfig+0x32c>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4ab2      	ldr	r2, [pc, #712]	; (8005e58 <UART_SetConfig+0x330>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4aad      	ldr	r2, [pc, #692]	; (8005e5c <UART_SetConfig+0x334>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	0019      	movs	r1, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4aa9      	ldr	r2, [pc, #676]	; (8005e60 <UART_SetConfig+0x338>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d136      	bne.n	8005c2c <UART_SetConfig+0x104>
 8005bbe:	4ba9      	ldr	r3, [pc, #676]	; (8005e64 <UART_SetConfig+0x33c>)
 8005bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc2:	220c      	movs	r2, #12
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d020      	beq.n	8005c0c <UART_SetConfig+0xe4>
 8005bca:	d827      	bhi.n	8005c1c <UART_SetConfig+0xf4>
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d00d      	beq.n	8005bec <UART_SetConfig+0xc4>
 8005bd0:	d824      	bhi.n	8005c1c <UART_SetConfig+0xf4>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <UART_SetConfig+0xb4>
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d010      	beq.n	8005bfc <UART_SetConfig+0xd4>
 8005bda:	e01f      	b.n	8005c1c <UART_SetConfig+0xf4>
 8005bdc:	231b      	movs	r3, #27
 8005bde:	2218      	movs	r2, #24
 8005be0:	4694      	mov	ip, r2
 8005be2:	44bc      	add	ip, r7
 8005be4:	4463      	add	r3, ip
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e06f      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005bec:	231b      	movs	r3, #27
 8005bee:	2218      	movs	r2, #24
 8005bf0:	4694      	mov	ip, r2
 8005bf2:	44bc      	add	ip, r7
 8005bf4:	4463      	add	r3, ip
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e067      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005bfc:	231b      	movs	r3, #27
 8005bfe:	2218      	movs	r2, #24
 8005c00:	4694      	mov	ip, r2
 8005c02:	44bc      	add	ip, r7
 8005c04:	4463      	add	r3, ip
 8005c06:	2204      	movs	r2, #4
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e05f      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005c0c:	231b      	movs	r3, #27
 8005c0e:	2218      	movs	r2, #24
 8005c10:	4694      	mov	ip, r2
 8005c12:	44bc      	add	ip, r7
 8005c14:	4463      	add	r3, ip
 8005c16:	2208      	movs	r2, #8
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e057      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005c1c:	231b      	movs	r3, #27
 8005c1e:	2218      	movs	r2, #24
 8005c20:	4694      	mov	ip, r2
 8005c22:	44bc      	add	ip, r7
 8005c24:	4463      	add	r3, ip
 8005c26:	2210      	movs	r2, #16
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e04f      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a89      	ldr	r2, [pc, #548]	; (8005e58 <UART_SetConfig+0x330>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d143      	bne.n	8005cbe <UART_SetConfig+0x196>
 8005c36:	4b8b      	ldr	r3, [pc, #556]	; (8005e64 <UART_SetConfig+0x33c>)
 8005c38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c3a:	23c0      	movs	r3, #192	; 0xc0
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	4013      	ands	r3, r2
 8005c40:	22c0      	movs	r2, #192	; 0xc0
 8005c42:	0112      	lsls	r2, r2, #4
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d02a      	beq.n	8005c9e <UART_SetConfig+0x176>
 8005c48:	22c0      	movs	r2, #192	; 0xc0
 8005c4a:	0112      	lsls	r2, r2, #4
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d82e      	bhi.n	8005cae <UART_SetConfig+0x186>
 8005c50:	2280      	movs	r2, #128	; 0x80
 8005c52:	0112      	lsls	r2, r2, #4
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d012      	beq.n	8005c7e <UART_SetConfig+0x156>
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	0112      	lsls	r2, r2, #4
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d826      	bhi.n	8005cae <UART_SetConfig+0x186>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <UART_SetConfig+0x146>
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	00d2      	lsls	r2, r2, #3
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d010      	beq.n	8005c8e <UART_SetConfig+0x166>
 8005c6c:	e01f      	b.n	8005cae <UART_SetConfig+0x186>
 8005c6e:	231b      	movs	r3, #27
 8005c70:	2218      	movs	r2, #24
 8005c72:	4694      	mov	ip, r2
 8005c74:	44bc      	add	ip, r7
 8005c76:	4463      	add	r3, ip
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	e026      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005c7e:	231b      	movs	r3, #27
 8005c80:	2218      	movs	r2, #24
 8005c82:	4694      	mov	ip, r2
 8005c84:	44bc      	add	ip, r7
 8005c86:	4463      	add	r3, ip
 8005c88:	2202      	movs	r2, #2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e01e      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005c8e:	231b      	movs	r3, #27
 8005c90:	2218      	movs	r2, #24
 8005c92:	4694      	mov	ip, r2
 8005c94:	44bc      	add	ip, r7
 8005c96:	4463      	add	r3, ip
 8005c98:	2204      	movs	r2, #4
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e016      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005c9e:	231b      	movs	r3, #27
 8005ca0:	2218      	movs	r2, #24
 8005ca2:	4694      	mov	ip, r2
 8005ca4:	44bc      	add	ip, r7
 8005ca6:	4463      	add	r3, ip
 8005ca8:	2208      	movs	r2, #8
 8005caa:	701a      	strb	r2, [r3, #0]
 8005cac:	e00e      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005cae:	231b      	movs	r3, #27
 8005cb0:	2218      	movs	r2, #24
 8005cb2:	4694      	mov	ip, r2
 8005cb4:	44bc      	add	ip, r7
 8005cb6:	4463      	add	r3, ip
 8005cb8:	2210      	movs	r2, #16
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e006      	b.n	8005ccc <UART_SetConfig+0x1a4>
 8005cbe:	231b      	movs	r3, #27
 8005cc0:	2218      	movs	r2, #24
 8005cc2:	4694      	mov	ip, r2
 8005cc4:	44bc      	add	ip, r7
 8005cc6:	4463      	add	r3, ip
 8005cc8:	2210      	movs	r2, #16
 8005cca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a61      	ldr	r2, [pc, #388]	; (8005e58 <UART_SetConfig+0x330>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d000      	beq.n	8005cd8 <UART_SetConfig+0x1b0>
 8005cd6:	e088      	b.n	8005dea <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cd8:	231b      	movs	r3, #27
 8005cda:	2218      	movs	r2, #24
 8005cdc:	4694      	mov	ip, r2
 8005cde:	44bc      	add	ip, r7
 8005ce0:	4463      	add	r3, ip
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d01d      	beq.n	8005d24 <UART_SetConfig+0x1fc>
 8005ce8:	dc20      	bgt.n	8005d2c <UART_SetConfig+0x204>
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d015      	beq.n	8005d1a <UART_SetConfig+0x1f2>
 8005cee:	dc1d      	bgt.n	8005d2c <UART_SetConfig+0x204>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <UART_SetConfig+0x1d2>
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d005      	beq.n	8005d04 <UART_SetConfig+0x1dc>
 8005cf8:	e018      	b.n	8005d2c <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfa:	f7ff fcc7 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d02:	e01d      	b.n	8005d40 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d04:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <UART_SetConfig+0x33c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2210      	movs	r2, #16
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d002      	beq.n	8005d14 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005d0e:	4b56      	ldr	r3, [pc, #344]	; (8005e68 <UART_SetConfig+0x340>)
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d12:	e015      	b.n	8005d40 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b55      	ldr	r3, [pc, #340]	; (8005e6c <UART_SetConfig+0x344>)
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d18:	e012      	b.n	8005d40 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7ff fc07 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8005d1e:	0003      	movs	r3, r0
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d22:	e00d      	b.n	8005d40 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d2a:	e009      	b.n	8005d40 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d30:	231a      	movs	r3, #26
 8005d32:	2218      	movs	r2, #24
 8005d34:	4694      	mov	ip, r2
 8005d36:	44bc      	add	ip, r7
 8005d38:	4463      	add	r3, ip
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
        break;
 8005d3e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d100      	bne.n	8005d48 <UART_SetConfig+0x220>
 8005d46:	e139      	b.n	8005fbc <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	0013      	movs	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	189b      	adds	r3, r3, r2
 8005d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d305      	bcc.n	8005d64 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d907      	bls.n	8005d74 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8005d64:	231a      	movs	r3, #26
 8005d66:	2218      	movs	r2, #24
 8005d68:	4694      	mov	ip, r2
 8005d6a:	44bc      	add	ip, r7
 8005d6c:	4463      	add	r3, ip
 8005d6e:	2201      	movs	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e123      	b.n	8005fbc <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	6939      	ldr	r1, [r7, #16]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	000b      	movs	r3, r1
 8005d82:	0e1b      	lsrs	r3, r3, #24
 8005d84:	0010      	movs	r0, r2
 8005d86:	0205      	lsls	r5, r0, #8
 8005d88:	431d      	orrs	r5, r3
 8005d8a:	000b      	movs	r3, r1
 8005d8c:	021c      	lsls	r4, r3, #8
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68b8      	ldr	r0, [r7, #8]
 8005d9c:	68f9      	ldr	r1, [r7, #12]
 8005d9e:	1900      	adds	r0, r0, r4
 8005da0:	4169      	adcs	r1, r5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	2300      	movs	r3, #0
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f7fa fb6c 	bl	800048c <__aeabi_uldivmod>
 8005db4:	0002      	movs	r2, r0
 8005db6:	000b      	movs	r3, r1
 8005db8:	0013      	movs	r3, r2
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dbe:	23c0      	movs	r3, #192	; 0xc0
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d309      	bcc.n	8005dda <UART_SetConfig+0x2b2>
 8005dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	035b      	lsls	r3, r3, #13
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d204      	bcs.n	8005dda <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	e0f0      	b.n	8005fbc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005dda:	231a      	movs	r3, #26
 8005ddc:	2218      	movs	r2, #24
 8005dde:	4694      	mov	ip, r2
 8005de0:	44bc      	add	ip, r7
 8005de2:	4463      	add	r3, ip
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e0e8      	b.n	8005fbc <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d000      	beq.n	8005df8 <UART_SetConfig+0x2d0>
 8005df6:	e087      	b.n	8005f08 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8005df8:	231b      	movs	r3, #27
 8005dfa:	2218      	movs	r2, #24
 8005dfc:	4694      	mov	ip, r2
 8005dfe:	44bc      	add	ip, r7
 8005e00:	4463      	add	r3, ip
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d835      	bhi.n	8005e74 <UART_SetConfig+0x34c>
 8005e08:	009a      	lsls	r2, r3, #2
 8005e0a:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <UART_SetConfig+0x348>)
 8005e0c:	18d3      	adds	r3, r2, r3
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7ff fc3b 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8005e16:	0003      	movs	r3, r0
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e1a:	e035      	b.n	8005e88 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e1c:	f7ff fc4c 	bl	80056b8 <HAL_RCC_GetPCLK2Freq>
 8005e20:	0003      	movs	r3, r0
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e24:	e030      	b.n	8005e88 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <UART_SetConfig+0x33c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d002      	beq.n	8005e36 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <UART_SetConfig+0x340>)
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e34:	e028      	b.n	8005e88 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <UART_SetConfig+0x344>)
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e3a:	e025      	b.n	8005e88 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3c:	f7ff fb76 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8005e40:	0003      	movs	r3, r0
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e44:	e020      	b.n	8005e88 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e4c:	e01c      	b.n	8005e88 <UART_SetConfig+0x360>
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	efff69f3 	.word	0xefff69f3
 8005e54:	ffffcfff 	.word	0xffffcfff
 8005e58:	40004800 	.word	0x40004800
 8005e5c:	fffff4ff 	.word	0xfffff4ff
 8005e60:	40004400 	.word	0x40004400
 8005e64:	40021000 	.word	0x40021000
 8005e68:	003d0900 	.word	0x003d0900
 8005e6c:	00f42400 	.word	0x00f42400
 8005e70:	08007720 	.word	0x08007720
      default:
        pclk = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e78:	231a      	movs	r3, #26
 8005e7a:	2218      	movs	r2, #24
 8005e7c:	4694      	mov	ip, r2
 8005e7e:	44bc      	add	ip, r7
 8005e80:	4463      	add	r3, ip
 8005e82:	2201      	movs	r2, #1
 8005e84:	701a      	strb	r2, [r3, #0]
        break;
 8005e86:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d100      	bne.n	8005e90 <UART_SetConfig+0x368>
 8005e8e:	e095      	b.n	8005fbc <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	005a      	lsls	r2, r3, #1
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	18d2      	adds	r2, r2, r3
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	0010      	movs	r0, r2
 8005ea4:	f7fa f942 	bl	800012c <__udivsi3>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	2b0f      	cmp	r3, #15
 8005eb2:	d921      	bls.n	8005ef8 <UART_SetConfig+0x3d0>
 8005eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	025b      	lsls	r3, r3, #9
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d21c      	bcs.n	8005ef8 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	200e      	movs	r0, #14
 8005ec4:	2418      	movs	r4, #24
 8005ec6:	193b      	adds	r3, r7, r4
 8005ec8:	181b      	adds	r3, r3, r0
 8005eca:	210f      	movs	r1, #15
 8005ecc:	438a      	bics	r2, r1
 8005ece:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2207      	movs	r2, #7
 8005ed8:	4013      	ands	r3, r2
 8005eda:	b299      	uxth	r1, r3
 8005edc:	193b      	adds	r3, r7, r4
 8005ede:	181b      	adds	r3, r3, r0
 8005ee0:	193a      	adds	r2, r7, r4
 8005ee2:	1812      	adds	r2, r2, r0
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	193a      	adds	r2, r7, r4
 8005ef0:	1812      	adds	r2, r2, r0
 8005ef2:	8812      	ldrh	r2, [r2, #0]
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	e061      	b.n	8005fbc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005ef8:	231a      	movs	r3, #26
 8005efa:	2218      	movs	r2, #24
 8005efc:	4694      	mov	ip, r2
 8005efe:	44bc      	add	ip, r7
 8005f00:	4463      	add	r3, ip
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e059      	b.n	8005fbc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f08:	231b      	movs	r3, #27
 8005f0a:	2218      	movs	r2, #24
 8005f0c:	4694      	mov	ip, r2
 8005f0e:	44bc      	add	ip, r7
 8005f10:	4463      	add	r3, ip
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d822      	bhi.n	8005f5e <UART_SetConfig+0x436>
 8005f18:	009a      	lsls	r2, r3, #2
 8005f1a:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <UART_SetConfig+0x4b4>)
 8005f1c:	18d3      	adds	r3, r2, r3
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f22:	f7ff fbb3 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8005f26:	0003      	movs	r3, r0
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f2a:	e022      	b.n	8005f72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f2c:	f7ff fbc4 	bl	80056b8 <HAL_RCC_GetPCLK2Freq>
 8005f30:	0003      	movs	r3, r0
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f34:	e01d      	b.n	8005f72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f36:	4b2a      	ldr	r3, [pc, #168]	; (8005fe0 <UART_SetConfig+0x4b8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2210      	movs	r2, #16
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d002      	beq.n	8005f46 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005f40:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <UART_SetConfig+0x4bc>)
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f44:	e015      	b.n	8005f72 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8005f46:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <UART_SetConfig+0x4c0>)
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f4a:	e012      	b.n	8005f72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4c:	f7ff faee 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8005f50:	0003      	movs	r3, r0
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f54:	e00d      	b.n	8005f72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f5c:	e009      	b.n	8005f72 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f62:	231a      	movs	r3, #26
 8005f64:	2218      	movs	r2, #24
 8005f66:	4694      	mov	ip, r2
 8005f68:	44bc      	add	ip, r7
 8005f6a:	4463      	add	r3, ip
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
        break;
 8005f70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d021      	beq.n	8005fbc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	085a      	lsrs	r2, r3, #1
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	18d2      	adds	r2, r2, r3
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	0019      	movs	r1, r3
 8005f88:	0010      	movs	r0, r2
 8005f8a:	f7fa f8cf 	bl	800012c <__udivsi3>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b0f      	cmp	r3, #15
 8005f98:	d909      	bls.n	8005fae <UART_SetConfig+0x486>
 8005f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	025b      	lsls	r3, r3, #9
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d204      	bcs.n	8005fae <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005faa:	60da      	str	r2, [r3, #12]
 8005fac:	e006      	b.n	8005fbc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005fae:	231a      	movs	r3, #26
 8005fb0:	2218      	movs	r2, #24
 8005fb2:	4694      	mov	ip, r2
 8005fb4:	44bc      	add	ip, r7
 8005fb6:	4463      	add	r3, ip
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fc8:	231a      	movs	r3, #26
 8005fca:	2218      	movs	r2, #24
 8005fcc:	4694      	mov	ip, r2
 8005fce:	44bc      	add	ip, r7
 8005fd0:	4463      	add	r3, ip
 8005fd2:	781b      	ldrb	r3, [r3, #0]
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b00e      	add	sp, #56	; 0x38
 8005fda:	bdb0      	pop	{r4, r5, r7, pc}
 8005fdc:	08007744 	.word	0x08007744
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	003d0900 	.word	0x003d0900
 8005fe8:	00f42400 	.word	0x00f42400

08005fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d00b      	beq.n	8006016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a4a      	ldr	r2, [pc, #296]	; (8006130 <UART_AdvFeatureConfig+0x144>)
 8006006:	4013      	ands	r3, r2
 8006008:	0019      	movs	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2202      	movs	r2, #2
 800601c:	4013      	ands	r3, r2
 800601e:	d00b      	beq.n	8006038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4a43      	ldr	r2, [pc, #268]	; (8006134 <UART_AdvFeatureConfig+0x148>)
 8006028:	4013      	ands	r3, r2
 800602a:	0019      	movs	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	2204      	movs	r2, #4
 800603e:	4013      	ands	r3, r2
 8006040:	d00b      	beq.n	800605a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4a3b      	ldr	r2, [pc, #236]	; (8006138 <UART_AdvFeatureConfig+0x14c>)
 800604a:	4013      	ands	r3, r2
 800604c:	0019      	movs	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2208      	movs	r2, #8
 8006060:	4013      	ands	r3, r2
 8006062:	d00b      	beq.n	800607c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4a34      	ldr	r2, [pc, #208]	; (800613c <UART_AdvFeatureConfig+0x150>)
 800606c:	4013      	ands	r3, r2
 800606e:	0019      	movs	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2210      	movs	r2, #16
 8006082:	4013      	ands	r3, r2
 8006084:	d00b      	beq.n	800609e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a2c      	ldr	r2, [pc, #176]	; (8006140 <UART_AdvFeatureConfig+0x154>)
 800608e:	4013      	ands	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2220      	movs	r2, #32
 80060a4:	4013      	ands	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	4a25      	ldr	r2, [pc, #148]	; (8006144 <UART_AdvFeatureConfig+0x158>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	0019      	movs	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	2240      	movs	r2, #64	; 0x40
 80060c6:	4013      	ands	r3, r2
 80060c8:	d01d      	beq.n	8006106 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <UART_AdvFeatureConfig+0x15c>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	0019      	movs	r1, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	035b      	lsls	r3, r3, #13
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d10b      	bne.n	8006106 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <UART_AdvFeatureConfig+0x160>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	0019      	movs	r1, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	2280      	movs	r2, #128	; 0x80
 800610c:	4013      	ands	r3, r2
 800610e:	d00b      	beq.n	8006128 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <UART_AdvFeatureConfig+0x164>)
 8006118:	4013      	ands	r3, r2
 800611a:	0019      	movs	r1, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
  }
}
 8006128:	46c0      	nop			; (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	b002      	add	sp, #8
 800612e:	bd80      	pop	{r7, pc}
 8006130:	fffdffff 	.word	0xfffdffff
 8006134:	fffeffff 	.word	0xfffeffff
 8006138:	fffbffff 	.word	0xfffbffff
 800613c:	ffff7fff 	.word	0xffff7fff
 8006140:	ffffefff 	.word	0xffffefff
 8006144:	ffffdfff 	.word	0xffffdfff
 8006148:	ffefffff 	.word	0xffefffff
 800614c:	ff9fffff 	.word	0xff9fffff
 8006150:	fff7ffff 	.word	0xfff7ffff

08006154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af02      	add	r7, sp, #8
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2280      	movs	r2, #128	; 0x80
 8006160:	2100      	movs	r1, #0
 8006162:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006164:	f7fd f864 	bl	8003230 <HAL_GetTick>
 8006168:	0003      	movs	r3, r0
 800616a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2208      	movs	r2, #8
 8006174:	4013      	ands	r3, r2
 8006176:	2b08      	cmp	r3, #8
 8006178:	d10c      	bne.n	8006194 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2280      	movs	r2, #128	; 0x80
 800617e:	0391      	lsls	r1, r2, #14
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4a17      	ldr	r2, [pc, #92]	; (80061e0 <UART_CheckIdleState+0x8c>)
 8006184:	9200      	str	r2, [sp, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	f000 f82c 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 800618c:	1e03      	subs	r3, r0, #0
 800618e:	d001      	beq.n	8006194 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e021      	b.n	80061d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2204      	movs	r2, #4
 800619c:	4013      	ands	r3, r2
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d10c      	bne.n	80061bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2280      	movs	r2, #128	; 0x80
 80061a6:	03d1      	lsls	r1, r2, #15
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <UART_CheckIdleState+0x8c>)
 80061ac:	9200      	str	r2, [sp, #0]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f000 f818 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 80061b4:	1e03      	subs	r3, r0, #0
 80061b6:	d001      	beq.n	80061bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e00d      	b.n	80061d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2274      	movs	r2, #116	; 0x74
 80061d2:	2100      	movs	r1, #0
 80061d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	0018      	movs	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	b004      	add	sp, #16
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	01ffffff 	.word	0x01ffffff

080061e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b094      	sub	sp, #80	; 0x50
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	1dfb      	adds	r3, r7, #7
 80061f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f4:	e0a3      	b.n	800633e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061f8:	3301      	adds	r3, #1
 80061fa:	d100      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80061fc:	e09f      	b.n	800633e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fd f817 	bl	8003230 <HAL_GetTick>
 8006202:	0002      	movs	r2, r0
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <UART_WaitOnFlagUntilTimeout+0x30>
 800620e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006210:	2b00      	cmp	r3, #0
 8006212:	d13d      	bne.n	8006290 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006214:	f3ef 8310 	mrs	r3, PRIMASK
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800621c:	647b      	str	r3, [r7, #68]	; 0x44
 800621e:	2301      	movs	r3, #1
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	f383 8810 	msr	PRIMASK, r3
}
 8006228:	46c0      	nop			; (mov r8, r8)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	494c      	ldr	r1, [pc, #304]	; (8006368 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006236:	400a      	ands	r2, r1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006246:	f3ef 8310 	mrs	r3, PRIMASK
 800624a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	643b      	str	r3, [r7, #64]	; 0x40
 8006250:	2301      	movs	r3, #1
 8006252:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2101      	movs	r1, #1
 8006268:	438a      	bics	r2, r1
 800626a:	609a      	str	r2, [r3, #8]
 800626c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006272:	f383 8810 	msr	PRIMASK, r3
}
 8006276:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2274      	movs	r2, #116	; 0x74
 8006288:	2100      	movs	r1, #0
 800628a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e067      	b.n	8006360 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2204      	movs	r2, #4
 8006298:	4013      	ands	r3, r2
 800629a:	d050      	beq.n	800633e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69da      	ldr	r2, [r3, #28]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	401a      	ands	r2, r3
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d146      	bne.n	800633e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2280      	movs	r2, #128	; 0x80
 80062b6:	0112      	lsls	r2, r2, #4
 80062b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ba:	f3ef 8310 	mrs	r3, PRIMASK
 80062be:	613b      	str	r3, [r7, #16]
  return(result);
 80062c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f383 8810 	msr	PRIMASK, r3
}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4923      	ldr	r1, [pc, #140]	; (8006368 <UART_WaitOnFlagUntilTimeout+0x184>)
 80062dc:	400a      	ands	r2, r1
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f383 8810 	msr	PRIMASK, r3
}
 80062ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ec:	f3ef 8310 	mrs	r3, PRIMASK
 80062f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80062f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062f6:	2301      	movs	r3, #1
 80062f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f383 8810 	msr	PRIMASK, r3
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2101      	movs	r1, #1
 800630e:	438a      	bics	r2, r1
 8006310:	609a      	str	r2, [r3, #8]
 8006312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	2120      	movs	r1, #32
 8006330:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2274      	movs	r2, #116	; 0x74
 8006336:	2100      	movs	r1, #0
 8006338:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e010      	b.n	8006360 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	425a      	negs	r2, r3
 800634e:	4153      	adcs	r3, r2
 8006350:	b2db      	uxtb	r3, r3
 8006352:	001a      	movs	r2, r3
 8006354:	1dfb      	adds	r3, r7, #7
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d100      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0x17a>
 800635c:	e74b      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	0018      	movs	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	b014      	add	sp, #80	; 0x50
 8006366:	bd80      	pop	{r7, pc}
 8006368:	fffffe5f 	.word	0xfffffe5f

0800636c <__errno>:
 800636c:	4b01      	ldr	r3, [pc, #4]	; (8006374 <__errno+0x8>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	4770      	bx	lr
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	20000190 	.word	0x20000190

08006378 <__libc_init_array>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	2600      	movs	r6, #0
 800637c:	4d0c      	ldr	r5, [pc, #48]	; (80063b0 <__libc_init_array+0x38>)
 800637e:	4c0d      	ldr	r4, [pc, #52]	; (80063b4 <__libc_init_array+0x3c>)
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	42a6      	cmp	r6, r4
 8006386:	d109      	bne.n	800639c <__libc_init_array+0x24>
 8006388:	2600      	movs	r6, #0
 800638a:	f001 f8a1 	bl	80074d0 <_init>
 800638e:	4d0a      	ldr	r5, [pc, #40]	; (80063b8 <__libc_init_array+0x40>)
 8006390:	4c0a      	ldr	r4, [pc, #40]	; (80063bc <__libc_init_array+0x44>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	42a6      	cmp	r6, r4
 8006398:	d105      	bne.n	80063a6 <__libc_init_array+0x2e>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	00b3      	lsls	r3, r6, #2
 800639e:	58eb      	ldr	r3, [r5, r3]
 80063a0:	4798      	blx	r3
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7ee      	b.n	8006384 <__libc_init_array+0xc>
 80063a6:	00b3      	lsls	r3, r6, #2
 80063a8:	58eb      	ldr	r3, [r5, r3]
 80063aa:	4798      	blx	r3
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7f2      	b.n	8006396 <__libc_init_array+0x1e>
 80063b0:	08007808 	.word	0x08007808
 80063b4:	08007808 	.word	0x08007808
 80063b8:	08007808 	.word	0x08007808
 80063bc:	0800780c 	.word	0x0800780c

080063c0 <memcpy>:
 80063c0:	2300      	movs	r3, #0
 80063c2:	b510      	push	{r4, lr}
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d100      	bne.n	80063ca <memcpy+0xa>
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	5ccc      	ldrb	r4, [r1, r3]
 80063cc:	54c4      	strb	r4, [r0, r3]
 80063ce:	3301      	adds	r3, #1
 80063d0:	e7f8      	b.n	80063c4 <memcpy+0x4>

080063d2 <memset>:
 80063d2:	0003      	movs	r3, r0
 80063d4:	1882      	adds	r2, r0, r2
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d100      	bne.n	80063dc <memset+0xa>
 80063da:	4770      	bx	lr
 80063dc:	7019      	strb	r1, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	e7f9      	b.n	80063d6 <memset+0x4>
	...

080063e4 <_puts_r>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	0005      	movs	r5, r0
 80063e8:	000e      	movs	r6, r1
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d004      	beq.n	80063f8 <_puts_r+0x14>
 80063ee:	6983      	ldr	r3, [r0, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <_puts_r+0x14>
 80063f4:	f000 faa4 	bl	8006940 <__sinit>
 80063f8:	69ab      	ldr	r3, [r5, #24]
 80063fa:	68ac      	ldr	r4, [r5, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <_puts_r+0x22>
 8006400:	0028      	movs	r0, r5
 8006402:	f000 fa9d 	bl	8006940 <__sinit>
 8006406:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <_puts_r+0xd8>)
 8006408:	429c      	cmp	r4, r3
 800640a:	d122      	bne.n	8006452 <_puts_r+0x6e>
 800640c:	686c      	ldr	r4, [r5, #4]
 800640e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006410:	07db      	lsls	r3, r3, #31
 8006412:	d405      	bmi.n	8006420 <_puts_r+0x3c>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	059b      	lsls	r3, r3, #22
 8006418:	d402      	bmi.n	8006420 <_puts_r+0x3c>
 800641a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800641c:	f000 fb31 	bl	8006a82 <__retarget_lock_acquire_recursive>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	071b      	lsls	r3, r3, #28
 8006424:	d502      	bpl.n	800642c <_puts_r+0x48>
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d129      	bne.n	8006480 <_puts_r+0x9c>
 800642c:	0021      	movs	r1, r4
 800642e:	0028      	movs	r0, r5
 8006430:	f000 f8e0 	bl	80065f4 <__swsetup_r>
 8006434:	2800      	cmp	r0, #0
 8006436:	d023      	beq.n	8006480 <_puts_r+0x9c>
 8006438:	2501      	movs	r5, #1
 800643a:	426d      	negs	r5, r5
 800643c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643e:	07db      	lsls	r3, r3, #31
 8006440:	d405      	bmi.n	800644e <_puts_r+0x6a>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	059b      	lsls	r3, r3, #22
 8006446:	d402      	bmi.n	800644e <_puts_r+0x6a>
 8006448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644a:	f000 fb1b 	bl	8006a84 <__retarget_lock_release_recursive>
 800644e:	0028      	movs	r0, r5
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <_puts_r+0xdc>)
 8006454:	429c      	cmp	r4, r3
 8006456:	d101      	bne.n	800645c <_puts_r+0x78>
 8006458:	68ac      	ldr	r4, [r5, #8]
 800645a:	e7d8      	b.n	800640e <_puts_r+0x2a>
 800645c:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <_puts_r+0xe0>)
 800645e:	429c      	cmp	r4, r3
 8006460:	d1d5      	bne.n	800640e <_puts_r+0x2a>
 8006462:	68ec      	ldr	r4, [r5, #12]
 8006464:	e7d3      	b.n	800640e <_puts_r+0x2a>
 8006466:	3601      	adds	r6, #1
 8006468:	60a3      	str	r3, [r4, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	da04      	bge.n	8006478 <_puts_r+0x94>
 800646e:	69a2      	ldr	r2, [r4, #24]
 8006470:	429a      	cmp	r2, r3
 8006472:	dc16      	bgt.n	80064a2 <_puts_r+0xbe>
 8006474:	290a      	cmp	r1, #10
 8006476:	d014      	beq.n	80064a2 <_puts_r+0xbe>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	6022      	str	r2, [r4, #0]
 800647e:	7019      	strb	r1, [r3, #0]
 8006480:	68a3      	ldr	r3, [r4, #8]
 8006482:	7831      	ldrb	r1, [r6, #0]
 8006484:	3b01      	subs	r3, #1
 8006486:	2900      	cmp	r1, #0
 8006488:	d1ed      	bne.n	8006466 <_puts_r+0x82>
 800648a:	60a3      	str	r3, [r4, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	da0f      	bge.n	80064b0 <_puts_r+0xcc>
 8006490:	0028      	movs	r0, r5
 8006492:	0022      	movs	r2, r4
 8006494:	310a      	adds	r1, #10
 8006496:	f000 f857 	bl	8006548 <__swbuf_r>
 800649a:	250a      	movs	r5, #10
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d1cd      	bne.n	800643c <_puts_r+0x58>
 80064a0:	e7ca      	b.n	8006438 <_puts_r+0x54>
 80064a2:	0022      	movs	r2, r4
 80064a4:	0028      	movs	r0, r5
 80064a6:	f000 f84f 	bl	8006548 <__swbuf_r>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d1e8      	bne.n	8006480 <_puts_r+0x9c>
 80064ae:	e7c3      	b.n	8006438 <_puts_r+0x54>
 80064b0:	250a      	movs	r5, #10
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	6022      	str	r2, [r4, #0]
 80064b8:	701d      	strb	r5, [r3, #0]
 80064ba:	e7bf      	b.n	800643c <_puts_r+0x58>
 80064bc:	0800778c 	.word	0x0800778c
 80064c0:	080077ac 	.word	0x080077ac
 80064c4:	0800776c 	.word	0x0800776c

080064c8 <puts>:
 80064c8:	b510      	push	{r4, lr}
 80064ca:	4b03      	ldr	r3, [pc, #12]	; (80064d8 <puts+0x10>)
 80064cc:	0001      	movs	r1, r0
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	f7ff ff88 	bl	80063e4 <_puts_r>
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	20000190 	.word	0x20000190

080064dc <siprintf>:
 80064dc:	b40e      	push	{r1, r2, r3}
 80064de:	b500      	push	{lr}
 80064e0:	490b      	ldr	r1, [pc, #44]	; (8006510 <siprintf+0x34>)
 80064e2:	b09c      	sub	sp, #112	; 0x70
 80064e4:	ab1d      	add	r3, sp, #116	; 0x74
 80064e6:	9002      	str	r0, [sp, #8]
 80064e8:	9006      	str	r0, [sp, #24]
 80064ea:	9107      	str	r1, [sp, #28]
 80064ec:	9104      	str	r1, [sp, #16]
 80064ee:	4809      	ldr	r0, [pc, #36]	; (8006514 <siprintf+0x38>)
 80064f0:	4909      	ldr	r1, [pc, #36]	; (8006518 <siprintf+0x3c>)
 80064f2:	cb04      	ldmia	r3!, {r2}
 80064f4:	9105      	str	r1, [sp, #20]
 80064f6:	6800      	ldr	r0, [r0, #0]
 80064f8:	a902      	add	r1, sp, #8
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	f000 fc3a 	bl	8006d74 <_svfiprintf_r>
 8006500:	2300      	movs	r3, #0
 8006502:	9a02      	ldr	r2, [sp, #8]
 8006504:	7013      	strb	r3, [r2, #0]
 8006506:	b01c      	add	sp, #112	; 0x70
 8006508:	bc08      	pop	{r3}
 800650a:	b003      	add	sp, #12
 800650c:	4718      	bx	r3
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	7fffffff 	.word	0x7fffffff
 8006514:	20000190 	.word	0x20000190
 8006518:	ffff0208 	.word	0xffff0208

0800651c <strncat>:
 800651c:	0003      	movs	r3, r0
 800651e:	b530      	push	{r4, r5, lr}
 8006520:	781c      	ldrb	r4, [r3, #0]
 8006522:	2c00      	cmp	r4, #0
 8006524:	d108      	bne.n	8006538 <strncat+0x1c>
 8006526:	1889      	adds	r1, r1, r2
 8006528:	2a00      	cmp	r2, #0
 800652a:	d004      	beq.n	8006536 <strncat+0x1a>
 800652c:	4255      	negs	r5, r2
 800652e:	5d4d      	ldrb	r5, [r1, r5]
 8006530:	701d      	strb	r5, [r3, #0]
 8006532:	2d00      	cmp	r5, #0
 8006534:	d102      	bne.n	800653c <strncat+0x20>
 8006536:	bd30      	pop	{r4, r5, pc}
 8006538:	3301      	adds	r3, #1
 800653a:	e7f1      	b.n	8006520 <strncat+0x4>
 800653c:	2a01      	cmp	r2, #1
 800653e:	d100      	bne.n	8006542 <strncat+0x26>
 8006540:	705c      	strb	r4, [r3, #1]
 8006542:	3301      	adds	r3, #1
 8006544:	3a01      	subs	r2, #1
 8006546:	e7ef      	b.n	8006528 <strncat+0xc>

08006548 <__swbuf_r>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	0005      	movs	r5, r0
 800654c:	000e      	movs	r6, r1
 800654e:	0014      	movs	r4, r2
 8006550:	2800      	cmp	r0, #0
 8006552:	d004      	beq.n	800655e <__swbuf_r+0x16>
 8006554:	6983      	ldr	r3, [r0, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <__swbuf_r+0x16>
 800655a:	f000 f9f1 	bl	8006940 <__sinit>
 800655e:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <__swbuf_r+0xa0>)
 8006560:	429c      	cmp	r4, r3
 8006562:	d12e      	bne.n	80065c2 <__swbuf_r+0x7a>
 8006564:	686c      	ldr	r4, [r5, #4]
 8006566:	69a3      	ldr	r3, [r4, #24]
 8006568:	60a3      	str	r3, [r4, #8]
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	071b      	lsls	r3, r3, #28
 800656e:	d532      	bpl.n	80065d6 <__swbuf_r+0x8e>
 8006570:	6923      	ldr	r3, [r4, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d02f      	beq.n	80065d6 <__swbuf_r+0x8e>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	b2f7      	uxtb	r7, r6
 800657c:	1a98      	subs	r0, r3, r2
 800657e:	6963      	ldr	r3, [r4, #20]
 8006580:	b2f6      	uxtb	r6, r6
 8006582:	4283      	cmp	r3, r0
 8006584:	dc05      	bgt.n	8006592 <__swbuf_r+0x4a>
 8006586:	0021      	movs	r1, r4
 8006588:	0028      	movs	r0, r5
 800658a:	f000 f937 	bl	80067fc <_fflush_r>
 800658e:	2800      	cmp	r0, #0
 8006590:	d127      	bne.n	80065e2 <__swbuf_r+0x9a>
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	3001      	adds	r0, #1
 8006596:	3b01      	subs	r3, #1
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	701f      	strb	r7, [r3, #0]
 80065a2:	6963      	ldr	r3, [r4, #20]
 80065a4:	4283      	cmp	r3, r0
 80065a6:	d004      	beq.n	80065b2 <__swbuf_r+0x6a>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	07db      	lsls	r3, r3, #31
 80065ac:	d507      	bpl.n	80065be <__swbuf_r+0x76>
 80065ae:	2e0a      	cmp	r6, #10
 80065b0:	d105      	bne.n	80065be <__swbuf_r+0x76>
 80065b2:	0021      	movs	r1, r4
 80065b4:	0028      	movs	r0, r5
 80065b6:	f000 f921 	bl	80067fc <_fflush_r>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d111      	bne.n	80065e2 <__swbuf_r+0x9a>
 80065be:	0030      	movs	r0, r6
 80065c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <__swbuf_r+0xa4>)
 80065c4:	429c      	cmp	r4, r3
 80065c6:	d101      	bne.n	80065cc <__swbuf_r+0x84>
 80065c8:	68ac      	ldr	r4, [r5, #8]
 80065ca:	e7cc      	b.n	8006566 <__swbuf_r+0x1e>
 80065cc:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <__swbuf_r+0xa8>)
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d1c9      	bne.n	8006566 <__swbuf_r+0x1e>
 80065d2:	68ec      	ldr	r4, [r5, #12]
 80065d4:	e7c7      	b.n	8006566 <__swbuf_r+0x1e>
 80065d6:	0021      	movs	r1, r4
 80065d8:	0028      	movs	r0, r5
 80065da:	f000 f80b 	bl	80065f4 <__swsetup_r>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d0c9      	beq.n	8006576 <__swbuf_r+0x2e>
 80065e2:	2601      	movs	r6, #1
 80065e4:	4276      	negs	r6, r6
 80065e6:	e7ea      	b.n	80065be <__swbuf_r+0x76>
 80065e8:	0800778c 	.word	0x0800778c
 80065ec:	080077ac 	.word	0x080077ac
 80065f0:	0800776c 	.word	0x0800776c

080065f4 <__swsetup_r>:
 80065f4:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <__swsetup_r+0xe0>)
 80065f6:	b570      	push	{r4, r5, r6, lr}
 80065f8:	681d      	ldr	r5, [r3, #0]
 80065fa:	0006      	movs	r6, r0
 80065fc:	000c      	movs	r4, r1
 80065fe:	2d00      	cmp	r5, #0
 8006600:	d005      	beq.n	800660e <__swsetup_r+0x1a>
 8006602:	69ab      	ldr	r3, [r5, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <__swsetup_r+0x1a>
 8006608:	0028      	movs	r0, r5
 800660a:	f000 f999 	bl	8006940 <__sinit>
 800660e:	4b32      	ldr	r3, [pc, #200]	; (80066d8 <__swsetup_r+0xe4>)
 8006610:	429c      	cmp	r4, r3
 8006612:	d10f      	bne.n	8006634 <__swsetup_r+0x40>
 8006614:	686c      	ldr	r4, [r5, #4]
 8006616:	230c      	movs	r3, #12
 8006618:	5ee2      	ldrsh	r2, [r4, r3]
 800661a:	b293      	uxth	r3, r2
 800661c:	0711      	lsls	r1, r2, #28
 800661e:	d42d      	bmi.n	800667c <__swsetup_r+0x88>
 8006620:	06d9      	lsls	r1, r3, #27
 8006622:	d411      	bmi.n	8006648 <__swsetup_r+0x54>
 8006624:	2309      	movs	r3, #9
 8006626:	2001      	movs	r0, #1
 8006628:	6033      	str	r3, [r6, #0]
 800662a:	3337      	adds	r3, #55	; 0x37
 800662c:	4313      	orrs	r3, r2
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	4240      	negs	r0, r0
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	4b29      	ldr	r3, [pc, #164]	; (80066dc <__swsetup_r+0xe8>)
 8006636:	429c      	cmp	r4, r3
 8006638:	d101      	bne.n	800663e <__swsetup_r+0x4a>
 800663a:	68ac      	ldr	r4, [r5, #8]
 800663c:	e7eb      	b.n	8006616 <__swsetup_r+0x22>
 800663e:	4b28      	ldr	r3, [pc, #160]	; (80066e0 <__swsetup_r+0xec>)
 8006640:	429c      	cmp	r4, r3
 8006642:	d1e8      	bne.n	8006616 <__swsetup_r+0x22>
 8006644:	68ec      	ldr	r4, [r5, #12]
 8006646:	e7e6      	b.n	8006616 <__swsetup_r+0x22>
 8006648:	075b      	lsls	r3, r3, #29
 800664a:	d513      	bpl.n	8006674 <__swsetup_r+0x80>
 800664c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800664e:	2900      	cmp	r1, #0
 8006650:	d008      	beq.n	8006664 <__swsetup_r+0x70>
 8006652:	0023      	movs	r3, r4
 8006654:	3344      	adds	r3, #68	; 0x44
 8006656:	4299      	cmp	r1, r3
 8006658:	d002      	beq.n	8006660 <__swsetup_r+0x6c>
 800665a:	0030      	movs	r0, r6
 800665c:	f000 fa80 	bl	8006b60 <_free_r>
 8006660:	2300      	movs	r3, #0
 8006662:	6363      	str	r3, [r4, #52]	; 0x34
 8006664:	2224      	movs	r2, #36	; 0x24
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	4393      	bics	r3, r2
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	2300      	movs	r3, #0
 800666e:	6063      	str	r3, [r4, #4]
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	2308      	movs	r3, #8
 8006676:	89a2      	ldrh	r2, [r4, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <__swsetup_r+0xa6>
 8006682:	21a0      	movs	r1, #160	; 0xa0
 8006684:	2280      	movs	r2, #128	; 0x80
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	0089      	lsls	r1, r1, #2
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	400b      	ands	r3, r1
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <__swsetup_r+0xa6>
 8006692:	0021      	movs	r1, r4
 8006694:	0030      	movs	r0, r6
 8006696:	f000 fa1f 	bl	8006ad8 <__smakebuf_r>
 800669a:	220c      	movs	r2, #12
 800669c:	5ea3      	ldrsh	r3, [r4, r2]
 800669e:	2001      	movs	r0, #1
 80066a0:	001a      	movs	r2, r3
 80066a2:	b299      	uxth	r1, r3
 80066a4:	4002      	ands	r2, r0
 80066a6:	4203      	tst	r3, r0
 80066a8:	d00f      	beq.n	80066ca <__swsetup_r+0xd6>
 80066aa:	2200      	movs	r2, #0
 80066ac:	60a2      	str	r2, [r4, #8]
 80066ae:	6962      	ldr	r2, [r4, #20]
 80066b0:	4252      	negs	r2, r2
 80066b2:	61a2      	str	r2, [r4, #24]
 80066b4:	2000      	movs	r0, #0
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	4282      	cmp	r2, r0
 80066ba:	d1ba      	bne.n	8006632 <__swsetup_r+0x3e>
 80066bc:	060a      	lsls	r2, r1, #24
 80066be:	d5b8      	bpl.n	8006632 <__swsetup_r+0x3e>
 80066c0:	2240      	movs	r2, #64	; 0x40
 80066c2:	4313      	orrs	r3, r2
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	3801      	subs	r0, #1
 80066c8:	e7b3      	b.n	8006632 <__swsetup_r+0x3e>
 80066ca:	0788      	lsls	r0, r1, #30
 80066cc:	d400      	bmi.n	80066d0 <__swsetup_r+0xdc>
 80066ce:	6962      	ldr	r2, [r4, #20]
 80066d0:	60a2      	str	r2, [r4, #8]
 80066d2:	e7ef      	b.n	80066b4 <__swsetup_r+0xc0>
 80066d4:	20000190 	.word	0x20000190
 80066d8:	0800778c 	.word	0x0800778c
 80066dc:	080077ac 	.word	0x080077ac
 80066e0:	0800776c 	.word	0x0800776c

080066e4 <__sflush_r>:
 80066e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066e6:	898b      	ldrh	r3, [r1, #12]
 80066e8:	0005      	movs	r5, r0
 80066ea:	000c      	movs	r4, r1
 80066ec:	071a      	lsls	r2, r3, #28
 80066ee:	d45f      	bmi.n	80067b0 <__sflush_r+0xcc>
 80066f0:	684a      	ldr	r2, [r1, #4]
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	dc04      	bgt.n	8006700 <__sflush_r+0x1c>
 80066f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	dc01      	bgt.n	8006700 <__sflush_r+0x1c>
 80066fc:	2000      	movs	r0, #0
 80066fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006700:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006702:	2f00      	cmp	r7, #0
 8006704:	d0fa      	beq.n	80066fc <__sflush_r+0x18>
 8006706:	2200      	movs	r2, #0
 8006708:	2180      	movs	r1, #128	; 0x80
 800670a:	682e      	ldr	r6, [r5, #0]
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	001a      	movs	r2, r3
 8006710:	0149      	lsls	r1, r1, #5
 8006712:	400a      	ands	r2, r1
 8006714:	420b      	tst	r3, r1
 8006716:	d034      	beq.n	8006782 <__sflush_r+0x9e>
 8006718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	075b      	lsls	r3, r3, #29
 800671e:	d506      	bpl.n	800672e <__sflush_r+0x4a>
 8006720:	6863      	ldr	r3, [r4, #4]
 8006722:	1ac0      	subs	r0, r0, r3
 8006724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <__sflush_r+0x4a>
 800672a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800672c:	1ac0      	subs	r0, r0, r3
 800672e:	0002      	movs	r2, r0
 8006730:	6a21      	ldr	r1, [r4, #32]
 8006732:	2300      	movs	r3, #0
 8006734:	0028      	movs	r0, r5
 8006736:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006738:	47b8      	blx	r7
 800673a:	89a1      	ldrh	r1, [r4, #12]
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d106      	bne.n	800674e <__sflush_r+0x6a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	2b1d      	cmp	r3, #29
 8006744:	d831      	bhi.n	80067aa <__sflush_r+0xc6>
 8006746:	4a2c      	ldr	r2, [pc, #176]	; (80067f8 <__sflush_r+0x114>)
 8006748:	40da      	lsrs	r2, r3
 800674a:	07d3      	lsls	r3, r2, #31
 800674c:	d52d      	bpl.n	80067aa <__sflush_r+0xc6>
 800674e:	2300      	movs	r3, #0
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	04cb      	lsls	r3, r1, #19
 8006758:	d505      	bpl.n	8006766 <__sflush_r+0x82>
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	d102      	bne.n	8006764 <__sflush_r+0x80>
 800675e:	682b      	ldr	r3, [r5, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d100      	bne.n	8006766 <__sflush_r+0x82>
 8006764:	6560      	str	r0, [r4, #84]	; 0x54
 8006766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006768:	602e      	str	r6, [r5, #0]
 800676a:	2900      	cmp	r1, #0
 800676c:	d0c6      	beq.n	80066fc <__sflush_r+0x18>
 800676e:	0023      	movs	r3, r4
 8006770:	3344      	adds	r3, #68	; 0x44
 8006772:	4299      	cmp	r1, r3
 8006774:	d002      	beq.n	800677c <__sflush_r+0x98>
 8006776:	0028      	movs	r0, r5
 8006778:	f000 f9f2 	bl	8006b60 <_free_r>
 800677c:	2000      	movs	r0, #0
 800677e:	6360      	str	r0, [r4, #52]	; 0x34
 8006780:	e7bd      	b.n	80066fe <__sflush_r+0x1a>
 8006782:	2301      	movs	r3, #1
 8006784:	0028      	movs	r0, r5
 8006786:	6a21      	ldr	r1, [r4, #32]
 8006788:	47b8      	blx	r7
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d1c5      	bne.n	800671a <__sflush_r+0x36>
 800678e:	682b      	ldr	r3, [r5, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0c2      	beq.n	800671a <__sflush_r+0x36>
 8006794:	2b1d      	cmp	r3, #29
 8006796:	d001      	beq.n	800679c <__sflush_r+0xb8>
 8006798:	2b16      	cmp	r3, #22
 800679a:	d101      	bne.n	80067a0 <__sflush_r+0xbc>
 800679c:	602e      	str	r6, [r5, #0]
 800679e:	e7ad      	b.n	80066fc <__sflush_r+0x18>
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	89a2      	ldrh	r2, [r4, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	81a3      	strh	r3, [r4, #12]
 80067a8:	e7a9      	b.n	80066fe <__sflush_r+0x1a>
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	430b      	orrs	r3, r1
 80067ae:	e7fa      	b.n	80067a6 <__sflush_r+0xc2>
 80067b0:	690f      	ldr	r7, [r1, #16]
 80067b2:	2f00      	cmp	r7, #0
 80067b4:	d0a2      	beq.n	80066fc <__sflush_r+0x18>
 80067b6:	680a      	ldr	r2, [r1, #0]
 80067b8:	600f      	str	r7, [r1, #0]
 80067ba:	1bd2      	subs	r2, r2, r7
 80067bc:	9201      	str	r2, [sp, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	079b      	lsls	r3, r3, #30
 80067c2:	d100      	bne.n	80067c6 <__sflush_r+0xe2>
 80067c4:	694a      	ldr	r2, [r1, #20]
 80067c6:	60a2      	str	r2, [r4, #8]
 80067c8:	9b01      	ldr	r3, [sp, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	dc00      	bgt.n	80067d0 <__sflush_r+0xec>
 80067ce:	e795      	b.n	80066fc <__sflush_r+0x18>
 80067d0:	003a      	movs	r2, r7
 80067d2:	0028      	movs	r0, r5
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	6a21      	ldr	r1, [r4, #32]
 80067d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067da:	47b0      	blx	r6
 80067dc:	2800      	cmp	r0, #0
 80067de:	dc06      	bgt.n	80067ee <__sflush_r+0x10a>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	2001      	movs	r0, #1
 80067e4:	89a2      	ldrh	r2, [r4, #12]
 80067e6:	4240      	negs	r0, r0
 80067e8:	4313      	orrs	r3, r2
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	e787      	b.n	80066fe <__sflush_r+0x1a>
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	183f      	adds	r7, r7, r0
 80067f2:	1a1b      	subs	r3, r3, r0
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	e7e7      	b.n	80067c8 <__sflush_r+0xe4>
 80067f8:	20400001 	.word	0x20400001

080067fc <_fflush_r>:
 80067fc:	690b      	ldr	r3, [r1, #16]
 80067fe:	b570      	push	{r4, r5, r6, lr}
 8006800:	0005      	movs	r5, r0
 8006802:	000c      	movs	r4, r1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <_fflush_r+0x12>
 8006808:	2500      	movs	r5, #0
 800680a:	0028      	movs	r0, r5
 800680c:	bd70      	pop	{r4, r5, r6, pc}
 800680e:	2800      	cmp	r0, #0
 8006810:	d004      	beq.n	800681c <_fflush_r+0x20>
 8006812:	6983      	ldr	r3, [r0, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <_fflush_r+0x20>
 8006818:	f000 f892 	bl	8006940 <__sinit>
 800681c:	4b14      	ldr	r3, [pc, #80]	; (8006870 <_fflush_r+0x74>)
 800681e:	429c      	cmp	r4, r3
 8006820:	d11b      	bne.n	800685a <_fflush_r+0x5e>
 8006822:	686c      	ldr	r4, [r5, #4]
 8006824:	220c      	movs	r2, #12
 8006826:	5ea3      	ldrsh	r3, [r4, r2]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ed      	beq.n	8006808 <_fflush_r+0xc>
 800682c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800682e:	07d2      	lsls	r2, r2, #31
 8006830:	d404      	bmi.n	800683c <_fflush_r+0x40>
 8006832:	059b      	lsls	r3, r3, #22
 8006834:	d402      	bmi.n	800683c <_fflush_r+0x40>
 8006836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006838:	f000 f923 	bl	8006a82 <__retarget_lock_acquire_recursive>
 800683c:	0028      	movs	r0, r5
 800683e:	0021      	movs	r1, r4
 8006840:	f7ff ff50 	bl	80066e4 <__sflush_r>
 8006844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006846:	0005      	movs	r5, r0
 8006848:	07db      	lsls	r3, r3, #31
 800684a:	d4de      	bmi.n	800680a <_fflush_r+0xe>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	059b      	lsls	r3, r3, #22
 8006850:	d4db      	bmi.n	800680a <_fflush_r+0xe>
 8006852:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006854:	f000 f916 	bl	8006a84 <__retarget_lock_release_recursive>
 8006858:	e7d7      	b.n	800680a <_fflush_r+0xe>
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <_fflush_r+0x78>)
 800685c:	429c      	cmp	r4, r3
 800685e:	d101      	bne.n	8006864 <_fflush_r+0x68>
 8006860:	68ac      	ldr	r4, [r5, #8]
 8006862:	e7df      	b.n	8006824 <_fflush_r+0x28>
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <_fflush_r+0x7c>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d1dc      	bne.n	8006824 <_fflush_r+0x28>
 800686a:	68ec      	ldr	r4, [r5, #12]
 800686c:	e7da      	b.n	8006824 <_fflush_r+0x28>
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	0800778c 	.word	0x0800778c
 8006874:	080077ac 	.word	0x080077ac
 8006878:	0800776c 	.word	0x0800776c

0800687c <std>:
 800687c:	2300      	movs	r3, #0
 800687e:	b510      	push	{r4, lr}
 8006880:	0004      	movs	r4, r0
 8006882:	6003      	str	r3, [r0, #0]
 8006884:	6043      	str	r3, [r0, #4]
 8006886:	6083      	str	r3, [r0, #8]
 8006888:	8181      	strh	r1, [r0, #12]
 800688a:	6643      	str	r3, [r0, #100]	; 0x64
 800688c:	0019      	movs	r1, r3
 800688e:	81c2      	strh	r2, [r0, #14]
 8006890:	6103      	str	r3, [r0, #16]
 8006892:	6143      	str	r3, [r0, #20]
 8006894:	6183      	str	r3, [r0, #24]
 8006896:	2208      	movs	r2, #8
 8006898:	305c      	adds	r0, #92	; 0x5c
 800689a:	f7ff fd9a 	bl	80063d2 <memset>
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <std+0x38>)
 80068a0:	6263      	str	r3, [r4, #36]	; 0x24
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <std+0x3c>)
 80068a4:	6224      	str	r4, [r4, #32]
 80068a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <std+0x40>)
 80068aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <std+0x44>)
 80068ae:	6323      	str	r3, [r4, #48]	; 0x30
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	0800729d 	.word	0x0800729d
 80068b8:	080072c5 	.word	0x080072c5
 80068bc:	080072fd 	.word	0x080072fd
 80068c0:	08007329 	.word	0x08007329

080068c4 <_cleanup_r>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	4902      	ldr	r1, [pc, #8]	; (80068d0 <_cleanup_r+0xc>)
 80068c8:	f000 f8ba 	bl	8006a40 <_fwalk_reent>
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	080067fd 	.word	0x080067fd

080068d4 <__sfmoreglue>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	2568      	movs	r5, #104	; 0x68
 80068d8:	1e4a      	subs	r2, r1, #1
 80068da:	4355      	muls	r5, r2
 80068dc:	000e      	movs	r6, r1
 80068de:	0029      	movs	r1, r5
 80068e0:	3174      	adds	r1, #116	; 0x74
 80068e2:	f000 f987 	bl	8006bf4 <_malloc_r>
 80068e6:	1e04      	subs	r4, r0, #0
 80068e8:	d008      	beq.n	80068fc <__sfmoreglue+0x28>
 80068ea:	2100      	movs	r1, #0
 80068ec:	002a      	movs	r2, r5
 80068ee:	6001      	str	r1, [r0, #0]
 80068f0:	6046      	str	r6, [r0, #4]
 80068f2:	300c      	adds	r0, #12
 80068f4:	60a0      	str	r0, [r4, #8]
 80068f6:	3268      	adds	r2, #104	; 0x68
 80068f8:	f7ff fd6b 	bl	80063d2 <memset>
 80068fc:	0020      	movs	r0, r4
 80068fe:	bd70      	pop	{r4, r5, r6, pc}

08006900 <__sfp_lock_acquire>:
 8006900:	b510      	push	{r4, lr}
 8006902:	4802      	ldr	r0, [pc, #8]	; (800690c <__sfp_lock_acquire+0xc>)
 8006904:	f000 f8bd 	bl	8006a82 <__retarget_lock_acquire_recursive>
 8006908:	bd10      	pop	{r4, pc}
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	200003ac 	.word	0x200003ac

08006910 <__sfp_lock_release>:
 8006910:	b510      	push	{r4, lr}
 8006912:	4802      	ldr	r0, [pc, #8]	; (800691c <__sfp_lock_release+0xc>)
 8006914:	f000 f8b6 	bl	8006a84 <__retarget_lock_release_recursive>
 8006918:	bd10      	pop	{r4, pc}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	200003ac 	.word	0x200003ac

08006920 <__sinit_lock_acquire>:
 8006920:	b510      	push	{r4, lr}
 8006922:	4802      	ldr	r0, [pc, #8]	; (800692c <__sinit_lock_acquire+0xc>)
 8006924:	f000 f8ad 	bl	8006a82 <__retarget_lock_acquire_recursive>
 8006928:	bd10      	pop	{r4, pc}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	200003a7 	.word	0x200003a7

08006930 <__sinit_lock_release>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4802      	ldr	r0, [pc, #8]	; (800693c <__sinit_lock_release+0xc>)
 8006934:	f000 f8a6 	bl	8006a84 <__retarget_lock_release_recursive>
 8006938:	bd10      	pop	{r4, pc}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	200003a7 	.word	0x200003a7

08006940 <__sinit>:
 8006940:	b513      	push	{r0, r1, r4, lr}
 8006942:	0004      	movs	r4, r0
 8006944:	f7ff ffec 	bl	8006920 <__sinit_lock_acquire>
 8006948:	69a3      	ldr	r3, [r4, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <__sinit+0x14>
 800694e:	f7ff ffef 	bl	8006930 <__sinit_lock_release>
 8006952:	bd13      	pop	{r0, r1, r4, pc}
 8006954:	64a3      	str	r3, [r4, #72]	; 0x48
 8006956:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006958:	6523      	str	r3, [r4, #80]	; 0x50
 800695a:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <__sinit+0x68>)
 800695c:	4a13      	ldr	r2, [pc, #76]	; (80069ac <__sinit+0x6c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	62a2      	str	r2, [r4, #40]	; 0x28
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	42a3      	cmp	r3, r4
 8006966:	d101      	bne.n	800696c <__sinit+0x2c>
 8006968:	2301      	movs	r3, #1
 800696a:	61a3      	str	r3, [r4, #24]
 800696c:	0020      	movs	r0, r4
 800696e:	f000 f81f 	bl	80069b0 <__sfp>
 8006972:	6060      	str	r0, [r4, #4]
 8006974:	0020      	movs	r0, r4
 8006976:	f000 f81b 	bl	80069b0 <__sfp>
 800697a:	60a0      	str	r0, [r4, #8]
 800697c:	0020      	movs	r0, r4
 800697e:	f000 f817 	bl	80069b0 <__sfp>
 8006982:	2200      	movs	r2, #0
 8006984:	2104      	movs	r1, #4
 8006986:	60e0      	str	r0, [r4, #12]
 8006988:	6860      	ldr	r0, [r4, #4]
 800698a:	f7ff ff77 	bl	800687c <std>
 800698e:	2201      	movs	r2, #1
 8006990:	2109      	movs	r1, #9
 8006992:	68a0      	ldr	r0, [r4, #8]
 8006994:	f7ff ff72 	bl	800687c <std>
 8006998:	2202      	movs	r2, #2
 800699a:	2112      	movs	r1, #18
 800699c:	68e0      	ldr	r0, [r4, #12]
 800699e:	f7ff ff6d 	bl	800687c <std>
 80069a2:	2301      	movs	r3, #1
 80069a4:	61a3      	str	r3, [r4, #24]
 80069a6:	e7d2      	b.n	800694e <__sinit+0xe>
 80069a8:	08007768 	.word	0x08007768
 80069ac:	080068c5 	.word	0x080068c5

080069b0 <__sfp>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	0007      	movs	r7, r0
 80069b4:	f7ff ffa4 	bl	8006900 <__sfp_lock_acquire>
 80069b8:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <__sfp+0x88>)
 80069ba:	681e      	ldr	r6, [r3, #0]
 80069bc:	69b3      	ldr	r3, [r6, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <__sfp+0x18>
 80069c2:	0030      	movs	r0, r6
 80069c4:	f7ff ffbc 	bl	8006940 <__sinit>
 80069c8:	3648      	adds	r6, #72	; 0x48
 80069ca:	68b4      	ldr	r4, [r6, #8]
 80069cc:	6873      	ldr	r3, [r6, #4]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	d504      	bpl.n	80069dc <__sfp+0x2c>
 80069d2:	6833      	ldr	r3, [r6, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d022      	beq.n	8006a1e <__sfp+0x6e>
 80069d8:	6836      	ldr	r6, [r6, #0]
 80069da:	e7f6      	b.n	80069ca <__sfp+0x1a>
 80069dc:	220c      	movs	r2, #12
 80069de:	5ea5      	ldrsh	r5, [r4, r2]
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	d11a      	bne.n	8006a1a <__sfp+0x6a>
 80069e4:	0020      	movs	r0, r4
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <__sfp+0x8c>)
 80069e8:	3058      	adds	r0, #88	; 0x58
 80069ea:	60e3      	str	r3, [r4, #12]
 80069ec:	6665      	str	r5, [r4, #100]	; 0x64
 80069ee:	f000 f847 	bl	8006a80 <__retarget_lock_init_recursive>
 80069f2:	f7ff ff8d 	bl	8006910 <__sfp_lock_release>
 80069f6:	0020      	movs	r0, r4
 80069f8:	2208      	movs	r2, #8
 80069fa:	0029      	movs	r1, r5
 80069fc:	6025      	str	r5, [r4, #0]
 80069fe:	60a5      	str	r5, [r4, #8]
 8006a00:	6065      	str	r5, [r4, #4]
 8006a02:	6125      	str	r5, [r4, #16]
 8006a04:	6165      	str	r5, [r4, #20]
 8006a06:	61a5      	str	r5, [r4, #24]
 8006a08:	305c      	adds	r0, #92	; 0x5c
 8006a0a:	f7ff fce2 	bl	80063d2 <memset>
 8006a0e:	6365      	str	r5, [r4, #52]	; 0x34
 8006a10:	63a5      	str	r5, [r4, #56]	; 0x38
 8006a12:	64a5      	str	r5, [r4, #72]	; 0x48
 8006a14:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006a16:	0020      	movs	r0, r4
 8006a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a1a:	3468      	adds	r4, #104	; 0x68
 8006a1c:	e7d7      	b.n	80069ce <__sfp+0x1e>
 8006a1e:	2104      	movs	r1, #4
 8006a20:	0038      	movs	r0, r7
 8006a22:	f7ff ff57 	bl	80068d4 <__sfmoreglue>
 8006a26:	1e04      	subs	r4, r0, #0
 8006a28:	6030      	str	r0, [r6, #0]
 8006a2a:	d1d5      	bne.n	80069d8 <__sfp+0x28>
 8006a2c:	f7ff ff70 	bl	8006910 <__sfp_lock_release>
 8006a30:	230c      	movs	r3, #12
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	e7ef      	b.n	8006a16 <__sfp+0x66>
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	08007768 	.word	0x08007768
 8006a3c:	ffff0001 	.word	0xffff0001

08006a40 <_fwalk_reent>:
 8006a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a42:	0004      	movs	r4, r0
 8006a44:	0006      	movs	r6, r0
 8006a46:	2700      	movs	r7, #0
 8006a48:	9101      	str	r1, [sp, #4]
 8006a4a:	3448      	adds	r4, #72	; 0x48
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	68a5      	ldr	r5, [r4, #8]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	9b00      	ldr	r3, [sp, #0]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	d504      	bpl.n	8006a64 <_fwalk_reent+0x24>
 8006a5a:	6824      	ldr	r4, [r4, #0]
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d1f5      	bne.n	8006a4c <_fwalk_reent+0xc>
 8006a60:	0038      	movs	r0, r7
 8006a62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a64:	89ab      	ldrh	r3, [r5, #12]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d908      	bls.n	8006a7c <_fwalk_reent+0x3c>
 8006a6a:	220e      	movs	r2, #14
 8006a6c:	5eab      	ldrsh	r3, [r5, r2]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	d004      	beq.n	8006a7c <_fwalk_reent+0x3c>
 8006a72:	0029      	movs	r1, r5
 8006a74:	0030      	movs	r0, r6
 8006a76:	9b01      	ldr	r3, [sp, #4]
 8006a78:	4798      	blx	r3
 8006a7a:	4307      	orrs	r7, r0
 8006a7c:	3568      	adds	r5, #104	; 0x68
 8006a7e:	e7e8      	b.n	8006a52 <_fwalk_reent+0x12>

08006a80 <__retarget_lock_init_recursive>:
 8006a80:	4770      	bx	lr

08006a82 <__retarget_lock_acquire_recursive>:
 8006a82:	4770      	bx	lr

08006a84 <__retarget_lock_release_recursive>:
 8006a84:	4770      	bx	lr
	...

08006a88 <__swhatbuf_r>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	000e      	movs	r6, r1
 8006a8c:	001d      	movs	r5, r3
 8006a8e:	230e      	movs	r3, #14
 8006a90:	5ec9      	ldrsh	r1, [r1, r3]
 8006a92:	0014      	movs	r4, r2
 8006a94:	b096      	sub	sp, #88	; 0x58
 8006a96:	2900      	cmp	r1, #0
 8006a98:	da07      	bge.n	8006aaa <__swhatbuf_r+0x22>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	89b3      	ldrh	r3, [r6, #12]
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	d411      	bmi.n	8006ac8 <__swhatbuf_r+0x40>
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	e00f      	b.n	8006aca <__swhatbuf_r+0x42>
 8006aaa:	466a      	mov	r2, sp
 8006aac:	f000 fc68 	bl	8007380 <_fstat_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	dbf2      	blt.n	8006a9a <__swhatbuf_r+0x12>
 8006ab4:	23f0      	movs	r3, #240	; 0xf0
 8006ab6:	9901      	ldr	r1, [sp, #4]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	4019      	ands	r1, r3
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <__swhatbuf_r+0x4c>)
 8006abe:	18c9      	adds	r1, r1, r3
 8006ac0:	424b      	negs	r3, r1
 8006ac2:	4159      	adcs	r1, r3
 8006ac4:	6029      	str	r1, [r5, #0]
 8006ac6:	e7ed      	b.n	8006aa4 <__swhatbuf_r+0x1c>
 8006ac8:	2340      	movs	r3, #64	; 0x40
 8006aca:	2000      	movs	r0, #0
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	b016      	add	sp, #88	; 0x58
 8006ad0:	bd70      	pop	{r4, r5, r6, pc}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	ffffe000 	.word	0xffffe000

08006ad8 <__smakebuf_r>:
 8006ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ada:	2602      	movs	r6, #2
 8006adc:	898b      	ldrh	r3, [r1, #12]
 8006ade:	0005      	movs	r5, r0
 8006ae0:	000c      	movs	r4, r1
 8006ae2:	4233      	tst	r3, r6
 8006ae4:	d006      	beq.n	8006af4 <__smakebuf_r+0x1c>
 8006ae6:	0023      	movs	r3, r4
 8006ae8:	3347      	adds	r3, #71	; 0x47
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	2301      	movs	r3, #1
 8006af0:	6163      	str	r3, [r4, #20]
 8006af2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006af4:	466a      	mov	r2, sp
 8006af6:	ab01      	add	r3, sp, #4
 8006af8:	f7ff ffc6 	bl	8006a88 <__swhatbuf_r>
 8006afc:	9900      	ldr	r1, [sp, #0]
 8006afe:	0007      	movs	r7, r0
 8006b00:	0028      	movs	r0, r5
 8006b02:	f000 f877 	bl	8006bf4 <_malloc_r>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d108      	bne.n	8006b1c <__smakebuf_r+0x44>
 8006b0a:	220c      	movs	r2, #12
 8006b0c:	5ea3      	ldrsh	r3, [r4, r2]
 8006b0e:	059a      	lsls	r2, r3, #22
 8006b10:	d4ef      	bmi.n	8006af2 <__smakebuf_r+0x1a>
 8006b12:	2203      	movs	r2, #3
 8006b14:	4393      	bics	r3, r2
 8006b16:	431e      	orrs	r6, r3
 8006b18:	81a6      	strh	r6, [r4, #12]
 8006b1a:	e7e4      	b.n	8006ae6 <__smakebuf_r+0xe>
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <__smakebuf_r+0x84>)
 8006b1e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006b20:	2380      	movs	r3, #128	; 0x80
 8006b22:	89a2      	ldrh	r2, [r4, #12]
 8006b24:	6020      	str	r0, [r4, #0]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	9b00      	ldr	r3, [sp, #0]
 8006b2c:	6120      	str	r0, [r4, #16]
 8006b2e:	6163      	str	r3, [r4, #20]
 8006b30:	9b01      	ldr	r3, [sp, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <__smakebuf_r+0x7a>
 8006b36:	0028      	movs	r0, r5
 8006b38:	230e      	movs	r3, #14
 8006b3a:	5ee1      	ldrsh	r1, [r4, r3]
 8006b3c:	f000 fc32 	bl	80073a4 <_isatty_r>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d006      	beq.n	8006b52 <__smakebuf_r+0x7a>
 8006b44:	2203      	movs	r2, #3
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	4393      	bics	r3, r2
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	89a0      	ldrh	r0, [r4, #12]
 8006b54:	4307      	orrs	r7, r0
 8006b56:	81a7      	strh	r7, [r4, #12]
 8006b58:	e7cb      	b.n	8006af2 <__smakebuf_r+0x1a>
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	080068c5 	.word	0x080068c5

08006b60 <_free_r>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	0005      	movs	r5, r0
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d010      	beq.n	8006b8a <_free_r+0x2a>
 8006b68:	1f0c      	subs	r4, r1, #4
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da00      	bge.n	8006b72 <_free_r+0x12>
 8006b70:	18e4      	adds	r4, r4, r3
 8006b72:	0028      	movs	r0, r5
 8006b74:	f000 fc5a 	bl	800742c <__malloc_lock>
 8006b78:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <_free_r+0x90>)
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d105      	bne.n	8006b8c <_free_r+0x2c>
 8006b80:	6063      	str	r3, [r4, #4]
 8006b82:	6014      	str	r4, [r2, #0]
 8006b84:	0028      	movs	r0, r5
 8006b86:	f000 fc59 	bl	800743c <__malloc_unlock>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d908      	bls.n	8006ba2 <_free_r+0x42>
 8006b90:	6821      	ldr	r1, [r4, #0]
 8006b92:	1860      	adds	r0, r4, r1
 8006b94:	4283      	cmp	r3, r0
 8006b96:	d1f3      	bne.n	8006b80 <_free_r+0x20>
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	1841      	adds	r1, r0, r1
 8006b9e:	6021      	str	r1, [r4, #0]
 8006ba0:	e7ee      	b.n	8006b80 <_free_r+0x20>
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <_free_r+0x4e>
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	d9f9      	bls.n	8006ba2 <_free_r+0x42>
 8006bae:	6811      	ldr	r1, [r2, #0]
 8006bb0:	1850      	adds	r0, r2, r1
 8006bb2:	42a0      	cmp	r0, r4
 8006bb4:	d10b      	bne.n	8006bce <_free_r+0x6e>
 8006bb6:	6820      	ldr	r0, [r4, #0]
 8006bb8:	1809      	adds	r1, r1, r0
 8006bba:	1850      	adds	r0, r2, r1
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	4283      	cmp	r3, r0
 8006bc0:	d1e0      	bne.n	8006b84 <_free_r+0x24>
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	1841      	adds	r1, r0, r1
 8006bc8:	6011      	str	r1, [r2, #0]
 8006bca:	6053      	str	r3, [r2, #4]
 8006bcc:	e7da      	b.n	8006b84 <_free_r+0x24>
 8006bce:	42a0      	cmp	r0, r4
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x78>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	602b      	str	r3, [r5, #0]
 8006bd6:	e7d5      	b.n	8006b84 <_free_r+0x24>
 8006bd8:	6821      	ldr	r1, [r4, #0]
 8006bda:	1860      	adds	r0, r4, r1
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	d103      	bne.n	8006be8 <_free_r+0x88>
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	1841      	adds	r1, r0, r1
 8006be6:	6021      	str	r1, [r4, #0]
 8006be8:	6063      	str	r3, [r4, #4]
 8006bea:	6054      	str	r4, [r2, #4]
 8006bec:	e7ca      	b.n	8006b84 <_free_r+0x24>
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	20000260 	.word	0x20000260

08006bf4 <_malloc_r>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	1ccd      	adds	r5, r1, #3
 8006bfa:	439d      	bics	r5, r3
 8006bfc:	3508      	adds	r5, #8
 8006bfe:	0006      	movs	r6, r0
 8006c00:	2d0c      	cmp	r5, #12
 8006c02:	d21f      	bcs.n	8006c44 <_malloc_r+0x50>
 8006c04:	250c      	movs	r5, #12
 8006c06:	42a9      	cmp	r1, r5
 8006c08:	d81e      	bhi.n	8006c48 <_malloc_r+0x54>
 8006c0a:	0030      	movs	r0, r6
 8006c0c:	f000 fc0e 	bl	800742c <__malloc_lock>
 8006c10:	4925      	ldr	r1, [pc, #148]	; (8006ca8 <_malloc_r+0xb4>)
 8006c12:	680a      	ldr	r2, [r1, #0]
 8006c14:	0014      	movs	r4, r2
 8006c16:	2c00      	cmp	r4, #0
 8006c18:	d11a      	bne.n	8006c50 <_malloc_r+0x5c>
 8006c1a:	4f24      	ldr	r7, [pc, #144]	; (8006cac <_malloc_r+0xb8>)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <_malloc_r+0x38>
 8006c22:	0021      	movs	r1, r4
 8006c24:	0030      	movs	r0, r6
 8006c26:	f000 fb27 	bl	8007278 <_sbrk_r>
 8006c2a:	6038      	str	r0, [r7, #0]
 8006c2c:	0029      	movs	r1, r5
 8006c2e:	0030      	movs	r0, r6
 8006c30:	f000 fb22 	bl	8007278 <_sbrk_r>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d12b      	bne.n	8006c90 <_malloc_r+0x9c>
 8006c38:	230c      	movs	r3, #12
 8006c3a:	0030      	movs	r0, r6
 8006c3c:	6033      	str	r3, [r6, #0]
 8006c3e:	f000 fbfd 	bl	800743c <__malloc_unlock>
 8006c42:	e003      	b.n	8006c4c <_malloc_r+0x58>
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	dade      	bge.n	8006c06 <_malloc_r+0x12>
 8006c48:	230c      	movs	r3, #12
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	1b5b      	subs	r3, r3, r5
 8006c54:	d419      	bmi.n	8006c8a <_malloc_r+0x96>
 8006c56:	2b0b      	cmp	r3, #11
 8006c58:	d903      	bls.n	8006c62 <_malloc_r+0x6e>
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	18e4      	adds	r4, r4, r3
 8006c5e:	6025      	str	r5, [r4, #0]
 8006c60:	e003      	b.n	8006c6a <_malloc_r+0x76>
 8006c62:	6863      	ldr	r3, [r4, #4]
 8006c64:	42a2      	cmp	r2, r4
 8006c66:	d10e      	bne.n	8006c86 <_malloc_r+0x92>
 8006c68:	600b      	str	r3, [r1, #0]
 8006c6a:	0030      	movs	r0, r6
 8006c6c:	f000 fbe6 	bl	800743c <__malloc_unlock>
 8006c70:	0020      	movs	r0, r4
 8006c72:	2207      	movs	r2, #7
 8006c74:	300b      	adds	r0, #11
 8006c76:	1d23      	adds	r3, r4, #4
 8006c78:	4390      	bics	r0, r2
 8006c7a:	1ac2      	subs	r2, r0, r3
 8006c7c:	4298      	cmp	r0, r3
 8006c7e:	d0e6      	beq.n	8006c4e <_malloc_r+0x5a>
 8006c80:	1a1b      	subs	r3, r3, r0
 8006c82:	50a3      	str	r3, [r4, r2]
 8006c84:	e7e3      	b.n	8006c4e <_malloc_r+0x5a>
 8006c86:	6053      	str	r3, [r2, #4]
 8006c88:	e7ef      	b.n	8006c6a <_malloc_r+0x76>
 8006c8a:	0022      	movs	r2, r4
 8006c8c:	6864      	ldr	r4, [r4, #4]
 8006c8e:	e7c2      	b.n	8006c16 <_malloc_r+0x22>
 8006c90:	2303      	movs	r3, #3
 8006c92:	1cc4      	adds	r4, r0, #3
 8006c94:	439c      	bics	r4, r3
 8006c96:	42a0      	cmp	r0, r4
 8006c98:	d0e1      	beq.n	8006c5e <_malloc_r+0x6a>
 8006c9a:	1a21      	subs	r1, r4, r0
 8006c9c:	0030      	movs	r0, r6
 8006c9e:	f000 faeb 	bl	8007278 <_sbrk_r>
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	d1db      	bne.n	8006c5e <_malloc_r+0x6a>
 8006ca6:	e7c7      	b.n	8006c38 <_malloc_r+0x44>
 8006ca8:	20000260 	.word	0x20000260
 8006cac:	20000264 	.word	0x20000264

08006cb0 <__ssputs_r>:
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	688e      	ldr	r6, [r1, #8]
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	0007      	movs	r7, r0
 8006cb8:	000c      	movs	r4, r1
 8006cba:	9203      	str	r2, [sp, #12]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	429e      	cmp	r6, r3
 8006cc0:	d83c      	bhi.n	8006d3c <__ssputs_r+0x8c>
 8006cc2:	2390      	movs	r3, #144	; 0x90
 8006cc4:	898a      	ldrh	r2, [r1, #12]
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	421a      	tst	r2, r3
 8006cca:	d034      	beq.n	8006d36 <__ssputs_r+0x86>
 8006ccc:	2503      	movs	r5, #3
 8006cce:	6909      	ldr	r1, [r1, #16]
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	1a5b      	subs	r3, r3, r1
 8006cd4:	9302      	str	r3, [sp, #8]
 8006cd6:	6963      	ldr	r3, [r4, #20]
 8006cd8:	9802      	ldr	r0, [sp, #8]
 8006cda:	435d      	muls	r5, r3
 8006cdc:	0feb      	lsrs	r3, r5, #31
 8006cde:	195d      	adds	r5, r3, r5
 8006ce0:	9b01      	ldr	r3, [sp, #4]
 8006ce2:	106d      	asrs	r5, r5, #1
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	181b      	adds	r3, r3, r0
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	d900      	bls.n	8006cee <__ssputs_r+0x3e>
 8006cec:	001d      	movs	r5, r3
 8006cee:	0553      	lsls	r3, r2, #21
 8006cf0:	d532      	bpl.n	8006d58 <__ssputs_r+0xa8>
 8006cf2:	0029      	movs	r1, r5
 8006cf4:	0038      	movs	r0, r7
 8006cf6:	f7ff ff7d 	bl	8006bf4 <_malloc_r>
 8006cfa:	1e06      	subs	r6, r0, #0
 8006cfc:	d109      	bne.n	8006d12 <__ssputs_r+0x62>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	2340      	movs	r3, #64	; 0x40
 8006d04:	2001      	movs	r0, #1
 8006d06:	89a2      	ldrh	r2, [r4, #12]
 8006d08:	4240      	negs	r0, r0
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	b005      	add	sp, #20
 8006d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d12:	9a02      	ldr	r2, [sp, #8]
 8006d14:	6921      	ldr	r1, [r4, #16]
 8006d16:	f7ff fb53 	bl	80063c0 <memcpy>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <__ssputs_r+0xc0>)
 8006d1e:	401a      	ands	r2, r3
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	4313      	orrs	r3, r2
 8006d24:	81a3      	strh	r3, [r4, #12]
 8006d26:	9b02      	ldr	r3, [sp, #8]
 8006d28:	6126      	str	r6, [r4, #16]
 8006d2a:	18f6      	adds	r6, r6, r3
 8006d2c:	6026      	str	r6, [r4, #0]
 8006d2e:	6165      	str	r5, [r4, #20]
 8006d30:	9e01      	ldr	r6, [sp, #4]
 8006d32:	1aed      	subs	r5, r5, r3
 8006d34:	60a5      	str	r5, [r4, #8]
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	429e      	cmp	r6, r3
 8006d3a:	d900      	bls.n	8006d3e <__ssputs_r+0x8e>
 8006d3c:	9e01      	ldr	r6, [sp, #4]
 8006d3e:	0032      	movs	r2, r6
 8006d40:	9903      	ldr	r1, [sp, #12]
 8006d42:	6820      	ldr	r0, [r4, #0]
 8006d44:	f000 fb5f 	bl	8007406 <memmove>
 8006d48:	68a3      	ldr	r3, [r4, #8]
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	1b9b      	subs	r3, r3, r6
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	199e      	adds	r6, r3, r6
 8006d54:	6026      	str	r6, [r4, #0]
 8006d56:	e7da      	b.n	8006d0e <__ssputs_r+0x5e>
 8006d58:	002a      	movs	r2, r5
 8006d5a:	0038      	movs	r0, r7
 8006d5c:	f000 fb76 	bl	800744c <_realloc_r>
 8006d60:	1e06      	subs	r6, r0, #0
 8006d62:	d1e0      	bne.n	8006d26 <__ssputs_r+0x76>
 8006d64:	0038      	movs	r0, r7
 8006d66:	6921      	ldr	r1, [r4, #16]
 8006d68:	f7ff fefa 	bl	8006b60 <_free_r>
 8006d6c:	e7c7      	b.n	8006cfe <__ssputs_r+0x4e>
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	fffffb7f 	.word	0xfffffb7f

08006d74 <_svfiprintf_r>:
 8006d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d76:	b0a1      	sub	sp, #132	; 0x84
 8006d78:	9003      	str	r0, [sp, #12]
 8006d7a:	001d      	movs	r5, r3
 8006d7c:	898b      	ldrh	r3, [r1, #12]
 8006d7e:	000f      	movs	r7, r1
 8006d80:	0016      	movs	r6, r2
 8006d82:	061b      	lsls	r3, r3, #24
 8006d84:	d511      	bpl.n	8006daa <_svfiprintf_r+0x36>
 8006d86:	690b      	ldr	r3, [r1, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10e      	bne.n	8006daa <_svfiprintf_r+0x36>
 8006d8c:	2140      	movs	r1, #64	; 0x40
 8006d8e:	f7ff ff31 	bl	8006bf4 <_malloc_r>
 8006d92:	6038      	str	r0, [r7, #0]
 8006d94:	6138      	str	r0, [r7, #16]
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d105      	bne.n	8006da6 <_svfiprintf_r+0x32>
 8006d9a:	230c      	movs	r3, #12
 8006d9c:	9a03      	ldr	r2, [sp, #12]
 8006d9e:	3801      	subs	r0, #1
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	b021      	add	sp, #132	; 0x84
 8006da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da6:	2340      	movs	r3, #64	; 0x40
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	2300      	movs	r3, #0
 8006dac:	ac08      	add	r4, sp, #32
 8006dae:	6163      	str	r3, [r4, #20]
 8006db0:	3320      	adds	r3, #32
 8006db2:	7663      	strb	r3, [r4, #25]
 8006db4:	3310      	adds	r3, #16
 8006db6:	76a3      	strb	r3, [r4, #26]
 8006db8:	9507      	str	r5, [sp, #28]
 8006dba:	0035      	movs	r5, r6
 8006dbc:	782b      	ldrb	r3, [r5, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <_svfiprintf_r+0x52>
 8006dc2:	2b25      	cmp	r3, #37	; 0x25
 8006dc4:	d147      	bne.n	8006e56 <_svfiprintf_r+0xe2>
 8006dc6:	1bab      	subs	r3, r5, r6
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	42b5      	cmp	r5, r6
 8006dcc:	d00c      	beq.n	8006de8 <_svfiprintf_r+0x74>
 8006dce:	0032      	movs	r2, r6
 8006dd0:	0039      	movs	r1, r7
 8006dd2:	9803      	ldr	r0, [sp, #12]
 8006dd4:	f7ff ff6c 	bl	8006cb0 <__ssputs_r>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d100      	bne.n	8006dde <_svfiprintf_r+0x6a>
 8006ddc:	e0ae      	b.n	8006f3c <_svfiprintf_r+0x1c8>
 8006dde:	6962      	ldr	r2, [r4, #20]
 8006de0:	9b05      	ldr	r3, [sp, #20]
 8006de2:	4694      	mov	ip, r2
 8006de4:	4463      	add	r3, ip
 8006de6:	6163      	str	r3, [r4, #20]
 8006de8:	782b      	ldrb	r3, [r5, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d100      	bne.n	8006df0 <_svfiprintf_r+0x7c>
 8006dee:	e0a5      	b.n	8006f3c <_svfiprintf_r+0x1c8>
 8006df0:	2201      	movs	r2, #1
 8006df2:	2300      	movs	r3, #0
 8006df4:	4252      	negs	r2, r2
 8006df6:	6062      	str	r2, [r4, #4]
 8006df8:	a904      	add	r1, sp, #16
 8006dfa:	3254      	adds	r2, #84	; 0x54
 8006dfc:	1852      	adds	r2, r2, r1
 8006dfe:	1c6e      	adds	r6, r5, #1
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	60e3      	str	r3, [r4, #12]
 8006e04:	60a3      	str	r3, [r4, #8]
 8006e06:	7013      	strb	r3, [r2, #0]
 8006e08:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e0a:	2205      	movs	r2, #5
 8006e0c:	7831      	ldrb	r1, [r6, #0]
 8006e0e:	4854      	ldr	r0, [pc, #336]	; (8006f60 <_svfiprintf_r+0x1ec>)
 8006e10:	f000 faee 	bl	80073f0 <memchr>
 8006e14:	1c75      	adds	r5, r6, #1
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d11f      	bne.n	8006e5a <_svfiprintf_r+0xe6>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	06d3      	lsls	r3, r2, #27
 8006e1e:	d504      	bpl.n	8006e2a <_svfiprintf_r+0xb6>
 8006e20:	2353      	movs	r3, #83	; 0x53
 8006e22:	a904      	add	r1, sp, #16
 8006e24:	185b      	adds	r3, r3, r1
 8006e26:	2120      	movs	r1, #32
 8006e28:	7019      	strb	r1, [r3, #0]
 8006e2a:	0713      	lsls	r3, r2, #28
 8006e2c:	d504      	bpl.n	8006e38 <_svfiprintf_r+0xc4>
 8006e2e:	2353      	movs	r3, #83	; 0x53
 8006e30:	a904      	add	r1, sp, #16
 8006e32:	185b      	adds	r3, r3, r1
 8006e34:	212b      	movs	r1, #43	; 0x2b
 8006e36:	7019      	strb	r1, [r3, #0]
 8006e38:	7833      	ldrb	r3, [r6, #0]
 8006e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e3c:	d016      	beq.n	8006e6c <_svfiprintf_r+0xf8>
 8006e3e:	0035      	movs	r5, r6
 8006e40:	2100      	movs	r1, #0
 8006e42:	200a      	movs	r0, #10
 8006e44:	68e3      	ldr	r3, [r4, #12]
 8006e46:	782a      	ldrb	r2, [r5, #0]
 8006e48:	1c6e      	adds	r6, r5, #1
 8006e4a:	3a30      	subs	r2, #48	; 0x30
 8006e4c:	2a09      	cmp	r2, #9
 8006e4e:	d94e      	bls.n	8006eee <_svfiprintf_r+0x17a>
 8006e50:	2900      	cmp	r1, #0
 8006e52:	d111      	bne.n	8006e78 <_svfiprintf_r+0x104>
 8006e54:	e017      	b.n	8006e86 <_svfiprintf_r+0x112>
 8006e56:	3501      	adds	r5, #1
 8006e58:	e7b0      	b.n	8006dbc <_svfiprintf_r+0x48>
 8006e5a:	4b41      	ldr	r3, [pc, #260]	; (8006f60 <_svfiprintf_r+0x1ec>)
 8006e5c:	6822      	ldr	r2, [r4, #0]
 8006e5e:	1ac0      	subs	r0, r0, r3
 8006e60:	2301      	movs	r3, #1
 8006e62:	4083      	lsls	r3, r0
 8006e64:	4313      	orrs	r3, r2
 8006e66:	002e      	movs	r6, r5
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	e7ce      	b.n	8006e0a <_svfiprintf_r+0x96>
 8006e6c:	9b07      	ldr	r3, [sp, #28]
 8006e6e:	1d19      	adds	r1, r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	9107      	str	r1, [sp, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db01      	blt.n	8006e7c <_svfiprintf_r+0x108>
 8006e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e7a:	e004      	b.n	8006e86 <_svfiprintf_r+0x112>
 8006e7c:	425b      	negs	r3, r3
 8006e7e:	60e3      	str	r3, [r4, #12]
 8006e80:	2302      	movs	r3, #2
 8006e82:	4313      	orrs	r3, r2
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	782b      	ldrb	r3, [r5, #0]
 8006e88:	2b2e      	cmp	r3, #46	; 0x2e
 8006e8a:	d10a      	bne.n	8006ea2 <_svfiprintf_r+0x12e>
 8006e8c:	786b      	ldrb	r3, [r5, #1]
 8006e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e90:	d135      	bne.n	8006efe <_svfiprintf_r+0x18a>
 8006e92:	9b07      	ldr	r3, [sp, #28]
 8006e94:	3502      	adds	r5, #2
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	9207      	str	r2, [sp, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	db2b      	blt.n	8006ef8 <_svfiprintf_r+0x184>
 8006ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea2:	4e30      	ldr	r6, [pc, #192]	; (8006f64 <_svfiprintf_r+0x1f0>)
 8006ea4:	2203      	movs	r2, #3
 8006ea6:	0030      	movs	r0, r6
 8006ea8:	7829      	ldrb	r1, [r5, #0]
 8006eaa:	f000 faa1 	bl	80073f0 <memchr>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d006      	beq.n	8006ec0 <_svfiprintf_r+0x14c>
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	1b80      	subs	r0, r0, r6
 8006eb6:	4083      	lsls	r3, r0
 8006eb8:	6822      	ldr	r2, [r4, #0]
 8006eba:	3501      	adds	r5, #1
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	7829      	ldrb	r1, [r5, #0]
 8006ec2:	2206      	movs	r2, #6
 8006ec4:	4828      	ldr	r0, [pc, #160]	; (8006f68 <_svfiprintf_r+0x1f4>)
 8006ec6:	1c6e      	adds	r6, r5, #1
 8006ec8:	7621      	strb	r1, [r4, #24]
 8006eca:	f000 fa91 	bl	80073f0 <memchr>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d03c      	beq.n	8006f4c <_svfiprintf_r+0x1d8>
 8006ed2:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <_svfiprintf_r+0x1f8>)
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d125      	bne.n	8006f24 <_svfiprintf_r+0x1b0>
 8006ed8:	2207      	movs	r2, #7
 8006eda:	9b07      	ldr	r3, [sp, #28]
 8006edc:	3307      	adds	r3, #7
 8006ede:	4393      	bics	r3, r2
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	9307      	str	r3, [sp, #28]
 8006ee4:	6963      	ldr	r3, [r4, #20]
 8006ee6:	9a04      	ldr	r2, [sp, #16]
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	6163      	str	r3, [r4, #20]
 8006eec:	e765      	b.n	8006dba <_svfiprintf_r+0x46>
 8006eee:	4343      	muls	r3, r0
 8006ef0:	0035      	movs	r5, r6
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	189b      	adds	r3, r3, r2
 8006ef6:	e7a6      	b.n	8006e46 <_svfiprintf_r+0xd2>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	425b      	negs	r3, r3
 8006efc:	e7d0      	b.n	8006ea0 <_svfiprintf_r+0x12c>
 8006efe:	2300      	movs	r3, #0
 8006f00:	200a      	movs	r0, #10
 8006f02:	001a      	movs	r2, r3
 8006f04:	3501      	adds	r5, #1
 8006f06:	6063      	str	r3, [r4, #4]
 8006f08:	7829      	ldrb	r1, [r5, #0]
 8006f0a:	1c6e      	adds	r6, r5, #1
 8006f0c:	3930      	subs	r1, #48	; 0x30
 8006f0e:	2909      	cmp	r1, #9
 8006f10:	d903      	bls.n	8006f1a <_svfiprintf_r+0x1a6>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0c5      	beq.n	8006ea2 <_svfiprintf_r+0x12e>
 8006f16:	9209      	str	r2, [sp, #36]	; 0x24
 8006f18:	e7c3      	b.n	8006ea2 <_svfiprintf_r+0x12e>
 8006f1a:	4342      	muls	r2, r0
 8006f1c:	0035      	movs	r5, r6
 8006f1e:	2301      	movs	r3, #1
 8006f20:	1852      	adds	r2, r2, r1
 8006f22:	e7f1      	b.n	8006f08 <_svfiprintf_r+0x194>
 8006f24:	ab07      	add	r3, sp, #28
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	003a      	movs	r2, r7
 8006f2a:	0021      	movs	r1, r4
 8006f2c:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <_svfiprintf_r+0x1fc>)
 8006f2e:	9803      	ldr	r0, [sp, #12]
 8006f30:	e000      	b.n	8006f34 <_svfiprintf_r+0x1c0>
 8006f32:	bf00      	nop
 8006f34:	9004      	str	r0, [sp, #16]
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	d1d3      	bne.n	8006ee4 <_svfiprintf_r+0x170>
 8006f3c:	89bb      	ldrh	r3, [r7, #12]
 8006f3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f40:	065b      	lsls	r3, r3, #25
 8006f42:	d400      	bmi.n	8006f46 <_svfiprintf_r+0x1d2>
 8006f44:	e72d      	b.n	8006da2 <_svfiprintf_r+0x2e>
 8006f46:	2001      	movs	r0, #1
 8006f48:	4240      	negs	r0, r0
 8006f4a:	e72a      	b.n	8006da2 <_svfiprintf_r+0x2e>
 8006f4c:	ab07      	add	r3, sp, #28
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	003a      	movs	r2, r7
 8006f52:	0021      	movs	r1, r4
 8006f54:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <_svfiprintf_r+0x1fc>)
 8006f56:	9803      	ldr	r0, [sp, #12]
 8006f58:	f000 f87c 	bl	8007054 <_printf_i>
 8006f5c:	e7ea      	b.n	8006f34 <_svfiprintf_r+0x1c0>
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	080077cc 	.word	0x080077cc
 8006f64:	080077d2 	.word	0x080077d2
 8006f68:	080077d6 	.word	0x080077d6
 8006f6c:	00000000 	.word	0x00000000
 8006f70:	08006cb1 	.word	0x08006cb1

08006f74 <_printf_common>:
 8006f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f76:	0015      	movs	r5, r2
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	688a      	ldr	r2, [r1, #8]
 8006f7c:	690b      	ldr	r3, [r1, #16]
 8006f7e:	000c      	movs	r4, r1
 8006f80:	9000      	str	r0, [sp, #0]
 8006f82:	4293      	cmp	r3, r2
 8006f84:	da00      	bge.n	8006f88 <_printf_common+0x14>
 8006f86:	0013      	movs	r3, r2
 8006f88:	0022      	movs	r2, r4
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	3243      	adds	r2, #67	; 0x43
 8006f8e:	7812      	ldrb	r2, [r2, #0]
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	d001      	beq.n	8006f98 <_printf_common+0x24>
 8006f94:	3301      	adds	r3, #1
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	069b      	lsls	r3, r3, #26
 8006f9c:	d502      	bpl.n	8006fa4 <_printf_common+0x30>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	6822      	ldr	r2, [r4, #0]
 8006fa6:	2306      	movs	r3, #6
 8006fa8:	0017      	movs	r7, r2
 8006faa:	401f      	ands	r7, r3
 8006fac:	421a      	tst	r2, r3
 8006fae:	d027      	beq.n	8007000 <_printf_common+0x8c>
 8006fb0:	0023      	movs	r3, r4
 8006fb2:	3343      	adds	r3, #67	; 0x43
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	1e5a      	subs	r2, r3, #1
 8006fb8:	4193      	sbcs	r3, r2
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	0692      	lsls	r2, r2, #26
 8006fbe:	d430      	bmi.n	8007022 <_printf_common+0xae>
 8006fc0:	0022      	movs	r2, r4
 8006fc2:	9901      	ldr	r1, [sp, #4]
 8006fc4:	9800      	ldr	r0, [sp, #0]
 8006fc6:	9e08      	ldr	r6, [sp, #32]
 8006fc8:	3243      	adds	r2, #67	; 0x43
 8006fca:	47b0      	blx	r6
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d025      	beq.n	800701c <_printf_common+0xa8>
 8006fd0:	2306      	movs	r3, #6
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	682a      	ldr	r2, [r5, #0]
 8006fd6:	68e1      	ldr	r1, [r4, #12]
 8006fd8:	2500      	movs	r5, #0
 8006fda:	4003      	ands	r3, r0
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d103      	bne.n	8006fe8 <_printf_common+0x74>
 8006fe0:	1a8d      	subs	r5, r1, r2
 8006fe2:	43eb      	mvns	r3, r5
 8006fe4:	17db      	asrs	r3, r3, #31
 8006fe6:	401d      	ands	r5, r3
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	6922      	ldr	r2, [r4, #16]
 8006fec:	4293      	cmp	r3, r2
 8006fee:	dd01      	ble.n	8006ff4 <_printf_common+0x80>
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	18ed      	adds	r5, r5, r3
 8006ff4:	2700      	movs	r7, #0
 8006ff6:	42bd      	cmp	r5, r7
 8006ff8:	d120      	bne.n	800703c <_printf_common+0xc8>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	e010      	b.n	8007020 <_printf_common+0xac>
 8006ffe:	3701      	adds	r7, #1
 8007000:	68e3      	ldr	r3, [r4, #12]
 8007002:	682a      	ldr	r2, [r5, #0]
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	42bb      	cmp	r3, r7
 8007008:	ddd2      	ble.n	8006fb0 <_printf_common+0x3c>
 800700a:	0022      	movs	r2, r4
 800700c:	2301      	movs	r3, #1
 800700e:	9901      	ldr	r1, [sp, #4]
 8007010:	9800      	ldr	r0, [sp, #0]
 8007012:	9e08      	ldr	r6, [sp, #32]
 8007014:	3219      	adds	r2, #25
 8007016:	47b0      	blx	r6
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d1f0      	bne.n	8006ffe <_printf_common+0x8a>
 800701c:	2001      	movs	r0, #1
 800701e:	4240      	negs	r0, r0
 8007020:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007022:	2030      	movs	r0, #48	; 0x30
 8007024:	18e1      	adds	r1, r4, r3
 8007026:	3143      	adds	r1, #67	; 0x43
 8007028:	7008      	strb	r0, [r1, #0]
 800702a:	0021      	movs	r1, r4
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	3145      	adds	r1, #69	; 0x45
 8007030:	7809      	ldrb	r1, [r1, #0]
 8007032:	18a2      	adds	r2, r4, r2
 8007034:	3243      	adds	r2, #67	; 0x43
 8007036:	3302      	adds	r3, #2
 8007038:	7011      	strb	r1, [r2, #0]
 800703a:	e7c1      	b.n	8006fc0 <_printf_common+0x4c>
 800703c:	0022      	movs	r2, r4
 800703e:	2301      	movs	r3, #1
 8007040:	9901      	ldr	r1, [sp, #4]
 8007042:	9800      	ldr	r0, [sp, #0]
 8007044:	9e08      	ldr	r6, [sp, #32]
 8007046:	321a      	adds	r2, #26
 8007048:	47b0      	blx	r6
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	d0e6      	beq.n	800701c <_printf_common+0xa8>
 800704e:	3701      	adds	r7, #1
 8007050:	e7d1      	b.n	8006ff6 <_printf_common+0x82>
	...

08007054 <_printf_i>:
 8007054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007056:	b08b      	sub	sp, #44	; 0x2c
 8007058:	9206      	str	r2, [sp, #24]
 800705a:	000a      	movs	r2, r1
 800705c:	3243      	adds	r2, #67	; 0x43
 800705e:	9307      	str	r3, [sp, #28]
 8007060:	9005      	str	r0, [sp, #20]
 8007062:	9204      	str	r2, [sp, #16]
 8007064:	7e0a      	ldrb	r2, [r1, #24]
 8007066:	000c      	movs	r4, r1
 8007068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800706a:	2a78      	cmp	r2, #120	; 0x78
 800706c:	d806      	bhi.n	800707c <_printf_i+0x28>
 800706e:	2a62      	cmp	r2, #98	; 0x62
 8007070:	d808      	bhi.n	8007084 <_printf_i+0x30>
 8007072:	2a00      	cmp	r2, #0
 8007074:	d100      	bne.n	8007078 <_printf_i+0x24>
 8007076:	e0c0      	b.n	80071fa <_printf_i+0x1a6>
 8007078:	2a58      	cmp	r2, #88	; 0x58
 800707a:	d052      	beq.n	8007122 <_printf_i+0xce>
 800707c:	0026      	movs	r6, r4
 800707e:	3642      	adds	r6, #66	; 0x42
 8007080:	7032      	strb	r2, [r6, #0]
 8007082:	e022      	b.n	80070ca <_printf_i+0x76>
 8007084:	0010      	movs	r0, r2
 8007086:	3863      	subs	r0, #99	; 0x63
 8007088:	2815      	cmp	r0, #21
 800708a:	d8f7      	bhi.n	800707c <_printf_i+0x28>
 800708c:	f7f9 f844 	bl	8000118 <__gnu_thumb1_case_shi>
 8007090:	001f0016 	.word	0x001f0016
 8007094:	fff6fff6 	.word	0xfff6fff6
 8007098:	fff6fff6 	.word	0xfff6fff6
 800709c:	fff6001f 	.word	0xfff6001f
 80070a0:	fff6fff6 	.word	0xfff6fff6
 80070a4:	00a8fff6 	.word	0x00a8fff6
 80070a8:	009a0036 	.word	0x009a0036
 80070ac:	fff6fff6 	.word	0xfff6fff6
 80070b0:	fff600b9 	.word	0xfff600b9
 80070b4:	fff60036 	.word	0xfff60036
 80070b8:	009efff6 	.word	0x009efff6
 80070bc:	0026      	movs	r6, r4
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	3642      	adds	r6, #66	; 0x42
 80070c2:	1d11      	adds	r1, r2, #4
 80070c4:	6019      	str	r1, [r3, #0]
 80070c6:	6813      	ldr	r3, [r2, #0]
 80070c8:	7033      	strb	r3, [r6, #0]
 80070ca:	2301      	movs	r3, #1
 80070cc:	e0a7      	b.n	800721e <_printf_i+0x1ca>
 80070ce:	6808      	ldr	r0, [r1, #0]
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	1d0a      	adds	r2, r1, #4
 80070d4:	0605      	lsls	r5, r0, #24
 80070d6:	d50b      	bpl.n	80070f0 <_printf_i+0x9c>
 80070d8:	680d      	ldr	r5, [r1, #0]
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	2d00      	cmp	r5, #0
 80070de:	da03      	bge.n	80070e8 <_printf_i+0x94>
 80070e0:	232d      	movs	r3, #45	; 0x2d
 80070e2:	9a04      	ldr	r2, [sp, #16]
 80070e4:	426d      	negs	r5, r5
 80070e6:	7013      	strb	r3, [r2, #0]
 80070e8:	4b61      	ldr	r3, [pc, #388]	; (8007270 <_printf_i+0x21c>)
 80070ea:	270a      	movs	r7, #10
 80070ec:	9303      	str	r3, [sp, #12]
 80070ee:	e032      	b.n	8007156 <_printf_i+0x102>
 80070f0:	680d      	ldr	r5, [r1, #0]
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	0641      	lsls	r1, r0, #25
 80070f6:	d5f1      	bpl.n	80070dc <_printf_i+0x88>
 80070f8:	b22d      	sxth	r5, r5
 80070fa:	e7ef      	b.n	80070dc <_printf_i+0x88>
 80070fc:	680d      	ldr	r5, [r1, #0]
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	1d08      	adds	r0, r1, #4
 8007102:	6018      	str	r0, [r3, #0]
 8007104:	062e      	lsls	r6, r5, #24
 8007106:	d501      	bpl.n	800710c <_printf_i+0xb8>
 8007108:	680d      	ldr	r5, [r1, #0]
 800710a:	e003      	b.n	8007114 <_printf_i+0xc0>
 800710c:	066d      	lsls	r5, r5, #25
 800710e:	d5fb      	bpl.n	8007108 <_printf_i+0xb4>
 8007110:	680d      	ldr	r5, [r1, #0]
 8007112:	b2ad      	uxth	r5, r5
 8007114:	4b56      	ldr	r3, [pc, #344]	; (8007270 <_printf_i+0x21c>)
 8007116:	270a      	movs	r7, #10
 8007118:	9303      	str	r3, [sp, #12]
 800711a:	2a6f      	cmp	r2, #111	; 0x6f
 800711c:	d117      	bne.n	800714e <_printf_i+0xfa>
 800711e:	2708      	movs	r7, #8
 8007120:	e015      	b.n	800714e <_printf_i+0xfa>
 8007122:	3145      	adds	r1, #69	; 0x45
 8007124:	700a      	strb	r2, [r1, #0]
 8007126:	4a52      	ldr	r2, [pc, #328]	; (8007270 <_printf_i+0x21c>)
 8007128:	9203      	str	r2, [sp, #12]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	6821      	ldr	r1, [r4, #0]
 800712e:	ca20      	ldmia	r2!, {r5}
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	0608      	lsls	r0, r1, #24
 8007134:	d550      	bpl.n	80071d8 <_printf_i+0x184>
 8007136:	07cb      	lsls	r3, r1, #31
 8007138:	d502      	bpl.n	8007140 <_printf_i+0xec>
 800713a:	2320      	movs	r3, #32
 800713c:	4319      	orrs	r1, r3
 800713e:	6021      	str	r1, [r4, #0]
 8007140:	2710      	movs	r7, #16
 8007142:	2d00      	cmp	r5, #0
 8007144:	d103      	bne.n	800714e <_printf_i+0xfa>
 8007146:	2320      	movs	r3, #32
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	439a      	bics	r2, r3
 800714c:	6022      	str	r2, [r4, #0]
 800714e:	0023      	movs	r3, r4
 8007150:	2200      	movs	r2, #0
 8007152:	3343      	adds	r3, #67	; 0x43
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	6863      	ldr	r3, [r4, #4]
 8007158:	60a3      	str	r3, [r4, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	db03      	blt.n	8007166 <_printf_i+0x112>
 800715e:	2204      	movs	r2, #4
 8007160:	6821      	ldr	r1, [r4, #0]
 8007162:	4391      	bics	r1, r2
 8007164:	6021      	str	r1, [r4, #0]
 8007166:	2d00      	cmp	r5, #0
 8007168:	d102      	bne.n	8007170 <_printf_i+0x11c>
 800716a:	9e04      	ldr	r6, [sp, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00c      	beq.n	800718a <_printf_i+0x136>
 8007170:	9e04      	ldr	r6, [sp, #16]
 8007172:	0028      	movs	r0, r5
 8007174:	0039      	movs	r1, r7
 8007176:	f7f9 f85f 	bl	8000238 <__aeabi_uidivmod>
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	3e01      	subs	r6, #1
 800717e:	5c5b      	ldrb	r3, [r3, r1]
 8007180:	7033      	strb	r3, [r6, #0]
 8007182:	002b      	movs	r3, r5
 8007184:	0005      	movs	r5, r0
 8007186:	429f      	cmp	r7, r3
 8007188:	d9f3      	bls.n	8007172 <_printf_i+0x11e>
 800718a:	2f08      	cmp	r7, #8
 800718c:	d109      	bne.n	80071a2 <_printf_i+0x14e>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	07db      	lsls	r3, r3, #31
 8007192:	d506      	bpl.n	80071a2 <_printf_i+0x14e>
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	6922      	ldr	r2, [r4, #16]
 8007198:	4293      	cmp	r3, r2
 800719a:	dc02      	bgt.n	80071a2 <_printf_i+0x14e>
 800719c:	2330      	movs	r3, #48	; 0x30
 800719e:	3e01      	subs	r6, #1
 80071a0:	7033      	strb	r3, [r6, #0]
 80071a2:	9b04      	ldr	r3, [sp, #16]
 80071a4:	1b9b      	subs	r3, r3, r6
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	9b07      	ldr	r3, [sp, #28]
 80071aa:	0021      	movs	r1, r4
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	9805      	ldr	r0, [sp, #20]
 80071b0:	9b06      	ldr	r3, [sp, #24]
 80071b2:	aa09      	add	r2, sp, #36	; 0x24
 80071b4:	f7ff fede 	bl	8006f74 <_printf_common>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d135      	bne.n	8007228 <_printf_i+0x1d4>
 80071bc:	2001      	movs	r0, #1
 80071be:	4240      	negs	r0, r0
 80071c0:	b00b      	add	sp, #44	; 0x2c
 80071c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c4:	2220      	movs	r2, #32
 80071c6:	6809      	ldr	r1, [r1, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	6022      	str	r2, [r4, #0]
 80071cc:	0022      	movs	r2, r4
 80071ce:	2178      	movs	r1, #120	; 0x78
 80071d0:	3245      	adds	r2, #69	; 0x45
 80071d2:	7011      	strb	r1, [r2, #0]
 80071d4:	4a27      	ldr	r2, [pc, #156]	; (8007274 <_printf_i+0x220>)
 80071d6:	e7a7      	b.n	8007128 <_printf_i+0xd4>
 80071d8:	0648      	lsls	r0, r1, #25
 80071da:	d5ac      	bpl.n	8007136 <_printf_i+0xe2>
 80071dc:	b2ad      	uxth	r5, r5
 80071de:	e7aa      	b.n	8007136 <_printf_i+0xe2>
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	680d      	ldr	r5, [r1, #0]
 80071e4:	1d10      	adds	r0, r2, #4
 80071e6:	6949      	ldr	r1, [r1, #20]
 80071e8:	6018      	str	r0, [r3, #0]
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	062e      	lsls	r6, r5, #24
 80071ee:	d501      	bpl.n	80071f4 <_printf_i+0x1a0>
 80071f0:	6019      	str	r1, [r3, #0]
 80071f2:	e002      	b.n	80071fa <_printf_i+0x1a6>
 80071f4:	066d      	lsls	r5, r5, #25
 80071f6:	d5fb      	bpl.n	80071f0 <_printf_i+0x19c>
 80071f8:	8019      	strh	r1, [r3, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	9e04      	ldr	r6, [sp, #16]
 80071fe:	6123      	str	r3, [r4, #16]
 8007200:	e7d2      	b.n	80071a8 <_printf_i+0x154>
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	1d11      	adds	r1, r2, #4
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	6816      	ldr	r6, [r2, #0]
 800720a:	2100      	movs	r1, #0
 800720c:	0030      	movs	r0, r6
 800720e:	6862      	ldr	r2, [r4, #4]
 8007210:	f000 f8ee 	bl	80073f0 <memchr>
 8007214:	2800      	cmp	r0, #0
 8007216:	d001      	beq.n	800721c <_printf_i+0x1c8>
 8007218:	1b80      	subs	r0, r0, r6
 800721a:	6060      	str	r0, [r4, #4]
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	6123      	str	r3, [r4, #16]
 8007220:	2300      	movs	r3, #0
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	7013      	strb	r3, [r2, #0]
 8007226:	e7bf      	b.n	80071a8 <_printf_i+0x154>
 8007228:	6923      	ldr	r3, [r4, #16]
 800722a:	0032      	movs	r2, r6
 800722c:	9906      	ldr	r1, [sp, #24]
 800722e:	9805      	ldr	r0, [sp, #20]
 8007230:	9d07      	ldr	r5, [sp, #28]
 8007232:	47a8      	blx	r5
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d0c1      	beq.n	80071bc <_printf_i+0x168>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	079b      	lsls	r3, r3, #30
 800723c:	d415      	bmi.n	800726a <_printf_i+0x216>
 800723e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007240:	68e0      	ldr	r0, [r4, #12]
 8007242:	4298      	cmp	r0, r3
 8007244:	dabc      	bge.n	80071c0 <_printf_i+0x16c>
 8007246:	0018      	movs	r0, r3
 8007248:	e7ba      	b.n	80071c0 <_printf_i+0x16c>
 800724a:	0022      	movs	r2, r4
 800724c:	2301      	movs	r3, #1
 800724e:	9906      	ldr	r1, [sp, #24]
 8007250:	9805      	ldr	r0, [sp, #20]
 8007252:	9e07      	ldr	r6, [sp, #28]
 8007254:	3219      	adds	r2, #25
 8007256:	47b0      	blx	r6
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d0af      	beq.n	80071bc <_printf_i+0x168>
 800725c:	3501      	adds	r5, #1
 800725e:	68e3      	ldr	r3, [r4, #12]
 8007260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	42ab      	cmp	r3, r5
 8007266:	dcf0      	bgt.n	800724a <_printf_i+0x1f6>
 8007268:	e7e9      	b.n	800723e <_printf_i+0x1ea>
 800726a:	2500      	movs	r5, #0
 800726c:	e7f7      	b.n	800725e <_printf_i+0x20a>
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	080077dd 	.word	0x080077dd
 8007274:	080077ee 	.word	0x080077ee

08007278 <_sbrk_r>:
 8007278:	2300      	movs	r3, #0
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	4d06      	ldr	r5, [pc, #24]	; (8007298 <_sbrk_r+0x20>)
 800727e:	0004      	movs	r4, r0
 8007280:	0008      	movs	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7fb fef0 	bl	8003068 <_sbrk>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d103      	bne.n	8007294 <_sbrk_r+0x1c>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d000      	beq.n	8007294 <_sbrk_r+0x1c>
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	bd70      	pop	{r4, r5, r6, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	200003b0 	.word	0x200003b0

0800729c <__sread>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	000c      	movs	r4, r1
 80072a0:	250e      	movs	r5, #14
 80072a2:	5f49      	ldrsh	r1, [r1, r5]
 80072a4:	f000 f8f8 	bl	8007498 <_read_r>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	db03      	blt.n	80072b4 <__sread+0x18>
 80072ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80072ae:	181b      	adds	r3, r3, r0
 80072b0:	6563      	str	r3, [r4, #84]	; 0x54
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	4a02      	ldr	r2, [pc, #8]	; (80072c0 <__sread+0x24>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	e7f9      	b.n	80072b2 <__sread+0x16>
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	ffffefff 	.word	0xffffefff

080072c4 <__swrite>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	001f      	movs	r7, r3
 80072c8:	898b      	ldrh	r3, [r1, #12]
 80072ca:	0005      	movs	r5, r0
 80072cc:	000c      	movs	r4, r1
 80072ce:	0016      	movs	r6, r2
 80072d0:	05db      	lsls	r3, r3, #23
 80072d2:	d505      	bpl.n	80072e0 <__swrite+0x1c>
 80072d4:	230e      	movs	r3, #14
 80072d6:	5ec9      	ldrsh	r1, [r1, r3]
 80072d8:	2200      	movs	r2, #0
 80072da:	2302      	movs	r3, #2
 80072dc:	f000 f874 	bl	80073c8 <_lseek_r>
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	4a05      	ldr	r2, [pc, #20]	; (80072f8 <__swrite+0x34>)
 80072e4:	0028      	movs	r0, r5
 80072e6:	4013      	ands	r3, r2
 80072e8:	81a3      	strh	r3, [r4, #12]
 80072ea:	0032      	movs	r2, r6
 80072ec:	230e      	movs	r3, #14
 80072ee:	5ee1      	ldrsh	r1, [r4, r3]
 80072f0:	003b      	movs	r3, r7
 80072f2:	f000 f81f 	bl	8007334 <_write_r>
 80072f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f8:	ffffefff 	.word	0xffffefff

080072fc <__sseek>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	000c      	movs	r4, r1
 8007300:	250e      	movs	r5, #14
 8007302:	5f49      	ldrsh	r1, [r1, r5]
 8007304:	f000 f860 	bl	80073c8 <_lseek_r>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	1c42      	adds	r2, r0, #1
 800730c:	d103      	bne.n	8007316 <__sseek+0x1a>
 800730e:	4a05      	ldr	r2, [pc, #20]	; (8007324 <__sseek+0x28>)
 8007310:	4013      	ands	r3, r2
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	2280      	movs	r2, #128	; 0x80
 8007318:	0152      	lsls	r2, r2, #5
 800731a:	4313      	orrs	r3, r2
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	6560      	str	r0, [r4, #84]	; 0x54
 8007320:	e7f8      	b.n	8007314 <__sseek+0x18>
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	ffffefff 	.word	0xffffefff

08007328 <__sclose>:
 8007328:	b510      	push	{r4, lr}
 800732a:	230e      	movs	r3, #14
 800732c:	5ec9      	ldrsh	r1, [r1, r3]
 800732e:	f000 f815 	bl	800735c <_close_r>
 8007332:	bd10      	pop	{r4, pc}

08007334 <_write_r>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	0004      	movs	r4, r0
 8007338:	0008      	movs	r0, r1
 800733a:	0011      	movs	r1, r2
 800733c:	001a      	movs	r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	4d05      	ldr	r5, [pc, #20]	; (8007358 <_write_r+0x24>)
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fb fe48 	bl	8002fd8 <_write>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d103      	bne.n	8007354 <_write_r+0x20>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d000      	beq.n	8007354 <_write_r+0x20>
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	bd70      	pop	{r4, r5, r6, pc}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	200003b0 	.word	0x200003b0

0800735c <_close_r>:
 800735c:	2300      	movs	r3, #0
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	4d06      	ldr	r5, [pc, #24]	; (800737c <_close_r+0x20>)
 8007362:	0004      	movs	r4, r0
 8007364:	0008      	movs	r0, r1
 8007366:	602b      	str	r3, [r5, #0]
 8007368:	f7fb fe52 	bl	8003010 <_close>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d103      	bne.n	8007378 <_close_r+0x1c>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d000      	beq.n	8007378 <_close_r+0x1c>
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	bd70      	pop	{r4, r5, r6, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	200003b0 	.word	0x200003b0

08007380 <_fstat_r>:
 8007380:	2300      	movs	r3, #0
 8007382:	b570      	push	{r4, r5, r6, lr}
 8007384:	4d06      	ldr	r5, [pc, #24]	; (80073a0 <_fstat_r+0x20>)
 8007386:	0004      	movs	r4, r0
 8007388:	0008      	movs	r0, r1
 800738a:	0011      	movs	r1, r2
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f7fb fe49 	bl	8003024 <_fstat>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d103      	bne.n	800739e <_fstat_r+0x1e>
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d000      	beq.n	800739e <_fstat_r+0x1e>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	200003b0 	.word	0x200003b0

080073a4 <_isatty_r>:
 80073a4:	2300      	movs	r3, #0
 80073a6:	b570      	push	{r4, r5, r6, lr}
 80073a8:	4d06      	ldr	r5, [pc, #24]	; (80073c4 <_isatty_r+0x20>)
 80073aa:	0004      	movs	r4, r0
 80073ac:	0008      	movs	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7fb fe46 	bl	8003040 <_isatty>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d103      	bne.n	80073c0 <_isatty_r+0x1c>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d000      	beq.n	80073c0 <_isatty_r+0x1c>
 80073be:	6023      	str	r3, [r4, #0]
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	200003b0 	.word	0x200003b0

080073c8 <_lseek_r>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	0004      	movs	r4, r0
 80073cc:	0008      	movs	r0, r1
 80073ce:	0011      	movs	r1, r2
 80073d0:	001a      	movs	r2, r3
 80073d2:	2300      	movs	r3, #0
 80073d4:	4d05      	ldr	r5, [pc, #20]	; (80073ec <_lseek_r+0x24>)
 80073d6:	602b      	str	r3, [r5, #0]
 80073d8:	f7fb fe3b 	bl	8003052 <_lseek>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d103      	bne.n	80073e8 <_lseek_r+0x20>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d000      	beq.n	80073e8 <_lseek_r+0x20>
 80073e6:	6023      	str	r3, [r4, #0]
 80073e8:	bd70      	pop	{r4, r5, r6, pc}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	200003b0 	.word	0x200003b0

080073f0 <memchr>:
 80073f0:	b2c9      	uxtb	r1, r1
 80073f2:	1882      	adds	r2, r0, r2
 80073f4:	4290      	cmp	r0, r2
 80073f6:	d101      	bne.n	80073fc <memchr+0xc>
 80073f8:	2000      	movs	r0, #0
 80073fa:	4770      	bx	lr
 80073fc:	7803      	ldrb	r3, [r0, #0]
 80073fe:	428b      	cmp	r3, r1
 8007400:	d0fb      	beq.n	80073fa <memchr+0xa>
 8007402:	3001      	adds	r0, #1
 8007404:	e7f6      	b.n	80073f4 <memchr+0x4>

08007406 <memmove>:
 8007406:	b510      	push	{r4, lr}
 8007408:	4288      	cmp	r0, r1
 800740a:	d902      	bls.n	8007412 <memmove+0xc>
 800740c:	188b      	adds	r3, r1, r2
 800740e:	4298      	cmp	r0, r3
 8007410:	d303      	bcc.n	800741a <memmove+0x14>
 8007412:	2300      	movs	r3, #0
 8007414:	e007      	b.n	8007426 <memmove+0x20>
 8007416:	5c8b      	ldrb	r3, [r1, r2]
 8007418:	5483      	strb	r3, [r0, r2]
 800741a:	3a01      	subs	r2, #1
 800741c:	d2fb      	bcs.n	8007416 <memmove+0x10>
 800741e:	bd10      	pop	{r4, pc}
 8007420:	5ccc      	ldrb	r4, [r1, r3]
 8007422:	54c4      	strb	r4, [r0, r3]
 8007424:	3301      	adds	r3, #1
 8007426:	429a      	cmp	r2, r3
 8007428:	d1fa      	bne.n	8007420 <memmove+0x1a>
 800742a:	e7f8      	b.n	800741e <memmove+0x18>

0800742c <__malloc_lock>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4802      	ldr	r0, [pc, #8]	; (8007438 <__malloc_lock+0xc>)
 8007430:	f7ff fb27 	bl	8006a82 <__retarget_lock_acquire_recursive>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	200003a8 	.word	0x200003a8

0800743c <__malloc_unlock>:
 800743c:	b510      	push	{r4, lr}
 800743e:	4802      	ldr	r0, [pc, #8]	; (8007448 <__malloc_unlock+0xc>)
 8007440:	f7ff fb20 	bl	8006a84 <__retarget_lock_release_recursive>
 8007444:	bd10      	pop	{r4, pc}
 8007446:	46c0      	nop			; (mov r8, r8)
 8007448:	200003a8 	.word	0x200003a8

0800744c <_realloc_r>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	0007      	movs	r7, r0
 8007450:	000d      	movs	r5, r1
 8007452:	0016      	movs	r6, r2
 8007454:	2900      	cmp	r1, #0
 8007456:	d105      	bne.n	8007464 <_realloc_r+0x18>
 8007458:	0011      	movs	r1, r2
 800745a:	f7ff fbcb 	bl	8006bf4 <_malloc_r>
 800745e:	0004      	movs	r4, r0
 8007460:	0020      	movs	r0, r4
 8007462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007464:	2a00      	cmp	r2, #0
 8007466:	d103      	bne.n	8007470 <_realloc_r+0x24>
 8007468:	f7ff fb7a 	bl	8006b60 <_free_r>
 800746c:	0034      	movs	r4, r6
 800746e:	e7f7      	b.n	8007460 <_realloc_r+0x14>
 8007470:	f000 f826 	bl	80074c0 <_malloc_usable_size_r>
 8007474:	002c      	movs	r4, r5
 8007476:	42b0      	cmp	r0, r6
 8007478:	d2f2      	bcs.n	8007460 <_realloc_r+0x14>
 800747a:	0031      	movs	r1, r6
 800747c:	0038      	movs	r0, r7
 800747e:	f7ff fbb9 	bl	8006bf4 <_malloc_r>
 8007482:	1e04      	subs	r4, r0, #0
 8007484:	d0ec      	beq.n	8007460 <_realloc_r+0x14>
 8007486:	0029      	movs	r1, r5
 8007488:	0032      	movs	r2, r6
 800748a:	f7fe ff99 	bl	80063c0 <memcpy>
 800748e:	0029      	movs	r1, r5
 8007490:	0038      	movs	r0, r7
 8007492:	f7ff fb65 	bl	8006b60 <_free_r>
 8007496:	e7e3      	b.n	8007460 <_realloc_r+0x14>

08007498 <_read_r>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	0004      	movs	r4, r0
 800749c:	0008      	movs	r0, r1
 800749e:	0011      	movs	r1, r2
 80074a0:	001a      	movs	r2, r3
 80074a2:	2300      	movs	r3, #0
 80074a4:	4d05      	ldr	r5, [pc, #20]	; (80074bc <_read_r+0x24>)
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fb fd79 	bl	8002f9e <_read>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d103      	bne.n	80074b8 <_read_r+0x20>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d000      	beq.n	80074b8 <_read_r+0x20>
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	200003b0 	.word	0x200003b0

080074c0 <_malloc_usable_size_r>:
 80074c0:	1f0b      	subs	r3, r1, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	1f18      	subs	r0, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	da01      	bge.n	80074ce <_malloc_usable_size_r+0xe>
 80074ca:	580b      	ldr	r3, [r1, r0]
 80074cc:	18c0      	adds	r0, r0, r3
 80074ce:	4770      	bx	lr

080074d0 <_init>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr

080074dc <_fini>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr
