
VERICI-DEVRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e0c  08005e0c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e14  08005e14  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08005e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001f4  08006010  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006010  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120a7  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fa  00000000  00000000  000322c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00034bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00035870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012df6  00000000  00000000  00036418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf2  00000000  00000000  0004920e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068016  00000000  00000000  00058f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0f16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  000c0f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c28 	.word	0x08005c28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08005c28 	.word	0x08005c28

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8ba 	bl	8000640 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8b5 	bl	8000640 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzdi2>:
 8000640:	b510      	push	{r4, lr}
 8000642:	2900      	cmp	r1, #0
 8000644:	d103      	bne.n	800064e <__clzdi2+0xe>
 8000646:	f000 f807 	bl	8000658 <__clzsi2>
 800064a:	3020      	adds	r0, #32
 800064c:	e002      	b.n	8000654 <__clzdi2+0x14>
 800064e:	1c08      	adds	r0, r1, #0
 8000650:	f000 f802 	bl	8000658 <__clzsi2>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <InputSDIO>:
**Name: 	vSpi3Init
**Func: 	Init Spi-3 Config
**Note:
**********************************************************/
void InputSDIO(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	240c      	movs	r4, #12
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f004 fa38 	bl	8004b1a <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <InputSDIO+0x70>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <InputSDIO+0x70>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <InputSDIO+0x70>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <InputSDIO+0x70>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <InputSDIO+0x70>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <InputSDIO+0x70>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	00d2      	lsls	r2, r2, #3
 80006e0:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(SDIO_GPIO_Port, &GPIO_InitStruct);
 80006ee:	193a      	adds	r2, r7, r4
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 ff1a 	bl	8002530 <HAL_GPIO_Init>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b009      	add	sp, #36	; 0x24
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	40021000 	.word	0x40021000

08000708 <OutputSDIO>:
void OutputSDIO(){
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	240c      	movs	r4, #12
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2314      	movs	r3, #20
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f004 f9fe 	bl	8004b1a <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <OutputSDIO+0x88>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <OutputSDIO+0x88>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <OutputSDIO+0x88>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <OutputSDIO+0x88>)
 8000738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <OutputSDIO+0x88>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <OutputSDIO+0x88>)
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	00d9      	lsls	r1, r3, #3
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2200      	movs	r2, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f002 f874 	bl	8002846 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  GPIO_InitStruct.Pin = SDIO_Pin;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	00d2      	lsls	r2, r2, #3
 8000764:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	193a      	adds	r2, r7, r4
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fed5 	bl	8002530 <HAL_GPIO_Init>


}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b009      	add	sp, #36	; 0x24
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <OutputSDCK>:

void OutputSDCK(void){
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 f9b8 	bl	8004b1a <memset>

	  	  /* GPIO Ports Clock Enable */
	  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <OutputSDCK+0x88>)
 80007ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <OutputSDCK+0x88>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	430a      	orrs	r2, r1
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <OutputSDCK+0x88>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
	  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <OutputSDCK+0x88>)
 80007c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <OutputSDCK+0x88>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <OutputSDCK+0x88>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

	  	  /*Configure GPIO pin Output Level */
	  	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	0099      	lsls	r1, r3, #2
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2200      	movs	r2, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 f82e 	bl	8002846 <HAL_GPIO_WritePin>

	  	  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
	  	  GPIO_InitStruct.Pin = SCLK_Pin;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	601a      	str	r2, [r3, #0]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
	  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
	  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	193a      	adds	r2, r7, r4
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f001 fe8f 	bl	8002530 <HAL_GPIO_Init>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	; 0x24
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <OutputFCSB>:

void OutputFCSB(void){
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	240c      	movs	r4, #12
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2314      	movs	r3, #20
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 f972 	bl	8004b1a <memset>

		  	  /* GPIO Ports Clock Enable */
		  	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <OutputFCSB+0x84>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <OutputFCSB+0x84>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <OutputFCSB+0x84>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
		  	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <OutputFCSB+0x84>)
 8000850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <OutputFCSB+0x84>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <OutputFCSB+0x84>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FCSB_GPIO_Port, FCSB_Pin, GPIO_PIN_RESET);
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2200      	movs	r2, #0
 800086c:	2104      	movs	r1, #4
 800086e:	0018      	movs	r0, r3
 8000870:	f001 ffe9 	bl	8002846 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = FCSB_Pin;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2204      	movs	r2, #4
 800087a:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	187a      	adds	r2, r7, r1
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fe4a 	bl	8002530 <HAL_GPIO_Init>


}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b009      	add	sp, #36	; 0x24
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <OutputCSB>:

void OutputCSB(void){
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	240c      	movs	r4, #12
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f004 f92e 	bl	8004b1a <memset>

	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <OutputCSB+0x84>)
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <OutputCSB+0x84>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	430a      	orrs	r2, r1
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <OutputCSB+0x84>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <OutputCSB+0x84>)
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <OutputCSB+0x84>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <OutputCSB+0x84>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSB_GPIO_Port, CSB_Pin, GPIO_PIN_RESET);
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 ffa5 	bl	8002846 <HAL_GPIO_WritePin>
  	GPIO_InitStruct.Pin = CSB_Pin;
 80008fc:	0021      	movs	r1, r4
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	601a      	str	r2, [r3, #0]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2201      	movs	r2, #1
 8000908:	605a      	str	r2, [r3, #4]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	187a      	adds	r2, r7, r1
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f001 fe06 	bl	8002530 <HAL_GPIO_Init>
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b009      	add	sp, #36	; 0x24
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40021000 	.word	0x40021000

08000930 <_delay_us>:
void _delay_us(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
 	// HAL_UART_Transmit( &hlpuart1, (uint8_t *)"giriyor\r\n",9, 100);

	//
	  	//  }
	 //HAL_Delay(1);
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <vSpi3Init>:
void vSpi3Init(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
	OutputCSB();
 800093e:	f7ff ffb3 	bl	80008a8 <OutputCSB>
	OutputFCSB();
 8000942:	f7ff ff6d 	bl	8000820 <OutputFCSB>
	OutputSDCK();
 8000946:	f7ff ff25 	bl	8000794 <OutputSDCK>
	OutputSDIO();
 800094a:	f7ff fedd 	bl	8000708 <OutputSDIO>

	SetCSB();
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2201      	movs	r2, #1
 8000954:	2102      	movs	r1, #2
 8000956:	0018      	movs	r0, r3
 8000958:	f001 ff75 	bl	8002846 <HAL_GPIO_WritePin>
	SetFCSB();
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2201      	movs	r2, #1
 8000962:	2104      	movs	r1, #4
 8000964:	0018      	movs	r0, r3
 8000966:	f001 ff6e 	bl	8002846 <HAL_GPIO_WritePin>
	SetSDIO();
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	00d9      	lsls	r1, r3, #3
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2201      	movs	r2, #1
 8000974:	0018      	movs	r0, r3
 8000976:	f001 ff66 	bl	8002846 <HAL_GPIO_WritePin>
	ClrSDCK();
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	0099      	lsls	r1, r3, #2
 800097e:	23a0      	movs	r3, #160	; 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f001 ff5e 	bl	8002846 <HAL_GPIO_WritePin>
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <vSpi3WriteByte>:
**Func: 	SPI-3 send one byte
**Input:
**Output:  
**********************************************************/
void vSpi3WriteByte(byte dat)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	701a      	strb	r2, [r3, #0]

 	byte bitcnt;
 
	SetFCSB();				//FCSB = 1;
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	2201      	movs	r2, #1
 80009a2:	2104      	movs	r1, #4
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 ff4e 	bl	8002846 <HAL_GPIO_WritePin>
 
 	OutputSDIO();			//SDA output mode
 80009aa:	f7ff fead 	bl	8000708 <OutputSDIO>
 	SetSDIO();				//    output 1
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	00d9      	lsls	r1, r3, #3
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2201      	movs	r2, #1
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 ff44 	bl	8002846 <HAL_GPIO_WritePin>
 
 	ClrSDCK();
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	0099      	lsls	r1, r3, #2
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2200      	movs	r2, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 ff3c 	bl	8002846 <HAL_GPIO_WritePin>
 	ClrCSB();
 80009ce:	23a0      	movs	r3, #160	; 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	2200      	movs	r2, #0
 80009d4:	2102      	movs	r1, #2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 ff35 	bl	8002846 <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2208      	movs	r2, #8
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e034      	b.n	8000a50 <vSpi3WriteByte+0xc0>
 		{
		ClrSDCK();
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	0099      	lsls	r1, r3, #2
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2200      	movs	r2, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 ff28 	bl	8002846 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 80009f6:	f7ff ff9b 	bl	8000930 <_delay_us>
 		if(dat&0x80)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	da08      	bge.n	8000a16 <vSpi3WriteByte+0x86>
 			SetSDIO();
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	00d9      	lsls	r1, r3, #3
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 ff19 	bl	8002846 <HAL_GPIO_WritePin>
 8000a14:	e007      	b.n	8000a26 <vSpi3WriteByte+0x96>
 		else
 			ClrSDIO();
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	00d9      	lsls	r1, r3, #3
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2200      	movs	r2, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 ff10 	bl	8002846 <HAL_GPIO_WritePin>
		SetSDCK();
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	0099      	lsls	r1, r3, #2
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	2201      	movs	r2, #1
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 ff08 	bl	8002846 <HAL_GPIO_WritePin>
 		dat <<= 1;
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	18db      	adds	r3, r3, r3
 8000a3e:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000a40:	f7ff ff76 	bl	8000930 <_delay_us>
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000a44:	210f      	movs	r1, #15
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1c5      	bne.n	80009e6 <vSpi3WriteByte+0x56>
 		}
 	ClrSDCK();
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	0099      	lsls	r1, r3, #2
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 feee 	bl	8002846 <HAL_GPIO_WritePin>
 	SetSDIO();
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	00d9      	lsls	r1, r3, #3
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2201      	movs	r2, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fee6 	bl	8002846 <HAL_GPIO_WritePin>
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <bSpi3ReadByte>:
**Func: 	SPI-3 read one byte
**Input:
**Output:  
**********************************************************/
byte bSpi3ReadByte(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
	byte RdPara = 0;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
  
 	ClrCSB();
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 fed5 	bl	8002846 <HAL_GPIO_WritePin>
 	InputSDIO();
 8000a9c:	f7ff fdfa 	bl	8000694 <InputSDIO>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e033      	b.n	8000b10 <bSpi3ReadByte+0x8e>
 		{
 		ClrSDCK();
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	0099      	lsls	r1, r3, #2
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 fec7 	bl	8002846 <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 8000ab8:	1dfa      	adds	r2, r7, #7
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	18db      	adds	r3, r3, r3
 8000ac0:	7013      	strb	r3, [r2, #0]
 		_delay_us(); //_delay_us(1);
 8000ac2:	f7ff ff35 	bl	8000930 <_delay_us>
 		SetSDCK();
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	0099      	lsls	r1, r3, #2
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	2201      	movs	r2, #1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 feb8 	bl	8002846 <HAL_GPIO_WritePin>
 		_delay_us(); //_delay_us(1);
 8000ad6:	f7ff ff2b 	bl	8000930 <_delay_us>

 		if(SDIO_H())
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	00da      	lsls	r2, r3, #3
 8000ade:	23a0      	movs	r3, #160	; 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fe91 	bl	800280c <HAL_GPIO_ReadPin>
 8000aea:	0003      	movs	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d106      	bne.n	8000afe <bSpi3ReadByte+0x7c>
 			RdPara |= 0x01;
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	430a      	orrs	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e003      	b.n	8000b06 <bSpi3ReadByte+0x84>
 		else
 			RdPara |= 0x00;
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	1dfa      	adds	r2, r7, #7
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000b06:	1dbb      	adds	r3, r7, #6
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1c7      	bne.n	8000aa8 <bSpi3ReadByte+0x26>
 		}
 	ClrSDCK();
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	0099      	lsls	r1, r3, #2
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 fe8f 	bl	8002846 <HAL_GPIO_WritePin>
 	OutputSDIO();
 8000b28:	f7ff fdee 	bl	8000708 <OutputSDIO>
 	SetSDIO();
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	00d9      	lsls	r1, r3, #3
 8000b30:	23a0      	movs	r3, #160	; 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2201      	movs	r2, #1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 fe85 	bl	8002846 <HAL_GPIO_WritePin>
 	SetCSB();
 8000b3c:	23a0      	movs	r3, #160	; 0xa0
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 fe7e 	bl	8002846 <HAL_GPIO_WritePin>
 	return(RdPara);
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <vSpi3Write>:
**Func: 	SPI Write One word
**Input: 	Write word
**Output:	none
**********************************************************/
void vSpi3Write(word dat)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 	vSpi3WriteByte((byte)(dat>>8)&0x7F);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	227f      	movs	r2, #127	; 0x7f
 8000b66:	4013      	ands	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff ff10 	bl	8000990 <vSpi3WriteByte>
 	vSpi3WriteByte((byte)dat);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff0b 	bl	8000990 <vSpi3WriteByte>
 	SetCSB();
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2102      	movs	r1, #2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 fe5f 	bl	8002846 <HAL_GPIO_WritePin>
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <bSpi3Read>:
**Func: 	SPI-3 Read One byte
**Input: 	readout addresss
**Output:	readout byte
**********************************************************/
byte bSpi3Read(byte addr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
  	vSpi3WriteByte(addr|0x80);
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	4252      	negs	r2, r2
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fef1 	bl	8000990 <vSpi3WriteByte>
 	return(bSpi3ReadByte());
 8000bae:	f7ff ff68 	bl	8000a82 <bSpi3ReadByte>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <vSpi3WriteFIFO>:
**Func: 	SPI-3 send one byte to FIFO
**Input: 	one byte buffer
**Output:	none
**********************************************************/
void vSpi3WriteFIFO(byte dat)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	701a      	strb	r2, [r3, #0]
 	byte bitcnt;
 
 	SetCSB();
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2102      	movs	r1, #2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 fe38 	bl	8002846 <HAL_GPIO_WritePin>
	OutputSDIO();
 8000bd6:	f7ff fd97 	bl	8000708 <OutputSDIO>
	ClrSDCK();
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	0099      	lsls	r1, r3, #2
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2200      	movs	r2, #0
 8000be4:	0018      	movs	r0, r3
 8000be6:	f001 fe2e 	bl	8002846 <HAL_GPIO_WritePin>
 	ClrFCSB();			//FCSB = 0
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 fe27 	bl	8002846 <HAL_GPIO_WritePin>
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e034      	b.n	8000c6c <vSpi3WriteFIFO+0xb0>
 		{
 		ClrSDCK();
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	0099      	lsls	r1, r3, #2
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fe1a 	bl	8002846 <HAL_GPIO_WritePin>

 		if(dat&0x80)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da08      	bge.n	8000c2e <vSpi3WriteFIFO+0x72>
			SetSDIO();
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	00d9      	lsls	r1, r3, #3
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2201      	movs	r2, #1
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 fe0d 	bl	8002846 <HAL_GPIO_WritePin>
 8000c2c:	e007      	b.n	8000c3e <vSpi3WriteFIFO+0x82>
		else
			ClrSDIO();
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	00d9      	lsls	r1, r3, #3
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	2200      	movs	r2, #0
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fe04 	bl	8002846 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000c3e:	f7ff fe77 	bl	8000930 <_delay_us>
		SetSDCK();
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	0099      	lsls	r1, r3, #2
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f001 fdfa 	bl	8002846 <HAL_GPIO_WritePin>
		_delay_us(); //_delay_us(1);
 8000c52:	f7ff fe6d 	bl	8000930 <_delay_us>
 		dat <<= 1;
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	18db      	adds	r3, r3, r3
 8000c5e:	7013      	strb	r3, [r2, #0]
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000c60:	210f      	movs	r1, #15
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1c5      	bne.n	8000c02 <vSpi3WriteFIFO+0x46>
 		}
 	ClrSDCK();
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	0099      	lsls	r1, r3, #2
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	2200      	movs	r2, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fde0 	bl	8002846 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000c86:	f7ff fe53 	bl	8000930 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000c8a:	f7ff fe51 	bl	8000930 <_delay_us>
 	SetFCSB();
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	2201      	movs	r2, #1
 8000c94:	2104      	movs	r1, #4
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 fdd5 	bl	8002846 <HAL_GPIO_WritePin>
	SetSDIO();
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	00d9      	lsls	r1, r3, #3
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 fdcd 	bl	8002846 <HAL_GPIO_WritePin>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000cac:	f7ff fe40 	bl	8000930 <_delay_us>
 	_delay_us(); //_delay_us(1);		//Time-Critical
 8000cb0:	f7ff fe3e 	bl	8000930 <_delay_us>
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b004      	add	sp, #16
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <vSpi3BurstWriteFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length & head pointer
**Output:	none
**********************************************************/
void vSpi3BurstWriteFIFO(byte ptr[], byte length)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	1cfb      	adds	r3, r7, #3
 8000cc8:	701a      	strb	r2, [r3, #0]
 	byte i;
 	if(length!=0x00)
 8000cca:	1cfb      	adds	r3, r7, #3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01a      	beq.n	8000d08 <vSpi3BurstWriteFIFO+0x4c>
	 	{
 		for(i=0;i<length;i++)
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e00d      	b.n	8000cf8 <vSpi3BurstWriteFIFO+0x3c>
 			vSpi3WriteFIFO(ptr[i]);
 8000cdc:	240f      	movs	r4, #15
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ff67 	bl	8000bbc <vSpi3WriteFIFO>
 		for(i=0;i<length;i++)
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	3201      	adds	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fa      	adds	r2, r7, r3
 8000cfc:	1cfb      	adds	r3, r7, #3
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ea      	bcc.n	8000cdc <vSpi3BurstWriteFIFO+0x20>
 		}
 	return;
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46c0      	nop			; (mov r8, r8)
}
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b005      	add	sp, #20
 8000d0e:	bd90      	pop	{r4, r7, pc}

08000d10 <GPO3In>:
**Function: Entry Tx Mode
**Input:    none
**Output:   none
**********************************************************/
void GPO3In(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	240c      	movs	r4, #12
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2314      	movs	r3, #20
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f003 fefa 	bl	8004b1a <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <GPO3In+0x70>)
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <GPO3In+0x70>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <GPO3In+0x70>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <GPO3In+0x70>)
 8000d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <GPO3In+0x70>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <GPO3In+0x70>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : GPO3_Pin */
	  GPIO_InitStruct.Pin = GPO3_Pin;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0152      	lsls	r2, r2, #5
 8000d5c:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPO3_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	193a      	adds	r2, r7, r4
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 fbdc 	bl	8002530 <HAL_GPIO_Init>
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b009      	add	sp, #36	; 0x24
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <bGoTx>:

byte bGoTx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	}
	if(i>=100)
		return(false);
	#endif

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <bGoTx+0x7c>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fee2 	bl	8000b56 <vSpi3Write>
	for(i=0; i<100; i++){
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e020      	b.n	8000ddc <bGoTx+0x58>
		for(i=0; i<100; i++){
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e006      	b.n	8000db0 <bGoTx+0x2c>
					_delay_us(); //_delay_us(100);
 8000da2:	f7ff fdc5 	bl	8000930 <_delay_us>
		for(i=0; i<100; i++){
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	3201      	adds	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b63      	cmp	r3, #99	; 0x63
 8000db6:	d9f4      	bls.n	8000da2 <bGoTx+0x1e>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000db8:	2061      	movs	r0, #97	; 0x61
 8000dba:	f7ff fee9 	bl	8000b90 <bSpi3Read>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	1dbb      	adds	r3, r7, #6
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_TX)
 8000dca:	1dbb      	adds	r3, r7, #6
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d009      	beq.n	8000de6 <bGoTx+0x62>
	for(i=0; i<100; i++){
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	3201      	adds	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b63      	cmp	r3, #99	; 0x63
 8000de2:	d9da      	bls.n	8000d9a <bGoTx+0x16>
 8000de4:	e000      	b.n	8000de8 <bGoTx+0x64>
			break;
 8000de6:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b63      	cmp	r3, #99	; 0x63
 8000dee:	d901      	bls.n	8000df4 <bGoTx+0x70>
		return(false);
 8000df0:	2300      	movs	r3, #0
 8000df2:	e000      	b.n	8000df6 <bGoTx+0x72>
	else
		return(true);
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	00006040 	.word	0x00006040

08000e04 <bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoSleep(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	byte tmp;

	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <bGoSleep+0x4c>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fea2 	bl	8000b56 <vSpi3Write>
	for(int i=0; i<100; i++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	e004      	b.n	8000e22 <bGoSleep+0x1e>
				_delay_us(); //_delay_us(100);
 8000e18:	f7ff fd8a 	bl	8000930 <_delay_us>
	for(int i=0; i<100; i++){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b63      	cmp	r3, #99	; 0x63
 8000e26:	ddf7      	ble.n	8000e18 <bGoSleep+0x14>
			}	//enough?
	tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000e28:	2061      	movs	r0, #97	; 0x61
 8000e2a:	f7ff feb1 	bl	8000b90 <bSpi3Read>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	0019      	movs	r1, r3
 8000e32:	1cfb      	adds	r3, r7, #3
 8000e34:	220f      	movs	r2, #15
 8000e36:	400a      	ands	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_GO_SLEEP)
 8000e3a:	1cfb      	adds	r3, r7, #3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	d101      	bne.n	8000e46 <bGoSleep+0x42>
		return(true);
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <bGoSleep+0x44>
	else
		return(false);
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	00006010 	.word	0x00006010

08000e54 <bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
byte bGoStandby(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	byte tmp, i;

	RssiTrig = false;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <bGoStandby+0x80>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <bGoStandby+0x84>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fe77 	bl	8000b56 <vSpi3Write>
	for(i=0; i<100; i++){
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e020      	b.n	8000eb2 <bGoStandby+0x5e>
		for(i=0; i<100; i++){
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e006      	b.n	8000e86 <bGoStandby+0x32>
					_delay_us(); //_delay_us(100);
 8000e78:	f7ff fd5a 	bl	8000930 <_delay_us>
		for(i=0; i<100; i++){
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	3201      	adds	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b63      	cmp	r3, #99	; 0x63
 8000e8c:	d9f4      	bls.n	8000e78 <bGoStandby+0x24>
				}
		tmp = (MODE_MASK_STA & bSpi3Read(CMT23_MODE_STA));
 8000e8e:	2061      	movs	r0, #97	; 0x61
 8000e90:	f7ff fe7e 	bl	8000b90 <bSpi3Read>
 8000e94:	0003      	movs	r3, r0
 8000e96:	0019      	movs	r1, r3
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
		if(tmp==MODE_STA_STBY)
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d009      	beq.n	8000ebc <bGoStandby+0x68>
	for(i=0; i<100; i++){
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	3201      	adds	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b63      	cmp	r3, #99	; 0x63
 8000eb8:	d9da      	bls.n	8000e70 <bGoStandby+0x1c>
 8000eba:	e000      	b.n	8000ebe <bGoStandby+0x6a>
			break;
 8000ebc:	46c0      	nop			; (mov r8, r8)
	}
	if(i>=100)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b63      	cmp	r3, #99	; 0x63
 8000ec4:	d901      	bls.n	8000eca <bGoStandby+0x76>
		return(false);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <bGoStandby+0x78>
	else
		return(true);
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200002f1 	.word	0x200002f1
 8000ed8:	00006002 	.word	0x00006002

08000edc <vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void vSoftReset(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	vSpi3Write(((word)CMT23_SOFTRST<<8)+0xFF);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <vSoftReset+0x18>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fe37 	bl	8000b56 <vSpi3Write>
	HAL_Delay(1);				//enough?
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 fa41 	bl	8002370 <HAL_Delay>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	00007fff 	.word	0x00007fff

08000ef8 <vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void vGpioFuncCfg(byte io_cfg)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	0002      	movs	r2, r0
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_IO_SEL<<8)+io_cfg);
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	22ca      	movs	r2, #202	; 0xca
 8000f0a:	01d2      	lsls	r2, r2, #7
 8000f0c:	4694      	mov	ip, r2
 8000f0e:	4463      	add	r3, ip
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fe20 	bl	8000b56 <vSpi3Write>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <vIntSrcCfg>:
**Function: config interrupt source  
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void vIntSrcCfg(byte int_1, byte int_2)
{
 8000f1e:	b590      	push	{r4, r7, lr}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	0002      	movs	r2, r0
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	1dbb      	adds	r3, r7, #6
 8000f2c:	1c0a      	adds	r2, r1, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = INT_MASK & bSpi3Read(CMT23_INT1_CTL);
 8000f30:	2066      	movs	r0, #102	; 0x66
 8000f32:	f7ff fe2d 	bl	8000b90 <bSpi3Read>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	240f      	movs	r4, #15
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	221f      	movs	r2, #31
 8000f40:	4391      	bics	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8000f46:	193a      	adds	r2, r7, r4
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	7812      	ldrb	r2, [r2, #0]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	22cc      	movs	r2, #204	; 0xcc
 8000f54:	01d2      	lsls	r2, r2, #7
 8000f56:	4694      	mov	ip, r2
 8000f58:	4463      	add	r3, ip
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff fdfb 	bl	8000b56 <vSpi3Write>

	tmp = INT_MASK & bSpi3Read(CMT23_INT2_CTL);
 8000f60:	2067      	movs	r0, #103	; 0x67
 8000f62:	f7ff fe15 	bl	8000b90 <bSpi3Read>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0019      	movs	r1, r3
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	221f      	movs	r2, #31
 8000f6e:	4391      	bics	r1, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8000f74:	193a      	adds	r2, r7, r4
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	22ce      	movs	r2, #206	; 0xce
 8000f82:	01d2      	lsls	r2, r2, #7
 8000f84:	4694      	mov	ip, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fde4 	bl	8000b56 <vSpi3Write>
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b005      	add	sp, #20
 8000f94:	bd90      	pop	{r4, r7, pc}

08000f96 <vEnableAntSwitch>:
**Function:  
**Input:    
**Output:   none
**********************************************************/
void vEnableAntSwitch(byte mode)
{
 8000f96:	b5b0      	push	{r4, r5, r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	701a      	strb	r2, [r3, #0]
	byte tmp;
	tmp = bSpi3Read(CMT23_INT1_CTL);
 8000fa2:	250f      	movs	r5, #15
 8000fa4:	197c      	adds	r4, r7, r5
 8000fa6:	2066      	movs	r0, #102	; 0x66
 8000fa8:	f7ff fdf2 	bl	8000b90 <bSpi3Read>
 8000fac:	0003      	movs	r3, r0
 8000fae:	7023      	strb	r3, [r4, #0]
	tmp&= 0x3F;
 8000fb0:	197b      	adds	r3, r7, r5
 8000fb2:	197a      	adds	r2, r7, r5
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	213f      	movs	r1, #63	; 0x3f
 8000fb8:	400a      	ands	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d002      	beq.n	8000fca <vEnableAntSwitch+0x34>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d009      	beq.n	8000fdc <vEnableAntSwitch+0x46>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
		case 2:
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
		case 0:
		default:
			break;							//Disable
 8000fc8:	e010      	b.n	8000fec <vEnableAntSwitch+0x56>
			tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 8000fca:	220f      	movs	r2, #15
 8000fcc:	18bb      	adds	r3, r7, r2
 8000fce:	18ba      	adds	r2, r7, r2
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4249      	negs	r1, r1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <vEnableAntSwitch+0x56>
			tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 8000fdc:	220f      	movs	r2, #15
 8000fde:	18bb      	adds	r3, r7, r2
 8000fe0:	18ba      	adds	r2, r7, r2
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	46c0      	nop			; (mov r8, r8)
	}
	vSpi3Write(((word)CMT23_INT1_CTL<<8)+tmp);
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	22cc      	movs	r2, #204	; 0xcc
 8000ff4:	01d2      	lsls	r2, r2, #7
 8000ff6:	4694      	mov	ip, r2
 8000ff8:	4463      	add	r3, ip
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fdab 	bl	8000b56 <vSpi3Write>
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bdb0      	pop	{r4, r5, r7, pc}

08001008 <vIntSrcEnable>:
**Function: enable interrupt source 
**Input:    en_int
**Output:   none
**********************************************************/
void vIntSrcEnable(byte en_int)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_INT_EN<<8)+en_int);
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	22d0      	movs	r2, #208	; 0xd0
 800101a:	01d2      	lsls	r2, r2, #7
 800101c:	4694      	mov	ip, r2
 800101e:	4463      	add	r3, ip
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fd98 	bl	8000b56 <vSpi3Write>
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
byte bIntSrcFlagClr(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	//byte tmp;
	//byte int_clr2 = 0;
	//byte int_clr1 = 0;
	byte flg = 0;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		int_clr1 |= RX_TIMEOUT_CLR;
		flg |= RX_TMO_EN;
	}
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+int_clr1);	//Clear flag
#endif
	vSpi3Write(((word)CMT23_INT_CLR1<<8)+0x07); //Clear flag
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <bIntSrcFlagClr+0x28>)
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff fd89 	bl	8000b56 <vSpi3Write>
	vSpi3Write(((word)CMT23_INT_CLR2<<8)+0xFF);	//Clear flag
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <bIntSrcFlagClr+0x2c>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fd85 	bl	8000b56 <vSpi3Write>

	return(flg);
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	00006a07 	.word	0x00006a07
 800105c:	00006bff 	.word	0x00006bff

08001060 <vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
byte vClearFIFO(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_FLG);
 8001066:	1dfc      	adds	r4, r7, #7
 8001068:	206e      	movs	r0, #110	; 0x6e
 800106a:	f7ff fd91 	bl	8000b90 <bSpi3Read>
 800106e:	0003      	movs	r3, r0
 8001070:	7023      	strb	r3, [r4, #0]
	vSpi3Write(((word)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <vClearFIFO+0x28>)
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff fd6e 	bl	8000b56 <vSpi3Write>
	return(tmp);
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
}
 800107e:	0018      	movs	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	b003      	add	sp, #12
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	00006c03 	.word	0x00006c03

0800108c <vEnableWrFifo>:

#if 1		//splite fifo, tx:32bytes, rx:32bytes;
void vEnableWrFifo(void)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
	byte tmp;
	tmp = bSpi3Read(CMT23_FIFO_CTL);
 8001092:	1dfc      	adds	r4, r7, #7
 8001094:	2069      	movs	r0, #105	; 0x69
 8001096:	f7ff fd7b 	bl	8000b90 <bSpi3Read>
 800109a:	0003      	movs	r3, r0
 800109c:	7023      	strb	r3, [r4, #0]
	tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	1dfa      	adds	r2, r7, #7
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	2105      	movs	r1, #5
 80010a6:	430a      	orrs	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_FIFO_CTL<<8)+tmp);
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	22d2      	movs	r2, #210	; 0xd2
 80010b0:	01d2      	lsls	r2, r2, #7
 80010b2:	4694      	mov	ip, r2
 80010b4:	4463      	add	r3, ip
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff fd4d 	bl	8000b56 <vSpi3Write>
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b003      	add	sp, #12
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void vInit(void)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
	byte tmp;
	vSpi3Init();
 80010ca:	f7ff fc36 	bl	800093a <vSpi3Init>
	//GPO1In();
	//GPO2In();
	GPO3In();
 80010ce:	f7ff fe1f 	bl	8000d10 <GPO3In>

	//TX_ANTOut();
	//RX_ANTOut();

	vSoftReset();
 80010d2:	f7ff ff03 	bl	8000edc <vSoftReset>
	HAL_Delay(20);
 80010d6:	2014      	movs	r0, #20
 80010d8:	f001 f94a 	bl	8002370 <HAL_Delay>
	bGoStandby();
 80010dc:	f7ff feba 	bl	8000e54 <bGoStandby>

	//
	tmp = bSpi3Read(CMT23_MODE_STA);
 80010e0:	1dfc      	adds	r4, r7, #7
 80010e2:	2061      	movs	r0, #97	; 0x61
 80010e4:	f7ff fd54 	bl	8000b90 <bSpi3Read>
 80010e8:	0003      	movs	r3, r0
 80010ea:	7023      	strb	r3, [r4, #0]
	tmp|= EEP_CPY_DIS;
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	2110      	movs	r1, #16
 80010f4:	430a      	orrs	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
	tmp&= (~RSTN_IN_EN);			//Disable RstPin
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	2120      	movs	r1, #32
 8001100:	438a      	bics	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_MODE_STA<<8)+tmp);
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	22c2      	movs	r2, #194	; 0xc2
 800110a:	01d2      	lsls	r2, r2, #7
 800110c:	4694      	mov	ip, r2
 800110e:	4463      	add	r3, ip
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fd20 	bl	8000b56 <vSpi3Write>

	bIntSrcFlagClr();
 8001116:	f7ff ff8b 	bl	8001030 <bIntSrcFlagClr>
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b003      	add	sp, #12
 8001120:	bd90      	pop	{r4, r7, pc}

08001122 <vCfgBank>:

void vCfgBank(word cfg[], byte length)
{
 8001122:	b590      	push	{r4, r7, lr}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	000a      	movs	r2, r1
 800112c:	1cfb      	adds	r3, r7, #3
 800112e:	701a      	strb	r2, [r3, #0]
	byte i;

	if(length!=0){
 8001130:	1cfb      	adds	r3, r7, #3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01a      	beq.n	800116e <vCfgBank+0x4c>
		for(i=0; i<length; i++)
 8001138:	230f      	movs	r3, #15
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e00e      	b.n	8001160 <vCfgBank+0x3e>
			vSpi3Write(cfg[i]);
 8001142:	240f      	movs	r4, #15
 8001144:	193b      	adds	r3, r7, r4
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fd00 	bl	8000b56 <vSpi3Write>
		for(i=0; i<length; i++)
 8001156:	193b      	adds	r3, r7, r4
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	193b      	adds	r3, r7, r4
 800115c:	3201      	adds	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	230f      	movs	r3, #15
 8001162:	18fa      	adds	r2, r7, r3
 8001164:	1cfb      	adds	r3, r7, #3
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3e9      	bcc.n	8001142 <vCfgBank+0x20>
	}
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b005      	add	sp, #20
 8001174:	bd90      	pop	{r4, r7, pc}

08001176 <bSendMessage>:
	rev = 0xFF;
	return(rev);
}

byte bSendMessage(byte msg[], byte length)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	000a      	movs	r2, r1
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	701a      	strb	r2, [r3, #0]
	bIntSrcFlagClr();
 8001184:	f7ff ff54 	bl	8001030 <bIntSrcFlagClr>
#if 1
	//mode1
	vSetTxPayloadLength(length);
 8001188:	1cfb      	adds	r3, r7, #3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f813 	bl	80011b8 <vSetTxPayloadLength>
	bGoStandby();
 8001192:	f7ff fe5f 	bl	8000e54 <bGoStandby>
	vEnableWrFifo();
 8001196:	f7ff ff79 	bl	800108c <vEnableWrFifo>
	vSpi3BurstWriteFIFO(msg, length);
 800119a:	1cfb      	adds	r3, r7, #3
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	0011      	movs	r1, r2
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fd8a 	bl	8000cbc <vSpi3BurstWriteFIFO>
	bGoTx();
 80011a8:	f7ff fdec 	bl	8000d84 <bGoTx>
	vSetTxPayloadLength(length);
	bGoTx();
	vEnableWrFifo();
	vSpi3BurstWriteFIFO(msg, length);
#endif
	return(true);
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <vSetTxPayloadLength>:

void vSetTxPayloadLength(word length)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	byte tmp;
	byte len;
	bGoStandby();
 80011c0:	f7ff fe48 	bl	8000e54 <bGoStandby>
	tmp = bSpi3Read(CMT23_PKT_CTRL1);
 80011c4:	250f      	movs	r5, #15
 80011c6:	197c      	adds	r4, r7, r5
 80011c8:	2045      	movs	r0, #69	; 0x45
 80011ca:	f7ff fce1 	bl	8000b90 <bSpi3Read>
 80011ce:	0003      	movs	r3, r0
 80011d0:	7023      	strb	r3, [r4, #0]
	tmp&= 0x8F;
 80011d2:	0028      	movs	r0, r5
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	183a      	adds	r2, r7, r0
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	2170      	movs	r1, #112	; 0x70
 80011dc:	438a      	bics	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]

	if(length!=0){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01c      	beq.n	8001220 <vSetTxPayloadLength+0x68>
		if(FixedPktLength){
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <vSetTxPayloadLength+0xc0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <vSetTxPayloadLength+0x50>
		  tmp &= ~(1<<0);		//clear bit0
 80011ee:	183b      	adds	r3, r7, r0
 80011f0:	183a      	adds	r2, r7, r0
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	438a      	bics	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
		  len = length - 1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	230e      	movs	r3, #14
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	3a01      	subs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e00f      	b.n	8001228 <vSetTxPayloadLength+0x70>
		}
		else{
		  tmp |= (1<<0);	   //set bit0
 8001208:	220f      	movs	r2, #15
 800120a:	18bb      	adds	r3, r7, r2
 800120c:	18ba      	adds	r2, r7, r2
 800120e:	7812      	ldrb	r2, [r2, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
		  len = length;
 8001216:	230e      	movs	r3, #14
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e003      	b.n	8001228 <vSetTxPayloadLength+0x70>
		}
	}else
		len = 0;
 8001220:	230e      	movs	r3, #14
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

	tmp|= (((byte)(len>>8)&0x07)<<4);
 8001228:	240e      	movs	r4, #14
 800122a:	193b      	adds	r3, r7, r4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	b2db      	uxtb	r3, r3
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2270      	movs	r2, #112	; 0x70
 8001238:	4013      	ands	r3, r2
 800123a:	b25a      	sxtb	r2, r3
 800123c:	210f      	movs	r1, #15
 800123e:	187b      	adds	r3, r7, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b25a      	sxtb	r2, r3
 8001248:	187b      	adds	r3, r7, r1
 800124a:	701a      	strb	r2, [r3, #0]
	vSpi3Write(((word)CMT23_PKT_CTRL1<<8)+tmp);
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	228a      	movs	r2, #138	; 0x8a
 8001252:	01d2      	lsls	r2, r2, #7
 8001254:	4694      	mov	ip, r2
 8001256:	4463      	add	r3, ip
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fc7c 	bl	8000b56 <vSpi3Write>
	vSpi3Write(((word)CMT23_PKT_LEN<<8)+(byte)len);	//Payload length
 800125e:	193b      	adds	r3, r7, r4
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	228c      	movs	r2, #140	; 0x8c
 8001264:	01d2      	lsls	r2, r2, #7
 8001266:	4694      	mov	ip, r2
 8001268:	4463      	add	r3, ip
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff fc73 	bl	8000b56 <vSpi3Write>
	//bGoSleep();
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	200002f2 	.word	0x200002f2

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b0d6      	sub	sp, #344	; 0x158
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f001 f805 	bl	8002290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f959 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 fa33 	bl	80016f4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800128e:	f000 fa03 	bl	8001698 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001292:	f000 f9c1 	bl	8001618 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //  https://github.com/Sensirion/embedded-sht
 HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Basladi\r\n", 9, 100);
 8001296:	4993      	ldr	r1, [pc, #588]	; (80014e4 <main+0x268>)
 8001298:	4893      	ldr	r0, [pc, #588]	; (80014e8 <main+0x26c>)
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	2209      	movs	r2, #9
 800129e:	f002 ff3f 	bl	8004120 <HAL_UART_Transmit>
  sensirion_i2c_init();
 80012a2:	f000 fceb 	bl	8001c7c <sensirion_i2c_init>

  while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
 80012a6:	e003      	b.n	80012b0 <main+0x34>
    	printf("SHT sensor probing failed\n");
 80012a8:	4b90      	ldr	r3, [pc, #576]	; (80014ec <main+0x270>)
 80012aa:	0018      	movs	r0, r3
 80012ac:	f003 fcb0 	bl	8004c10 <puts>
  while (sht3x_probe(SHT3X_I2C_ADDR_DFLT) != STATUS_OK) {
 80012b0:	2044      	movs	r0, #68	; 0x44
 80012b2:	f000 fdeb 	bl	8001e8c <sht3x_probe>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d1f6      	bne.n	80012a8 <main+0x2c>
  }
  printf("SHT sensor probing successful\n");
 80012ba:	4b8d      	ldr	r3, [pc, #564]	; (80014f0 <main+0x274>)
 80012bc:	0018      	movs	r0, r3
 80012be:	f003 fca7 	bl	8004c10 <puts>

  #define TX_NUM  21
  byte tx_buf[32] = {'H', 'o', 'p', 'e', 'R', 'F', ' ', 'R', 'F', 'M', ' ', 'C', 'O', 'B', 'R', 'F', 'M', '3', '0', '0', 'A'};
 80012c2:	239a      	movs	r3, #154	; 0x9a
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	18f9      	adds	r1, r7, r3
 80012c8:	4a8a      	ldr	r2, [pc, #552]	; (80014f4 <main+0x278>)
 80012ca:	000b      	movs	r3, r1
 80012cc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80012ce:	c331      	stmia	r3!, {r0, r4, r5}
 80012d0:	ca11      	ldmia	r2!, {r0, r4}
 80012d2:	c311      	stmia	r3!, {r0, r4}
 80012d4:	8812      	ldrh	r2, [r2, #0]
 80012d6:	801a      	strh	r2, [r3, #0]
 80012d8:	2316      	movs	r3, #22
 80012da:	18cb      	adds	r3, r1, r3
 80012dc:	220a      	movs	r2, #10
 80012de:	2100      	movs	r1, #0
 80012e0:	0018      	movs	r0, r3
 80012e2:	f003 fc1a 	bl	8004b1a <memset>
  char buffer[100];
  char buffer2[100];
  char bufferkontrol[100];


  FixedPktLength    = 0;
 80012e6:	4b84      	ldr	r3, [pc, #528]	; (80014f8 <main+0x27c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
  PayloadLength     = 21;
 80012ec:	4b83      	ldr	r3, [pc, #524]	; (80014fc <main+0x280>)
 80012ee:	2215      	movs	r2, #21
 80012f0:	601a      	str	r2, [r3, #0]
  vInit();
 80012f2:	f7ff fee7 	bl	80010c4 <vInit>
  vCfgBank(CMTBank, 12);
 80012f6:	4b82      	ldr	r3, [pc, #520]	; (8001500 <main+0x284>)
 80012f8:	210c      	movs	r1, #12
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff11 	bl	8001122 <vCfgBank>
  vCfgBank(SystemBank, 12);
 8001300:	4b80      	ldr	r3, [pc, #512]	; (8001504 <main+0x288>)
 8001302:	210c      	movs	r1, #12
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ff0c 	bl	8001122 <vCfgBank>
  vCfgBank(FrequencyBank, 8);
 800130a:	4b7f      	ldr	r3, [pc, #508]	; (8001508 <main+0x28c>)
 800130c:	2108      	movs	r1, #8
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff ff07 	bl	8001122 <vCfgBank>
  vCfgBank(DataRateBank, 24);
 8001314:	4b7d      	ldr	r3, [pc, #500]	; (800150c <main+0x290>)
 8001316:	2118      	movs	r1, #24
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff02 	bl	8001122 <vCfgBank>
  vCfgBank(BasebandBank, 29);
 800131e:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <main+0x294>)
 8001320:	211d      	movs	r1, #29
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fefd 	bl	8001122 <vCfgBank>
  vCfgBank(TXBank, 11);
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <main+0x298>)
 800132a:	210b      	movs	r1, #11
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff fef8 	bl	8001122 <vCfgBank>
  vEnableAntSwitch(0);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fe2f 	bl	8000f96 <vEnableAntSwitch>
  vGpioFuncCfg(GPIO1_DCLK + GPIO2_DCLK + GPIO3_INT2); //GPIO Maping
 8001338:	202f      	movs	r0, #47	; 0x2f
 800133a:	f7ff fddd 	bl	8000ef8 <vGpioFuncCfg>



  vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IRQ maping
 800133e:	210a      	movs	r1, #10
 8001340:	2010      	movs	r0, #16
 8001342:	f7ff fdec 	bl	8000f1e <vIntSrcCfg>
  vIntSrcEnable(TX_DONE_EN);
 8001346:	2020      	movs	r0, #32
 8001348:	f7ff fe5e 	bl	8001008 <vIntSrcEnable>
  vClearFIFO();
 800134c:	f7ff fe88 	bl	8001060 <vClearFIFO>
  bGoSleep();
 8001350:	f7ff fd58 	bl	8000e04 <bGoSleep>

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Tx...\r\n", 7, 100);
 8001354:	4970      	ldr	r1, [pc, #448]	; (8001518 <main+0x29c>)
 8001356:	4864      	ldr	r0, [pc, #400]	; (80014e8 <main+0x26c>)
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	2207      	movs	r2, #7
 800135c:	f002 fee0 	bl	8004120 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int32_t temperature, humidity;
	  int8_t ret = sht3x_measure_blocking_read(SHT3X_I2C_ADDR_DFLT,&temperature, &humidity);
 8001360:	003a      	movs	r2, r7
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	0019      	movs	r1, r3
 8001366:	2044      	movs	r0, #68	; 0x44
 8001368:	f000 fd1e 	bl	8001da8 <sht3x_measure_blocking_read>
 800136c:	0003      	movs	r3, r0
 800136e:	001a      	movs	r2, r3
 8001370:	2158      	movs	r1, #88	; 0x58
 8001372:	31ff      	adds	r1, #255	; 0xff
 8001374:	187b      	adds	r3, r7, r1
 8001376:	701a      	strb	r2, [r3, #0]

	  if (ret == STATUS_OK) {
 8001378:	187b      	adds	r3, r7, r1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d000      	beq.n	8001384 <main+0x108>
 8001382:	e0a9      	b.n	80014d8 <main+0x25c>
		  sprintf(buffer, "%d", temperature/10); //100e bölünmesi demek ,'den sonraki 2 sayının silinmesi demek örneğin sonuç 255 yani 25.5 derece eğer ,'den sorna 2 hanenin gözükmesini istersek 10 diyeceğiz yani sonu. 25.57
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	210a      	movs	r1, #10
 8001388:	0018      	movs	r0, r3
 800138a:	f7fe ff59 	bl	8000240 <__divsi3>
 800138e:	0003      	movs	r3, r0
 8001390:	001a      	movs	r2, r3
 8001392:	4962      	ldr	r1, [pc, #392]	; (800151c <main+0x2a0>)
 8001394:	24d0      	movs	r4, #208	; 0xd0
 8001396:	193b      	adds	r3, r7, r4
 8001398:	0018      	movs	r0, r3
 800139a:	f003 fc43 	bl	8004c24 <siprintf>
	      HAL_UART_Transmit(&hlpuart1, "t: ", 3, 1000);
 800139e:	23fa      	movs	r3, #250	; 0xfa
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	495f      	ldr	r1, [pc, #380]	; (8001520 <main+0x2a4>)
 80013a4:	4850      	ldr	r0, [pc, #320]	; (80014e8 <main+0x26c>)
 80013a6:	2203      	movs	r2, #3
 80013a8:	f002 feba 	bl	8004120 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7fe feaa 	bl	8000108 <strlen>
 80013b4:	0003      	movs	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	23fa      	movs	r3, #250	; 0xfa
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	1939      	adds	r1, r7, r4
 80013be:	484a      	ldr	r0, [pc, #296]	; (80014e8 <main+0x26c>)
 80013c0:	f002 feae 	bl	8004120 <HAL_UART_Transmit>
	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 80013c4:	4957      	ldr	r1, [pc, #348]	; (8001524 <main+0x2a8>)
 80013c6:	4848      	ldr	r0, [pc, #288]	; (80014e8 <main+0x26c>)
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	2202      	movs	r2, #2
 80013cc:	f002 fea8 	bl	8004120 <HAL_UART_Transmit>





	      sprintf(buffer2, "%d", humidity/10);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	210a      	movs	r1, #10
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7fe ff33 	bl	8000240 <__divsi3>
 80013da:	0003      	movs	r3, r0
 80013dc:	001a      	movs	r2, r3
 80013de:	494f      	ldr	r1, [pc, #316]	; (800151c <main+0x2a0>)
 80013e0:	256c      	movs	r5, #108	; 0x6c
 80013e2:	197b      	adds	r3, r7, r5
 80013e4:	0018      	movs	r0, r3
 80013e6:	f003 fc1d 	bl	8004c24 <siprintf>
	      HAL_UART_Transmit(&hlpuart1, "n: ", 3, 1000);
 80013ea:	23fa      	movs	r3, #250	; 0xfa
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	494e      	ldr	r1, [pc, #312]	; (8001528 <main+0x2ac>)
 80013f0:	483d      	ldr	r0, [pc, #244]	; (80014e8 <main+0x26c>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	f002 fe94 	bl	8004120 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer2, strlen(buffer2), 1000);
 80013f8:	197b      	adds	r3, r7, r5
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7fe fe84 	bl	8000108 <strlen>
 8001400:	0003      	movs	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	23fa      	movs	r3, #250	; 0xfa
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	1979      	adds	r1, r7, r5
 800140a:	4837      	ldr	r0, [pc, #220]	; (80014e8 <main+0x26c>)
 800140c:	f002 fe88 	bl	8004120 <HAL_UART_Transmit>
	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 8001410:	4944      	ldr	r1, [pc, #272]	; (8001524 <main+0x2a8>)
 8001412:	4835      	ldr	r0, [pc, #212]	; (80014e8 <main+0x26c>)
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	2202      	movs	r2, #2
 8001418:	f002 fe82 	bl	8004120 <HAL_UART_Transmit>


	      strncat(buffer, buffer2, 5); //sondaki sayı eklenecek karakter sayısı
 800141c:	1979      	adds	r1, r7, r5
 800141e:	193b      	adds	r3, r7, r4
 8001420:	2205      	movs	r2, #5
 8001422:	0018      	movs	r0, r3
 8001424:	f003 fc26 	bl	8004c74 <strncat>
	      strncat(buffer,"0000000001", 10);
 8001428:	193b      	adds	r3, r7, r4
 800142a:	0018      	movs	r0, r3
 800142c:	f7fe fe6c 	bl	8000108 <strlen>
 8001430:	0003      	movs	r3, r0
 8001432:	001a      	movs	r2, r3
 8001434:	193b      	adds	r3, r7, r4
 8001436:	189a      	adds	r2, r3, r2
 8001438:	4b3c      	ldr	r3, [pc, #240]	; (800152c <main+0x2b0>)
 800143a:	0010      	movs	r0, r2
 800143c:	0019      	movs	r1, r3
 800143e:	230b      	movs	r3, #11
 8001440:	001a      	movs	r2, r3
 8001442:	f003 fb61 	bl	8004b08 <memcpy>
	      HAL_UART_Transmit(&hlpuart1, "buffer toplam: ", 15, 1000);
 8001446:	23fa      	movs	r3, #250	; 0xfa
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4939      	ldr	r1, [pc, #228]	; (8001530 <main+0x2b4>)
 800144c:	4826      	ldr	r0, [pc, #152]	; (80014e8 <main+0x26c>)
 800144e:	220f      	movs	r2, #15
 8001450:	f002 fe66 	bl	8004120 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8001454:	193b      	adds	r3, r7, r4
 8001456:	0018      	movs	r0, r3
 8001458:	f7fe fe56 	bl	8000108 <strlen>
 800145c:	0003      	movs	r3, r0
 800145e:	b29a      	uxth	r2, r3
 8001460:	23fa      	movs	r3, #250	; 0xfa
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	1939      	adds	r1, r7, r4
 8001466:	4820      	ldr	r0, [pc, #128]	; (80014e8 <main+0x26c>)
 8001468:	f002 fe5a 	bl	8004120 <HAL_UART_Transmit>
	      HAL_UART_Transmit( &hlpuart1, (uint8_t *)"\r\n",2, 100);
 800146c:	492d      	ldr	r1, [pc, #180]	; (8001524 <main+0x2a8>)
 800146e:	481e      	ldr	r0, [pc, #120]	; (80014e8 <main+0x26c>)
 8001470:	2364      	movs	r3, #100	; 0x64
 8001472:	2202      	movs	r2, #2
 8001474:	f002 fe54 	bl	8004120 <HAL_UART_Transmit>

	      //if((bufferkontrol[0]!=buffer[0])||(bufferkontrol[1]!=buffer[1])||(bufferkontrol[2]!=buffer[2])||(bufferkontrol[3]!=buffer[3])){
	    	  bSendMessage(buffer,  strlen(buffer));
 8001478:	193b      	adds	r3, r7, r4
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe fe44 	bl	8000108 <strlen>
 8001480:	0003      	movs	r3, r0
 8001482:	b2da      	uxtb	r2, r3
 8001484:	193b      	adds	r3, r7, r4
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff fe74 	bl	8001176 <bSendMessage>
	    	  while (GPO3_L());
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	015a      	lsls	r2, r3, #5
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	0011      	movs	r1, r2
 800149a:	0018      	movs	r0, r3
 800149c:	f001 f9b6 	bl	800280c <HAL_GPIO_ReadPin>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d0f5      	beq.n	8001490 <main+0x214>
	    	  bIntSrcFlagClr();
 80014a4:	f7ff fdc4 	bl	8001030 <bIntSrcFlagClr>
	    	  vClearFIFO();
 80014a8:	f7ff fdda 	bl	8001060 <vClearFIFO>
	    	  bGoSleep();
 80014ac:	f7ff fcaa 	bl	8000e04 <bGoSleep>
	    	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"gonderildi\r\n",12, 100);
 80014b0:	4920      	ldr	r1, [pc, #128]	; (8001534 <main+0x2b8>)
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <main+0x26c>)
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	220c      	movs	r2, #12
 80014b8:	f002 fe32 	bl	8004120 <HAL_UART_Transmit>
	    	  HAL_Delay(2000);
 80014bc:	23fa      	movs	r3, #250	; 0xfa
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	0018      	movs	r0, r3
 80014c2:	f000 ff55 	bl	8002370 <HAL_Delay>


	      //}
	     // else HAL_UART_Transmit( &hlpuart1, (uint8_t *)"degısmedi\r\n",11, 100);

	      strcpy(bufferkontrol,buffer);
 80014c6:	23d0      	movs	r3, #208	; 0xd0
 80014c8:	18fa      	adds	r2, r7, r3
 80014ca:	2308      	movs	r3, #8
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f003 fbc7 	bl	8004c64 <strcpy>
 80014d6:	e743      	b.n	8001360 <main+0xe4>


	  }else
	  {
		  printf("error reading measurement\n");
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <main+0x2bc>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f003 fb98 	bl	8004c10 <puts>
  {
 80014e0:	e73e      	b.n	8001360 <main+0xe4>
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	08005c40 	.word	0x08005c40
 80014e8:	20000268 	.word	0x20000268
 80014ec:	08005c4c 	.word	0x08005c4c
 80014f0:	08005c68 	.word	0x08005c68
 80014f4:	08005ce8 	.word	0x08005ce8
 80014f8:	200002f2 	.word	0x200002f2
 80014fc:	200002f4 	.word	0x200002f4
 8001500:	20000000 	.word	0x20000000
 8001504:	20000030 	.word	0x20000030
 8001508:	20000060 	.word	0x20000060
 800150c:	20000080 	.word	0x20000080
 8001510:	200000e0 	.word	0x200000e0
 8001514:	20000154 	.word	0x20000154
 8001518:	08005c88 	.word	0x08005c88
 800151c:	08005c90 	.word	0x08005c90
 8001520:	08005c94 	.word	0x08005c94
 8001524:	08005c98 	.word	0x08005c98
 8001528:	08005c9c 	.word	0x08005c9c
 800152c:	08005ca0 	.word	0x08005ca0
 8001530:	08005cac 	.word	0x08005cac
 8001534:	08005cbc 	.word	0x08005cbc
 8001538:	08005ccc 	.word	0x08005ccc

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b099      	sub	sp, #100	; 0x64
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	242c      	movs	r4, #44	; 0x2c
 8001544:	193b      	adds	r3, r7, r4
 8001546:	0018      	movs	r0, r3
 8001548:	2334      	movs	r3, #52	; 0x34
 800154a:	001a      	movs	r2, r3
 800154c:	2100      	movs	r1, #0
 800154e:	f003 fae4 	bl	8004b1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001552:	2318      	movs	r3, #24
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	0018      	movs	r0, r3
 8001558:	2314      	movs	r3, #20
 800155a:	001a      	movs	r2, r3
 800155c:	2100      	movs	r1, #0
 800155e:	f003 fadc 	bl	8004b1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001562:	003b      	movs	r3, r7
 8001564:	0018      	movs	r0, r3
 8001566:	2318      	movs	r3, #24
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f003 fad5 	bl	8004b1a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <SystemClock_Config+0xd4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a27      	ldr	r2, [pc, #156]	; (8001614 <SystemClock_Config+0xd8>)
 8001576:	401a      	ands	r2, r3
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <SystemClock_Config+0xd4>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	0109      	lsls	r1, r1, #4
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001582:	0021      	movs	r1, r4
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2210      	movs	r2, #16
 8001588:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2201      	movs	r2, #1
 800158e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	22a0      	movs	r2, #160	; 0xa0
 800159a:	0212      	lsls	r2, r2, #8
 800159c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	0018      	movs	r0, r3
 80015a8:	f001 fea0 	bl	80032ec <HAL_RCC_OscConfig>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80015b0:	f000 f92c 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	2118      	movs	r1, #24
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	220f      	movs	r2, #15
 80015ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2100      	movs	r1, #0
 80015d8:	0018      	movs	r0, r3
 80015da:	f002 fa03 	bl	80039e4 <HAL_RCC_ClockConfig>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015e2:	f000 f913 	bl	800180c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 80015e6:	003b      	movs	r3, r7
 80015e8:	220c      	movs	r2, #12
 80015ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015ec:	003b      	movs	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f2:	003b      	movs	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	003b      	movs	r3, r7
 80015fa:	0018      	movs	r0, r3
 80015fc:	f002 fc16 	bl	8003e2c <HAL_RCCEx_PeriphCLKConfig>
 8001600:	1e03      	subs	r3, r0, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001604:	f000 f902 	bl	800180c <Error_Handler>
  }
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b019      	add	sp, #100	; 0x64
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	40007000 	.word	0x40007000
 8001614:	ffffe7ff 	.word	0xffffe7ff

08001618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_I2C1_Init+0x78>)
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <MX_I2C1_Init+0x7c>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_I2C1_Init+0x78>)
 8001624:	22e1      	movs	r2, #225	; 0xe1
 8001626:	00d2      	lsls	r2, r2, #3
 8001628:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_I2C1_Init+0x78>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_I2C1_Init+0x78>)
 8001632:	2201      	movs	r2, #1
 8001634:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_I2C1_Init+0x78>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_I2C1_Init+0x78>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_I2C1_Init+0x78>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_I2C1_Init+0x78>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_I2C1_Init+0x78>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_I2C1_Init+0x78>)
 8001656:	0018      	movs	r0, r3
 8001658:	f001 f912 	bl	8002880 <HAL_I2C_Init>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001660:	f000 f8d4 	bl	800180c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <MX_I2C1_Init+0x78>)
 8001666:	2100      	movs	r1, #0
 8001668:	0018      	movs	r0, r3
 800166a:	f001 fda7 	bl	80031bc <HAL_I2CEx_ConfigAnalogFilter>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001672:	f000 f8cb 	bl	800180c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_I2C1_Init+0x78>)
 8001678:	2100      	movs	r1, #0
 800167a:	0018      	movs	r0, r3
 800167c:	f001 fdea 	bl	8003254 <HAL_I2CEx_ConfigDigitalFilter>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001684:	f000 f8c2 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	200002f8 	.word	0x200002f8
 8001694:	40005400 	.word	0x40005400

08001698 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <MX_LPUART1_UART_Init+0x58>)
 80016a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016a4:	22e1      	movs	r2, #225	; 0xe1
 80016a6:	0252      	lsls	r2, r2, #9
 80016a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <MX_LPUART1_UART_Init+0x54>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f002 fcce 	bl	8004078 <HAL_UART_Init>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d001      	beq.n	80016e4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f000 f894 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	20000268 	.word	0x20000268
 80016f0:	40004800 	.word	0x40004800

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b08b      	sub	sp, #44	; 0x2c
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	2414      	movs	r4, #20
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	0018      	movs	r0, r3
 8001700:	2314      	movs	r3, #20
 8001702:	001a      	movs	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	f003 fa08 	bl	8004b1a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <MX_GPIO_Init+0x108>)
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <MX_GPIO_Init+0x108>)
 8001710:	2104      	movs	r1, #4
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <MX_GPIO_Init+0x108>)
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <MX_GPIO_Init+0x108>)
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <MX_GPIO_Init+0x108>)
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <MX_GPIO_Init+0x108>)
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <MX_GPIO_Init+0x108>)
 800173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <MX_GPIO_Init+0x108>)
 8001740:	2101      	movs	r1, #1
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <MX_GPIO_Init+0x108>)
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	2201      	movs	r2, #1
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <MX_GPIO_Init+0x108>)
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <MX_GPIO_Init+0x108>)
 8001758:	2102      	movs	r1, #2
 800175a:	430a      	orrs	r2, r1
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_GPIO_Init+0x108>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	4824      	ldr	r0, [pc, #144]	; (8001800 <MX_GPIO_Init+0x10c>)
 8001770:	2200      	movs	r2, #0
 8001772:	0019      	movs	r1, r3
 8001774:	f001 f867 	bl	8002846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin, GPIO_PIN_RESET);
 8001778:	4922      	ldr	r1, [pc, #136]	; (8001804 <MX_GPIO_Init+0x110>)
 800177a:	23a0      	movs	r3, #160	; 0xa0
 800177c:	05db      	lsls	r3, r3, #23
 800177e:	2200      	movs	r2, #0
 8001780:	0018      	movs	r0, r3
 8001782:	f001 f860 	bl	8002846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001786:	193b      	adds	r3, r7, r4
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	0192      	lsls	r2, r2, #6
 800178c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2201      	movs	r2, #1
 8001792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	193b      	adds	r3, r7, r4
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	193b      	adds	r3, r7, r4
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <MX_GPIO_Init+0x10c>)
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f000 fec2 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSB_Pin FCSB_Pin SCLK_Pin SDIO_Pin */
  GPIO_InitStruct.Pin = CSB_Pin|FCSB_Pin|SCLK_Pin|SDIO_Pin;
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <MX_GPIO_Init+0x110>)
 80017b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	2201      	movs	r2, #1
 80017b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	193a      	adds	r2, r7, r4
 80017c6:	23a0      	movs	r3, #160	; 0xa0
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 feaf 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin GPO3_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GPO3_Pin;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <MX_GPIO_Init+0x114>)
 80017d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	193a      	adds	r2, r7, r4
 80017e6:	23a0      	movs	r3, #160	; 0xa0
 80017e8:	05db      	lsls	r3, r3, #23
 80017ea:	0011      	movs	r1, r2
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 fe9f 	bl	8002530 <HAL_GPIO_Init>

}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b00b      	add	sp, #44	; 0x2c
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40021000 	.word	0x40021000
 8001800:	50000800 	.word	0x50000800
 8001804:	00000606 	.word	0x00000606
 8001808:	00001010 	.word	0x00001010

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>

08001816 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	000a      	movs	r2, r1
 8001820:	1cbb      	adds	r3, r7, #2
 8001822:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001824:	230d      	movs	r3, #13
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	22ff      	movs	r2, #255	; 0xff
 800182a:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800182c:	230e      	movs	r3, #14
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	2200      	movs	r2, #0
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	e037      	b.n	80018a6 <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 8001836:	230e      	movs	r3, #14
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	18d3      	adds	r3, r2, r3
 8001840:	7819      	ldrb	r1, [r3, #0]
 8001842:	220d      	movs	r2, #13
 8001844:	18bb      	adds	r3, r7, r2
 8001846:	18ba      	adds	r2, r7, r2
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	404a      	eors	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800184e:	230c      	movs	r3, #12
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2208      	movs	r2, #8
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e01b      	b.n	8001890 <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 8001858:	210d      	movs	r1, #13
 800185a:	187b      	adds	r3, r7, r1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b25b      	sxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	da09      	bge.n	8001878 <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001864:	187b      	adds	r3, r7, r1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	b25b      	sxtb	r3, r3
 800186c:	2231      	movs	r2, #49	; 0x31
 800186e:	4053      	eors	r3, r2
 8001870:	b25a      	sxtb	r2, r3
 8001872:	187b      	adds	r3, r7, r1
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e005      	b.n	8001884 <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8001878:	230d      	movs	r3, #13
 800187a:	18fa      	adds	r2, r7, r3
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	18db      	adds	r3, r3, r3
 8001882:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001884:	220c      	movs	r2, #12
 8001886:	18bb      	adds	r3, r7, r2
 8001888:	18ba      	adds	r2, r7, r2
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	3a01      	subs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	230c      	movs	r3, #12
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1de      	bne.n	8001858 <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800189a:	220e      	movs	r2, #14
 800189c:	18bb      	adds	r3, r7, r2
 800189e:	18ba      	adds	r2, r7, r2
 80018a0:	8812      	ldrh	r2, [r2, #0]
 80018a2:	3201      	adds	r2, #1
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	230e      	movs	r3, #14
 80018a8:	18fa      	adds	r2, r7, r3
 80018aa:	1cbb      	adds	r3, r7, #2
 80018ac:	8812      	ldrh	r2, [r2, #0]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3c0      	bcc.n	8001836 <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 80018b4:	230d      	movs	r3, #13
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	781b      	ldrb	r3, [r3, #0]
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	0008      	movs	r0, r1
 80018cc:	0011      	movs	r1, r2
 80018ce:	1cbb      	adds	r3, r7, #2
 80018d0:	1c02      	adds	r2, r0, #0
 80018d2:	801a      	strh	r2, [r3, #0]
 80018d4:	1c7b      	adds	r3, r7, #1
 80018d6:	1c0a      	adds	r2, r1, #0
 80018d8:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80018da:	1cbb      	adds	r3, r7, #2
 80018dc:	881a      	ldrh	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff97 	bl	8001816 <sensirion_common_generate_crc>
 80018e8:	0003      	movs	r3, r0
 80018ea:	001a      	movs	r2, r3
 80018ec:	1c7b      	adds	r3, r7, #1
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d002      	beq.n	80018fa <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 80018f4:	2301      	movs	r3, #1
 80018f6:	425b      	negs	r3, r3
 80018f8:	e000      	b.n	80018fc <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	0008      	movs	r0, r1
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	0019      	movs	r1, r3
 8001912:	250a      	movs	r5, #10
 8001914:	197b      	adds	r3, r7, r5
 8001916:	1c02      	adds	r2, r0, #0
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	2309      	movs	r3, #9
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	1c0a      	adds	r2, r1, #0
 8001920:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8001922:	2014      	movs	r0, #20
 8001924:	183b      	adds	r3, r7, r0
 8001926:	2200      	movs	r2, #0
 8001928:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 800192a:	197b      	adds	r3, r7, r5
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b299      	uxth	r1, r3
 8001932:	183b      	adds	r3, r7, r0
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	0004      	movs	r4, r0
 8001938:	183a      	adds	r2, r7, r0
 800193a:	1c58      	adds	r0, r3, #1
 800193c:	8010      	strh	r0, [r2, #0]
 800193e:	001a      	movs	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	189b      	adds	r3, r3, r2
 8001944:	b2ca      	uxtb	r2, r1
 8001946:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8001948:	193b      	adds	r3, r7, r4
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	193a      	adds	r2, r7, r4
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	8011      	strh	r1, [r2, #0]
 8001952:	001a      	movs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	189b      	adds	r3, r3, r2
 8001958:	197a      	adds	r2, r7, r5
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8001960:	2317      	movs	r3, #23
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e042      	b.n	80019f0 <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 800196a:	2617      	movs	r6, #23
 800196c:	19bb      	adds	r3, r7, r6
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	b299      	uxth	r1, r3
 800197c:	2414      	movs	r4, #20
 800197e:	193b      	adds	r3, r7, r4
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	193a      	adds	r2, r7, r4
 8001984:	1c58      	adds	r0, r3, #1
 8001986:	8010      	strh	r0, [r2, #0]
 8001988:	001a      	movs	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	189b      	adds	r3, r3, r2
 800198e:	b2ca      	uxtb	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8001992:	19bb      	adds	r3, r7, r6
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	18d3      	adds	r3, r2, r3
 800199c:	8819      	ldrh	r1, [r3, #0]
 800199e:	0025      	movs	r5, r4
 80019a0:	197b      	adds	r3, r7, r5
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	197a      	adds	r2, r7, r5
 80019a6:	1c58      	adds	r0, r3, #1
 80019a8:	8010      	strh	r0, [r2, #0]
 80019aa:	001a      	movs	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	189b      	adds	r3, r3, r2
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 80019b4:	197b      	adds	r3, r7, r5
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	3b02      	subs	r3, #2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	18d3      	adds	r3, r2, r3
 80019be:	2213      	movs	r2, #19
 80019c0:	18bc      	adds	r4, r7, r2
 80019c2:	2102      	movs	r1, #2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff ff26 	bl	8001816 <sensirion_common_generate_crc>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 80019ce:	197b      	adds	r3, r7, r5
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	197a      	adds	r2, r7, r5
 80019d4:	1c59      	adds	r1, r3, #1
 80019d6:	8011      	strh	r1, [r2, #0]
 80019d8:	001a      	movs	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	189b      	adds	r3, r3, r2
 80019de:	2213      	movs	r2, #19
 80019e0:	18ba      	adds	r2, r7, r2
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 80019e6:	19bb      	adds	r3, r7, r6
 80019e8:	19ba      	adds	r2, r7, r6
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	3201      	adds	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	2317      	movs	r3, #23
 80019f2:	18fa      	adds	r2, r7, r3
 80019f4:	2309      	movs	r3, #9
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d3b4      	bcc.n	800196a <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 8001a00:	2314      	movs	r3, #20
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	881b      	ldrh	r3, [r3, #0]
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b007      	add	sp, #28
 8001a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0e <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8001a0e:	b5b0      	push	{r4, r5, r7, lr}
 8001a10:	b096      	sub	sp, #88	; 0x58
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	0011      	movs	r1, r2
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	1c02      	adds	r2, r0, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	1c0a      	adds	r2, r1, #0
 8001a22:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8001a24:	2052      	movs	r0, #82	; 0x52
 8001a26:	1839      	adds	r1, r7, r0
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	1c1a      	adds	r2, r3, #0
 8001a2e:	1892      	adds	r2, r2, r2
 8001a30:	18d3      	adds	r3, r2, r3
 8001a32:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001a34:	2308      	movs	r3, #8
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f945 	bl	8001cd4 <sensirion_i2c_read>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	214a      	movs	r1, #74	; 0x4a
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8001a54:	000a      	movs	r2, r1
 8001a56:	18bb      	adds	r3, r7, r2
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5e5b      	ldrsh	r3, [r3, r1]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 8001a60:	18bb      	adds	r3, r7, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	5e9b      	ldrsh	r3, [r3, r2]
 8001a66:	e053      	b.n	8001b10 <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001a68:	2356      	movs	r3, #86	; 0x56
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
 8001a70:	2354      	movs	r3, #84	; 0x54
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	2200      	movs	r2, #0
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	e041      	b.n	8001afe <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001a7a:	2156      	movs	r1, #86	; 0x56
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a82:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a8c:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	001a      	movs	r2, r3
 8001a92:	2102      	movs	r1, #2
 8001a94:	f7ff ff15 	bl	80018c2 <sensirion_common_check_crc>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	214a      	movs	r1, #74	; 0x4a
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 8001aa2:	000a      	movs	r2, r1
 8001aa4:	18bb      	adds	r3, r7, r2
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5e5b      	ldrsh	r3, [r3, r1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 8001aae:	18bb      	adds	r3, r7, r2
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	5e9b      	ldrsh	r3, [r3, r2]
 8001ab4:	e02c      	b.n	8001b10 <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8001ab6:	2456      	movs	r4, #86	; 0x56
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001abe:	18d2      	adds	r2, r2, r3
 8001ac0:	2554      	movs	r5, #84	; 0x54
 8001ac2:	197b      	adds	r3, r7, r5
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	1979      	adds	r1, r7, r5
 8001ac8:	1c58      	adds	r0, r3, #1
 8001aca:	8008      	strh	r0, [r1, #0]
 8001acc:	0019      	movs	r1, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	185b      	adds	r3, r3, r1
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ade:	18d2      	adds	r2, r2, r3
 8001ae0:	197b      	adds	r3, r7, r5
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	1979      	adds	r1, r7, r5
 8001ae6:	1c58      	adds	r0, r3, #1
 8001ae8:	8008      	strh	r0, [r1, #0]
 8001aea:	0019      	movs	r1, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	185b      	adds	r3, r3, r1
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	193a      	adds	r2, r7, r4
 8001af8:	8812      	ldrh	r2, [r2, #0]
 8001afa:	3203      	adds	r2, #3
 8001afc:	801a      	strh	r2, [r3, #0]
 8001afe:	2356      	movs	r3, #86	; 0x56
 8001b00:	18fa      	adds	r2, r7, r3
 8001b02:	2352      	movs	r3, #82	; 0x52
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	8812      	ldrh	r2, [r2, #0]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3b5      	bcc.n	8001a7a <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b016      	add	sp, #88	; 0x58
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}

08001b18 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6039      	str	r1, [r7, #0]
 8001b20:	0011      	movs	r1, r2
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	1c02      	adds	r2, r0, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	1c0a      	adds	r2, r1, #0
 8001b2c:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8001b2e:	250c      	movs	r5, #12
 8001b30:	197c      	adds	r4, r7, r5
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff ff66 	bl	8001a0e <sensirion_i2c_read_words_as_bytes>
 8001b42:	0003      	movs	r3, r0
 8001b44:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 8001b46:	197b      	adds	r3, r7, r5
 8001b48:	2200      	movs	r2, #0
 8001b4a:	5e9b      	ldrsh	r3, [r3, r2]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <sensirion_i2c_read_words+0x40>
        return ret;
 8001b50:	197b      	adds	r3, r7, r5
 8001b52:	2200      	movs	r2, #0
 8001b54:	5e9b      	ldrsh	r3, [r3, r2]
 8001b56:	e02a      	b.n	8001bae <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 8001b58:	230f      	movs	r3, #15
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	e01c      	b.n	8001b9c <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 8001b62:	200f      	movs	r0, #15
 8001b64:	183b      	adds	r3, r7, r0
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	18d3      	adds	r3, r2, r3
 8001b6e:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b219      	sxth	r1, r3
 8001b84:	183b      	adds	r3, r7, r0
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	18d3      	adds	r3, r2, r3
 8001b8e:	b28a      	uxth	r2, r1
 8001b90:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8001b92:	183b      	adds	r3, r7, r0
 8001b94:	183a      	adds	r2, r7, r0
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	3201      	adds	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	1d3a      	adds	r2, r7, #4
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8da      	bhi.n	8001b62 <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}

08001bb6 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8001bb6:	b590      	push	{r4, r7, lr}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	1c0a      	adds	r2, r1, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	8819      	ldrh	r1, [r3, #0]
 8001bcc:	240c      	movs	r4, #12
 8001bce:	1938      	adds	r0, r7, r4
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f7ff fe96 	bl	8001904 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8001bd8:	1939      	adds	r1, r7, r4
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2202      	movs	r2, #2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 f897 	bl	8001d14 <sensirion_i2c_write>
 8001be6:	0003      	movs	r3, r0
 8001be8:	b21b      	sxth	r3, r3
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b005      	add	sp, #20
 8001bf0:	bd90      	pop	{r4, r7, pc}

08001bf2 <sensirion_i2c_delayed_read_cmd>:
    return sensirion_i2c_write(address, buf, buf_size);
}

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 8001bf2:	b5b0      	push	{r4, r5, r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	240f      	movs	r4, #15
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	1c02      	adds	r2, r0, #0
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	200c      	movs	r0, #12
 8001c06:	183b      	adds	r3, r7, r0
 8001c08:	1c0a      	adds	r2, r1, #0
 8001c0a:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8001c0c:	183b      	adds	r3, r7, r0
 8001c0e:	8819      	ldrh	r1, [r3, #0]
 8001c10:	2514      	movs	r5, #20
 8001c12:	1978      	adds	r0, r7, r5
 8001c14:	2300      	movs	r3, #0
 8001c16:	2200      	movs	r2, #0
 8001c18:	f7ff fe74 	bl	8001904 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8001c1c:	1979      	adds	r1, r7, r5
 8001c1e:	193b      	adds	r3, r7, r4
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 f875 	bl	8001d14 <sensirion_i2c_write>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	2116      	movs	r1, #22
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 8001c34:	000a      	movs	r2, r1
 8001c36:	18bb      	adds	r3, r7, r2
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5e5b      	ldrsh	r3, [r3, r1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <sensirion_i2c_delayed_read_cmd+0x56>
        return ret;
 8001c40:	18bb      	adds	r3, r7, r2
 8001c42:	2200      	movs	r2, #0
 8001c44:	5e9b      	ldrsh	r3, [r3, r2]
 8001c46:	e014      	b.n	8001c72 <sensirion_i2c_delayed_read_cmd+0x80>

    if (delay_us)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <sensirion_i2c_delayed_read_cmd+0x64>
        sensirion_sleep_usec(delay_us);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 f87f 	bl	8001d54 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8001c56:	2320      	movs	r3, #32
 8001c58:	2208      	movs	r2, #8
 8001c5a:	4694      	mov	ip, r2
 8001c5c:	44bc      	add	ip, r7
 8001c5e:	4463      	add	r3, ip
 8001c60:	881a      	ldrh	r2, [r3, #0]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff ff54 	bl	8001b18 <sensirion_i2c_read_words>
 8001c70:	0003      	movs	r3, r0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b006      	add	sp, #24
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c7c <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <sensirion_i2c_init+0x50>)
 8001c84:	601a      	str	r2, [r3, #0]
   // hi2c1.Init.ClockSpeed = 100000;
   // hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
   // __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <sensirion_i2c_init+0x54>)
 8001cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <sensirion_i2c_init+0x54>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0389      	lsls	r1, r1, #14
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_I2C_Init(&hi2c1);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <sensirion_i2c_init+0x4c>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 fde0 	bl	8002880 <HAL_I2C_Init>
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	20000210 	.word	0x20000210
 8001ccc:	40005400 	.word	0x40005400
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	6039      	str	r1, [r7, #0]
 8001cdc:	0011      	movs	r1, r2
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	1c02      	adds	r2, r0, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	1c0a      	adds	r2, r1, #0
 8001ce8:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	18db      	adds	r3, r3, r3
 8001cf2:	b299      	uxth	r1, r3
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <sensirion_i2c_read+0x3c>)
 8001cfc:	2464      	movs	r4, #100	; 0x64
 8001cfe:	9400      	str	r4, [sp, #0]
 8001d00:	f000 ff5c 	bl	8002bbc <HAL_I2C_Master_Receive>
 8001d04:	0003      	movs	r3, r0
 8001d06:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b003      	add	sp, #12
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	20000210 	.word	0x20000210

08001d14 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6039      	str	r1, [r7, #0]
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	1c02      	adds	r2, r0, #0
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	1c0a      	adds	r2, r1, #0
 8001d28:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	18db      	adds	r3, r3, r3
 8001d32:	b299      	uxth	r1, r3
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <sensirion_i2c_write+0x3c>)
 8001d3c:	2464      	movs	r4, #100	; 0x64
 8001d3e:	9400      	str	r4, [sp, #0]
 8001d40:	f000 fe34 	bl	80029ac <HAL_I2C_Master_Transmit>
 8001d44:	0003      	movs	r3, r0
 8001d46:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b003      	add	sp, #12
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	20000210 	.word	0x20000210

08001d54 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	22fa      	movs	r2, #250	; 0xfa
 8001d60:	0091      	lsls	r1, r2, #2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7fe f9e2 	bl	800012c <__udivsi3>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	22fa      	movs	r2, #250	; 0xfa
 8001d70:	0091      	lsls	r1, r2, #2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe fa60 	bl	8000238 <__aeabi_uidivmod>
 8001d78:	1e0b      	subs	r3, r1, #0
 8001d7a:	d002      	beq.n	8001d82 <sensirion_sleep_usec+0x2e>
        msec++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8001d82:	f000 fb19 	bl	80023b8 <HAL_GetHalVersion>
 8001d86:	0003      	movs	r3, r0
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <sensirion_sleep_usec+0x50>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d802      	bhi.n	8001d94 <sensirion_sleep_usec+0x40>
        msec++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 faea 	bl	8002370 <HAL_Delay>
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b004      	add	sp, #16
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	010100ff 	.word	0x010100ff

08001da8 <sht3x_measure_blocking_read>:
static const uint16_t SHT3X_CMD_WRITE_LOALRT_LIM_SET = 0x6100;

static uint16_t sht3x_cmd_measure = SHT3X_CMD_MEASURE_HPM;

int16_t sht3x_measure_blocking_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                                    int32_t* humidity) {
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	250f      	movs	r5, #15
 8001db4:	197b      	adds	r3, r7, r5
 8001db6:	1c02      	adds	r2, r0, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    int16_t ret = sht3x_measure(addr);
 8001dba:	2616      	movs	r6, #22
 8001dbc:	19bc      	adds	r4, r7, r6
 8001dbe:	197b      	adds	r3, r7, r5
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 f820 	bl	8001e08 <sht3x_measure>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	8023      	strh	r3, [r4, #0]
    if (ret == STATUS_OK) {
 8001dcc:	19bb      	adds	r3, r7, r6
 8001dce:	2200      	movs	r2, #0
 8001dd0:	5e9b      	ldrsh	r3, [r3, r2]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <sht3x_measure_blocking_read+0x4a>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <sht3x_measure_blocking_read+0x5c>)
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff ffbb 	bl	8001d54 <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
        ret = sht3x_read(addr, temperature, humidity);
 8001dde:	19bc      	adds	r4, r7, r6
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	197b      	adds	r3, r7, r5
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 f823 	bl	8001e34 <sht3x_read>
 8001dee:	0003      	movs	r3, r0
 8001df0:	8023      	strh	r3, [r4, #0]
    }
    return ret;
 8001df2:	2316      	movs	r3, #22
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2200      	movs	r2, #0
 8001df8:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b007      	add	sp, #28
 8001e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	00003a98 	.word	0x00003a98

08001e08 <sht3x_measure>:

int16_t sht3x_measure(sht3x_i2c_addr_t addr) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	0002      	movs	r2, r0
 8001e10:	1dfb      	adds	r3, r7, #7
 8001e12:	701a      	strb	r2, [r3, #0]
    return sensirion_i2c_write_cmd(addr, sht3x_cmd_measure);
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <sht3x_measure+0x28>)
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	1dfb      	adds	r3, r7, #7
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff fec9 	bl	8001bb6 <sensirion_i2c_write_cmd>
 8001e24:	0003      	movs	r3, r0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	20000180 	.word	0x20000180

08001e34 <sht3x_read>:

int16_t sht3x_read(sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	260f      	movs	r6, #15
 8001e40:	19bb      	adds	r3, r7, r6
 8001e42:	1c02      	adds	r2, r0, #0
 8001e44:	701a      	strb	r2, [r3, #0]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(addr, words, SENSIRION_NUM_WORDS(words));
 8001e46:	2316      	movs	r3, #22
 8001e48:	18fc      	adds	r4, r7, r3
 8001e4a:	2510      	movs	r5, #16
 8001e4c:	1979      	adds	r1, r7, r5
 8001e4e:	19bb      	adds	r3, r7, r6
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2202      	movs	r2, #2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fe5f 	bl	8001b18 <sensirion_i2c_read_words>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	8023      	strh	r3, [r4, #0]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8001e5e:	197b      	adds	r3, r7, r5
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	0011      	movs	r1, r2
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 f82c 	bl	8001ec4 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8001e6c:	197b      	adds	r3, r7, r5
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 f83d 	bl	8001ef4 <tick_to_humidity>

    return ret;
 8001e7a:	2316      	movs	r3, #22
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2200      	movs	r2, #0
 8001e80:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b007      	add	sp, #28
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e8c <sht3x_probe>:

int16_t sht3x_probe(sht3x_i2c_addr_t addr) {
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	0002      	movs	r2, r0
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	701a      	strb	r2, [r3, #0]
    uint16_t status;
    return sensirion_i2c_delayed_read_cmd(addr, SHT3X_CMD_READ_STATUS_REG,
 8001e98:	4909      	ldr	r1, [pc, #36]	; (8001ec0 <sht3x_probe+0x34>)
 8001e9a:	23fa      	movs	r3, #250	; 0xfa
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	001c      	movs	r4, r3
 8001ea0:	230e      	movs	r3, #14
 8001ea2:	18fa      	adds	r2, r7, r3
 8001ea4:	1dfb      	adds	r3, r7, #7
 8001ea6:	7818      	ldrb	r0, [r3, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	0013      	movs	r3, r2
 8001eae:	0022      	movs	r2, r4
 8001eb0:	f7ff fe9f 	bl	8001bf2 <sensirion_i2c_delayed_read_cmd>
 8001eb4:	0003      	movs	r3, r0
                                          SHT3X_CMD_DURATION_USEC, &status, 1);
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b005      	add	sp, #20
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	0000f32d 	.word	0x0000f32d

08001ec4 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	1dbb      	adds	r3, r7, #6
 8001ed0:	801a      	strh	r2, [r3, #0]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <tick_to_temperature+0x28>)
 8001ed8:	4353      	muls	r3, r2
 8001eda:	135b      	asrs	r3, r3, #13
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <tick_to_temperature+0x2c>)
 8001ede:	189a      	adds	r2, r3, r2
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	00005573 	.word	0x00005573
 8001ef0:	ffff5038 	.word	0xffff5038

08001ef4 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	0002      	movs	r2, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	1dbb      	adds	r3, r7, #6
 8001f00:	801a      	strh	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8001f02:	1dbb      	adds	r3, r7, #6
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <tick_to_humidity+0x24>)
 8001f08:	4353      	muls	r3, r2
 8001f0a:	135a      	asrs	r2, r3, #13
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	000030d4 	.word	0x000030d4

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_MspInit+0x24>)
 8001f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_MspInit+0x24>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_MspInit+0x24>)
 8001f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_MspInit+0x24>)
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	0549      	lsls	r1, r1, #21
 8001f36:	430a      	orrs	r2, r1
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	240c      	movs	r4, #12
 8001f4e:	193b      	adds	r3, r7, r4
 8001f50:	0018      	movs	r0, r3
 8001f52:	2314      	movs	r3, #20
 8001f54:	001a      	movs	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	f002 fddf 	bl	8004b1a <memset>
  if(hi2c->Instance==I2C1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_I2C_MspInit+0x7c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d128      	bne.n	8001fb8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f7e:	0021      	movs	r1, r4
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	22c0      	movs	r2, #192	; 0xc0
 8001f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	2212      	movs	r2, #18
 8001f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2203      	movs	r2, #3
 8001f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_I2C_MspInit+0x84>)
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	f000 fac3 	bl	8002530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	0389      	lsls	r1, r1, #14
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b009      	add	sp, #36	; 0x24
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	50000400 	.word	0x50000400

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b08b      	sub	sp, #44	; 0x2c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	2414      	movs	r4, #20
 8001fd6:	193b      	adds	r3, r7, r4
 8001fd8:	0018      	movs	r0, r3
 8001fda:	2314      	movs	r3, #20
 8001fdc:	001a      	movs	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f002 fd9b 	bl	8004b1a <memset>
  if(huart->Instance==LPUART1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a28      	ldr	r2, [pc, #160]	; (800208c <HAL_UART_MspInit+0xc0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d14a      	bne.n	8002084 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_UART_MspInit+0xc4>)
 8001ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff2:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_UART_MspInit+0xc4>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	02c9      	lsls	r1, r1, #11
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_UART_MspInit+0xc4>)
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_UART_MspInit+0xc4>)
 8002002:	2104      	movs	r1, #4
 8002004:	430a      	orrs	r2, r1
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_UART_MspInit+0xc4>)
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2204      	movs	r2, #4
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_UART_MspInit+0xc4>)
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_UART_MspInit+0xc4>)
 800201a:	2102      	movs	r1, #2
 800201c:	430a      	orrs	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_UART_MspInit+0xc4>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2202      	movs	r2, #2
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800202c:	193b      	adds	r3, r7, r4
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	193b      	adds	r3, r7, r4
 8002034:	2202      	movs	r2, #2
 8002036:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	193b      	adds	r3, r7, r4
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	193b      	adds	r3, r7, r4
 8002040:	2203      	movs	r2, #3
 8002042:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002044:	193b      	adds	r3, r7, r4
 8002046:	2206      	movs	r2, #6
 8002048:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204a:	193b      	adds	r3, r7, r4
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_UART_MspInit+0xc8>)
 800204e:	0019      	movs	r1, r3
 8002050:	0010      	movs	r0, r2
 8002052:	f000 fa6d 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002056:	0021      	movs	r1, r4
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	00d2      	lsls	r2, r2, #3
 800205e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2202      	movs	r2, #2
 8002064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	2203      	movs	r2, #3
 8002070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2206      	movs	r2, #6
 8002076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	187b      	adds	r3, r7, r1
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <HAL_UART_MspInit+0xcc>)
 800207c:	0019      	movs	r1, r3
 800207e:	0010      	movs	r0, r2
 8002080:	f000 fa56 	bl	8002530 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b00b      	add	sp, #44	; 0x2c
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	40004800 	.word	0x40004800
 8002090:	40021000 	.word	0x40021000
 8002094:	50000800 	.word	0x50000800
 8002098:	50000400 	.word	0x50000400

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <NMI_Handler+0x4>

080020a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <HardFault_Handler+0x4>

080020a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 f93a 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e00a      	b.n	80020f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020dc:	e000      	b.n	80020e0 <_read+0x16>
 80020de:	bf00      	nop
 80020e0:	0001      	movs	r1, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	60ba      	str	r2, [r7, #8]
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbf0      	blt.n	80020dc <_read+0x12>
	}

return len;
 80020fa:	687b      	ldr	r3, [r7, #4]
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b006      	add	sp, #24
 8002102:	bd80      	pop	{r7, pc}

08002104 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e009      	b.n	800212a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	60ba      	str	r2, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	0018      	movs	r0, r3
 8002120:	e000      	b.n	8002124 <_write+0x20>
 8002122:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3301      	adds	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	429a      	cmp	r2, r3
 8002130:	dbf1      	blt.n	8002116 <_write+0x12>
	}
	return len;
 8002132:	687b      	ldr	r3, [r7, #4]
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b006      	add	sp, #24
 800213a:	bd80      	pop	{r7, pc}

0800213c <_close>:

int _close(int file)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	return -1;
 8002144:	2301      	movs	r3, #1
 8002146:	425b      	negs	r3, r3
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	0192      	lsls	r2, r2, #6
 8002160:	605a      	str	r2, [r3, #4]
	return 0;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <_isatty>:

int _isatty(int file)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	return 1;
 8002174:	2301      	movs	r3, #1
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b002      	add	sp, #8
 800217c:	bd80      	pop	{r7, pc}

0800217e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
	return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b004      	add	sp, #16
 8002192:	bd80      	pop	{r7, pc}

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	18d3      	adds	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f002 fc76 	bl	8004ab4 <__errno>
 80021c8:	0003      	movs	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	425b      	negs	r3, r3
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	18d2      	adds	r2, r2, r3
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <_sbrk+0x64>)
 80021e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b006      	add	sp, #24
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20002000 	.word	0x20002000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	2000025c 	.word	0x2000025c
 80021fc:	20000358 	.word	0x20000358

08002200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800220c:	4813      	ldr	r0, [pc, #76]	; (800225c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800220e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002210:	4813      	ldr	r0, [pc, #76]	; (8002260 <LoopForever+0x6>)
    LDR R1, [R0]
 8002212:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002214:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <LoopForever+0xa>)
    CMP R1, R2
 8002218:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800221a:	d105      	bne.n	8002228 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800221c:	4812      	ldr	r0, [pc, #72]	; (8002268 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800221e:	4913      	ldr	r1, [pc, #76]	; (800226c <LoopForever+0x12>)
    STR R1, [R0]
 8002220:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002222:	4813      	ldr	r0, [pc, #76]	; (8002270 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002224:	4913      	ldr	r1, [pc, #76]	; (8002274 <LoopForever+0x1a>)
    STR R1, [R0]
 8002226:	6001      	str	r1, [r0, #0]

08002228 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	4813      	ldr	r0, [pc, #76]	; (8002278 <LoopForever+0x1e>)
  ldr r1, =_edata
 800222a:	4914      	ldr	r1, [pc, #80]	; (800227c <LoopForever+0x22>)
  ldr r2, =_sidata
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <LoopForever+0x26>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002240:	4c11      	ldr	r4, [pc, #68]	; (8002288 <LoopForever+0x2e>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800224e:	f7ff ffd7 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f002 fc35 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7ff f811 	bl	800127c <main>

0800225a <LoopForever>:

LoopForever:
    b LoopForever
 800225a:	e7fe      	b.n	800225a <LoopForever>
   ldr   r0, =_estack
 800225c:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002260:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002264:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002268:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800226c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002270:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002274:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002280:	08005e1c 	.word	0x08005e1c
  ldr r2, =_sbss
 8002284:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002288:	20000358 	.word	0x20000358

0800228c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC1_IRQHandler>
	...

08002290 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_Init+0x3c>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_Init+0x3c>)
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 f811 	bl	80022d0 <HAL_InitTick>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d003      	beq.n	80022ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e001      	b.n	80022be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ba:	f7ff fe2f 	bl	8001f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40022000 	.word	0x40022000

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_InitTick+0x5c>)
 80022da:	681c      	ldr	r4, [r3, #0]
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_InitTick+0x60>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	0019      	movs	r1, r3
 80022e2:	23fa      	movs	r3, #250	; 0xfa
 80022e4:	0098      	lsls	r0, r3, #2
 80022e6:	f7fd ff21 	bl	800012c <__udivsi3>
 80022ea:	0003      	movs	r3, r0
 80022ec:	0019      	movs	r1, r3
 80022ee:	0020      	movs	r0, r4
 80022f0:	f7fd ff1c 	bl	800012c <__udivsi3>
 80022f4:	0003      	movs	r3, r0
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 f90d 	bl	8002516 <HAL_SYSTICK_Config>
 80022fc:	1e03      	subs	r3, r0, #0
 80022fe:	d001      	beq.n	8002304 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e00f      	b.n	8002324 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d80b      	bhi.n	8002322 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	2301      	movs	r3, #1
 800230e:	425b      	negs	r3, r3
 8002310:	2200      	movs	r2, #0
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f8ea 	bl	80024ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_InitTick+0x64>)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b003      	add	sp, #12
 800232a:	bd90      	pop	{r4, r7, pc}
 800232c:	20000184 	.word	0x20000184
 8002330:	2000018c 	.word	0x2000018c
 8002334:	20000188 	.word	0x20000188

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_IncTick+0x1c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	001a      	movs	r2, r3
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_IncTick+0x20>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	18d2      	adds	r2, r2, r3
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_IncTick+0x20>)
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	2000018c 	.word	0x2000018c
 8002358:	20000344 	.word	0x20000344

0800235c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b02      	ldr	r3, [pc, #8]	; (800236c <HAL_GetTick+0x10>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	20000344 	.word	0x20000344

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff fff0 	bl	800235c <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	001a      	movs	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	189b      	adds	r3, r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	f7ff ffe0 	bl	800235c <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	2000018c 	.word	0x2000018c

080023b8 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <HAL_GetHalVersion+0xc>)
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	010a0500 	.word	0x010a0500

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	0002      	movs	r2, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b7f      	cmp	r3, #127	; 0x7f
 80023dc:	d828      	bhi.n	8002430 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023de:	4a2f      	ldr	r2, [pc, #188]	; (800249c <__NVIC_SetPriority+0xd4>)
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	33c0      	adds	r3, #192	; 0xc0
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	589b      	ldr	r3, [r3, r2]
 80023ee:	1dfa      	adds	r2, r7, #7
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	0011      	movs	r1, r2
 80023f4:	2203      	movs	r2, #3
 80023f6:	400a      	ands	r2, r1
 80023f8:	00d2      	lsls	r2, r2, #3
 80023fa:	21ff      	movs	r1, #255	; 0xff
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	43d2      	mvns	r2, r2
 8002402:	401a      	ands	r2, r3
 8002404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	401a      	ands	r2, r3
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	0018      	movs	r0, r3
 8002414:	2303      	movs	r3, #3
 8002416:	4003      	ands	r3, r0
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241c:	481f      	ldr	r0, [pc, #124]	; (800249c <__NVIC_SetPriority+0xd4>)
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b25b      	sxtb	r3, r3
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	430a      	orrs	r2, r1
 8002428:	33c0      	adds	r3, #192	; 0xc0
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800242e:	e031      	b.n	8002494 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <__NVIC_SetPriority+0xd8>)
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	0019      	movs	r1, r3
 8002438:	230f      	movs	r3, #15
 800243a:	400b      	ands	r3, r1
 800243c:	3b08      	subs	r3, #8
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3306      	adds	r3, #6
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	3304      	adds	r3, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1dfa      	adds	r2, r7, #7
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	0011      	movs	r1, r2
 8002450:	2203      	movs	r2, #3
 8002452:	400a      	ands	r2, r1
 8002454:	00d2      	lsls	r2, r2, #3
 8002456:	21ff      	movs	r1, #255	; 0xff
 8002458:	4091      	lsls	r1, r2
 800245a:	000a      	movs	r2, r1
 800245c:	43d2      	mvns	r2, r2
 800245e:	401a      	ands	r2, r3
 8002460:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	019b      	lsls	r3, r3, #6
 8002466:	22ff      	movs	r2, #255	; 0xff
 8002468:	401a      	ands	r2, r3
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	0018      	movs	r0, r3
 8002470:	2303      	movs	r3, #3
 8002472:	4003      	ands	r3, r0
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002478:	4809      	ldr	r0, [pc, #36]	; (80024a0 <__NVIC_SetPriority+0xd8>)
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	001c      	movs	r4, r3
 8002480:	230f      	movs	r3, #15
 8002482:	4023      	ands	r3, r4
 8002484:	3b08      	subs	r3, #8
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	430a      	orrs	r2, r1
 800248a:	3306      	adds	r3, #6
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	18c3      	adds	r3, r0, r3
 8002490:	3304      	adds	r3, #4
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b003      	add	sp, #12
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	1e5a      	subs	r2, r3, #1
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	045b      	lsls	r3, r3, #17
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d301      	bcc.n	80024bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b8:	2301      	movs	r3, #1
 80024ba:	e010      	b.n	80024de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <SysTick_Config+0x44>)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	3a01      	subs	r2, #1
 80024c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c4:	2301      	movs	r3, #1
 80024c6:	425b      	negs	r3, r3
 80024c8:	2103      	movs	r1, #3
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7ff ff7c 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x44>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x44>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b002      	add	sp, #8
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	210f      	movs	r1, #15
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	1c02      	adds	r2, r0, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	187b      	adds	r3, r7, r1
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b25b      	sxtb	r3, r3
 8002506:	0011      	movs	r1, r2
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff ffbf 	bl	80024a4 <SysTick_Config>
 8002526:	0003      	movs	r3, r0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002546:	e149      	b.n	80027dc <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4091      	lsls	r1, r2
 8002552:	000a      	movs	r2, r1
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <HAL_GPIO_Init+0x30>
 800255e:	e13a      	b.n	80027d6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2203      	movs	r2, #3
 8002566:	4013      	ands	r3, r2
 8002568:	2b01      	cmp	r3, #1
 800256a:	d005      	beq.n	8002578 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2203      	movs	r2, #3
 8002572:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002574:	2b02      	cmp	r3, #2
 8002576:	d130      	bne.n	80025da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	409a      	lsls	r2, r3
 8002586:	0013      	movs	r3, r2
 8002588:	43da      	mvns	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	409a      	lsls	r2, r3
 800259a:	0013      	movs	r3, r2
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ae:	2201      	movs	r2, #1
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	43da      	mvns	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	2201      	movs	r2, #1
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d017      	beq.n	8002616 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	43da      	mvns	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2203      	movs	r2, #3
 800261c:	4013      	ands	r3, r2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d123      	bne.n	800266a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	58d3      	ldr	r3, [r2, r3]
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2207      	movs	r2, #7
 8002634:	4013      	ands	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	43da      	mvns	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2107      	movs	r1, #7
 800264e:	400b      	ands	r3, r1
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	409a      	lsls	r2, r3
 8002654:	0013      	movs	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	6939      	ldr	r1, [r7, #16]
 8002668:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	409a      	lsls	r2, r3
 8002678:	0013      	movs	r3, r2
 800267a:	43da      	mvns	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	401a      	ands	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	0013      	movs	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	23c0      	movs	r3, #192	; 0xc0
 80026a4:	029b      	lsls	r3, r3, #10
 80026a6:	4013      	ands	r3, r2
 80026a8:	d100      	bne.n	80026ac <HAL_GPIO_Init+0x17c>
 80026aa:	e094      	b.n	80027d6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ac:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_GPIO_Init+0x2c4>)
 80026ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b0:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <HAL_GPIO_Init+0x2c4>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	430a      	orrs	r2, r1
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b8:	4a4f      	ldr	r2, [pc, #316]	; (80027f8 <HAL_GPIO_Init+0x2c8>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	589b      	ldr	r3, [r3, r2]
 80026c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2203      	movs	r2, #3
 80026ca:	4013      	ands	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	409a      	lsls	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	43da      	mvns	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	23a0      	movs	r3, #160	; 0xa0
 80026e0:	05db      	lsls	r3, r3, #23
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1de>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a44      	ldr	r2, [pc, #272]	; (80027fc <HAL_GPIO_Init+0x2cc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1da>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a43      	ldr	r2, [pc, #268]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1d6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a42      	ldr	r2, [pc, #264]	; (8002804 <HAL_GPIO_Init+0x2d4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1d2>
 80026fe:	2305      	movs	r3, #5
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x1e0>
 8002702:	2306      	movs	r3, #6
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x1e0>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x1e0>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x1e0>
 800270e:	2300      	movs	r3, #0
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	2103      	movs	r1, #3
 8002714:	400a      	ands	r2, r1
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4935      	ldr	r1, [pc, #212]	; (80027f8 <HAL_GPIO_Init+0x2c8>)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43da      	mvns	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	4013      	ands	r3, r2
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43da      	mvns	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	4013      	ands	r3, r2
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43da      	mvns	r2, r3
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	035b      	lsls	r3, r3, #13
 800279a:	4013      	ands	r3, r2
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	039b      	lsls	r3, r3, #14
 80027c4:	4013      	ands	r3, r2
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	40da      	lsrs	r2, r3
 80027e4:	1e13      	subs	r3, r2, #0
 80027e6:	d000      	beq.n	80027ea <HAL_GPIO_Init+0x2ba>
 80027e8:	e6ae      	b.n	8002548 <HAL_GPIO_Init+0x18>
  }
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b006      	add	sp, #24
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010000 	.word	0x40010000
 80027fc:	50000400 	.word	0x50000400
 8002800:	50000800 	.word	0x50000800
 8002804:	50001c00 	.word	0x50001c00
 8002808:	40010400 	.word	0x40010400

0800280c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	000a      	movs	r2, r1
 8002816:	1cbb      	adds	r3, r7, #2
 8002818:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	1cba      	adds	r2, r7, #2
 8002820:	8812      	ldrh	r2, [r2, #0]
 8002822:	4013      	ands	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002826:	230f      	movs	r3, #15
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e003      	b.n	8002838 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002830:	230f      	movs	r3, #15
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	0008      	movs	r0, r1
 8002850:	0011      	movs	r1, r2
 8002852:	1cbb      	adds	r3, r7, #2
 8002854:	1c02      	adds	r2, r0, #0
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	1c7b      	adds	r3, r7, #1
 800285a:	1c0a      	adds	r2, r1, #0
 800285c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800285e:	1c7b      	adds	r3, r7, #1
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002866:	1cbb      	adds	r3, r7, #2
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800286e:	e003      	b.n	8002878 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002870:	1cbb      	adds	r3, r7, #2
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e082      	b.n	8002998 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2241      	movs	r2, #65	; 0x41
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2240      	movs	r2, #64	; 0x40
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fb4b 	bl	8001f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2241      	movs	r2, #65	; 0x41
 80028b2:	2124      	movs	r1, #36	; 0x24
 80028b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	438a      	bics	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_I2C_Init+0x120>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4931      	ldr	r1, [pc, #196]	; (80029a4 <HAL_I2C_Init+0x124>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d108      	bne.n	80028fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	0209      	lsls	r1, r1, #8
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	e007      	b.n	800290e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2184      	movs	r1, #132	; 0x84
 8002908:	0209      	lsls	r1, r1, #8
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d104      	bne.n	8002920 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	491f      	ldr	r1, [pc, #124]	; (80029a8 <HAL_I2C_Init+0x128>)
 800292c:	430a      	orrs	r2, r1
 800292e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <HAL_I2C_Init+0x124>)
 800293c:	400a      	ands	r2, r1
 800293e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	431a      	orrs	r2, r3
 800294a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69d9      	ldr	r1, [r3, #28]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2101      	movs	r1, #1
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2241      	movs	r2, #65	; 0x41
 8002984:	2120      	movs	r1, #32
 8002986:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2242      	movs	r2, #66	; 0x42
 8002992:	2100      	movs	r1, #0
 8002994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	f0ffffff 	.word	0xf0ffffff
 80029a4:	ffff7fff 	.word	0xffff7fff
 80029a8:	02008000 	.word	0x02008000

080029ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	0008      	movs	r0, r1
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	0019      	movs	r1, r3
 80029ba:	230a      	movs	r3, #10
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	1c02      	adds	r2, r0, #0
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	2308      	movs	r3, #8
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	1c0a      	adds	r2, r1, #0
 80029c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2241      	movs	r2, #65	; 0x41
 80029ce:	5c9b      	ldrb	r3, [r3, r2]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d000      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0x2c>
 80029d6:	e0e7      	b.n	8002ba8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	5c9b      	ldrb	r3, [r3, r2]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Master_Transmit+0x3a>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0e1      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1fe>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2240      	movs	r2, #64	; 0x40
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ee:	f7ff fcb5 	bl	800235c <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	0219      	lsls	r1, r3, #8
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2319      	movs	r3, #25
 8002a02:	2201      	movs	r2, #1
 8002a04:	f000 fa04 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0cc      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2241      	movs	r2, #65	; 0x41
 8002a14:	2121      	movs	r1, #33	; 0x21
 8002a16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2242      	movs	r2, #66	; 0x42
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2208      	movs	r2, #8
 8002a30:	18ba      	adds	r2, r7, r2
 8002a32:	8812      	ldrh	r2, [r2, #0]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d911      	bls.n	8002a6a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	045c      	lsls	r4, r3, #17
 8002a56:	230a      	movs	r3, #10
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	8819      	ldrh	r1, [r3, #0]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_I2C_Master_Transmit+0x208>)
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	0023      	movs	r3, r4
 8002a64:	f000 fb74 	bl	8003150 <I2C_TransferConfig>
 8002a68:	e075      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	049c      	lsls	r4, r3, #18
 8002a7e:	230a      	movs	r3, #10
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	8819      	ldrh	r1, [r3, #0]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <HAL_I2C_Master_Transmit+0x208>)
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	0023      	movs	r3, r4
 8002a8c:	f000 fb60 	bl	8003150 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a90:	e061      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 f9f8 	bl	8002e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e081      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d03a      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0x1aa>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d136      	bne.n	8002b56 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	0013      	movs	r3, r2
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	f000 f98b 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e053      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2bff      	cmp	r3, #255	; 0xff
 8002b0a:	d911      	bls.n	8002b30 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	045c      	lsls	r4, r3, #17
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	8819      	ldrh	r1, [r3, #0]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	2300      	movs	r3, #0
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	0023      	movs	r3, r4
 8002b2a:	f000 fb11 	bl	8003150 <I2C_TransferConfig>
 8002b2e:	e012      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	049c      	lsls	r4, r3, #18
 8002b44:	230a      	movs	r3, #10
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	8819      	ldrh	r1, [r3, #0]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	0023      	movs	r3, r4
 8002b52:	f000 fafd 	bl	8003150 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d198      	bne.n	8002a92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 f9d0 	bl	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e01a      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <HAL_I2C_Master_Transmit+0x20c>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2241      	movs	r2, #65	; 0x41
 8002b90:	2120      	movs	r1, #32
 8002b92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2242      	movs	r2, #66	; 0x42
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2240      	movs	r2, #64	; 0x40
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b007      	add	sp, #28
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	80002000 	.word	0x80002000
 8002bb8:	fe00e800 	.word	0xfe00e800

08002bbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	0008      	movs	r0, r1
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	0019      	movs	r1, r3
 8002bca:	230a      	movs	r3, #10
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	1c02      	adds	r2, r0, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	1c0a      	adds	r2, r1, #0
 8002bd8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2241      	movs	r2, #65	; 0x41
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d000      	beq.n	8002be8 <HAL_I2C_Master_Receive+0x2c>
 8002be6:	e0e8      	b.n	8002dba <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	5c9b      	ldrb	r3, [r3, r2]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_Master_Receive+0x3a>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e0e2      	b.n	8002dbc <HAL_I2C_Master_Receive+0x200>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bfe:	f7ff fbad 	bl	800235c <HAL_GetTick>
 8002c02:	0003      	movs	r3, r0
 8002c04:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	0219      	lsls	r1, r3, #8
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	f000 f8fc 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0cd      	b.n	8002dbc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2241      	movs	r2, #65	; 0x41
 8002c24:	2122      	movs	r1, #34	; 0x22
 8002c26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2242      	movs	r2, #66	; 0x42
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2208      	movs	r2, #8
 8002c40:	18ba      	adds	r2, r7, r2
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2bff      	cmp	r3, #255	; 0xff
 8002c54:	d911      	bls.n	8002c7a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	045c      	lsls	r4, r3, #17
 8002c66:	230a      	movs	r3, #10
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	8819      	ldrh	r1, [r3, #0]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <HAL_I2C_Master_Receive+0x208>)
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	0023      	movs	r3, r4
 8002c74:	f000 fa6c 	bl	8003150 <I2C_TransferConfig>
 8002c78:	e076      	b.n	8002d68 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	049c      	lsls	r4, r3, #18
 8002c8e:	230a      	movs	r3, #10
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	8819      	ldrh	r1, [r3, #0]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_I2C_Master_Receive+0x208>)
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	0023      	movs	r3, r4
 8002c9c:	f000 fa58 	bl	8003150 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ca0:	e062      	b.n	8002d68 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 f96b 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cae:	1e03      	subs	r3, r0, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e082      	b.n	8002dbc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d03a      	beq.n	8002d68 <HAL_I2C_Master_Receive+0x1ac>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d136      	bne.n	8002d68 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	0013      	movs	r3, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	f000 f882 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e053      	b.n	8002dbc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2bff      	cmp	r3, #255	; 0xff
 8002d1c:	d911      	bls.n	8002d42 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	045c      	lsls	r4, r3, #17
 8002d2e:	230a      	movs	r3, #10
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	8819      	ldrh	r1, [r3, #0]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	0023      	movs	r3, r4
 8002d3c:	f000 fa08 	bl	8003150 <I2C_TransferConfig>
 8002d40:	e012      	b.n	8002d68 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	049c      	lsls	r4, r3, #18
 8002d56:	230a      	movs	r3, #10
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	8819      	ldrh	r1, [r3, #0]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	0023      	movs	r3, r4
 8002d64:	f000 f9f4 	bl	8003150 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d197      	bne.n	8002ca2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f8c7 	bl	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01a      	b.n	8002dbc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	490b      	ldr	r1, [pc, #44]	; (8002dc8 <HAL_I2C_Master_Receive+0x20c>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2241      	movs	r2, #65	; 0x41
 8002da2:	2120      	movs	r1, #32
 8002da4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2242      	movs	r2, #66	; 0x42
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
  }
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b007      	add	sp, #28
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	80002400 	.word	0x80002400
 8002dc8:	fe00e800 	.word	0xfe00e800

08002dcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d103      	bne.n	8002dea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d007      	beq.n	8002e08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	430a      	orrs	r2, r1
 8002e06:	619a      	str	r2, [r3, #24]
  }
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e20:	e021      	b.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	d01e      	beq.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e28:	f7ff fa98 	bl	800235c <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d302      	bcc.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d113      	bne.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	2220      	movs	r2, #32
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2241      	movs	r2, #65	; 0x41
 8002e4e:	2120      	movs	r1, #32
 8002e50:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2242      	movs	r2, #66	; 0x42
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2240      	movs	r2, #64	; 0x40
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	425a      	negs	r2, r3
 8002e76:	4153      	adcs	r3, r2
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	1dfb      	adds	r3, r7, #7
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d0ce      	beq.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e9a:	e02b      	b.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 f8da 	bl	800305c <I2C_IsAcknowledgeFailed>
 8002ea8:	1e03      	subs	r3, r0, #0
 8002eaa:	d001      	beq.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e029      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	d01e      	beq.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7ff fa51 	bl	800235c <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d113      	bne.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2241      	movs	r2, #65	; 0x41
 8002edc:	2120      	movs	r1, #32
 8002ede:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2242      	movs	r2, #66	; 0x42
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2202      	movs	r2, #2
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d1cc      	bne.n	8002e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f18:	e028      	b.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 f89b 	bl	800305c <I2C_IsAcknowledgeFailed>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e026      	b.n	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7ff fa15 	bl	800235c <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d113      	bne.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	2220      	movs	r2, #32
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2241      	movs	r2, #65	; 0x41
 8002f54:	2120      	movs	r1, #32
 8002f56:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2242      	movs	r2, #66	; 0x42
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2220      	movs	r2, #32
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d1cf      	bne.n	8002f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b004      	add	sp, #16
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f90:	e055      	b.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f85f 	bl	800305c <I2C_IsAcknowledgeFailed>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e053      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2220      	movs	r2, #32
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d129      	bne.n	8003008 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d105      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e03f      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	491d      	ldr	r1, [pc, #116]	; (8003058 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2241      	movs	r2, #65	; 0x41
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2242      	movs	r2, #66	; 0x42
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2240      	movs	r2, #64	; 0x40
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e022      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7ff f9a8 	bl	800235c <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	2220      	movs	r2, #32
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2241      	movs	r2, #65	; 0x41
 800302e:	2120      	movs	r1, #32
 8003030:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	2100      	movs	r1, #0
 8003038:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e007      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2204      	movs	r2, #4
 8003046:	4013      	ands	r3, r2
 8003048:	2b04      	cmp	r3, #4
 800304a:	d1a2      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	fe00e800 	.word	0xfe00e800

0800305c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2210      	movs	r2, #16
 8003070:	4013      	ands	r3, r2
 8003072:	2b10      	cmp	r3, #16
 8003074:	d164      	bne.n	8003140 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	049b      	lsls	r3, r3, #18
 8003080:	401a      	ands	r2, r3
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	049b      	lsls	r3, r3, #18
 8003086:	429a      	cmp	r2, r3
 8003088:	d02b      	beq.n	80030e2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	01c9      	lsls	r1, r1, #7
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309c:	e021      	b.n	80030e2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	d01e      	beq.n	80030e2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7ff f95a 	bl	800235c <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_IsAcknowledgeFailed+0x5e>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d113      	bne.n	80030e2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	2220      	movs	r2, #32
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2241      	movs	r2, #65	; 0x41
 80030ca:	2120      	movs	r1, #32
 80030cc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2242      	movs	r2, #66	; 0x42
 80030d2:	2100      	movs	r1, #0
 80030d4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2240      	movs	r2, #64	; 0x40
 80030da:	2100      	movs	r1, #0
 80030dc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e02f      	b.n	8003142 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2220      	movs	r2, #32
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d1d6      	bne.n	800309e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2210      	movs	r2, #16
 80030f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2220      	movs	r2, #32
 80030fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff fe62 	bl	8002dcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	490e      	ldr	r1, [pc, #56]	; (800314c <I2C_IsAcknowledgeFailed+0xf0>)
 8003114:	400a      	ands	r2, r1
 8003116:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	2204      	movs	r2, #4
 800311e:	431a      	orrs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2241      	movs	r2, #65	; 0x41
 8003128:	2120      	movs	r1, #32
 800312a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2242      	movs	r2, #66	; 0x42
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	0008      	movs	r0, r1
 800315a:	0011      	movs	r1, r2
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	240a      	movs	r4, #10
 8003160:	193b      	adds	r3, r7, r4
 8003162:	1c02      	adds	r2, r0, #0
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	2009      	movs	r0, #9
 8003168:	183b      	adds	r3, r7, r0
 800316a:	1c0a      	adds	r2, r1, #0
 800316c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	0d51      	lsrs	r1, r2, #21
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	00d2      	lsls	r2, r2, #3
 800317c:	400a      	ands	r2, r1
 800317e:	490e      	ldr	r1, [pc, #56]	; (80031b8 <I2C_TransferConfig+0x68>)
 8003180:	430a      	orrs	r2, r1
 8003182:	43d2      	mvns	r2, r2
 8003184:	401a      	ands	r2, r3
 8003186:	0011      	movs	r1, r2
 8003188:	193b      	adds	r3, r7, r4
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	059b      	lsls	r3, r3, #22
 800318e:	0d9a      	lsrs	r2, r3, #22
 8003190:	183b      	adds	r3, r7, r0
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	0418      	lsls	r0, r3, #16
 8003196:	23ff      	movs	r3, #255	; 0xff
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	4003      	ands	r3, r0
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b005      	add	sp, #20
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	03ff63ff 	.word	0x03ff63ff

080031bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2241      	movs	r2, #65	; 0x41
 80031ca:	5c9b      	ldrb	r3, [r3, r2]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d138      	bne.n	8003244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	5c9b      	ldrb	r3, [r3, r2]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031dc:	2302      	movs	r3, #2
 80031de:	e032      	b.n	8003246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	2101      	movs	r1, #1
 80031e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2241      	movs	r2, #65	; 0x41
 80031ec:	2124      	movs	r1, #36	; 0x24
 80031ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2101      	movs	r1, #1
 80031fc:	438a      	bics	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4911      	ldr	r1, [pc, #68]	; (8003250 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800320c:	400a      	ands	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2101      	movs	r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2241      	movs	r2, #65	; 0x41
 8003234:	2120      	movs	r1, #32
 8003236:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	2100      	movs	r1, #0
 800323e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e000      	b.n	8003246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
  }
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	ffffefff 	.word	0xffffefff

08003254 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2241      	movs	r2, #65	; 0x41
 8003262:	5c9b      	ldrb	r3, [r3, r2]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	d139      	bne.n	80032de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	5c9b      	ldrb	r3, [r3, r2]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003274:	2302      	movs	r3, #2
 8003276:	e033      	b.n	80032e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2240      	movs	r2, #64	; 0x40
 800327c:	2101      	movs	r1, #1
 800327e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2241      	movs	r2, #65	; 0x41
 8003284:	2124      	movs	r1, #36	; 0x24
 8003286:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	438a      	bics	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2241      	movs	r2, #65	; 0x41
 80032ce:	2120      	movs	r1, #32
 80032d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	2100      	movs	r1, #0
 80032d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	fffff0ff 	.word	0xfffff0ff

080032ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b5b0      	push	{r4, r5, r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f000 fb6c 	bl	80039d8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003300:	4bc8      	ldr	r3, [pc, #800]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	220c      	movs	r2, #12
 8003306:	4013      	ands	r3, r2
 8003308:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800330a:	4bc6      	ldr	r3, [pc, #792]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	025b      	lsls	r3, r3, #9
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	4013      	ands	r3, r2
 800331e:	d100      	bne.n	8003322 <HAL_RCC_OscConfig+0x36>
 8003320:	e07d      	b.n	800341e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d007      	beq.n	8003338 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d112      	bne.n	8003354 <HAL_RCC_OscConfig+0x68>
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	025b      	lsls	r3, r3, #9
 8003334:	429a      	cmp	r2, r3
 8003336:	d10d      	bne.n	8003354 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	4bba      	ldr	r3, [pc, #744]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	029b      	lsls	r3, r3, #10
 8003340:	4013      	ands	r3, r2
 8003342:	d100      	bne.n	8003346 <HAL_RCC_OscConfig+0x5a>
 8003344:	e06a      	b.n	800341c <HAL_RCC_OscConfig+0x130>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d166      	bne.n	800341c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f000 fb42 	bl	80039d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	025b      	lsls	r3, r3, #9
 800335c:	429a      	cmp	r2, r3
 800335e:	d107      	bne.n	8003370 <HAL_RCC_OscConfig+0x84>
 8003360:	4bb0      	ldr	r3, [pc, #704]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4baf      	ldr	r3, [pc, #700]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0249      	lsls	r1, r1, #9
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e027      	b.n	80033c0 <HAL_RCC_OscConfig+0xd4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	23a0      	movs	r3, #160	; 0xa0
 8003376:	02db      	lsls	r3, r3, #11
 8003378:	429a      	cmp	r2, r3
 800337a:	d10e      	bne.n	800339a <HAL_RCC_OscConfig+0xae>
 800337c:	4ba9      	ldr	r3, [pc, #676]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4ba8      	ldr	r3, [pc, #672]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003382:	2180      	movs	r1, #128	; 0x80
 8003384:	02c9      	lsls	r1, r1, #11
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4ba6      	ldr	r3, [pc, #664]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4ba5      	ldr	r3, [pc, #660]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	0249      	lsls	r1, r1, #9
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e012      	b.n	80033c0 <HAL_RCC_OscConfig+0xd4>
 800339a:	4ba2      	ldr	r3, [pc, #648]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4ba1      	ldr	r3, [pc, #644]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80033a0:	49a1      	ldr	r1, [pc, #644]	; (8003628 <HAL_RCC_OscConfig+0x33c>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	4b9f      	ldr	r3, [pc, #636]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	025b      	lsls	r3, r3, #9
 80033ae:	4013      	ands	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4b9b      	ldr	r3, [pc, #620]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b9a      	ldr	r3, [pc, #616]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80033ba:	499c      	ldr	r1, [pc, #624]	; (800362c <HAL_RCC_OscConfig+0x340>)
 80033bc:	400a      	ands	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d014      	beq.n	80033f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe ffc8 	bl	800235c <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d2:	f7fe ffc3 	bl	800235c <HAL_GetTick>
 80033d6:	0002      	movs	r2, r0
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b64      	cmp	r3, #100	; 0x64
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e2f9      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033e4:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	029b      	lsls	r3, r3, #10
 80033ec:	4013      	ands	r3, r2
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0xe6>
 80033f0:	e015      	b.n	800341e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fe ffb3 	bl	800235c <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe ffae 	bl	800235c <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e2e4      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800340e:	4b85      	ldr	r3, [pc, #532]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	029b      	lsls	r3, r3, #10
 8003416:	4013      	ands	r3, r2
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x110>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2202      	movs	r2, #2
 8003424:	4013      	ands	r3, r2
 8003426:	d100      	bne.n	800342a <HAL_RCC_OscConfig+0x13e>
 8003428:	e099      	b.n	800355e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	2220      	movs	r2, #32
 8003434:	4013      	ands	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003438:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b79      	ldr	r3, [pc, #484]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800343e:	2120      	movs	r1, #32
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	2220      	movs	r2, #32
 8003448:	4393      	bics	r3, r2
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d13e      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1ea>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d13b      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800345e:	4b71      	ldr	r3, [pc, #452]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2204      	movs	r2, #4
 8003464:	4013      	ands	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_RCC_OscConfig+0x186>
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e2b2      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b6c      	ldr	r3, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a6e      	ldr	r2, [pc, #440]	; (8003630 <HAL_RCC_OscConfig+0x344>)
 8003478:	4013      	ands	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	021a      	lsls	r2, r3, #8
 8003482:	4b68      	ldr	r3, [pc, #416]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2209      	movs	r2, #9
 800348e:	4393      	bics	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 fbeb 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 800349e:	0001      	movs	r1, r0
 80034a0:	4b60      	ldr	r3, [pc, #384]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	220f      	movs	r2, #15
 80034a8:	4013      	ands	r3, r2
 80034aa:	4a62      	ldr	r2, [pc, #392]	; (8003634 <HAL_RCC_OscConfig+0x348>)
 80034ac:	5cd3      	ldrb	r3, [r2, r3]
 80034ae:	000a      	movs	r2, r1
 80034b0:	40da      	lsrs	r2, r3
 80034b2:	4b61      	ldr	r3, [pc, #388]	; (8003638 <HAL_RCC_OscConfig+0x34c>)
 80034b4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80034b6:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_OscConfig+0x350>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2513      	movs	r5, #19
 80034bc:	197c      	adds	r4, r7, r5
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fe ff06 	bl	80022d0 <HAL_InitTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80034c8:	197b      	adds	r3, r7, r5
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d046      	beq.n	800355e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80034d0:	197b      	adds	r3, r7, r5
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	e280      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d027      	beq.n	800352c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034dc:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2209      	movs	r2, #9
 80034e2:	4393      	bics	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe ff35 	bl	800235c <HAL_GetTick>
 80034f2:	0003      	movs	r3, r0
 80034f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f8:	f7fe ff30 	bl	800235c <HAL_GetTick>
 80034fc:	0002      	movs	r2, r0
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e266      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800350a:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d0f1      	beq.n	80034f8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a45      	ldr	r2, [pc, #276]	; (8003630 <HAL_RCC_OscConfig+0x344>)
 800351a:	4013      	ands	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	021a      	lsls	r2, r3, #8
 8003524:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	e018      	b.n	800355e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352c:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003532:	2101      	movs	r1, #1
 8003534:	438a      	bics	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe ff10 	bl	800235c <HAL_GetTick>
 800353c:	0003      	movs	r3, r0
 800353e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003542:	f7fe ff0b 	bl	800235c <HAL_GetTick>
 8003546:	0002      	movs	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e241      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003554:	4b33      	ldr	r3, [pc, #204]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2204      	movs	r2, #4
 800355a:	4013      	ands	r3, r2
 800355c:	d1f1      	bne.n	8003542 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2210      	movs	r2, #16
 8003564:	4013      	ands	r3, r2
 8003566:	d100      	bne.n	800356a <HAL_RCC_OscConfig+0x27e>
 8003568:	e0a1      	b.n	80036ae <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d140      	bne.n	80035f2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003570:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4013      	ands	r3, r2
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x29c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e227      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003588:	4b26      	ldr	r3, [pc, #152]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <HAL_RCC_OscConfig+0x354>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	0a19      	lsrs	r1, r3, #8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	061a      	lsls	r2, r3, #24
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	0b5b      	lsrs	r3, r3, #13
 80035b6:	3301      	adds	r3, #1
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	0212      	lsls	r2, r2, #8
 80035bc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	210f      	movs	r1, #15
 80035c6:	400b      	ands	r3, r1
 80035c8:	491a      	ldr	r1, [pc, #104]	; (8003634 <HAL_RCC_OscConfig+0x348>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCC_OscConfig+0x34c>)
 80035d0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCC_OscConfig+0x350>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2513      	movs	r5, #19
 80035d8:	197c      	adds	r4, r7, r5
 80035da:	0018      	movs	r0, r3
 80035dc:	f7fe fe78 	bl	80022d0 <HAL_InitTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80035e4:	197b      	adds	r3, r7, r5
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d060      	beq.n	80036ae <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80035ec:	197b      	adds	r3, r7, r5
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	e1f2      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d03f      	beq.n	800367a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x338>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0049      	lsls	r1, r1, #1
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fea8 	bl	800235c <HAL_GetTick>
 800360c:	0003      	movs	r3, r0
 800360e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003610:	e018      	b.n	8003644 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003612:	f7fe fea3 	bl	800235c <HAL_GetTick>
 8003616:	0002      	movs	r2, r0
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d911      	bls.n	8003644 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e1d9      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
 8003624:	40021000 	.word	0x40021000
 8003628:	fffeffff 	.word	0xfffeffff
 800362c:	fffbffff 	.word	0xfffbffff
 8003630:	ffffe0ff 	.word	0xffffe0ff
 8003634:	08005d08 	.word	0x08005d08
 8003638:	20000184 	.word	0x20000184
 800363c:	20000188 	.word	0x20000188
 8003640:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003644:	4bc9      	ldr	r3, [pc, #804]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d0e0      	beq.n	8003612 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003650:	4bc6      	ldr	r3, [pc, #792]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4ac6      	ldr	r2, [pc, #792]	; (8003970 <HAL_RCC_OscConfig+0x684>)
 8003656:	4013      	ands	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	4bc3      	ldr	r3, [pc, #780]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003664:	4bc1      	ldr	r3, [pc, #772]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	0a19      	lsrs	r1, r3, #8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	061a      	lsls	r2, r3, #24
 8003672:	4bbe      	ldr	r3, [pc, #760]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	e019      	b.n	80036ae <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800367a:	4bbc      	ldr	r3, [pc, #752]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4bbb      	ldr	r3, [pc, #748]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003680:	49bc      	ldr	r1, [pc, #752]	; (8003974 <HAL_RCC_OscConfig+0x688>)
 8003682:	400a      	ands	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fe69 	bl	800235c <HAL_GetTick>
 800368a:	0003      	movs	r3, r0
 800368c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003690:	f7fe fe64 	bl	800235c <HAL_GetTick>
 8003694:	0002      	movs	r2, r0
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e19a      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036a2:	4bb2      	ldr	r3, [pc, #712]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4013      	ands	r3, r2
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2208      	movs	r2, #8
 80036b4:	4013      	ands	r3, r2
 80036b6:	d036      	beq.n	8003726 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d019      	beq.n	80036f4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c0:	4baa      	ldr	r3, [pc, #680]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80036c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c4:	4ba9      	ldr	r3, [pc, #676]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80036c6:	2101      	movs	r1, #1
 80036c8:	430a      	orrs	r2, r1
 80036ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fe46 	bl	800235c <HAL_GetTick>
 80036d0:	0003      	movs	r3, r0
 80036d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d6:	f7fe fe41 	bl	800235c <HAL_GetTick>
 80036da:	0002      	movs	r2, r0
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e177      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036e8:	4ba0      	ldr	r3, [pc, #640]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	2202      	movs	r2, #2
 80036ee:	4013      	ands	r3, r2
 80036f0:	d0f1      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3ea>
 80036f2:	e018      	b.n	8003726 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b9d      	ldr	r3, [pc, #628]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80036f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036f8:	4b9c      	ldr	r3, [pc, #624]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	438a      	bics	r2, r1
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe fe2c 	bl	800235c <HAL_GetTick>
 8003704:	0003      	movs	r3, r0
 8003706:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370a:	f7fe fe27 	bl	800235c <HAL_GetTick>
 800370e:	0002      	movs	r2, r0
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e15d      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800371c:	4b93      	ldr	r3, [pc, #588]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	2202      	movs	r2, #2
 8003722:	4013      	ands	r3, r2
 8003724:	d1f1      	bne.n	800370a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2204      	movs	r2, #4
 800372c:	4013      	ands	r3, r2
 800372e:	d100      	bne.n	8003732 <HAL_RCC_OscConfig+0x446>
 8003730:	e0ae      	b.n	8003890 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2023      	movs	r0, #35	; 0x23
 8003734:	183b      	adds	r3, r7, r0
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373a:	4b8c      	ldr	r3, [pc, #560]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800373c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	055b      	lsls	r3, r3, #21
 8003742:	4013      	ands	r3, r2
 8003744:	d109      	bne.n	800375a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	4b89      	ldr	r3, [pc, #548]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374a:	4b88      	ldr	r3, [pc, #544]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	0549      	lsls	r1, r1, #21
 8003750:	430a      	orrs	r2, r1
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003754:	183b      	adds	r3, r7, r0
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b87      	ldr	r3, [pc, #540]	; (8003978 <HAL_RCC_OscConfig+0x68c>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d11a      	bne.n	800379c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b84      	ldr	r3, [pc, #528]	; (8003978 <HAL_RCC_OscConfig+0x68c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b83      	ldr	r3, [pc, #524]	; (8003978 <HAL_RCC_OscConfig+0x68c>)
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	0049      	lsls	r1, r1, #1
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fe fdf2 	bl	800235c <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fe fded 	bl	800235c <HAL_GetTick>
 8003782:	0002      	movs	r2, r0
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	; 0x64
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e123      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_OscConfig+0x68c>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4cc>
 80037a8:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ac:	4b6f      	ldr	r3, [pc, #444]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	0049      	lsls	r1, r1, #1
 80037b2:	430a      	orrs	r2, r1
 80037b4:	651a      	str	r2, [r3, #80]	; 0x50
 80037b6:	e031      	b.n	800381c <HAL_RCC_OscConfig+0x530>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10c      	bne.n	80037da <HAL_RCC_OscConfig+0x4ee>
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c4:	4b69      	ldr	r3, [pc, #420]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037c6:	496b      	ldr	r1, [pc, #428]	; (8003974 <HAL_RCC_OscConfig+0x688>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50
 80037cc:	4b67      	ldr	r3, [pc, #412]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037d2:	496a      	ldr	r1, [pc, #424]	; (800397c <HAL_RCC_OscConfig+0x690>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	651a      	str	r2, [r3, #80]	; 0x50
 80037d8:	e020      	b.n	800381c <HAL_RCC_OscConfig+0x530>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	23a0      	movs	r3, #160	; 0xa0
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10e      	bne.n	8003804 <HAL_RCC_OscConfig+0x518>
 80037e6:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ea:	4b60      	ldr	r3, [pc, #384]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	00c9      	lsls	r1, r1, #3
 80037f0:	430a      	orrs	r2, r1
 80037f2:	651a      	str	r2, [r3, #80]	; 0x50
 80037f4:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037f8:	4b5c      	ldr	r3, [pc, #368]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	0049      	lsls	r1, r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	651a      	str	r2, [r3, #80]	; 0x50
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x530>
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003808:	4b58      	ldr	r3, [pc, #352]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800380a:	495a      	ldr	r1, [pc, #360]	; (8003974 <HAL_RCC_OscConfig+0x688>)
 800380c:	400a      	ands	r2, r1
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
 8003810:	4b56      	ldr	r3, [pc, #344]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003816:	4959      	ldr	r1, [pc, #356]	; (800397c <HAL_RCC_OscConfig+0x690>)
 8003818:	400a      	ands	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7fe fd9a 	bl	800235c <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800382c:	e009      	b.n	8003842 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fd95 	bl	800235c <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	4a51      	ldr	r2, [pc, #324]	; (8003980 <HAL_RCC_OscConfig+0x694>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0ca      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4013      	ands	r3, r2
 800384c:	d0ef      	beq.n	800382e <HAL_RCC_OscConfig+0x542>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fe fd84 	bl	800235c <HAL_GetTick>
 8003854:	0003      	movs	r3, r0
 8003856:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003858:	e009      	b.n	800386e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fe fd7f 	bl	800235c <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	4a46      	ldr	r2, [pc, #280]	; (8003980 <HAL_RCC_OscConfig+0x694>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0b4      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4013      	ands	r3, r2
 8003878:	d1ef      	bne.n	800385a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800387a:	2323      	movs	r3, #35	; 0x23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4b39      	ldr	r3, [pc, #228]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003888:	4b38      	ldr	r3, [pc, #224]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800388a:	493e      	ldr	r1, [pc, #248]	; (8003984 <HAL_RCC_OscConfig+0x698>)
 800388c:	400a      	ands	r2, r1
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d100      	bne.n	800389a <HAL_RCC_OscConfig+0x5ae>
 8003898:	e09d      	b.n	80039d6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d100      	bne.n	80038a2 <HAL_RCC_OscConfig+0x5b6>
 80038a0:	e076      	b.n	8003990 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d145      	bne.n	8003936 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b2f      	ldr	r3, [pc, #188]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80038b0:	4935      	ldr	r1, [pc, #212]	; (8003988 <HAL_RCC_OscConfig+0x69c>)
 80038b2:	400a      	ands	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fd51 	bl	800235c <HAL_GetTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe fd4c 	bl	800235c <HAL_GetTick>
 80038c4:	0002      	movs	r2, r0
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e082      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	049b      	lsls	r3, r3, #18
 80038da:	4013      	ands	r3, r2
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4a2a      	ldr	r2, [pc, #168]	; (800398c <HAL_RCC_OscConfig+0x6a0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	431a      	orrs	r2, r3
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_RCC_OscConfig+0x680>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fe:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	0449      	lsls	r1, r1, #17
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fe fd26 	bl	800235c <HAL_GetTick>
 8003910:	0003      	movs	r3, r0
 8003912:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003916:	f7fe fd21 	bl	800235c <HAL_GetTick>
 800391a:	0002      	movs	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e057      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	049b      	lsls	r3, r3, #18
 8003930:	4013      	ands	r3, r2
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x62a>
 8003934:	e04f      	b.n	80039d6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <HAL_RCC_OscConfig+0x680>)
 800393c:	4912      	ldr	r1, [pc, #72]	; (8003988 <HAL_RCC_OscConfig+0x69c>)
 800393e:	400a      	ands	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fe fd0b 	bl	800235c <HAL_GetTick>
 8003946:	0003      	movs	r3, r0
 8003948:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fd06 	bl	800235c <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e03c      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800395e:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_OscConfig+0x680>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	049b      	lsls	r3, r3, #18
 8003966:	4013      	ands	r3, r2
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x660>
 800396a:	e034      	b.n	80039d6 <HAL_RCC_OscConfig+0x6ea>
 800396c:	40021000 	.word	0x40021000
 8003970:	ffff1fff 	.word	0xffff1fff
 8003974:	fffffeff 	.word	0xfffffeff
 8003978:	40007000 	.word	0x40007000
 800397c:	fffffbff 	.word	0xfffffbff
 8003980:	00001388 	.word	0x00001388
 8003984:	efffffff 	.word	0xefffffff
 8003988:	feffffff 	.word	0xfeffffff
 800398c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01d      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCC_OscConfig+0x6f4>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	025b      	lsls	r3, r3, #9
 80039a8:	401a      	ands	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d10f      	bne.n	80039d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	23f0      	movs	r3, #240	; 0xf0
 80039b6:	039b      	lsls	r3, r3, #14
 80039b8:	401a      	ands	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	23c0      	movs	r3, #192	; 0xc0
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	401a      	ands	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b00a      	add	sp, #40	; 0x28
 80039de:	bdb0      	pop	{r4, r5, r7, pc}
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b5b0      	push	{r4, r5, r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e128      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b96      	ldr	r3, [pc, #600]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2201      	movs	r2, #1
 80039fe:	4013      	ands	r3, r2
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d91e      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b93      	ldr	r3, [pc, #588]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4393      	bics	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	4b90      	ldr	r3, [pc, #576]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a18:	f7fe fca0 	bl	800235c <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a20:	e009      	b.n	8003a36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a22:	f7fe fc9b 	bl	800235c <HAL_GetTick>
 8003a26:	0002      	movs	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	4a8a      	ldr	r2, [pc, #552]	; (8003c58 <HAL_RCC_ClockConfig+0x274>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e109      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b87      	ldr	r3, [pc, #540]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1ee      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4e:	4b83      	ldr	r3, [pc, #524]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	22f0      	movs	r2, #240	; 0xf0
 8003a54:	4393      	bics	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x8a>
 8003a6c:	e089      	b.n	8003b82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a76:	4b79      	ldr	r3, [pc, #484]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	029b      	lsls	r3, r3, #10
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d120      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0e1      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a8e:	4b73      	ldr	r3, [pc, #460]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	049b      	lsls	r3, r3, #18
 8003a96:	4013      	ands	r3, r2
 8003a98:	d114      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0d5      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aa6:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	4013      	ands	r3, r2
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0ca      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ab4:	4b69      	ldr	r3, [pc, #420]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4013      	ands	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0c2      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac4:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	4393      	bics	r3, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	4b62      	ldr	r3, [pc, #392]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe fc40 	bl	800235c <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae8:	e009      	b.n	8003afe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aea:	f7fe fc37 	bl	800235c <HAL_GetTick>
 8003aee:	0002      	movs	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	4a58      	ldr	r2, [pc, #352]	; (8003c58 <HAL_RCC_ClockConfig+0x274>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0a5      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003afe:	4b57      	ldr	r3, [pc, #348]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	220c      	movs	r2, #12
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d1ef      	bne.n	8003aea <HAL_RCC_ClockConfig+0x106>
 8003b0a:	e03a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d111      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b14:	e009      	b.n	8003b2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b16:	f7fe fc21 	bl	800235c <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	4a4d      	ldr	r2, [pc, #308]	; (8003c58 <HAL_RCC_ClockConfig+0x274>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e08f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	220c      	movs	r2, #12
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d1ef      	bne.n	8003b16 <HAL_RCC_ClockConfig+0x132>
 8003b36:	e024      	b.n	8003b82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d11b      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b40:	e009      	b.n	8003b56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b42:	f7fe fc0b 	bl	800235c <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	4a42      	ldr	r2, [pc, #264]	; (8003c58 <HAL_RCC_ClockConfig+0x274>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e079      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b56:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	220c      	movs	r2, #12
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d1ef      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x15e>
 8003b62:	e00e      	b.n	8003b82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fe fbfa 	bl	800235c <HAL_GetTick>
 8003b68:	0002      	movs	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <HAL_RCC_ClockConfig+0x274>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e068      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	220c      	movs	r2, #12
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b82:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d21e      	bcs.n	8003bce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2201      	movs	r2, #1
 8003b96:	4393      	bics	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ba2:	f7fe fbdb 	bl	800235c <HAL_GetTick>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	e009      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fe fbd6 	bl	800235c <HAL_GetTick>
 8003bb0:	0002      	movs	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_RCC_ClockConfig+0x274>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e044      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d1ee      	bne.n	8003bac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_RCC_ClockConfig+0x27c>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003be8:	430a      	orrs	r2, r1
 8003bea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_RCC_ClockConfig+0x280>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	00da      	lsls	r2, r3, #3
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c0c:	f000 f832 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003c10:	0001      	movs	r1, r0
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_RCC_ClockConfig+0x278>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	220f      	movs	r2, #15
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <HAL_RCC_ClockConfig+0x284>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	000a      	movs	r2, r1
 8003c22:	40da      	lsrs	r2, r3
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_ClockConfig+0x288>)
 8003c26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_RCC_ClockConfig+0x28c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	250b      	movs	r5, #11
 8003c2e:	197c      	adds	r4, r7, r5
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fe fb4d 	bl	80022d0 <HAL_InitTick>
 8003c36:	0003      	movs	r3, r0
 8003c38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003c3a:	197b      	adds	r3, r7, r5
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003c42:	197b      	adds	r3, r7, r5
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bdb0      	pop	{r4, r5, r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	40022000 	.word	0x40022000
 8003c58:	00001388 	.word	0x00001388
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	fffff8ff 	.word	0xfffff8ff
 8003c64:	ffffc7ff 	.word	0xffffc7ff
 8003c68:	08005d08 	.word	0x08005d08
 8003c6c:	20000184 	.word	0x20000184
 8003c70:	20000188 	.word	0x20000188

08003c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b08e      	sub	sp, #56	; 0x38
 8003c78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003c7a:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCC_GetSysClockFreq+0x138>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c82:	230c      	movs	r3, #12
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d014      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c8a:	d900      	bls.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1a>
 8003c8c:	e07b      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x112>
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d002      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x24>
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x3a>
 8003c96:	e076      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c98:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_RCC_GetSysClockFreq+0x138>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d002      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ca2:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ca6:	e07c      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ca8:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cac:	e079      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cae:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cb2:	e076      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	0c9a      	lsrs	r2, r3, #18
 8003cb8:	230f      	movs	r3, #15
 8003cba:	401a      	ands	r2, r3
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x148>)
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	0d9a      	lsrs	r2, r3, #22
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	4013      	ands	r3, r2
 8003cca:	3301      	adds	r3, #1
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cce:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_GetSysClockFreq+0x138>)
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	025b      	lsls	r3, r3, #9
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d01a      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	4a35      	ldr	r2, [pc, #212]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	69b8      	ldr	r0, [r7, #24]
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	f7fc fbb5 	bl	8000458 <__aeabi_lmul>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	000b      	movs	r3, r1
 8003cf2:	0010      	movs	r0, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f7fc fb89 	bl	8000418 <__aeabi_uldivmod>
 8003d06:	0002      	movs	r2, r0
 8003d08:	000b      	movs	r3, r1
 8003d0a:	0013      	movs	r3, r2
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0e:	e037      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d10:	4b26      	ldr	r3, [pc, #152]	; (8003dac <HAL_RCC_GetSysClockFreq+0x138>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2210      	movs	r2, #16
 8003d16:	4013      	ands	r3, r2
 8003d18:	d01a      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d24:	2300      	movs	r3, #0
 8003d26:	68b8      	ldr	r0, [r7, #8]
 8003d28:	68f9      	ldr	r1, [r7, #12]
 8003d2a:	f7fc fb95 	bl	8000458 <__aeabi_lmul>
 8003d2e:	0002      	movs	r2, r0
 8003d30:	000b      	movs	r3, r1
 8003d32:	0010      	movs	r0, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f7fc fb69 	bl	8000418 <__aeabi_uldivmod>
 8003d46:	0002      	movs	r2, r0
 8003d48:	000b      	movs	r3, r1
 8003d4a:	0013      	movs	r3, r2
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4e:	e017      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	0018      	movs	r0, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	0019      	movs	r1, r3
 8003d58:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f7fc fb7c 	bl	8000458 <__aeabi_lmul>
 8003d60:	0002      	movs	r2, r0
 8003d62:	000b      	movs	r3, r1
 8003d64:	0010      	movs	r0, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	001c      	movs	r4, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	001d      	movs	r5, r3
 8003d70:	0022      	movs	r2, r4
 8003d72:	002b      	movs	r3, r5
 8003d74:	f7fc fb50 	bl	8000418 <__aeabi_uldivmod>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	000b      	movs	r3, r1
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d84:	e00d      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003d86:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_RCC_GetSysClockFreq+0x138>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	4013      	ands	r3, r2
 8003d90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	3301      	adds	r3, #1
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	0212      	lsls	r2, r2, #8
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	0013      	movs	r3, r2
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003da0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b00e      	add	sp, #56	; 0x38
 8003daa:	bdb0      	pop	{r4, r5, r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	003d0900 	.word	0x003d0900
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	017d7840 	.word	0x017d7840
 8003dbc:	08005d20 	.word	0x08005d20

08003dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000184 	.word	0x20000184

08003dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd8:	f7ff fff2 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003ddc:	0001      	movs	r1, r0
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	2207      	movs	r2, #7
 8003de6:	4013      	ands	r3, r2
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	40d9      	lsrs	r1, r3
 8003dee:	000b      	movs	r3, r1
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	08005d18 	.word	0x08005d18

08003e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e04:	f7ff ffdc 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003e08:	0001      	movs	r1, r0
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	0adb      	lsrs	r3, r3, #11
 8003e10:	2207      	movs	r2, #7
 8003e12:	4013      	ands	r3, r2
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e16:	5cd3      	ldrb	r3, [r2, r3]
 8003e18:	40d9      	lsrs	r1, r3
 8003e1a:	000b      	movs	r3, r1
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	40021000 	.word	0x40021000
 8003e28:	08005d18 	.word	0x08005d18

08003e2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003e34:	2017      	movs	r0, #23
 8003e36:	183b      	adds	r3, r7, r0
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2220      	movs	r2, #32
 8003e42:	4013      	ands	r3, r2
 8003e44:	d100      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003e46:	e0c2      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e48:	4b81      	ldr	r3, [pc, #516]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	055b      	lsls	r3, r3, #21
 8003e50:	4013      	ands	r3, r2
 8003e52:	d109      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	4b7e      	ldr	r3, [pc, #504]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e58:	4b7d      	ldr	r3, [pc, #500]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	0549      	lsls	r1, r1, #21
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e62:	183b      	adds	r3, r7, r0
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b7a      	ldr	r3, [pc, #488]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4013      	ands	r3, r2
 8003e72:	d11a      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e74:	4b77      	ldr	r3, [pc, #476]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4b76      	ldr	r3, [pc, #472]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e7a:	2180      	movs	r1, #128	; 0x80
 8003e7c:	0049      	lsls	r1, r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e82:	f7fe fa6b 	bl	800235c <HAL_GetTick>
 8003e86:	0003      	movs	r3, r0
 8003e88:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fe fa66 	bl	800235c <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0d4      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b6d      	ldr	r3, [pc, #436]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003eaa:	4b69      	ldr	r3, [pc, #420]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	23c0      	movs	r3, #192	; 0xc0
 8003eb0:	039b      	lsls	r3, r3, #14
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	23c0      	movs	r3, #192	; 0xc0
 8003ebc:	039b      	lsls	r3, r3, #14
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d013      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	23c0      	movs	r3, #192	; 0xc0
 8003ecc:	029b      	lsls	r3, r3, #10
 8003ece:	401a      	ands	r2, r3
 8003ed0:	23c0      	movs	r3, #192	; 0xc0
 8003ed2:	029b      	lsls	r3, r3, #10
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d10a      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ed8:	4b5d      	ldr	r3, [pc, #372]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	029b      	lsls	r3, r3, #10
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d101      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0ac      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003eee:	4b58      	ldr	r3, [pc, #352]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ef2:	23c0      	movs	r3, #192	; 0xc0
 8003ef4:	029b      	lsls	r3, r3, #10
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	23c0      	movs	r3, #192	; 0xc0
 8003f06:	029b      	lsls	r3, r3, #10
 8003f08:	4013      	ands	r3, r2
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d033      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2220      	movs	r2, #32
 8003f16:	4013      	ands	r3, r2
 8003f18:	d02e      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	4a4e      	ldr	r2, [pc, #312]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f24:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f28:	4b49      	ldr	r3, [pc, #292]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0309      	lsls	r1, r1, #12
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f36:	4b46      	ldr	r3, [pc, #280]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f38:	4948      	ldr	r1, [pc, #288]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003f3e:	4b44      	ldr	r3, [pc, #272]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d014      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fa05 	bl	800235c <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f56:	e009      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fe fa00 	bl	800235c <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	4a3f      	ldr	r2, [pc, #252]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e06d      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6c:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0ef      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	23c0      	movs	r3, #192	; 0xc0
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	401a      	ands	r2, r3
 8003f82:	23c0      	movs	r3, #192	; 0xc0
 8003f84:	029b      	lsls	r3, r3, #10
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a35      	ldr	r2, [pc, #212]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	23c0      	movs	r3, #192	; 0xc0
 8003f9a:	039b      	lsls	r3, r3, #14
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003fa6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	23c0      	movs	r3, #192	; 0xc0
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc2:	4b23      	ldr	r3, [pc, #140]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003fc8:	4927      	ldr	r1, [pc, #156]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003fca:	400a      	ands	r2, r1
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fdc:	220c      	movs	r2, #12
 8003fde:	4393      	bics	r3, r2
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	0019      	movs	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004006:	430a      	orrs	r2, r1
 8004008:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2208      	movs	r2, #8
 8004010:	4013      	ands	r3, r2
 8004012:	d009      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	4a15      	ldr	r2, [pc, #84]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800401a:	4013      	ands	r3, r2
 800401c:	0019      	movs	r1, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004024:	430a      	orrs	r2, r1
 8004026:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	4013      	ands	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004032:	4b07      	ldr	r3, [pc, #28]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004038:	4013      	ands	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004042:	430a      	orrs	r2, r1
 8004044:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	0018      	movs	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	b006      	add	sp, #24
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	40007000 	.word	0x40007000
 8004058:	fffcffff 	.word	0xfffcffff
 800405c:	fff7ffff 	.word	0xfff7ffff
 8004060:	00001388 	.word	0x00001388
 8004064:	ffcfffff 	.word	0xffcfffff
 8004068:	efffffff 	.word	0xefffffff
 800406c:	fffff3ff 	.word	0xfffff3ff
 8004070:	ffffcfff 	.word	0xffffcfff
 8004074:	fff3ffff 	.word	0xfff3ffff

08004078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e044      	b.n	8004114 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2274      	movs	r2, #116	; 0x74
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f7fd ff95 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2224      	movs	r2, #36	; 0x24
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2101      	movs	r1, #1
 80040b4:	438a      	bics	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 f8d8 	bl	8004270 <UART_SetConfig>
 80040c0:	0003      	movs	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e024      	b.n	8004114 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f000 fb2d 	bl	8004734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	490d      	ldr	r1, [pc, #52]	; (800411c <HAL_UART_Init+0xa4>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	212a      	movs	r1, #42	; 0x2a
 80040f6:	438a      	bics	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2101      	movs	r1, #1
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 fbc5 	bl	800489c <UART_CheckIdleState>
 8004112:	0003      	movs	r3, r0
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}
 800411c:	ffffb7ff 	.word	0xffffb7ff

08004120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	1dbb      	adds	r3, r7, #6
 800412e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004134:	2b20      	cmp	r3, #32
 8004136:	d000      	beq.n	800413a <HAL_UART_Transmit+0x1a>
 8004138:	e095      	b.n	8004266 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_UART_Transmit+0x28>
 8004140:	1dbb      	adds	r3, r7, #6
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e08d      	b.n	8004268 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	015b      	lsls	r3, r3, #5
 8004154:	429a      	cmp	r2, r3
 8004156:	d109      	bne.n	800416c <HAL_UART_Transmit+0x4c>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e07d      	b.n	8004268 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2274      	movs	r2, #116	; 0x74
 8004170:	5c9b      	ldrb	r3, [r3, r2]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_UART_Transmit+0x5a>
 8004176:	2302      	movs	r3, #2
 8004178:	e076      	b.n	8004268 <HAL_UART_Transmit+0x148>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2274      	movs	r2, #116	; 0x74
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	2100      	movs	r1, #0
 8004188:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2221      	movs	r2, #33	; 0x21
 800418e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004190:	f7fe f8e4 	bl	800235c <HAL_GetTick>
 8004194:	0003      	movs	r3, r0
 8004196:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1dba      	adds	r2, r7, #6
 800419c:	2150      	movs	r1, #80	; 0x50
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1dba      	adds	r2, r7, #6
 80041a6:	2152      	movs	r1, #82	; 0x52
 80041a8:	8812      	ldrh	r2, [r2, #0]
 80041aa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	015b      	lsls	r3, r3, #5
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d108      	bne.n	80041ca <HAL_UART_Transmit+0xaa>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e003      	b.n	80041d2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2274      	movs	r2, #116	; 0x74
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80041da:	e02c      	b.n	8004236 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	0013      	movs	r3, r2
 80041e6:	2200      	movs	r2, #0
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	f000 fb9f 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80041ee:	1e03      	subs	r3, r0, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e038      	b.n	8004268 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	001a      	movs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	05d2      	lsls	r2, r2, #23
 8004208:	0dd2      	lsrs	r2, r2, #23
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3302      	adds	r3, #2
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e007      	b.n	8004224 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2252      	movs	r2, #82	; 0x52
 8004228:	5a9b      	ldrh	r3, [r3, r2]
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b299      	uxth	r1, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2252      	movs	r2, #82	; 0x52
 8004234:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2252      	movs	r2, #82	; 0x52
 800423a:	5a9b      	ldrh	r3, [r3, r2]
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1cc      	bne.n	80041dc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	0013      	movs	r3, r2
 800424c:	2200      	movs	r2, #0
 800424e:	2140      	movs	r1, #64	; 0x40
 8004250:	f000 fb6c 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8004254:	1e03      	subs	r3, r0, #0
 8004256:	d001      	beq.n	800425c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e005      	b.n	8004268 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b008      	add	sp, #32
 800426e:	bd80      	pop	{r7, pc}

08004270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b08e      	sub	sp, #56	; 0x38
 8004274:	af00      	add	r7, sp, #0
 8004276:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004278:	231a      	movs	r3, #26
 800427a:	2218      	movs	r2, #24
 800427c:	4694      	mov	ip, r2
 800427e:	44bc      	add	ip, r7
 8004280:	4463      	add	r3, ip
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	431a      	orrs	r2, r3
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	431a      	orrs	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4313      	orrs	r3, r2
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4abc      	ldr	r2, [pc, #752]	; (8004598 <UART_SetConfig+0x328>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	0019      	movs	r1, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b0:	430a      	orrs	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4ab8      	ldr	r2, [pc, #736]	; (800459c <UART_SetConfig+0x32c>)
 80042bc:	4013      	ands	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4ab2      	ldr	r2, [pc, #712]	; (80045a0 <UART_SetConfig+0x330>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e2:	4313      	orrs	r3, r2
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4aad      	ldr	r2, [pc, #692]	; (80045a4 <UART_SetConfig+0x334>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4aa9      	ldr	r2, [pc, #676]	; (80045a8 <UART_SetConfig+0x338>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d136      	bne.n	8004374 <UART_SetConfig+0x104>
 8004306:	4ba9      	ldr	r3, [pc, #676]	; (80045ac <UART_SetConfig+0x33c>)
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	220c      	movs	r2, #12
 800430c:	4013      	ands	r3, r2
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d020      	beq.n	8004354 <UART_SetConfig+0xe4>
 8004312:	d827      	bhi.n	8004364 <UART_SetConfig+0xf4>
 8004314:	2b08      	cmp	r3, #8
 8004316:	d00d      	beq.n	8004334 <UART_SetConfig+0xc4>
 8004318:	d824      	bhi.n	8004364 <UART_SetConfig+0xf4>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <UART_SetConfig+0xb4>
 800431e:	2b04      	cmp	r3, #4
 8004320:	d010      	beq.n	8004344 <UART_SetConfig+0xd4>
 8004322:	e01f      	b.n	8004364 <UART_SetConfig+0xf4>
 8004324:	231b      	movs	r3, #27
 8004326:	2218      	movs	r2, #24
 8004328:	4694      	mov	ip, r2
 800432a:	44bc      	add	ip, r7
 800432c:	4463      	add	r3, ip
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e06f      	b.n	8004414 <UART_SetConfig+0x1a4>
 8004334:	231b      	movs	r3, #27
 8004336:	2218      	movs	r2, #24
 8004338:	4694      	mov	ip, r2
 800433a:	44bc      	add	ip, r7
 800433c:	4463      	add	r3, ip
 800433e:	2202      	movs	r2, #2
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e067      	b.n	8004414 <UART_SetConfig+0x1a4>
 8004344:	231b      	movs	r3, #27
 8004346:	2218      	movs	r2, #24
 8004348:	4694      	mov	ip, r2
 800434a:	44bc      	add	ip, r7
 800434c:	4463      	add	r3, ip
 800434e:	2204      	movs	r2, #4
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e05f      	b.n	8004414 <UART_SetConfig+0x1a4>
 8004354:	231b      	movs	r3, #27
 8004356:	2218      	movs	r2, #24
 8004358:	4694      	mov	ip, r2
 800435a:	44bc      	add	ip, r7
 800435c:	4463      	add	r3, ip
 800435e:	2208      	movs	r2, #8
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e057      	b.n	8004414 <UART_SetConfig+0x1a4>
 8004364:	231b      	movs	r3, #27
 8004366:	2218      	movs	r2, #24
 8004368:	4694      	mov	ip, r2
 800436a:	44bc      	add	ip, r7
 800436c:	4463      	add	r3, ip
 800436e:	2210      	movs	r2, #16
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e04f      	b.n	8004414 <UART_SetConfig+0x1a4>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a89      	ldr	r2, [pc, #548]	; (80045a0 <UART_SetConfig+0x330>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d143      	bne.n	8004406 <UART_SetConfig+0x196>
 800437e:	4b8b      	ldr	r3, [pc, #556]	; (80045ac <UART_SetConfig+0x33c>)
 8004380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004382:	23c0      	movs	r3, #192	; 0xc0
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4013      	ands	r3, r2
 8004388:	22c0      	movs	r2, #192	; 0xc0
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	4293      	cmp	r3, r2
 800438e:	d02a      	beq.n	80043e6 <UART_SetConfig+0x176>
 8004390:	22c0      	movs	r2, #192	; 0xc0
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	4293      	cmp	r3, r2
 8004396:	d82e      	bhi.n	80043f6 <UART_SetConfig+0x186>
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	0112      	lsls	r2, r2, #4
 800439c:	4293      	cmp	r3, r2
 800439e:	d012      	beq.n	80043c6 <UART_SetConfig+0x156>
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d826      	bhi.n	80043f6 <UART_SetConfig+0x186>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <UART_SetConfig+0x146>
 80043ac:	2280      	movs	r2, #128	; 0x80
 80043ae:	00d2      	lsls	r2, r2, #3
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d010      	beq.n	80043d6 <UART_SetConfig+0x166>
 80043b4:	e01f      	b.n	80043f6 <UART_SetConfig+0x186>
 80043b6:	231b      	movs	r3, #27
 80043b8:	2218      	movs	r2, #24
 80043ba:	4694      	mov	ip, r2
 80043bc:	44bc      	add	ip, r7
 80043be:	4463      	add	r3, ip
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e026      	b.n	8004414 <UART_SetConfig+0x1a4>
 80043c6:	231b      	movs	r3, #27
 80043c8:	2218      	movs	r2, #24
 80043ca:	4694      	mov	ip, r2
 80043cc:	44bc      	add	ip, r7
 80043ce:	4463      	add	r3, ip
 80043d0:	2202      	movs	r2, #2
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e01e      	b.n	8004414 <UART_SetConfig+0x1a4>
 80043d6:	231b      	movs	r3, #27
 80043d8:	2218      	movs	r2, #24
 80043da:	4694      	mov	ip, r2
 80043dc:	44bc      	add	ip, r7
 80043de:	4463      	add	r3, ip
 80043e0:	2204      	movs	r2, #4
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e016      	b.n	8004414 <UART_SetConfig+0x1a4>
 80043e6:	231b      	movs	r3, #27
 80043e8:	2218      	movs	r2, #24
 80043ea:	4694      	mov	ip, r2
 80043ec:	44bc      	add	ip, r7
 80043ee:	4463      	add	r3, ip
 80043f0:	2208      	movs	r2, #8
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e00e      	b.n	8004414 <UART_SetConfig+0x1a4>
 80043f6:	231b      	movs	r3, #27
 80043f8:	2218      	movs	r2, #24
 80043fa:	4694      	mov	ip, r2
 80043fc:	44bc      	add	ip, r7
 80043fe:	4463      	add	r3, ip
 8004400:	2210      	movs	r2, #16
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e006      	b.n	8004414 <UART_SetConfig+0x1a4>
 8004406:	231b      	movs	r3, #27
 8004408:	2218      	movs	r2, #24
 800440a:	4694      	mov	ip, r2
 800440c:	44bc      	add	ip, r7
 800440e:	4463      	add	r3, ip
 8004410:	2210      	movs	r2, #16
 8004412:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <UART_SetConfig+0x330>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d000      	beq.n	8004420 <UART_SetConfig+0x1b0>
 800441e:	e088      	b.n	8004532 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004420:	231b      	movs	r3, #27
 8004422:	2218      	movs	r2, #24
 8004424:	4694      	mov	ip, r2
 8004426:	44bc      	add	ip, r7
 8004428:	4463      	add	r3, ip
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d01d      	beq.n	800446c <UART_SetConfig+0x1fc>
 8004430:	dc20      	bgt.n	8004474 <UART_SetConfig+0x204>
 8004432:	2b04      	cmp	r3, #4
 8004434:	d015      	beq.n	8004462 <UART_SetConfig+0x1f2>
 8004436:	dc1d      	bgt.n	8004474 <UART_SetConfig+0x204>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <UART_SetConfig+0x1d2>
 800443c:	2b02      	cmp	r3, #2
 800443e:	d005      	beq.n	800444c <UART_SetConfig+0x1dc>
 8004440:	e018      	b.n	8004474 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004442:	f7ff fcc7 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 8004446:	0003      	movs	r3, r0
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800444a:	e01d      	b.n	8004488 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800444c:	4b57      	ldr	r3, [pc, #348]	; (80045ac <UART_SetConfig+0x33c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2210      	movs	r2, #16
 8004452:	4013      	ands	r3, r2
 8004454:	d002      	beq.n	800445c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004456:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <UART_SetConfig+0x340>)
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800445a:	e015      	b.n	8004488 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800445c:	4b55      	ldr	r3, [pc, #340]	; (80045b4 <UART_SetConfig+0x344>)
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004460:	e012      	b.n	8004488 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7ff fc07 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004466:	0003      	movs	r3, r0
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800446a:	e00d      	b.n	8004488 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004472:	e009      	b.n	8004488 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004478:	231a      	movs	r3, #26
 800447a:	2218      	movs	r2, #24
 800447c:	4694      	mov	ip, r2
 800447e:	44bc      	add	ip, r7
 8004480:	4463      	add	r3, ip
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
        break;
 8004486:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d100      	bne.n	8004490 <UART_SetConfig+0x220>
 800448e:	e139      	b.n	8004704 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	0013      	movs	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	189b      	adds	r3, r3, r2
 800449a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d305      	bcc.n	80044ac <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d907      	bls.n	80044bc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80044ac:	231a      	movs	r3, #26
 80044ae:	2218      	movs	r2, #24
 80044b0:	4694      	mov	ip, r2
 80044b2:	44bc      	add	ip, r7
 80044b4:	4463      	add	r3, ip
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e123      	b.n	8004704 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	000b      	movs	r3, r1
 80044ca:	0e1b      	lsrs	r3, r3, #24
 80044cc:	0010      	movs	r0, r2
 80044ce:	0205      	lsls	r5, r0, #8
 80044d0:	431d      	orrs	r5, r3
 80044d2:	000b      	movs	r3, r1
 80044d4:	021c      	lsls	r4, r3, #8
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	1900      	adds	r0, r0, r4
 80044e8:	4169      	adcs	r1, r5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f7fb ff8e 	bl	8000418 <__aeabi_uldivmod>
 80044fc:	0002      	movs	r2, r0
 80044fe:	000b      	movs	r3, r1
 8004500:	0013      	movs	r3, r2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004506:	23c0      	movs	r3, #192	; 0xc0
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	429a      	cmp	r2, r3
 800450c:	d309      	bcc.n	8004522 <UART_SetConfig+0x2b2>
 800450e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	035b      	lsls	r3, r3, #13
 8004514:	429a      	cmp	r2, r3
 8004516:	d204      	bcs.n	8004522 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	e0f0      	b.n	8004704 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004522:	231a      	movs	r3, #26
 8004524:	2218      	movs	r2, #24
 8004526:	4694      	mov	ip, r2
 8004528:	44bc      	add	ip, r7
 800452a:	4463      	add	r3, ip
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e0e8      	b.n	8004704 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	429a      	cmp	r2, r3
 800453c:	d000      	beq.n	8004540 <UART_SetConfig+0x2d0>
 800453e:	e087      	b.n	8004650 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8004540:	231b      	movs	r3, #27
 8004542:	2218      	movs	r2, #24
 8004544:	4694      	mov	ip, r2
 8004546:	44bc      	add	ip, r7
 8004548:	4463      	add	r3, ip
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d835      	bhi.n	80045bc <UART_SetConfig+0x34c>
 8004550:	009a      	lsls	r2, r3, #2
 8004552:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <UART_SetConfig+0x348>)
 8004554:	18d3      	adds	r3, r2, r3
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800455a:	f7ff fc3b 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 800455e:	0003      	movs	r3, r0
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004562:	e035      	b.n	80045d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7ff fc4c 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 8004568:	0003      	movs	r3, r0
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800456c:	e030      	b.n	80045d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <UART_SetConfig+0x33c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2210      	movs	r2, #16
 8004574:	4013      	ands	r3, r2
 8004576:	d002      	beq.n	800457e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <UART_SetConfig+0x340>)
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800457c:	e028      	b.n	80045d0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <UART_SetConfig+0x344>)
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004582:	e025      	b.n	80045d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004584:	f7ff fb76 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004588:	0003      	movs	r3, r0
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800458c:	e020      	b.n	80045d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004594:	e01c      	b.n	80045d0 <UART_SetConfig+0x360>
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	efff69f3 	.word	0xefff69f3
 800459c:	ffffcfff 	.word	0xffffcfff
 80045a0:	40004800 	.word	0x40004800
 80045a4:	fffff4ff 	.word	0xfffff4ff
 80045a8:	40004400 	.word	0x40004400
 80045ac:	40021000 	.word	0x40021000
 80045b0:	003d0900 	.word	0x003d0900
 80045b4:	00f42400 	.word	0x00f42400
 80045b8:	08005d2c 	.word	0x08005d2c
      default:
        pclk = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045c0:	231a      	movs	r3, #26
 80045c2:	2218      	movs	r2, #24
 80045c4:	4694      	mov	ip, r2
 80045c6:	44bc      	add	ip, r7
 80045c8:	4463      	add	r3, ip
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
        break;
 80045ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d100      	bne.n	80045d8 <UART_SetConfig+0x368>
 80045d6:	e095      	b.n	8004704 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	005a      	lsls	r2, r3, #1
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	18d2      	adds	r2, r2, r3
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	0019      	movs	r1, r3
 80045ea:	0010      	movs	r0, r2
 80045ec:	f7fb fd9e 	bl	800012c <__udivsi3>
 80045f0:	0003      	movs	r3, r0
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	2b0f      	cmp	r3, #15
 80045fa:	d921      	bls.n	8004640 <UART_SetConfig+0x3d0>
 80045fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	429a      	cmp	r2, r3
 8004604:	d21c      	bcs.n	8004640 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	b29a      	uxth	r2, r3
 800460a:	200e      	movs	r0, #14
 800460c:	2418      	movs	r4, #24
 800460e:	193b      	adds	r3, r7, r4
 8004610:	181b      	adds	r3, r3, r0
 8004612:	210f      	movs	r1, #15
 8004614:	438a      	bics	r2, r1
 8004616:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	2207      	movs	r2, #7
 8004620:	4013      	ands	r3, r2
 8004622:	b299      	uxth	r1, r3
 8004624:	193b      	adds	r3, r7, r4
 8004626:	181b      	adds	r3, r3, r0
 8004628:	193a      	adds	r2, r7, r4
 800462a:	1812      	adds	r2, r2, r0
 800462c:	8812      	ldrh	r2, [r2, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	193a      	adds	r2, r7, r4
 8004638:	1812      	adds	r2, r2, r0
 800463a:	8812      	ldrh	r2, [r2, #0]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	e061      	b.n	8004704 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004640:	231a      	movs	r3, #26
 8004642:	2218      	movs	r2, #24
 8004644:	4694      	mov	ip, r2
 8004646:	44bc      	add	ip, r7
 8004648:	4463      	add	r3, ip
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e059      	b.n	8004704 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004650:	231b      	movs	r3, #27
 8004652:	2218      	movs	r2, #24
 8004654:	4694      	mov	ip, r2
 8004656:	44bc      	add	ip, r7
 8004658:	4463      	add	r3, ip
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d822      	bhi.n	80046a6 <UART_SetConfig+0x436>
 8004660:	009a      	lsls	r2, r3, #2
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <UART_SetConfig+0x4b4>)
 8004664:	18d3      	adds	r3, r2, r3
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466a:	f7ff fbb3 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 800466e:	0003      	movs	r3, r0
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004672:	e022      	b.n	80046ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7ff fbc4 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 8004678:	0003      	movs	r3, r0
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800467c:	e01d      	b.n	80046ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <UART_SetConfig+0x4b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	4013      	ands	r3, r2
 8004686:	d002      	beq.n	800468e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <UART_SetConfig+0x4bc>)
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800468c:	e015      	b.n	80046ba <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800468e:	4b28      	ldr	r3, [pc, #160]	; (8004730 <UART_SetConfig+0x4c0>)
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004692:	e012      	b.n	80046ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004694:	f7ff faee 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004698:	0003      	movs	r3, r0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800469c:	e00d      	b.n	80046ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046a4:	e009      	b.n	80046ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046aa:	231a      	movs	r3, #26
 80046ac:	2218      	movs	r2, #24
 80046ae:	4694      	mov	ip, r2
 80046b0:	44bc      	add	ip, r7
 80046b2:	4463      	add	r3, ip
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
        break;
 80046b8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d021      	beq.n	8004704 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	085a      	lsrs	r2, r3, #1
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	18d2      	adds	r2, r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	0019      	movs	r1, r3
 80046d0:	0010      	movs	r0, r2
 80046d2:	f7fb fd2b 	bl	800012c <__udivsi3>
 80046d6:	0003      	movs	r3, r0
 80046d8:	b29b      	uxth	r3, r3
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d909      	bls.n	80046f6 <UART_SetConfig+0x486>
 80046e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	025b      	lsls	r3, r3, #9
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d204      	bcs.n	80046f6 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e006      	b.n	8004704 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80046f6:	231a      	movs	r3, #26
 80046f8:	2218      	movs	r2, #24
 80046fa:	4694      	mov	ip, r2
 80046fc:	44bc      	add	ip, r7
 80046fe:	4463      	add	r3, ip
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2200      	movs	r2, #0
 8004708:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2200      	movs	r2, #0
 800470e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004710:	231a      	movs	r3, #26
 8004712:	2218      	movs	r2, #24
 8004714:	4694      	mov	ip, r2
 8004716:	44bc      	add	ip, r7
 8004718:	4463      	add	r3, ip
 800471a:	781b      	ldrb	r3, [r3, #0]
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b00e      	add	sp, #56	; 0x38
 8004722:	bdb0      	pop	{r4, r5, r7, pc}
 8004724:	08005d50 	.word	0x08005d50
 8004728:	40021000 	.word	0x40021000
 800472c:	003d0900 	.word	0x003d0900
 8004730:	00f42400 	.word	0x00f42400

08004734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	d00b      	beq.n	800475e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a4a      	ldr	r2, [pc, #296]	; (8004878 <UART_AdvFeatureConfig+0x144>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2202      	movs	r2, #2
 8004764:	4013      	ands	r3, r2
 8004766:	d00b      	beq.n	8004780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4a43      	ldr	r2, [pc, #268]	; (800487c <UART_AdvFeatureConfig+0x148>)
 8004770:	4013      	ands	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2204      	movs	r2, #4
 8004786:	4013      	ands	r3, r2
 8004788:	d00b      	beq.n	80047a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a3b      	ldr	r2, [pc, #236]	; (8004880 <UART_AdvFeatureConfig+0x14c>)
 8004792:	4013      	ands	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	2208      	movs	r2, #8
 80047a8:	4013      	ands	r3, r2
 80047aa:	d00b      	beq.n	80047c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a34      	ldr	r2, [pc, #208]	; (8004884 <UART_AdvFeatureConfig+0x150>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2210      	movs	r2, #16
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <UART_AdvFeatureConfig+0x154>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2220      	movs	r2, #32
 80047ec:	4013      	ands	r3, r2
 80047ee:	d00b      	beq.n	8004808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4a25      	ldr	r2, [pc, #148]	; (800488c <UART_AdvFeatureConfig+0x158>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	4013      	ands	r3, r2
 8004810:	d01d      	beq.n	800484e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <UART_AdvFeatureConfig+0x15c>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	035b      	lsls	r3, r3, #13
 8004832:	429a      	cmp	r2, r3
 8004834:	d10b      	bne.n	800484e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a15      	ldr	r2, [pc, #84]	; (8004894 <UART_AdvFeatureConfig+0x160>)
 800483e:	4013      	ands	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	4013      	ands	r3, r2
 8004856:	d00b      	beq.n	8004870 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <UART_AdvFeatureConfig+0x164>)
 8004860:	4013      	ands	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}
 8004878:	fffdffff 	.word	0xfffdffff
 800487c:	fffeffff 	.word	0xfffeffff
 8004880:	fffbffff 	.word	0xfffbffff
 8004884:	ffff7fff 	.word	0xffff7fff
 8004888:	ffffefff 	.word	0xffffefff
 800488c:	ffffdfff 	.word	0xffffdfff
 8004890:	ffefffff 	.word	0xffefffff
 8004894:	ff9fffff 	.word	0xff9fffff
 8004898:	fff7ffff 	.word	0xfff7ffff

0800489c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	2100      	movs	r1, #0
 80048aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048ac:	f7fd fd56 	bl	800235c <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	4013      	ands	r3, r2
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d10c      	bne.n	80048dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2280      	movs	r2, #128	; 0x80
 80048c6:	0391      	lsls	r1, r2, #14
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <UART_CheckIdleState+0x8c>)
 80048cc:	9200      	str	r2, [sp, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f000 f82c 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d001      	beq.n	80048dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e021      	b.n	8004920 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2204      	movs	r2, #4
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d10c      	bne.n	8004904 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2280      	movs	r2, #128	; 0x80
 80048ee:	03d1      	lsls	r1, r2, #15
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <UART_CheckIdleState+0x8c>)
 80048f4:	9200      	str	r2, [sp, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f000 f818 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d001      	beq.n	8004904 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e00d      	b.n	8004920 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2274      	movs	r2, #116	; 0x74
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b004      	add	sp, #16
 8004926:	bd80      	pop	{r7, pc}
 8004928:	01ffffff 	.word	0x01ffffff

0800492c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b094      	sub	sp, #80	; 0x50
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	e0a3      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004940:	3301      	adds	r3, #1
 8004942:	d100      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004944:	e09f      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fd fd09 	bl	800235c <HAL_GetTick>
 800494a:	0002      	movs	r2, r0
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <UART_WaitOnFlagUntilTimeout+0x30>
 8004956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004958:	2b00      	cmp	r3, #0
 800495a:	d13d      	bne.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495c:	f3ef 8310 	mrs	r3, PRIMASK
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
 8004966:	2301      	movs	r3, #1
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	494c      	ldr	r1, [pc, #304]	; (8004ab0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800497e:	400a      	ands	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004996:	643b      	str	r3, [r7, #64]	; 0x40
 8004998:	2301      	movs	r3, #1
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2274      	movs	r2, #116	; 0x74
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e067      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2204      	movs	r2, #4
 80049e0:	4013      	ands	r3, r2
 80049e2:	d050      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	401a      	ands	r2, r3
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d146      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a02:	f3ef 8310 	mrs	r3, PRIMASK
 8004a06:	613b      	str	r3, [r7, #16]
  return(result);
 8004a08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4923      	ldr	r1, [pc, #140]	; (8004ab0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f383 8810 	msr	PRIMASK, r3
}
 8004a32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a34:	f3ef 8310 	mrs	r3, PRIMASK
 8004a38:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3e:	2301      	movs	r3, #1
 8004a40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2101      	movs	r1, #1
 8004a56:	438a      	bics	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f383 8810 	msr	PRIMASK, r3
}
 8004a64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2280      	movs	r2, #128	; 0x80
 8004a76:	2120      	movs	r1, #32
 8004a78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2274      	movs	r2, #116	; 0x74
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e010      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	425a      	negs	r2, r3
 8004a96:	4153      	adcs	r3, r2
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d100      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004aa4:	e74b      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b014      	add	sp, #80	; 0x50
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	fffffe5f 	.word	0xfffffe5f

08004ab4 <__errno>:
 8004ab4:	4b01      	ldr	r3, [pc, #4]	; (8004abc <__errno+0x8>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	4770      	bx	lr
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	20000190 	.word	0x20000190

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	4d0c      	ldr	r5, [pc, #48]	; (8004af8 <__libc_init_array+0x38>)
 8004ac6:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	f001 f8a9 	bl	8005c28 <_init>
 8004ad6:	4d0a      	ldr	r5, [pc, #40]	; (8004b00 <__libc_init_array+0x40>)
 8004ad8:	4c0a      	ldr	r4, [pc, #40]	; (8004b04 <__libc_init_array+0x44>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	00b3      	lsls	r3, r6, #2
 8004ae6:	58eb      	ldr	r3, [r5, r3]
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	00b3      	lsls	r3, r6, #2
 8004af0:	58eb      	ldr	r3, [r5, r3]
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08005e14 	.word	0x08005e14
 8004afc:	08005e14 	.word	0x08005e14
 8004b00:	08005e14 	.word	0x08005e14
 8004b04:	08005e18 	.word	0x08005e18

08004b08 <memcpy>:
 8004b08:	2300      	movs	r3, #0
 8004b0a:	b510      	push	{r4, lr}
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d100      	bne.n	8004b12 <memcpy+0xa>
 8004b10:	bd10      	pop	{r4, pc}
 8004b12:	5ccc      	ldrb	r4, [r1, r3]
 8004b14:	54c4      	strb	r4, [r0, r3]
 8004b16:	3301      	adds	r3, #1
 8004b18:	e7f8      	b.n	8004b0c <memcpy+0x4>

08004b1a <memset>:
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	1882      	adds	r2, r0, r2
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d100      	bne.n	8004b24 <memset+0xa>
 8004b22:	4770      	bx	lr
 8004b24:	7019      	strb	r1, [r3, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	e7f9      	b.n	8004b1e <memset+0x4>
	...

08004b2c <_puts_r>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	0005      	movs	r5, r0
 8004b30:	000e      	movs	r6, r1
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d004      	beq.n	8004b40 <_puts_r+0x14>
 8004b36:	6983      	ldr	r3, [r0, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <_puts_r+0x14>
 8004b3c:	f000 faac 	bl	8005098 <__sinit>
 8004b40:	69ab      	ldr	r3, [r5, #24]
 8004b42:	68ac      	ldr	r4, [r5, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <_puts_r+0x22>
 8004b48:	0028      	movs	r0, r5
 8004b4a:	f000 faa5 	bl	8005098 <__sinit>
 8004b4e:	4b2d      	ldr	r3, [pc, #180]	; (8004c04 <_puts_r+0xd8>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	d122      	bne.n	8004b9a <_puts_r+0x6e>
 8004b54:	686c      	ldr	r4, [r5, #4]
 8004b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b58:	07db      	lsls	r3, r3, #31
 8004b5a:	d405      	bmi.n	8004b68 <_puts_r+0x3c>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	059b      	lsls	r3, r3, #22
 8004b60:	d402      	bmi.n	8004b68 <_puts_r+0x3c>
 8004b62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b64:	f000 fb39 	bl	80051da <__retarget_lock_acquire_recursive>
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	071b      	lsls	r3, r3, #28
 8004b6c:	d502      	bpl.n	8004b74 <_puts_r+0x48>
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d129      	bne.n	8004bc8 <_puts_r+0x9c>
 8004b74:	0021      	movs	r1, r4
 8004b76:	0028      	movs	r0, r5
 8004b78:	f000 f8e8 	bl	8004d4c <__swsetup_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d023      	beq.n	8004bc8 <_puts_r+0x9c>
 8004b80:	2501      	movs	r5, #1
 8004b82:	426d      	negs	r5, r5
 8004b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b86:	07db      	lsls	r3, r3, #31
 8004b88:	d405      	bmi.n	8004b96 <_puts_r+0x6a>
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	059b      	lsls	r3, r3, #22
 8004b8e:	d402      	bmi.n	8004b96 <_puts_r+0x6a>
 8004b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b92:	f000 fb23 	bl	80051dc <__retarget_lock_release_recursive>
 8004b96:	0028      	movs	r0, r5
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <_puts_r+0xdc>)
 8004b9c:	429c      	cmp	r4, r3
 8004b9e:	d101      	bne.n	8004ba4 <_puts_r+0x78>
 8004ba0:	68ac      	ldr	r4, [r5, #8]
 8004ba2:	e7d8      	b.n	8004b56 <_puts_r+0x2a>
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <_puts_r+0xe0>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d1d5      	bne.n	8004b56 <_puts_r+0x2a>
 8004baa:	68ec      	ldr	r4, [r5, #12]
 8004bac:	e7d3      	b.n	8004b56 <_puts_r+0x2a>
 8004bae:	3601      	adds	r6, #1
 8004bb0:	60a3      	str	r3, [r4, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da04      	bge.n	8004bc0 <_puts_r+0x94>
 8004bb6:	69a2      	ldr	r2, [r4, #24]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	dc16      	bgt.n	8004bea <_puts_r+0xbe>
 8004bbc:	290a      	cmp	r1, #10
 8004bbe:	d014      	beq.n	8004bea <_puts_r+0xbe>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	7019      	strb	r1, [r3, #0]
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	7831      	ldrb	r1, [r6, #0]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	2900      	cmp	r1, #0
 8004bd0:	d1ed      	bne.n	8004bae <_puts_r+0x82>
 8004bd2:	60a3      	str	r3, [r4, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da0f      	bge.n	8004bf8 <_puts_r+0xcc>
 8004bd8:	0028      	movs	r0, r5
 8004bda:	0022      	movs	r2, r4
 8004bdc:	310a      	adds	r1, #10
 8004bde:	f000 f85f 	bl	8004ca0 <__swbuf_r>
 8004be2:	250a      	movs	r5, #10
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d1cd      	bne.n	8004b84 <_puts_r+0x58>
 8004be8:	e7ca      	b.n	8004b80 <_puts_r+0x54>
 8004bea:	0022      	movs	r2, r4
 8004bec:	0028      	movs	r0, r5
 8004bee:	f000 f857 	bl	8004ca0 <__swbuf_r>
 8004bf2:	1c43      	adds	r3, r0, #1
 8004bf4:	d1e8      	bne.n	8004bc8 <_puts_r+0x9c>
 8004bf6:	e7c3      	b.n	8004b80 <_puts_r+0x54>
 8004bf8:	250a      	movs	r5, #10
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	701d      	strb	r5, [r3, #0]
 8004c02:	e7bf      	b.n	8004b84 <_puts_r+0x58>
 8004c04:	08005d98 	.word	0x08005d98
 8004c08:	08005db8 	.word	0x08005db8
 8004c0c:	08005d78 	.word	0x08005d78

08004c10 <puts>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <puts+0x10>)
 8004c14:	0001      	movs	r1, r0
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	f7ff ff88 	bl	8004b2c <_puts_r>
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	20000190 	.word	0x20000190

08004c24 <siprintf>:
 8004c24:	b40e      	push	{r1, r2, r3}
 8004c26:	b500      	push	{lr}
 8004c28:	490b      	ldr	r1, [pc, #44]	; (8004c58 <siprintf+0x34>)
 8004c2a:	b09c      	sub	sp, #112	; 0x70
 8004c2c:	ab1d      	add	r3, sp, #116	; 0x74
 8004c2e:	9002      	str	r0, [sp, #8]
 8004c30:	9006      	str	r0, [sp, #24]
 8004c32:	9107      	str	r1, [sp, #28]
 8004c34:	9104      	str	r1, [sp, #16]
 8004c36:	4809      	ldr	r0, [pc, #36]	; (8004c5c <siprintf+0x38>)
 8004c38:	4909      	ldr	r1, [pc, #36]	; (8004c60 <siprintf+0x3c>)
 8004c3a:	cb04      	ldmia	r3!, {r2}
 8004c3c:	9105      	str	r1, [sp, #20]
 8004c3e:	6800      	ldr	r0, [r0, #0]
 8004c40:	a902      	add	r1, sp, #8
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	f000 fc42 	bl	80054cc <_svfiprintf_r>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9a02      	ldr	r2, [sp, #8]
 8004c4c:	7013      	strb	r3, [r2, #0]
 8004c4e:	b01c      	add	sp, #112	; 0x70
 8004c50:	bc08      	pop	{r3}
 8004c52:	b003      	add	sp, #12
 8004c54:	4718      	bx	r3
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	7fffffff 	.word	0x7fffffff
 8004c5c:	20000190 	.word	0x20000190
 8004c60:	ffff0208 	.word	0xffff0208

08004c64 <strcpy>:
 8004c64:	0003      	movs	r3, r0
 8004c66:	780a      	ldrb	r2, [r1, #0]
 8004c68:	3101      	adds	r1, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	d1f9      	bne.n	8004c66 <strcpy+0x2>
 8004c72:	4770      	bx	lr

08004c74 <strncat>:
 8004c74:	0003      	movs	r3, r0
 8004c76:	b530      	push	{r4, r5, lr}
 8004c78:	781c      	ldrb	r4, [r3, #0]
 8004c7a:	2c00      	cmp	r4, #0
 8004c7c:	d108      	bne.n	8004c90 <strncat+0x1c>
 8004c7e:	1889      	adds	r1, r1, r2
 8004c80:	2a00      	cmp	r2, #0
 8004c82:	d004      	beq.n	8004c8e <strncat+0x1a>
 8004c84:	4255      	negs	r5, r2
 8004c86:	5d4d      	ldrb	r5, [r1, r5]
 8004c88:	701d      	strb	r5, [r3, #0]
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	d102      	bne.n	8004c94 <strncat+0x20>
 8004c8e:	bd30      	pop	{r4, r5, pc}
 8004c90:	3301      	adds	r3, #1
 8004c92:	e7f1      	b.n	8004c78 <strncat+0x4>
 8004c94:	2a01      	cmp	r2, #1
 8004c96:	d100      	bne.n	8004c9a <strncat+0x26>
 8004c98:	705c      	strb	r4, [r3, #1]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	3a01      	subs	r2, #1
 8004c9e:	e7ef      	b.n	8004c80 <strncat+0xc>

08004ca0 <__swbuf_r>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	0005      	movs	r5, r0
 8004ca4:	000e      	movs	r6, r1
 8004ca6:	0014      	movs	r4, r2
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d004      	beq.n	8004cb6 <__swbuf_r+0x16>
 8004cac:	6983      	ldr	r3, [r0, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <__swbuf_r+0x16>
 8004cb2:	f000 f9f1 	bl	8005098 <__sinit>
 8004cb6:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <__swbuf_r+0xa0>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	d12e      	bne.n	8004d1a <__swbuf_r+0x7a>
 8004cbc:	686c      	ldr	r4, [r5, #4]
 8004cbe:	69a3      	ldr	r3, [r4, #24]
 8004cc0:	60a3      	str	r3, [r4, #8]
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	d532      	bpl.n	8004d2e <__swbuf_r+0x8e>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d02f      	beq.n	8004d2e <__swbuf_r+0x8e>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	6922      	ldr	r2, [r4, #16]
 8004cd2:	b2f7      	uxtb	r7, r6
 8004cd4:	1a98      	subs	r0, r3, r2
 8004cd6:	6963      	ldr	r3, [r4, #20]
 8004cd8:	b2f6      	uxtb	r6, r6
 8004cda:	4283      	cmp	r3, r0
 8004cdc:	dc05      	bgt.n	8004cea <__swbuf_r+0x4a>
 8004cde:	0021      	movs	r1, r4
 8004ce0:	0028      	movs	r0, r5
 8004ce2:	f000 f937 	bl	8004f54 <_fflush_r>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d127      	bne.n	8004d3a <__swbuf_r+0x9a>
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	3001      	adds	r0, #1
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	60a3      	str	r3, [r4, #8]
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	6022      	str	r2, [r4, #0]
 8004cf8:	701f      	strb	r7, [r3, #0]
 8004cfa:	6963      	ldr	r3, [r4, #20]
 8004cfc:	4283      	cmp	r3, r0
 8004cfe:	d004      	beq.n	8004d0a <__swbuf_r+0x6a>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	07db      	lsls	r3, r3, #31
 8004d04:	d507      	bpl.n	8004d16 <__swbuf_r+0x76>
 8004d06:	2e0a      	cmp	r6, #10
 8004d08:	d105      	bne.n	8004d16 <__swbuf_r+0x76>
 8004d0a:	0021      	movs	r1, r4
 8004d0c:	0028      	movs	r0, r5
 8004d0e:	f000 f921 	bl	8004f54 <_fflush_r>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d111      	bne.n	8004d3a <__swbuf_r+0x9a>
 8004d16:	0030      	movs	r0, r6
 8004d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <__swbuf_r+0xa4>)
 8004d1c:	429c      	cmp	r4, r3
 8004d1e:	d101      	bne.n	8004d24 <__swbuf_r+0x84>
 8004d20:	68ac      	ldr	r4, [r5, #8]
 8004d22:	e7cc      	b.n	8004cbe <__swbuf_r+0x1e>
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <__swbuf_r+0xa8>)
 8004d26:	429c      	cmp	r4, r3
 8004d28:	d1c9      	bne.n	8004cbe <__swbuf_r+0x1e>
 8004d2a:	68ec      	ldr	r4, [r5, #12]
 8004d2c:	e7c7      	b.n	8004cbe <__swbuf_r+0x1e>
 8004d2e:	0021      	movs	r1, r4
 8004d30:	0028      	movs	r0, r5
 8004d32:	f000 f80b 	bl	8004d4c <__swsetup_r>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d0c9      	beq.n	8004cce <__swbuf_r+0x2e>
 8004d3a:	2601      	movs	r6, #1
 8004d3c:	4276      	negs	r6, r6
 8004d3e:	e7ea      	b.n	8004d16 <__swbuf_r+0x76>
 8004d40:	08005d98 	.word	0x08005d98
 8004d44:	08005db8 	.word	0x08005db8
 8004d48:	08005d78 	.word	0x08005d78

08004d4c <__swsetup_r>:
 8004d4c:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <__swsetup_r+0xe0>)
 8004d4e:	b570      	push	{r4, r5, r6, lr}
 8004d50:	681d      	ldr	r5, [r3, #0]
 8004d52:	0006      	movs	r6, r0
 8004d54:	000c      	movs	r4, r1
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	d005      	beq.n	8004d66 <__swsetup_r+0x1a>
 8004d5a:	69ab      	ldr	r3, [r5, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <__swsetup_r+0x1a>
 8004d60:	0028      	movs	r0, r5
 8004d62:	f000 f999 	bl	8005098 <__sinit>
 8004d66:	4b32      	ldr	r3, [pc, #200]	; (8004e30 <__swsetup_r+0xe4>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	d10f      	bne.n	8004d8c <__swsetup_r+0x40>
 8004d6c:	686c      	ldr	r4, [r5, #4]
 8004d6e:	230c      	movs	r3, #12
 8004d70:	5ee2      	ldrsh	r2, [r4, r3]
 8004d72:	b293      	uxth	r3, r2
 8004d74:	0711      	lsls	r1, r2, #28
 8004d76:	d42d      	bmi.n	8004dd4 <__swsetup_r+0x88>
 8004d78:	06d9      	lsls	r1, r3, #27
 8004d7a:	d411      	bmi.n	8004da0 <__swsetup_r+0x54>
 8004d7c:	2309      	movs	r3, #9
 8004d7e:	2001      	movs	r0, #1
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	3337      	adds	r3, #55	; 0x37
 8004d84:	4313      	orrs	r3, r2
 8004d86:	81a3      	strh	r3, [r4, #12]
 8004d88:	4240      	negs	r0, r0
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <__swsetup_r+0xe8>)
 8004d8e:	429c      	cmp	r4, r3
 8004d90:	d101      	bne.n	8004d96 <__swsetup_r+0x4a>
 8004d92:	68ac      	ldr	r4, [r5, #8]
 8004d94:	e7eb      	b.n	8004d6e <__swsetup_r+0x22>
 8004d96:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <__swsetup_r+0xec>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d1e8      	bne.n	8004d6e <__swsetup_r+0x22>
 8004d9c:	68ec      	ldr	r4, [r5, #12]
 8004d9e:	e7e6      	b.n	8004d6e <__swsetup_r+0x22>
 8004da0:	075b      	lsls	r3, r3, #29
 8004da2:	d513      	bpl.n	8004dcc <__swsetup_r+0x80>
 8004da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da6:	2900      	cmp	r1, #0
 8004da8:	d008      	beq.n	8004dbc <__swsetup_r+0x70>
 8004daa:	0023      	movs	r3, r4
 8004dac:	3344      	adds	r3, #68	; 0x44
 8004dae:	4299      	cmp	r1, r3
 8004db0:	d002      	beq.n	8004db8 <__swsetup_r+0x6c>
 8004db2:	0030      	movs	r0, r6
 8004db4:	f000 fa80 	bl	80052b8 <_free_r>
 8004db8:	2300      	movs	r3, #0
 8004dba:	6363      	str	r3, [r4, #52]	; 0x34
 8004dbc:	2224      	movs	r2, #36	; 0x24
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	4393      	bics	r3, r2
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6063      	str	r3, [r4, #4]
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	2308      	movs	r3, #8
 8004dce:	89a2      	ldrh	r2, [r4, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <__swsetup_r+0xa6>
 8004dda:	21a0      	movs	r1, #160	; 0xa0
 8004ddc:	2280      	movs	r2, #128	; 0x80
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	0089      	lsls	r1, r1, #2
 8004de2:	0092      	lsls	r2, r2, #2
 8004de4:	400b      	ands	r3, r1
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <__swsetup_r+0xa6>
 8004dea:	0021      	movs	r1, r4
 8004dec:	0030      	movs	r0, r6
 8004dee:	f000 fa1f 	bl	8005230 <__smakebuf_r>
 8004df2:	220c      	movs	r2, #12
 8004df4:	5ea3      	ldrsh	r3, [r4, r2]
 8004df6:	2001      	movs	r0, #1
 8004df8:	001a      	movs	r2, r3
 8004dfa:	b299      	uxth	r1, r3
 8004dfc:	4002      	ands	r2, r0
 8004dfe:	4203      	tst	r3, r0
 8004e00:	d00f      	beq.n	8004e22 <__swsetup_r+0xd6>
 8004e02:	2200      	movs	r2, #0
 8004e04:	60a2      	str	r2, [r4, #8]
 8004e06:	6962      	ldr	r2, [r4, #20]
 8004e08:	4252      	negs	r2, r2
 8004e0a:	61a2      	str	r2, [r4, #24]
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	6922      	ldr	r2, [r4, #16]
 8004e10:	4282      	cmp	r2, r0
 8004e12:	d1ba      	bne.n	8004d8a <__swsetup_r+0x3e>
 8004e14:	060a      	lsls	r2, r1, #24
 8004e16:	d5b8      	bpl.n	8004d8a <__swsetup_r+0x3e>
 8004e18:	2240      	movs	r2, #64	; 0x40
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	3801      	subs	r0, #1
 8004e20:	e7b3      	b.n	8004d8a <__swsetup_r+0x3e>
 8004e22:	0788      	lsls	r0, r1, #30
 8004e24:	d400      	bmi.n	8004e28 <__swsetup_r+0xdc>
 8004e26:	6962      	ldr	r2, [r4, #20]
 8004e28:	60a2      	str	r2, [r4, #8]
 8004e2a:	e7ef      	b.n	8004e0c <__swsetup_r+0xc0>
 8004e2c:	20000190 	.word	0x20000190
 8004e30:	08005d98 	.word	0x08005d98
 8004e34:	08005db8 	.word	0x08005db8
 8004e38:	08005d78 	.word	0x08005d78

08004e3c <__sflush_r>:
 8004e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3e:	898b      	ldrh	r3, [r1, #12]
 8004e40:	0005      	movs	r5, r0
 8004e42:	000c      	movs	r4, r1
 8004e44:	071a      	lsls	r2, r3, #28
 8004e46:	d45f      	bmi.n	8004f08 <__sflush_r+0xcc>
 8004e48:	684a      	ldr	r2, [r1, #4]
 8004e4a:	2a00      	cmp	r2, #0
 8004e4c:	dc04      	bgt.n	8004e58 <__sflush_r+0x1c>
 8004e4e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	dc01      	bgt.n	8004e58 <__sflush_r+0x1c>
 8004e54:	2000      	movs	r0, #0
 8004e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004e5a:	2f00      	cmp	r7, #0
 8004e5c:	d0fa      	beq.n	8004e54 <__sflush_r+0x18>
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	682e      	ldr	r6, [r5, #0]
 8004e64:	602a      	str	r2, [r5, #0]
 8004e66:	001a      	movs	r2, r3
 8004e68:	0149      	lsls	r1, r1, #5
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	420b      	tst	r3, r1
 8004e6e:	d034      	beq.n	8004eda <__sflush_r+0x9e>
 8004e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	075b      	lsls	r3, r3, #29
 8004e76:	d506      	bpl.n	8004e86 <__sflush_r+0x4a>
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	1ac0      	subs	r0, r0, r3
 8004e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <__sflush_r+0x4a>
 8004e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e84:	1ac0      	subs	r0, r0, r3
 8004e86:	0002      	movs	r2, r0
 8004e88:	6a21      	ldr	r1, [r4, #32]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	0028      	movs	r0, r5
 8004e8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004e90:	47b8      	blx	r7
 8004e92:	89a1      	ldrh	r1, [r4, #12]
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d106      	bne.n	8004ea6 <__sflush_r+0x6a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	2b1d      	cmp	r3, #29
 8004e9c:	d831      	bhi.n	8004f02 <__sflush_r+0xc6>
 8004e9e:	4a2c      	ldr	r2, [pc, #176]	; (8004f50 <__sflush_r+0x114>)
 8004ea0:	40da      	lsrs	r2, r3
 8004ea2:	07d3      	lsls	r3, r2, #31
 8004ea4:	d52d      	bpl.n	8004f02 <__sflush_r+0xc6>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6063      	str	r3, [r4, #4]
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	04cb      	lsls	r3, r1, #19
 8004eb0:	d505      	bpl.n	8004ebe <__sflush_r+0x82>
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	d102      	bne.n	8004ebc <__sflush_r+0x80>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d100      	bne.n	8004ebe <__sflush_r+0x82>
 8004ebc:	6560      	str	r0, [r4, #84]	; 0x54
 8004ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ec0:	602e      	str	r6, [r5, #0]
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	d0c6      	beq.n	8004e54 <__sflush_r+0x18>
 8004ec6:	0023      	movs	r3, r4
 8004ec8:	3344      	adds	r3, #68	; 0x44
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	d002      	beq.n	8004ed4 <__sflush_r+0x98>
 8004ece:	0028      	movs	r0, r5
 8004ed0:	f000 f9f2 	bl	80052b8 <_free_r>
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	6360      	str	r0, [r4, #52]	; 0x34
 8004ed8:	e7bd      	b.n	8004e56 <__sflush_r+0x1a>
 8004eda:	2301      	movs	r3, #1
 8004edc:	0028      	movs	r0, r5
 8004ede:	6a21      	ldr	r1, [r4, #32]
 8004ee0:	47b8      	blx	r7
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d1c5      	bne.n	8004e72 <__sflush_r+0x36>
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0c2      	beq.n	8004e72 <__sflush_r+0x36>
 8004eec:	2b1d      	cmp	r3, #29
 8004eee:	d001      	beq.n	8004ef4 <__sflush_r+0xb8>
 8004ef0:	2b16      	cmp	r3, #22
 8004ef2:	d101      	bne.n	8004ef8 <__sflush_r+0xbc>
 8004ef4:	602e      	str	r6, [r5, #0]
 8004ef6:	e7ad      	b.n	8004e54 <__sflush_r+0x18>
 8004ef8:	2340      	movs	r3, #64	; 0x40
 8004efa:	89a2      	ldrh	r2, [r4, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	81a3      	strh	r3, [r4, #12]
 8004f00:	e7a9      	b.n	8004e56 <__sflush_r+0x1a>
 8004f02:	2340      	movs	r3, #64	; 0x40
 8004f04:	430b      	orrs	r3, r1
 8004f06:	e7fa      	b.n	8004efe <__sflush_r+0xc2>
 8004f08:	690f      	ldr	r7, [r1, #16]
 8004f0a:	2f00      	cmp	r7, #0
 8004f0c:	d0a2      	beq.n	8004e54 <__sflush_r+0x18>
 8004f0e:	680a      	ldr	r2, [r1, #0]
 8004f10:	600f      	str	r7, [r1, #0]
 8004f12:	1bd2      	subs	r2, r2, r7
 8004f14:	9201      	str	r2, [sp, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	079b      	lsls	r3, r3, #30
 8004f1a:	d100      	bne.n	8004f1e <__sflush_r+0xe2>
 8004f1c:	694a      	ldr	r2, [r1, #20]
 8004f1e:	60a2      	str	r2, [r4, #8]
 8004f20:	9b01      	ldr	r3, [sp, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dc00      	bgt.n	8004f28 <__sflush_r+0xec>
 8004f26:	e795      	b.n	8004e54 <__sflush_r+0x18>
 8004f28:	003a      	movs	r2, r7
 8004f2a:	0028      	movs	r0, r5
 8004f2c:	9b01      	ldr	r3, [sp, #4]
 8004f2e:	6a21      	ldr	r1, [r4, #32]
 8004f30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f32:	47b0      	blx	r6
 8004f34:	2800      	cmp	r0, #0
 8004f36:	dc06      	bgt.n	8004f46 <__sflush_r+0x10a>
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	89a2      	ldrh	r2, [r4, #12]
 8004f3e:	4240      	negs	r0, r0
 8004f40:	4313      	orrs	r3, r2
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	e787      	b.n	8004e56 <__sflush_r+0x1a>
 8004f46:	9b01      	ldr	r3, [sp, #4]
 8004f48:	183f      	adds	r7, r7, r0
 8004f4a:	1a1b      	subs	r3, r3, r0
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	e7e7      	b.n	8004f20 <__sflush_r+0xe4>
 8004f50:	20400001 	.word	0x20400001

08004f54 <_fflush_r>:
 8004f54:	690b      	ldr	r3, [r1, #16]
 8004f56:	b570      	push	{r4, r5, r6, lr}
 8004f58:	0005      	movs	r5, r0
 8004f5a:	000c      	movs	r4, r1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <_fflush_r+0x12>
 8004f60:	2500      	movs	r5, #0
 8004f62:	0028      	movs	r0, r5
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d004      	beq.n	8004f74 <_fflush_r+0x20>
 8004f6a:	6983      	ldr	r3, [r0, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <_fflush_r+0x20>
 8004f70:	f000 f892 	bl	8005098 <__sinit>
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <_fflush_r+0x74>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	d11b      	bne.n	8004fb2 <_fflush_r+0x5e>
 8004f7a:	686c      	ldr	r4, [r5, #4]
 8004f7c:	220c      	movs	r2, #12
 8004f7e:	5ea3      	ldrsh	r3, [r4, r2]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ed      	beq.n	8004f60 <_fflush_r+0xc>
 8004f84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f86:	07d2      	lsls	r2, r2, #31
 8004f88:	d404      	bmi.n	8004f94 <_fflush_r+0x40>
 8004f8a:	059b      	lsls	r3, r3, #22
 8004f8c:	d402      	bmi.n	8004f94 <_fflush_r+0x40>
 8004f8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f90:	f000 f923 	bl	80051da <__retarget_lock_acquire_recursive>
 8004f94:	0028      	movs	r0, r5
 8004f96:	0021      	movs	r1, r4
 8004f98:	f7ff ff50 	bl	8004e3c <__sflush_r>
 8004f9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f9e:	0005      	movs	r5, r0
 8004fa0:	07db      	lsls	r3, r3, #31
 8004fa2:	d4de      	bmi.n	8004f62 <_fflush_r+0xe>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	059b      	lsls	r3, r3, #22
 8004fa8:	d4db      	bmi.n	8004f62 <_fflush_r+0xe>
 8004faa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fac:	f000 f916 	bl	80051dc <__retarget_lock_release_recursive>
 8004fb0:	e7d7      	b.n	8004f62 <_fflush_r+0xe>
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <_fflush_r+0x78>)
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	d101      	bne.n	8004fbc <_fflush_r+0x68>
 8004fb8:	68ac      	ldr	r4, [r5, #8]
 8004fba:	e7df      	b.n	8004f7c <_fflush_r+0x28>
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <_fflush_r+0x7c>)
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d1dc      	bne.n	8004f7c <_fflush_r+0x28>
 8004fc2:	68ec      	ldr	r4, [r5, #12]
 8004fc4:	e7da      	b.n	8004f7c <_fflush_r+0x28>
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	08005d98 	.word	0x08005d98
 8004fcc:	08005db8 	.word	0x08005db8
 8004fd0:	08005d78 	.word	0x08005d78

08004fd4 <std>:
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	0004      	movs	r4, r0
 8004fda:	6003      	str	r3, [r0, #0]
 8004fdc:	6043      	str	r3, [r0, #4]
 8004fde:	6083      	str	r3, [r0, #8]
 8004fe0:	8181      	strh	r1, [r0, #12]
 8004fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	81c2      	strh	r2, [r0, #14]
 8004fe8:	6103      	str	r3, [r0, #16]
 8004fea:	6143      	str	r3, [r0, #20]
 8004fec:	6183      	str	r3, [r0, #24]
 8004fee:	2208      	movs	r2, #8
 8004ff0:	305c      	adds	r0, #92	; 0x5c
 8004ff2:	f7ff fd92 	bl	8004b1a <memset>
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <std+0x38>)
 8004ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <std+0x3c>)
 8004ffc:	6224      	str	r4, [r4, #32]
 8004ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <std+0x40>)
 8005002:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <std+0x44>)
 8005006:	6323      	str	r3, [r4, #48]	; 0x30
 8005008:	bd10      	pop	{r4, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	080059f5 	.word	0x080059f5
 8005010:	08005a1d 	.word	0x08005a1d
 8005014:	08005a55 	.word	0x08005a55
 8005018:	08005a81 	.word	0x08005a81

0800501c <_cleanup_r>:
 800501c:	b510      	push	{r4, lr}
 800501e:	4902      	ldr	r1, [pc, #8]	; (8005028 <_cleanup_r+0xc>)
 8005020:	f000 f8ba 	bl	8005198 <_fwalk_reent>
 8005024:	bd10      	pop	{r4, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	08004f55 	.word	0x08004f55

0800502c <__sfmoreglue>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	2568      	movs	r5, #104	; 0x68
 8005030:	1e4a      	subs	r2, r1, #1
 8005032:	4355      	muls	r5, r2
 8005034:	000e      	movs	r6, r1
 8005036:	0029      	movs	r1, r5
 8005038:	3174      	adds	r1, #116	; 0x74
 800503a:	f000 f987 	bl	800534c <_malloc_r>
 800503e:	1e04      	subs	r4, r0, #0
 8005040:	d008      	beq.n	8005054 <__sfmoreglue+0x28>
 8005042:	2100      	movs	r1, #0
 8005044:	002a      	movs	r2, r5
 8005046:	6001      	str	r1, [r0, #0]
 8005048:	6046      	str	r6, [r0, #4]
 800504a:	300c      	adds	r0, #12
 800504c:	60a0      	str	r0, [r4, #8]
 800504e:	3268      	adds	r2, #104	; 0x68
 8005050:	f7ff fd63 	bl	8004b1a <memset>
 8005054:	0020      	movs	r0, r4
 8005056:	bd70      	pop	{r4, r5, r6, pc}

08005058 <__sfp_lock_acquire>:
 8005058:	b510      	push	{r4, lr}
 800505a:	4802      	ldr	r0, [pc, #8]	; (8005064 <__sfp_lock_acquire+0xc>)
 800505c:	f000 f8bd 	bl	80051da <__retarget_lock_acquire_recursive>
 8005060:	bd10      	pop	{r4, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	20000350 	.word	0x20000350

08005068 <__sfp_lock_release>:
 8005068:	b510      	push	{r4, lr}
 800506a:	4802      	ldr	r0, [pc, #8]	; (8005074 <__sfp_lock_release+0xc>)
 800506c:	f000 f8b6 	bl	80051dc <__retarget_lock_release_recursive>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	20000350 	.word	0x20000350

08005078 <__sinit_lock_acquire>:
 8005078:	b510      	push	{r4, lr}
 800507a:	4802      	ldr	r0, [pc, #8]	; (8005084 <__sinit_lock_acquire+0xc>)
 800507c:	f000 f8ad 	bl	80051da <__retarget_lock_acquire_recursive>
 8005080:	bd10      	pop	{r4, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	2000034b 	.word	0x2000034b

08005088 <__sinit_lock_release>:
 8005088:	b510      	push	{r4, lr}
 800508a:	4802      	ldr	r0, [pc, #8]	; (8005094 <__sinit_lock_release+0xc>)
 800508c:	f000 f8a6 	bl	80051dc <__retarget_lock_release_recursive>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	2000034b 	.word	0x2000034b

08005098 <__sinit>:
 8005098:	b513      	push	{r0, r1, r4, lr}
 800509a:	0004      	movs	r4, r0
 800509c:	f7ff ffec 	bl	8005078 <__sinit_lock_acquire>
 80050a0:	69a3      	ldr	r3, [r4, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <__sinit+0x14>
 80050a6:	f7ff ffef 	bl	8005088 <__sinit_lock_release>
 80050aa:	bd13      	pop	{r0, r1, r4, pc}
 80050ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80050ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80050b0:	6523      	str	r3, [r4, #80]	; 0x50
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <__sinit+0x68>)
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <__sinit+0x6c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d101      	bne.n	80050c4 <__sinit+0x2c>
 80050c0:	2301      	movs	r3, #1
 80050c2:	61a3      	str	r3, [r4, #24]
 80050c4:	0020      	movs	r0, r4
 80050c6:	f000 f81f 	bl	8005108 <__sfp>
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	0020      	movs	r0, r4
 80050ce:	f000 f81b 	bl	8005108 <__sfp>
 80050d2:	60a0      	str	r0, [r4, #8]
 80050d4:	0020      	movs	r0, r4
 80050d6:	f000 f817 	bl	8005108 <__sfp>
 80050da:	2200      	movs	r2, #0
 80050dc:	2104      	movs	r1, #4
 80050de:	60e0      	str	r0, [r4, #12]
 80050e0:	6860      	ldr	r0, [r4, #4]
 80050e2:	f7ff ff77 	bl	8004fd4 <std>
 80050e6:	2201      	movs	r2, #1
 80050e8:	2109      	movs	r1, #9
 80050ea:	68a0      	ldr	r0, [r4, #8]
 80050ec:	f7ff ff72 	bl	8004fd4 <std>
 80050f0:	2202      	movs	r2, #2
 80050f2:	2112      	movs	r1, #18
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	f7ff ff6d 	bl	8004fd4 <std>
 80050fa:	2301      	movs	r3, #1
 80050fc:	61a3      	str	r3, [r4, #24]
 80050fe:	e7d2      	b.n	80050a6 <__sinit+0xe>
 8005100:	08005d74 	.word	0x08005d74
 8005104:	0800501d 	.word	0x0800501d

08005108 <__sfp>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	0007      	movs	r7, r0
 800510c:	f7ff ffa4 	bl	8005058 <__sfp_lock_acquire>
 8005110:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <__sfp+0x88>)
 8005112:	681e      	ldr	r6, [r3, #0]
 8005114:	69b3      	ldr	r3, [r6, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <__sfp+0x18>
 800511a:	0030      	movs	r0, r6
 800511c:	f7ff ffbc 	bl	8005098 <__sinit>
 8005120:	3648      	adds	r6, #72	; 0x48
 8005122:	68b4      	ldr	r4, [r6, #8]
 8005124:	6873      	ldr	r3, [r6, #4]
 8005126:	3b01      	subs	r3, #1
 8005128:	d504      	bpl.n	8005134 <__sfp+0x2c>
 800512a:	6833      	ldr	r3, [r6, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <__sfp+0x6e>
 8005130:	6836      	ldr	r6, [r6, #0]
 8005132:	e7f6      	b.n	8005122 <__sfp+0x1a>
 8005134:	220c      	movs	r2, #12
 8005136:	5ea5      	ldrsh	r5, [r4, r2]
 8005138:	2d00      	cmp	r5, #0
 800513a:	d11a      	bne.n	8005172 <__sfp+0x6a>
 800513c:	0020      	movs	r0, r4
 800513e:	4b15      	ldr	r3, [pc, #84]	; (8005194 <__sfp+0x8c>)
 8005140:	3058      	adds	r0, #88	; 0x58
 8005142:	60e3      	str	r3, [r4, #12]
 8005144:	6665      	str	r5, [r4, #100]	; 0x64
 8005146:	f000 f847 	bl	80051d8 <__retarget_lock_init_recursive>
 800514a:	f7ff ff8d 	bl	8005068 <__sfp_lock_release>
 800514e:	0020      	movs	r0, r4
 8005150:	2208      	movs	r2, #8
 8005152:	0029      	movs	r1, r5
 8005154:	6025      	str	r5, [r4, #0]
 8005156:	60a5      	str	r5, [r4, #8]
 8005158:	6065      	str	r5, [r4, #4]
 800515a:	6125      	str	r5, [r4, #16]
 800515c:	6165      	str	r5, [r4, #20]
 800515e:	61a5      	str	r5, [r4, #24]
 8005160:	305c      	adds	r0, #92	; 0x5c
 8005162:	f7ff fcda 	bl	8004b1a <memset>
 8005166:	6365      	str	r5, [r4, #52]	; 0x34
 8005168:	63a5      	str	r5, [r4, #56]	; 0x38
 800516a:	64a5      	str	r5, [r4, #72]	; 0x48
 800516c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800516e:	0020      	movs	r0, r4
 8005170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005172:	3468      	adds	r4, #104	; 0x68
 8005174:	e7d7      	b.n	8005126 <__sfp+0x1e>
 8005176:	2104      	movs	r1, #4
 8005178:	0038      	movs	r0, r7
 800517a:	f7ff ff57 	bl	800502c <__sfmoreglue>
 800517e:	1e04      	subs	r4, r0, #0
 8005180:	6030      	str	r0, [r6, #0]
 8005182:	d1d5      	bne.n	8005130 <__sfp+0x28>
 8005184:	f7ff ff70 	bl	8005068 <__sfp_lock_release>
 8005188:	230c      	movs	r3, #12
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	e7ef      	b.n	800516e <__sfp+0x66>
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	08005d74 	.word	0x08005d74
 8005194:	ffff0001 	.word	0xffff0001

08005198 <_fwalk_reent>:
 8005198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800519a:	0004      	movs	r4, r0
 800519c:	0006      	movs	r6, r0
 800519e:	2700      	movs	r7, #0
 80051a0:	9101      	str	r1, [sp, #4]
 80051a2:	3448      	adds	r4, #72	; 0x48
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	68a5      	ldr	r5, [r4, #8]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	9b00      	ldr	r3, [sp, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	d504      	bpl.n	80051bc <_fwalk_reent+0x24>
 80051b2:	6824      	ldr	r4, [r4, #0]
 80051b4:	2c00      	cmp	r4, #0
 80051b6:	d1f5      	bne.n	80051a4 <_fwalk_reent+0xc>
 80051b8:	0038      	movs	r0, r7
 80051ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051bc:	89ab      	ldrh	r3, [r5, #12]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d908      	bls.n	80051d4 <_fwalk_reent+0x3c>
 80051c2:	220e      	movs	r2, #14
 80051c4:	5eab      	ldrsh	r3, [r5, r2]
 80051c6:	3301      	adds	r3, #1
 80051c8:	d004      	beq.n	80051d4 <_fwalk_reent+0x3c>
 80051ca:	0029      	movs	r1, r5
 80051cc:	0030      	movs	r0, r6
 80051ce:	9b01      	ldr	r3, [sp, #4]
 80051d0:	4798      	blx	r3
 80051d2:	4307      	orrs	r7, r0
 80051d4:	3568      	adds	r5, #104	; 0x68
 80051d6:	e7e8      	b.n	80051aa <_fwalk_reent+0x12>

080051d8 <__retarget_lock_init_recursive>:
 80051d8:	4770      	bx	lr

080051da <__retarget_lock_acquire_recursive>:
 80051da:	4770      	bx	lr

080051dc <__retarget_lock_release_recursive>:
 80051dc:	4770      	bx	lr
	...

080051e0 <__swhatbuf_r>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	000e      	movs	r6, r1
 80051e4:	001d      	movs	r5, r3
 80051e6:	230e      	movs	r3, #14
 80051e8:	5ec9      	ldrsh	r1, [r1, r3]
 80051ea:	0014      	movs	r4, r2
 80051ec:	b096      	sub	sp, #88	; 0x58
 80051ee:	2900      	cmp	r1, #0
 80051f0:	da07      	bge.n	8005202 <__swhatbuf_r+0x22>
 80051f2:	2300      	movs	r3, #0
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	89b3      	ldrh	r3, [r6, #12]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	d411      	bmi.n	8005220 <__swhatbuf_r+0x40>
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	e00f      	b.n	8005222 <__swhatbuf_r+0x42>
 8005202:	466a      	mov	r2, sp
 8005204:	f000 fc68 	bl	8005ad8 <_fstat_r>
 8005208:	2800      	cmp	r0, #0
 800520a:	dbf2      	blt.n	80051f2 <__swhatbuf_r+0x12>
 800520c:	23f0      	movs	r3, #240	; 0xf0
 800520e:	9901      	ldr	r1, [sp, #4]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	4019      	ands	r1, r3
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <__swhatbuf_r+0x4c>)
 8005216:	18c9      	adds	r1, r1, r3
 8005218:	424b      	negs	r3, r1
 800521a:	4159      	adcs	r1, r3
 800521c:	6029      	str	r1, [r5, #0]
 800521e:	e7ed      	b.n	80051fc <__swhatbuf_r+0x1c>
 8005220:	2340      	movs	r3, #64	; 0x40
 8005222:	2000      	movs	r0, #0
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	b016      	add	sp, #88	; 0x58
 8005228:	bd70      	pop	{r4, r5, r6, pc}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	ffffe000 	.word	0xffffe000

08005230 <__smakebuf_r>:
 8005230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005232:	2602      	movs	r6, #2
 8005234:	898b      	ldrh	r3, [r1, #12]
 8005236:	0005      	movs	r5, r0
 8005238:	000c      	movs	r4, r1
 800523a:	4233      	tst	r3, r6
 800523c:	d006      	beq.n	800524c <__smakebuf_r+0x1c>
 800523e:	0023      	movs	r3, r4
 8005240:	3347      	adds	r3, #71	; 0x47
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	6123      	str	r3, [r4, #16]
 8005246:	2301      	movs	r3, #1
 8005248:	6163      	str	r3, [r4, #20]
 800524a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800524c:	466a      	mov	r2, sp
 800524e:	ab01      	add	r3, sp, #4
 8005250:	f7ff ffc6 	bl	80051e0 <__swhatbuf_r>
 8005254:	9900      	ldr	r1, [sp, #0]
 8005256:	0007      	movs	r7, r0
 8005258:	0028      	movs	r0, r5
 800525a:	f000 f877 	bl	800534c <_malloc_r>
 800525e:	2800      	cmp	r0, #0
 8005260:	d108      	bne.n	8005274 <__smakebuf_r+0x44>
 8005262:	220c      	movs	r2, #12
 8005264:	5ea3      	ldrsh	r3, [r4, r2]
 8005266:	059a      	lsls	r2, r3, #22
 8005268:	d4ef      	bmi.n	800524a <__smakebuf_r+0x1a>
 800526a:	2203      	movs	r2, #3
 800526c:	4393      	bics	r3, r2
 800526e:	431e      	orrs	r6, r3
 8005270:	81a6      	strh	r6, [r4, #12]
 8005272:	e7e4      	b.n	800523e <__smakebuf_r+0xe>
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <__smakebuf_r+0x84>)
 8005276:	62ab      	str	r3, [r5, #40]	; 0x28
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	89a2      	ldrh	r2, [r4, #12]
 800527c:	6020      	str	r0, [r4, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	6120      	str	r0, [r4, #16]
 8005286:	6163      	str	r3, [r4, #20]
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <__smakebuf_r+0x7a>
 800528e:	0028      	movs	r0, r5
 8005290:	230e      	movs	r3, #14
 8005292:	5ee1      	ldrsh	r1, [r4, r3]
 8005294:	f000 fc32 	bl	8005afc <_isatty_r>
 8005298:	2800      	cmp	r0, #0
 800529a:	d006      	beq.n	80052aa <__smakebuf_r+0x7a>
 800529c:	2203      	movs	r2, #3
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	4393      	bics	r3, r2
 80052a2:	001a      	movs	r2, r3
 80052a4:	2301      	movs	r3, #1
 80052a6:	4313      	orrs	r3, r2
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	89a0      	ldrh	r0, [r4, #12]
 80052ac:	4307      	orrs	r7, r0
 80052ae:	81a7      	strh	r7, [r4, #12]
 80052b0:	e7cb      	b.n	800524a <__smakebuf_r+0x1a>
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	0800501d 	.word	0x0800501d

080052b8 <_free_r>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	0005      	movs	r5, r0
 80052bc:	2900      	cmp	r1, #0
 80052be:	d010      	beq.n	80052e2 <_free_r+0x2a>
 80052c0:	1f0c      	subs	r4, r1, #4
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da00      	bge.n	80052ca <_free_r+0x12>
 80052c8:	18e4      	adds	r4, r4, r3
 80052ca:	0028      	movs	r0, r5
 80052cc:	f000 fc5a 	bl	8005b84 <__malloc_lock>
 80052d0:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <_free_r+0x90>)
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <_free_r+0x2c>
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	6014      	str	r4, [r2, #0]
 80052dc:	0028      	movs	r0, r5
 80052de:	f000 fc59 	bl	8005b94 <__malloc_unlock>
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d908      	bls.n	80052fa <_free_r+0x42>
 80052e8:	6821      	ldr	r1, [r4, #0]
 80052ea:	1860      	adds	r0, r4, r1
 80052ec:	4283      	cmp	r3, r0
 80052ee:	d1f3      	bne.n	80052d8 <_free_r+0x20>
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	1841      	adds	r1, r0, r1
 80052f6:	6021      	str	r1, [r4, #0]
 80052f8:	e7ee      	b.n	80052d8 <_free_r+0x20>
 80052fa:	001a      	movs	r2, r3
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <_free_r+0x4e>
 8005302:	42a3      	cmp	r3, r4
 8005304:	d9f9      	bls.n	80052fa <_free_r+0x42>
 8005306:	6811      	ldr	r1, [r2, #0]
 8005308:	1850      	adds	r0, r2, r1
 800530a:	42a0      	cmp	r0, r4
 800530c:	d10b      	bne.n	8005326 <_free_r+0x6e>
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	1809      	adds	r1, r1, r0
 8005312:	1850      	adds	r0, r2, r1
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	4283      	cmp	r3, r0
 8005318:	d1e0      	bne.n	80052dc <_free_r+0x24>
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	1841      	adds	r1, r0, r1
 8005320:	6011      	str	r1, [r2, #0]
 8005322:	6053      	str	r3, [r2, #4]
 8005324:	e7da      	b.n	80052dc <_free_r+0x24>
 8005326:	42a0      	cmp	r0, r4
 8005328:	d902      	bls.n	8005330 <_free_r+0x78>
 800532a:	230c      	movs	r3, #12
 800532c:	602b      	str	r3, [r5, #0]
 800532e:	e7d5      	b.n	80052dc <_free_r+0x24>
 8005330:	6821      	ldr	r1, [r4, #0]
 8005332:	1860      	adds	r0, r4, r1
 8005334:	4283      	cmp	r3, r0
 8005336:	d103      	bne.n	8005340 <_free_r+0x88>
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	1841      	adds	r1, r0, r1
 800533e:	6021      	str	r1, [r4, #0]
 8005340:	6063      	str	r3, [r4, #4]
 8005342:	6054      	str	r4, [r2, #4]
 8005344:	e7ca      	b.n	80052dc <_free_r+0x24>
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	20000260 	.word	0x20000260

0800534c <_malloc_r>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	2303      	movs	r3, #3
 8005350:	1ccd      	adds	r5, r1, #3
 8005352:	439d      	bics	r5, r3
 8005354:	3508      	adds	r5, #8
 8005356:	0006      	movs	r6, r0
 8005358:	2d0c      	cmp	r5, #12
 800535a:	d21f      	bcs.n	800539c <_malloc_r+0x50>
 800535c:	250c      	movs	r5, #12
 800535e:	42a9      	cmp	r1, r5
 8005360:	d81e      	bhi.n	80053a0 <_malloc_r+0x54>
 8005362:	0030      	movs	r0, r6
 8005364:	f000 fc0e 	bl	8005b84 <__malloc_lock>
 8005368:	4925      	ldr	r1, [pc, #148]	; (8005400 <_malloc_r+0xb4>)
 800536a:	680a      	ldr	r2, [r1, #0]
 800536c:	0014      	movs	r4, r2
 800536e:	2c00      	cmp	r4, #0
 8005370:	d11a      	bne.n	80053a8 <_malloc_r+0x5c>
 8005372:	4f24      	ldr	r7, [pc, #144]	; (8005404 <_malloc_r+0xb8>)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <_malloc_r+0x38>
 800537a:	0021      	movs	r1, r4
 800537c:	0030      	movs	r0, r6
 800537e:	f000 fb27 	bl	80059d0 <_sbrk_r>
 8005382:	6038      	str	r0, [r7, #0]
 8005384:	0029      	movs	r1, r5
 8005386:	0030      	movs	r0, r6
 8005388:	f000 fb22 	bl	80059d0 <_sbrk_r>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d12b      	bne.n	80053e8 <_malloc_r+0x9c>
 8005390:	230c      	movs	r3, #12
 8005392:	0030      	movs	r0, r6
 8005394:	6033      	str	r3, [r6, #0]
 8005396:	f000 fbfd 	bl	8005b94 <__malloc_unlock>
 800539a:	e003      	b.n	80053a4 <_malloc_r+0x58>
 800539c:	2d00      	cmp	r5, #0
 800539e:	dade      	bge.n	800535e <_malloc_r+0x12>
 80053a0:	230c      	movs	r3, #12
 80053a2:	6033      	str	r3, [r6, #0]
 80053a4:	2000      	movs	r0, #0
 80053a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	1b5b      	subs	r3, r3, r5
 80053ac:	d419      	bmi.n	80053e2 <_malloc_r+0x96>
 80053ae:	2b0b      	cmp	r3, #11
 80053b0:	d903      	bls.n	80053ba <_malloc_r+0x6e>
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	18e4      	adds	r4, r4, r3
 80053b6:	6025      	str	r5, [r4, #0]
 80053b8:	e003      	b.n	80053c2 <_malloc_r+0x76>
 80053ba:	6863      	ldr	r3, [r4, #4]
 80053bc:	42a2      	cmp	r2, r4
 80053be:	d10e      	bne.n	80053de <_malloc_r+0x92>
 80053c0:	600b      	str	r3, [r1, #0]
 80053c2:	0030      	movs	r0, r6
 80053c4:	f000 fbe6 	bl	8005b94 <__malloc_unlock>
 80053c8:	0020      	movs	r0, r4
 80053ca:	2207      	movs	r2, #7
 80053cc:	300b      	adds	r0, #11
 80053ce:	1d23      	adds	r3, r4, #4
 80053d0:	4390      	bics	r0, r2
 80053d2:	1ac2      	subs	r2, r0, r3
 80053d4:	4298      	cmp	r0, r3
 80053d6:	d0e6      	beq.n	80053a6 <_malloc_r+0x5a>
 80053d8:	1a1b      	subs	r3, r3, r0
 80053da:	50a3      	str	r3, [r4, r2]
 80053dc:	e7e3      	b.n	80053a6 <_malloc_r+0x5a>
 80053de:	6053      	str	r3, [r2, #4]
 80053e0:	e7ef      	b.n	80053c2 <_malloc_r+0x76>
 80053e2:	0022      	movs	r2, r4
 80053e4:	6864      	ldr	r4, [r4, #4]
 80053e6:	e7c2      	b.n	800536e <_malloc_r+0x22>
 80053e8:	2303      	movs	r3, #3
 80053ea:	1cc4      	adds	r4, r0, #3
 80053ec:	439c      	bics	r4, r3
 80053ee:	42a0      	cmp	r0, r4
 80053f0:	d0e1      	beq.n	80053b6 <_malloc_r+0x6a>
 80053f2:	1a21      	subs	r1, r4, r0
 80053f4:	0030      	movs	r0, r6
 80053f6:	f000 faeb 	bl	80059d0 <_sbrk_r>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d1db      	bne.n	80053b6 <_malloc_r+0x6a>
 80053fe:	e7c7      	b.n	8005390 <_malloc_r+0x44>
 8005400:	20000260 	.word	0x20000260
 8005404:	20000264 	.word	0x20000264

08005408 <__ssputs_r>:
 8005408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540a:	688e      	ldr	r6, [r1, #8]
 800540c:	b085      	sub	sp, #20
 800540e:	0007      	movs	r7, r0
 8005410:	000c      	movs	r4, r1
 8005412:	9203      	str	r2, [sp, #12]
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	429e      	cmp	r6, r3
 8005418:	d83c      	bhi.n	8005494 <__ssputs_r+0x8c>
 800541a:	2390      	movs	r3, #144	; 0x90
 800541c:	898a      	ldrh	r2, [r1, #12]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	421a      	tst	r2, r3
 8005422:	d034      	beq.n	800548e <__ssputs_r+0x86>
 8005424:	2503      	movs	r5, #3
 8005426:	6909      	ldr	r1, [r1, #16]
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	1a5b      	subs	r3, r3, r1
 800542c:	9302      	str	r3, [sp, #8]
 800542e:	6963      	ldr	r3, [r4, #20]
 8005430:	9802      	ldr	r0, [sp, #8]
 8005432:	435d      	muls	r5, r3
 8005434:	0feb      	lsrs	r3, r5, #31
 8005436:	195d      	adds	r5, r3, r5
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	106d      	asrs	r5, r5, #1
 800543c:	3301      	adds	r3, #1
 800543e:	181b      	adds	r3, r3, r0
 8005440:	42ab      	cmp	r3, r5
 8005442:	d900      	bls.n	8005446 <__ssputs_r+0x3e>
 8005444:	001d      	movs	r5, r3
 8005446:	0553      	lsls	r3, r2, #21
 8005448:	d532      	bpl.n	80054b0 <__ssputs_r+0xa8>
 800544a:	0029      	movs	r1, r5
 800544c:	0038      	movs	r0, r7
 800544e:	f7ff ff7d 	bl	800534c <_malloc_r>
 8005452:	1e06      	subs	r6, r0, #0
 8005454:	d109      	bne.n	800546a <__ssputs_r+0x62>
 8005456:	230c      	movs	r3, #12
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	2340      	movs	r3, #64	; 0x40
 800545c:	2001      	movs	r0, #1
 800545e:	89a2      	ldrh	r2, [r4, #12]
 8005460:	4240      	negs	r0, r0
 8005462:	4313      	orrs	r3, r2
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	b005      	add	sp, #20
 8005468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546a:	9a02      	ldr	r2, [sp, #8]
 800546c:	6921      	ldr	r1, [r4, #16]
 800546e:	f7ff fb4b 	bl	8004b08 <memcpy>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <__ssputs_r+0xc0>)
 8005476:	401a      	ands	r2, r3
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	4313      	orrs	r3, r2
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	9b02      	ldr	r3, [sp, #8]
 8005480:	6126      	str	r6, [r4, #16]
 8005482:	18f6      	adds	r6, r6, r3
 8005484:	6026      	str	r6, [r4, #0]
 8005486:	6165      	str	r5, [r4, #20]
 8005488:	9e01      	ldr	r6, [sp, #4]
 800548a:	1aed      	subs	r5, r5, r3
 800548c:	60a5      	str	r5, [r4, #8]
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	429e      	cmp	r6, r3
 8005492:	d900      	bls.n	8005496 <__ssputs_r+0x8e>
 8005494:	9e01      	ldr	r6, [sp, #4]
 8005496:	0032      	movs	r2, r6
 8005498:	9903      	ldr	r1, [sp, #12]
 800549a:	6820      	ldr	r0, [r4, #0]
 800549c:	f000 fb5f 	bl	8005b5e <memmove>
 80054a0:	68a3      	ldr	r3, [r4, #8]
 80054a2:	2000      	movs	r0, #0
 80054a4:	1b9b      	subs	r3, r3, r6
 80054a6:	60a3      	str	r3, [r4, #8]
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	199e      	adds	r6, r3, r6
 80054ac:	6026      	str	r6, [r4, #0]
 80054ae:	e7da      	b.n	8005466 <__ssputs_r+0x5e>
 80054b0:	002a      	movs	r2, r5
 80054b2:	0038      	movs	r0, r7
 80054b4:	f000 fb76 	bl	8005ba4 <_realloc_r>
 80054b8:	1e06      	subs	r6, r0, #0
 80054ba:	d1e0      	bne.n	800547e <__ssputs_r+0x76>
 80054bc:	0038      	movs	r0, r7
 80054be:	6921      	ldr	r1, [r4, #16]
 80054c0:	f7ff fefa 	bl	80052b8 <_free_r>
 80054c4:	e7c7      	b.n	8005456 <__ssputs_r+0x4e>
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	fffffb7f 	.word	0xfffffb7f

080054cc <_svfiprintf_r>:
 80054cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ce:	b0a1      	sub	sp, #132	; 0x84
 80054d0:	9003      	str	r0, [sp, #12]
 80054d2:	001d      	movs	r5, r3
 80054d4:	898b      	ldrh	r3, [r1, #12]
 80054d6:	000f      	movs	r7, r1
 80054d8:	0016      	movs	r6, r2
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	d511      	bpl.n	8005502 <_svfiprintf_r+0x36>
 80054de:	690b      	ldr	r3, [r1, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10e      	bne.n	8005502 <_svfiprintf_r+0x36>
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	f7ff ff31 	bl	800534c <_malloc_r>
 80054ea:	6038      	str	r0, [r7, #0]
 80054ec:	6138      	str	r0, [r7, #16]
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d105      	bne.n	80054fe <_svfiprintf_r+0x32>
 80054f2:	230c      	movs	r3, #12
 80054f4:	9a03      	ldr	r2, [sp, #12]
 80054f6:	3801      	subs	r0, #1
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	b021      	add	sp, #132	; 0x84
 80054fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fe:	2340      	movs	r3, #64	; 0x40
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	2300      	movs	r3, #0
 8005504:	ac08      	add	r4, sp, #32
 8005506:	6163      	str	r3, [r4, #20]
 8005508:	3320      	adds	r3, #32
 800550a:	7663      	strb	r3, [r4, #25]
 800550c:	3310      	adds	r3, #16
 800550e:	76a3      	strb	r3, [r4, #26]
 8005510:	9507      	str	r5, [sp, #28]
 8005512:	0035      	movs	r5, r6
 8005514:	782b      	ldrb	r3, [r5, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <_svfiprintf_r+0x52>
 800551a:	2b25      	cmp	r3, #37	; 0x25
 800551c:	d147      	bne.n	80055ae <_svfiprintf_r+0xe2>
 800551e:	1bab      	subs	r3, r5, r6
 8005520:	9305      	str	r3, [sp, #20]
 8005522:	42b5      	cmp	r5, r6
 8005524:	d00c      	beq.n	8005540 <_svfiprintf_r+0x74>
 8005526:	0032      	movs	r2, r6
 8005528:	0039      	movs	r1, r7
 800552a:	9803      	ldr	r0, [sp, #12]
 800552c:	f7ff ff6c 	bl	8005408 <__ssputs_r>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d100      	bne.n	8005536 <_svfiprintf_r+0x6a>
 8005534:	e0ae      	b.n	8005694 <_svfiprintf_r+0x1c8>
 8005536:	6962      	ldr	r2, [r4, #20]
 8005538:	9b05      	ldr	r3, [sp, #20]
 800553a:	4694      	mov	ip, r2
 800553c:	4463      	add	r3, ip
 800553e:	6163      	str	r3, [r4, #20]
 8005540:	782b      	ldrb	r3, [r5, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d100      	bne.n	8005548 <_svfiprintf_r+0x7c>
 8005546:	e0a5      	b.n	8005694 <_svfiprintf_r+0x1c8>
 8005548:	2201      	movs	r2, #1
 800554a:	2300      	movs	r3, #0
 800554c:	4252      	negs	r2, r2
 800554e:	6062      	str	r2, [r4, #4]
 8005550:	a904      	add	r1, sp, #16
 8005552:	3254      	adds	r2, #84	; 0x54
 8005554:	1852      	adds	r2, r2, r1
 8005556:	1c6e      	adds	r6, r5, #1
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	60e3      	str	r3, [r4, #12]
 800555c:	60a3      	str	r3, [r4, #8]
 800555e:	7013      	strb	r3, [r2, #0]
 8005560:	65a3      	str	r3, [r4, #88]	; 0x58
 8005562:	2205      	movs	r2, #5
 8005564:	7831      	ldrb	r1, [r6, #0]
 8005566:	4854      	ldr	r0, [pc, #336]	; (80056b8 <_svfiprintf_r+0x1ec>)
 8005568:	f000 faee 	bl	8005b48 <memchr>
 800556c:	1c75      	adds	r5, r6, #1
 800556e:	2800      	cmp	r0, #0
 8005570:	d11f      	bne.n	80055b2 <_svfiprintf_r+0xe6>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	06d3      	lsls	r3, r2, #27
 8005576:	d504      	bpl.n	8005582 <_svfiprintf_r+0xb6>
 8005578:	2353      	movs	r3, #83	; 0x53
 800557a:	a904      	add	r1, sp, #16
 800557c:	185b      	adds	r3, r3, r1
 800557e:	2120      	movs	r1, #32
 8005580:	7019      	strb	r1, [r3, #0]
 8005582:	0713      	lsls	r3, r2, #28
 8005584:	d504      	bpl.n	8005590 <_svfiprintf_r+0xc4>
 8005586:	2353      	movs	r3, #83	; 0x53
 8005588:	a904      	add	r1, sp, #16
 800558a:	185b      	adds	r3, r3, r1
 800558c:	212b      	movs	r1, #43	; 0x2b
 800558e:	7019      	strb	r1, [r3, #0]
 8005590:	7833      	ldrb	r3, [r6, #0]
 8005592:	2b2a      	cmp	r3, #42	; 0x2a
 8005594:	d016      	beq.n	80055c4 <_svfiprintf_r+0xf8>
 8005596:	0035      	movs	r5, r6
 8005598:	2100      	movs	r1, #0
 800559a:	200a      	movs	r0, #10
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	782a      	ldrb	r2, [r5, #0]
 80055a0:	1c6e      	adds	r6, r5, #1
 80055a2:	3a30      	subs	r2, #48	; 0x30
 80055a4:	2a09      	cmp	r2, #9
 80055a6:	d94e      	bls.n	8005646 <_svfiprintf_r+0x17a>
 80055a8:	2900      	cmp	r1, #0
 80055aa:	d111      	bne.n	80055d0 <_svfiprintf_r+0x104>
 80055ac:	e017      	b.n	80055de <_svfiprintf_r+0x112>
 80055ae:	3501      	adds	r5, #1
 80055b0:	e7b0      	b.n	8005514 <_svfiprintf_r+0x48>
 80055b2:	4b41      	ldr	r3, [pc, #260]	; (80056b8 <_svfiprintf_r+0x1ec>)
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	1ac0      	subs	r0, r0, r3
 80055b8:	2301      	movs	r3, #1
 80055ba:	4083      	lsls	r3, r0
 80055bc:	4313      	orrs	r3, r2
 80055be:	002e      	movs	r6, r5
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	e7ce      	b.n	8005562 <_svfiprintf_r+0x96>
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	1d19      	adds	r1, r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	9107      	str	r1, [sp, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	db01      	blt.n	80055d4 <_svfiprintf_r+0x108>
 80055d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80055d2:	e004      	b.n	80055de <_svfiprintf_r+0x112>
 80055d4:	425b      	negs	r3, r3
 80055d6:	60e3      	str	r3, [r4, #12]
 80055d8:	2302      	movs	r3, #2
 80055da:	4313      	orrs	r3, r2
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	782b      	ldrb	r3, [r5, #0]
 80055e0:	2b2e      	cmp	r3, #46	; 0x2e
 80055e2:	d10a      	bne.n	80055fa <_svfiprintf_r+0x12e>
 80055e4:	786b      	ldrb	r3, [r5, #1]
 80055e6:	2b2a      	cmp	r3, #42	; 0x2a
 80055e8:	d135      	bne.n	8005656 <_svfiprintf_r+0x18a>
 80055ea:	9b07      	ldr	r3, [sp, #28]
 80055ec:	3502      	adds	r5, #2
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9207      	str	r2, [sp, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db2b      	blt.n	8005650 <_svfiprintf_r+0x184>
 80055f8:	9309      	str	r3, [sp, #36]	; 0x24
 80055fa:	4e30      	ldr	r6, [pc, #192]	; (80056bc <_svfiprintf_r+0x1f0>)
 80055fc:	2203      	movs	r2, #3
 80055fe:	0030      	movs	r0, r6
 8005600:	7829      	ldrb	r1, [r5, #0]
 8005602:	f000 faa1 	bl	8005b48 <memchr>
 8005606:	2800      	cmp	r0, #0
 8005608:	d006      	beq.n	8005618 <_svfiprintf_r+0x14c>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	1b80      	subs	r0, r0, r6
 800560e:	4083      	lsls	r3, r0
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	3501      	adds	r5, #1
 8005614:	4313      	orrs	r3, r2
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	7829      	ldrb	r1, [r5, #0]
 800561a:	2206      	movs	r2, #6
 800561c:	4828      	ldr	r0, [pc, #160]	; (80056c0 <_svfiprintf_r+0x1f4>)
 800561e:	1c6e      	adds	r6, r5, #1
 8005620:	7621      	strb	r1, [r4, #24]
 8005622:	f000 fa91 	bl	8005b48 <memchr>
 8005626:	2800      	cmp	r0, #0
 8005628:	d03c      	beq.n	80056a4 <_svfiprintf_r+0x1d8>
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <_svfiprintf_r+0x1f8>)
 800562c:	2b00      	cmp	r3, #0
 800562e:	d125      	bne.n	800567c <_svfiprintf_r+0x1b0>
 8005630:	2207      	movs	r2, #7
 8005632:	9b07      	ldr	r3, [sp, #28]
 8005634:	3307      	adds	r3, #7
 8005636:	4393      	bics	r3, r2
 8005638:	3308      	adds	r3, #8
 800563a:	9307      	str	r3, [sp, #28]
 800563c:	6963      	ldr	r3, [r4, #20]
 800563e:	9a04      	ldr	r2, [sp, #16]
 8005640:	189b      	adds	r3, r3, r2
 8005642:	6163      	str	r3, [r4, #20]
 8005644:	e765      	b.n	8005512 <_svfiprintf_r+0x46>
 8005646:	4343      	muls	r3, r0
 8005648:	0035      	movs	r5, r6
 800564a:	2101      	movs	r1, #1
 800564c:	189b      	adds	r3, r3, r2
 800564e:	e7a6      	b.n	800559e <_svfiprintf_r+0xd2>
 8005650:	2301      	movs	r3, #1
 8005652:	425b      	negs	r3, r3
 8005654:	e7d0      	b.n	80055f8 <_svfiprintf_r+0x12c>
 8005656:	2300      	movs	r3, #0
 8005658:	200a      	movs	r0, #10
 800565a:	001a      	movs	r2, r3
 800565c:	3501      	adds	r5, #1
 800565e:	6063      	str	r3, [r4, #4]
 8005660:	7829      	ldrb	r1, [r5, #0]
 8005662:	1c6e      	adds	r6, r5, #1
 8005664:	3930      	subs	r1, #48	; 0x30
 8005666:	2909      	cmp	r1, #9
 8005668:	d903      	bls.n	8005672 <_svfiprintf_r+0x1a6>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0c5      	beq.n	80055fa <_svfiprintf_r+0x12e>
 800566e:	9209      	str	r2, [sp, #36]	; 0x24
 8005670:	e7c3      	b.n	80055fa <_svfiprintf_r+0x12e>
 8005672:	4342      	muls	r2, r0
 8005674:	0035      	movs	r5, r6
 8005676:	2301      	movs	r3, #1
 8005678:	1852      	adds	r2, r2, r1
 800567a:	e7f1      	b.n	8005660 <_svfiprintf_r+0x194>
 800567c:	ab07      	add	r3, sp, #28
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	003a      	movs	r2, r7
 8005682:	0021      	movs	r1, r4
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <_svfiprintf_r+0x1fc>)
 8005686:	9803      	ldr	r0, [sp, #12]
 8005688:	e000      	b.n	800568c <_svfiprintf_r+0x1c0>
 800568a:	bf00      	nop
 800568c:	9004      	str	r0, [sp, #16]
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	3301      	adds	r3, #1
 8005692:	d1d3      	bne.n	800563c <_svfiprintf_r+0x170>
 8005694:	89bb      	ldrh	r3, [r7, #12]
 8005696:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005698:	065b      	lsls	r3, r3, #25
 800569a:	d400      	bmi.n	800569e <_svfiprintf_r+0x1d2>
 800569c:	e72d      	b.n	80054fa <_svfiprintf_r+0x2e>
 800569e:	2001      	movs	r0, #1
 80056a0:	4240      	negs	r0, r0
 80056a2:	e72a      	b.n	80054fa <_svfiprintf_r+0x2e>
 80056a4:	ab07      	add	r3, sp, #28
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	003a      	movs	r2, r7
 80056aa:	0021      	movs	r1, r4
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <_svfiprintf_r+0x1fc>)
 80056ae:	9803      	ldr	r0, [sp, #12]
 80056b0:	f000 f87c 	bl	80057ac <_printf_i>
 80056b4:	e7ea      	b.n	800568c <_svfiprintf_r+0x1c0>
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	08005dd8 	.word	0x08005dd8
 80056bc:	08005dde 	.word	0x08005dde
 80056c0:	08005de2 	.word	0x08005de2
 80056c4:	00000000 	.word	0x00000000
 80056c8:	08005409 	.word	0x08005409

080056cc <_printf_common>:
 80056cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ce:	0015      	movs	r5, r2
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	688a      	ldr	r2, [r1, #8]
 80056d4:	690b      	ldr	r3, [r1, #16]
 80056d6:	000c      	movs	r4, r1
 80056d8:	9000      	str	r0, [sp, #0]
 80056da:	4293      	cmp	r3, r2
 80056dc:	da00      	bge.n	80056e0 <_printf_common+0x14>
 80056de:	0013      	movs	r3, r2
 80056e0:	0022      	movs	r2, r4
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	3243      	adds	r2, #67	; 0x43
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	2a00      	cmp	r2, #0
 80056ea:	d001      	beq.n	80056f0 <_printf_common+0x24>
 80056ec:	3301      	adds	r3, #1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	069b      	lsls	r3, r3, #26
 80056f4:	d502      	bpl.n	80056fc <_printf_common+0x30>
 80056f6:	682b      	ldr	r3, [r5, #0]
 80056f8:	3302      	adds	r3, #2
 80056fa:	602b      	str	r3, [r5, #0]
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	2306      	movs	r3, #6
 8005700:	0017      	movs	r7, r2
 8005702:	401f      	ands	r7, r3
 8005704:	421a      	tst	r2, r3
 8005706:	d027      	beq.n	8005758 <_printf_common+0x8c>
 8005708:	0023      	movs	r3, r4
 800570a:	3343      	adds	r3, #67	; 0x43
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	4193      	sbcs	r3, r2
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	0692      	lsls	r2, r2, #26
 8005716:	d430      	bmi.n	800577a <_printf_common+0xae>
 8005718:	0022      	movs	r2, r4
 800571a:	9901      	ldr	r1, [sp, #4]
 800571c:	9800      	ldr	r0, [sp, #0]
 800571e:	9e08      	ldr	r6, [sp, #32]
 8005720:	3243      	adds	r2, #67	; 0x43
 8005722:	47b0      	blx	r6
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d025      	beq.n	8005774 <_printf_common+0xa8>
 8005728:	2306      	movs	r3, #6
 800572a:	6820      	ldr	r0, [r4, #0]
 800572c:	682a      	ldr	r2, [r5, #0]
 800572e:	68e1      	ldr	r1, [r4, #12]
 8005730:	2500      	movs	r5, #0
 8005732:	4003      	ands	r3, r0
 8005734:	2b04      	cmp	r3, #4
 8005736:	d103      	bne.n	8005740 <_printf_common+0x74>
 8005738:	1a8d      	subs	r5, r1, r2
 800573a:	43eb      	mvns	r3, r5
 800573c:	17db      	asrs	r3, r3, #31
 800573e:	401d      	ands	r5, r3
 8005740:	68a3      	ldr	r3, [r4, #8]
 8005742:	6922      	ldr	r2, [r4, #16]
 8005744:	4293      	cmp	r3, r2
 8005746:	dd01      	ble.n	800574c <_printf_common+0x80>
 8005748:	1a9b      	subs	r3, r3, r2
 800574a:	18ed      	adds	r5, r5, r3
 800574c:	2700      	movs	r7, #0
 800574e:	42bd      	cmp	r5, r7
 8005750:	d120      	bne.n	8005794 <_printf_common+0xc8>
 8005752:	2000      	movs	r0, #0
 8005754:	e010      	b.n	8005778 <_printf_common+0xac>
 8005756:	3701      	adds	r7, #1
 8005758:	68e3      	ldr	r3, [r4, #12]
 800575a:	682a      	ldr	r2, [r5, #0]
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	42bb      	cmp	r3, r7
 8005760:	ddd2      	ble.n	8005708 <_printf_common+0x3c>
 8005762:	0022      	movs	r2, r4
 8005764:	2301      	movs	r3, #1
 8005766:	9901      	ldr	r1, [sp, #4]
 8005768:	9800      	ldr	r0, [sp, #0]
 800576a:	9e08      	ldr	r6, [sp, #32]
 800576c:	3219      	adds	r2, #25
 800576e:	47b0      	blx	r6
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d1f0      	bne.n	8005756 <_printf_common+0x8a>
 8005774:	2001      	movs	r0, #1
 8005776:	4240      	negs	r0, r0
 8005778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800577a:	2030      	movs	r0, #48	; 0x30
 800577c:	18e1      	adds	r1, r4, r3
 800577e:	3143      	adds	r1, #67	; 0x43
 8005780:	7008      	strb	r0, [r1, #0]
 8005782:	0021      	movs	r1, r4
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	3145      	adds	r1, #69	; 0x45
 8005788:	7809      	ldrb	r1, [r1, #0]
 800578a:	18a2      	adds	r2, r4, r2
 800578c:	3243      	adds	r2, #67	; 0x43
 800578e:	3302      	adds	r3, #2
 8005790:	7011      	strb	r1, [r2, #0]
 8005792:	e7c1      	b.n	8005718 <_printf_common+0x4c>
 8005794:	0022      	movs	r2, r4
 8005796:	2301      	movs	r3, #1
 8005798:	9901      	ldr	r1, [sp, #4]
 800579a:	9800      	ldr	r0, [sp, #0]
 800579c:	9e08      	ldr	r6, [sp, #32]
 800579e:	321a      	adds	r2, #26
 80057a0:	47b0      	blx	r6
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	d0e6      	beq.n	8005774 <_printf_common+0xa8>
 80057a6:	3701      	adds	r7, #1
 80057a8:	e7d1      	b.n	800574e <_printf_common+0x82>
	...

080057ac <_printf_i>:
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	b08b      	sub	sp, #44	; 0x2c
 80057b0:	9206      	str	r2, [sp, #24]
 80057b2:	000a      	movs	r2, r1
 80057b4:	3243      	adds	r2, #67	; 0x43
 80057b6:	9307      	str	r3, [sp, #28]
 80057b8:	9005      	str	r0, [sp, #20]
 80057ba:	9204      	str	r2, [sp, #16]
 80057bc:	7e0a      	ldrb	r2, [r1, #24]
 80057be:	000c      	movs	r4, r1
 80057c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057c2:	2a78      	cmp	r2, #120	; 0x78
 80057c4:	d806      	bhi.n	80057d4 <_printf_i+0x28>
 80057c6:	2a62      	cmp	r2, #98	; 0x62
 80057c8:	d808      	bhi.n	80057dc <_printf_i+0x30>
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	d100      	bne.n	80057d0 <_printf_i+0x24>
 80057ce:	e0c0      	b.n	8005952 <_printf_i+0x1a6>
 80057d0:	2a58      	cmp	r2, #88	; 0x58
 80057d2:	d052      	beq.n	800587a <_printf_i+0xce>
 80057d4:	0026      	movs	r6, r4
 80057d6:	3642      	adds	r6, #66	; 0x42
 80057d8:	7032      	strb	r2, [r6, #0]
 80057da:	e022      	b.n	8005822 <_printf_i+0x76>
 80057dc:	0010      	movs	r0, r2
 80057de:	3863      	subs	r0, #99	; 0x63
 80057e0:	2815      	cmp	r0, #21
 80057e2:	d8f7      	bhi.n	80057d4 <_printf_i+0x28>
 80057e4:	f7fa fc98 	bl	8000118 <__gnu_thumb1_case_shi>
 80057e8:	001f0016 	.word	0x001f0016
 80057ec:	fff6fff6 	.word	0xfff6fff6
 80057f0:	fff6fff6 	.word	0xfff6fff6
 80057f4:	fff6001f 	.word	0xfff6001f
 80057f8:	fff6fff6 	.word	0xfff6fff6
 80057fc:	00a8fff6 	.word	0x00a8fff6
 8005800:	009a0036 	.word	0x009a0036
 8005804:	fff6fff6 	.word	0xfff6fff6
 8005808:	fff600b9 	.word	0xfff600b9
 800580c:	fff60036 	.word	0xfff60036
 8005810:	009efff6 	.word	0x009efff6
 8005814:	0026      	movs	r6, r4
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	3642      	adds	r6, #66	; 0x42
 800581a:	1d11      	adds	r1, r2, #4
 800581c:	6019      	str	r1, [r3, #0]
 800581e:	6813      	ldr	r3, [r2, #0]
 8005820:	7033      	strb	r3, [r6, #0]
 8005822:	2301      	movs	r3, #1
 8005824:	e0a7      	b.n	8005976 <_printf_i+0x1ca>
 8005826:	6808      	ldr	r0, [r1, #0]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	1d0a      	adds	r2, r1, #4
 800582c:	0605      	lsls	r5, r0, #24
 800582e:	d50b      	bpl.n	8005848 <_printf_i+0x9c>
 8005830:	680d      	ldr	r5, [r1, #0]
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	2d00      	cmp	r5, #0
 8005836:	da03      	bge.n	8005840 <_printf_i+0x94>
 8005838:	232d      	movs	r3, #45	; 0x2d
 800583a:	9a04      	ldr	r2, [sp, #16]
 800583c:	426d      	negs	r5, r5
 800583e:	7013      	strb	r3, [r2, #0]
 8005840:	4b61      	ldr	r3, [pc, #388]	; (80059c8 <_printf_i+0x21c>)
 8005842:	270a      	movs	r7, #10
 8005844:	9303      	str	r3, [sp, #12]
 8005846:	e032      	b.n	80058ae <_printf_i+0x102>
 8005848:	680d      	ldr	r5, [r1, #0]
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	0641      	lsls	r1, r0, #25
 800584e:	d5f1      	bpl.n	8005834 <_printf_i+0x88>
 8005850:	b22d      	sxth	r5, r5
 8005852:	e7ef      	b.n	8005834 <_printf_i+0x88>
 8005854:	680d      	ldr	r5, [r1, #0]
 8005856:	6819      	ldr	r1, [r3, #0]
 8005858:	1d08      	adds	r0, r1, #4
 800585a:	6018      	str	r0, [r3, #0]
 800585c:	062e      	lsls	r6, r5, #24
 800585e:	d501      	bpl.n	8005864 <_printf_i+0xb8>
 8005860:	680d      	ldr	r5, [r1, #0]
 8005862:	e003      	b.n	800586c <_printf_i+0xc0>
 8005864:	066d      	lsls	r5, r5, #25
 8005866:	d5fb      	bpl.n	8005860 <_printf_i+0xb4>
 8005868:	680d      	ldr	r5, [r1, #0]
 800586a:	b2ad      	uxth	r5, r5
 800586c:	4b56      	ldr	r3, [pc, #344]	; (80059c8 <_printf_i+0x21c>)
 800586e:	270a      	movs	r7, #10
 8005870:	9303      	str	r3, [sp, #12]
 8005872:	2a6f      	cmp	r2, #111	; 0x6f
 8005874:	d117      	bne.n	80058a6 <_printf_i+0xfa>
 8005876:	2708      	movs	r7, #8
 8005878:	e015      	b.n	80058a6 <_printf_i+0xfa>
 800587a:	3145      	adds	r1, #69	; 0x45
 800587c:	700a      	strb	r2, [r1, #0]
 800587e:	4a52      	ldr	r2, [pc, #328]	; (80059c8 <_printf_i+0x21c>)
 8005880:	9203      	str	r2, [sp, #12]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	6821      	ldr	r1, [r4, #0]
 8005886:	ca20      	ldmia	r2!, {r5}
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	0608      	lsls	r0, r1, #24
 800588c:	d550      	bpl.n	8005930 <_printf_i+0x184>
 800588e:	07cb      	lsls	r3, r1, #31
 8005890:	d502      	bpl.n	8005898 <_printf_i+0xec>
 8005892:	2320      	movs	r3, #32
 8005894:	4319      	orrs	r1, r3
 8005896:	6021      	str	r1, [r4, #0]
 8005898:	2710      	movs	r7, #16
 800589a:	2d00      	cmp	r5, #0
 800589c:	d103      	bne.n	80058a6 <_printf_i+0xfa>
 800589e:	2320      	movs	r3, #32
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	439a      	bics	r2, r3
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	0023      	movs	r3, r4
 80058a8:	2200      	movs	r2, #0
 80058aa:	3343      	adds	r3, #67	; 0x43
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	6863      	ldr	r3, [r4, #4]
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	db03      	blt.n	80058be <_printf_i+0x112>
 80058b6:	2204      	movs	r2, #4
 80058b8:	6821      	ldr	r1, [r4, #0]
 80058ba:	4391      	bics	r1, r2
 80058bc:	6021      	str	r1, [r4, #0]
 80058be:	2d00      	cmp	r5, #0
 80058c0:	d102      	bne.n	80058c8 <_printf_i+0x11c>
 80058c2:	9e04      	ldr	r6, [sp, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <_printf_i+0x136>
 80058c8:	9e04      	ldr	r6, [sp, #16]
 80058ca:	0028      	movs	r0, r5
 80058cc:	0039      	movs	r1, r7
 80058ce:	f7fa fcb3 	bl	8000238 <__aeabi_uidivmod>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	3e01      	subs	r6, #1
 80058d6:	5c5b      	ldrb	r3, [r3, r1]
 80058d8:	7033      	strb	r3, [r6, #0]
 80058da:	002b      	movs	r3, r5
 80058dc:	0005      	movs	r5, r0
 80058de:	429f      	cmp	r7, r3
 80058e0:	d9f3      	bls.n	80058ca <_printf_i+0x11e>
 80058e2:	2f08      	cmp	r7, #8
 80058e4:	d109      	bne.n	80058fa <_printf_i+0x14e>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	07db      	lsls	r3, r3, #31
 80058ea:	d506      	bpl.n	80058fa <_printf_i+0x14e>
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	6922      	ldr	r2, [r4, #16]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	dc02      	bgt.n	80058fa <_printf_i+0x14e>
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	3e01      	subs	r6, #1
 80058f8:	7033      	strb	r3, [r6, #0]
 80058fa:	9b04      	ldr	r3, [sp, #16]
 80058fc:	1b9b      	subs	r3, r3, r6
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	9b07      	ldr	r3, [sp, #28]
 8005902:	0021      	movs	r1, r4
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	9805      	ldr	r0, [sp, #20]
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	aa09      	add	r2, sp, #36	; 0x24
 800590c:	f7ff fede 	bl	80056cc <_printf_common>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d135      	bne.n	8005980 <_printf_i+0x1d4>
 8005914:	2001      	movs	r0, #1
 8005916:	4240      	negs	r0, r0
 8005918:	b00b      	add	sp, #44	; 0x2c
 800591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591c:	2220      	movs	r2, #32
 800591e:	6809      	ldr	r1, [r1, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	6022      	str	r2, [r4, #0]
 8005924:	0022      	movs	r2, r4
 8005926:	2178      	movs	r1, #120	; 0x78
 8005928:	3245      	adds	r2, #69	; 0x45
 800592a:	7011      	strb	r1, [r2, #0]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <_printf_i+0x220>)
 800592e:	e7a7      	b.n	8005880 <_printf_i+0xd4>
 8005930:	0648      	lsls	r0, r1, #25
 8005932:	d5ac      	bpl.n	800588e <_printf_i+0xe2>
 8005934:	b2ad      	uxth	r5, r5
 8005936:	e7aa      	b.n	800588e <_printf_i+0xe2>
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	680d      	ldr	r5, [r1, #0]
 800593c:	1d10      	adds	r0, r2, #4
 800593e:	6949      	ldr	r1, [r1, #20]
 8005940:	6018      	str	r0, [r3, #0]
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	062e      	lsls	r6, r5, #24
 8005946:	d501      	bpl.n	800594c <_printf_i+0x1a0>
 8005948:	6019      	str	r1, [r3, #0]
 800594a:	e002      	b.n	8005952 <_printf_i+0x1a6>
 800594c:	066d      	lsls	r5, r5, #25
 800594e:	d5fb      	bpl.n	8005948 <_printf_i+0x19c>
 8005950:	8019      	strh	r1, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	9e04      	ldr	r6, [sp, #16]
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	e7d2      	b.n	8005900 <_printf_i+0x154>
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	1d11      	adds	r1, r2, #4
 800595e:	6019      	str	r1, [r3, #0]
 8005960:	6816      	ldr	r6, [r2, #0]
 8005962:	2100      	movs	r1, #0
 8005964:	0030      	movs	r0, r6
 8005966:	6862      	ldr	r2, [r4, #4]
 8005968:	f000 f8ee 	bl	8005b48 <memchr>
 800596c:	2800      	cmp	r0, #0
 800596e:	d001      	beq.n	8005974 <_printf_i+0x1c8>
 8005970:	1b80      	subs	r0, r0, r6
 8005972:	6060      	str	r0, [r4, #4]
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	2300      	movs	r3, #0
 800597a:	9a04      	ldr	r2, [sp, #16]
 800597c:	7013      	strb	r3, [r2, #0]
 800597e:	e7bf      	b.n	8005900 <_printf_i+0x154>
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	0032      	movs	r2, r6
 8005984:	9906      	ldr	r1, [sp, #24]
 8005986:	9805      	ldr	r0, [sp, #20]
 8005988:	9d07      	ldr	r5, [sp, #28]
 800598a:	47a8      	blx	r5
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d0c1      	beq.n	8005914 <_printf_i+0x168>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	079b      	lsls	r3, r3, #30
 8005994:	d415      	bmi.n	80059c2 <_printf_i+0x216>
 8005996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005998:	68e0      	ldr	r0, [r4, #12]
 800599a:	4298      	cmp	r0, r3
 800599c:	dabc      	bge.n	8005918 <_printf_i+0x16c>
 800599e:	0018      	movs	r0, r3
 80059a0:	e7ba      	b.n	8005918 <_printf_i+0x16c>
 80059a2:	0022      	movs	r2, r4
 80059a4:	2301      	movs	r3, #1
 80059a6:	9906      	ldr	r1, [sp, #24]
 80059a8:	9805      	ldr	r0, [sp, #20]
 80059aa:	9e07      	ldr	r6, [sp, #28]
 80059ac:	3219      	adds	r2, #25
 80059ae:	47b0      	blx	r6
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d0af      	beq.n	8005914 <_printf_i+0x168>
 80059b4:	3501      	adds	r5, #1
 80059b6:	68e3      	ldr	r3, [r4, #12]
 80059b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	42ab      	cmp	r3, r5
 80059be:	dcf0      	bgt.n	80059a2 <_printf_i+0x1f6>
 80059c0:	e7e9      	b.n	8005996 <_printf_i+0x1ea>
 80059c2:	2500      	movs	r5, #0
 80059c4:	e7f7      	b.n	80059b6 <_printf_i+0x20a>
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	08005de9 	.word	0x08005de9
 80059cc:	08005dfa 	.word	0x08005dfa

080059d0 <_sbrk_r>:
 80059d0:	2300      	movs	r3, #0
 80059d2:	b570      	push	{r4, r5, r6, lr}
 80059d4:	4d06      	ldr	r5, [pc, #24]	; (80059f0 <_sbrk_r+0x20>)
 80059d6:	0004      	movs	r4, r0
 80059d8:	0008      	movs	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fc fbda 	bl	8002194 <_sbrk>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d103      	bne.n	80059ec <_sbrk_r+0x1c>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d000      	beq.n	80059ec <_sbrk_r+0x1c>
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	20000354 	.word	0x20000354

080059f4 <__sread>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	000c      	movs	r4, r1
 80059f8:	250e      	movs	r5, #14
 80059fa:	5f49      	ldrsh	r1, [r1, r5]
 80059fc:	f000 f8f8 	bl	8005bf0 <_read_r>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	db03      	blt.n	8005a0c <__sread+0x18>
 8005a04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a06:	181b      	adds	r3, r3, r0
 8005a08:	6563      	str	r3, [r4, #84]	; 0x54
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	4a02      	ldr	r2, [pc, #8]	; (8005a18 <__sread+0x24>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	81a3      	strh	r3, [r4, #12]
 8005a14:	e7f9      	b.n	8005a0a <__sread+0x16>
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	ffffefff 	.word	0xffffefff

08005a1c <__swrite>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	001f      	movs	r7, r3
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	0005      	movs	r5, r0
 8005a24:	000c      	movs	r4, r1
 8005a26:	0016      	movs	r6, r2
 8005a28:	05db      	lsls	r3, r3, #23
 8005a2a:	d505      	bpl.n	8005a38 <__swrite+0x1c>
 8005a2c:	230e      	movs	r3, #14
 8005a2e:	5ec9      	ldrsh	r1, [r1, r3]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2302      	movs	r3, #2
 8005a34:	f000 f874 	bl	8005b20 <_lseek_r>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <__swrite+0x34>)
 8005a3c:	0028      	movs	r0, r5
 8005a3e:	4013      	ands	r3, r2
 8005a40:	81a3      	strh	r3, [r4, #12]
 8005a42:	0032      	movs	r2, r6
 8005a44:	230e      	movs	r3, #14
 8005a46:	5ee1      	ldrsh	r1, [r4, r3]
 8005a48:	003b      	movs	r3, r7
 8005a4a:	f000 f81f 	bl	8005a8c <_write_r>
 8005a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a50:	ffffefff 	.word	0xffffefff

08005a54 <__sseek>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	000c      	movs	r4, r1
 8005a58:	250e      	movs	r5, #14
 8005a5a:	5f49      	ldrsh	r1, [r1, r5]
 8005a5c:	f000 f860 	bl	8005b20 <_lseek_r>
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	1c42      	adds	r2, r0, #1
 8005a64:	d103      	bne.n	8005a6e <__sseek+0x1a>
 8005a66:	4a05      	ldr	r2, [pc, #20]	; (8005a7c <__sseek+0x28>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	2280      	movs	r2, #128	; 0x80
 8005a70:	0152      	lsls	r2, r2, #5
 8005a72:	4313      	orrs	r3, r2
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	6560      	str	r0, [r4, #84]	; 0x54
 8005a78:	e7f8      	b.n	8005a6c <__sseek+0x18>
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	ffffefff 	.word	0xffffefff

08005a80 <__sclose>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	230e      	movs	r3, #14
 8005a84:	5ec9      	ldrsh	r1, [r1, r3]
 8005a86:	f000 f815 	bl	8005ab4 <_close_r>
 8005a8a:	bd10      	pop	{r4, pc}

08005a8c <_write_r>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	0004      	movs	r4, r0
 8005a90:	0008      	movs	r0, r1
 8005a92:	0011      	movs	r1, r2
 8005a94:	001a      	movs	r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	4d05      	ldr	r5, [pc, #20]	; (8005ab0 <_write_r+0x24>)
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	f7fc fb32 	bl	8002104 <_write>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d103      	bne.n	8005aac <_write_r+0x20>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d000      	beq.n	8005aac <_write_r+0x20>
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	bd70      	pop	{r4, r5, r6, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	20000354 	.word	0x20000354

08005ab4 <_close_r>:
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	b570      	push	{r4, r5, r6, lr}
 8005ab8:	4d06      	ldr	r5, [pc, #24]	; (8005ad4 <_close_r+0x20>)
 8005aba:	0004      	movs	r4, r0
 8005abc:	0008      	movs	r0, r1
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7fc fb3c 	bl	800213c <_close>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d103      	bne.n	8005ad0 <_close_r+0x1c>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d000      	beq.n	8005ad0 <_close_r+0x1c>
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	20000354 	.word	0x20000354

08005ad8 <_fstat_r>:
 8005ad8:	2300      	movs	r3, #0
 8005ada:	b570      	push	{r4, r5, r6, lr}
 8005adc:	4d06      	ldr	r5, [pc, #24]	; (8005af8 <_fstat_r+0x20>)
 8005ade:	0004      	movs	r4, r0
 8005ae0:	0008      	movs	r0, r1
 8005ae2:	0011      	movs	r1, r2
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	f7fc fb33 	bl	8002150 <_fstat>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d103      	bne.n	8005af6 <_fstat_r+0x1e>
 8005aee:	682b      	ldr	r3, [r5, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d000      	beq.n	8005af6 <_fstat_r+0x1e>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	20000354 	.word	0x20000354

08005afc <_isatty_r>:
 8005afc:	2300      	movs	r3, #0
 8005afe:	b570      	push	{r4, r5, r6, lr}
 8005b00:	4d06      	ldr	r5, [pc, #24]	; (8005b1c <_isatty_r+0x20>)
 8005b02:	0004      	movs	r4, r0
 8005b04:	0008      	movs	r0, r1
 8005b06:	602b      	str	r3, [r5, #0]
 8005b08:	f7fc fb30 	bl	800216c <_isatty>
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	d103      	bne.n	8005b18 <_isatty_r+0x1c>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d000      	beq.n	8005b18 <_isatty_r+0x1c>
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	20000354 	.word	0x20000354

08005b20 <_lseek_r>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	0004      	movs	r4, r0
 8005b24:	0008      	movs	r0, r1
 8005b26:	0011      	movs	r1, r2
 8005b28:	001a      	movs	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	4d05      	ldr	r5, [pc, #20]	; (8005b44 <_lseek_r+0x24>)
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	f7fc fb25 	bl	800217e <_lseek>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d103      	bne.n	8005b40 <_lseek_r+0x20>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d000      	beq.n	8005b40 <_lseek_r+0x20>
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	bd70      	pop	{r4, r5, r6, pc}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	20000354 	.word	0x20000354

08005b48 <memchr>:
 8005b48:	b2c9      	uxtb	r1, r1
 8005b4a:	1882      	adds	r2, r0, r2
 8005b4c:	4290      	cmp	r0, r2
 8005b4e:	d101      	bne.n	8005b54 <memchr+0xc>
 8005b50:	2000      	movs	r0, #0
 8005b52:	4770      	bx	lr
 8005b54:	7803      	ldrb	r3, [r0, #0]
 8005b56:	428b      	cmp	r3, r1
 8005b58:	d0fb      	beq.n	8005b52 <memchr+0xa>
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	e7f6      	b.n	8005b4c <memchr+0x4>

08005b5e <memmove>:
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	4288      	cmp	r0, r1
 8005b62:	d902      	bls.n	8005b6a <memmove+0xc>
 8005b64:	188b      	adds	r3, r1, r2
 8005b66:	4298      	cmp	r0, r3
 8005b68:	d303      	bcc.n	8005b72 <memmove+0x14>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e007      	b.n	8005b7e <memmove+0x20>
 8005b6e:	5c8b      	ldrb	r3, [r1, r2]
 8005b70:	5483      	strb	r3, [r0, r2]
 8005b72:	3a01      	subs	r2, #1
 8005b74:	d2fb      	bcs.n	8005b6e <memmove+0x10>
 8005b76:	bd10      	pop	{r4, pc}
 8005b78:	5ccc      	ldrb	r4, [r1, r3]
 8005b7a:	54c4      	strb	r4, [r0, r3]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d1fa      	bne.n	8005b78 <memmove+0x1a>
 8005b82:	e7f8      	b.n	8005b76 <memmove+0x18>

08005b84 <__malloc_lock>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4802      	ldr	r0, [pc, #8]	; (8005b90 <__malloc_lock+0xc>)
 8005b88:	f7ff fb27 	bl	80051da <__retarget_lock_acquire_recursive>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	2000034c 	.word	0x2000034c

08005b94 <__malloc_unlock>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4802      	ldr	r0, [pc, #8]	; (8005ba0 <__malloc_unlock+0xc>)
 8005b98:	f7ff fb20 	bl	80051dc <__retarget_lock_release_recursive>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	2000034c 	.word	0x2000034c

08005ba4 <_realloc_r>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	0007      	movs	r7, r0
 8005ba8:	000d      	movs	r5, r1
 8005baa:	0016      	movs	r6, r2
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d105      	bne.n	8005bbc <_realloc_r+0x18>
 8005bb0:	0011      	movs	r1, r2
 8005bb2:	f7ff fbcb 	bl	800534c <_malloc_r>
 8005bb6:	0004      	movs	r4, r0
 8005bb8:	0020      	movs	r0, r4
 8005bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	d103      	bne.n	8005bc8 <_realloc_r+0x24>
 8005bc0:	f7ff fb7a 	bl	80052b8 <_free_r>
 8005bc4:	0034      	movs	r4, r6
 8005bc6:	e7f7      	b.n	8005bb8 <_realloc_r+0x14>
 8005bc8:	f000 f826 	bl	8005c18 <_malloc_usable_size_r>
 8005bcc:	002c      	movs	r4, r5
 8005bce:	42b0      	cmp	r0, r6
 8005bd0:	d2f2      	bcs.n	8005bb8 <_realloc_r+0x14>
 8005bd2:	0031      	movs	r1, r6
 8005bd4:	0038      	movs	r0, r7
 8005bd6:	f7ff fbb9 	bl	800534c <_malloc_r>
 8005bda:	1e04      	subs	r4, r0, #0
 8005bdc:	d0ec      	beq.n	8005bb8 <_realloc_r+0x14>
 8005bde:	0029      	movs	r1, r5
 8005be0:	0032      	movs	r2, r6
 8005be2:	f7fe ff91 	bl	8004b08 <memcpy>
 8005be6:	0029      	movs	r1, r5
 8005be8:	0038      	movs	r0, r7
 8005bea:	f7ff fb65 	bl	80052b8 <_free_r>
 8005bee:	e7e3      	b.n	8005bb8 <_realloc_r+0x14>

08005bf0 <_read_r>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	0004      	movs	r4, r0
 8005bf4:	0008      	movs	r0, r1
 8005bf6:	0011      	movs	r1, r2
 8005bf8:	001a      	movs	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4d05      	ldr	r5, [pc, #20]	; (8005c14 <_read_r+0x24>)
 8005bfe:	602b      	str	r3, [r5, #0]
 8005c00:	f7fc fa63 	bl	80020ca <_read>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d103      	bne.n	8005c10 <_read_r+0x20>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d000      	beq.n	8005c10 <_read_r+0x20>
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	20000354 	.word	0x20000354

08005c18 <_malloc_usable_size_r>:
 8005c18:	1f0b      	subs	r3, r1, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	1f18      	subs	r0, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da01      	bge.n	8005c26 <_malloc_usable_size_r+0xe>
 8005c22:	580b      	ldr	r3, [r1, r0]
 8005c24:	18c0      	adds	r0, r0, r3
 8005c26:	4770      	bx	lr

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
