
ALGORITMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003084  08003084  00020458  2**0
                  CONTENTS
  4 .ARM          00000008  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800308c  0800308c  00020458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08003094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000458  080034ec  00020458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  080034ec  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000929c  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001633  00000000  00000000  0002971c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0002ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  0002b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000109a0  00000000  00000000  0002b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000897f  00000000  00000000  0003c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063b20  00000000  00000000  00044c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a87a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001910  00000000  00000000  000a87fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000458 	.word	0x20000458
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f80 	.word	0x08002f80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000045c 	.word	0x2000045c
 8000104:	08002f80 	.word	0x08002f80

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fa78 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f822 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f8ba 	bl	8000634 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004c0:	f000 f88a 	bl	80005d8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Basladi\r\n");
 80004c4:	4a09      	ldr	r2, [pc, #36]	; (80004ec <main+0x3c>)
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <main+0x40>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 f932 	bl	8002734 <siprintf>
 80004d0:	0003      	movs	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <main+0x44>)
 80004d6:	4906      	ldr	r1, [pc, #24]	; (80004f0 <main+0x40>)
 80004d8:	4807      	ldr	r0, [pc, #28]	; (80004f8 <main+0x48>)
 80004da:	f001 fc2f 	bl	8001d3c <HAL_UART_Transmit>
  /* USER CODE END 2 */
  int enbuyukcarpim(uint8_t buffer,int carpilacaksayi);
enbuyukcarpim(buffer, 15);
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <main+0x4c>)
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	210f      	movs	r1, #15
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 f8f5 	bl	80006d4 <enbuyukcarpim>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <main+0x3a>
 80004ec:	08002f98 	.word	0x08002f98
 80004f0:	20000480 	.word	0x20000480
 80004f4:	0000ffff 	.word	0x0000ffff
 80004f8:	20000580 	.word	0x20000580
 80004fc:	20000000 	.word	0x20000000

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b099      	sub	sp, #100	; 0x64
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	242c      	movs	r4, #44	; 0x2c
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2334      	movs	r3, #52	; 0x34
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f002 f907 	bl	8002724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000516:	2318      	movs	r3, #24
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	0018      	movs	r0, r3
 800051c:	2314      	movs	r3, #20
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f002 f8ff 	bl	8002724 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	2318      	movs	r3, #24
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f002 f8f8 	bl	8002724 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <SystemClock_Config+0xd4>)
 800053a:	401a      	ands	r2, r3
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <SystemClock_Config+0xd0>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0109      	lsls	r1, r1, #4
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2210      	movs	r2, #16
 800054c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2201      	movs	r2, #1
 8000552:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	22a0      	movs	r2, #160	; 0xa0
 800055e:	0212      	lsls	r2, r2, #8
 8000560:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fccc 	bl	8000f08 <HAL_RCC_OscConfig>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000574:	f000 f900 	bl	8000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	2118      	movs	r1, #24
 800057a:	187b      	adds	r3, r7, r1
 800057c:	220f      	movs	r2, #15
 800057e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f001 f82f 	bl	8001600 <HAL_RCC_ClockConfig>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a6:	f000 f8e7 	bl	8000778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2204      	movs	r2, #4
 80005ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fa45 	bl	8001a48 <HAL_RCCEx_PeriphCLKConfig>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005c2:	f000 f8d9 	bl	8000778 <Error_Handler>
  }
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b019      	add	sp, #100	; 0x64
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40007000 	.word	0x40007000
 80005d4:	ffffe7ff 	.word	0xffffe7ff

080005d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <MX_LPUART1_UART_Init+0x58>)
 80005e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005e4:	22e1      	movs	r2, #225	; 0xe1
 80005e6:	0252      	lsls	r2, r2, #9
 80005e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fb3c 	bl	8001c94 <HAL_UART_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f8aa 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000580 	.word	0x20000580
 8000630:	40004800 	.word	0x40004800

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	240c      	movs	r4, #12
 800063c:	193b      	adds	r3, r7, r4
 800063e:	0018      	movs	r0, r3
 8000640:	2314      	movs	r3, #20
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f002 f86d 	bl	8002724 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_GPIO_Init+0x9c>)
 800064c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_GPIO_Init+0x9c>)
 8000650:	2104      	movs	r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <MX_GPIO_Init+0x9c>)
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	2204      	movs	r2, #4
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_GPIO_Init+0x9c>)
 8000664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_GPIO_Init+0x9c>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_GPIO_Init+0x9c>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_GPIO_Init+0x9c>)
 800067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_GPIO_Init+0x9c>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_GPIO_Init+0x9c>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000692:	23a0      	movs	r3, #160	; 0xa0
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fc16 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006a0:	0021      	movs	r1, r4
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2204      	movs	r2, #4
 80006a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2201      	movs	r2, #1
 80006ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fa94 	bl	8000bf0 <HAL_GPIO_Init>

}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b009      	add	sp, #36	; 0x24
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <enbuyukcarpim>:

/* USER CODE BEGIN 4 */
int enbuyukcarpim(uint8_t buffer,int carpilacaksayi){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	0002      	movs	r2, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	701a      	strb	r2, [r3, #0]
//int enbuyukcarpim(char *bufferp,int carpilacaksayi){
	  if(0<carpilacaksayi && carpilacaksayi<=15){
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dd2b      	ble.n	8000740 <enbuyukcarpim+0x6c>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	dc28      	bgt.n	8000740 <enbuyukcarpim+0x6c>
		  /*int uzunluk =sizeof(*bufferp);
		  printf("buffer toplam: %c\r\n",*bufferp);*/

		  printf("Dizi uzunluğu: %d", k);
 80006ee:	23fa      	movs	r3, #250	; 0xfa
 80006f0:	009a      	lsls	r2, r3, #2
 80006f2:	491c      	ldr	r1, [pc, #112]	; (8000764 <enbuyukcarpim+0x90>)
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <enbuyukcarpim+0x94>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 f81c 	bl	8002734 <siprintf>
 80006fc:	0003      	movs	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <enbuyukcarpim+0x98>)
 8000702:	4919      	ldr	r1, [pc, #100]	; (8000768 <enbuyukcarpim+0x94>)
 8000704:	481a      	ldr	r0, [pc, #104]	; (8000770 <enbuyukcarpim+0x9c>)
 8000706:	f001 fb19 	bl	8001d3c <HAL_UART_Transmit>

		  for(int j = 0; j < k ; j++){
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e011      	b.n	8000734 <enbuyukcarpim+0x60>
			  printf(buffer);
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <enbuyukcarpim+0x94>)
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f002 f80a 	bl	8002734 <siprintf>
 8000720:	0003      	movs	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <enbuyukcarpim+0x98>)
 8000726:	4910      	ldr	r1, [pc, #64]	; (8000768 <enbuyukcarpim+0x94>)
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <enbuyukcarpim+0x9c>)
 800072a:	f001 fb07 	bl	8001d3c <HAL_UART_Transmit>
		  for(int j = 0; j < k ; j++){
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	23fa      	movs	r3, #250	; 0xfa
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	429a      	cmp	r2, r3
 800073c:	dbe8      	blt.n	8000710 <enbuyukcarpim+0x3c>
 800073e:	e00c      	b.n	800075a <enbuyukcarpim+0x86>

		  }
	  }else{
		  printf("Lütfen 1 ile 15 arasinda bir sayi giriniz.");
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <enbuyukcarpim+0xa0>)
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <enbuyukcarpim+0x94>)
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fff4 	bl	8002734 <siprintf>
 800074c:	0003      	movs	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <enbuyukcarpim+0x98>)
 8000752:	4905      	ldr	r1, [pc, #20]	; (8000768 <enbuyukcarpim+0x94>)
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <enbuyukcarpim+0x9c>)
 8000756:	f001 faf1 	bl	8001d3c <HAL_UART_Transmit>
	  }

  }
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b004      	add	sp, #16
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08002fa4 	.word	0x08002fa4
 8000768:	20000480 	.word	0x20000480
 800076c:	0000ffff 	.word	0x0000ffff
 8000770:	20000580 	.word	0x20000580
 8000774:	08002fb8 	.word	0x08002fb8

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_MspInit+0x24>)
 800078a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x24>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <HAL_MspInit+0x24>)
 8000796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_MspInit+0x24>)
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	0549      	lsls	r1, r1, #21
 800079e:	430a      	orrs	r2, r1
 80007a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b08b      	sub	sp, #44	; 0x2c
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	2414      	movs	r4, #20
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	0018      	movs	r0, r3
 80007ba:	2314      	movs	r3, #20
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f001 ffb0 	bl	8002724 <memset>
  if(huart->Instance==LPUART1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a28      	ldr	r2, [pc, #160]	; (800086c <HAL_UART_MspInit+0xc0>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d14a      	bne.n	8000864 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007d2:	4b27      	ldr	r3, [pc, #156]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	02c9      	lsls	r1, r1, #11
 80007d8:	430a      	orrs	r2, r1
 80007da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007e2:	2104      	movs	r1, #4
 80007e4:	430a      	orrs	r2, r1
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	2204      	movs	r2, #4
 80007ee:	4013      	ands	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_UART_MspInit+0xc4>)
 80007fa:	2102      	movs	r1, #2
 80007fc:	430a      	orrs	r2, r1
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_UART_MspInit+0xc4>)
 8000802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000804:	2202      	movs	r2, #2
 8000806:	4013      	ands	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2202      	movs	r2, #2
 8000816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2203      	movs	r2, #3
 8000822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2206      	movs	r2, #6
 8000828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	193b      	adds	r3, r7, r4
 800082c:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_UART_MspInit+0xc8>)
 800082e:	0019      	movs	r1, r3
 8000830:	0010      	movs	r0, r2
 8000832:	f000 f9dd 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000836:	0021      	movs	r1, r4
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2202      	movs	r2, #2
 8000844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2203      	movs	r2, #3
 8000850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2206      	movs	r2, #6
 8000856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	187b      	adds	r3, r7, r1
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_UART_MspInit+0xcc>)
 800085c:	0019      	movs	r1, r3
 800085e:	0010      	movs	r0, r2
 8000860:	f000 f9c6 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b00b      	add	sp, #44	; 0x2c
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	40004800 	.word	0x40004800
 8000870:	40021000 	.word	0x40021000
 8000874:	50000800 	.word	0x50000800
 8000878:	50000400 	.word	0x50000400

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f8d6 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b4:	4a14      	ldr	r2, [pc, #80]	; (8000908 <_sbrk+0x5c>)
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <_sbrk+0x60>)
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <_sbrk+0x64>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <_sbrk+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d207      	bcs.n	80008ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008dc:	f001 fef8 	bl	80026d0 <__errno>
 80008e0:	0003      	movs	r3, r0
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	425b      	negs	r3, r3
 80008ea:	e009      	b.n	8000900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	18d2      	adds	r2, r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <_sbrk+0x64>)
 80008fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b006      	add	sp, #24
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20002000 	.word	0x20002000
 800090c:	00000400 	.word	0x00000400
 8000910:	20000474 	.word	0x20000474
 8000914:	20000618 	.word	0x20000618

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <LoopForever+0x6>)
    LDR R1, [R0]
 800092a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800092c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <LoopForever+0xa>)
    CMP R1, R2
 8000930:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000932:	d105      	bne.n	8000940 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000936:	4913      	ldr	r1, [pc, #76]	; (8000984 <LoopForever+0x12>)
    STR R1, [R0]
 8000938:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800093c:	4913      	ldr	r1, [pc, #76]	; (800098c <LoopForever+0x1a>)
    STR R1, [R0]
 800093e:	6001      	str	r1, [r0, #0]

08000940 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000942:	4914      	ldr	r1, [pc, #80]	; (8000994 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <LoopForever+0x26>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000958:	4c11      	ldr	r4, [pc, #68]	; (80009a0 <LoopForever+0x2e>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000966:	f7ff ffd7 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096a:	f001 feb7 	bl	80026dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096e:	f7ff fd9f 	bl	80004b0 <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
   ldr   r0, =_estack
 8000974:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000978:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800097c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000980:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000984:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000988:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800098c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 8000998:	08003094 	.word	0x08003094
  ldr r2, =_sbss
 800099c:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 80009a0:	20000618 	.word	0x20000618

080009a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_IRQHandler>
	...

080009a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_Init+0x3c>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Init+0x3c>)
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	430a      	orrs	r2, r1
 80009be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f811 	bl	80009e8 <HAL_InitTick>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d003      	beq.n	80009d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	e001      	b.n	80009d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d2:	f7ff fed7 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_InitTick+0x5c>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_InitTick+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0019      	movs	r1, r3
 80009fa:	23fa      	movs	r3, #250	; 0xfa
 80009fc:	0098      	lsls	r0, r3, #2
 80009fe:	f7ff fb8d 	bl	800011c <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0019      	movs	r1, r3
 8000a06:	0020      	movs	r0, r4
 8000a08:	f7ff fb88 	bl	800011c <__udivsi3>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f8e1 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e00f      	b.n	8000a3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d80b      	bhi.n	8000a3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f8be 	bl	8000bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_InitTick+0x64>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	200003e8 	.word	0x200003e8
 8000a48:	200003f0 	.word	0x200003f0
 8000a4c:	200003ec 	.word	0x200003ec

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	18d2      	adds	r2, r2, r3
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_IncTick+0x20>)
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	200003f0 	.word	0x200003f0
 8000a70:	20000604 	.word	0x20000604

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000604 	.word	0x20000604

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9c:	d828      	bhi.n	8000af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	33c0      	adds	r3, #192	; 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	589b      	ldr	r3, [r3, r2]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	; 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aee:	e031      	b.n	8000b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0019      	movs	r1, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	400b      	ands	r3, r1
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3306      	adds	r3, #6
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001c      	movs	r4, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	18c3      	adds	r3, r0, r3
 8000b50:	3304      	adds	r3, #4
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	045b      	lsls	r3, r3, #17
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d301      	bcc.n	8000b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e010      	b.n	8000b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <SysTick_Config+0x44>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	3a01      	subs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff7c 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x44>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ffbf 	bl	8000b64 <SysTick_Config>
 8000be6:	0003      	movs	r3, r0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c06:	e149      	b.n	8000e9c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x30>
 8000c1e:	e13a      	b.n	8000e96 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	43da      	mvns	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	2201      	movs	r2, #1
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d017      	beq.n	8000cd6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d123      	bne.n	8000d2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	58d3      	ldr	r3, [r2, r3]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	400b      	ands	r3, r1
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	6939      	ldr	r1, [r7, #16]
 8000d28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2203      	movs	r2, #3
 8000d48:	401a      	ands	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	23c0      	movs	r3, #192	; 0xc0
 8000d64:	029b      	lsls	r3, r3, #10
 8000d66:	4013      	ands	r3, r2
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x17c>
 8000d6a:	e094      	b.n	8000e96 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d70:	4b50      	ldr	r3, [pc, #320]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d78:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	589b      	ldr	r3, [r3, r2]
 8000d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x1de>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x1da>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a43      	ldr	r2, [pc, #268]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a42      	ldr	r2, [pc, #264]	; (8000ec4 <HAL_GPIO_Init+0x2d4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x1d2>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de0:	4935      	ldr	r1, [pc, #212]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	4013      	ands	r3, r2
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	029b      	lsls	r3, r3, #10
 8000e30:	4013      	ands	r3, r2
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	035b      	lsls	r3, r3, #13
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	039b      	lsls	r3, r3, #14
 8000e84:	4013      	ands	r3, r2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	1e13      	subs	r3, r2, #0
 8000ea6:	d000      	beq.n	8000eaa <HAL_GPIO_Init+0x2ba>
 8000ea8:	e6ae      	b.n	8000c08 <HAL_GPIO_Init+0x18>
  }
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	50000800 	.word	0x50000800
 8000ec4:	50001c00 	.word	0x50001c00
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	0008      	movs	r0, r1
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	1cbb      	adds	r3, r7, #2
 8000eda:	1c02      	adds	r2, r0, #0
 8000edc:	801a      	strh	r2, [r3, #0]
 8000ede:	1c7b      	adds	r3, r7, #1
 8000ee0:	1c0a      	adds	r2, r1, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee4:	1c7b      	adds	r3, r7, #1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eec:	1cbb      	adds	r3, r7, #2
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ef6:	1cbb      	adds	r3, r7, #2
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f000 fb6c 	bl	80015f4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1c:	4bc8      	ldr	r3, [pc, #800]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	220c      	movs	r2, #12
 8000f22:	4013      	ands	r3, r2
 8000f24:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f26:	4bc6      	ldr	r3, [pc, #792]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	025b      	lsls	r3, r3, #9
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d100      	bne.n	8000f3e <HAL_RCC_OscConfig+0x36>
 8000f3c:	e07d      	b.n	800103a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d007      	beq.n	8000f54 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b0c      	cmp	r3, #12
 8000f48:	d112      	bne.n	8000f70 <HAL_RCC_OscConfig+0x68>
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	025b      	lsls	r3, r3, #9
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d10d      	bne.n	8000f70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	4bba      	ldr	r3, [pc, #744]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d100      	bne.n	8000f62 <HAL_RCC_OscConfig+0x5a>
 8000f60:	e06a      	b.n	8001038 <HAL_RCC_OscConfig+0x130>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d166      	bne.n	8001038 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f000 fb42 	bl	80015f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	025b      	lsls	r3, r3, #9
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d107      	bne.n	8000f8c <HAL_RCC_OscConfig+0x84>
 8000f7c:	4bb0      	ldr	r3, [pc, #704]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4baf      	ldr	r3, [pc, #700]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e027      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	02db      	lsls	r3, r3, #11
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d10e      	bne.n	8000fb6 <HAL_RCC_OscConfig+0xae>
 8000f98:	4ba9      	ldr	r3, [pc, #676]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4ba8      	ldr	r3, [pc, #672]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	02c9      	lsls	r1, r1, #11
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4ba6      	ldr	r3, [pc, #664]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4ba5      	ldr	r3, [pc, #660]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0249      	lsls	r1, r1, #9
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e012      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000fb6:	4ba2      	ldr	r3, [pc, #648]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4ba1      	ldr	r3, [pc, #644]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000fbc:	49a1      	ldr	r1, [pc, #644]	; (8001244 <HAL_RCC_OscConfig+0x33c>)
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	4b9f      	ldr	r3, [pc, #636]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	025b      	lsls	r3, r3, #9
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4b9b      	ldr	r3, [pc, #620]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b9a      	ldr	r3, [pc, #616]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8000fd6:	499c      	ldr	r1, [pc, #624]	; (8001248 <HAL_RCC_OscConfig+0x340>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d014      	beq.n	800100e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fd46 	bl	8000a74 <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fee:	f7ff fd41 	bl	8000a74 <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e2f9      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001000:	4b8f      	ldr	r3, [pc, #572]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	4013      	ands	r3, r2
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0xe6>
 800100c:	e015      	b.n	800103a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fd31 	bl	8000a74 <HAL_GetTick>
 8001012:	0003      	movs	r3, r0
 8001014:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fd2c 	bl	8000a74 <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e2e4      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800102a:	4b85      	ldr	r3, [pc, #532]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	029b      	lsls	r3, r3, #10
 8001032:	4013      	ands	r3, r2
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x110>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	d100      	bne.n	8001046 <HAL_RCC_OscConfig+0x13e>
 8001044:	e099      	b.n	800117a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	2220      	movs	r2, #32
 8001050:	4013      	ands	r3, r2
 8001052:	d009      	beq.n	8001068 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001054:	4b7a      	ldr	r3, [pc, #488]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b79      	ldr	r3, [pc, #484]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 800105a:	2120      	movs	r1, #32
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	2220      	movs	r2, #32
 8001064:	4393      	bics	r3, r2
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	2b0c      	cmp	r3, #12
 8001072:	d13e      	bne.n	80010f2 <HAL_RCC_OscConfig+0x1ea>
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d13b      	bne.n	80010f2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800107a:	4b71      	ldr	r3, [pc, #452]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2204      	movs	r2, #4
 8001080:	4013      	ands	r3, r2
 8001082:	d004      	beq.n	800108e <HAL_RCC_OscConfig+0x186>
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e2b2      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b6c      	ldr	r3, [pc, #432]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_RCC_OscConfig+0x344>)
 8001094:	4013      	ands	r3, r2
 8001096:	0019      	movs	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	021a      	lsls	r2, r3, #8
 800109e:	4b68      	ldr	r3, [pc, #416]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80010a0:	430a      	orrs	r2, r1
 80010a2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010a4:	4b66      	ldr	r3, [pc, #408]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2209      	movs	r2, #9
 80010aa:	4393      	bics	r3, r2
 80010ac:	0019      	movs	r1, r3
 80010ae:	4b64      	ldr	r3, [pc, #400]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80010b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b6:	f000 fbeb 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 80010ba:	0001      	movs	r1, r0
 80010bc:	4b60      	ldr	r3, [pc, #384]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	220f      	movs	r2, #15
 80010c4:	4013      	ands	r3, r2
 80010c6:	4a62      	ldr	r2, [pc, #392]	; (8001250 <HAL_RCC_OscConfig+0x348>)
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	000a      	movs	r2, r1
 80010cc:	40da      	lsrs	r2, r3
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <HAL_RCC_OscConfig+0x34c>)
 80010d0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010d2:	4b61      	ldr	r3, [pc, #388]	; (8001258 <HAL_RCC_OscConfig+0x350>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2513      	movs	r5, #19
 80010d8:	197c      	adds	r4, r7, r5
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff fc84 	bl	80009e8 <HAL_InitTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010e4:	197b      	adds	r3, r7, r5
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d046      	beq.n	800117a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80010ec:	197b      	adds	r3, r7, r5
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	e280      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d027      	beq.n	8001148 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010f8:	4b51      	ldr	r3, [pc, #324]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2209      	movs	r2, #9
 80010fe:	4393      	bics	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fcb3 	bl	8000a74 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fcae 	bl	8000a74 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e266      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2204      	movs	r2, #4
 800112c:	4013      	ands	r3, r2
 800112e:	d0f1      	beq.n	8001114 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b43      	ldr	r3, [pc, #268]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <HAL_RCC_OscConfig+0x344>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	021a      	lsls	r2, r3, #8
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001142:	430a      	orrs	r2, r1
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	e018      	b.n	800117a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001148:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc8e 	bl	8000a74 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff fc89 	bl	8000a74 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e241      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2204      	movs	r2, #4
 8001176:	4013      	ands	r3, r2
 8001178:	d1f1      	bne.n	800115e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2210      	movs	r2, #16
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x27e>
 8001184:	e0a1      	b.n	80012ca <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d140      	bne.n	800120e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_OscConfig+0x29c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e227      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a2c      	ldr	r2, [pc, #176]	; (800125c <HAL_RCC_OscConfig+0x354>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	0019      	movs	r1, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1a      	ldr	r2, [r3, #32]
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80011b4:	430a      	orrs	r2, r1
 80011b6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	0a19      	lsrs	r1, r3, #8
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	061a      	lsls	r2, r3, #24
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80011c8:	430a      	orrs	r2, r1
 80011ca:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	0b5b      	lsrs	r3, r3, #13
 80011d2:	3301      	adds	r3, #1
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	0212      	lsls	r2, r2, #8
 80011d8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	210f      	movs	r1, #15
 80011e2:	400b      	ands	r3, r1
 80011e4:	491a      	ldr	r1, [pc, #104]	; (8001250 <HAL_RCC_OscConfig+0x348>)
 80011e6:	5ccb      	ldrb	r3, [r1, r3]
 80011e8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_RCC_OscConfig+0x34c>)
 80011ec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_RCC_OscConfig+0x350>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2513      	movs	r5, #19
 80011f4:	197c      	adds	r4, r7, r5
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fbf6 	bl	80009e8 <HAL_InitTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001200:	197b      	adds	r3, r7, r5
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d060      	beq.n	80012ca <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001208:	197b      	adds	r3, r7, r5
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	e1f2      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d03f      	beq.n	8001296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_RCC_OscConfig+0x338>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0049      	lsls	r1, r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fc26 	bl	8000a74 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800122c:	e018      	b.n	8001260 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800122e:	f7ff fc21 	bl	8000a74 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d911      	bls.n	8001260 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1d9      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
 8001240:	40021000 	.word	0x40021000
 8001244:	fffeffff 	.word	0xfffeffff
 8001248:	fffbffff 	.word	0xfffbffff
 800124c:	ffffe0ff 	.word	0xffffe0ff
 8001250:	08002fe4 	.word	0x08002fe4
 8001254:	200003e8 	.word	0x200003e8
 8001258:	200003ec 	.word	0x200003ec
 800125c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001260:	4bc9      	ldr	r3, [pc, #804]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d0e0      	beq.n	800122e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126c:	4bc6      	ldr	r3, [pc, #792]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4ac6      	ldr	r2, [pc, #792]	; (800158c <HAL_RCC_OscConfig+0x684>)
 8001272:	4013      	ands	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	4bc3      	ldr	r3, [pc, #780]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001280:	4bc1      	ldr	r3, [pc, #772]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	0a19      	lsrs	r1, r3, #8
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	061a      	lsls	r2, r3, #24
 800128e:	4bbe      	ldr	r3, [pc, #760]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001290:	430a      	orrs	r2, r1
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	e019      	b.n	80012ca <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001296:	4bbc      	ldr	r3, [pc, #752]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4bbb      	ldr	r3, [pc, #748]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800129c:	49bc      	ldr	r1, [pc, #752]	; (8001590 <HAL_RCC_OscConfig+0x688>)
 800129e:	400a      	ands	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fbe7 	bl	8000a74 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ac:	f7ff fbe2 	bl	8000a74 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e19a      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012be:	4bb2      	ldr	r3, [pc, #712]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2208      	movs	r2, #8
 80012d0:	4013      	ands	r3, r2
 80012d2:	d036      	beq.n	8001342 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d019      	beq.n	8001310 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012dc:	4baa      	ldr	r3, [pc, #680]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80012de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e0:	4ba9      	ldr	r3, [pc, #676]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	430a      	orrs	r2, r1
 80012e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fbc4 	bl	8000a74 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f2:	f7ff fbbf 	bl	8000a74 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e177      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001304:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001308:	2202      	movs	r2, #2
 800130a:	4013      	ands	r3, r2
 800130c:	d0f1      	beq.n	80012f2 <HAL_RCC_OscConfig+0x3ea>
 800130e:	e018      	b.n	8001342 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b9d      	ldr	r3, [pc, #628]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001314:	4b9c      	ldr	r3, [pc, #624]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001316:	2101      	movs	r1, #1
 8001318:	438a      	bics	r2, r1
 800131a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fbaa 	bl	8000a74 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001326:	f7ff fba5 	bl	8000a74 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e15d      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001338:	4b93      	ldr	r3, [pc, #588]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800133a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133c:	2202      	movs	r2, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d1f1      	bne.n	8001326 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2204      	movs	r2, #4
 8001348:	4013      	ands	r3, r2
 800134a:	d100      	bne.n	800134e <HAL_RCC_OscConfig+0x446>
 800134c:	e0ae      	b.n	80014ac <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2023      	movs	r0, #35	; 0x23
 8001350:	183b      	adds	r3, r7, r0
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001356:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	055b      	lsls	r3, r3, #21
 800135e:	4013      	ands	r3, r2
 8001360:	d109      	bne.n	8001376 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	4b89      	ldr	r3, [pc, #548]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0549      	lsls	r1, r1, #21
 800136c:	430a      	orrs	r2, r1
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001370:	183b      	adds	r3, r7, r0
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	4b87      	ldr	r3, [pc, #540]	; (8001594 <HAL_RCC_OscConfig+0x68c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4013      	ands	r3, r2
 8001380:	d11a      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001382:	4b84      	ldr	r3, [pc, #528]	; (8001594 <HAL_RCC_OscConfig+0x68c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b83      	ldr	r3, [pc, #524]	; (8001594 <HAL_RCC_OscConfig+0x68c>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0049      	lsls	r1, r1, #1
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001390:	f7ff fb70 	bl	8000a74 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139a:	f7ff fb6b 	bl	8000a74 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b64      	cmp	r3, #100	; 0x64
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e123      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <HAL_RCC_OscConfig+0x68c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_OscConfig+0x4cc>
 80013c4:	4b70      	ldr	r3, [pc, #448]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80013c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013c8:	4b6f      	ldr	r3, [pc, #444]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0049      	lsls	r1, r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	651a      	str	r2, [r3, #80]	; 0x50
 80013d2:	e031      	b.n	8001438 <HAL_RCC_OscConfig+0x530>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4ee>
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80013de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e0:	4b69      	ldr	r3, [pc, #420]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80013e2:	496b      	ldr	r1, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x688>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	651a      	str	r2, [r3, #80]	; 0x50
 80013e8:	4b67      	ldr	r3, [pc, #412]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80013ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80013ee:	496a      	ldr	r1, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x690>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	651a      	str	r2, [r3, #80]	; 0x50
 80013f4:	e020      	b.n	8001438 <HAL_RCC_OscConfig+0x530>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	23a0      	movs	r3, #160	; 0xa0
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	429a      	cmp	r2, r3
 8001400:	d10e      	bne.n	8001420 <HAL_RCC_OscConfig+0x518>
 8001402:	4b61      	ldr	r3, [pc, #388]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001406:	4b60      	ldr	r3, [pc, #384]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	00c9      	lsls	r1, r1, #3
 800140c:	430a      	orrs	r2, r1
 800140e:	651a      	str	r2, [r3, #80]	; 0x50
 8001410:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001414:	4b5c      	ldr	r3, [pc, #368]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0049      	lsls	r1, r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	651a      	str	r2, [r3, #80]	; 0x50
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x530>
 8001420:	4b59      	ldr	r3, [pc, #356]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001426:	495a      	ldr	r1, [pc, #360]	; (8001590 <HAL_RCC_OscConfig+0x688>)
 8001428:	400a      	ands	r2, r1
 800142a:	651a      	str	r2, [r3, #80]	; 0x50
 800142c:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800142e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001430:	4b55      	ldr	r3, [pc, #340]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001432:	4959      	ldr	r1, [pc, #356]	; (8001598 <HAL_RCC_OscConfig+0x690>)
 8001434:	400a      	ands	r2, r1
 8001436:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fb18 	bl	8000a74 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001448:	e009      	b.n	800145e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fb13 	bl	8000a74 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_RCC_OscConfig+0x694>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0ca      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800145e:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d0ef      	beq.n	800144a <HAL_RCC_OscConfig+0x542>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fb02 	bl	8000a74 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001474:	e009      	b.n	800148a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fafd 	bl	8000a74 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	4a46      	ldr	r2, [pc, #280]	; (800159c <HAL_RCC_OscConfig+0x694>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0b4      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800148c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d1ef      	bne.n	8001476 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001496:	2323      	movs	r3, #35	; 0x23
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80014a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80014a6:	493e      	ldr	r1, [pc, #248]	; (80015a0 <HAL_RCC_OscConfig+0x698>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x5ae>
 80014b4:	e09d      	b.n	80015f2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d100      	bne.n	80014be <HAL_RCC_OscConfig+0x5b6>
 80014bc:	e076      	b.n	80015ac <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d145      	bne.n	8001552 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_RCC_OscConfig+0x69c>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff facf 	bl	8000a74 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff faca 	bl	8000a74 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e082      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	049b      	lsls	r3, r3, #18
 80014f6:	4013      	ands	r3, r2
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <HAL_RCC_OscConfig+0x6a0>)
 8001500:	4013      	ands	r3, r2
 8001502:	0019      	movs	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	431a      	orrs	r2, r3
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001516:	430a      	orrs	r2, r1
 8001518:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0449      	lsls	r1, r1, #17
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff faa4 	bl	8000a74 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fa9f 	bl	8000a74 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e057      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	049b      	lsls	r3, r3, #18
 800154c:	4013      	ands	r3, r2
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x62a>
 8001550:	e04f      	b.n	80015f2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 8001558:	4912      	ldr	r1, [pc, #72]	; (80015a4 <HAL_RCC_OscConfig+0x69c>)
 800155a:	400a      	ands	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fa89 	bl	8000a74 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fa84 	bl	8000a74 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e03c      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800157a:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_RCC_OscConfig+0x680>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	049b      	lsls	r3, r3, #18
 8001582:	4013      	ands	r3, r2
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x660>
 8001586:	e034      	b.n	80015f2 <HAL_RCC_OscConfig+0x6ea>
 8001588:	40021000 	.word	0x40021000
 800158c:	ffff1fff 	.word	0xffff1fff
 8001590:	fffffeff 	.word	0xfffffeff
 8001594:	40007000 	.word	0x40007000
 8001598:	fffffbff 	.word	0xfffffbff
 800159c:	00001388 	.word	0x00001388
 80015a0:	efffffff 	.word	0xefffffff
 80015a4:	feffffff 	.word	0xfeffffff
 80015a8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_RCC_OscConfig+0x6f4>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	401a      	ands	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d10f      	bne.n	80015ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	23f0      	movs	r3, #240	; 0xf0
 80015d2:	039b      	lsls	r3, r3, #14
 80015d4:	401a      	ands	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	23c0      	movs	r3, #192	; 0xc0
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b00a      	add	sp, #40	; 0x28
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e128      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b96      	ldr	r3, [pc, #600]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	4013      	ands	r3, r2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d91e      	bls.n	8001660 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b93      	ldr	r3, [pc, #588]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2201      	movs	r2, #1
 8001628:	4393      	bics	r3, r2
 800162a:	0019      	movs	r1, r3
 800162c:	4b90      	ldr	r3, [pc, #576]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001634:	f7ff fa1e 	bl	8000a74 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163c:	e009      	b.n	8001652 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163e:	f7ff fa19 	bl	8000a74 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4a8a      	ldr	r2, [pc, #552]	; (8001874 <HAL_RCC_ClockConfig+0x274>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e109      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b87      	ldr	r3, [pc, #540]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	4013      	ands	r3, r2
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d1ee      	bne.n	800163e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	22f0      	movs	r2, #240	; 0xf0
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 800167a:	430a      	orrs	r2, r1
 800167c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_ClockConfig+0x8a>
 8001688:	e089      	b.n	800179e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001692:	4b79      	ldr	r3, [pc, #484]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	029b      	lsls	r3, r3, #10
 800169a:	4013      	ands	r3, r2
 800169c:	d120      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0e1      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	049b      	lsls	r3, r3, #18
 80016b2:	4013      	ands	r3, r2
 80016b4:	d114      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e0d5      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c2:	4b6d      	ldr	r3, [pc, #436]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2204      	movs	r2, #4
 80016c8:	4013      	ands	r3, r2
 80016ca:	d109      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0ca      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016d0:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0c2      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4393      	bics	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff f9be 	bl	8000a74 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001704:	e009      	b.n	800171a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001706:	f7ff f9b5 	bl	8000a74 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_RCC_ClockConfig+0x274>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0a5      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800171a:	4b57      	ldr	r3, [pc, #348]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	220c      	movs	r2, #12
 8001720:	4013      	ands	r3, r2
 8001722:	2b08      	cmp	r3, #8
 8001724:	d1ef      	bne.n	8001706 <HAL_RCC_ClockConfig+0x106>
 8001726:	e03a      	b.n	800179e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d111      	bne.n	8001754 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001730:	e009      	b.n	8001746 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001732:	f7ff f99f 	bl	8000a74 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_RCC_ClockConfig+0x274>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e08f      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001746:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	220c      	movs	r2, #12
 800174c:	4013      	ands	r3, r2
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d1ef      	bne.n	8001732 <HAL_RCC_ClockConfig+0x132>
 8001752:	e024      	b.n	800179e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d11b      	bne.n	8001794 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800175c:	e009      	b.n	8001772 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7ff f989 	bl	8000a74 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a42      	ldr	r2, [pc, #264]	; (8001874 <HAL_RCC_ClockConfig+0x274>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e079      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	220c      	movs	r2, #12
 8001778:	4013      	ands	r3, r2
 800177a:	2b04      	cmp	r3, #4
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_ClockConfig+0x15e>
 800177e:	e00e      	b.n	800179e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001780:	f7ff f978 	bl	8000a74 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <HAL_RCC_ClockConfig+0x274>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e068      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	220c      	movs	r2, #12
 800179a:	4013      	ands	r3, r2
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d21e      	bcs.n	80017ea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017be:	f7ff f959 	bl	8000a74 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	e009      	b.n	80017dc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff f954 	bl	8000a74 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	4a28      	ldr	r2, [pc, #160]	; (8001874 <HAL_RCC_ClockConfig+0x274>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e044      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_ClockConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d1ee      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d009      	beq.n	8001808 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x27c>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001804:	430a      	orrs	r2, r1
 8001806:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2208      	movs	r2, #8
 800180e:	4013      	ands	r3, r2
 8001810:	d00a      	beq.n	8001828 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <HAL_RCC_ClockConfig+0x280>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	00da      	lsls	r2, r3, #3
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001828:	f000 f832 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800182c:	0001      	movs	r1, r0
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_ClockConfig+0x278>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	220f      	movs	r2, #15
 8001836:	4013      	ands	r3, r2
 8001838:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x284>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	000a      	movs	r2, r1
 800183e:	40da      	lsrs	r2, r3
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_RCC_ClockConfig+0x288>)
 8001842:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_ClockConfig+0x28c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	250b      	movs	r5, #11
 800184a:	197c      	adds	r4, r7, r5
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff f8cb 	bl	80009e8 <HAL_InitTick>
 8001852:	0003      	movs	r3, r0
 8001854:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001856:	197b      	adds	r3, r7, r5
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800185e:	197b      	adds	r3, r7, r5
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	e000      	b.n	8001866 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bdb0      	pop	{r4, r5, r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40022000 	.word	0x40022000
 8001874:	00001388 	.word	0x00001388
 8001878:	40021000 	.word	0x40021000
 800187c:	fffff8ff 	.word	0xfffff8ff
 8001880:	ffffc7ff 	.word	0xffffc7ff
 8001884:	08002fe4 	.word	0x08002fe4
 8001888:	200003e8 	.word	0x200003e8
 800188c:	200003ec 	.word	0x200003ec

08001890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001896:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	230c      	movs	r3, #12
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d014      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x40>
 80018a6:	d900      	bls.n	80018aa <HAL_RCC_GetSysClockFreq+0x1a>
 80018a8:	e07b      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x112>
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d002      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x24>
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d00b      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x3a>
 80018b2:	e076      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2210      	movs	r2, #16
 80018ba:	4013      	ands	r3, r2
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018be:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_GetSysClockFreq+0x13c>)
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018c2:	e07c      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x140>)
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c8:	e079      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x144>)
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ce:	e076      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d2:	0c9a      	lsrs	r2, r3, #18
 80018d4:	230f      	movs	r3, #15
 80018d6:	401a      	ands	r2, r3
 80018d8:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x148>)
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	0d9a      	lsrs	r2, r3, #22
 80018e2:	2303      	movs	r3, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	3301      	adds	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	4013      	ands	r3, r2
 80018f4:	d01a      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001900:	2300      	movs	r3, #0
 8001902:	69b8      	ldr	r0, [r7, #24]
 8001904:	69f9      	ldr	r1, [r7, #28]
 8001906:	f7fe fcb5 	bl	8000274 <__aeabi_lmul>
 800190a:	0002      	movs	r2, r0
 800190c:	000b      	movs	r3, r1
 800190e:	0010      	movs	r0, r2
 8001910:	0019      	movs	r1, r3
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f7fe fc89 	bl	8000234 <__aeabi_uldivmod>
 8001922:	0002      	movs	r2, r0
 8001924:	000b      	movs	r3, r1
 8001926:	0013      	movs	r3, r2
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
 800192a:	e037      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x138>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2210      	movs	r2, #16
 8001932:	4013      	ands	r3, r2
 8001934:	d01a      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001940:	2300      	movs	r3, #0
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	f7fe fc95 	bl	8000274 <__aeabi_lmul>
 800194a:	0002      	movs	r2, r0
 800194c:	000b      	movs	r3, r1
 800194e:	0010      	movs	r0, r2
 8001950:	0019      	movs	r1, r3
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f7fe fc69 	bl	8000234 <__aeabi_uldivmod>
 8001962:	0002      	movs	r2, r0
 8001964:	000b      	movs	r3, r1
 8001966:	0013      	movs	r3, r2
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
 800196a:	e017      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	0018      	movs	r0, r3
 8001970:	2300      	movs	r3, #0
 8001972:	0019      	movs	r1, r3
 8001974:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001976:	2300      	movs	r3, #0
 8001978:	f7fe fc7c 	bl	8000274 <__aeabi_lmul>
 800197c:	0002      	movs	r2, r0
 800197e:	000b      	movs	r3, r1
 8001980:	0010      	movs	r0, r2
 8001982:	0019      	movs	r1, r3
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	001c      	movs	r4, r3
 8001988:	2300      	movs	r3, #0
 800198a:	001d      	movs	r5, r3
 800198c:	0022      	movs	r2, r4
 800198e:	002b      	movs	r3, r5
 8001990:	f7fe fc50 	bl	8000234 <__aeabi_uldivmod>
 8001994:	0002      	movs	r2, r0
 8001996:	000b      	movs	r3, r1
 8001998:	0013      	movs	r3, r2
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019a0:	e00d      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	0b5b      	lsrs	r3, r3, #13
 80019a8:	2207      	movs	r2, #7
 80019aa:	4013      	ands	r3, r2
 80019ac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	3301      	adds	r3, #1
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0212      	lsls	r2, r2, #8
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019bc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b00e      	add	sp, #56	; 0x38
 80019c6:	bdb0      	pop	{r4, r5, r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	003d0900 	.word	0x003d0900
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	08002ffc 	.word	0x08002ffc

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <HAL_RCC_GetHCLKFreq+0x10>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	200003e8 	.word	0x200003e8

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f4:	f7ff fff2 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019f8:	0001      	movs	r1, r0
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	2207      	movs	r2, #7
 8001a02:	4013      	ands	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	40d9      	lsrs	r1, r3
 8001a0a:	000b      	movs	r3, r1
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000
 8001a18:	08002ff4 	.word	0x08002ff4

08001a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a20:	f7ff ffdc 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 8001a24:	0001      	movs	r1, r0
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	0adb      	lsrs	r3, r3, #11
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	4013      	ands	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	40d9      	lsrs	r1, r3
 8001a36:	000b      	movs	r3, r1
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08002ff4 	.word	0x08002ff4

08001a48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a50:	2017      	movs	r0, #23
 8001a52:	183b      	adds	r3, r7, r0
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001a62:	e0c2      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d109      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a70:	4b7e      	ldr	r3, [pc, #504]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a74:	4b7d      	ldr	r3, [pc, #500]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	0549      	lsls	r1, r1, #21
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a7e:	183b      	adds	r3, r7, r0
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d11a      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a90:	4b77      	ldr	r3, [pc, #476]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	0049      	lsls	r1, r1, #1
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe ffe9 	bl	8000a74 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	e008      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa8:	f7fe ffe4 	bl	8000a74 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0d4      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ac6:	4b69      	ldr	r3, [pc, #420]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	23c0      	movs	r3, #192	; 0xc0
 8001acc:	039b      	lsls	r3, r3, #14
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	039b      	lsls	r3, r3, #14
 8001ada:	4013      	ands	r3, r2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d013      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	23c0      	movs	r3, #192	; 0xc0
 8001ae8:	029b      	lsls	r3, r3, #10
 8001aea:	401a      	ands	r2, r3
 8001aec:	23c0      	movs	r3, #192	; 0xc0
 8001aee:	029b      	lsls	r3, r3, #10
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d10a      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001af4:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	401a      	ands	r2, r3
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	029b      	lsls	r3, r3, #10
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d101      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0ac      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b0a:	4b58      	ldr	r3, [pc, #352]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	4013      	ands	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d03b      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	23c0      	movs	r3, #192	; 0xc0
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	4013      	ands	r3, r2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d033      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2220      	movs	r2, #32
 8001b32:	4013      	ands	r3, r2
 8001b34:	d02e      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b36:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3a:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b44:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0309      	lsls	r1, r1, #12
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b54:	4948      	ldr	r1, [pc, #288]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	d014      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7fe ff83 	bl	8000a74 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b72:	e009      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7fe ff7e 	bl	8000a74 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	4a3f      	ldr	r2, [pc, #252]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e06d      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4013      	ands	r3, r2
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	23c0      	movs	r3, #192	; 0xc0
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a35      	ldr	r2, [pc, #212]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	23c0      	movs	r3, #192	; 0xc0
 8001bb6:	039b      	lsls	r3, r3, #14
 8001bb8:	401a      	ands	r2, r3
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bc2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	401a      	ands	r2, r3
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bd4:	2317      	movs	r3, #23
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001be4:	4927      	ldr	r1, [pc, #156]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	4393      	bics	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d009      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b006      	add	sp, #24
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40007000 	.word	0x40007000
 8001c74:	fffcffff 	.word	0xfffcffff
 8001c78:	fff7ffff 	.word	0xfff7ffff
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	ffcfffff 	.word	0xffcfffff
 8001c84:	efffffff 	.word	0xefffffff
 8001c88:	fffff3ff 	.word	0xfffff3ff
 8001c8c:	ffffcfff 	.word	0xffffcfff
 8001c90:	fff3ffff 	.word	0xfff3ffff

08001c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e044      	b.n	8001d30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2274      	movs	r2, #116	; 0x74
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7fe fd77 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2224      	movs	r2, #36	; 0x24
 8001cc2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 f8d8 	bl	8001e8c <UART_SetConfig>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e024      	b.n	8001d30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 fb2d 	bl	8002350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	490d      	ldr	r1, [pc, #52]	; (8001d38 <HAL_UART_Init+0xa4>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	212a      	movs	r1, #42	; 0x2a
 8001d12:	438a      	bics	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 fbc5 	bl	80024b8 <UART_CheckIdleState>
 8001d2e:	0003      	movs	r3, r0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	ffffb7ff 	.word	0xffffb7ff

08001d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d000      	beq.n	8001d56 <HAL_UART_Transmit+0x1a>
 8001d54:	e095      	b.n	8001e82 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_UART_Transmit+0x28>
 8001d5c:	1dbb      	adds	r3, r7, #6
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e08d      	b.n	8001e84 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d109      	bne.n	8001d88 <HAL_UART_Transmit+0x4c>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d001      	beq.n	8001d88 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e07d      	b.n	8001e84 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2274      	movs	r2, #116	; 0x74
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_UART_Transmit+0x5a>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e076      	b.n	8001e84 <HAL_UART_Transmit+0x148>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2274      	movs	r2, #116	; 0x74
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	2100      	movs	r1, #0
 8001da4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2221      	movs	r2, #33	; 0x21
 8001daa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dac:	f7fe fe62 	bl	8000a74 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1dba      	adds	r2, r7, #6
 8001db8:	2150      	movs	r1, #80	; 0x50
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1dba      	adds	r2, r7, #6
 8001dc2:	2152      	movs	r1, #82	; 0x52
 8001dc4:	8812      	ldrh	r2, [r2, #0]
 8001dc6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	015b      	lsls	r3, r3, #5
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d108      	bne.n	8001de6 <HAL_UART_Transmit+0xaa>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d104      	bne.n	8001de6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	e003      	b.n	8001dee <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2274      	movs	r2, #116	; 0x74
 8001df2:	2100      	movs	r1, #0
 8001df4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001df6:	e02c      	b.n	8001e52 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	0013      	movs	r3, r2
 8001e02:	2200      	movs	r2, #0
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	f000 fb9f 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e038      	b.n	8001e84 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	05d2      	lsls	r2, r2, #23
 8001e24:	0dd2      	lsrs	r2, r2, #23
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	e007      	b.n	8001e40 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2252      	movs	r2, #82	; 0x52
 8001e44:	5a9b      	ldrh	r3, [r3, r2]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2252      	movs	r2, #82	; 0x52
 8001e50:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2252      	movs	r2, #82	; 0x52
 8001e56:	5a9b      	ldrh	r3, [r3, r2]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1cc      	bne.n	8001df8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	0013      	movs	r3, r2
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	f000 fb6c 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8001e70:	1e03      	subs	r3, r0, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e005      	b.n	8001e84 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
  }
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b008      	add	sp, #32
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e94:	231a      	movs	r3, #26
 8001e96:	2218      	movs	r2, #24
 8001e98:	4694      	mov	ip, r2
 8001e9a:	44bc      	add	ip, r7
 8001e9c:	4463      	add	r3, ip
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4abc      	ldr	r2, [pc, #752]	; (80021b4 <UART_SetConfig+0x328>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4ab8      	ldr	r2, [pc, #736]	; (80021b8 <UART_SetConfig+0x32c>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4ab2      	ldr	r2, [pc, #712]	; (80021bc <UART_SetConfig+0x330>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d004      	beq.n	8001f02 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001efe:	4313      	orrs	r3, r2
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4aad      	ldr	r2, [pc, #692]	; (80021c0 <UART_SetConfig+0x334>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4aa9      	ldr	r2, [pc, #676]	; (80021c4 <UART_SetConfig+0x338>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d136      	bne.n	8001f90 <UART_SetConfig+0x104>
 8001f22:	4ba9      	ldr	r3, [pc, #676]	; (80021c8 <UART_SetConfig+0x33c>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	220c      	movs	r2, #12
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d020      	beq.n	8001f70 <UART_SetConfig+0xe4>
 8001f2e:	d827      	bhi.n	8001f80 <UART_SetConfig+0xf4>
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d00d      	beq.n	8001f50 <UART_SetConfig+0xc4>
 8001f34:	d824      	bhi.n	8001f80 <UART_SetConfig+0xf4>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <UART_SetConfig+0xb4>
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d010      	beq.n	8001f60 <UART_SetConfig+0xd4>
 8001f3e:	e01f      	b.n	8001f80 <UART_SetConfig+0xf4>
 8001f40:	231b      	movs	r3, #27
 8001f42:	2218      	movs	r2, #24
 8001f44:	4694      	mov	ip, r2
 8001f46:	44bc      	add	ip, r7
 8001f48:	4463      	add	r3, ip
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e06f      	b.n	8002030 <UART_SetConfig+0x1a4>
 8001f50:	231b      	movs	r3, #27
 8001f52:	2218      	movs	r2, #24
 8001f54:	4694      	mov	ip, r2
 8001f56:	44bc      	add	ip, r7
 8001f58:	4463      	add	r3, ip
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e067      	b.n	8002030 <UART_SetConfig+0x1a4>
 8001f60:	231b      	movs	r3, #27
 8001f62:	2218      	movs	r2, #24
 8001f64:	4694      	mov	ip, r2
 8001f66:	44bc      	add	ip, r7
 8001f68:	4463      	add	r3, ip
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e05f      	b.n	8002030 <UART_SetConfig+0x1a4>
 8001f70:	231b      	movs	r3, #27
 8001f72:	2218      	movs	r2, #24
 8001f74:	4694      	mov	ip, r2
 8001f76:	44bc      	add	ip, r7
 8001f78:	4463      	add	r3, ip
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e057      	b.n	8002030 <UART_SetConfig+0x1a4>
 8001f80:	231b      	movs	r3, #27
 8001f82:	2218      	movs	r2, #24
 8001f84:	4694      	mov	ip, r2
 8001f86:	44bc      	add	ip, r7
 8001f88:	4463      	add	r3, ip
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e04f      	b.n	8002030 <UART_SetConfig+0x1a4>
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a89      	ldr	r2, [pc, #548]	; (80021bc <UART_SetConfig+0x330>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d143      	bne.n	8002022 <UART_SetConfig+0x196>
 8001f9a:	4b8b      	ldr	r3, [pc, #556]	; (80021c8 <UART_SetConfig+0x33c>)
 8001f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	22c0      	movs	r2, #192	; 0xc0
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02a      	beq.n	8002002 <UART_SetConfig+0x176>
 8001fac:	22c0      	movs	r2, #192	; 0xc0
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d82e      	bhi.n	8002012 <UART_SetConfig+0x186>
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d012      	beq.n	8001fe2 <UART_SetConfig+0x156>
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d826      	bhi.n	8002012 <UART_SetConfig+0x186>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <UART_SetConfig+0x146>
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	00d2      	lsls	r2, r2, #3
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d010      	beq.n	8001ff2 <UART_SetConfig+0x166>
 8001fd0:	e01f      	b.n	8002012 <UART_SetConfig+0x186>
 8001fd2:	231b      	movs	r3, #27
 8001fd4:	2218      	movs	r2, #24
 8001fd6:	4694      	mov	ip, r2
 8001fd8:	44bc      	add	ip, r7
 8001fda:	4463      	add	r3, ip
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e026      	b.n	8002030 <UART_SetConfig+0x1a4>
 8001fe2:	231b      	movs	r3, #27
 8001fe4:	2218      	movs	r2, #24
 8001fe6:	4694      	mov	ip, r2
 8001fe8:	44bc      	add	ip, r7
 8001fea:	4463      	add	r3, ip
 8001fec:	2202      	movs	r2, #2
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e01e      	b.n	8002030 <UART_SetConfig+0x1a4>
 8001ff2:	231b      	movs	r3, #27
 8001ff4:	2218      	movs	r2, #24
 8001ff6:	4694      	mov	ip, r2
 8001ff8:	44bc      	add	ip, r7
 8001ffa:	4463      	add	r3, ip
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e016      	b.n	8002030 <UART_SetConfig+0x1a4>
 8002002:	231b      	movs	r3, #27
 8002004:	2218      	movs	r2, #24
 8002006:	4694      	mov	ip, r2
 8002008:	44bc      	add	ip, r7
 800200a:	4463      	add	r3, ip
 800200c:	2208      	movs	r2, #8
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e00e      	b.n	8002030 <UART_SetConfig+0x1a4>
 8002012:	231b      	movs	r3, #27
 8002014:	2218      	movs	r2, #24
 8002016:	4694      	mov	ip, r2
 8002018:	44bc      	add	ip, r7
 800201a:	4463      	add	r3, ip
 800201c:	2210      	movs	r2, #16
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e006      	b.n	8002030 <UART_SetConfig+0x1a4>
 8002022:	231b      	movs	r3, #27
 8002024:	2218      	movs	r2, #24
 8002026:	4694      	mov	ip, r2
 8002028:	44bc      	add	ip, r7
 800202a:	4463      	add	r3, ip
 800202c:	2210      	movs	r2, #16
 800202e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a61      	ldr	r2, [pc, #388]	; (80021bc <UART_SetConfig+0x330>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d000      	beq.n	800203c <UART_SetConfig+0x1b0>
 800203a:	e088      	b.n	800214e <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800203c:	231b      	movs	r3, #27
 800203e:	2218      	movs	r2, #24
 8002040:	4694      	mov	ip, r2
 8002042:	44bc      	add	ip, r7
 8002044:	4463      	add	r3, ip
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d01d      	beq.n	8002088 <UART_SetConfig+0x1fc>
 800204c:	dc20      	bgt.n	8002090 <UART_SetConfig+0x204>
 800204e:	2b04      	cmp	r3, #4
 8002050:	d015      	beq.n	800207e <UART_SetConfig+0x1f2>
 8002052:	dc1d      	bgt.n	8002090 <UART_SetConfig+0x204>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <UART_SetConfig+0x1d2>
 8002058:	2b02      	cmp	r3, #2
 800205a:	d005      	beq.n	8002068 <UART_SetConfig+0x1dc>
 800205c:	e018      	b.n	8002090 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800205e:	f7ff fcc7 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8002062:	0003      	movs	r3, r0
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002066:	e01d      	b.n	80020a4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <UART_SetConfig+0x33c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2210      	movs	r2, #16
 800206e:	4013      	ands	r3, r2
 8002070:	d002      	beq.n	8002078 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002072:	4b56      	ldr	r3, [pc, #344]	; (80021cc <UART_SetConfig+0x340>)
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002076:	e015      	b.n	80020a4 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <UART_SetConfig+0x344>)
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800207c:	e012      	b.n	80020a4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800207e:	f7ff fc07 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 8002082:	0003      	movs	r3, r0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002086:	e00d      	b.n	80020a4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800208e:	e009      	b.n	80020a4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002094:	231a      	movs	r3, #26
 8002096:	2218      	movs	r2, #24
 8002098:	4694      	mov	ip, r2
 800209a:	44bc      	add	ip, r7
 800209c:	4463      	add	r3, ip
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
        break;
 80020a2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d100      	bne.n	80020ac <UART_SetConfig+0x220>
 80020aa:	e139      	b.n	8002320 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	0013      	movs	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	189b      	adds	r3, r3, r2
 80020b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d305      	bcc.n	80020c8 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80020c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d907      	bls.n	80020d8 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80020c8:	231a      	movs	r3, #26
 80020ca:	2218      	movs	r2, #24
 80020cc:	4694      	mov	ip, r2
 80020ce:	44bc      	add	ip, r7
 80020d0:	4463      	add	r3, ip
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e123      	b.n	8002320 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	000b      	movs	r3, r1
 80020e6:	0e1b      	lsrs	r3, r3, #24
 80020e8:	0010      	movs	r0, r2
 80020ea:	0205      	lsls	r5, r0, #8
 80020ec:	431d      	orrs	r5, r3
 80020ee:	000b      	movs	r3, r1
 80020f0:	021c      	lsls	r4, r3, #8
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68b8      	ldr	r0, [r7, #8]
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	1900      	adds	r0, r0, r4
 8002104:	4169      	adcs	r1, r5
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f7fe f88e 	bl	8000234 <__aeabi_uldivmod>
 8002118:	0002      	movs	r2, r0
 800211a:	000b      	movs	r3, r1
 800211c:	0013      	movs	r3, r2
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002122:	23c0      	movs	r3, #192	; 0xc0
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	429a      	cmp	r2, r3
 8002128:	d309      	bcc.n	800213e <UART_SetConfig+0x2b2>
 800212a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	035b      	lsls	r3, r3, #13
 8002130:	429a      	cmp	r2, r3
 8002132:	d204      	bcs.n	800213e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e0f0      	b.n	8002320 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800213e:	231a      	movs	r3, #26
 8002140:	2218      	movs	r2, #24
 8002142:	4694      	mov	ip, r2
 8002144:	44bc      	add	ip, r7
 8002146:	4463      	add	r3, ip
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e0e8      	b.n	8002320 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	429a      	cmp	r2, r3
 8002158:	d000      	beq.n	800215c <UART_SetConfig+0x2d0>
 800215a:	e087      	b.n	800226c <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 800215c:	231b      	movs	r3, #27
 800215e:	2218      	movs	r2, #24
 8002160:	4694      	mov	ip, r2
 8002162:	44bc      	add	ip, r7
 8002164:	4463      	add	r3, ip
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d835      	bhi.n	80021d8 <UART_SetConfig+0x34c>
 800216c:	009a      	lsls	r2, r3, #2
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <UART_SetConfig+0x348>)
 8002170:	18d3      	adds	r3, r2, r3
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002176:	f7ff fc3b 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 800217a:	0003      	movs	r3, r0
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800217e:	e035      	b.n	80021ec <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002180:	f7ff fc4c 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8002184:	0003      	movs	r3, r0
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002188:	e030      	b.n	80021ec <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <UART_SetConfig+0x33c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2210      	movs	r2, #16
 8002190:	4013      	ands	r3, r2
 8002192:	d002      	beq.n	800219a <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <UART_SetConfig+0x340>)
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002198:	e028      	b.n	80021ec <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <UART_SetConfig+0x344>)
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800219e:	e025      	b.n	80021ec <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021a0:	f7ff fb76 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 80021a4:	0003      	movs	r3, r0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021a8:	e020      	b.n	80021ec <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021b0:	e01c      	b.n	80021ec <UART_SetConfig+0x360>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	efff69f3 	.word	0xefff69f3
 80021b8:	ffffcfff 	.word	0xffffcfff
 80021bc:	40004800 	.word	0x40004800
 80021c0:	fffff4ff 	.word	0xfffff4ff
 80021c4:	40004400 	.word	0x40004400
 80021c8:	40021000 	.word	0x40021000
 80021cc:	003d0900 	.word	0x003d0900
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	08003008 	.word	0x08003008
      default:
        pclk = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80021dc:	231a      	movs	r3, #26
 80021de:	2218      	movs	r2, #24
 80021e0:	4694      	mov	ip, r2
 80021e2:	44bc      	add	ip, r7
 80021e4:	4463      	add	r3, ip
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
        break;
 80021ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d100      	bne.n	80021f4 <UART_SetConfig+0x368>
 80021f2:	e095      	b.n	8002320 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	005a      	lsls	r2, r3, #1
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	18d2      	adds	r2, r2, r3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	0019      	movs	r1, r3
 8002206:	0010      	movs	r0, r2
 8002208:	f7fd ff88 	bl	800011c <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	b29b      	uxth	r3, r3
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d921      	bls.n	800225c <UART_SetConfig+0x3d0>
 8002218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	025b      	lsls	r3, r3, #9
 800221e:	429a      	cmp	r2, r3
 8002220:	d21c      	bcs.n	800225c <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	b29a      	uxth	r2, r3
 8002226:	200e      	movs	r0, #14
 8002228:	2418      	movs	r4, #24
 800222a:	193b      	adds	r3, r7, r4
 800222c:	181b      	adds	r3, r3, r0
 800222e:	210f      	movs	r1, #15
 8002230:	438a      	bics	r2, r1
 8002232:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	b29b      	uxth	r3, r3
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	b299      	uxth	r1, r3
 8002240:	193b      	adds	r3, r7, r4
 8002242:	181b      	adds	r3, r3, r0
 8002244:	193a      	adds	r2, r7, r4
 8002246:	1812      	adds	r2, r2, r0
 8002248:	8812      	ldrh	r2, [r2, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	193a      	adds	r2, r7, r4
 8002254:	1812      	adds	r2, r2, r0
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	e061      	b.n	8002320 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800225c:	231a      	movs	r3, #26
 800225e:	2218      	movs	r2, #24
 8002260:	4694      	mov	ip, r2
 8002262:	44bc      	add	ip, r7
 8002264:	4463      	add	r3, ip
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e059      	b.n	8002320 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800226c:	231b      	movs	r3, #27
 800226e:	2218      	movs	r2, #24
 8002270:	4694      	mov	ip, r2
 8002272:	44bc      	add	ip, r7
 8002274:	4463      	add	r3, ip
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d822      	bhi.n	80022c2 <UART_SetConfig+0x436>
 800227c:	009a      	lsls	r2, r3, #2
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <UART_SetConfig+0x4b4>)
 8002280:	18d3      	adds	r3, r2, r3
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002286:	f7ff fbb3 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 800228a:	0003      	movs	r3, r0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800228e:	e022      	b.n	80022d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002290:	f7ff fbc4 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8002294:	0003      	movs	r3, r0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002298:	e01d      	b.n	80022d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <UART_SetConfig+0x4b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2210      	movs	r2, #16
 80022a0:	4013      	ands	r3, r2
 80022a2:	d002      	beq.n	80022aa <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <UART_SetConfig+0x4bc>)
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022a8:	e015      	b.n	80022d6 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <UART_SetConfig+0x4c0>)
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ae:	e012      	b.n	80022d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022b0:	f7ff faee 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 80022b4:	0003      	movs	r3, r0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022b8:	e00d      	b.n	80022d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022c0:	e009      	b.n	80022d6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022c6:	231a      	movs	r3, #26
 80022c8:	2218      	movs	r2, #24
 80022ca:	4694      	mov	ip, r2
 80022cc:	44bc      	add	ip, r7
 80022ce:	4463      	add	r3, ip
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
        break;
 80022d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d021      	beq.n	8002320 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	085a      	lsrs	r2, r3, #1
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	18d2      	adds	r2, r2, r3
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0019      	movs	r1, r3
 80022ec:	0010      	movs	r0, r2
 80022ee:	f7fd ff15 	bl	800011c <__udivsi3>
 80022f2:	0003      	movs	r3, r0
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	d909      	bls.n	8002312 <UART_SetConfig+0x486>
 80022fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	429a      	cmp	r2, r3
 8002306:	d204      	bcs.n	8002312 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800230e:	60da      	str	r2, [r3, #12]
 8002310:	e006      	b.n	8002320 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002312:	231a      	movs	r3, #26
 8002314:	2218      	movs	r2, #24
 8002316:	4694      	mov	ip, r2
 8002318:	44bc      	add	ip, r7
 800231a:	4463      	add	r3, ip
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2200      	movs	r2, #0
 8002324:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2200      	movs	r2, #0
 800232a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800232c:	231a      	movs	r3, #26
 800232e:	2218      	movs	r2, #24
 8002330:	4694      	mov	ip, r2
 8002332:	44bc      	add	ip, r7
 8002334:	4463      	add	r3, ip
 8002336:	781b      	ldrb	r3, [r3, #0]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b00e      	add	sp, #56	; 0x38
 800233e:	bdb0      	pop	{r4, r5, r7, pc}
 8002340:	0800302c 	.word	0x0800302c
 8002344:	40021000 	.word	0x40021000
 8002348:	003d0900 	.word	0x003d0900
 800234c:	00f42400 	.word	0x00f42400

08002350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	2201      	movs	r2, #1
 800235e:	4013      	ands	r3, r2
 8002360:	d00b      	beq.n	800237a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a4a      	ldr	r2, [pc, #296]	; (8002494 <UART_AdvFeatureConfig+0x144>)
 800236a:	4013      	ands	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	d00b      	beq.n	800239c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a43      	ldr	r2, [pc, #268]	; (8002498 <UART_AdvFeatureConfig+0x148>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	d00b      	beq.n	80023be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a3b      	ldr	r2, [pc, #236]	; (800249c <UART_AdvFeatureConfig+0x14c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2208      	movs	r2, #8
 80023c4:	4013      	ands	r3, r2
 80023c6:	d00b      	beq.n	80023e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a34      	ldr	r2, [pc, #208]	; (80024a0 <UART_AdvFeatureConfig+0x150>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2210      	movs	r2, #16
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00b      	beq.n	8002402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <UART_AdvFeatureConfig+0x154>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2220      	movs	r2, #32
 8002408:	4013      	ands	r3, r2
 800240a:	d00b      	beq.n	8002424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <UART_AdvFeatureConfig+0x158>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2240      	movs	r2, #64	; 0x40
 800242a:	4013      	ands	r3, r2
 800242c:	d01d      	beq.n	800246a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <UART_AdvFeatureConfig+0x15c>)
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	035b      	lsls	r3, r3, #13
 800244e:	429a      	cmp	r2, r3
 8002450:	d10b      	bne.n	800246a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <UART_AdvFeatureConfig+0x160>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	4013      	ands	r3, r2
 8002472:	d00b      	beq.n	800248c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <UART_AdvFeatureConfig+0x164>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
  }
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}
 8002494:	fffdffff 	.word	0xfffdffff
 8002498:	fffeffff 	.word	0xfffeffff
 800249c:	fffbffff 	.word	0xfffbffff
 80024a0:	ffff7fff 	.word	0xffff7fff
 80024a4:	ffffefff 	.word	0xffffefff
 80024a8:	ffffdfff 	.word	0xffffdfff
 80024ac:	ffefffff 	.word	0xffefffff
 80024b0:	ff9fffff 	.word	0xff9fffff
 80024b4:	fff7ffff 	.word	0xfff7ffff

080024b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2100      	movs	r1, #0
 80024c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024c8:	f7fe fad4 	bl	8000a74 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2208      	movs	r2, #8
 80024d8:	4013      	ands	r3, r2
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d10c      	bne.n	80024f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	0391      	lsls	r1, r2, #14
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <UART_CheckIdleState+0x8c>)
 80024e8:	9200      	str	r2, [sp, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f000 f82c 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 80024f0:	1e03      	subs	r3, r0, #0
 80024f2:	d001      	beq.n	80024f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e021      	b.n	800253c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d10c      	bne.n	8002520 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	03d1      	lsls	r1, r2, #15
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <UART_CheckIdleState+0x8c>)
 8002510:	9200      	str	r2, [sp, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	f000 f818 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d001      	beq.n	8002520 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e00d      	b.n	800253c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2274      	movs	r2, #116	; 0x74
 8002536:	2100      	movs	r1, #0
 8002538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	01ffffff 	.word	0x01ffffff

08002548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b094      	sub	sp, #80	; 0x50
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002558:	e0a3      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800255c:	3301      	adds	r3, #1
 800255e:	d100      	bne.n	8002562 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002560:	e09f      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7fe fa87 	bl	8000a74 <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <UART_WaitOnFlagUntilTimeout+0x30>
 8002572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002574:	2b00      	cmp	r3, #0
 8002576:	d13d      	bne.n	80025f4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002578:	f3ef 8310 	mrs	r3, PRIMASK
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002580:	647b      	str	r3, [r7, #68]	; 0x44
 8002582:	2301      	movs	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	f383 8810 	msr	PRIMASK, r3
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	494c      	ldr	r1, [pc, #304]	; (80026cc <UART_WaitOnFlagUntilTimeout+0x184>)
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	f383 8810 	msr	PRIMASK, r3
}
 80025a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025aa:	f3ef 8310 	mrs	r3, PRIMASK
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b2:	643b      	str	r3, [r7, #64]	; 0x40
 80025b4:	2301      	movs	r3, #1
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	f383 8810 	msr	PRIMASK, r3
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d6:	f383 8810 	msr	PRIMASK, r3
}
 80025da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2274      	movs	r2, #116	; 0x74
 80025ec:	2100      	movs	r1, #0
 80025ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e067      	b.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2204      	movs	r2, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	d050      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	401a      	ands	r2, r3
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	429a      	cmp	r2, r3
 8002612:	d146      	bne.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	613b      	str	r3, [r7, #16]
  return(result);
 8002624:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002628:	2301      	movs	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f383 8810 	msr	PRIMASK, r3
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4923      	ldr	r1, [pc, #140]	; (80026cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002646:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8310 	mrs	r3, PRIMASK
 8002654:	61fb      	str	r3, [r7, #28]
  return(result);
 8002656:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002658:	64bb      	str	r3, [r7, #72]	; 0x48
 800265a:	2301      	movs	r3, #1
 800265c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	f383 8810 	msr	PRIMASK, r3
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	438a      	bics	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	f383 8810 	msr	PRIMASK, r3
}
 8002680:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	2120      	movs	r1, #32
 8002694:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2274      	movs	r2, #116	; 0x74
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e010      	b.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	425a      	negs	r2, r3
 80026b2:	4153      	adcs	r3, r2
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	001a      	movs	r2, r3
 80026b8:	1dfb      	adds	r3, r7, #7
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d100      	bne.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80026c0:	e74b      	b.n	800255a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b014      	add	sp, #80	; 0x50
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	fffffe5f 	.word	0xfffffe5f

080026d0 <__errno>:
 80026d0:	4b01      	ldr	r3, [pc, #4]	; (80026d8 <__errno+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	4770      	bx	lr
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	200003f4 	.word	0x200003f4

080026dc <__libc_init_array>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2600      	movs	r6, #0
 80026e0:	4d0c      	ldr	r5, [pc, #48]	; (8002714 <__libc_init_array+0x38>)
 80026e2:	4c0d      	ldr	r4, [pc, #52]	; (8002718 <__libc_init_array+0x3c>)
 80026e4:	1b64      	subs	r4, r4, r5
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	42a6      	cmp	r6, r4
 80026ea:	d109      	bne.n	8002700 <__libc_init_array+0x24>
 80026ec:	2600      	movs	r6, #0
 80026ee:	f000 fc47 	bl	8002f80 <_init>
 80026f2:	4d0a      	ldr	r5, [pc, #40]	; (800271c <__libc_init_array+0x40>)
 80026f4:	4c0a      	ldr	r4, [pc, #40]	; (8002720 <__libc_init_array+0x44>)
 80026f6:	1b64      	subs	r4, r4, r5
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	42a6      	cmp	r6, r4
 80026fc:	d105      	bne.n	800270a <__libc_init_array+0x2e>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	00b3      	lsls	r3, r6, #2
 8002702:	58eb      	ldr	r3, [r5, r3]
 8002704:	4798      	blx	r3
 8002706:	3601      	adds	r6, #1
 8002708:	e7ee      	b.n	80026e8 <__libc_init_array+0xc>
 800270a:	00b3      	lsls	r3, r6, #2
 800270c:	58eb      	ldr	r3, [r5, r3]
 800270e:	4798      	blx	r3
 8002710:	3601      	adds	r6, #1
 8002712:	e7f2      	b.n	80026fa <__libc_init_array+0x1e>
 8002714:	0800308c 	.word	0x0800308c
 8002718:	0800308c 	.word	0x0800308c
 800271c:	0800308c 	.word	0x0800308c
 8002720:	08003090 	.word	0x08003090

08002724 <memset>:
 8002724:	0003      	movs	r3, r0
 8002726:	1882      	adds	r2, r0, r2
 8002728:	4293      	cmp	r3, r2
 800272a:	d100      	bne.n	800272e <memset+0xa>
 800272c:	4770      	bx	lr
 800272e:	7019      	strb	r1, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	e7f9      	b.n	8002728 <memset+0x4>

08002734 <siprintf>:
 8002734:	b40e      	push	{r1, r2, r3}
 8002736:	b500      	push	{lr}
 8002738:	490b      	ldr	r1, [pc, #44]	; (8002768 <siprintf+0x34>)
 800273a:	b09c      	sub	sp, #112	; 0x70
 800273c:	ab1d      	add	r3, sp, #116	; 0x74
 800273e:	9002      	str	r0, [sp, #8]
 8002740:	9006      	str	r0, [sp, #24]
 8002742:	9107      	str	r1, [sp, #28]
 8002744:	9104      	str	r1, [sp, #16]
 8002746:	4809      	ldr	r0, [pc, #36]	; (800276c <siprintf+0x38>)
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <siprintf+0x3c>)
 800274a:	cb04      	ldmia	r3!, {r2}
 800274c:	9105      	str	r1, [sp, #20]
 800274e:	6800      	ldr	r0, [r0, #0]
 8002750:	a902      	add	r1, sp, #8
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	f000 f870 	bl	8002838 <_svfiprintf_r>
 8002758:	2300      	movs	r3, #0
 800275a:	9a02      	ldr	r2, [sp, #8]
 800275c:	7013      	strb	r3, [r2, #0]
 800275e:	b01c      	add	sp, #112	; 0x70
 8002760:	bc08      	pop	{r3}
 8002762:	b003      	add	sp, #12
 8002764:	4718      	bx	r3
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	7fffffff 	.word	0x7fffffff
 800276c:	200003f4 	.word	0x200003f4
 8002770:	ffff0208 	.word	0xffff0208

08002774 <__ssputs_r>:
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002776:	688e      	ldr	r6, [r1, #8]
 8002778:	b085      	sub	sp, #20
 800277a:	0007      	movs	r7, r0
 800277c:	000c      	movs	r4, r1
 800277e:	9203      	str	r2, [sp, #12]
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	429e      	cmp	r6, r3
 8002784:	d83c      	bhi.n	8002800 <__ssputs_r+0x8c>
 8002786:	2390      	movs	r3, #144	; 0x90
 8002788:	898a      	ldrh	r2, [r1, #12]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	421a      	tst	r2, r3
 800278e:	d034      	beq.n	80027fa <__ssputs_r+0x86>
 8002790:	2503      	movs	r5, #3
 8002792:	6909      	ldr	r1, [r1, #16]
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	6963      	ldr	r3, [r4, #20]
 800279c:	9802      	ldr	r0, [sp, #8]
 800279e:	435d      	muls	r5, r3
 80027a0:	0feb      	lsrs	r3, r5, #31
 80027a2:	195d      	adds	r5, r3, r5
 80027a4:	9b01      	ldr	r3, [sp, #4]
 80027a6:	106d      	asrs	r5, r5, #1
 80027a8:	3301      	adds	r3, #1
 80027aa:	181b      	adds	r3, r3, r0
 80027ac:	42ab      	cmp	r3, r5
 80027ae:	d900      	bls.n	80027b2 <__ssputs_r+0x3e>
 80027b0:	001d      	movs	r5, r3
 80027b2:	0553      	lsls	r3, r2, #21
 80027b4:	d532      	bpl.n	800281c <__ssputs_r+0xa8>
 80027b6:	0029      	movs	r1, r5
 80027b8:	0038      	movs	r0, r7
 80027ba:	f000 fb31 	bl	8002e20 <_malloc_r>
 80027be:	1e06      	subs	r6, r0, #0
 80027c0:	d109      	bne.n	80027d6 <__ssputs_r+0x62>
 80027c2:	230c      	movs	r3, #12
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	2340      	movs	r3, #64	; 0x40
 80027c8:	2001      	movs	r0, #1
 80027ca:	89a2      	ldrh	r2, [r4, #12]
 80027cc:	4240      	negs	r0, r0
 80027ce:	4313      	orrs	r3, r2
 80027d0:	81a3      	strh	r3, [r4, #12]
 80027d2:	b005      	add	sp, #20
 80027d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d6:	9a02      	ldr	r2, [sp, #8]
 80027d8:	6921      	ldr	r1, [r4, #16]
 80027da:	f000 faba 	bl	8002d52 <memcpy>
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <__ssputs_r+0xc0>)
 80027e2:	401a      	ands	r2, r3
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	4313      	orrs	r3, r2
 80027e8:	81a3      	strh	r3, [r4, #12]
 80027ea:	9b02      	ldr	r3, [sp, #8]
 80027ec:	6126      	str	r6, [r4, #16]
 80027ee:	18f6      	adds	r6, r6, r3
 80027f0:	6026      	str	r6, [r4, #0]
 80027f2:	6165      	str	r5, [r4, #20]
 80027f4:	9e01      	ldr	r6, [sp, #4]
 80027f6:	1aed      	subs	r5, r5, r3
 80027f8:	60a5      	str	r5, [r4, #8]
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	429e      	cmp	r6, r3
 80027fe:	d900      	bls.n	8002802 <__ssputs_r+0x8e>
 8002800:	9e01      	ldr	r6, [sp, #4]
 8002802:	0032      	movs	r2, r6
 8002804:	9903      	ldr	r1, [sp, #12]
 8002806:	6820      	ldr	r0, [r4, #0]
 8002808:	f000 faac 	bl	8002d64 <memmove>
 800280c:	68a3      	ldr	r3, [r4, #8]
 800280e:	2000      	movs	r0, #0
 8002810:	1b9b      	subs	r3, r3, r6
 8002812:	60a3      	str	r3, [r4, #8]
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	199e      	adds	r6, r3, r6
 8002818:	6026      	str	r6, [r4, #0]
 800281a:	e7da      	b.n	80027d2 <__ssputs_r+0x5e>
 800281c:	002a      	movs	r2, r5
 800281e:	0038      	movs	r0, r7
 8002820:	f000 fb5c 	bl	8002edc <_realloc_r>
 8002824:	1e06      	subs	r6, r0, #0
 8002826:	d1e0      	bne.n	80027ea <__ssputs_r+0x76>
 8002828:	0038      	movs	r0, r7
 800282a:	6921      	ldr	r1, [r4, #16]
 800282c:	f000 faae 	bl	8002d8c <_free_r>
 8002830:	e7c7      	b.n	80027c2 <__ssputs_r+0x4e>
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	fffffb7f 	.word	0xfffffb7f

08002838 <_svfiprintf_r>:
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b0a1      	sub	sp, #132	; 0x84
 800283c:	9003      	str	r0, [sp, #12]
 800283e:	001d      	movs	r5, r3
 8002840:	898b      	ldrh	r3, [r1, #12]
 8002842:	000f      	movs	r7, r1
 8002844:	0016      	movs	r6, r2
 8002846:	061b      	lsls	r3, r3, #24
 8002848:	d511      	bpl.n	800286e <_svfiprintf_r+0x36>
 800284a:	690b      	ldr	r3, [r1, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10e      	bne.n	800286e <_svfiprintf_r+0x36>
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	f000 fae5 	bl	8002e20 <_malloc_r>
 8002856:	6038      	str	r0, [r7, #0]
 8002858:	6138      	str	r0, [r7, #16]
 800285a:	2800      	cmp	r0, #0
 800285c:	d105      	bne.n	800286a <_svfiprintf_r+0x32>
 800285e:	230c      	movs	r3, #12
 8002860:	9a03      	ldr	r2, [sp, #12]
 8002862:	3801      	subs	r0, #1
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	b021      	add	sp, #132	; 0x84
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286a:	2340      	movs	r3, #64	; 0x40
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	ac08      	add	r4, sp, #32
 8002872:	6163      	str	r3, [r4, #20]
 8002874:	3320      	adds	r3, #32
 8002876:	7663      	strb	r3, [r4, #25]
 8002878:	3310      	adds	r3, #16
 800287a:	76a3      	strb	r3, [r4, #26]
 800287c:	9507      	str	r5, [sp, #28]
 800287e:	0035      	movs	r5, r6
 8002880:	782b      	ldrb	r3, [r5, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <_svfiprintf_r+0x52>
 8002886:	2b25      	cmp	r3, #37	; 0x25
 8002888:	d147      	bne.n	800291a <_svfiprintf_r+0xe2>
 800288a:	1bab      	subs	r3, r5, r6
 800288c:	9305      	str	r3, [sp, #20]
 800288e:	42b5      	cmp	r5, r6
 8002890:	d00c      	beq.n	80028ac <_svfiprintf_r+0x74>
 8002892:	0032      	movs	r2, r6
 8002894:	0039      	movs	r1, r7
 8002896:	9803      	ldr	r0, [sp, #12]
 8002898:	f7ff ff6c 	bl	8002774 <__ssputs_r>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d100      	bne.n	80028a2 <_svfiprintf_r+0x6a>
 80028a0:	e0ae      	b.n	8002a00 <_svfiprintf_r+0x1c8>
 80028a2:	6962      	ldr	r2, [r4, #20]
 80028a4:	9b05      	ldr	r3, [sp, #20]
 80028a6:	4694      	mov	ip, r2
 80028a8:	4463      	add	r3, ip
 80028aa:	6163      	str	r3, [r4, #20]
 80028ac:	782b      	ldrb	r3, [r5, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d100      	bne.n	80028b4 <_svfiprintf_r+0x7c>
 80028b2:	e0a5      	b.n	8002a00 <_svfiprintf_r+0x1c8>
 80028b4:	2201      	movs	r2, #1
 80028b6:	2300      	movs	r3, #0
 80028b8:	4252      	negs	r2, r2
 80028ba:	6062      	str	r2, [r4, #4]
 80028bc:	a904      	add	r1, sp, #16
 80028be:	3254      	adds	r2, #84	; 0x54
 80028c0:	1852      	adds	r2, r2, r1
 80028c2:	1c6e      	adds	r6, r5, #1
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	60e3      	str	r3, [r4, #12]
 80028c8:	60a3      	str	r3, [r4, #8]
 80028ca:	7013      	strb	r3, [r2, #0]
 80028cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80028ce:	2205      	movs	r2, #5
 80028d0:	7831      	ldrb	r1, [r6, #0]
 80028d2:	4854      	ldr	r0, [pc, #336]	; (8002a24 <_svfiprintf_r+0x1ec>)
 80028d4:	f000 fa32 	bl	8002d3c <memchr>
 80028d8:	1c75      	adds	r5, r6, #1
 80028da:	2800      	cmp	r0, #0
 80028dc:	d11f      	bne.n	800291e <_svfiprintf_r+0xe6>
 80028de:	6822      	ldr	r2, [r4, #0]
 80028e0:	06d3      	lsls	r3, r2, #27
 80028e2:	d504      	bpl.n	80028ee <_svfiprintf_r+0xb6>
 80028e4:	2353      	movs	r3, #83	; 0x53
 80028e6:	a904      	add	r1, sp, #16
 80028e8:	185b      	adds	r3, r3, r1
 80028ea:	2120      	movs	r1, #32
 80028ec:	7019      	strb	r1, [r3, #0]
 80028ee:	0713      	lsls	r3, r2, #28
 80028f0:	d504      	bpl.n	80028fc <_svfiprintf_r+0xc4>
 80028f2:	2353      	movs	r3, #83	; 0x53
 80028f4:	a904      	add	r1, sp, #16
 80028f6:	185b      	adds	r3, r3, r1
 80028f8:	212b      	movs	r1, #43	; 0x2b
 80028fa:	7019      	strb	r1, [r3, #0]
 80028fc:	7833      	ldrb	r3, [r6, #0]
 80028fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002900:	d016      	beq.n	8002930 <_svfiprintf_r+0xf8>
 8002902:	0035      	movs	r5, r6
 8002904:	2100      	movs	r1, #0
 8002906:	200a      	movs	r0, #10
 8002908:	68e3      	ldr	r3, [r4, #12]
 800290a:	782a      	ldrb	r2, [r5, #0]
 800290c:	1c6e      	adds	r6, r5, #1
 800290e:	3a30      	subs	r2, #48	; 0x30
 8002910:	2a09      	cmp	r2, #9
 8002912:	d94e      	bls.n	80029b2 <_svfiprintf_r+0x17a>
 8002914:	2900      	cmp	r1, #0
 8002916:	d111      	bne.n	800293c <_svfiprintf_r+0x104>
 8002918:	e017      	b.n	800294a <_svfiprintf_r+0x112>
 800291a:	3501      	adds	r5, #1
 800291c:	e7b0      	b.n	8002880 <_svfiprintf_r+0x48>
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <_svfiprintf_r+0x1ec>)
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	1ac0      	subs	r0, r0, r3
 8002924:	2301      	movs	r3, #1
 8002926:	4083      	lsls	r3, r0
 8002928:	4313      	orrs	r3, r2
 800292a:	002e      	movs	r6, r5
 800292c:	6023      	str	r3, [r4, #0]
 800292e:	e7ce      	b.n	80028ce <_svfiprintf_r+0x96>
 8002930:	9b07      	ldr	r3, [sp, #28]
 8002932:	1d19      	adds	r1, r3, #4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	9107      	str	r1, [sp, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db01      	blt.n	8002940 <_svfiprintf_r+0x108>
 800293c:	930b      	str	r3, [sp, #44]	; 0x2c
 800293e:	e004      	b.n	800294a <_svfiprintf_r+0x112>
 8002940:	425b      	negs	r3, r3
 8002942:	60e3      	str	r3, [r4, #12]
 8002944:	2302      	movs	r3, #2
 8002946:	4313      	orrs	r3, r2
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	782b      	ldrb	r3, [r5, #0]
 800294c:	2b2e      	cmp	r3, #46	; 0x2e
 800294e:	d10a      	bne.n	8002966 <_svfiprintf_r+0x12e>
 8002950:	786b      	ldrb	r3, [r5, #1]
 8002952:	2b2a      	cmp	r3, #42	; 0x2a
 8002954:	d135      	bne.n	80029c2 <_svfiprintf_r+0x18a>
 8002956:	9b07      	ldr	r3, [sp, #28]
 8002958:	3502      	adds	r5, #2
 800295a:	1d1a      	adds	r2, r3, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	9207      	str	r2, [sp, #28]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db2b      	blt.n	80029bc <_svfiprintf_r+0x184>
 8002964:	9309      	str	r3, [sp, #36]	; 0x24
 8002966:	4e30      	ldr	r6, [pc, #192]	; (8002a28 <_svfiprintf_r+0x1f0>)
 8002968:	2203      	movs	r2, #3
 800296a:	0030      	movs	r0, r6
 800296c:	7829      	ldrb	r1, [r5, #0]
 800296e:	f000 f9e5 	bl	8002d3c <memchr>
 8002972:	2800      	cmp	r0, #0
 8002974:	d006      	beq.n	8002984 <_svfiprintf_r+0x14c>
 8002976:	2340      	movs	r3, #64	; 0x40
 8002978:	1b80      	subs	r0, r0, r6
 800297a:	4083      	lsls	r3, r0
 800297c:	6822      	ldr	r2, [r4, #0]
 800297e:	3501      	adds	r5, #1
 8002980:	4313      	orrs	r3, r2
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	7829      	ldrb	r1, [r5, #0]
 8002986:	2206      	movs	r2, #6
 8002988:	4828      	ldr	r0, [pc, #160]	; (8002a2c <_svfiprintf_r+0x1f4>)
 800298a:	1c6e      	adds	r6, r5, #1
 800298c:	7621      	strb	r1, [r4, #24]
 800298e:	f000 f9d5 	bl	8002d3c <memchr>
 8002992:	2800      	cmp	r0, #0
 8002994:	d03c      	beq.n	8002a10 <_svfiprintf_r+0x1d8>
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <_svfiprintf_r+0x1f8>)
 8002998:	2b00      	cmp	r3, #0
 800299a:	d125      	bne.n	80029e8 <_svfiprintf_r+0x1b0>
 800299c:	2207      	movs	r2, #7
 800299e:	9b07      	ldr	r3, [sp, #28]
 80029a0:	3307      	adds	r3, #7
 80029a2:	4393      	bics	r3, r2
 80029a4:	3308      	adds	r3, #8
 80029a6:	9307      	str	r3, [sp, #28]
 80029a8:	6963      	ldr	r3, [r4, #20]
 80029aa:	9a04      	ldr	r2, [sp, #16]
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	6163      	str	r3, [r4, #20]
 80029b0:	e765      	b.n	800287e <_svfiprintf_r+0x46>
 80029b2:	4343      	muls	r3, r0
 80029b4:	0035      	movs	r5, r6
 80029b6:	2101      	movs	r1, #1
 80029b8:	189b      	adds	r3, r3, r2
 80029ba:	e7a6      	b.n	800290a <_svfiprintf_r+0xd2>
 80029bc:	2301      	movs	r3, #1
 80029be:	425b      	negs	r3, r3
 80029c0:	e7d0      	b.n	8002964 <_svfiprintf_r+0x12c>
 80029c2:	2300      	movs	r3, #0
 80029c4:	200a      	movs	r0, #10
 80029c6:	001a      	movs	r2, r3
 80029c8:	3501      	adds	r5, #1
 80029ca:	6063      	str	r3, [r4, #4]
 80029cc:	7829      	ldrb	r1, [r5, #0]
 80029ce:	1c6e      	adds	r6, r5, #1
 80029d0:	3930      	subs	r1, #48	; 0x30
 80029d2:	2909      	cmp	r1, #9
 80029d4:	d903      	bls.n	80029de <_svfiprintf_r+0x1a6>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0c5      	beq.n	8002966 <_svfiprintf_r+0x12e>
 80029da:	9209      	str	r2, [sp, #36]	; 0x24
 80029dc:	e7c3      	b.n	8002966 <_svfiprintf_r+0x12e>
 80029de:	4342      	muls	r2, r0
 80029e0:	0035      	movs	r5, r6
 80029e2:	2301      	movs	r3, #1
 80029e4:	1852      	adds	r2, r2, r1
 80029e6:	e7f1      	b.n	80029cc <_svfiprintf_r+0x194>
 80029e8:	ab07      	add	r3, sp, #28
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	003a      	movs	r2, r7
 80029ee:	0021      	movs	r1, r4
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <_svfiprintf_r+0x1fc>)
 80029f2:	9803      	ldr	r0, [sp, #12]
 80029f4:	e000      	b.n	80029f8 <_svfiprintf_r+0x1c0>
 80029f6:	bf00      	nop
 80029f8:	9004      	str	r0, [sp, #16]
 80029fa:	9b04      	ldr	r3, [sp, #16]
 80029fc:	3301      	adds	r3, #1
 80029fe:	d1d3      	bne.n	80029a8 <_svfiprintf_r+0x170>
 8002a00:	89bb      	ldrh	r3, [r7, #12]
 8002a02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a04:	065b      	lsls	r3, r3, #25
 8002a06:	d400      	bmi.n	8002a0a <_svfiprintf_r+0x1d2>
 8002a08:	e72d      	b.n	8002866 <_svfiprintf_r+0x2e>
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	4240      	negs	r0, r0
 8002a0e:	e72a      	b.n	8002866 <_svfiprintf_r+0x2e>
 8002a10:	ab07      	add	r3, sp, #28
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	003a      	movs	r2, r7
 8002a16:	0021      	movs	r1, r4
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <_svfiprintf_r+0x1fc>)
 8002a1a:	9803      	ldr	r0, [sp, #12]
 8002a1c:	f000 f87c 	bl	8002b18 <_printf_i>
 8002a20:	e7ea      	b.n	80029f8 <_svfiprintf_r+0x1c0>
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	08003050 	.word	0x08003050
 8002a28:	08003056 	.word	0x08003056
 8002a2c:	0800305a 	.word	0x0800305a
 8002a30:	00000000 	.word	0x00000000
 8002a34:	08002775 	.word	0x08002775

08002a38 <_printf_common>:
 8002a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a3a:	0015      	movs	r5, r2
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	688a      	ldr	r2, [r1, #8]
 8002a40:	690b      	ldr	r3, [r1, #16]
 8002a42:	000c      	movs	r4, r1
 8002a44:	9000      	str	r0, [sp, #0]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	da00      	bge.n	8002a4c <_printf_common+0x14>
 8002a4a:	0013      	movs	r3, r2
 8002a4c:	0022      	movs	r2, r4
 8002a4e:	602b      	str	r3, [r5, #0]
 8002a50:	3243      	adds	r2, #67	; 0x43
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	2a00      	cmp	r2, #0
 8002a56:	d001      	beq.n	8002a5c <_printf_common+0x24>
 8002a58:	3301      	adds	r3, #1
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	d502      	bpl.n	8002a68 <_printf_common+0x30>
 8002a62:	682b      	ldr	r3, [r5, #0]
 8002a64:	3302      	adds	r3, #2
 8002a66:	602b      	str	r3, [r5, #0]
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	2306      	movs	r3, #6
 8002a6c:	0017      	movs	r7, r2
 8002a6e:	401f      	ands	r7, r3
 8002a70:	421a      	tst	r2, r3
 8002a72:	d027      	beq.n	8002ac4 <_printf_common+0x8c>
 8002a74:	0023      	movs	r3, r4
 8002a76:	3343      	adds	r3, #67	; 0x43
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	1e5a      	subs	r2, r3, #1
 8002a7c:	4193      	sbcs	r3, r2
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	0692      	lsls	r2, r2, #26
 8002a82:	d430      	bmi.n	8002ae6 <_printf_common+0xae>
 8002a84:	0022      	movs	r2, r4
 8002a86:	9901      	ldr	r1, [sp, #4]
 8002a88:	9800      	ldr	r0, [sp, #0]
 8002a8a:	9e08      	ldr	r6, [sp, #32]
 8002a8c:	3243      	adds	r2, #67	; 0x43
 8002a8e:	47b0      	blx	r6
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d025      	beq.n	8002ae0 <_printf_common+0xa8>
 8002a94:	2306      	movs	r3, #6
 8002a96:	6820      	ldr	r0, [r4, #0]
 8002a98:	682a      	ldr	r2, [r5, #0]
 8002a9a:	68e1      	ldr	r1, [r4, #12]
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	4003      	ands	r3, r0
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d103      	bne.n	8002aac <_printf_common+0x74>
 8002aa4:	1a8d      	subs	r5, r1, r2
 8002aa6:	43eb      	mvns	r3, r5
 8002aa8:	17db      	asrs	r3, r3, #31
 8002aaa:	401d      	ands	r5, r3
 8002aac:	68a3      	ldr	r3, [r4, #8]
 8002aae:	6922      	ldr	r2, [r4, #16]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	dd01      	ble.n	8002ab8 <_printf_common+0x80>
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	18ed      	adds	r5, r5, r3
 8002ab8:	2700      	movs	r7, #0
 8002aba:	42bd      	cmp	r5, r7
 8002abc:	d120      	bne.n	8002b00 <_printf_common+0xc8>
 8002abe:	2000      	movs	r0, #0
 8002ac0:	e010      	b.n	8002ae4 <_printf_common+0xac>
 8002ac2:	3701      	adds	r7, #1
 8002ac4:	68e3      	ldr	r3, [r4, #12]
 8002ac6:	682a      	ldr	r2, [r5, #0]
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	42bb      	cmp	r3, r7
 8002acc:	ddd2      	ble.n	8002a74 <_printf_common+0x3c>
 8002ace:	0022      	movs	r2, r4
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	9901      	ldr	r1, [sp, #4]
 8002ad4:	9800      	ldr	r0, [sp, #0]
 8002ad6:	9e08      	ldr	r6, [sp, #32]
 8002ad8:	3219      	adds	r2, #25
 8002ada:	47b0      	blx	r6
 8002adc:	1c43      	adds	r3, r0, #1
 8002ade:	d1f0      	bne.n	8002ac2 <_printf_common+0x8a>
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	4240      	negs	r0, r0
 8002ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ae6:	2030      	movs	r0, #48	; 0x30
 8002ae8:	18e1      	adds	r1, r4, r3
 8002aea:	3143      	adds	r1, #67	; 0x43
 8002aec:	7008      	strb	r0, [r1, #0]
 8002aee:	0021      	movs	r1, r4
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	3145      	adds	r1, #69	; 0x45
 8002af4:	7809      	ldrb	r1, [r1, #0]
 8002af6:	18a2      	adds	r2, r4, r2
 8002af8:	3243      	adds	r2, #67	; 0x43
 8002afa:	3302      	adds	r3, #2
 8002afc:	7011      	strb	r1, [r2, #0]
 8002afe:	e7c1      	b.n	8002a84 <_printf_common+0x4c>
 8002b00:	0022      	movs	r2, r4
 8002b02:	2301      	movs	r3, #1
 8002b04:	9901      	ldr	r1, [sp, #4]
 8002b06:	9800      	ldr	r0, [sp, #0]
 8002b08:	9e08      	ldr	r6, [sp, #32]
 8002b0a:	321a      	adds	r2, #26
 8002b0c:	47b0      	blx	r6
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	d0e6      	beq.n	8002ae0 <_printf_common+0xa8>
 8002b12:	3701      	adds	r7, #1
 8002b14:	e7d1      	b.n	8002aba <_printf_common+0x82>
	...

08002b18 <_printf_i>:
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1a:	b08b      	sub	sp, #44	; 0x2c
 8002b1c:	9206      	str	r2, [sp, #24]
 8002b1e:	000a      	movs	r2, r1
 8002b20:	3243      	adds	r2, #67	; 0x43
 8002b22:	9307      	str	r3, [sp, #28]
 8002b24:	9005      	str	r0, [sp, #20]
 8002b26:	9204      	str	r2, [sp, #16]
 8002b28:	7e0a      	ldrb	r2, [r1, #24]
 8002b2a:	000c      	movs	r4, r1
 8002b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b2e:	2a78      	cmp	r2, #120	; 0x78
 8002b30:	d806      	bhi.n	8002b40 <_printf_i+0x28>
 8002b32:	2a62      	cmp	r2, #98	; 0x62
 8002b34:	d808      	bhi.n	8002b48 <_printf_i+0x30>
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	d100      	bne.n	8002b3c <_printf_i+0x24>
 8002b3a:	e0c0      	b.n	8002cbe <_printf_i+0x1a6>
 8002b3c:	2a58      	cmp	r2, #88	; 0x58
 8002b3e:	d052      	beq.n	8002be6 <_printf_i+0xce>
 8002b40:	0026      	movs	r6, r4
 8002b42:	3642      	adds	r6, #66	; 0x42
 8002b44:	7032      	strb	r2, [r6, #0]
 8002b46:	e022      	b.n	8002b8e <_printf_i+0x76>
 8002b48:	0010      	movs	r0, r2
 8002b4a:	3863      	subs	r0, #99	; 0x63
 8002b4c:	2815      	cmp	r0, #21
 8002b4e:	d8f7      	bhi.n	8002b40 <_printf_i+0x28>
 8002b50:	f7fd fada 	bl	8000108 <__gnu_thumb1_case_shi>
 8002b54:	001f0016 	.word	0x001f0016
 8002b58:	fff6fff6 	.word	0xfff6fff6
 8002b5c:	fff6fff6 	.word	0xfff6fff6
 8002b60:	fff6001f 	.word	0xfff6001f
 8002b64:	fff6fff6 	.word	0xfff6fff6
 8002b68:	00a8fff6 	.word	0x00a8fff6
 8002b6c:	009a0036 	.word	0x009a0036
 8002b70:	fff6fff6 	.word	0xfff6fff6
 8002b74:	fff600b9 	.word	0xfff600b9
 8002b78:	fff60036 	.word	0xfff60036
 8002b7c:	009efff6 	.word	0x009efff6
 8002b80:	0026      	movs	r6, r4
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	3642      	adds	r6, #66	; 0x42
 8002b86:	1d11      	adds	r1, r2, #4
 8002b88:	6019      	str	r1, [r3, #0]
 8002b8a:	6813      	ldr	r3, [r2, #0]
 8002b8c:	7033      	strb	r3, [r6, #0]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0a7      	b.n	8002ce2 <_printf_i+0x1ca>
 8002b92:	6808      	ldr	r0, [r1, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	1d0a      	adds	r2, r1, #4
 8002b98:	0605      	lsls	r5, r0, #24
 8002b9a:	d50b      	bpl.n	8002bb4 <_printf_i+0x9c>
 8002b9c:	680d      	ldr	r5, [r1, #0]
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	2d00      	cmp	r5, #0
 8002ba2:	da03      	bge.n	8002bac <_printf_i+0x94>
 8002ba4:	232d      	movs	r3, #45	; 0x2d
 8002ba6:	9a04      	ldr	r2, [sp, #16]
 8002ba8:	426d      	negs	r5, r5
 8002baa:	7013      	strb	r3, [r2, #0]
 8002bac:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <_printf_i+0x21c>)
 8002bae:	270a      	movs	r7, #10
 8002bb0:	9303      	str	r3, [sp, #12]
 8002bb2:	e032      	b.n	8002c1a <_printf_i+0x102>
 8002bb4:	680d      	ldr	r5, [r1, #0]
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	0641      	lsls	r1, r0, #25
 8002bba:	d5f1      	bpl.n	8002ba0 <_printf_i+0x88>
 8002bbc:	b22d      	sxth	r5, r5
 8002bbe:	e7ef      	b.n	8002ba0 <_printf_i+0x88>
 8002bc0:	680d      	ldr	r5, [r1, #0]
 8002bc2:	6819      	ldr	r1, [r3, #0]
 8002bc4:	1d08      	adds	r0, r1, #4
 8002bc6:	6018      	str	r0, [r3, #0]
 8002bc8:	062e      	lsls	r6, r5, #24
 8002bca:	d501      	bpl.n	8002bd0 <_printf_i+0xb8>
 8002bcc:	680d      	ldr	r5, [r1, #0]
 8002bce:	e003      	b.n	8002bd8 <_printf_i+0xc0>
 8002bd0:	066d      	lsls	r5, r5, #25
 8002bd2:	d5fb      	bpl.n	8002bcc <_printf_i+0xb4>
 8002bd4:	680d      	ldr	r5, [r1, #0]
 8002bd6:	b2ad      	uxth	r5, r5
 8002bd8:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <_printf_i+0x21c>)
 8002bda:	270a      	movs	r7, #10
 8002bdc:	9303      	str	r3, [sp, #12]
 8002bde:	2a6f      	cmp	r2, #111	; 0x6f
 8002be0:	d117      	bne.n	8002c12 <_printf_i+0xfa>
 8002be2:	2708      	movs	r7, #8
 8002be4:	e015      	b.n	8002c12 <_printf_i+0xfa>
 8002be6:	3145      	adds	r1, #69	; 0x45
 8002be8:	700a      	strb	r2, [r1, #0]
 8002bea:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <_printf_i+0x21c>)
 8002bec:	9203      	str	r2, [sp, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	6821      	ldr	r1, [r4, #0]
 8002bf2:	ca20      	ldmia	r2!, {r5}
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	0608      	lsls	r0, r1, #24
 8002bf8:	d550      	bpl.n	8002c9c <_printf_i+0x184>
 8002bfa:	07cb      	lsls	r3, r1, #31
 8002bfc:	d502      	bpl.n	8002c04 <_printf_i+0xec>
 8002bfe:	2320      	movs	r3, #32
 8002c00:	4319      	orrs	r1, r3
 8002c02:	6021      	str	r1, [r4, #0]
 8002c04:	2710      	movs	r7, #16
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	d103      	bne.n	8002c12 <_printf_i+0xfa>
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	439a      	bics	r2, r3
 8002c10:	6022      	str	r2, [r4, #0]
 8002c12:	0023      	movs	r3, r4
 8002c14:	2200      	movs	r2, #0
 8002c16:	3343      	adds	r3, #67	; 0x43
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	6863      	ldr	r3, [r4, #4]
 8002c1c:	60a3      	str	r3, [r4, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db03      	blt.n	8002c2a <_printf_i+0x112>
 8002c22:	2204      	movs	r2, #4
 8002c24:	6821      	ldr	r1, [r4, #0]
 8002c26:	4391      	bics	r1, r2
 8002c28:	6021      	str	r1, [r4, #0]
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	d102      	bne.n	8002c34 <_printf_i+0x11c>
 8002c2e:	9e04      	ldr	r6, [sp, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00c      	beq.n	8002c4e <_printf_i+0x136>
 8002c34:	9e04      	ldr	r6, [sp, #16]
 8002c36:	0028      	movs	r0, r5
 8002c38:	0039      	movs	r1, r7
 8002c3a:	f7fd faf5 	bl	8000228 <__aeabi_uidivmod>
 8002c3e:	9b03      	ldr	r3, [sp, #12]
 8002c40:	3e01      	subs	r6, #1
 8002c42:	5c5b      	ldrb	r3, [r3, r1]
 8002c44:	7033      	strb	r3, [r6, #0]
 8002c46:	002b      	movs	r3, r5
 8002c48:	0005      	movs	r5, r0
 8002c4a:	429f      	cmp	r7, r3
 8002c4c:	d9f3      	bls.n	8002c36 <_printf_i+0x11e>
 8002c4e:	2f08      	cmp	r7, #8
 8002c50:	d109      	bne.n	8002c66 <_printf_i+0x14e>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	07db      	lsls	r3, r3, #31
 8002c56:	d506      	bpl.n	8002c66 <_printf_i+0x14e>
 8002c58:	6863      	ldr	r3, [r4, #4]
 8002c5a:	6922      	ldr	r2, [r4, #16]
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	dc02      	bgt.n	8002c66 <_printf_i+0x14e>
 8002c60:	2330      	movs	r3, #48	; 0x30
 8002c62:	3e01      	subs	r6, #1
 8002c64:	7033      	strb	r3, [r6, #0]
 8002c66:	9b04      	ldr	r3, [sp, #16]
 8002c68:	1b9b      	subs	r3, r3, r6
 8002c6a:	6123      	str	r3, [r4, #16]
 8002c6c:	9b07      	ldr	r3, [sp, #28]
 8002c6e:	0021      	movs	r1, r4
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	9805      	ldr	r0, [sp, #20]
 8002c74:	9b06      	ldr	r3, [sp, #24]
 8002c76:	aa09      	add	r2, sp, #36	; 0x24
 8002c78:	f7ff fede 	bl	8002a38 <_printf_common>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d135      	bne.n	8002cec <_printf_i+0x1d4>
 8002c80:	2001      	movs	r0, #1
 8002c82:	4240      	negs	r0, r0
 8002c84:	b00b      	add	sp, #44	; 0x2c
 8002c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c88:	2220      	movs	r2, #32
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	6022      	str	r2, [r4, #0]
 8002c90:	0022      	movs	r2, r4
 8002c92:	2178      	movs	r1, #120	; 0x78
 8002c94:	3245      	adds	r2, #69	; 0x45
 8002c96:	7011      	strb	r1, [r2, #0]
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <_printf_i+0x220>)
 8002c9a:	e7a7      	b.n	8002bec <_printf_i+0xd4>
 8002c9c:	0648      	lsls	r0, r1, #25
 8002c9e:	d5ac      	bpl.n	8002bfa <_printf_i+0xe2>
 8002ca0:	b2ad      	uxth	r5, r5
 8002ca2:	e7aa      	b.n	8002bfa <_printf_i+0xe2>
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	680d      	ldr	r5, [r1, #0]
 8002ca8:	1d10      	adds	r0, r2, #4
 8002caa:	6949      	ldr	r1, [r1, #20]
 8002cac:	6018      	str	r0, [r3, #0]
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	062e      	lsls	r6, r5, #24
 8002cb2:	d501      	bpl.n	8002cb8 <_printf_i+0x1a0>
 8002cb4:	6019      	str	r1, [r3, #0]
 8002cb6:	e002      	b.n	8002cbe <_printf_i+0x1a6>
 8002cb8:	066d      	lsls	r5, r5, #25
 8002cba:	d5fb      	bpl.n	8002cb4 <_printf_i+0x19c>
 8002cbc:	8019      	strh	r1, [r3, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9e04      	ldr	r6, [sp, #16]
 8002cc2:	6123      	str	r3, [r4, #16]
 8002cc4:	e7d2      	b.n	8002c6c <_printf_i+0x154>
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	1d11      	adds	r1, r2, #4
 8002cca:	6019      	str	r1, [r3, #0]
 8002ccc:	6816      	ldr	r6, [r2, #0]
 8002cce:	2100      	movs	r1, #0
 8002cd0:	0030      	movs	r0, r6
 8002cd2:	6862      	ldr	r2, [r4, #4]
 8002cd4:	f000 f832 	bl	8002d3c <memchr>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d001      	beq.n	8002ce0 <_printf_i+0x1c8>
 8002cdc:	1b80      	subs	r0, r0, r6
 8002cde:	6060      	str	r0, [r4, #4]
 8002ce0:	6863      	ldr	r3, [r4, #4]
 8002ce2:	6123      	str	r3, [r4, #16]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9a04      	ldr	r2, [sp, #16]
 8002ce8:	7013      	strb	r3, [r2, #0]
 8002cea:	e7bf      	b.n	8002c6c <_printf_i+0x154>
 8002cec:	6923      	ldr	r3, [r4, #16]
 8002cee:	0032      	movs	r2, r6
 8002cf0:	9906      	ldr	r1, [sp, #24]
 8002cf2:	9805      	ldr	r0, [sp, #20]
 8002cf4:	9d07      	ldr	r5, [sp, #28]
 8002cf6:	47a8      	blx	r5
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d0c1      	beq.n	8002c80 <_printf_i+0x168>
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	079b      	lsls	r3, r3, #30
 8002d00:	d415      	bmi.n	8002d2e <_printf_i+0x216>
 8002d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d04:	68e0      	ldr	r0, [r4, #12]
 8002d06:	4298      	cmp	r0, r3
 8002d08:	dabc      	bge.n	8002c84 <_printf_i+0x16c>
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	e7ba      	b.n	8002c84 <_printf_i+0x16c>
 8002d0e:	0022      	movs	r2, r4
 8002d10:	2301      	movs	r3, #1
 8002d12:	9906      	ldr	r1, [sp, #24]
 8002d14:	9805      	ldr	r0, [sp, #20]
 8002d16:	9e07      	ldr	r6, [sp, #28]
 8002d18:	3219      	adds	r2, #25
 8002d1a:	47b0      	blx	r6
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d0af      	beq.n	8002c80 <_printf_i+0x168>
 8002d20:	3501      	adds	r5, #1
 8002d22:	68e3      	ldr	r3, [r4, #12]
 8002d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	42ab      	cmp	r3, r5
 8002d2a:	dcf0      	bgt.n	8002d0e <_printf_i+0x1f6>
 8002d2c:	e7e9      	b.n	8002d02 <_printf_i+0x1ea>
 8002d2e:	2500      	movs	r5, #0
 8002d30:	e7f7      	b.n	8002d22 <_printf_i+0x20a>
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	08003061 	.word	0x08003061
 8002d38:	08003072 	.word	0x08003072

08002d3c <memchr>:
 8002d3c:	b2c9      	uxtb	r1, r1
 8002d3e:	1882      	adds	r2, r0, r2
 8002d40:	4290      	cmp	r0, r2
 8002d42:	d101      	bne.n	8002d48 <memchr+0xc>
 8002d44:	2000      	movs	r0, #0
 8002d46:	4770      	bx	lr
 8002d48:	7803      	ldrb	r3, [r0, #0]
 8002d4a:	428b      	cmp	r3, r1
 8002d4c:	d0fb      	beq.n	8002d46 <memchr+0xa>
 8002d4e:	3001      	adds	r0, #1
 8002d50:	e7f6      	b.n	8002d40 <memchr+0x4>

08002d52 <memcpy>:
 8002d52:	2300      	movs	r3, #0
 8002d54:	b510      	push	{r4, lr}
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d100      	bne.n	8002d5c <memcpy+0xa>
 8002d5a:	bd10      	pop	{r4, pc}
 8002d5c:	5ccc      	ldrb	r4, [r1, r3]
 8002d5e:	54c4      	strb	r4, [r0, r3]
 8002d60:	3301      	adds	r3, #1
 8002d62:	e7f8      	b.n	8002d56 <memcpy+0x4>

08002d64 <memmove>:
 8002d64:	b510      	push	{r4, lr}
 8002d66:	4288      	cmp	r0, r1
 8002d68:	d902      	bls.n	8002d70 <memmove+0xc>
 8002d6a:	188b      	adds	r3, r1, r2
 8002d6c:	4298      	cmp	r0, r3
 8002d6e:	d303      	bcc.n	8002d78 <memmove+0x14>
 8002d70:	2300      	movs	r3, #0
 8002d72:	e007      	b.n	8002d84 <memmove+0x20>
 8002d74:	5c8b      	ldrb	r3, [r1, r2]
 8002d76:	5483      	strb	r3, [r0, r2]
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	d2fb      	bcs.n	8002d74 <memmove+0x10>
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	5ccc      	ldrb	r4, [r1, r3]
 8002d80:	54c4      	strb	r4, [r0, r3]
 8002d82:	3301      	adds	r3, #1
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1fa      	bne.n	8002d7e <memmove+0x1a>
 8002d88:	e7f8      	b.n	8002d7c <memmove+0x18>
	...

08002d8c <_free_r>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	0005      	movs	r5, r0
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d010      	beq.n	8002db6 <_free_r+0x2a>
 8002d94:	1f0c      	subs	r4, r1, #4
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	da00      	bge.n	8002d9e <_free_r+0x12>
 8002d9c:	18e4      	adds	r4, r4, r3
 8002d9e:	0028      	movs	r0, r5
 8002da0:	f000 f8d4 	bl	8002f4c <__malloc_lock>
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <_free_r+0x90>)
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <_free_r+0x2c>
 8002dac:	6063      	str	r3, [r4, #4]
 8002dae:	6014      	str	r4, [r2, #0]
 8002db0:	0028      	movs	r0, r5
 8002db2:	f000 f8d3 	bl	8002f5c <__malloc_unlock>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	42a3      	cmp	r3, r4
 8002dba:	d908      	bls.n	8002dce <_free_r+0x42>
 8002dbc:	6821      	ldr	r1, [r4, #0]
 8002dbe:	1860      	adds	r0, r4, r1
 8002dc0:	4283      	cmp	r3, r0
 8002dc2:	d1f3      	bne.n	8002dac <_free_r+0x20>
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	1841      	adds	r1, r0, r1
 8002dca:	6021      	str	r1, [r4, #0]
 8002dcc:	e7ee      	b.n	8002dac <_free_r+0x20>
 8002dce:	001a      	movs	r2, r3
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <_free_r+0x4e>
 8002dd6:	42a3      	cmp	r3, r4
 8002dd8:	d9f9      	bls.n	8002dce <_free_r+0x42>
 8002dda:	6811      	ldr	r1, [r2, #0]
 8002ddc:	1850      	adds	r0, r2, r1
 8002dde:	42a0      	cmp	r0, r4
 8002de0:	d10b      	bne.n	8002dfa <_free_r+0x6e>
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	1809      	adds	r1, r1, r0
 8002de6:	1850      	adds	r0, r2, r1
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	4283      	cmp	r3, r0
 8002dec:	d1e0      	bne.n	8002db0 <_free_r+0x24>
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	1841      	adds	r1, r0, r1
 8002df4:	6011      	str	r1, [r2, #0]
 8002df6:	6053      	str	r3, [r2, #4]
 8002df8:	e7da      	b.n	8002db0 <_free_r+0x24>
 8002dfa:	42a0      	cmp	r0, r4
 8002dfc:	d902      	bls.n	8002e04 <_free_r+0x78>
 8002dfe:	230c      	movs	r3, #12
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	e7d5      	b.n	8002db0 <_free_r+0x24>
 8002e04:	6821      	ldr	r1, [r4, #0]
 8002e06:	1860      	adds	r0, r4, r1
 8002e08:	4283      	cmp	r3, r0
 8002e0a:	d103      	bne.n	8002e14 <_free_r+0x88>
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	1841      	adds	r1, r0, r1
 8002e12:	6021      	str	r1, [r4, #0]
 8002e14:	6063      	str	r3, [r4, #4]
 8002e16:	6054      	str	r4, [r2, #4]
 8002e18:	e7ca      	b.n	8002db0 <_free_r+0x24>
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000478 	.word	0x20000478

08002e20 <_malloc_r>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	2303      	movs	r3, #3
 8002e24:	1ccd      	adds	r5, r1, #3
 8002e26:	439d      	bics	r5, r3
 8002e28:	3508      	adds	r5, #8
 8002e2a:	0006      	movs	r6, r0
 8002e2c:	2d0c      	cmp	r5, #12
 8002e2e:	d21f      	bcs.n	8002e70 <_malloc_r+0x50>
 8002e30:	250c      	movs	r5, #12
 8002e32:	42a9      	cmp	r1, r5
 8002e34:	d81e      	bhi.n	8002e74 <_malloc_r+0x54>
 8002e36:	0030      	movs	r0, r6
 8002e38:	f000 f888 	bl	8002f4c <__malloc_lock>
 8002e3c:	4925      	ldr	r1, [pc, #148]	; (8002ed4 <_malloc_r+0xb4>)
 8002e3e:	680a      	ldr	r2, [r1, #0]
 8002e40:	0014      	movs	r4, r2
 8002e42:	2c00      	cmp	r4, #0
 8002e44:	d11a      	bne.n	8002e7c <_malloc_r+0x5c>
 8002e46:	4f24      	ldr	r7, [pc, #144]	; (8002ed8 <_malloc_r+0xb8>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <_malloc_r+0x38>
 8002e4e:	0021      	movs	r1, r4
 8002e50:	0030      	movs	r0, r6
 8002e52:	f000 f869 	bl	8002f28 <_sbrk_r>
 8002e56:	6038      	str	r0, [r7, #0]
 8002e58:	0029      	movs	r1, r5
 8002e5a:	0030      	movs	r0, r6
 8002e5c:	f000 f864 	bl	8002f28 <_sbrk_r>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d12b      	bne.n	8002ebc <_malloc_r+0x9c>
 8002e64:	230c      	movs	r3, #12
 8002e66:	0030      	movs	r0, r6
 8002e68:	6033      	str	r3, [r6, #0]
 8002e6a:	f000 f877 	bl	8002f5c <__malloc_unlock>
 8002e6e:	e003      	b.n	8002e78 <_malloc_r+0x58>
 8002e70:	2d00      	cmp	r5, #0
 8002e72:	dade      	bge.n	8002e32 <_malloc_r+0x12>
 8002e74:	230c      	movs	r3, #12
 8002e76:	6033      	str	r3, [r6, #0]
 8002e78:	2000      	movs	r0, #0
 8002e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	1b5b      	subs	r3, r3, r5
 8002e80:	d419      	bmi.n	8002eb6 <_malloc_r+0x96>
 8002e82:	2b0b      	cmp	r3, #11
 8002e84:	d903      	bls.n	8002e8e <_malloc_r+0x6e>
 8002e86:	6023      	str	r3, [r4, #0]
 8002e88:	18e4      	adds	r4, r4, r3
 8002e8a:	6025      	str	r5, [r4, #0]
 8002e8c:	e003      	b.n	8002e96 <_malloc_r+0x76>
 8002e8e:	6863      	ldr	r3, [r4, #4]
 8002e90:	42a2      	cmp	r2, r4
 8002e92:	d10e      	bne.n	8002eb2 <_malloc_r+0x92>
 8002e94:	600b      	str	r3, [r1, #0]
 8002e96:	0030      	movs	r0, r6
 8002e98:	f000 f860 	bl	8002f5c <__malloc_unlock>
 8002e9c:	0020      	movs	r0, r4
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	300b      	adds	r0, #11
 8002ea2:	1d23      	adds	r3, r4, #4
 8002ea4:	4390      	bics	r0, r2
 8002ea6:	1ac2      	subs	r2, r0, r3
 8002ea8:	4298      	cmp	r0, r3
 8002eaa:	d0e6      	beq.n	8002e7a <_malloc_r+0x5a>
 8002eac:	1a1b      	subs	r3, r3, r0
 8002eae:	50a3      	str	r3, [r4, r2]
 8002eb0:	e7e3      	b.n	8002e7a <_malloc_r+0x5a>
 8002eb2:	6053      	str	r3, [r2, #4]
 8002eb4:	e7ef      	b.n	8002e96 <_malloc_r+0x76>
 8002eb6:	0022      	movs	r2, r4
 8002eb8:	6864      	ldr	r4, [r4, #4]
 8002eba:	e7c2      	b.n	8002e42 <_malloc_r+0x22>
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	1cc4      	adds	r4, r0, #3
 8002ec0:	439c      	bics	r4, r3
 8002ec2:	42a0      	cmp	r0, r4
 8002ec4:	d0e1      	beq.n	8002e8a <_malloc_r+0x6a>
 8002ec6:	1a21      	subs	r1, r4, r0
 8002ec8:	0030      	movs	r0, r6
 8002eca:	f000 f82d 	bl	8002f28 <_sbrk_r>
 8002ece:	1c43      	adds	r3, r0, #1
 8002ed0:	d1db      	bne.n	8002e8a <_malloc_r+0x6a>
 8002ed2:	e7c7      	b.n	8002e64 <_malloc_r+0x44>
 8002ed4:	20000478 	.word	0x20000478
 8002ed8:	2000047c 	.word	0x2000047c

08002edc <_realloc_r>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	0007      	movs	r7, r0
 8002ee0:	000d      	movs	r5, r1
 8002ee2:	0016      	movs	r6, r2
 8002ee4:	2900      	cmp	r1, #0
 8002ee6:	d105      	bne.n	8002ef4 <_realloc_r+0x18>
 8002ee8:	0011      	movs	r1, r2
 8002eea:	f7ff ff99 	bl	8002e20 <_malloc_r>
 8002eee:	0004      	movs	r4, r0
 8002ef0:	0020      	movs	r0, r4
 8002ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d103      	bne.n	8002f00 <_realloc_r+0x24>
 8002ef8:	f7ff ff48 	bl	8002d8c <_free_r>
 8002efc:	0034      	movs	r4, r6
 8002efe:	e7f7      	b.n	8002ef0 <_realloc_r+0x14>
 8002f00:	f000 f834 	bl	8002f6c <_malloc_usable_size_r>
 8002f04:	002c      	movs	r4, r5
 8002f06:	42b0      	cmp	r0, r6
 8002f08:	d2f2      	bcs.n	8002ef0 <_realloc_r+0x14>
 8002f0a:	0031      	movs	r1, r6
 8002f0c:	0038      	movs	r0, r7
 8002f0e:	f7ff ff87 	bl	8002e20 <_malloc_r>
 8002f12:	1e04      	subs	r4, r0, #0
 8002f14:	d0ec      	beq.n	8002ef0 <_realloc_r+0x14>
 8002f16:	0029      	movs	r1, r5
 8002f18:	0032      	movs	r2, r6
 8002f1a:	f7ff ff1a 	bl	8002d52 <memcpy>
 8002f1e:	0029      	movs	r1, r5
 8002f20:	0038      	movs	r0, r7
 8002f22:	f7ff ff33 	bl	8002d8c <_free_r>
 8002f26:	e7e3      	b.n	8002ef0 <_realloc_r+0x14>

08002f28 <_sbrk_r>:
 8002f28:	2300      	movs	r3, #0
 8002f2a:	b570      	push	{r4, r5, r6, lr}
 8002f2c:	4d06      	ldr	r5, [pc, #24]	; (8002f48 <_sbrk_r+0x20>)
 8002f2e:	0004      	movs	r4, r0
 8002f30:	0008      	movs	r0, r1
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	f7fd fcba 	bl	80008ac <_sbrk>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d103      	bne.n	8002f44 <_sbrk_r+0x1c>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d000      	beq.n	8002f44 <_sbrk_r+0x1c>
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	20000608 	.word	0x20000608

08002f4c <__malloc_lock>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4802      	ldr	r0, [pc, #8]	; (8002f58 <__malloc_lock+0xc>)
 8002f50:	f000 f814 	bl	8002f7c <__retarget_lock_acquire_recursive>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000610 	.word	0x20000610

08002f5c <__malloc_unlock>:
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	4802      	ldr	r0, [pc, #8]	; (8002f68 <__malloc_unlock+0xc>)
 8002f60:	f000 f80d 	bl	8002f7e <__retarget_lock_release_recursive>
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	20000610 	.word	0x20000610

08002f6c <_malloc_usable_size_r>:
 8002f6c:	1f0b      	subs	r3, r1, #4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1f18      	subs	r0, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da01      	bge.n	8002f7a <_malloc_usable_size_r+0xe>
 8002f76:	580b      	ldr	r3, [r1, r0]
 8002f78:	18c0      	adds	r0, r0, r3
 8002f7a:	4770      	bx	lr

08002f7c <__retarget_lock_acquire_recursive>:
 8002f7c:	4770      	bx	lr

08002f7e <__retarget_lock_release_recursive>:
 8002f7e:	4770      	bx	lr

08002f80 <_init>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr

08002f8c <_fini>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr
