
Verici-Devre-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003304  08003304  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800330c  0800330c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003320  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003320  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4f4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df6  00000000  00000000  0002d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010edf  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d990  00000000  00000000  00041577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064e05  00000000  00000000  0004ef07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b3d0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c8  00000000  00000000  000b3d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003274 	.word	0x08003274

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003274 	.word	0x08003274

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
int main(void)
 80004a2:	2310      	movs	r3, #16
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a8:	f000 faa2 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ac:	f000 f82c 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b0:	f000 f906 	bl	80006c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004b4:	f000 f8d6 	bl	8000664 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80004b8:	f000 f894 	bl	80005e4 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (int i = 0; i <= 62500; i++){
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	e006      	b.n	80004d0 <main+0x34>
		  _delay_us(); //_delay_us(1);
 80004c2:	003b      	movs	r3, r7
 80004c4:	469c      	mov	ip, r3
 80004c6:	f000 f815 	bl	80004f4 <_delay_us.7431>
	  for (int i = 0; i <= 62500; i++){
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <main+0x4c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	ddf4      	ble.n	80004c2 <main+0x26>
	  }
	  HAL_UART_Transmit( &hlpuart1, (uint8_t *)"geliyor\r\n",9, 100);
 80004d8:	4904      	ldr	r1, [pc, #16]	; (80004ec <main+0x50>)
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <main+0x54>)
 80004dc:	2364      	movs	r3, #100	; 0x64
 80004de:	2209      	movs	r2, #9
 80004e0:	f001 fe30 	bl	8002144 <HAL_UART_Transmit>
	  for (int i = 0; i <= 62500; i++){
 80004e4:	e7ea      	b.n	80004bc <main+0x20>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	0000f424 	.word	0x0000f424
 80004ec:	0800328c 	.word	0x0800328c
 80004f0:	20000074 	.word	0x20000074

080004f4 <_delay_us.7431>:
  void _delay_us(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4663      	mov	r3, ip
 80004fc:	607b      	str	r3, [r7, #4]
  }
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b099      	sub	sp, #100	; 0x64
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	242c      	movs	r4, #44	; 0x2c
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2334      	movs	r3, #52	; 0x34
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 fea3 	bl	8003264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051e:	2318      	movs	r3, #24
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	0018      	movs	r0, r3
 8000524:	2314      	movs	r3, #20
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f002 fe9b 	bl	8003264 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052e:	003b      	movs	r3, r7
 8000530:	0018      	movs	r0, r3
 8000532:	2318      	movs	r3, #24
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f002 fe94 	bl	8003264 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <SystemClock_Config+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemClock_Config+0xd8>)
 8000542:	401a      	ands	r2, r3
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xd4>)
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0109      	lsls	r1, r1, #4
 800054a:	430a      	orrs	r2, r1
 800054c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054e:	0021      	movs	r1, r4
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2210      	movs	r2, #16
 8000554:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2201      	movs	r2, #1
 800055a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	22a0      	movs	r2, #160	; 0xa0
 8000566:	0212      	lsls	r2, r2, #8
 8000568:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	187b      	adds	r3, r7, r1
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fecc 	bl	8001310 <HAL_RCC_OscConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800057c:	f000 f8fe 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	2118      	movs	r1, #24
 8000582:	187b      	adds	r3, r7, r1
 8000584:	220f      	movs	r2, #15
 8000586:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2100      	movs	r1, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fa2f 	bl	8001a08 <HAL_RCC_ClockConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ae:	f000 f8e5 	bl	800077c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 80005b2:	003b      	movs	r3, r7
 80005b4:	220c      	movs	r2, #12
 80005b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c4:	003b      	movs	r3, r7
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fc42 	bl	8001e50 <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80005d0:	f000 f8d4 	bl	800077c <Error_Handler>
  }
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b019      	add	sp, #100	; 0x64
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b1c      	ldr	r3, [pc, #112]	; (800065c <MX_I2C1_Init+0x78>)
 80005ea:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <MX_I2C1_Init+0x7c>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_I2C1_Init+0x78>)
 80005f0:	22e1      	movs	r2, #225	; 0xe1
 80005f2:	00d2      	lsls	r2, r2, #3
 80005f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_I2C1_Init+0x78>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_I2C1_Init+0x78>)
 80005fe:	2201      	movs	r2, #1
 8000600:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_I2C1_Init+0x78>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_I2C1_Init+0x78>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_I2C1_Init+0x78>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_I2C1_Init+0x78>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_I2C1_Init+0x78>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_I2C1_Init+0x78>)
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fd46 	bl	80010b4 <HAL_I2C_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f8a6 	bl	800077c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_I2C1_Init+0x78>)
 8000632:	2100      	movs	r1, #0
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fdd3 	bl	80011e0 <HAL_I2CEx_ConfigAnalogFilter>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800063e:	f000 f89d 	bl	800077c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_I2C1_Init+0x78>)
 8000644:	2100      	movs	r1, #0
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fe16 	bl	8001278 <HAL_I2CEx_ConfigDigitalFilter>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 f894 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	20000028 	.word	0x20000028
 8000660:	40005400 	.word	0x40005400

08000664 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <MX_LPUART1_UART_Init+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 8000670:	22e1      	movs	r2, #225	; 0xe1
 8000672:	0252      	lsls	r2, r2, #9
 8000674:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 fcfa 	bl	800209c <HAL_UART_Init>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 f866 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	20000074 	.word	0x20000074
 80006bc:	40004800 	.word	0x40004800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	2414      	movs	r4, #20
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2314      	movs	r3, #20
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f002 fdc7 	bl	8003264 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_GPIO_Init+0xb4>)
 80006d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_GPIO_Init+0xb4>)
 80006dc:	2104      	movs	r1, #4
 80006de:	430a      	orrs	r2, r1
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_GPIO_Init+0xb4>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e6:	2204      	movs	r2, #4
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_GPIO_Init+0xb4>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_GPIO_Init+0xb4>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_GPIO_Init+0xb4>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	4013      	ands	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_GPIO_Init+0xb4>)
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_GPIO_Init+0xb4>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_GPIO_Init+0xb4>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_GPIO_Init+0xb4>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_GPIO_Init+0xb4>)
 8000724:	2102      	movs	r1, #2
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_GPIO_Init+0xb4>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2202      	movs	r2, #2
 8000730:	4013      	ands	r3, r2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDIO_Pin|IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 8000736:	4910      	ldr	r1, [pc, #64]	; (8000778 <MX_GPIO_Init+0xb8>)
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2200      	movs	r2, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fc9a 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SDIO_Pin IIC_SCL_Pin IIC_SDA_Pin */
  GPIO_InitStruct.Pin = SDIO_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 8000744:	0021      	movs	r1, r4
 8000746:	187b      	adds	r3, r7, r1
 8000748:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <MX_GPIO_Init+0xb8>)
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	187a      	adds	r2, r7, r1
 8000760:	23a0      	movs	r3, #160	; 0xa0
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	0011      	movs	r1, r2
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fb18 	bl	8000d9c <HAL_GPIO_Init>

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b00b      	add	sp, #44	; 0x2c
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	00000602 	.word	0x00000602

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_MspInit+0x24>)
 800078e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_MspInit+0x24>)
 8000792:	2101      	movs	r1, #1
 8000794:	430a      	orrs	r2, r1
 8000796:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <HAL_MspInit+0x24>)
 800079a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_MspInit+0x24>)
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	0549      	lsls	r1, r1, #21
 80007a2:	430a      	orrs	r2, r1
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	240c      	movs	r4, #12
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	2314      	movs	r3, #20
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f002 fd4e 	bl	8003264 <memset>
  if(hi2c->Instance==I2C1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_I2C_MspInit+0x7c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d128      	bne.n	8000824 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_I2C_MspInit+0x80>)
 80007d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_I2C_MspInit+0x80>)
 80007d8:	2102      	movs	r1, #2
 80007da:	430a      	orrs	r2, r1
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_I2C_MspInit+0x80>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	2202      	movs	r2, #2
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	22c0      	movs	r2, #192	; 0xc0
 80007f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2212      	movs	r2, #18
 80007f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2203      	movs	r2, #3
 8000802:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2201      	movs	r2, #1
 8000808:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	187b      	adds	r3, r7, r1
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <HAL_I2C_MspInit+0x84>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f000 fac3 	bl	8000d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_I2C_MspInit+0x80>)
 8000818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_I2C_MspInit+0x80>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0389      	lsls	r1, r1, #14
 8000820:	430a      	orrs	r2, r1
 8000822:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b009      	add	sp, #36	; 0x24
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	40005400 	.word	0x40005400
 8000830:	40021000 	.word	0x40021000
 8000834:	50000400 	.word	0x50000400

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2414      	movs	r4, #20
 8000842:	193b      	adds	r3, r7, r4
 8000844:	0018      	movs	r0, r3
 8000846:	2314      	movs	r3, #20
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f002 fd0a 	bl	8003264 <memset>
  if(huart->Instance==LPUART1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <HAL_UART_MspInit+0xd0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d152      	bne.n	8000900 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <HAL_UART_MspInit+0xd4>)
 800085c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <HAL_UART_MspInit+0xd4>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	02c9      	lsls	r1, r1, #11
 8000864:	430a      	orrs	r2, r1
 8000866:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <HAL_UART_MspInit+0xd4>)
 800086a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <HAL_UART_MspInit+0xd4>)
 800086e:	2104      	movs	r1, #4
 8000870:	430a      	orrs	r2, r1
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <HAL_UART_MspInit+0xd4>)
 8000876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000878:	2204      	movs	r2, #4
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <HAL_UART_MspInit+0xd4>)
 8000882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_UART_MspInit+0xd4>)
 8000886:	2102      	movs	r1, #2
 8000888:	430a      	orrs	r2, r1
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <HAL_UART_MspInit+0xd4>)
 800088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000890:	2202      	movs	r2, #2
 8000892:	4013      	ands	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2202      	movs	r2, #2
 80008a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2203      	movs	r2, #3
 80008ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2206      	movs	r2, #6
 80008b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	4a15      	ldr	r2, [pc, #84]	; (8000910 <HAL_UART_MspInit+0xd8>)
 80008ba:	0019      	movs	r1, r3
 80008bc:	0010      	movs	r0, r2
 80008be:	f000 fa6d 	bl	8000d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c2:	0021      	movs	r1, r4
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	00d2      	lsls	r2, r2, #3
 80008ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2202      	movs	r2, #2
 80008d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2203      	movs	r2, #3
 80008dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2206      	movs	r2, #6
 80008e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <HAL_UART_MspInit+0xdc>)
 80008e8:	0019      	movs	r1, r3
 80008ea:	0010      	movs	r0, r2
 80008ec:	f000 fa56 	bl	8000d9c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	201d      	movs	r0, #29
 80008f6:	f000 f997 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80008fa:	201d      	movs	r0, #29
 80008fc:	f000 f9a9 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b00b      	add	sp, #44	; 0x2c
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	40004800 	.word	0x40004800
 800090c:	40021000 	.word	0x40021000
 8000910:	50000800 	.word	0x50000800
 8000914:	50000400 	.word	0x50000400

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8ac 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <LPUART1_IRQHandler+0x14>)
 800094e:	0018      	movs	r0, r3
 8000950:	f001 fca0 	bl	8002294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	20000074 	.word	0x20000074

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800096e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000972:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000974:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <LoopForever+0xa>)
    CMP R1, R2
 8000978:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800097a:	d105      	bne.n	8000988 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800097e:	4913      	ldr	r1, [pc, #76]	; (80009cc <LoopForever+0x12>)
    STR R1, [R0]
 8000980:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000984:	4913      	ldr	r1, [pc, #76]	; (80009d4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000986:	6001      	str	r1, [r0, #0]

08000988 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800098a:	4914      	ldr	r1, [pc, #80]	; (80009dc <LoopForever+0x22>)
  ldr r2, =_sidata
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <LoopForever+0x26>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009a0:	4c11      	ldr	r4, [pc, #68]	; (80009e8 <LoopForever+0x2e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f002 fc33 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fd71 	bl	800049c <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
   ldr   r0, =_estack
 80009bc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80009c0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009c4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009c8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009cc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009d0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009d4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	08003314 	.word	0x08003314
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	20000114 	.word	0x20000114

080009ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_IRQHandler>
	...

080009f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x3c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_Init+0x3c>)
 8000a02:	2140      	movs	r1, #64	; 0x40
 8000a04:	430a      	orrs	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f811 	bl	8000a30 <HAL_InitTick>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a1a:	f7ff feb5 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_InitTick+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0019      	movs	r1, r3
 8000a42:	23fa      	movs	r3, #250	; 0xfa
 8000a44:	0098      	lsls	r0, r3, #2
 8000a46:	f7ff fb5f 	bl	8000108 <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff fb5a 	bl	8000108 <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f90b 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e00f      	b.n	8000a84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d80b      	bhi.n	8000a82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f8d8 	bl	8000c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_InitTick+0x64>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	18d2      	adds	r2, r2, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000110 	.word	0x20000110

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	20000110 	.word	0x20000110

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae2:	d809      	bhi.n	8000af8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	231f      	movs	r3, #31
 8000aec:	401a      	ands	r2, r3
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_EnableIRQ+0x30>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	4091      	lsls	r1, r2
 8000af4:	000a      	movs	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
  }
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b7f      	cmp	r3, #127	; 0x7f
 8000b18:	d828      	bhi.n	8000b6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <__NVIC_SetPriority+0xd4>)
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	33c0      	adds	r3, #192	; 0xc0
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	589b      	ldr	r3, [r3, r2]
 8000b2a:	1dfa      	adds	r2, r7, #7
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	0011      	movs	r1, r2
 8000b30:	2203      	movs	r2, #3
 8000b32:	400a      	ands	r2, r1
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	21ff      	movs	r1, #255	; 0xff
 8000b38:	4091      	lsls	r1, r2
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	401a      	ands	r2, r3
 8000b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	22ff      	movs	r2, #255	; 0xff
 8000b48:	401a      	ands	r2, r3
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2303      	movs	r3, #3
 8000b52:	4003      	ands	r3, r0
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <__NVIC_SetPriority+0xd4>)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	430a      	orrs	r2, r1
 8000b64:	33c0      	adds	r3, #192	; 0xc0
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b6a:	e031      	b.n	8000bd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <__NVIC_SetPriority+0xd8>)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0019      	movs	r1, r3
 8000b74:	230f      	movs	r3, #15
 8000b76:	400b      	ands	r3, r1
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3306      	adds	r3, #6
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	3304      	adds	r3, #4
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	400a      	ands	r2, r1
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	21ff      	movs	r1, #255	; 0xff
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	43d2      	mvns	r2, r2
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	2303      	movs	r3, #3
 8000bae:	4003      	ands	r3, r0
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <__NVIC_SetPriority+0xd8>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	001c      	movs	r4, r3
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4023      	ands	r3, r4
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	3306      	adds	r3, #6
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	18c3      	adds	r3, r0, r3
 8000bcc:	3304      	adds	r3, #4
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b003      	add	sp, #12
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	045b      	lsls	r3, r3, #17
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d301      	bcc.n	8000bf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e010      	b.n	8000c1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <SysTick_Config+0x44>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2103      	movs	r1, #3
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff ff7c 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x44>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x44>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	210f      	movs	r1, #15
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	1c02      	adds	r2, r0, #0
 8000c38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	0002      	movs	r2, r0
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ff33 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ffaf 	bl	8000be0 <SysTick_Config>
 8000c82:	0003      	movs	r3, r0
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2225      	movs	r2, #37	; 0x25
 8000ca0:	5c9b      	ldrb	r3, [r3, r2]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d008      	beq.n	8000cba <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2204      	movs	r2, #4
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2224      	movs	r2, #36	; 0x24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e024      	b.n	8000d04 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	210e      	movs	r1, #14
 8000cc6:	438a      	bics	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	221c      	movs	r2, #28
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2225      	movs	r2, #37	; 0x25
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2224      	movs	r2, #36	; 0x24
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	5499      	strb	r1, [r3, r2]

    return status;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b004      	add	sp, #16
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d14:	210f      	movs	r1, #15
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2225      	movs	r2, #37	; 0x25
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d006      	beq.n	8000d36 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e02a      	b.n	8000d8c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	210e      	movs	r1, #14
 8000d42:	438a      	bics	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	438a      	bics	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	221c      	movs	r2, #28
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	2101      	movs	r1, #1
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2225      	movs	r2, #37	; 0x25
 8000d6e:	2101      	movs	r1, #1
 8000d70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2224      	movs	r2, #36	; 0x24
 8000d76:	2100      	movs	r1, #0
 8000d78:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	0010      	movs	r0, r2
 8000d8a:	4798      	blx	r3
    }
  }
  return status;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	781b      	ldrb	r3, [r3, #0]
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000db2:	e149      	b.n	8001048 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d100      	bne.n	8000dcc <HAL_GPIO_Init+0x30>
 8000dca:	e13a      	b.n	8001042 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	409a      	lsls	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	2201      	movs	r2, #1
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d017      	beq.n	8000e82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d123      	bne.n	8000ed6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	58d3      	ldr	r3, [r2, r3]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2107      	movs	r1, #7
 8000eba:	400b      	ands	r3, r1
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	6939      	ldr	r1, [r7, #16]
 8000ed4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	23c0      	movs	r3, #192	; 0xc0
 8000f10:	029b      	lsls	r3, r3, #10
 8000f12:	4013      	ands	r3, r2
 8000f14:	d100      	bne.n	8000f18 <HAL_GPIO_Init+0x17c>
 8000f16:	e094      	b.n	8001042 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	4b51      	ldr	r3, [pc, #324]	; (8001060 <HAL_GPIO_Init+0x2c4>)
 8000f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1c:	4b50      	ldr	r3, [pc, #320]	; (8001060 <HAL_GPIO_Init+0x2c4>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	430a      	orrs	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f24:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_GPIO_Init+0x2c8>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	589b      	ldr	r3, [r3, r2]
 8000f30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x1de>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <HAL_GPIO_Init+0x2cc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x1da>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a43      	ldr	r2, [pc, #268]	; (800106c <HAL_GPIO_Init+0x2d0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x1d6>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a42      	ldr	r2, [pc, #264]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x1d2>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x1e0>
 8000f6e:	2306      	movs	r3, #6
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x1e0>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x1e0>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x1e0>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	2103      	movs	r1, #3
 8000f80:	400a      	ands	r2, r1
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	; (8001064 <HAL_GPIO_Init+0x2c8>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	025b      	lsls	r3, r3, #9
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	029b      	lsls	r3, r3, #10
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	035b      	lsls	r3, r3, #13
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	039b      	lsls	r3, r3, #14
 8001030:	4013      	ands	r3, r2
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	40da      	lsrs	r2, r3
 8001050:	1e13      	subs	r3, r2, #0
 8001052:	d000      	beq.n	8001056 <HAL_GPIO_Init+0x2ba>
 8001054:	e6ae      	b.n	8000db4 <HAL_GPIO_Init+0x18>
  }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b006      	add	sp, #24
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000
 8001068:	50000400 	.word	0x50000400
 800106c:	50000800 	.word	0x50000800
 8001070:	50001c00 	.word	0x50001c00
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	0008      	movs	r0, r1
 8001082:	0011      	movs	r1, r2
 8001084:	1cbb      	adds	r3, r7, #2
 8001086:	1c02      	adds	r2, r0, #0
 8001088:	801a      	strh	r2, [r3, #0]
 800108a:	1c7b      	adds	r3, r7, #1
 800108c:	1c0a      	adds	r2, r1, #0
 800108e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	1c7b      	adds	r3, r7, #1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001098:	1cbb      	adds	r3, r7, #2
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010a0:	e003      	b.n	80010aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010a2:	1cbb      	adds	r3, r7, #2
 80010a4:	881a      	ldrh	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e082      	b.n	80011cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2241      	movs	r2, #65	; 0x41
 80010ca:	5c9b      	ldrb	r3, [r3, r2]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2240      	movs	r2, #64	; 0x40
 80010d6:	2100      	movs	r1, #0
 80010d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff fb67 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2241      	movs	r2, #65	; 0x41
 80010e6:	2124      	movs	r1, #36	; 0x24
 80010e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	438a      	bics	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4934      	ldr	r1, [pc, #208]	; (80011d4 <HAL_I2C_Init+0x120>)
 8001104:	400a      	ands	r2, r1
 8001106:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4931      	ldr	r1, [pc, #196]	; (80011d8 <HAL_I2C_Init+0x124>)
 8001114:	400a      	ands	r2, r1
 8001116:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	0209      	lsls	r1, r1, #8
 800112c:	430a      	orrs	r2, r1
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	e007      	b.n	8001142 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2184      	movs	r1, #132	; 0x84
 800113c:	0209      	lsls	r1, r1, #8
 800113e:	430a      	orrs	r2, r1
 8001140:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d104      	bne.n	8001154 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	491f      	ldr	r1, [pc, #124]	; (80011dc <HAL_I2C_Init+0x128>)
 8001160:	430a      	orrs	r2, r1
 8001162:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	491a      	ldr	r1, [pc, #104]	; (80011d8 <HAL_I2C_Init+0x124>)
 8001170:	400a      	ands	r2, r1
 8001172:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	431a      	orrs	r2, r3
 800117e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69d9      	ldr	r1, [r3, #28]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1a      	ldr	r2, [r3, #32]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2241      	movs	r2, #65	; 0x41
 80011b8:	2120      	movs	r1, #32
 80011ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2242      	movs	r2, #66	; 0x42
 80011c6:	2100      	movs	r1, #0
 80011c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	f0ffffff 	.word	0xf0ffffff
 80011d8:	ffff7fff 	.word	0xffff7fff
 80011dc:	02008000 	.word	0x02008000

080011e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2241      	movs	r2, #65	; 0x41
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b20      	cmp	r3, #32
 80011f4:	d138      	bne.n	8001268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	5c9b      	ldrb	r3, [r3, r2]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001200:	2302      	movs	r3, #2
 8001202:	e032      	b.n	800126a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	2101      	movs	r1, #1
 800120a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2241      	movs	r2, #65	; 0x41
 8001210:	2124      	movs	r1, #36	; 0x24
 8001212:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2101      	movs	r1, #1
 8001220:	438a      	bics	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4911      	ldr	r1, [pc, #68]	; (8001274 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001230:	400a      	ands	r2, r1
 8001232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6819      	ldr	r1, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2101      	movs	r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2241      	movs	r2, #65	; 0x41
 8001258:	2120      	movs	r1, #32
 800125a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001268:	2302      	movs	r3, #2
  }
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	ffffefff 	.word	0xffffefff

08001278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2241      	movs	r2, #65	; 0x41
 8001286:	5c9b      	ldrb	r3, [r3, r2]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b20      	cmp	r3, #32
 800128c:	d139      	bne.n	8001302 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	5c9b      	ldrb	r3, [r3, r2]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001298:	2302      	movs	r3, #2
 800129a:	e033      	b.n	8001304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2240      	movs	r2, #64	; 0x40
 80012a0:	2101      	movs	r1, #1
 80012a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2241      	movs	r2, #65	; 0x41
 80012a8:	2124      	movs	r1, #36	; 0x24
 80012aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2101      	movs	r1, #1
 80012b8:	438a      	bics	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2241      	movs	r2, #65	; 0x41
 80012f2:	2120      	movs	r1, #32
 80012f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2240      	movs	r2, #64	; 0x40
 80012fa:	2100      	movs	r1, #0
 80012fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001302:	2302      	movs	r3, #2
  }
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b004      	add	sp, #16
 800130a:	bd80      	pop	{r7, pc}
 800130c:	fffff0ff 	.word	0xfffff0ff

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f000 fb6c 	bl	80019fc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001324:	4bc8      	ldr	r3, [pc, #800]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	220c      	movs	r2, #12
 800132a:	4013      	ands	r3, r2
 800132c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132e:	4bc6      	ldr	r3, [pc, #792]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	025b      	lsls	r3, r3, #9
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x36>
 8001344:	e07d      	b.n	8001442 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d007      	beq.n	800135c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d112      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	025b      	lsls	r3, r3, #9
 8001358:	429a      	cmp	r2, r3
 800135a:	d10d      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4bba      	ldr	r3, [pc, #744]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d100      	bne.n	800136a <HAL_RCC_OscConfig+0x5a>
 8001368:	e06a      	b.n	8001440 <HAL_RCC_OscConfig+0x130>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d166      	bne.n	8001440 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 fb42 	bl	80019fc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	429a      	cmp	r2, r3
 8001382:	d107      	bne.n	8001394 <HAL_RCC_OscConfig+0x84>
 8001384:	4bb0      	ldr	r3, [pc, #704]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4baf      	ldr	r3, [pc, #700]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0249      	lsls	r1, r1, #9
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e027      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	02db      	lsls	r3, r3, #11
 800139c:	429a      	cmp	r2, r3
 800139e:	d10e      	bne.n	80013be <HAL_RCC_OscConfig+0xae>
 80013a0:	4ba9      	ldr	r3, [pc, #676]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4ba8      	ldr	r3, [pc, #672]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	02c9      	lsls	r1, r1, #11
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4ba6      	ldr	r3, [pc, #664]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4ba5      	ldr	r3, [pc, #660]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0249      	lsls	r1, r1, #9
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e012      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013be:	4ba2      	ldr	r3, [pc, #648]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba1      	ldr	r3, [pc, #644]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013c4:	49a1      	ldr	r1, [pc, #644]	; (800164c <HAL_RCC_OscConfig+0x33c>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4b9f      	ldr	r3, [pc, #636]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4b9b      	ldr	r3, [pc, #620]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b9a      	ldr	r3, [pc, #616]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013de:	499c      	ldr	r1, [pc, #624]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d014      	beq.n	8001416 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb66 	bl	8000abc <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff fb61 	bl	8000abc <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e2f9      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001408:	4b8f      	ldr	r3, [pc, #572]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	029b      	lsls	r3, r3, #10
 8001410:	4013      	ands	r3, r2
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0xe6>
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb51 	bl	8000abc <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fb4c 	bl	8000abc <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e2e4      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	029b      	lsls	r3, r3, #10
 800143a:	4013      	ands	r3, r2
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x110>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d100      	bne.n	800144e <HAL_RCC_OscConfig+0x13e>
 800144c:	e099      	b.n	8001582 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2220      	movs	r2, #32
 8001458:	4013      	ands	r3, r2
 800145a:	d009      	beq.n	8001470 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800145c:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b79      	ldr	r3, [pc, #484]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001462:	2120      	movs	r1, #32
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	2220      	movs	r2, #32
 800146c:	4393      	bics	r3, r2
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b04      	cmp	r3, #4
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d13e      	bne.n	80014fa <HAL_RCC_OscConfig+0x1ea>
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d13b      	bne.n	80014fa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2204      	movs	r2, #4
 8001488:	4013      	ands	r3, r2
 800148a:	d004      	beq.n	8001496 <HAL_RCC_OscConfig+0x186>
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e2b2      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b6c      	ldr	r3, [pc, #432]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a6e      	ldr	r2, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x344>)
 800149c:	4013      	ands	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	021a      	lsls	r2, r3, #8
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014a8:	430a      	orrs	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014ac:	4b66      	ldr	r3, [pc, #408]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2209      	movs	r2, #9
 80014b2:	4393      	bics	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	4b64      	ldr	r3, [pc, #400]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014be:	f000 fbeb 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 80014c2:	0001      	movs	r1, r0
 80014c4:	4b60      	ldr	r3, [pc, #384]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	220f      	movs	r2, #15
 80014cc:	4013      	ands	r3, r2
 80014ce:	4a62      	ldr	r2, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x348>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	000a      	movs	r2, r1
 80014d4:	40da      	lsrs	r2, r3
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <HAL_RCC_OscConfig+0x34c>)
 80014d8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80014da:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2513      	movs	r5, #19
 80014e0:	197c      	adds	r4, r7, r5
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff faa4 	bl	8000a30 <HAL_InitTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014ec:	197b      	adds	r3, r7, r5
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d046      	beq.n	8001582 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80014f4:	197b      	adds	r3, r7, r5
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	e280      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d027      	beq.n	8001550 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2209      	movs	r2, #9
 8001506:	4393      	bics	r3, r2
 8001508:	0019      	movs	r1, r3
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fad3 	bl	8000abc <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff face 	bl	8000abc <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e266      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800152e:	4b46      	ldr	r3, [pc, #280]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2204      	movs	r2, #4
 8001534:	4013      	ands	r3, r2
 8001536:	d0f1      	beq.n	800151c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <HAL_RCC_OscConfig+0x344>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	021a      	lsls	r2, r3, #8
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e018      	b.n	8001582 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001550:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff faae 	bl	8000abc <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff faa9 	bl	8000abc <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e241      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001578:	4b33      	ldr	r3, [pc, #204]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2204      	movs	r2, #4
 800157e:	4013      	ands	r3, r2
 8001580:	d1f1      	bne.n	8001566 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2210      	movs	r2, #16
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x27e>
 800158c:	e0a1      	b.n	80016d2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d140      	bne.n	8001616 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4013      	ands	r3, r2
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x29c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e227      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	0a19      	lsrs	r1, r3, #8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	061a      	lsls	r2, r3, #24
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	0b5b      	lsrs	r3, r3, #13
 80015da:	3301      	adds	r3, #1
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	0212      	lsls	r2, r2, #8
 80015e0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	210f      	movs	r1, #15
 80015ea:	400b      	ands	r3, r1
 80015ec:	491a      	ldr	r1, [pc, #104]	; (8001658 <HAL_RCC_OscConfig+0x348>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_RCC_OscConfig+0x34c>)
 80015f4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2513      	movs	r5, #19
 80015fc:	197c      	adds	r4, r7, r5
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fa16 	bl	8000a30 <HAL_InitTick>
 8001604:	0003      	movs	r3, r0
 8001606:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001608:	197b      	adds	r3, r7, r5
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d060      	beq.n	80016d2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001610:	197b      	adds	r3, r7, r5
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	e1f2      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03f      	beq.n	800169e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0049      	lsls	r1, r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fa46 	bl	8000abc <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001634:	e018      	b.n	8001668 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001636:	f7ff fa41 	bl	8000abc <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d911      	bls.n	8001668 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1d9      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
 8001648:	40021000 	.word	0x40021000
 800164c:	fffeffff 	.word	0xfffeffff
 8001650:	fffbffff 	.word	0xfffbffff
 8001654:	ffffe0ff 	.word	0xffffe0ff
 8001658:	08003298 	.word	0x08003298
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004
 8001664:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001668:	4bc9      	ldr	r3, [pc, #804]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d0e0      	beq.n	8001636 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001674:	4bc6      	ldr	r3, [pc, #792]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4ac6      	ldr	r2, [pc, #792]	; (8001994 <HAL_RCC_OscConfig+0x684>)
 800167a:	4013      	ands	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	4bc3      	ldr	r3, [pc, #780]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001688:	4bc1      	ldr	r3, [pc, #772]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	0a19      	lsrs	r1, r3, #8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	061a      	lsls	r2, r3, #24
 8001696:	4bbe      	ldr	r3, [pc, #760]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	e019      	b.n	80016d2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800169e:	4bbc      	ldr	r3, [pc, #752]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4bbb      	ldr	r3, [pc, #748]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80016a4:	49bc      	ldr	r1, [pc, #752]	; (8001998 <HAL_RCC_OscConfig+0x688>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fa07 	bl	8000abc <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b4:	f7ff fa02 	bl	8000abc <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e19a      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016c6:	4bb2      	ldr	r3, [pc, #712]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2208      	movs	r2, #8
 80016d8:	4013      	ands	r3, r2
 80016da:	d036      	beq.n	800174a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d019      	beq.n	8001718 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e4:	4baa      	ldr	r3, [pc, #680]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80016e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e8:	4ba9      	ldr	r3, [pc, #676]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f9e4 	bl	8000abc <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff f9df 	bl	8000abc <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e177      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800170c:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800170e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d0f1      	beq.n	80016fa <HAL_RCC_OscConfig+0x3ea>
 8001716:	e018      	b.n	800174a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b9d      	ldr	r3, [pc, #628]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800171a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171c:	4b9c      	ldr	r3, [pc, #624]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800171e:	2101      	movs	r1, #1
 8001720:	438a      	bics	r2, r1
 8001722:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff f9ca 	bl	8000abc <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff f9c5 	bl	8000abc <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e15d      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001740:	4b93      	ldr	r3, [pc, #588]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d1f1      	bne.n	800172e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2204      	movs	r2, #4
 8001750:	4013      	ands	r3, r2
 8001752:	d100      	bne.n	8001756 <HAL_RCC_OscConfig+0x446>
 8001754:	e0ae      	b.n	80018b4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001756:	2023      	movs	r0, #35	; 0x23
 8001758:	183b      	adds	r3, r7, r0
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	055b      	lsls	r3, r3, #21
 8001766:	4013      	ands	r3, r2
 8001768:	d109      	bne.n	800177e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800176c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800176e:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0549      	lsls	r1, r1, #21
 8001774:	430a      	orrs	r2, r1
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001778:	183b      	adds	r3, r7, r0
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	4b87      	ldr	r3, [pc, #540]	; (800199c <HAL_RCC_OscConfig+0x68c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d11a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178a:	4b84      	ldr	r3, [pc, #528]	; (800199c <HAL_RCC_OscConfig+0x68c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b83      	ldr	r3, [pc, #524]	; (800199c <HAL_RCC_OscConfig+0x68c>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0049      	lsls	r1, r1, #1
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001798:	f7ff f990 	bl	8000abc <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a2:	f7ff f98b 	bl	8000abc <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e123      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b79      	ldr	r3, [pc, #484]	; (800199c <HAL_RCC_OscConfig+0x68c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_OscConfig+0x4cc>
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80017ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d0:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0049      	lsls	r1, r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	651a      	str	r2, [r3, #80]	; 0x50
 80017da:	e031      	b.n	8001840 <HAL_RCC_OscConfig+0x530>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x4ee>
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80017e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e8:	4b69      	ldr	r3, [pc, #420]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80017ea:	496b      	ldr	r1, [pc, #428]	; (8001998 <HAL_RCC_OscConfig+0x688>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	651a      	str	r2, [r3, #80]	; 0x50
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80017f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f4:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80017f6:	496a      	ldr	r1, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x690>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50
 80017fc:	e020      	b.n	8001840 <HAL_RCC_OscConfig+0x530>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	23a0      	movs	r3, #160	; 0xa0
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	429a      	cmp	r2, r3
 8001808:	d10e      	bne.n	8001828 <HAL_RCC_OscConfig+0x518>
 800180a:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800180c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	00c9      	lsls	r1, r1, #3
 8001814:	430a      	orrs	r2, r1
 8001816:	651a      	str	r2, [r3, #80]	; 0x50
 8001818:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800181a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181c:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	0049      	lsls	r1, r1, #1
 8001822:	430a      	orrs	r2, r1
 8001824:	651a      	str	r2, [r3, #80]	; 0x50
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x530>
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800182a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182c:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800182e:	495a      	ldr	r1, [pc, #360]	; (8001998 <HAL_RCC_OscConfig+0x688>)
 8001830:	400a      	ands	r2, r1
 8001832:	651a      	str	r2, [r3, #80]	; 0x50
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800183a:	4959      	ldr	r1, [pc, #356]	; (80019a0 <HAL_RCC_OscConfig+0x690>)
 800183c:	400a      	ands	r2, r1
 800183e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d015      	beq.n	8001874 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff f938 	bl	8000abc <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001850:	e009      	b.n	8001866 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff f933 	bl	8000abc <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4a51      	ldr	r2, [pc, #324]	; (80019a4 <HAL_RCC_OscConfig+0x694>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0ca      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001866:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d0ef      	beq.n	8001852 <HAL_RCC_OscConfig+0x542>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff f922 	bl	8000abc <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800187c:	e009      	b.n	8001892 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff f91d 	bl	8000abc <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a46      	ldr	r2, [pc, #280]	; (80019a4 <HAL_RCC_OscConfig+0x694>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0b4      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800189e:	2323      	movs	r3, #35	; 0x23
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80018aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80018ae:	493e      	ldr	r1, [pc, #248]	; (80019a8 <HAL_RCC_OscConfig+0x698>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d100      	bne.n	80018be <HAL_RCC_OscConfig+0x5ae>
 80018bc:	e09d      	b.n	80019fa <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5b6>
 80018c4:	e076      	b.n	80019b4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d145      	bne.n	800195a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_RCC_OscConfig+0x69c>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff f8ef 	bl	8000abc <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f8ea 	bl	8000abc <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e082      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	049b      	lsls	r3, r3, #18
 80018fe:	4013      	ands	r3, r2
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x6a0>)
 8001908:	4013      	ands	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	431a      	orrs	r2, r3
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800191e:	430a      	orrs	r2, r1
 8001920:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0449      	lsls	r1, r1, #17
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f8c4 	bl	8000abc <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff f8bf 	bl	8000abc <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e057      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	049b      	lsls	r3, r3, #18
 8001954:	4013      	ands	r3, r2
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x62a>
 8001958:	e04f      	b.n	80019fa <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001960:	4912      	ldr	r1, [pc, #72]	; (80019ac <HAL_RCC_OscConfig+0x69c>)
 8001962:	400a      	ands	r2, r1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff f8a9 	bl	8000abc <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f8a4 	bl	8000abc <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e03c      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001982:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	049b      	lsls	r3, r3, #18
 800198a:	4013      	ands	r3, r2
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x660>
 800198e:	e034      	b.n	80019fa <HAL_RCC_OscConfig+0x6ea>
 8001990:	40021000 	.word	0x40021000
 8001994:	ffff1fff 	.word	0xffff1fff
 8001998:	fffffeff 	.word	0xfffffeff
 800199c:	40007000 	.word	0x40007000
 80019a0:	fffffbff 	.word	0xfffffbff
 80019a4:	00001388 	.word	0x00001388
 80019a8:	efffffff 	.word	0xefffffff
 80019ac:	feffffff 	.word	0xfeffffff
 80019b0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x6f4>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	025b      	lsls	r3, r3, #9
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d10f      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	23f0      	movs	r3, #240	; 0xf0
 80019da:	039b      	lsls	r3, r3, #14
 80019dc:	401a      	ands	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	23c0      	movs	r3, #192	; 0xc0
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b00a      	add	sp, #40	; 0x28
 8001a02:	bdb0      	pop	{r4, r5, r7, pc}
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e128      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b96      	ldr	r3, [pc, #600]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d91e      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4393      	bics	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	4b90      	ldr	r3, [pc, #576]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f83e 	bl	8000abc <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff f839 	bl	8000abc <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a8a      	ldr	r2, [pc, #552]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e109      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b87      	ldr	r3, [pc, #540]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a72:	4b83      	ldr	r3, [pc, #524]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	22f0      	movs	r2, #240	; 0xf0
 8001a78:	4393      	bics	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b7f      	ldr	r3, [pc, #508]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
 8001a90:	e089      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a9a:	4b79      	ldr	r3, [pc, #484]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	029b      	lsls	r3, r3, #10
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d120      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0e1      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ab2:	4b73      	ldr	r3, [pc, #460]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	049b      	lsls	r3, r3, #18
 8001aba:	4013      	ands	r3, r2
 8001abc:	d114      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0d5      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d106      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aca:	4b6d      	ldr	r3, [pc, #436]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d109      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0ca      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ad8:	4b69      	ldr	r3, [pc, #420]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0c2      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae8:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2203      	movs	r2, #3
 8001aee:	4393      	bics	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4b62      	ldr	r3, [pc, #392]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7fe ffde 	bl	8000abc <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d111      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f7fe ffd5 	bl	8000abc <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0a5      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b22:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	220c      	movs	r2, #12
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d1ef      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x106>
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d111      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7fe ffbf 	bl	8000abc <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a4d      	ldr	r2, [pc, #308]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e08f      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4e:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	220c      	movs	r2, #12
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d1ef      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x132>
 8001b5a:	e024      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d11b      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b66:	f7fe ffa9 	bl	8000abc <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a42      	ldr	r2, [pc, #264]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e079      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d1ef      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x15e>
 8001b86:	e00e      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7fe ff98 	bl	8000abc <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e068      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d21e      	bcs.n	8001bf2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4393      	bics	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc6:	f7fe ff79 	bl	8000abc <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	e009      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7fe ff74 	bl	8000abc <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e044      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d1ee      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <HAL_RCC_ClockConfig+0x27c>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2208      	movs	r2, #8
 8001c16:	4013      	ands	r3, r2
 8001c18:	d00a      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_RCC_ClockConfig+0x280>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	00da      	lsls	r2, r3, #3
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c30:	f000 f832 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c34:	0001      	movs	r1, r0
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x278>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	4013      	ands	r3, r2
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x284>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	000a      	movs	r2, r1
 8001c46:	40da      	lsrs	r2, r3
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_RCC_ClockConfig+0x288>)
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_RCC_ClockConfig+0x28c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	250b      	movs	r5, #11
 8001c52:	197c      	adds	r4, r7, r5
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe feeb 	bl	8000a30 <HAL_InitTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c5e:	197b      	adds	r3, r7, r5
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c66:	197b      	adds	r3, r7, r5
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	40021000 	.word	0x40021000
 8001c84:	fffff8ff 	.word	0xfffff8ff
 8001c88:	ffffc7ff 	.word	0xffffc7ff
 8001c8c:	08003298 	.word	0x08003298
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b08e      	sub	sp, #56	; 0x38
 8001c9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d014      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cae:	d900      	bls.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001cb0:	e07b      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x112>
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x24>
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cba:	e076      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001cc6:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001cca:	e07c      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cd0:	e079      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd2:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x144>)
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cd6:	e076      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	0c9a      	lsrs	r2, r3, #18
 8001cdc:	230f      	movs	r3, #15
 8001cde:	401a      	ands	r2, r3
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001ce2:	5c9b      	ldrb	r3, [r3, r2]
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	0d9a      	lsrs	r2, r3, #22
 8001cea:	2303      	movs	r3, #3
 8001cec:	4013      	ands	r3, r2
 8001cee:	3301      	adds	r3, #1
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d01a      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	4a35      	ldr	r2, [pc, #212]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x144>)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	69b8      	ldr	r0, [r7, #24]
 8001d0c:	69f9      	ldr	r1, [r7, #28]
 8001d0e:	f7fe faa7 	bl	8000260 <__aeabi_lmul>
 8001d12:	0002      	movs	r2, r0
 8001d14:	000b      	movs	r3, r1
 8001d16:	0010      	movs	r0, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f7fe fa7b 	bl	8000220 <__aeabi_uldivmod>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	000b      	movs	r3, r1
 8001d2e:	0013      	movs	r3, r2
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
 8001d32:	e037      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d01a      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	68b8      	ldr	r0, [r7, #8]
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	f7fe fa87 	bl	8000260 <__aeabi_lmul>
 8001d52:	0002      	movs	r2, r0
 8001d54:	000b      	movs	r3, r1
 8001d56:	0010      	movs	r0, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f7fe fa5b 	bl	8000220 <__aeabi_uldivmod>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	000b      	movs	r3, r1
 8001d6e:	0013      	movs	r3, r2
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
 8001d72:	e017      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	0018      	movs	r0, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f7fe fa6e 	bl	8000260 <__aeabi_lmul>
 8001d84:	0002      	movs	r2, r0
 8001d86:	000b      	movs	r3, r1
 8001d88:	0010      	movs	r0, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	001c      	movs	r4, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	001d      	movs	r5, r3
 8001d94:	0022      	movs	r2, r4
 8001d96:	002b      	movs	r3, r5
 8001d98:	f7fe fa42 	bl	8000220 <__aeabi_uldivmod>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	000b      	movs	r3, r1
 8001da0:	0013      	movs	r3, r2
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da8:	e00d      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	3301      	adds	r3, #1
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b00e      	add	sp, #56	; 0x38
 8001dce:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	003d0900 	.word	0x003d0900
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	017d7840 	.word	0x017d7840
 8001de0:	080032b0 	.word	0x080032b0

08001de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff2 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e00:	0001      	movs	r1, r0
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	2207      	movs	r2, #7
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	40d9      	lsrs	r1, r3
 8001e12:	000b      	movs	r3, r1
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	080032a8 	.word	0x080032a8

08001e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e28:	f7ff ffdc 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e2c:	0001      	movs	r1, r0
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0adb      	lsrs	r3, r3, #11
 8001e34:	2207      	movs	r2, #7
 8001e36:	4013      	ands	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	40d9      	lsrs	r1, r3
 8001e3e:	000b      	movs	r3, r1
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	080032a8 	.word	0x080032a8

08001e50 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e58:	2017      	movs	r0, #23
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d100      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001e6a:	e0c2      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	055b      	lsls	r3, r3, #21
 8001e74:	4013      	ands	r3, r2
 8001e76:	d109      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	4b7e      	ldr	r3, [pc, #504]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0549      	lsls	r1, r1, #21
 8001e82:	430a      	orrs	r2, r1
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d11a      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e98:	4b77      	ldr	r3, [pc, #476]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	0049      	lsls	r1, r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe fe09 	bl	8000abc <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	e008      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7fe fe04 	bl	8000abc <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0d4      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ece:	4b69      	ldr	r3, [pc, #420]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	039b      	lsls	r3, r3, #14
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	039b      	lsls	r3, r3, #14
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d013      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	23c0      	movs	r3, #192	; 0xc0
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d10a      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001efc:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	401a      	ands	r2, r3
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0ac      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f12:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f16:	23c0      	movs	r3, #192	; 0xc0
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03b      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	23c0      	movs	r3, #192	; 0xc0
 8001f2a:	029b      	lsls	r3, r3, #10
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d033      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d02e      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f42:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f4c:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	0309      	lsls	r1, r1, #12
 8001f52:	430a      	orrs	r2, r1
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f5c:	4948      	ldr	r1, [pc, #288]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f62:	4b44      	ldr	r3, [pc, #272]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d014      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fda3 	bl	8000abc <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f7a:	e009      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fd9e 	bl	8000abc <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	4a3f      	ldr	r2, [pc, #252]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e06d      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f90:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d0ef      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	23c0      	movs	r3, #192	; 0xc0
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	23c0      	movs	r3, #192	; 0xc0
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a35      	ldr	r2, [pc, #212]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	23c0      	movs	r3, #192	; 0xc0
 8001fbe:	039b      	lsls	r3, r3, #14
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	23c0      	movs	r3, #192	; 0xc0
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fdc:	2317      	movs	r3, #23
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fec:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001fee:	400a      	ands	r2, r1
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	220c      	movs	r2, #12
 8002002:	4393      	bics	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800200c:	430a      	orrs	r2, r1
 800200e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800202a:	430a      	orrs	r2, r1
 800202c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2208      	movs	r2, #8
 8002034:	4013      	ands	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800203e:	4013      	ands	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002048:	430a      	orrs	r2, r1
 800204a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	4013      	ands	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002066:	430a      	orrs	r2, r1
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b006      	add	sp, #24
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
 800207c:	fffcffff 	.word	0xfffcffff
 8002080:	fff7ffff 	.word	0xfff7ffff
 8002084:	00001388 	.word	0x00001388
 8002088:	ffcfffff 	.word	0xffcfffff
 800208c:	efffffff 	.word	0xefffffff
 8002090:	fffff3ff 	.word	0xfffff3ff
 8002094:	ffffcfff 	.word	0xffffcfff
 8002098:	fff3ffff 	.word	0xfff3ffff

0800209c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e044      	b.n	8002138 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2274      	movs	r2, #116	; 0x74
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe fbb9 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2224      	movs	r2, #36	; 0x24
 80020ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 fbce 	bl	8002880 <UART_SetConfig>
 80020e4:	0003      	movs	r3, r0
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e024      	b.n	8002138 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fe23 	bl	8002d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	490d      	ldr	r1, [pc, #52]	; (8002140 <HAL_UART_Init+0xa4>)
 800210a:	400a      	ands	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	212a      	movs	r1, #42	; 0x2a
 800211a:	438a      	bics	r2, r1
 800211c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f000 febb 	bl	8002eac <UART_CheckIdleState>
 8002136:	0003      	movs	r3, r0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}
 8002140:	ffffb7ff 	.word	0xffffb7ff

08002144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	1dbb      	adds	r3, r7, #6
 8002152:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002158:	2b20      	cmp	r3, #32
 800215a:	d000      	beq.n	800215e <HAL_UART_Transmit+0x1a>
 800215c:	e095      	b.n	800228a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_UART_Transmit+0x28>
 8002164:	1dbb      	adds	r3, r7, #6
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e08d      	b.n	800228c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	015b      	lsls	r3, r3, #5
 8002178:	429a      	cmp	r2, r3
 800217a:	d109      	bne.n	8002190 <HAL_UART_Transmit+0x4c>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2201      	movs	r2, #1
 8002188:	4013      	ands	r3, r2
 800218a:	d001      	beq.n	8002190 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e07d      	b.n	800228c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2274      	movs	r2, #116	; 0x74
 8002194:	5c9b      	ldrb	r3, [r3, r2]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_UART_Transmit+0x5a>
 800219a:	2302      	movs	r3, #2
 800219c:	e076      	b.n	800228c <HAL_UART_Transmit+0x148>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2274      	movs	r2, #116	; 0x74
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	2100      	movs	r1, #0
 80021ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2221      	movs	r2, #33	; 0x21
 80021b2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fc82 	bl	8000abc <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1dba      	adds	r2, r7, #6
 80021c0:	2150      	movs	r1, #80	; 0x50
 80021c2:	8812      	ldrh	r2, [r2, #0]
 80021c4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1dba      	adds	r2, r7, #6
 80021ca:	2152      	movs	r1, #82	; 0x52
 80021cc:	8812      	ldrh	r2, [r2, #0]
 80021ce:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	429a      	cmp	r2, r3
 80021da:	d108      	bne.n	80021ee <HAL_UART_Transmit+0xaa>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d104      	bne.n	80021ee <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	e003      	b.n	80021f6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2274      	movs	r2, #116	; 0x74
 80021fa:	2100      	movs	r1, #0
 80021fc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80021fe:	e02c      	b.n	800225a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	0013      	movs	r3, r2
 800220a:	2200      	movs	r2, #0
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	f000 fe95 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d001      	beq.n	800221a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e038      	b.n	800228c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	001a      	movs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	05d2      	lsls	r2, r2, #23
 800222c:	0dd2      	lsrs	r2, r2, #23
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	3302      	adds	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	e007      	b.n	8002248 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2252      	movs	r2, #82	; 0x52
 800224c:	5a9b      	ldrh	r3, [r3, r2]
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b299      	uxth	r1, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2252      	movs	r2, #82	; 0x52
 8002258:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2252      	movs	r2, #82	; 0x52
 800225e:	5a9b      	ldrh	r3, [r3, r2]
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1cc      	bne.n	8002200 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	0013      	movs	r3, r2
 8002270:	2200      	movs	r2, #0
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	f000 fe62 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d001      	beq.n	8002280 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e005      	b.n	800228c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800228a:	2302      	movs	r3, #2
  }
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b008      	add	sp, #32
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b0ab      	sub	sp, #172	; 0xac
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	22a4      	movs	r2, #164	; 0xa4
 80022a4:	18b9      	adds	r1, r7, r2
 80022a6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	20a0      	movs	r0, #160	; 0xa0
 80022b0:	1839      	adds	r1, r7, r0
 80022b2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	219c      	movs	r1, #156	; 0x9c
 80022bc:	1879      	adds	r1, r7, r1
 80022be:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022c0:	0011      	movs	r1, r2
 80022c2:	18bb      	adds	r3, r7, r2
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a99      	ldr	r2, [pc, #612]	; (800252c <HAL_UART_IRQHandler+0x298>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	2298      	movs	r2, #152	; 0x98
 80022cc:	18bc      	adds	r4, r7, r2
 80022ce:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80022d0:	18bb      	adds	r3, r7, r2
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d114      	bne.n	8002302 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2220      	movs	r2, #32
 80022de:	4013      	ands	r3, r2
 80022e0:	d00f      	beq.n	8002302 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2220      	movs	r2, #32
 80022e8:	4013      	ands	r3, r2
 80022ea:	d00a      	beq.n	8002302 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d100      	bne.n	80022f6 <HAL_UART_IRQHandler+0x62>
 80022f4:	e298      	b.n	8002828 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	0010      	movs	r0, r2
 80022fe:	4798      	blx	r3
      }
      return;
 8002300:	e292      	b.n	8002828 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002302:	2398      	movs	r3, #152	; 0x98
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d100      	bne.n	800230e <HAL_UART_IRQHandler+0x7a>
 800230c:	e114      	b.n	8002538 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800230e:	239c      	movs	r3, #156	; 0x9c
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d106      	bne.n	8002328 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800231a:	23a0      	movs	r3, #160	; 0xa0
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a83      	ldr	r2, [pc, #524]	; (8002530 <HAL_UART_IRQHandler+0x29c>)
 8002322:	4013      	ands	r3, r2
 8002324:	d100      	bne.n	8002328 <HAL_UART_IRQHandler+0x94>
 8002326:	e107      	b.n	8002538 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002328:	23a4      	movs	r3, #164	; 0xa4
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	4013      	ands	r3, r2
 8002332:	d012      	beq.n	800235a <HAL_UART_IRQHandler+0xc6>
 8002334:	23a0      	movs	r3, #160	; 0xa0
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4013      	ands	r3, r2
 8002340:	d00b      	beq.n	800235a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	589b      	ldr	r3, [r3, r2]
 8002350:	2201      	movs	r2, #1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800235a:	23a4      	movs	r3, #164	; 0xa4
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d011      	beq.n	800238a <HAL_UART_IRQHandler+0xf6>
 8002366:	239c      	movs	r3, #156	; 0x9c
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	d00b      	beq.n	800238a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2202      	movs	r2, #2
 8002378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	589b      	ldr	r3, [r3, r2]
 8002380:	2204      	movs	r2, #4
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800238a:	23a4      	movs	r3, #164	; 0xa4
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2204      	movs	r2, #4
 8002392:	4013      	ands	r3, r2
 8002394:	d011      	beq.n	80023ba <HAL_UART_IRQHandler+0x126>
 8002396:	239c      	movs	r3, #156	; 0x9c
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d00b      	beq.n	80023ba <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2204      	movs	r2, #4
 80023a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	589b      	ldr	r3, [r3, r2]
 80023b0:	2202      	movs	r2, #2
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023ba:	23a4      	movs	r3, #164	; 0xa4
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2208      	movs	r2, #8
 80023c2:	4013      	ands	r3, r2
 80023c4:	d017      	beq.n	80023f6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023c6:	23a0      	movs	r3, #160	; 0xa0
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4013      	ands	r3, r2
 80023d0:	d105      	bne.n	80023de <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80023d2:	239c      	movs	r3, #156	; 0x9c
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023dc:	d00b      	beq.n	80023f6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2208      	movs	r2, #8
 80023e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	589b      	ldr	r3, [r3, r2]
 80023ec:	2208      	movs	r2, #8
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023f6:	23a4      	movs	r3, #164	; 0xa4
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4013      	ands	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_UART_IRQHandler+0x198>
 8002404:	23a0      	movs	r3, #160	; 0xa0
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	04db      	lsls	r3, r3, #19
 800240e:	4013      	ands	r3, r2
 8002410:	d00c      	beq.n	800242c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	589b      	ldr	r3, [r3, r2]
 8002422:	2220      	movs	r2, #32
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	589b      	ldr	r3, [r3, r2]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d100      	bne.n	8002438 <HAL_UART_IRQHandler+0x1a4>
 8002436:	e1f9      	b.n	800282c <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002438:	23a4      	movs	r3, #164	; 0xa4
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2220      	movs	r2, #32
 8002440:	4013      	ands	r3, r2
 8002442:	d00e      	beq.n	8002462 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002444:	23a0      	movs	r3, #160	; 0xa0
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2220      	movs	r2, #32
 800244c:	4013      	ands	r3, r2
 800244e:	d008      	beq.n	8002462 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	0010      	movs	r0, r2
 8002460:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2280      	movs	r2, #128	; 0x80
 8002466:	589b      	ldr	r3, [r3, r2]
 8002468:	2194      	movs	r1, #148	; 0x94
 800246a:	187a      	adds	r2, r7, r1
 800246c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2240      	movs	r2, #64	; 0x40
 8002476:	4013      	ands	r3, r2
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d004      	beq.n	8002486 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800247c:	187b      	adds	r3, r7, r1
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2228      	movs	r2, #40	; 0x28
 8002482:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002484:	d047      	beq.n	8002516 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fe1b 	bl	80030c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	4013      	ands	r3, r2
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d137      	bne.n	800250c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800249c:	f3ef 8310 	mrs	r3, PRIMASK
 80024a0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80024a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a4:	2090      	movs	r0, #144	; 0x90
 80024a6:	183a      	adds	r2, r7, r0
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024b0:	f383 8810 	msr	PRIMASK, r3
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2140      	movs	r1, #64	; 0x40
 80024c2:	438a      	bics	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ce:	f383 8810 	msr	PRIMASK, r3
}
 80024d2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d012      	beq.n	8002502 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <HAL_UART_IRQHandler+0x2a0>)
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7fe fc0f 	bl	8000d0c <HAL_DMA_Abort_IT>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d01a      	beq.n	8002528 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	0018      	movs	r0, r3
 80024fe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002500:	e012      	b.n	8002528 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0018      	movs	r0, r3
 8002506:	f000 f9a7 	bl	8002858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250a:	e00d      	b.n	8002528 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f000 f9a2 	bl	8002858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002514:	e008      	b.n	8002528 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f99d 	bl	8002858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	2100      	movs	r1, #0
 8002524:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002526:	e181      	b.n	800282c <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002528:	46c0      	nop			; (mov r8, r8)
    return;
 800252a:	e17f      	b.n	800282c <HAL_UART_IRQHandler+0x598>
 800252c:	0000080f 	.word	0x0000080f
 8002530:	04000120 	.word	0x04000120
 8002534:	08003189 	.word	0x08003189

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	2b01      	cmp	r3, #1
 800253e:	d000      	beq.n	8002542 <HAL_UART_IRQHandler+0x2ae>
 8002540:	e133      	b.n	80027aa <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002542:	23a4      	movs	r3, #164	; 0xa4
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2210      	movs	r2, #16
 800254a:	4013      	ands	r3, r2
 800254c:	d100      	bne.n	8002550 <HAL_UART_IRQHandler+0x2bc>
 800254e:	e12c      	b.n	80027aa <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002550:	23a0      	movs	r3, #160	; 0xa0
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2210      	movs	r2, #16
 8002558:	4013      	ands	r3, r2
 800255a:	d100      	bne.n	800255e <HAL_UART_IRQHandler+0x2ca>
 800255c:	e125      	b.n	80027aa <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2210      	movs	r2, #16
 8002564:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2240      	movs	r2, #64	; 0x40
 800256e:	4013      	ands	r3, r2
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d000      	beq.n	8002576 <HAL_UART_IRQHandler+0x2e2>
 8002574:	e09d      	b.n	80026b2 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	217e      	movs	r1, #126	; 0x7e
 8002580:	187b      	adds	r3, r7, r1
 8002582:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002584:	187b      	adds	r3, r7, r1
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d100      	bne.n	800258e <HAL_UART_IRQHandler+0x2fa>
 800258c:	e150      	b.n	8002830 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2258      	movs	r2, #88	; 0x58
 8002592:	5a9b      	ldrh	r3, [r3, r2]
 8002594:	187a      	adds	r2, r7, r1
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d300      	bcc.n	800259e <HAL_UART_IRQHandler+0x30a>
 800259c:	e148      	b.n	8002830 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	187a      	adds	r2, r7, r1
 80025a2:	215a      	movs	r1, #90	; 0x5a
 80025a4:	8812      	ldrh	r2, [r2, #0]
 80025a6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2220      	movs	r2, #32
 80025b2:	4013      	ands	r3, r2
 80025b4:	d16e      	bne.n	8002694 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025be:	67bb      	str	r3, [r7, #120]	; 0x78
 80025c0:	2301      	movs	r3, #1
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	f383 8810 	msr	PRIMASK, r3
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	499a      	ldr	r1, [pc, #616]	; (8002840 <HAL_UART_IRQHandler+0x5ac>)
 80025d8:	400a      	ands	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	f383 8810 	msr	PRIMASK, r3
}
 80025e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e8:	f3ef 8310 	mrs	r3, PRIMASK
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f0:	677b      	str	r3, [r7, #116]	; 0x74
 80025f2:	2301      	movs	r3, #1
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f8:	f383 8810 	msr	PRIMASK, r3
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	438a      	bics	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002614:	f383 8810 	msr	PRIMASK, r3
}
 8002618:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261a:	f3ef 8310 	mrs	r3, PRIMASK
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002620:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002622:	673b      	str	r3, [r7, #112]	; 0x70
 8002624:	2301      	movs	r3, #1
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262a:	f383 8810 	msr	PRIMASK, r3
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	438a      	bics	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002646:	f383 8810 	msr	PRIMASK, r3
}
 800264a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002658:	f3ef 8310 	mrs	r3, PRIMASK
 800265c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800265e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002660:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002662:	2301      	movs	r3, #1
 8002664:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002668:	f383 8810 	msr	PRIMASK, r3
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2110      	movs	r1, #16
 800267a:	438a      	bics	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002680:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002684:	f383 8810 	msr	PRIMASK, r3
}
 8002688:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	0018      	movs	r0, r3
 8002690:	f7fe fafc 	bl	8000c8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2258      	movs	r2, #88	; 0x58
 8002698:	5a9a      	ldrh	r2, [r3, r2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	215a      	movs	r1, #90	; 0x5a
 800269e:	5a5b      	ldrh	r3, [r3, r1]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f8dc 	bl	8002868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026b0:	e0be      	b.n	8002830 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2258      	movs	r2, #88	; 0x58
 80026b6:	5a99      	ldrh	r1, [r3, r2]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	225a      	movs	r2, #90	; 0x5a
 80026bc:	5a9b      	ldrh	r3, [r3, r2]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	208e      	movs	r0, #142	; 0x8e
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	1a8a      	subs	r2, r1, r2
 80026c6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	225a      	movs	r2, #90	; 0x5a
 80026cc:	5a9b      	ldrh	r3, [r3, r2]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d100      	bne.n	80026d6 <HAL_UART_IRQHandler+0x442>
 80026d4:	e0ae      	b.n	8002834 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d100      	bne.n	80026e0 <HAL_UART_IRQHandler+0x44c>
 80026de:	e0a9      	b.n	8002834 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e0:	f3ef 8310 	mrs	r3, PRIMASK
 80026e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80026e6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e8:	2488      	movs	r4, #136	; 0x88
 80026ea:	193a      	adds	r2, r7, r4
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	2301      	movs	r3, #1
 80026f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f383 8810 	msr	PRIMASK, r3
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	494f      	ldr	r1, [pc, #316]	; (8002844 <HAL_UART_IRQHandler+0x5b0>)
 8002706:	400a      	ands	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	193b      	adds	r3, r7, r4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002718:	f3ef 8310 	mrs	r3, PRIMASK
 800271c:	61bb      	str	r3, [r7, #24]
  return(result);
 800271e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002720:	2484      	movs	r4, #132	; 0x84
 8002722:	193a      	adds	r2, r7, r4
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	2301      	movs	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f383 8810 	msr	PRIMASK, r3
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	438a      	bics	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	193b      	adds	r3, r7, r4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002762:	f3ef 8310 	mrs	r3, PRIMASK
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276a:	2480      	movs	r4, #128	; 0x80
 800276c:	193a      	adds	r2, r7, r4
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	2301      	movs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	f383 8810 	msr	PRIMASK, r3
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2110      	movs	r1, #16
 8002788:	438a      	bics	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	193b      	adds	r3, r7, r4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	f383 8810 	msr	PRIMASK, r3
}
 8002798:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800279a:	183b      	adds	r3, r7, r0
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 f860 	bl	8002868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027a8:	e044      	b.n	8002834 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027aa:	23a4      	movs	r3, #164	; 0xa4
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	035b      	lsls	r3, r3, #13
 80027b4:	4013      	ands	r3, r2
 80027b6:	d010      	beq.n	80027da <HAL_UART_IRQHandler+0x546>
 80027b8:	239c      	movs	r3, #156	; 0x9c
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	03db      	lsls	r3, r3, #15
 80027c2:	4013      	ands	r3, r2
 80027c4:	d009      	beq.n	80027da <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	0352      	lsls	r2, r2, #13
 80027ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fd1a 	bl	800320c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027d8:	e02f      	b.n	800283a <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80027da:	23a4      	movs	r3, #164	; 0xa4
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00f      	beq.n	8002806 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80027e6:	23a0      	movs	r3, #160	; 0xa0
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	4013      	ands	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01e      	beq.n	8002838 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	0010      	movs	r0, r2
 8002802:	4798      	blx	r3
    }
    return;
 8002804:	e018      	b.n	8002838 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002806:	23a4      	movs	r3, #164	; 0xa4
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	4013      	ands	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_UART_IRQHandler+0x5a6>
 8002812:	23a0      	movs	r3, #160	; 0xa0
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	4013      	ands	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fcc8 	bl	80031b6 <UART_EndTransmit_IT>
    return;
 8002826:	e008      	b.n	800283a <HAL_UART_IRQHandler+0x5a6>
      return;
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	e006      	b.n	800283a <HAL_UART_IRQHandler+0x5a6>
    return;
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	e004      	b.n	800283a <HAL_UART_IRQHandler+0x5a6>
      return;
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	e002      	b.n	800283a <HAL_UART_IRQHandler+0x5a6>
      return;
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	e000      	b.n	800283a <HAL_UART_IRQHandler+0x5a6>
    return;
 8002838:	46c0      	nop			; (mov r8, r8)
  }

}
 800283a:	46bd      	mov	sp, r7
 800283c:	b02b      	add	sp, #172	; 0xac
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	fffffeff 	.word	0xfffffeff
 8002844:	fffffedf 	.word	0xfffffedf

08002848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	000a      	movs	r2, r1
 8002872:	1cbb      	adds	r3, r7, #2
 8002874:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b08e      	sub	sp, #56	; 0x38
 8002884:	af00      	add	r7, sp, #0
 8002886:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002888:	231a      	movs	r3, #26
 800288a:	2218      	movs	r2, #24
 800288c:	4694      	mov	ip, r2
 800288e:	44bc      	add	ip, r7
 8002890:	4463      	add	r3, ip
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	431a      	orrs	r2, r3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4abc      	ldr	r2, [pc, #752]	; (8002ba8 <UART_SetConfig+0x328>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4ab8      	ldr	r2, [pc, #736]	; (8002bac <UART_SetConfig+0x32c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4ab2      	ldr	r2, [pc, #712]	; (8002bb0 <UART_SetConfig+0x330>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d004      	beq.n	80028f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f2:	4313      	orrs	r3, r2
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4aad      	ldr	r2, [pc, #692]	; (8002bb4 <UART_SetConfig+0x334>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4aa9      	ldr	r2, [pc, #676]	; (8002bb8 <UART_SetConfig+0x338>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d136      	bne.n	8002984 <UART_SetConfig+0x104>
 8002916:	4ba9      	ldr	r3, [pc, #676]	; (8002bbc <UART_SetConfig+0x33c>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	220c      	movs	r2, #12
 800291c:	4013      	ands	r3, r2
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d020      	beq.n	8002964 <UART_SetConfig+0xe4>
 8002922:	d827      	bhi.n	8002974 <UART_SetConfig+0xf4>
 8002924:	2b08      	cmp	r3, #8
 8002926:	d00d      	beq.n	8002944 <UART_SetConfig+0xc4>
 8002928:	d824      	bhi.n	8002974 <UART_SetConfig+0xf4>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <UART_SetConfig+0xb4>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d010      	beq.n	8002954 <UART_SetConfig+0xd4>
 8002932:	e01f      	b.n	8002974 <UART_SetConfig+0xf4>
 8002934:	231b      	movs	r3, #27
 8002936:	2218      	movs	r2, #24
 8002938:	4694      	mov	ip, r2
 800293a:	44bc      	add	ip, r7
 800293c:	4463      	add	r3, ip
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e06f      	b.n	8002a24 <UART_SetConfig+0x1a4>
 8002944:	231b      	movs	r3, #27
 8002946:	2218      	movs	r2, #24
 8002948:	4694      	mov	ip, r2
 800294a:	44bc      	add	ip, r7
 800294c:	4463      	add	r3, ip
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e067      	b.n	8002a24 <UART_SetConfig+0x1a4>
 8002954:	231b      	movs	r3, #27
 8002956:	2218      	movs	r2, #24
 8002958:	4694      	mov	ip, r2
 800295a:	44bc      	add	ip, r7
 800295c:	4463      	add	r3, ip
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e05f      	b.n	8002a24 <UART_SetConfig+0x1a4>
 8002964:	231b      	movs	r3, #27
 8002966:	2218      	movs	r2, #24
 8002968:	4694      	mov	ip, r2
 800296a:	44bc      	add	ip, r7
 800296c:	4463      	add	r3, ip
 800296e:	2208      	movs	r2, #8
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e057      	b.n	8002a24 <UART_SetConfig+0x1a4>
 8002974:	231b      	movs	r3, #27
 8002976:	2218      	movs	r2, #24
 8002978:	4694      	mov	ip, r2
 800297a:	44bc      	add	ip, r7
 800297c:	4463      	add	r3, ip
 800297e:	2210      	movs	r2, #16
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e04f      	b.n	8002a24 <UART_SetConfig+0x1a4>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a89      	ldr	r2, [pc, #548]	; (8002bb0 <UART_SetConfig+0x330>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d143      	bne.n	8002a16 <UART_SetConfig+0x196>
 800298e:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <UART_SetConfig+0x33c>)
 8002990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002992:	23c0      	movs	r3, #192	; 0xc0
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4013      	ands	r3, r2
 8002998:	22c0      	movs	r2, #192	; 0xc0
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	4293      	cmp	r3, r2
 800299e:	d02a      	beq.n	80029f6 <UART_SetConfig+0x176>
 80029a0:	22c0      	movs	r2, #192	; 0xc0
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d82e      	bhi.n	8002a06 <UART_SetConfig+0x186>
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d012      	beq.n	80029d6 <UART_SetConfig+0x156>
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d826      	bhi.n	8002a06 <UART_SetConfig+0x186>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <UART_SetConfig+0x146>
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	00d2      	lsls	r2, r2, #3
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d010      	beq.n	80029e6 <UART_SetConfig+0x166>
 80029c4:	e01f      	b.n	8002a06 <UART_SetConfig+0x186>
 80029c6:	231b      	movs	r3, #27
 80029c8:	2218      	movs	r2, #24
 80029ca:	4694      	mov	ip, r2
 80029cc:	44bc      	add	ip, r7
 80029ce:	4463      	add	r3, ip
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e026      	b.n	8002a24 <UART_SetConfig+0x1a4>
 80029d6:	231b      	movs	r3, #27
 80029d8:	2218      	movs	r2, #24
 80029da:	4694      	mov	ip, r2
 80029dc:	44bc      	add	ip, r7
 80029de:	4463      	add	r3, ip
 80029e0:	2202      	movs	r2, #2
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e01e      	b.n	8002a24 <UART_SetConfig+0x1a4>
 80029e6:	231b      	movs	r3, #27
 80029e8:	2218      	movs	r2, #24
 80029ea:	4694      	mov	ip, r2
 80029ec:	44bc      	add	ip, r7
 80029ee:	4463      	add	r3, ip
 80029f0:	2204      	movs	r2, #4
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e016      	b.n	8002a24 <UART_SetConfig+0x1a4>
 80029f6:	231b      	movs	r3, #27
 80029f8:	2218      	movs	r2, #24
 80029fa:	4694      	mov	ip, r2
 80029fc:	44bc      	add	ip, r7
 80029fe:	4463      	add	r3, ip
 8002a00:	2208      	movs	r2, #8
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e00e      	b.n	8002a24 <UART_SetConfig+0x1a4>
 8002a06:	231b      	movs	r3, #27
 8002a08:	2218      	movs	r2, #24
 8002a0a:	4694      	mov	ip, r2
 8002a0c:	44bc      	add	ip, r7
 8002a0e:	4463      	add	r3, ip
 8002a10:	2210      	movs	r2, #16
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e006      	b.n	8002a24 <UART_SetConfig+0x1a4>
 8002a16:	231b      	movs	r3, #27
 8002a18:	2218      	movs	r2, #24
 8002a1a:	4694      	mov	ip, r2
 8002a1c:	44bc      	add	ip, r7
 8002a1e:	4463      	add	r3, ip
 8002a20:	2210      	movs	r2, #16
 8002a22:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a61      	ldr	r2, [pc, #388]	; (8002bb0 <UART_SetConfig+0x330>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d000      	beq.n	8002a30 <UART_SetConfig+0x1b0>
 8002a2e:	e088      	b.n	8002b42 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a30:	231b      	movs	r3, #27
 8002a32:	2218      	movs	r2, #24
 8002a34:	4694      	mov	ip, r2
 8002a36:	44bc      	add	ip, r7
 8002a38:	4463      	add	r3, ip
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d01d      	beq.n	8002a7c <UART_SetConfig+0x1fc>
 8002a40:	dc20      	bgt.n	8002a84 <UART_SetConfig+0x204>
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d015      	beq.n	8002a72 <UART_SetConfig+0x1f2>
 8002a46:	dc1d      	bgt.n	8002a84 <UART_SetConfig+0x204>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <UART_SetConfig+0x1d2>
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d005      	beq.n	8002a5c <UART_SetConfig+0x1dc>
 8002a50:	e018      	b.n	8002a84 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a52:	f7ff f9d1 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8002a56:	0003      	movs	r3, r0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a5a:	e01d      	b.n	8002a98 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a5c:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <UART_SetConfig+0x33c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	4013      	ands	r3, r2
 8002a64:	d002      	beq.n	8002a6c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a66:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <UART_SetConfig+0x340>)
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a6a:	e015      	b.n	8002a98 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002a6c:	4b55      	ldr	r3, [pc, #340]	; (8002bc4 <UART_SetConfig+0x344>)
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a70:	e012      	b.n	8002a98 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a72:	f7ff f911 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8002a76:	0003      	movs	r3, r0
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a7a:	e00d      	b.n	8002a98 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a82:	e009      	b.n	8002a98 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a88:	231a      	movs	r3, #26
 8002a8a:	2218      	movs	r2, #24
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	44bc      	add	ip, r7
 8002a90:	4463      	add	r3, ip
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
        break;
 8002a96:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d100      	bne.n	8002aa0 <UART_SetConfig+0x220>
 8002a9e:	e139      	b.n	8002d14 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	189b      	adds	r3, r3, r2
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d305      	bcc.n	8002abc <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d907      	bls.n	8002acc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002abc:	231a      	movs	r3, #26
 8002abe:	2218      	movs	r2, #24
 8002ac0:	4694      	mov	ip, r2
 8002ac2:	44bc      	add	ip, r7
 8002ac4:	4463      	add	r3, ip
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e123      	b.n	8002d14 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	000b      	movs	r3, r1
 8002ada:	0e1b      	lsrs	r3, r3, #24
 8002adc:	0010      	movs	r0, r2
 8002ade:	0205      	lsls	r5, r0, #8
 8002ae0:	431d      	orrs	r5, r3
 8002ae2:	000b      	movs	r3, r1
 8002ae4:	021c      	lsls	r4, r3, #8
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68b8      	ldr	r0, [r7, #8]
 8002af4:	68f9      	ldr	r1, [r7, #12]
 8002af6:	1900      	adds	r0, r0, r4
 8002af8:	4169      	adcs	r1, r5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f7fd fb8a 	bl	8000220 <__aeabi_uldivmod>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	000b      	movs	r3, r1
 8002b10:	0013      	movs	r3, r2
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b16:	23c0      	movs	r3, #192	; 0xc0
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d309      	bcc.n	8002b32 <UART_SetConfig+0x2b2>
 8002b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	035b      	lsls	r3, r3, #13
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d204      	bcs.n	8002b32 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	e0f0      	b.n	8002d14 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002b32:	231a      	movs	r3, #26
 8002b34:	2218      	movs	r2, #24
 8002b36:	4694      	mov	ip, r2
 8002b38:	44bc      	add	ip, r7
 8002b3a:	4463      	add	r3, ip
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e0e8      	b.n	8002d14 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d000      	beq.n	8002b50 <UART_SetConfig+0x2d0>
 8002b4e:	e087      	b.n	8002c60 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002b50:	231b      	movs	r3, #27
 8002b52:	2218      	movs	r2, #24
 8002b54:	4694      	mov	ip, r2
 8002b56:	44bc      	add	ip, r7
 8002b58:	4463      	add	r3, ip
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d835      	bhi.n	8002bcc <UART_SetConfig+0x34c>
 8002b60:	009a      	lsls	r2, r3, #2
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <UART_SetConfig+0x348>)
 8002b64:	18d3      	adds	r3, r2, r3
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6a:	f7ff f945 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b72:	e035      	b.n	8002be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7ff f956 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b7c:	e030      	b.n	8002be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <UART_SetConfig+0x33c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	4013      	ands	r3, r2
 8002b86:	d002      	beq.n	8002b8e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <UART_SetConfig+0x340>)
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b8c:	e028      	b.n	8002be0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <UART_SetConfig+0x344>)
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b92:	e025      	b.n	8002be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b94:	f7ff f880 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b9c:	e020      	b.n	8002be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ba4:	e01c      	b.n	8002be0 <UART_SetConfig+0x360>
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	efff69f3 	.word	0xefff69f3
 8002bac:	ffffcfff 	.word	0xffffcfff
 8002bb0:	40004800 	.word	0x40004800
 8002bb4:	fffff4ff 	.word	0xfffff4ff
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	003d0900 	.word	0x003d0900
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	080032bc 	.word	0x080032bc
      default:
        pclk = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002bd0:	231a      	movs	r3, #26
 8002bd2:	2218      	movs	r2, #24
 8002bd4:	4694      	mov	ip, r2
 8002bd6:	44bc      	add	ip, r7
 8002bd8:	4463      	add	r3, ip
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
        break;
 8002bde:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d100      	bne.n	8002be8 <UART_SetConfig+0x368>
 8002be6:	e095      	b.n	8002d14 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	005a      	lsls	r2, r3, #1
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	18d2      	adds	r2, r2, r3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	0010      	movs	r0, r2
 8002bfc:	f7fd fa84 	bl	8000108 <__udivsi3>
 8002c00:	0003      	movs	r3, r0
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	2b0f      	cmp	r3, #15
 8002c0a:	d921      	bls.n	8002c50 <UART_SetConfig+0x3d0>
 8002c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	025b      	lsls	r3, r3, #9
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d21c      	bcs.n	8002c50 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	200e      	movs	r0, #14
 8002c1c:	2418      	movs	r4, #24
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	181b      	adds	r3, r3, r0
 8002c22:	210f      	movs	r1, #15
 8002c24:	438a      	bics	r2, r1
 8002c26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2207      	movs	r2, #7
 8002c30:	4013      	ands	r3, r2
 8002c32:	b299      	uxth	r1, r3
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	181b      	adds	r3, r3, r0
 8002c38:	193a      	adds	r2, r7, r4
 8002c3a:	1812      	adds	r2, r2, r0
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	193a      	adds	r2, r7, r4
 8002c48:	1812      	adds	r2, r2, r0
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	e061      	b.n	8002d14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002c50:	231a      	movs	r3, #26
 8002c52:	2218      	movs	r2, #24
 8002c54:	4694      	mov	ip, r2
 8002c56:	44bc      	add	ip, r7
 8002c58:	4463      	add	r3, ip
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e059      	b.n	8002d14 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c60:	231b      	movs	r3, #27
 8002c62:	2218      	movs	r2, #24
 8002c64:	4694      	mov	ip, r2
 8002c66:	44bc      	add	ip, r7
 8002c68:	4463      	add	r3, ip
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d822      	bhi.n	8002cb6 <UART_SetConfig+0x436>
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <UART_SetConfig+0x4b4>)
 8002c74:	18d3      	adds	r3, r2, r3
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7a:	f7ff f8bd 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c82:	e022      	b.n	8002cca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c84:	f7ff f8ce 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c8c:	e01d      	b.n	8002cca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <UART_SetConfig+0x4b8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2210      	movs	r2, #16
 8002c94:	4013      	ands	r3, r2
 8002c96:	d002      	beq.n	8002c9e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c98:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <UART_SetConfig+0x4bc>)
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c9c:	e015      	b.n	8002cca <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <UART_SetConfig+0x4c0>)
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ca2:	e012      	b.n	8002cca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca4:	f7fe fff8 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cac:	e00d      	b.n	8002cca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cb4:	e009      	b.n	8002cca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002cba:	231a      	movs	r3, #26
 8002cbc:	2218      	movs	r2, #24
 8002cbe:	4694      	mov	ip, r2
 8002cc0:	44bc      	add	ip, r7
 8002cc2:	4463      	add	r3, ip
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
        break;
 8002cc8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d021      	beq.n	8002d14 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	085a      	lsrs	r2, r3, #1
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	18d2      	adds	r2, r2, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0019      	movs	r1, r3
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	f7fd fa11 	bl	8000108 <__udivsi3>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	d909      	bls.n	8002d06 <UART_SetConfig+0x486>
 8002cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	025b      	lsls	r3, r3, #9
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d204      	bcs.n	8002d06 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	e006      	b.n	8002d14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002d06:	231a      	movs	r3, #26
 8002d08:	2218      	movs	r2, #24
 8002d0a:	4694      	mov	ip, r2
 8002d0c:	44bc      	add	ip, r7
 8002d0e:	4463      	add	r3, ip
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2200      	movs	r2, #0
 8002d18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d20:	231a      	movs	r3, #26
 8002d22:	2218      	movs	r2, #24
 8002d24:	4694      	mov	ip, r2
 8002d26:	44bc      	add	ip, r7
 8002d28:	4463      	add	r3, ip
 8002d2a:	781b      	ldrb	r3, [r3, #0]
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b00e      	add	sp, #56	; 0x38
 8002d32:	bdb0      	pop	{r4, r5, r7, pc}
 8002d34:	080032e0 	.word	0x080032e0
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	003d0900 	.word	0x003d0900
 8002d40:	00f42400 	.word	0x00f42400

08002d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2201      	movs	r2, #1
 8002d52:	4013      	ands	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <UART_AdvFeatureConfig+0x144>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <UART_AdvFeatureConfig+0x148>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2204      	movs	r2, #4
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a3b      	ldr	r2, [pc, #236]	; (8002e90 <UART_AdvFeatureConfig+0x14c>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2208      	movs	r2, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <UART_AdvFeatureConfig+0x150>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2210      	movs	r2, #16
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <UART_AdvFeatureConfig+0x154>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <UART_AdvFeatureConfig+0x158>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <UART_AdvFeatureConfig+0x15c>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	035b      	lsls	r3, r3, #13
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10b      	bne.n	8002e5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <UART_AdvFeatureConfig+0x160>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	4013      	ands	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <UART_AdvFeatureConfig+0x164>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  }
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	fffdffff 	.word	0xfffdffff
 8002e8c:	fffeffff 	.word	0xfffeffff
 8002e90:	fffbffff 	.word	0xfffbffff
 8002e94:	ffff7fff 	.word	0xffff7fff
 8002e98:	ffffefff 	.word	0xffffefff
 8002e9c:	ffffdfff 	.word	0xffffdfff
 8002ea0:	ffefffff 	.word	0xffefffff
 8002ea4:	ff9fffff 	.word	0xff9fffff
 8002ea8:	fff7ffff 	.word	0xfff7ffff

08002eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ebc:	f7fd fdfe 	bl	8000abc <HAL_GetTick>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d10c      	bne.n	8002eec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	0391      	lsls	r1, r2, #14
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <UART_CheckIdleState+0x8c>)
 8002edc:	9200      	str	r2, [sp, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f000 f82c 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d001      	beq.n	8002eec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e021      	b.n	8002f30 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d10c      	bne.n	8002f14 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	03d1      	lsls	r1, r2, #15
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <UART_CheckIdleState+0x8c>)
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f000 f818 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e00d      	b.n	8002f30 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2274      	movs	r2, #116	; 0x74
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b004      	add	sp, #16
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	01ffffff 	.word	0x01ffffff

08002f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b094      	sub	sp, #80	; 0x50
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4c:	e0a3      	b.n	8003096 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f50:	3301      	adds	r3, #1
 8002f52:	d100      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002f54:	e09f      	b.n	8003096 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fd fdb1 	bl	8000abc <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d13d      	bne.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f74:	647b      	str	r3, [r7, #68]	; 0x44
 8002f76:	2301      	movs	r3, #1
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	f383 8810 	msr	PRIMASK, r3
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	494c      	ldr	r1, [pc, #304]	; (80030c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	f383 8810 	msr	PRIMASK, r3
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa8:	2301      	movs	r3, #1
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	f383 8810 	msr	PRIMASK, r3
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	438a      	bics	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fca:	f383 8810 	msr	PRIMASK, r3
}
 8002fce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2274      	movs	r2, #116	; 0x74
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e067      	b.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d050      	beq.n	8003096 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	401a      	ands	r2, r3
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	429a      	cmp	r2, r3
 8003006:	d146      	bne.n	8003096 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003012:	f3ef 8310 	mrs	r3, PRIMASK
 8003016:	613b      	str	r3, [r7, #16]
  return(result);
 8003018:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301c:	2301      	movs	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f383 8810 	msr	PRIMASK, r3
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4923      	ldr	r1, [pc, #140]	; (80030c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003034:	400a      	ands	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003044:	f3ef 8310 	mrs	r3, PRIMASK
 8003048:	61fb      	str	r3, [r7, #28]
  return(result);
 800304a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
 800304e:	2301      	movs	r3, #1
 8003050:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	438a      	bics	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2274      	movs	r2, #116	; 0x74
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e010      	b.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	425a      	negs	r2, r3
 80030a6:	4153      	adcs	r3, r2
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	001a      	movs	r2, r3
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d100      	bne.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80030b4:	e74b      	b.n	8002f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b014      	add	sp, #80	; 0x50
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	fffffe5f 	.word	0xfffffe5f

080030c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08e      	sub	sp, #56	; 0x38
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030cc:	f3ef 8310 	mrs	r3, PRIMASK
 80030d0:	617b      	str	r3, [r7, #20]
  return(result);
 80030d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
 80030d6:	2301      	movs	r3, #1
 80030d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4925      	ldr	r1, [pc, #148]	; (8003184 <UART_EndRxTransfer+0xc0>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f383 8810 	msr	PRIMASK, r3
}
 80030fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003102:	623b      	str	r3, [r7, #32]
  return(result);
 8003104:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
 8003108:	2301      	movs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	438a      	bics	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	f383 8810 	msr	PRIMASK, r3
}
 800312e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003134:	2b01      	cmp	r3, #1
 8003136:	d118      	bne.n	800316a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003138:	f3ef 8310 	mrs	r3, PRIMASK
 800313c:	60bb      	str	r3, [r7, #8]
  return(result);
 800313e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003142:	2301      	movs	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2110      	movs	r1, #16
 800315a:	438a      	bics	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f383 8810 	msr	PRIMASK, r3
}
 8003168:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b00e      	add	sp, #56	; 0x38
 8003182:	bd80      	pop	{r7, pc}
 8003184:	fffffedf 	.word	0xfffffedf

08003188 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	225a      	movs	r2, #90	; 0x5a
 800319a:	2100      	movs	r1, #0
 800319c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2252      	movs	r2, #82	; 0x52
 80031a2:	2100      	movs	r1, #0
 80031a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff fb55 	bl	8002858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b004      	add	sp, #16
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031be:	f3ef 8310 	mrs	r3, PRIMASK
 80031c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80031c4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	2301      	movs	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f383 8810 	msr	PRIMASK, r3
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2140      	movs	r1, #64	; 0x40
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f383 8810 	msr	PRIMASK, r3
}
 80031ee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff fb22 	bl	8002848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b006      	add	sp, #24
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	2600      	movs	r6, #0
 8003220:	4d0c      	ldr	r5, [pc, #48]	; (8003254 <__libc_init_array+0x38>)
 8003222:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	2600      	movs	r6, #0
 800322e:	f000 f821 	bl	8003274 <_init>
 8003232:	4d0a      	ldr	r5, [pc, #40]	; (800325c <__libc_init_array+0x40>)
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <__libc_init_array+0x44>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	00b3      	lsls	r3, r6, #2
 8003242:	58eb      	ldr	r3, [r5, r3]
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	00b3      	lsls	r3, r6, #2
 800324c:	58eb      	ldr	r3, [r5, r3]
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	0800330c 	.word	0x0800330c
 8003258:	0800330c 	.word	0x0800330c
 800325c:	0800330c 	.word	0x0800330c
 8003260:	08003310 	.word	0x08003310

08003264 <memset>:
 8003264:	0003      	movs	r3, r0
 8003266:	1882      	adds	r2, r0, r2
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	7019      	strb	r1, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <_init>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr

08003280 <_fini>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr
